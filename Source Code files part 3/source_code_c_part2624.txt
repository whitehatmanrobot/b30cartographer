tbl -> SendFiles(This,pvFileArray)

#define IReplicationClient_DeleteFile(This,pszFile)	\
    (This)->lpVtbl -> DeleteFile(This,pszFile)

#define IReplicationClient_Commit(This)	\
    (This)->lpVtbl -> Commit(This)

#define IReplicationClient_Abort(This)	\
    (This)->lpVtbl -> Abort(This)

#define IReplicationClient_Disconnect(This)	\
    (This)->lpVtbl -> Disconnect(This)

#define IReplicationClient_GetExtendedErrorInfo(This,pvErrorArray)	\
    (This)->lpVtbl -> GetExtendedErrorInfo(This,pvErrorArray)

#define IReplicationClient_get_FastMode(This,pVal)	\
    (This)->lpVtbl -> get_FastMode(This,pVal)

#define IReplicationClient_put_FastMode(This,newVal)	\
    (This)->lpVtbl -> put_FastMode(This,newVal)

#define IReplicationClient_get_Force(This,pVal)	\
    (This)->lpVtbl -> get_Force(This,pVal)

#define IReplicationClient_put_Force(This,newVal)	\
    (This)->lpVtbl -> put_Force(This,newVal)

#define IReplicationClient_get_ACLs(This,pVal)	\
    (This)->lpVtbl -> get_ACLs(This,pVal)

#define IReplicationClient_put_ACLs(This,newVal)	\
    (This)->lpVtbl -> put_ACLs(This,newVal)

#define IReplicationClient_get_NumDestinations(This,pVal)	\
    (This)->lpVtbl -> get_NumDestinations(This,pVal)

#define IReplicationClient_get_SkipLockedFiles(This,pVal)	\
    (This)->lpVtbl -> get_SkipLockedFiles(This,pVal)

#define IReplicationClient_put_SkipLockedFiles(This,newVal)	\
    (This)->lpVtbl -> put_SkipLockedFiles(This,newVal)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IReplicationClient_Initialize_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [string][in] */ BSTR pszProject);


void __RPC_STUB IReplicationClient_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IReplicationClient_Connect_Proxy( 
    IReplicationClient __RPC_FAR * This);


void __RPC_STUB IReplicationClient_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IReplicationClient_SendFile_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [string][in] */ BSTR pszFile);


void __RPC_STUB IReplicationClient_SendFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IReplicationClient_SendFiles_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [in] */ VARIANT __RPC_FAR *pvFileArray);


void __RPC_STUB IReplicationClient_SendFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IReplicationClient_DeleteFile_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [string][in] */ BSTR pszFile);


void __RPC_STUB IReplicationClient_DeleteFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IReplicationClient_Commit_Proxy( 
    IReplicationClient __RPC_FAR * This);


void __RPC_STUB IReplicationClient_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IReplicationClient_Abort_Proxy( 
    IReplicationClient __RPC_FAR * This);


void __RPC_STUB IReplicationClient_Abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IReplicationClient_Disconnect_Proxy( 
    IReplicationClient __RPC_FAR * This);


void __RPC_STUB IReplicationClient_Disconnect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IReplicationClient_GetExtendedErrorInfo_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pvErrorArray);


void __RPC_STUB IReplicationClient_GetExtendedErrorInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IReplicationClient_get_FastMode_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pVal);


void __RPC_STUB IReplicationClient_get_FastMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IReplicationClient_put_FastMode_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [in] */ BOOL newVal);


void __RPC_STUB IReplicationClient_put_FastMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IReplicationClient_get_Force_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pVal);


void __RPC_STUB IReplicationClient_get_Force_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IReplicationClient_put_Force_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [in] */ BOOL newVal);


void __RPC_STUB IReplicationClient_put_Force_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IReplicationClient_get_ACLs_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pVal);


void __RPC_STUB IReplicationClient_get_ACLs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IReplicationClient_put_ACLs_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [in] */ BOOL newVal);


void __RPC_STUB IReplicationClient_put_ACLs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IReplicationClient_get_NumDestinations_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pVal);


void __RPC_STUB IReplicationClient_get_NumDestinations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IReplicationClient_get_SkipLockedFiles_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pVal);


void __RPC_STUB IReplicationClient_get_SkipLockedFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IReplicationClient_put_SkipLockedFiles_Proxy( 
    IReplicationClient __RPC_FAR * This,
    /* [in] */ BOOL newVal);


void __RPC_STUB IReplicationClient_put_SkipLockedFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IReplicationClient_INTERFACE_DEFINED__ */


#ifndef __IReplicationClientError_INTERFACE_DEFINED__
#define __IReplicationClientError_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IReplicationClientError
 * at Thu Apr 23 13:37:19 1998
 * using MIDL 3.01.75
 ****************************************/
/* [unique][helpstring][dual][uuid][object] */ 



EXTERN_C const IID IID_IReplicationClientError;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("414CC9F0-9F37-11d0-BADA-00C04FD7082F")
    IReplicationClientError : public IDispatch
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_ErrorCode( 
            /* [retval][out] */ VARIANT __RPC_FAR *pVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_ErrorCode( 
            /* [in] */ long newVal) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ VARIANT __RPC_FAR *pVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Destination( 
            /* [retval][out] */ VARIANT __RPC_FAR *pVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Destination( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ VARIANT __RPC_FAR *pVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_FileName( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Project( 
            /* [retval][out] */ VARIANT __RPC_FAR *pVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Project( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Source( 
            /* [retval][out] */ VARIANT __RPC_FAR *pVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Source( 
            /* [in] */ BSTR newVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IReplicationClientErrorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IReplicationClientError __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IReplicationClientError __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IReplicationClientError __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IReplicationClientError __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IReplicationClientError __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IReplicationClientError __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IReplicationClientError __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_ErrorCode )( 
            IReplicationClientError __RPC_FAR * This,
            /* [retval][out] */ VARIANT __RPC_FAR *pVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_ErrorCode )( 
            IReplicationClientError __RPC_FAR * This,
            /* [in] */ long newVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Description )( 
            IReplicationClientError __RPC_FAR * This,
            /* [retval][out] */ VARIANT __RPC_FAR *pVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Description )( 
            IReplicationClientError __RPC_FAR * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Destination )( 
            IReplicationClientError __RPC_FAR * This,
            /* [retval][out] */ VARIANT __RPC_FAR *pVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Destination )( 
            IReplicationClientError __RPC_FAR * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_FileName )( 
            IReplicationClientError __RPC_FAR * This,
            /* [retval][out] */ VARIANT __RPC_FAR *pVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_FileName )( 
            IReplicationClientError __RPC_FAR * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Project )( 
            IReplicationClientError __RPC_FAR * This,
            /* [retval][out] */ VARIANT __RPC_FAR *pVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Project )( 
            IReplicationClientError __RPC_FAR * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_Source )( 
            IReplicationClientError __RPC_FAR * This,
            /* [retval][out] */ VARIANT __RPC_FAR *pVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *put_Source )( 
            IReplicationClientError __RPC_FAR * This,
            /* [in] */ BSTR newVal);
        
        END_INTERFACE
    } IReplicationClientErrorVtbl;

    interface IReplicationClientError
    {
        CONST_VTBL struct IReplicationClientErrorVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IReplicationClientError_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IReplicationClientError_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IReplicationClientError_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IReplicationClientError_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IReplicationClientError_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IReplicationClientError_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IReplicationClientError_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IReplicationClientError_get_ErrorCode(This,pVal)	\
    (This)->lpVtbl -> get_ErrorCode(This,pVal)

#define IReplicationClientError_put_ErrorCode(This,newVal)	\
    (This)->lpVtbl -> put_ErrorCode(This,newVal)

#define IReplicationClientError_get_Description(This,pVal)	\
    (This)->lpVtbl -> get_Description(This,pVal)

#define IReplicationClientError_put_Description(This,newVal)	\
    (This)->lpVtbl -> put_Description(This,newVal)

#define IReplicationClientError_get_Destination(This,pVal)	\
    (This)->lpVtbl -> get_Destination(This,pVal)

#define IReplicationClientError_put_Destination(This,newVal)	\
    (This)->lpVtbl -> put_Destination(This,newVal)

#define IReplicationClientError_get_FileName(This,pVal)	\
    (This)->lpVtbl -> get_FileName(This,pVal)

#define IReplicationClientError_put_FileName(This,newVal)	\
    (This)->lpVtbl -> put_FileName(This,newVal)

#define IReplicationClientError_get_Project(This,pVal)	\
    (This)->lpVtbl -> get_Project(This,pVal)

#define IReplicationClientError_put_Project(This,newVal)	\
    (This)->lpVtbl -> put_Project(This,newVal)

#define IReplicationClientError_get_Source(This,pVal)	\
    (This)->lpVtbl -> get_Source(This,pVal)

#define IReplicationClientError_put_Source(This,newVal)	\
    (This)->lpVtbl -> put_Source(This,newVal)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IReplicationClientError_get_ErrorCode_Proxy( 
    IReplicationClientError __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pVal);


void __RPC_STUB IReplicationClientError_get_ErrorCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IReplicationClientError_put_ErrorCode_Proxy( 
    IReplicationClientError __RPC_FAR * This,
    /* [in] */ long newVal);


void __RPC_STUB IReplicationClientError_put_ErrorCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IReplicationClientError_get_Description_Proxy( 
    IReplicationClientError __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pVal);


void __RPC_STUB IReplicationClientError_get_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IReplicationClientError_put_Description_Proxy( 
    IReplicationClientError __RPC_FAR * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB IReplicationClientError_put_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IReplicationClientError_get_Destination_Proxy( 
    IReplicationClientError __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pVal);


void __RPC_STUB IReplicationClientError_get_Destination_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IReplicationClientError_put_Destination_Proxy( 
    IReplicationClientError __RPC_FAR * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB IReplicationClientError_put_Destination_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IReplicationClientError_get_FileName_Proxy( 
    IReplicationClientError __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pVal);


void __RPC_STUB IReplicationClientError_get_FileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IReplicationClientError_put_FileName_Proxy( 
    IReplicationClientError __RPC_FAR * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB IReplicationClientError_put_FileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IReplicationClientError_get_Project_Proxy( 
    IReplicationClientError __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pVal);


void __RPC_STUB IReplicationClientError_get_Project_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IReplicationClientError_put_Project_Proxy( 
    IReplicationClientError __RPC_FAR * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB IReplicationClientError_put_Project_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IReplicationClientError_get_Source_Proxy( 
    IReplicationClientError __RPC_FAR * This,
    /* [retval][out] */ VARIANT __RPC_FAR *pVal);


void __RPC_STUB IReplicationClientError_get_Source_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IReplicationClientError_put_Source_Proxy( 
    IReplicationClientError __RPC_FAR * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB IReplicationClientError_put_Source_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IReplicationClientError_INTERFACE_DEFINED__ */


#ifndef __IReplicationPostingAcceptor_INTERFACE_DEFINED__
#define __IReplicationPostingAcceptor_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IReplicationPostingAcceptor
 * at Thu Apr 23 13:37:19 1998
 * using MIDL 3.01.75
 ****************************************/
/* [unique][helpstring][dual][uuid][object] */ 



EXTERN_C const IID IID_IReplicationPostingAcceptor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    interface DECLSPEC_UUID("5163ce6b-1d76-11d1-a32b-0000f8014963")
    IReplicationPostingAcceptor : public IDispatch
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Get( 
            /* [string][in] */ BSTR pszParmName,
            /* [retval][out] */ VARIANT __RPC_FAR *pvParmValue) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Put( 
            /* [string][in] */ BSTR pszParmName,
            /* [in] */ VARIANT vParmValue) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Enum( 
            /* [out][in] */ VARIANT __RPC_FAR *pvIterator,
            /* [out][in] */ VARIANT __RPC_FAR *pvParmName,
            /* [retval][out] */ VARIANT __RPC_FAR *pvParmValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IReplicationPostingAcceptorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IReplicationPostingAcceptor __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IReplicationPostingAcceptor __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IReplicationPostingAcceptor __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfoCount )( 
            IReplicationPostingAcceptor __RPC_FAR * This,
            /* [out] */ UINT __RPC_FAR *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetTypeInfo )( 
            IReplicationPostingAcceptor __RPC_FAR * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo __RPC_FAR *__RPC_FAR *ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *GetIDsOfNames )( 
            IReplicationPostingAcceptor __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR __RPC_FAR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID __RPC_FAR *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Invoke )( 
            IReplicationPostingAcceptor __RPC_FAR * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS __RPC_FAR *pDispParams,
            /* [out] */ VARIANT __RPC_FAR *pVarResult,
            /* [out] */ EXCEPINFO __RPC_FAR *pExcepInfo,
            /* [out] */ UINT __RPC_FAR *puArgErr);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Get )( 
            IReplicationPostingAcceptor __RPC_FAR * This,
            /* [string][in] */ BSTR pszParmName,
            /* [retval][out] */ VARIANT __RPC_FAR *pvParmValue);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Put )( 
            IReplicationPostingAcceptor __RPC_FAR * This,
            /* [string][in] */ BSTR pszParmName,
            /* [in] */ VARIANT vParmValue);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Enum )( 
            IReplicationPostingAcceptor __RPC_FAR * This,
            /* [out][in] */ VARIANT __RPC_FAR *pvIterator,
            /* [out][in] */ VARIANT __RPC_FAR *pvParmName,
            /* [retval][out] */ VARIANT __RPC_FAR *pvParmValue);
        
        END_INTERFACE
    } IReplicationPostingAcceptorVtbl;

    interface IReplicationPostingAcceptor
    {
        CONST_VTBL struct IReplicationPostingAcceptorVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IReplicationPostingAcceptor_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IReplicationPostingAcceptor_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IReplicationPostingAcceptor_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IReplicationPostingAcceptor_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IReplicationPostingAcceptor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IReplicationPostingAcceptor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IReplicationPostingAcceptor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IReplicationPostingAcceptor_Get(This,pszParmName,pvParmValue)	\
    (This)->lpVtbl -> Get(This,pszParmName,pvParmValue)

#define IReplicationPostingAcceptor_Put(This,pszParmName,vParmValue)	\
    (This)->lpVtbl -> Put(This,pszParmName,vParmValue)

#define IReplicationPostingAcceptor_Enum(This,pvIterator,pvParmName,pvParmValue)	\
    (This)->lpVtbl -> Enum(This,pvIterator,pvParmName,pvParmValue)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IReplicationPostingAcceptor_Get_Proxy( 
    IReplicationPostingAcceptor __RPC_FAR * This,
    /* [string][in] */ BSTR pszParmName,
    /* [retval][out] */ VARIANT __RPC_FAR *pvParmValue);


void __RPC_STUB IReplicationPostingAcceptor_Get_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IReplicationPostingAcceptor_Put_Proxy( 
    IReplicationPostingAcceptor __RPC_FAR * This,
    /* [string][in] */ BSTR pszParmName,
    /* [in] */ VARIANT vParmValue);


void __RPC_STUB IReplicationPostingAcceptor_Put_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IReplicationPostingAcceptor_Enum_Proxy( 
    IReplicationPostingAcceptor __RPC_FAR * This,
    /* [out][in] */ VARIANT __RPC_FAR *pvIterator,
    /* [out][in] */ VARIANT __RPC_FAR *pvParmName,
    /* [retval][out] */ VARIANT __RPC_FAR *pvParmValue);


void __RPC_STUB IReplicationPostingAcceptor_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IReplicationPostingAcceptor_INTERFACE_DEFINED__ */



#ifndef __CRSAPILib_LIBRARY_DEFINED__
#define __CRSAPILib_LIBRARY_DEFINED__

/****************************************
 * Generated header for library: CRSAPILib
 * at Thu Apr 23 13:37:19 1998
 * using MIDL 3.01.75
 ****************************************/
/* [helpstring][version][uuid] */ 



EXTERN_C const IID LIBID_CRSAPILib;

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CReplicationServer;

class DECLSPEC_UUID("66D6D7ED-22D2-11D0-9B98-00C04FD5CD09")
CReplicationServer;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CReplicationProject;

class DECLSPEC_UUID("66D6D7F2-22D2-11D0-9B98-00C04FD5CD09")
CReplicationProject;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CReplicationInstance;

class DECLSPEC_UUID("66D6D7F7-22D2-11D0-9B98-00C04FD5CD09")
CReplicationInstance;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CReplicationRoute;

class DECLSPEC_UUID("66D6D7FC-22D2-11D0-9B98-00C04FD5CD09")
CReplicationRoute;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CReplicationClient;

class DECLSPEC_UUID("B24F0373-9692-11D0-BAD5-00C04FD7082F")
CReplicationClient;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CReplicationClientError;

class DECLSPEC_UUID("6AF9D110-9F37-11d0-BADA-00C04FD7082F")
CReplicationClientError;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CReplicationEventSinkConfig;

class DECLSPEC_UUID("66D6D7FD-22D2-11D0-9B98-00C04FD5CD09")
CReplicationEventSinkConfig;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CReplicationItem;

class DECLSPEC_UUID("66D6D7FE-22D2-11D0-9B98-00C04FD5CD09")
CReplicationItem;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CReplicationSchedule;

class DECLSPEC_UUID("4E28F5F0-1B3C-11d1-8C8C-00C04FC2D3B9")
CReplicationSchedule;
#endif

#ifdef __cplusplus
EXTERN_C const CLSID CLSID_CReplicationPostingAcceptor;

class DECLSPEC_UUID("055f638a-1d77-11d1-a32b-0000f8014963")
CReplicationPostingAcceptor;
#endif
#endif /* __CRSAPILib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long __RPC_FAR *, unsigned long            , BSTR __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  BSTR_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  BSTR_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, BSTR __RPC_FAR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long __RPC_FAR *, BSTR __RPC_FAR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long __RPC_FAR *, unsigned long            , VARIANT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  VARIANT_UserMarshal(  unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, VARIANT __RPC_FAR * ); 
unsigned char __RPC_FAR * __RPC_USER  VARIANT_UserUnmarshal(unsigned long __RPC_FAR *, unsigned char __RPC_FAR *, VARIANT __RPC_FAR * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long __RPC_FAR *, VARIANT __RPC_FAR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\CrsTypes.h ===
//====================================================================
//                                                                     
//   Microsoft Site Server v3.00                                   
//                                                                     
//   Copyright (c) 1997 - 1999 Microsoft Corporation.  All rights reserved.   
//   THIS CODE AND INFORMATION IS PROVIDED 'AS IS' WITHOUT WARRANTY OF
//   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
//   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
//   PARTICULAR PURPOSE.
//=====================================================================

// Module Name:
//
//    crstypes.h
//
// Abstract:
//
//    This module defines the common structures and prototypes for the   
//    Content Deployment Service API (ProgId = CrsApi)
//
// Revision History:
//

#ifndef CRSTYPES_INCLUDED
#define CRSTYPES_INCLUDED

typedef enum CRS_PROJECT_CREATION
{
   CREATE_NEW_PROJECT = 0x1,
   OPEN_EXISTING_PROJECT = 0x2
} CRS_PROJECT_CREATION;

typedef enum CRS_SERVER_TYPES
{
   STAGER = 0x1,
   ENDPOINT = 0x2
} CRS_SERVER_TYPES;

typedef enum CRS_SCHEDULE_ACTION
{
   CRS_SCHEDULE_APPLY = 0x1,
   CRS_SCHEDULE_REPLICATE = 0x2
} CRS_SCHEDULE_ACTION;

#define MAX_PATH    260
#define MAX_PROJECT 50
#define MAX_LOCATION 300
#define MAX_DESTINATION_BUFFER 0x1000
#define MAX_ROUTE_NAME 50
#define MAX_REPLID	40


#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif

#define NOREF(x) x=x

// @DOC 

#define RF_NO_DELETE			1		
#define RF_REPLICATE_ACLS		(1 << 1)	
#define RF_NO_DATA				(1 << 2)	
#define RF_FORCE_REPL			(1 << 3)	
#define RF_PERMIT_TREE			(1 << 4)
#define RF_IN_PROC				(1 << 5)	
#define RF_INCREMENTAL			(1 << 6)	
#define RF_FASTMODE				(1 << 7)
#define RF_ON_DIR_CHANGE		(1 << 8)
#define RF_AUTO_ROUTE			(1 << 9)
#define RF_ON_NOTIFY			(1 << 10)
#define RF_NO_CHAIN				(1 << 11)
#define RF_EXCLUDE_ALL			(1 << 12)
#define RF_UNINSTALL			(1 << 13)
#define RF_ACLS_ONLY			(1 << 14)

#define RF_DELETE				(1 << 16)
#define RF_NO_REPLICATE_ACLS    (1 << 17)
#define RF_DATA					(1 << 18)	
#define RF_NO_FORCE_REPL		(1 << 19)	
#define RF_NO_PERMIT_TREE		(1 << 20)
#define RF_NO_IN_PROC			(1 << 21)
#define RF_NO_INCREMENTAL		(1 << 22)	
#define RF_NO_FASTMODE			(1 << 23)
#define RF_NO_ON_DIR_CHANGE		(1 << 24)
#define RF_NO_AUTO_ROUTE		(1 << 25)
#define RF_NO_ON_NOTIFY         (1 << 26)
#define RF_CHAIN				(1 << 27)
#define RF_NO_ACLS_ONLY			(1 << 30)


#define REPL_STATE_EMPTY	 0  
#define REPL_STATE_STARTING  1
#define REPL_STATE_RUNNING   2
#define REPL_STATE_COMPLETE  3
#define REPL_STATE_ABORTED   4
#define REPL_STATE_CANCELED	 5
#define REPL_STATE_RECEIVING 6
#define REPL_STATE_PENDING   7
#define REPL_STATE_PARTIAL   8



#define CP_PROPOGATE_ALL		 1


#define	 MAX_PARM_STRING	300

// PARMSET flags
#define PARM_ADD_STRINGS	1 // valid only if dwType is REG_MULTI_SZ, adds strings to the value if they're not already there
#define PARM_DEL_STRINGS	2 // valid only if dwType is REG_MULTI_SZ, removes strings from the value if they're there
#define PARM_DEL_EMPTYPROJ	6 // deletes project if the REG_MULTI_SZ parm becomes empty, implies PARM_DEL_STRINGS
// SetProject flags
#define SET_PROJ_CHAIN             1 // chains the SetProject call via specified destination
#define SET_PROJ_CHAIN_ALL_ROUTES  3 // chains the SetProject call via all of project's destinations, implies SET_CHAIN


typedef DWORD REPL_INSTANCE; // @type REPLICATION_INSTANCE | Identifier of a particular replication instance. Needed to call any function which manipulates or queries and existing replication


// @struct REPLICATION_COUNTERS | Counters used to record replication information. Returned by QueryReplication.
typedef struct _REPL_COUNTERS
{
	DWORD dwStartStamp;		      //@field Start Time
	DWORD dwFilesSent; 		      //@field The Total files that have been sent across this connection.
	DWORD dwFilesReceived;	      //@field The total files that have been received across this connection.
	DWORD dwFilesMatched;         //@field The number of files that matched and did not need to be sent
	DWORD dwFilesErrored;         //@field The number of files which had errors
	DWORD dwBytesSent;            //@field The total bytes sent across this connection.
	DWORD dwBytesReceived;        //@field The total bytes received across this connection.
	DWORD dwBytesMatched;         //@field The total bytes which matched and did not need to be sent.
	DWORD dwBytesErrored;         //@field The total bytes errored

	DWORD dwDirectoriesProcessed; //@field The number of directories processed

} REPL_COUNTERS;


//@struct REPLICATION_INFO_W | Contains information about a particular replication instance. 
// Is returned by <f QueryReplication> and <f EnumReplications>.
typedef struct _REPL_INFO
{
	REPL_INSTANCE hInstance; //@field The instance id for this replication.
	WCHAR cProject[MAX_PROJECT];    //@field The project associated with this replication.
	DWORD dwState;                  //@field The Current State of this replication
	// @flag REPL_STATE_EMPTY	  | This Replication Info structure is empty.
	// @flag REPL_STATE_STARTING  | The replication is a startup state.
	// @flag REPL_STATE_RUNNING   | The replication is currently running.
	// @flag REPL_STATE_COMPLETE  | The replication is complete.
	// @flag REPL_STATE_ABORTED   | The replication aborted due to an error.
	// @flag REPL_STATE_CANCLED	  | The replication was canceled.
	// @flag REPL_STATE_RECEIVING | The replication is receiving data.										
	// @flag REPL_STATE_PENDING   | The replication is pending start. 										
	DWORD dwError;	                // @field An error code if the replication aborted
	DWORD dwFlags;		            //@field Flags this replication was started with.
// @flag RF_NO_DELETE         | Turns of Delete Processing
// @flag RF_REPLICATE_ACLS    | Replicates ACL's
// @flag RF_NO_DATA           | Skips Replicating Data, will only replicate directories.
// @flag RF_FORCE_REPL        | Forces data to be replicated without checking first
// @flag RF_IN_PROC	          | Causes the StartReplication API to run in process (note: This blocks!)
// @flag RF_INCREMENTAL       | Runs replication in "Incremental" mode, meaning that only files which have been locally detected to have been modified since the last replication are checked and sent.
// @flag RF_FASTMODE          | Uses Unframed Protocol for enhanced performance over faster/secure links.
// @flag RF_ON_DIR_CHANGE     | Turns on monitor mode.  This will monitor a directory for changes and then replicate them to the destination.
// @flag RF_AUTO_ROUTE		  | Uses information in the routing table to determine destinations servers.
// @flag RF_NOTIFY            | Turns on notify mode.  Replications occur based on notifications from the IAcceptNotify COM interface.
// @flag RF_PERMIT_TREE       | Applies ACLs on the directory structure to the files beneath it.
	
} REPL_INFO;


//@struct ROUTE_LIST_W | Returns the list of routes defined for a server.
// Is returned by <f ListRoutes>.
typedef struct _ROUTE_INFO
{
	WCHAR cRouteName[MAX_PROJECT];		//@field Name of the route.
	WCHAR cDestinations[MAX_LOCATION];  //@field Multi-string list of destinations (format "dest1\0dest2\0\0")
	WCHAR cBaseDirectory[MAX_LOCATION]; //@field Base directory for projects using this route.

} ROUTE_INFO;

//@struct PARMSET_W | Defines a Parameter for <f CreateNewProject>, <f SetProject>, and <f QueryProject>.
typedef struct _PARAM
{
	DWORD dwType;					   //@field Parameter Type (Registry type values, REG_SZ, etc).
	DWORD dwFlags;                     //@field Parameter flags
	DWORD dwSize;                      //@field Size of value parameter
	WCHAR cParmName[MAX_PARM_STRING];  //@field Parameter Name
	WCHAR cParmValue[MAX_PARM_STRING]; //@field Parameter Value
}PARAM;


//@struct PARM_LIST | Contains a list of parameters to pass with <f CreateNewProject>, <f SetProject>, <f QueryProject>.
typedef struct _PARAM_LIST
{
	DWORD dwNumParms; // @field The number of Parameters in this list
	PARAM Params[1]; // @field An array of Parameters
} PARAM_LIST;


#define CRS_STOP_SERVICE    (1<<1)
#define CRS_PAUSE_SERVICE   (1<<2)
#define CRS_RESUME_SERVICE  (1<<3)
#define CRS_START_SERVICE   (1<<4)

#define CRS_USER_ACCESS   ( KEY_READ )
#define CRS_ADMIN_ACCESS  ( KEY_ALL_ACCESS | READ_CONTROL )

#define CRS_SZ          ( REG_SZ )
#define CRS_MULTI_SZ    ( REG_MULTI_SZ )
#define CRS_DWORD       ( REG_DWORD )
#define CRS_DATE        ( REG_BINARY )


#define CRS_END_OF_LIST (0xffffffff)

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\Cwindow.h ===
//+---------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright 1992 - 1997 Microsoft Corporation.
//
//  File:       cwindow.h
//
//  Contents:   definition of a virtual window class
//
//  Classes:    CHlprWindow
//
//  Functions:  WindowProc
//
//  History:    4-12-94   stevebl   Created
//
//----------------------------------------------------------------------------


#ifndef __CWINDOW_H__
#define __CWINDOW_H__

#include <windows.h>

#ifdef __cplusplus
extern "C" {
#endif

LRESULT CALLBACK WindowProc(
    HWND hwnd,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);

#ifdef __cplusplus
}

//+---------------------------------------------------------------------------
//
//  Class:      CHlprWindow
//
//  Purpose:    virtual base class for wrapping a window
//
//  Interface:  Create     -- analagous to Windows' CreateWindow function
//              WindowProc -- pure virtual WindowProc for the window
//              ~CHlprWindow   -- destructor
//              CHlprWindow    -- constructor
//
//  History:    4-12-94   stevebl   Created
//
//  Notes:      This class allows a window to be cleanly wrapped in a
//              c++ class.  Specifically, it provides a way for a c++ class
//              to use one of its methods as a WindowProc, giving it a "this"
//              pointer and allowing it to have direct access to all of its
//              private members.
//
//----------------------------------------------------------------------------

class CHlprWindow
{
public:
    HWND Create(
        LPCTSTR lpszClassName,
        LPCTSTR lpszWindowName,
        DWORD dwStyle,
        int x,
        int y,
        int nWidth,
        int nHeight,
        HWND hwndParent,
        HMENU hmenu,
        HINSTANCE hinst);
    virtual LRESULT WindowProc(UINT uMsg, WPARAM wParam, LPARAM lParam) = 0;
    virtual ~CHlprWindow(){};
    HWND GetHwnd(void)
    {
        return(_hwnd);
    }
    CHlprWindow()
    {
        _hwnd = NULL;
        _hInstance = NULL;
    };
protected:
friend LRESULT CALLBACK ::WindowProc(
    HWND hwnd,
    UINT uMsg,
    WPARAM wParam,
    LPARAM lParam);
    HWND _hwnd;
    HINSTANCE _hInstance;
};

#endif

#endif //__CWINDOW_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\ctype.h ===
/***
*ctype.h - character conversion macros and ctype macros
*
*       Copyright (c) 1985-2000, Microsoft Corporation. All rights reserved.
*
*Purpose:
*       Defines macros for character classification/conversion.
*       [ANSI/System V]
*
*       [Public]
*
****/

#if     _MSC_VER > 1000
#pragma once
#endif

#ifndef _INC_CTYPE
#define _INC_CTYPE

#if     !defined(_WIN32)
#error ERROR: Only Win32 target supported!
#endif


#ifdef  __cplusplus
extern "C" {
#endif



/* Define _CRTIMP */

#ifndef _CRTIMP
#ifdef  _DLL
#define _CRTIMP __declspec(dllimport)
#else   /* ndef _DLL */
#define _CRTIMP
#endif  /* _DLL */
#endif  /* _CRTIMP */


/* Define __cdecl for non-Microsoft compilers */

#if     ( !defined(_MSC_VER) && !defined(__cdecl) )
#define __cdecl
#endif

#ifndef _WCHAR_T_DEFINED
typedef unsigned short wchar_t;
#define _WCHAR_T_DEFINED
#endif

#ifndef _WCTYPE_T_DEFINED
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
#define _WCTYPE_T_DEFINED
#endif

#ifndef WEOF
#define WEOF (wint_t)(0xFFFF)
#endif

#ifndef _CTYPE_DISABLE_MACROS
_CRTIMP extern const unsigned short _ctype[];
_CRTIMP extern const unsigned short _wctype[];
_CRTIMP extern const unsigned short *_pctype;
_CRTIMP extern const wctype_t *_pwctype;
#endif  /* _CTYPE_DISABLE_MACROS */




/* set bit masks for the possible character types */

#define _UPPER          0x1     /* upper case letter */
#define _LOWER          0x2     /* lower case letter */
#define _DIGIT          0x4     /* digit[0-9] */
#define _SPACE          0x8     /* tab, carriage return, newline, */
                                /* vertical tab or form feed */
#define _PUNCT          0x10    /* punctuation character */
#define _CONTROL        0x20    /* control character */
#define _BLANK          0x40    /* space char */
#define _HEX            0x80    /* hexadecimal digit */

#define _LEADBYTE       0x8000                  /* multibyte leadbyte */
#define _ALPHA          (0x0100|_UPPER|_LOWER)  /* alphabetic character */


/* character classification function prototypes */

#ifndef _CTYPE_DEFINED

_CRTIMP int __cdecl _isctype(int, int);
_CRTIMP int __cdecl isalpha(int);
_CRTIMP int __cdecl isupper(int);
_CRTIMP int __cdecl islower(int);
_CRTIMP int __cdecl isdigit(int);
_CRTIMP int __cdecl isxdigit(int);
_CRTIMP int __cdecl isspace(int);
_CRTIMP int __cdecl ispunct(int);
_CRTIMP int __cdecl isalnum(int);
_CRTIMP int __cdecl isprint(int);
_CRTIMP int __cdecl isgraph(int);
_CRTIMP int __cdecl iscntrl(int);
_CRTIMP int __cdecl toupper(int);
_CRTIMP int __cdecl tolower(int);
_CRTIMP int __cdecl _tolower(int);
_CRTIMP int __cdecl _toupper(int);
_CRTIMP int __cdecl __isascii(int);
_CRTIMP int __cdecl __toascii(int);
_CRTIMP int __cdecl __iscsymf(int);
_CRTIMP int __cdecl __iscsym(int);
#define _CTYPE_DEFINED
#endif

#ifndef _WCTYPE_DEFINED

/* wide function prototypes, also declared in wchar.h  */

/* character classification function prototypes */

_CRTIMP int __cdecl iswalpha(wint_t);
_CRTIMP int __cdecl iswupper(wint_t);
_CRTIMP int __cdecl iswlower(wint_t);
_CRTIMP int __cdecl iswdigit(wint_t);
_CRTIMP int __cdecl iswxdigit(wint_t);
_CRTIMP int __cdecl iswspace(wint_t);
_CRTIMP int __cdecl iswpunct(wint_t);
_CRTIMP int __cdecl iswalnum(wint_t);
_CRTIMP int __cdecl iswprint(wint_t);
_CRTIMP int __cdecl iswgraph(wint_t);
_CRTIMP int __cdecl iswcntrl(wint_t);
_CRTIMP int __cdecl iswascii(wint_t);
_CRTIMP int __cdecl isleadbyte(int);

_CRTIMP wchar_t __cdecl towupper(wchar_t);
_CRTIMP wchar_t __cdecl towlower(wchar_t);

_CRTIMP int __cdecl iswctype(wint_t, wctype_t);

/* --------- The following functions are OBSOLETE --------- */
_CRTIMP int __cdecl is_wctype(wint_t, wctype_t);
/*  --------- The preceding functions are OBSOLETE --------- */

#define _WCTYPE_DEFINED
#endif

/* the character classification macro definitions */

#ifndef _CTYPE_DISABLE_MACROS

/*
 * Maximum number of bytes in multi-byte character in the current locale
 * (also defined in stdlib.h).
 */
#ifndef MB_CUR_MAX

#define MB_CUR_MAX __mb_cur_max
_CRTIMP extern int __mb_cur_max;

#endif  /* MB_CUR_MAX */

/* Introduced to detect error when character testing functions are called
 * with illegal input of integer.
 */
#ifdef _DEBUG
_CRTIMP int __cdecl _chvalidator(int, int);
#define __chvalidchk(a,b)       _chvalidator(a,b)
#else
#define __chvalidchk(a,b)       (_pctype[a] & (b))
#endif



#ifndef _MT
#ifndef __cplusplus
#define isalpha(_c)     (MB_CUR_MAX > 1 ? _isctype(_c,_ALPHA) : __chvalidchk(_c, _ALPHA))
#define isupper(_c)     (MB_CUR_MAX > 1 ? _isctype(_c,_UPPER) : __chvalidchk(_c, _UPPER))
#define islower(_c)     (MB_CUR_MAX > 1 ? _isctype(_c,_LOWER) : __chvalidchk(_c, _LOWER))
#define isdigit(_c)     (MB_CUR_MAX > 1 ? _isctype(_c,_DIGIT) : __chvalidchk(_c, _DIGIT))
#define isxdigit(_c)    (MB_CUR_MAX > 1 ? _isctype(_c,_HEX)   : __chvalidchk(_c, _HEX))
#define isspace(_c)     (MB_CUR_MAX > 1 ? _isctype(_c,_SPACE) : __chvalidchk(_c, _SPACE))
#define ispunct(_c)     (MB_CUR_MAX > 1 ? _isctype(_c,_PUNCT) : __chvalidchk(_c, _PUNCT))
#define isalnum(_c)     (MB_CUR_MAX > 1 ? _isctype(_c,_ALPHA|_DIGIT) : __chvalidchk(_c, (_ALPHA|_DIGIT)))
#define isprint(_c)     (MB_CUR_MAX > 1 ? _isctype(_c,_BLANK|_PUNCT|_ALPHA|_DIGIT) : __chvalidchk(_c, (_BLANK|_PUNCT|_ALPHA|_DIGIT)))
#define isgraph(_c)     (MB_CUR_MAX > 1 ? _isctype(_c,_PUNCT|_ALPHA|_DIGIT) : __chvalidchk(_c, (_PUNCT|_ALPHA|_DIGIT)))
#define iscntrl(_c)     (MB_CUR_MAX > 1 ? _isctype(_c,_CONTROL) : __chvalidchk(_c, _CONTROL))
#elif   0         /* Pending ANSI C++ integration */
inline int isalpha(int _C)
        {return (MB_CUR_MAX > 1 ? _isctype(_C,_ALPHA) : __chvalidchk(_C, _ALPHA)); }
inline int isupper(int _C)
        {return (MB_CUR_MAX > 1 ? _isctype(_C,_UPPER) : __chvalidchk(_C, _UPPER)); }
inline int islower(int _C)
        {return (MB_CUR_MAX > 1 ? _isctype(_C,_LOWER) : __chvalidchk(_C, _LOWER)); }
inline int isdigit(int _C)
        {return (MB_CUR_MAX > 1 ? _isctype(_C,_DIGIT) : __chvalidchk(_C, _DIGIT)); }
inline int isxdigit(int _C)
        {return (MB_CUR_MAX > 1 ? _isctype(_C,_HEX)   : __chvalidchk(_C, _HEX)); }
inline int isspace(int _C)
        {return (MB_CUR_MAX > 1 ? _isctype(_C,_SPACE) : __chvalidchk(_C, _SPACE)); }
inline int ispunct(int _C)
        {return (MB_CUR_MAX > 1 ? _isctype(_C,_PUNCT) : __chvalidchk(_C, _PUNCT)); }
inline int isalnum(int _C)
        {return (MB_CUR_MAX > 1 ? _isctype(_C,_ALPHA|_DIGIT)
                : __chvalidchk(_C) , (_ALPHA|_DIGIT)); }
inline int isprint(int _C)
        {return (MB_CUR_MAX > 1 ? _isctype(_C,_BLANK|_PUNCT|_ALPHA|_DIGIT)
                : __chvalidchk(_C , (_BLANK|_PUNCT|_ALPHA|_DIGIT))); }
inline int isgraph(int _C)
        {return (MB_CUR_MAX > 1 ? _isctype(_C,_PUNCT|_ALPHA|_DIGIT)
                : __chvalidchk(_C , (_PUNCT|_ALPHA|_DIGIT))); }
inline int iscntrl(int _C)
        {return (MB_CUR_MAX > 1 ? _isctype(_C,_CONTROL)
                : __chvalidchk(_C , _CONTROL)); }
#endif  /* __cplusplus */
#endif  /* _MT */


#define _tolower(_c)    ( (_c)-'A'+'a' )
#define _toupper(_c)    ( (_c)-'a'+'A' )

#define __isascii(_c)   ( (unsigned)(_c) < 0x80 )
#define __toascii(_c)   ( (_c) & 0x7f )

#ifndef _WCTYPE_INLINE_DEFINED
#ifndef __cplusplus
#define iswalpha(_c)    ( iswctype(_c,_ALPHA) )
#define iswupper(_c)    ( iswctype(_c,_UPPER) )
#define iswlower(_c)    ( iswctype(_c,_LOWER) )
#define iswdigit(_c)    ( iswctype(_c,_DIGIT) )
#define iswxdigit(_c)   ( iswctype(_c,_HEX) )
#define iswspace(_c)    ( iswctype(_c,_SPACE) )
#define iswpunct(_c)    ( iswctype(_c,_PUNCT) )
#define iswalnum(_c)    ( iswctype(_c,_ALPHA|_DIGIT) )
#define iswprint(_c)    ( iswctype(_c,_BLANK|_PUNCT|_ALPHA|_DIGIT) )
#define iswgraph(_c)    ( iswctype(_c,_PUNCT|_ALPHA|_DIGIT) )
#define iswcntrl(_c)    ( iswctype(_c,_CONTROL) )
#define iswascii(_c)    ( (unsigned)(_c) < 0x80 )
#define isleadbyte(_c)  ( _pctype[(unsigned char)(_c)] & _LEADBYTE)
#elif   0         /* __cplusplus */
inline int iswalpha(wint_t _C) {return (iswctype(_C,_ALPHA)); }
inline int iswupper(wint_t _C) {return (iswctype(_C,_UPPER)); }
inline int iswlower(wint_t _C) {return (iswctype(_C,_LOWER)); }
inline int iswdigit(wint_t _C) {return (iswctype(_C,_DIGIT)); }
inline int iswxdigit(wint_t _C) {return (iswctype(_C,_HEX)); }
inline int iswspace(wint_t _C) {return (iswctype(_C,_SPACE)); }
inline int iswpunct(wint_t _C) {return (iswctype(_C,_PUNCT)); }
inline int iswalnum(wint_t _C) {return (iswctype(_C,_ALPHA|_DIGIT)); }
inline int iswprint(wint_t _C)
        {return (iswctype(_C,_BLANK|_PUNCT|_ALPHA|_DIGIT)); }
inline int iswgraph(wint_t _C)
        {return (iswctype(_C,_PUNCT|_ALPHA|_DIGIT)); }
inline int iswcntrl(wint_t _C) {return (iswctype(_C,_CONTROL)); }
inline int iswascii(wint_t _C) {return ((unsigned)(_C) < 0x80); }

inline int isleadbyte(int _C)
        {return (_pctype[(unsigned char)(_C)] & _LEADBYTE); }
#endif  /* __cplusplus */
#define _WCTYPE_INLINE_DEFINED
#endif  /* _WCTYPE_INLINE_DEFINED */



/* MS C version 2.0 extended ctype macros */

#define __iscsymf(_c)   (isalpha(_c) || ((_c) == '_'))
#define __iscsym(_c)    (isalnum(_c) || ((_c) == '_'))

#endif  /* _CTYPE_DISABLE_MACROS */


#if     !__STDC__

/* Non-ANSI names for compatibility */

#ifndef _CTYPE_DEFINED
_CRTIMP int __cdecl isascii(int);
_CRTIMP int __cdecl toascii(int);
_CRTIMP int __cdecl iscsymf(int);
_CRTIMP int __cdecl iscsym(int);
#else
#define isascii __isascii
#define toascii __toascii
#define iscsymf __iscsymf
#define iscsym  __iscsym
#endif

#endif  /* __STDC__ */

#ifdef  __cplusplus
}
#endif


#endif  /* _INC_CTYPE */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\CrsMsg.Inc ===
'====================================================================
'                                                                     
'   Microsoft Site Server v3.00                                   
'                                                                     
'   Copyright (c) 1997 - 1999 Microsoft Corporation.  All rights reserved.   
'   THIS CODE AND INFORMATION IS PROVIDED 'AS IS' WITHOUT WARRANTY OF
'   ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
'   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
'   PARTICULAR PURPOSE.
'=====================================================================

'
'  Values are 32 bit values layed out as follows:
'
'   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
'   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
'  +---+-+-+-----------------------+-------------------------------+
'  |Sev|C|R|     Facility          |               Code            |
'  +---+-+-+-----------------------+-------------------------------+
'
'  where
'
'      Sev - is the severity code
'
'          00 - Success
'          01 - Informational
'          10 - Warning
'          11 - Error
'
'      C - is the Customer code flag
'
'      R - is a reserved bit
'
'      Facility - is the facility code
'
'      Code - is the facility's status code
'
'
' Define the facility codes
'


'
' Define the severity codes
'


'
' MessageId: CRS_ERROR_FIRST
'
' MessageText:
'
'  Site Server Content Deployment service first error message.
'
Const CRS_ERROR_FIRST                  = &H40003A98

'
' MessageId: CRS_NET_SOURCE
'
' MessageText:
'
'  Source directory %2 for the project %1 is on a network drive.  Cannot deploy from network drives.
'
Const CRS_NET_SOURCE                   = &HC0003A9C

'
' MessageId: CRS_ERROR_ACCESS_DENIED
'
' MessageText:
'
'  Access denied.
'
Const CRS_ERROR_ACCESS_DENIED          = &HC0003A9D

'
' MessageId: CRS_FILE_CREATE_ERROR
'
' MessageText:
'
'  Unable to open the file %1.
'
Const CRS_FILE_CREATE_ERROR            = &HC0003A9E

'
' MessageId: CRS_SENDINET_ERROR
'
' MessageText:
'
'  Project was unable to send file %1.
'
Const CRS_SENDINET_ERROR               = &HC0003A9F

'
' MessageId: CRS_SAMEBOX_NET_TARGET
'
' MessageText:
'
'  Destination directory %2 for the project %1 is on a network drive.  Cannot deploy to network drives.
'
Const CRS_SAMEBOX_NET_TARGET           = &HC0003AA0

'
' MessageId: CRS_BAD_SOURCE
'
' MessageText:
'
'  Unable to access the project source %1.
'
Const CRS_BAD_SOURCE                   = &HC0003AA1

'
' MessageId: CRS_SENDINET_CONNECT
'
' MessageText:
'
'  Unable to connect to the remote server %1.
'
Const CRS_SENDINET_CONNECT             = &HC0003AA2

'
' MessageId: CRS_HASH_MISMATCH
'
' MessageText:
'
'  MD5 Hash did not match during a transmission.  This could indicate transmission failure or that the files transmitted at the source have been modified in transit.
'
Const CRS_HASH_MISMATCH                = &HC0003AA3

'
' MessageId: CRS_SERVER_ABORTED
'
' MessageText:
'
'  Remote server was restarted.  The project %1 is being restarted.
'
Const CRS_SERVER_ABORTED               = &HC0003AA4

'
' MessageId: CRS_REPLICATION_ABORTED
'
' MessageText:
'
'  Project %1 was aborted.
'
Const CRS_REPLICATION_ABORTED          = &HC0003AA5

'
' MessageId: CRS_SEQUENCE_ERROR
'
' MessageText:
'
'  An internal messaging sequence error occurred.
'
Const CRS_SEQUENCE_ERROR               = &HC0003AA6

'
' MessageId: CRS_SERVICE_STARTED
'
' MessageText:
'
'  Site Server Content Deployment service started successfully.
'
Const CRS_SERVICE_STARTED              = &H40003AA7

'
' MessageId: CRS_SERVICE_SHUTDOWN
'
' MessageText:
'
'  Site Server Content Deployment service shut down successfully.
'
Const CRS_SERVICE_SHUTDOWN             = &H40003AA8

'
' MessageId: CRS_ERROR_METABASE_ACCESS
'
' MessageText:
'
'  Could not open storage/stream %1.  Ensure the authentication account has access to this storage/stream.
'
Const CRS_ERROR_METABASE_ACCESS        = &HC0003AAA

'
' MessageId: CRS_AUTH_FAILURE
'
' MessageText:
'
'  Authorization failure against server %1.  Ensure the service has access to this server.
'
Const CRS_AUTH_FAILURE                 = &HC0003AAB

'
' MessageId: CRS_REMOTE_AUTH_FAILURE
'
' MessageText:
'
'  Remote authorization failed to server %1.  Ensure the service has access to this server.
'
Const CRS_REMOTE_AUTH_FAILURE          = &HC0003AAC

'
' MessageId: CRS_ERROR_NOT_IN_ORDER
'
' MessageText:
'
'  Message was received out of order.  Closing connection.
'
Const CRS_ERROR_NOT_IN_ORDER           = &HC0003AAD

'
' MessageId: CRS_CONNECTION_RETRY_FAILED
'
' MessageText:
'
'  Connection to server %1 failed and could not be re-established.
'
Const CRS_CONNECTION_RETRY_FAILED      = &HC0003AAE

'
' MessageId: CRS_ERROR_REPLICATION_CANCELED
'
' MessageText:
'
'  Project %1 canceled at the request of the user.
'
Const CRS_ERROR_REPLICATION_CANCELED   = &HC0003AAF

'
' MessageId: CRS_ERROR_DEST_TOOBIG
'
' MessageText:
'
'  Could not add the specified destination(s).  The maximum number of destinations has been reached.
'
Const CRS_ERROR_DEST_TOOBIG            = &HC0003AB0

'
' MessageId: CRS_ERROR_NO_IP_MAPPING
'
' MessageText:
'
'  Cannot resolve IP address for server %1.  No virtual root created.
'
Const CRS_ERROR_NO_IP_MAPPING          = &HC0003AB1

'
' MessageId: CRS_ERROR_DISK_FULL
'
' MessageText:
'
'  Not enough space on the disk.
'
Const CRS_ERROR_DISK_FULL              = &HC0003AB2

'
' MessageId: CRS_ERROR_TOO_MANY_RUNNING
'
' MessageText:
'
'  Too many active projects. No more can be started until others complete.
'
Const CRS_ERROR_TOO_MANY_RUNNING       = &HC0003AB3

'
' MessageId: CRS_ERROR_WOULDBLOCK
'
' MessageText:
'
'  The network operation would block.
'
Const CRS_ERROR_WOULDBLOCK             = &H00003ABB

'
' MessageId: CRS_ERROR_NETDOWN
'
' MessageText:
'
'  The remote network is down.
'
Const CRS_ERROR_NETDOWN                = &HC0003ACA

'
' MessageId: CRS_ERROR_NETUNREACH
'
' MessageText:
'
'  The remote network is unreachable.
'
Const CRS_ERROR_NETUNREACH             = &HC0003ACB

'
' MessageId: CRS_ERROR_CONNABORTED
'
' MessageText:
'
'  The network connection was aborted at the network layer.
'
Const CRS_ERROR_CONNABORTED            = &HC0003ACD

'
' MessageId: CRS_ERROR_TIMEOUT
'
' MessageText:
'
'  The network session timed out on a send or receive operation.
'
Const CRS_ERROR_TIMEOUT                = &HC0003AD4

'
' MessageId: WINSOCK_WSAEWOULDBLOCK
'
' MessageText:
'
'  The network operation would block.
'
Const WINSOCK_WSAEWOULDBLOCK           = &H00002733

'
' MessageId: WINSOCK_WSAENETDOWN
'
' MessageText:
'
'  The remote network is down.
'
Const WINSOCK_WSAENETDOWN              = &H00002742

'
' MessageId: WINSOCK_WSAENETUNREACH
'
' MessageText:
'
'  The remote network is unreachable.
'
Const WINSOCK_WSAENETUNREACH           = &H00002743

'
' MessageId: WINSOCK_WSAECONNABORTED
'
' MessageText:
'
'  The network connection was aborted at the network layer.
'
Const WINSOCK_WSAECONNABORTED          = &H00002745

'
' MessageId: WINSOCK_WSAECONNRESET
'
' MessageText:
'
'  The network session was aborted.
'
Const WINSOCK_WSAECONNRESET            = &H00002746

'
' MessageId: WINSOCK_WSAETIMEDOUT
'
' MessageText:
'
'  The network session timed out on a send or receive operation.
'
Const WINSOCK_WSAETIMEDOUT             = &H0000274C

'
' MessageId: WINSOCK_WSAECONNREFUSED
'
' MessageText:
'
'  The remote server was not listening on the appropriate port. This generally indicates that the service was not running but the server is up.
'
Const WINSOCK_WSAECONNREFUSED          = &H0000274D

'
' MessageId: CRS_ERROR_NO_PROJECTS
'
' MessageText:
'
'  No projects defined.
'
Const CRS_ERROR_NO_PROJECTS            = &HC0003AFC

'
' MessageId: CRS_ERROR_PROJECT_NOT_FOUND
'
' MessageText:
'
'  Could not find project %1.
'
Const CRS_ERROR_PROJECT_NOT_FOUND      = &HC0003AFD

'
' MessageId: CRS_ERROR_INVALID_PARAMETER
'
' MessageText:
'
'  Invalid parameter.
'
Const CRS_ERROR_INVALID_PARAMETER      = &HC0003AFE

'
' MessageId: CRS_PROJECT_CREATED
'
' MessageText:
'
'  Created project %1.
'
Const CRS_PROJECT_CREATED              = &HC0003AFF

'
' MessageId: CRS_ERROR_AUTHENTICATION_FAILURE
'
' MessageText:
'
'  Authentication failure.  Ensure the account has proper access on local and remote servers.
'
Const CRS_ERROR_AUTHENTICATION_FAILURE = &HC0003B00

'
' MessageId: CRS_ERROR_DELETE_PROJECT_DOWN_ROUTE
'
' MessageText:
'
'  Could not delete the route from the project on at least one server down the defined routes.  The project will have to be edited manually there.
'
Const CRS_ERROR_DELETE_PROJECT_DOWN_ROUTE = &H80003B01

'
' MessageId: CRS_ERROR_SERVICE_NOT_RUNNING
'
' MessageText:
'
'  Server %1 is available, but the Site Server Content Deployment service is not running.
'
Const CRS_ERROR_SERVICE_NOT_RUNNING    = &HC0003B02

'
' MessageId: CRS_ERROR_HOST_DOWN
'
' MessageText:
'
'  Server %1 is unavailable.
'
Const CRS_ERROR_HOST_DOWN              = &HC0003B03

'
' MessageId: CRS_ERROR_BAD_NET_NAME
'
' MessageText:
'
'  Server %1 cannot be found.
'
Const CRS_ERROR_BAD_NET_NAME           = &HC0003B04

'
' MessageId: CRS_ERROR_ROUTE_NOT_FOUND
'
' MessageText:
'
'  Could not find route %1.  Ensure the route name is correct and that it exists on the target servers.
'
Const CRS_ERROR_ROUTE_NOT_FOUND        = &HC0003B05

'
' MessageId: CRS_ERROR_NO_ROUTES
'
' MessageText:
'
'  No routes defined.
'
Const CRS_ERROR_NO_ROUTES              = &HC0003B06

'
' MessageId: CRS_ERROR_CREATE_PROJECT_DOWN_ROUTE
'
' MessageText:
'
'  Could not create the project on at least one server down the defined routes.  The project will have to be created manually there.
'
Const CRS_ERROR_CREATE_PROJECT_DOWN_ROUTE = &H80003B07

'
' MessageId: CRS_ERROR_SERVICE_PAUSED
'
' MessageText:
'
'  Site Server Content Deployment service on server %1 is paused and is not accepting new requests.  Retry project %2 later.
'
Const CRS_ERROR_SERVICE_PAUSED         = &HC0003B08

'
' MessageId: CRS_ERROR_SERVICE_NOT_PAUSED
'
' MessageText:
'
'  Could not restart service. Service is not paused.
'
Const CRS_ERROR_SERVICE_NOT_PAUSED     = &HC0003B09

'
' MessageId: CRS_ERROR_NAME_NOT_RESOLVED
'
' MessageText:
'
'  Could not resolve URL %2 for project %1.  Ensure URL and/or proxy settings are correct.
'
Const CRS_ERROR_NAME_NOT_RESOLVED      = &HC0003B0A

'
' MessageId: CRS_ERROR_CONNECTION_RESET
'
' MessageText:
'
'  Connection to server %1 has been reset.  This indicates problems with the remote service or network.
'
Const CRS_ERROR_CONNECTION_RESET       = &HC0003B0B

'
' MessageId: CRS_ERROR_REPLICATION_NOT_FOUND
'
' MessageText:
'
'  No entries.
'
Const CRS_ERROR_REPLICATION_NOT_FOUND  = &HC0003B0C

'
' MessageId: CRS_ERROR_SERVICE_ALREADY_RUNNING
'
' MessageText:
'
'  Could not start service.  The service has already been started.
'
Const CRS_ERROR_SERVICE_ALREADY_RUNNING = &HC0003B0D

'
' MessageId: CRS_ERROR_PROJECT_ALREADY_RUNNING
'
' MessageText:
'
'  Failed to start project %1.  It is already running.
'
Const CRS_ERROR_PROJECT_ALREADY_RUNNING = &HC0003B0E

'
' MessageId: CRS_ERROR_FILE_MOVE_ERROR
'
' MessageText:
'
'  Failed to move file %1 to %2.
'
Const CRS_ERROR_FILE_MOVE_ERROR        = &HC0003B0F

'
' MessageId: CRS_ERROR_PRODUCT_EXPIRED
'
' MessageText:
'
'  Thank you for your interest in Site Server Content Deployment.  This software has expired.  Please acquire the final retail version of this software.
'
Const CRS_ERROR_PRODUCT_EXPIRED        = &HC0003B10

'
' MessageId: CRS_ERROR_PROJECT_INCOMPLETE
'
' MessageText:
'
'  Project information for %1 is incomplete.
'
Const CRS_ERROR_PROJECT_INCOMPLETE     = &HC0003B11

'
' MessageId: CRS_ERROR_PARAMETER_NOT_FOUND
'
' MessageText:
'
'  Parameter %1 not found.
'
Const CRS_ERROR_PARAMETER_NOT_FOUND    = &HC0003B12

'
' MessageId: CRS_ERROR_REPLICATION_RUNNING
'
' MessageText:
'
'  Project %1 is running.  The operation could not be completed.
'
Const CRS_ERROR_REPLICATION_RUNNING    = &HC0003B13

'
' MessageId: CRS_ERROR_INVALID_PROJECT_NAME
'
' MessageText:
'
'  Project name %1 is invalid.  Project names cannot contain backslashes and cannot be empty.
'
Const CRS_ERROR_INVALID_PROJECT_NAME   = &HC0003B14

'
' MessageId: CRS_ERROR_INVALID_ROUTE_NAME
'
' MessageText:
'
'  Route name %1 is invalid.  Route names cannot contain backslashes or DBCS characters and cannot be empty.
'
Const CRS_ERROR_INVALID_ROUTE_NAME     = &HC0003B15

'
' MessageId: CRS_ERROR_INVALID_DWORD
'
' MessageText:
'
'  Parameter %1 must be a positive integer.
'
Const CRS_ERROR_INVALID_DWORD          = &HC0003B16

'
' MessageId: CRS_ERROR_NO_MORE_ITEMS
'
' MessageText:
'
'  No more items in the list.
'
Const CRS_ERROR_NO_MORE_ITEMS          = &H80003B17

'
' MessageId: CRS_ERROR_TOO_MANY_ARGS
'
' MessageText:
'
'  Too many arguments specified.
'
Const CRS_ERROR_TOO_MANY_ARGS          = &HC0003B18

'
' MessageId: CRS_MBS_INIT_ERROR
'
' MessageText:
'
'  Internal error trying to initialize for ACL replication.
'
Const CRS_MBS_INIT_ERROR               = &HC0003B19

'
' MessageId: CRS_ERROR_OPENING_FILE
'
' MessageText:
'
'  Error opening file %1 or file not found.
'
Const CRS_ERROR_OPENING_FILE           = &HC0003B1B

'
' MessageId: CRS_ERROR_FILE_FORMAT
'
' MessageText:
'
'  Invalid file format.
'
Const CRS_ERROR_FILE_FORMAT            = &HC0003B1C

'
' MessageId: CRS_ERROR_FILE_WRITE
'
' MessageText:
'
'  Error writing to file %1.
'
Const CRS_ERROR_FILE_WRITE             = &HC0003B1D

'
' MessageId: WINSOCK_WSAHOSTNAME
'
' MessageText:
'
'  Gethostname failed.
'
Const WINSOCK_WSAHOSTNAME              = &HC0003B1E

'
' MessageId: CRS_ERROR_NODE_EXISTS
'
' MessageText:
'
'  Node already exists in the topology map.
'
Const CRS_ERROR_NODE_EXISTS            = &HC0003B1F

'
' MessageId: CRS_ERROR_NODE_NOT_FOUND
'
' MessageText:
'
'  Node not found in topology map.
'
Const CRS_ERROR_NODE_NOT_FOUND         = &HC0003B20

'
' MessageId: CRS_ERROR_EDGE_EXISTS
'
' MessageText:
'
'  Edge already exists in topology map.
'
Const CRS_ERROR_EDGE_EXISTS            = &H80003B21

'
' MessageId: CRS_ERROR_ROOTNODE_NOT_FOUND
'
' MessageText:
'
'  Root node does not exist in topology map.
'
Const CRS_ERROR_ROOTNODE_NOT_FOUND     = &HC0003B22

'
' MessageId: CRS_ERROR_PATH_NOT_FOUND
'
' MessageText:
'
'  No path to from root to node in topology map.
'
Const CRS_ERROR_PATH_NOT_FOUND         = &HC0003B23

'
' MessageId: CRS_ERROR_EDGE_NOT_FOUND
'
' MessageText:
'
'  Edge does not exist in topology map.
'
Const CRS_ERROR_EDGE_NOT_FOUND         = &HC0003B24

'
' MessageId: CRS_ERROR_INVALID_CONTEXT
'
' MessageText:
'
'  Current context is invalid.  Project being reset.
'
Const CRS_ERROR_INVALID_CONTEXT        = &HC0003B25

'
' MessageId: CRS_ERROR_DOWNLEVEL_SERVER
'
' MessageText:
'
'  Operation is not supported on a down-level server.
'
Const CRS_ERROR_DOWNLEVEL_SERVER       = &HC0003B26

'
' MessageId: CRS_ERROR_NO_MAPPING
'
' MessageText:
'
'  URL does not map to any project definitions.
'
Const CRS_ERROR_NO_MAPPING             = &HC0003B27

'
' MessageId: CRS_ERROR_START_PENDING
'
' MessageText:
'
'  Start pending completion of the active project.
'
Const CRS_ERROR_START_PENDING          = &HC0003B28

'
' MessageId: CRS_ERROR_NO_EVENTSINKS
'
' MessageText:
'
'  No event sinks defined.
'
Const CRS_ERROR_NO_EVENTSINKS          = &HC0003B29

'
' MessageId: CRS_ERROR_EVENTSINK_NOT_FOUND
'
' MessageText:
'
'  Could not find event sink %1.
'
Const CRS_ERROR_EVENTSINK_NOT_FOUND    = &HC0003B2A

'
' MessageId: CRS_ERROR_WSAHOSTNOTFOUND
'
' MessageText:
'
'  Host not found.
'
Const CRS_ERROR_WSAHOSTNOTFOUND        = &HC0003B2B

'
' MessageId: CRS_ERROR_WSATRYAGAIN
'
' MessageText:
'
'  Host not found, or SERVERFAIL.  Try again.
'
Const CRS_ERROR_WSATRYAGAIN            = &HC0003B2C

'
' MessageId: CRS_ERROR_WSANORECOVERY
'
' MessageText:
'
'  Non-recoverable winsock error.
'
Const CRS_ERROR_WSANORECOVERY          = &HC0003B2D

'
' MessageId: CRS_ERROR_WSANODATA
'
' MessageText:
'
'  Invalid address.
'
Const CRS_ERROR_WSANODATA              = &HC0003B2E

'
' MessageId: CRS_EVENTSINK_INITIALIZED
'
' MessageText:
'
'  Event sink %1 was successfully initialized.
'
Const CRS_EVENTSINK_INITIALIZED        = &H00003B2F

'
' MessageId: CRS_ERROR_EVENTSINK_NOT_INITIALIZED
'
' MessageText:
'
'  Event sink %1 failed to initialize.
'
Const CRS_ERROR_EVENTSINK_NOT_INITIALIZED = &HC0003B30

'
' MessageId: CRS_ERROR_NOTHING_TO_ROLLBACK
'
' MessageText:
'
'  Could not roll back project.  No rollback information found.
'
Const CRS_ERROR_NOTHING_TO_ROLLBACK    = &HC0003B31

'
' MessageId: CRS_ERROR_NO_DESTINATIONS
'
' MessageText:
'
'  Project could not be started because no destinations are defined.
'
Const CRS_ERROR_NO_DESTINATIONS        = &HC0003B32

'
' MessageId: CRS_ERROR_REAUTHENTICATE
'
' MessageText:
'
'  Re-authenticate using an acceptable protocol.
'
Const CRS_ERROR_REAUTHENTICATE         = &HC0003B33

'
' MessageId: CRS_ERROR_UNSUPPORTED
'
' MessageText:
'
'  Function not supported in this version to this server.
'
Const CRS_ERROR_UNSUPPORTED            = &HC0003B34

'
' MessageId: CRS_ERROR_USER_NOT_FOUND
'
' MessageText:
'
'  Specified user %1 could not be found.
'
Const CRS_ERROR_USER_NOT_FOUND         = &HC0003B35

'
' MessageId: CRS_ERROR_NO_TRANSACTIONS
'
' MessageText:
'
'  No transactions for the specified project.
'
Const CRS_ERROR_NO_TRANSACTIONS        = &HC0003B36

'
' MessageId: CRS_ERROR_NO_SERVERS
'
' MessageText:
'
'  No destination servers defined.
'
Const CRS_ERROR_NO_SERVERS             = &HC0003B37

'
' MessageId: CRS_ERROR_NO_SCHEDULES
'
' MessageText:
'
'  No schedules defined for this project.
'
Const CRS_ERROR_NO_SCHEDULES           = &HC0003B38

'
' MessageId: CRS_ERROR_NO_EMAIL
'
' MessageText:
'
'  Could not contact SMTP server %1 to send e-mail report for project %2.
'
Const CRS_ERROR_NO_EMAIL               = &HC0003B39

'
' MessageId: CRS_ERROR_WAIT_ABORT
'
' MessageText:
'
'  Waiting abort on project %1 after losing connection with source server.
'
Const CRS_ERROR_WAIT_ABORT             = &HC0003B3A

'
' MessageId: CRS_RESUME_REPLICATION
'
' MessageText:
'
'  Resuming project %1 to server %2.
'
Const CRS_RESUME_REPLICATION           = &H40003B3B

'
' MessageId: CRS_METABASE_NOT_FOUND
'
' MessageText:
'
'  Metabase is not responding.
'
Const CRS_METABASE_NOT_FOUND           = &HC0003B3C

'
' MessageId: CRS_SSE_VROOT_NOT_FOUND
'
' MessageText:
'
'  Site Server virtual directory not found.
'
Const CRS_SSE_VROOT_NOT_FOUND          = &HC0003B3D

'
' MessageId: CRS_WARNING_CONNECTION_FAILED
'
' MessageText:
'
'  Connection to server %1 for project %2 failed.  Will attempt to re-establish session.
'
Const CRS_WARNING_CONNECTION_FAILED    = &H80003B3E

'
' MessageId: CRS_ERROR_DROPPED_EMAIL_REPORT
'
' MessageText:
'
'  Dropped e-mail report for project %1.
'
Const CRS_ERROR_DROPPED_EMAIL_REPORT   = &HC0003B3F

'
' MessageId: CRS_ERROR_EMAIL_HOST_NOT_DEFINED
'
' MessageText:
'
'  No SMTP server defined.
'
Const CRS_ERROR_EMAIL_HOST_NOT_DEFINED = &HC0003B40

'
' MessageId: CRS_ERROR_VROOT_CREATION
'
' MessageText:
'
'  Could not create the specified virtual directory.
'
Const CRS_ERROR_VROOT_CREATION         = &H80003B41

'
' MessageId: CRS_ERROR_UPLPAGE_CREATION
'
' MessageText:
'
'  Could not create the upload page.
'
Const CRS_ERROR_UPLPAGE_CREATION       = &HC0003B42

'
' MessageId: CRS_ERROR_CIRCULAR_ROUTE
'
' MessageText:
'
'  System has detected a circular route.  Project not created.
'
Const CRS_ERROR_CIRCULAR_ROUTE         = &HC0003B43

'
' MessageId: CRS_ERROR_TRANSACTION_APPLY_FAILED
'
' MessageText:
'
'  Transaction application for project %1 failed.  Check permissions on the destination directory and files and ensure that no files are locked open.
'
Const CRS_ERROR_TRANSACTION_APPLY_FAILED = &HC0003B44

'
' MessageId: CRS_ERROR_DATABASE
'
' MessageText:
'
'  Error occurred with the database %1.  Error is: %2.
'
Const CRS_ERROR_DATABASE               = &HC0003B45

'
' MessageId: CRS_ERROR_SINK_CONNECT_FAILED
'
' MessageText:
'
'  Unable to connect to remote server %1 to forward events.
'
Const CRS_ERROR_SINK_CONNECT_FAILED    = &HC0003B46

'
' MessageId: CRS_ERROR_CANT_SEND_EVENTS_TO_DOWNLEVEL_SERVER
'
' MessageText:
'
'  Unable to send events to server %1.  This operation is not supported.
'
Const CRS_ERROR_CANT_SEND_EVENTS_TO_DOWNLEVEL_SERVER = &HC0003B47

'
' MessageId: CRS_ERROR_FILE_CORRUPT
'
' MessageText:
'
'  File %1 is corrupt or unreadable.
'
Const CRS_ERROR_FILE_CORRUPT           = &HC0003B48

'
' MessageId: CRS_ERROR_FILE_BUSY
'
' MessageText:
'
'  File %1 is busy.
'
Const CRS_ERROR_FILE_BUSY              = &HC0003B49

'
' MessageId: CRS_ACL_ERROR_INVALID_ACE
'
' MessageText:
'
'  Could not set the ACE %1 on file %2.
'
Const CRS_ACL_ERROR_INVALID_ACE        = &H80003B4A

'
' MessageId: CRS_ACL_ERROR_ACL_FAILED
'
' MessageText:
'
'  Could not set the ACLS appropriately on file %1, setting default ACLs on this file.
'
Const CRS_ACL_ERROR_ACL_FAILED         = &HC0003B4B

'
' MessageId: CRS_ERROR_PROJECT_NOT_FOUND_ON_DESTINATION
'
' MessageText:
'
'  Could not find project %1 on server %2.
'
Const CRS_ERROR_PROJECT_NOT_FOUND_ON_DESTINATION = &HC0003B4C

'
' MessageId: CRS_ERROR_PROJECT_INCOMPLETE_ON_DESTINATION
'
' MessageText:
'
'  Project information for project %1 is incomplete on server %2.
'
Const CRS_ERROR_PROJECT_INCOMPLETE_ON_DESTINATION = &HC0003B4D

'
' MessageId: CRS_ERROR_SERVICE_DOWN_ON_REMOTE_SERVER
'
' MessageText:
'
'  Remote server available, but the Site Server Content Deployment service is not running.
'
Const CRS_ERROR_SERVICE_DOWN_ON_REMOTE_SERVER = &HC0003B4E

'
' MessageId: CRS_ERROR_DISK_FULL_ON_DESTINATION
'
' MessageText:
'
'  Disk is full on the destination server %1.
'
Const CRS_ERROR_DISK_FULL_ON_DESTINATION = &HC0003B4F

'
' MessageId: CRS_FILE_CREATE_ERROR_ON_DESTINATION
'
' MessageText:
'
'  Unable to open a file on the destination server %1.  Check permissions on the project directory and files.
'
Const CRS_FILE_CREATE_ERROR_ON_DESTINATION = &HC0003B50

'
' MessageId: CRS_ERROR_REMOTE_SERVER_NOT_FOUND
'
' MessageText:
'
'  Remote server could not be found.
'
Const CRS_ERROR_REMOTE_SERVER_NOT_FOUND = &HC0003B51

'
' MessageId: CRS_ERROR_REMOTE_APPLY_FAILED
'
' MessageText:
'
'  Unable to apply transactions for project %1 on server %2.
'
Const CRS_ERROR_REMOTE_APPLY_FAILED    = &HC0003B52

'
' MessageId: CRS_ERROR_INVALID_FLAG_COMBINATION
'
' MessageText:
'
'  Invalid flag combination.
'
Const CRS_ERROR_INVALID_FLAG_COMBINATION = &HC0003B53

'
' MessageId: CRS_ERROR_RUNNING_SCRIPT
'
' MessageText:
'
'  Error running the script %1.  Ensure that the script exists and can be located in the path.
'
Const CRS_ERROR_RUNNING_SCRIPT         = &HC0003B54

'
' MessageId: CRS_ERROR_CANT_FORWARD_TO_LOCAL_SERVER
'
' MessageText:
'
'  Cannot forward events to the local server.
'
Const CRS_ERROR_CANT_FORWARD_TO_LOCAL_SERVER = &HC0003B55

'
' MessageId: CRS_ERROR_SCHEDULE_NOT_FOUND
'
' MessageText:
'
'  Specified project schedule could not be found.
'
Const CRS_ERROR_SCHEDULE_NOT_FOUND     = &HC0003B56

'
' MessageId: CRS_ERROR_METABASE
'
' MessageText:
'
'  An error occurred accessing the metabase for the project %1.  Ensure that the web site exists and that the account has access to it.
'
Const CRS_ERROR_METABASE               = &HC0003B57

'
' MessageId: CRS_ERROR_SCHEDULER_FAILURE
'
' MessageText:
'
'  An error occurred with the task scheduler.
'
Const CRS_ERROR_SCHEDULER_FAILURE      = &HC0003B58

'
' MessageId: CRS_SAMEBOX_META_TARGET
'
' MessageText:
'
'  The destination %1 for metabase replication is invalid.
'
Const CRS_SAMEBOX_META_TARGET          = &HC0003B59

'
' MessageId: CRS_ERROR_DROPPED_EVENTS
'
' MessageText:
'
'  The event sink %1 has started dropping events.
'
Const CRS_ERROR_DROPPED_EVENTS         = &HC0003B5A

'
' MessageId: CRS_MSG_REPLICATION_FIRST
'
' MessageText:
'
'  Site Server Content Deployment first replication event message.
'
Const CRS_MSG_REPLICATION_FIRST        = &H40003BC4

'
' MessageId: CRS_MSG_STARTING_REPLICATION
'
' MessageText:
'
'  Project %1 starting to server %2.
'
Const CRS_MSG_STARTING_REPLICATION     = &H40003BC5

'
' MessageId: CRS_MSG_REPLICATION_COMPLETE
'
' MessageText:
'
'  Project %1 complete to server %2.
'
Const CRS_MSG_REPLICATION_COMPLETE     = &H40003BC6

'
' MessageId: CRS_MSG_STARTING_PULL_REPLICATION
'
' MessageText:
'
'  Retrieval project %1 starting from URL %2.
'
Const CRS_MSG_STARTING_PULL_REPLICATION = &H40003BC7

'
' MessageId: CRS_MSG_PULL_REPLICATION_COMPLETE
'
' MessageText:
'
'  Retrieval project %1 complete from URL %2.
'
Const CRS_MSG_PULL_REPLICATION_COMPLETE = &H40003BC8

'
' MessageId: CRS_MSG_STARTING_RECEIVE_REPLICATION
'
' MessageText:
'
'  Starting to receive project %1 from server %2.
'
Const CRS_MSG_STARTING_RECEIVE_REPLICATION = &H40003BC9

'
' MessageId: CRS_MSG_REPLICATION_RECEIVE_COMPLETE
'
' MessageText:
'
'  Finished receiving project %1 from server %2.
'
Const CRS_MSG_REPLICATION_RECEIVE_COMPLETE = &H40003BCA

'
' MessageId: CRS_MSG_STARTING_REPLICATION_SCAN
'
' MessageText:
'
'  Project %1 starting.
'
Const CRS_MSG_STARTING_REPLICATION_SCAN = &H40003BCB

'
' MessageId: CRS_MSG_REPLICATION_LAST
'
' MessageText:
'
'  Site Server Content Deployment last replication event message.
'
Const CRS_MSG_REPLICATION_LAST         = &H40003BF5

'
' MessageId: CRS_MSG_FILE_FIRST
'
' MessageText:
'
'  Site Server Content Deployment first file event message.
'
Const CRS_MSG_FILE_FIRST               = &H40003BF6

'
' MessageId: CRS_MSG_SENDING_FILE
'
' MessageText:
'
'  Sending file %1.
'
Const CRS_MSG_SENDING_FILE             = &H40003BF7

'
' MessageId: CRS_MSG_SENT_FILE
'
' MessageText:
'
'  File %1 sent.
'
Const CRS_MSG_SENT_FILE                = &H40003BF8

'
' MessageId: CRS_MSG_RECEIVING_FILE
'
' MessageText:
'
'  Receiving file %1.
'
Const CRS_MSG_RECEIVING_FILE           = &H40003BF9

'
' MessageId: CRS_MSG_RECEIVED_FILE
'
' MessageText:
'
'  File %1 received.
'
Const CRS_MSG_RECEIVED_FILE            = &H40003BFA

'
' MessageId: CRS_MSG_SENT_DELETE_FILE
'
' MessageText:
'
'  Sent delete file request for file %1.
'
Const CRS_MSG_SENT_DELETE_FILE         = &H40003BFB

'
' MessageId: CRS_MSG_RECEIVED_DELETE_FILE
'
' MessageText:
'
'  File delete request received for file %1.
'
Const CRS_MSG_RECEIVED_DELETE_FILE     = &H40003BFC

'
' MessageId: CRS_MSG_RETRYING_SENDING_FILE
'
' MessageText:
'
'  Trying to resend file %1.
'
Const CRS_MSG_RETRYING_SENDING_FILE    = &H40003C00

'
' MessageId: CRS_MSG_FILE_BUSY
'
' MessageText:
'
'  File %1 is busy.  The service is waiting for the file to become available.
'
Const CRS_MSG_FILE_BUSY                = &H40003C01

'
' MessageId: CRS_MSG_SENDING_ACL
'
' MessageText:
'
'  Sending the ACL for the file %1.
'
Const CRS_MSG_SENDING_ACL              = &H40003C02

'
' MessageId: CRS_MSG_SENT_ACL
'
' MessageText:
'
'  Sent the ACL for the file %1.
'
Const CRS_MSG_SENT_ACL                 = &H40003C03

'
' MessageId: CRS_MSG_RECEIVING_ACL
'
' MessageText:
'
'  Receiving the ACL for the file %1.
'
Const CRS_MSG_RECEIVING_ACL            = &H40003C04

'
' MessageId: CRS_MSG_RECEIVED_ACL
'
' MessageText:
'
'  Received the ACL for the file %1.
'
Const CRS_MSG_RECEIVED_ACL             = &H40003C05

'
' MessageId: CRS_MSG_PULLED_FILE_HTTP
'
' MessageText:
'
'  File %1 retrieved over HTTP.
'
Const CRS_MSG_PULLED_FILE_HTTP         = &H40003C06

'
' MessageId: CRS_MSG_PULLED_FILE_FTP
'
' MessageText:
'
'  File %1 retrieved over FTP.
'
Const CRS_MSG_PULLED_FILE_FTP          = &H40003C07

'
' MessageId: CRS_MSG_FILE_COMMITTED
'
' MessageText:
'
'  File %1 committed to disk.
'
Const CRS_MSG_FILE_COMMITTED           = &H40003C08

'
' MessageId: CRS_MSG_FILE_DELETED
'
' MessageText:
'
'  File %1 deleted.
'
Const CRS_MSG_FILE_DELETED             = &H40003C09

'
' MessageId: CRS_MSG_SKIPPING_LOCKED_FILE
'
' MessageText:
'
'  File %1 skipped because it could not be opened.
'
Const CRS_MSG_SKIPPING_LOCKED_FILE     = &H80003C0A

'
' MessageId: CRS_FILE_MATCHED
'
' MessageText:
'
'  File %1 matched.
'
Const CRS_FILE_MATCHED                 = &H40003C0B

'
' MessageId: CRS_MSG_FILE_LAST
'
' MessageText:
'
'  Site Server Content Deployment last file event message.
'
Const CRS_MSG_FILE_LAST                = &H40003C27

'
' MessageId: CRS_MSG_ADMIN_FIRST
'
' MessageText:
'
'  Site Server Content Deployment first administration event message.
'
Const CRS_MSG_ADMIN_FIRST              = &H40003C28

'
' MessageId: CRS_MSG_PROJECT_CREATED
'
' MessageText:
'
'  Project %1 created.
'
Const CRS_MSG_PROJECT_CREATED          = &H40003C29

'
' MessageId: CRS_MSG_PROJECT_DELETED
'
' MessageText:
'
'  Project %1 deleted.
'
Const CRS_MSG_PROJECT_DELETED          = &H40003C2A

'
' MessageId: CRS_MSG_PROJECT_EDITED
'
' MessageText:
'
'  Project %1 edited.
'
Const CRS_MSG_PROJECT_EDITED           = &H40003C2B

'
' MessageId: CRS_MSG_ROUTE_CREATED
'
' MessageText:
'
'  Route %1 created.
'
Const CRS_MSG_ROUTE_CREATED            = &H40003C2C

'
' MessageId: CRS_MSG_ROUTE_DELETED
'
' MessageText:
'
'  Route %1 deleted.
'
Const CRS_MSG_ROUTE_DELETED            = &H40003C2D

'
' MessageId: CRS_MSG_ROUTE_EDITED
'
' MessageText:
'
'  Route %1 edited.
'
Const CRS_MSG_ROUTE_EDITED             = &H40003C2E

'
' MessageId: CRS_MSG_SERVER_EDITED
'
' MessageText:
'
'  Server settings modified.
'
Const CRS_MSG_SERVER_EDITED            = &H40003C2F

'
' MessageId: CRS_MSG_EVENTSINK_CREATED
'
' MessageText:
'
'  Event sink %1 was added.
'
Const CRS_MSG_EVENTSINK_CREATED        = &H40003C30

'
' MessageId: CRS_MSG_EVENTSINK_DELETED
'
' MessageText:
'
'  Event sink %1 was deleted.
'
Const CRS_MSG_EVENTSINK_DELETED        = &H40003C31

'
' MessageId: CRS_MSG_CLEARED_EVENTS
'
' MessageText:
'
'  Event store %1 was cleared.
'
Const CRS_MSG_CLEARED_EVENTS           = &H40003C32

'
' MessageId: CRS_MSG_CLEARED_ALL_EVENTS
'
' MessageText:
'
'  Each database event store on this server was cleared.
'
Const CRS_MSG_CLEARED_ALL_EVENTS       = &H40003C33

'
' MessageId: CRS_MSG_ADMIN_LAST
'
' MessageText:
'
'  Site Server Content Deployment last administration event message.
'
Const CRS_MSG_ADMIN_LAST               = &H40003C5A

'
' MessageId: CRS_MSG_SUMMARY_FIRST
'
' MessageText:
'
'  Site Server Content Deployment first summary event message.
'
Const CRS_MSG_SUMMARY_FIRST            = &H40003C8C

'
' MessageId: CRS_MSG_SUMMARY_RECEIVE
'
' MessageText:
'
'  Project summary information (files received).
'
Const CRS_MSG_SUMMARY_RECEIVE          = &H40003C8D

'
' MessageId: CRS_MSG_SUMMARY_SEND
'
' MessageText:
'
'  Project summary information (files sent).
'
Const CRS_MSG_SUMMARY_SEND             = &H40003C8E

'
' MessageId: CRS_MSG_SUMMARY_PULL
'
' MessageText:
'
'  Project summary information (files pulled).
'
Const CRS_MSG_SUMMARY_PULL             = &H40003C8F

'
' MessageId: CRS_MSG_SUMMARY_AUTOMATIC_RECEIVE
'
' MessageText:
'
'  Automatic project (receive) checkpoint summary information.
'
Const CRS_MSG_SUMMARY_AUTOMATIC_RECEIVE = &H40003C90

'
' MessageId: CRS_MSG_SUMMARY_AUTOMATIC_SEND
'
' MessageText:
'
'  Automatic project (send) checkpoint summary information.
'
Const CRS_MSG_SUMMARY_AUTOMATIC_SEND   = &H40003C91

'
' MessageId: CRS_MSG_SUMMARY_RECEIVE_MATCHED
'
' MessageText:
'
'  Project summary information (files matched during receive).
'
Const CRS_MSG_SUMMARY_RECEIVE_MATCHED  = &H40003C92

'
' MessageId: CRS_MSG_SUMMARY_SEND_MATCHED
'
' MessageText:
'
'  Project summary information (files matched during send).
'
Const CRS_MSG_SUMMARY_SEND_MATCHED     = &H40003C93

'
' MessageId: CRS_MSG_SUMMARY_PULL_MATCHED
'
' MessageText:
'
'  Project summary information (files matched during pull).
'
Const CRS_MSG_SUMMARY_PULL_MATCHED     = &H40003C94

'
' MessageId: CRS_MSG_SUMMARY_RECEIVE_ERRORED
'
' MessageText:
'
'  Project summary information (files errored during receive).
'
Const CRS_MSG_SUMMARY_RECEIVE_ERRORED  = &H40003C95

'
' MessageId: CRS_MSG_SUMMARY_SEND_ERRORED
'
' MessageText:
'
'  Project summary information (files errored during send).
'
Const CRS_MSG_SUMMARY_SEND_ERRORED     = &H40003C96

'
' MessageId: CRS_MSG_SUMMARY_PULL_ERRORED
'
' MessageText:
'
'  Project summary information (files errored during pull).
'
Const CRS_MSG_SUMMARY_PULL_ERRORED     = &H40003C97

'
' MessageId: CRS_MSG_SUMMARY_LAST
'
' MessageText:
'
'  Site Server Content Deployment last summary event message.
'
Const CRS_MSG_SUMMARY_LAST             = &H40003CBE

'
' MessageId: CRS_CAB_ERROR_FIRST
'
' MessageText:
'
'  Remote installer first error message.
'
Const CRS_CAB_ERROR_FIRST              = &HC0003CF0

'
' MessageId: CRS_CAB_ERROR_CABINET_NOT_FOUND
'
' MessageText:
'
'  Cannot find the specified cabinet file.
'
Const CRS_CAB_ERROR_CABINET_NOT_FOUND  = &HC0003CF1

'
' MessageId: CRS_CAB_ERROR_NOT_A_CABINET
'
' MessageText:
'
'  Specified file is not a valid cabinet file.
'
Const CRS_CAB_ERROR_NOT_A_CABINET      = &HC0003CF2

'
' MessageId: CRS_CAB_ERROR_UNKNOWN_CABINET_VERSION
'
' MessageText:
'
'  Specified file is an unknown version of a cabinet file.
'
Const CRS_CAB_ERROR_UNKNOWN_CABINET_VERSION = &HC0003CF3

'
' MessageId: CRS_CAB_ERROR_CORRUPT_CABINET
'
' MessageText:
'
'  Specified cabinet file is corrupt.
'
Const CRS_CAB_ERROR_CORRUPT_CABINET    = &HC0003CF4

'
' MessageId: CRS_CAB_ERROR_ALLOC_FAIL
'
' MessageText:
'
'  Out of memory.
'
Const CRS_CAB_ERROR_ALLOC_FAIL         = &HC0003CF5

'
' MessageId: CRS_CAB_ERROR_BAD_COMPR_TYPE
'
' MessageText:
'
'  Specified cabinet file uses an unknown compression type.
'
Const CRS_CAB_ERROR_BAD_COMPR_TYPE     = &HC0003CF6

'
' MessageId: CRS_CAB_ERROR_MDI_FAIL
'
' MessageText:
'
'  Compressed data in the specified cabinet file is corrupt.
'
Const CRS_CAB_ERROR_MDI_FAIL           = &HC0003CF7

'
' MessageId: CRS_CAB_ERROR_TARGET_FILE
'
' MessageText:
'
'  Could not save extracted files from the specified cabinet file.
'
Const CRS_CAB_ERROR_TARGET_FILE        = &HC0003CF8

'
' MessageId: CRS_CAB_ERROR_RESERVE_MISMATCH
'
' MessageText:
'
'  Specified cabinet file has a non-valid RESERVE size.
'
Const CRS_CAB_ERROR_RESERVE_MISMATCH   = &HC0003CF9

'
' MessageId: CRS_CAB_ERROR_WRONG_CABINET
'
' MessageText:
'
'  Specified cabinet file is not the right cabinet in the set.
'
Const CRS_CAB_ERROR_WRONG_CABINET      = &HC0003CFA

'
' MessageId: CRS_CAB_ERROR_USER_ABORT
'
' MessageText:
'
'  Could not extract the specified cabinet file - user aborted the operation.
'
Const CRS_CAB_ERROR_USER_ABORT         = &HC0003CFB

'
' MessageId: CRS_CAB_WARNING_CAB_NOT_SIGNED
'
' MessageText:
'
'  Specified cabinet file is not a signed cabinet file.
'
Const CRS_CAB_WARNING_CAB_NOT_SIGNED   = &H80003CFC

'
' MessageId: CRS_CAB_WARNING_SIGNATURE_NOT_VERIFIED
'
' MessageText:
'
'  Signature on the specified cabinet could not be verified.
'
Const CRS_CAB_WARNING_SIGNATURE_NOT_VERIFIED = &H80003CFD

'
' MessageId: CRS_CAB_ERROR_INFFILE_NOT_FOUND
'
' MessageText:
'
'  INF file was not found inside the specified cabinet file.
'
Const CRS_CAB_ERROR_INFFILE_NOT_FOUND  = &HC0003CFE

'
' MessageId: CRS_INF_ERROR_ADVPACK_NOT_LOADED
'
' MessageText:
'
'  Could not load ADVPACK.DLL.
'
Const CRS_INF_ERROR_ADVPACK_NOT_LOADED = &HC0003CFF

'
' MessageId: CRS_INF_ERROR_ADVPACK_WRONG_VERSION
'
' MessageText:
'
'  This version of ADVPACK.DLL is not supported.
'
Const CRS_INF_ERROR_ADVPACK_WRONG_VERSION = &HC0003D00

'
' MessageId: CRS_INF_ERROR_INVALID_INF
'
' MessageText:
'
'  INF file found inside the specified cabinet file is not a valid INF file.
'
Const CRS_INF_ERROR_INVALID_INF        = &HC0003D01

'
' MessageId: CRS_INF_ERROR_NOTHING_TO_INSTALL
'
' MessageText:
'
'  Could not find any of the remote install sections inside the INF file.
'
Const CRS_INF_ERROR_NOTHING_TO_INSTALL = &HC0003D02

'
' MessageId: CRS_INF_ERROR_NOTHING_TO_UNINSTALL
'
' MessageText:
'
'  Could not find any of the remote uninstall sections inside the INF file.
'
Const CRS_INF_ERROR_NOTHING_TO_UNINSTALL = &HC0003D03

'
' MessageId: CRS_INF_ERROR_BUSY_FILES
'
' MessageText:
'
'  Files are busy.  Cannot install them unless allowed to do a REBOOT.
'
Const CRS_INF_ERROR_BUSY_FILES         = &HC0003D04

'
' MessageId: CRS_CAB_WARNING_MANUAL_REBOOT
'
' MessageText:
'
'  Setup completed successfully, but the server could not be rebooted automatically. Manual reboot is necessary.
'
Const CRS_CAB_WARNING_MANUAL_REBOOT    = &H80003D05

'
' MessageId: CRS_CAB_WARNING_REBOOT_NEEDED
'
' MessageText:
'
'  Setup completed successfully, but the files became busy during setup.  Manual reboot is necessary.
'
Const CRS_CAB_WARNING_REBOOT_NEEDED    = &H80003D06

'
' MessageId: CRS_INF_SUCCESS_REBOOT_IN_PROGRESS
'
' MessageText:
'
'  Setup completed successfully. The server is being rebooted.
'
Const CRS_INF_SUCCESS_REBOOT_IN_PROGRESS = &H00003D07

'
' MessageId: CRS_INF_SUCCESS
'
' MessageText:
'
'  Setup completed successfully.
'
Const CRS_INF_SUCCESS                  = &H00003D09

'
' MessageId: CRS_INF_ERROR_BUSY_FILES_UNINSTALL
'
' MessageText:
'
'  Files are busy.  Cannot uninstall files unless allowed to reboot.
'
Const CRS_INF_ERROR_BUSY_FILES_UNINSTALL = &HC0003D0A

'
' MessageId: CRS_CAB_WARNING_MANUAL_REBOOT_UNINSTALL
'
' MessageText:
'
'  Uninstall completed successfully, but the server could not be rebooted automatically. Manual reboot is necessary.
'
Const CRS_CAB_WARNING_MANUAL_REBOOT_UNINSTALL = &H80003D0B

'
' MessageId: CRS_CAB_WARNING_REBOOT_NEEDED_UNINSTALL
'
' MessageText:
'
'  Uninstall completed successfully, but the files became busy during setup.  Manual reboot is necessary.
'
Const CRS_CAB_WARNING_REBOOT_NEEDED_UNINSTALL = &H80003D0C

'
' MessageId: CRS_INF_SUCCESS_REBOOT_IN_PROGRESS_UNINSTALL
'
' MessageText:
'
'  Uninstall completed successfully. The server is being rebooted.
'
Const CRS_INF_SUCCESS_REBOOT_IN_PROGRESS_UNINSTALL = &H00003D0D

'
' MessageId: CRS_INF_SUCCESS_UNINSTALL
'
' MessageText:
'
'  Uninstall completed successfully.
'
Const CRS_INF_SUCCESS_UNINSTALL        = &H00003D0E

'
' MessageId: CRS_CAB_ERROR_ADVPACK_FAILED
'
' MessageText:
'
'  Problem installing the CAB. Check CAB and INF files for validity. 
'
Const CRS_CAB_ERROR_ADVPACK_FAILED     = &HC0003D0F

'
' MessageId: CRS_CAB_ERROR_LOCKED_FILES
'
' MessageText:
'
'  At least one of the files inside the CAB is open for exclusive write/delete access.
'
Const CRS_CAB_ERROR_LOCKED_FILES       = &HC0003D10

'
' MessageId: CRS_CAB_ERROR_UNKNOWN
'
' MessageText:
'
'  An unknown error occurred while processing the specified cabinet file.
'
Const CRS_CAB_ERROR_UNKNOWN            = &HC0003DEE

'
' MessageId: CRS_CAB_ERROR_LAST
'
' MessageText:
'
'  Remote installer last error message.
'
Const CRS_CAB_ERROR_LAST               = &H40003DEF

'
' MessageId: CRS_ERROR_LAST
'
' MessageText:
'
'  Site Server Content Deployment service last error message.
'
Const CRS_ERROR_LAST                   = &H40003E7F

'
' MessageId: CRS_EVENT_FIRST
'
' MessageText:
'
'  Site Server Content Deployment Service first event message.
'
Const CRS_EVENT_FIRST                  = &H400036B0

'
' MessageId: CRS_EVENT_NET_SOURCE
'
' MessageText:
'
'  Source directory is on a network drive.  Cannot deploy from network drives.
'
Const CRS_EVENT_NET_SOURCE             = &HC00036B4

'
' MessageId: CRS_EVENT_ERROR_ACCESS_DENIED
'
' MessageText:
'
'  Access denied.
'
Const CRS_EVENT_ERROR_ACCESS_DENIED    = &HC00036B5

'
' MessageId: CRS_EVENT_FILE_CREATE_ERROR
'
' MessageText:
'
'  Unable to open the file.
'
Const CRS_EVENT_FILE_CREATE_ERROR      = &HC00036B6

'
' MessageId: CRS_EVENT_SENDINET_ERROR
'
' MessageText:
'
'  Project was unable to send the file.
'
Const CRS_EVENT_SENDINET_ERROR         = &HC00036B7

'
' MessageId: CRS_EVENT_SAMEBOX_NET_TARGET
'
' MessageText:
'
'  Destination directory is on a network drive.  Cannot deploy to network drives.
'
Const CRS_EVENT_SAMEBOX_NET_TARGET     = &HC00036B8

'
' MessageId: CRS_EVENT_BAD_SOURCE
'
' MessageText:
'
'  Unable to access the project source.
'
Const CRS_EVENT_BAD_SOURCE             = &HC00036B9

'
' MessageId: CRS_EVENT_SENDINET_CONNECT
'
' MessageText:
'
'  Unable to connect to the remote server.
'
Const CRS_EVENT_SENDINET_CONNECT       = &HC00036BA

'
' MessageId: CRS_EVENT_HASH_MISMATCH
'
' MessageText:
'
'  MD5 Hash did not match during a transmission.  This could indicate transmission failure or that the files transmitted at the source have been modified in transit.
'
Const CRS_EVENT_HASH_MISMATCH          = &HC00036BB

'
' MessageId: CRS_EVENT_SERVER_ABORTED
'
' MessageText:
'
'  Remote server was restarted.  The project is being restarted.
'
Const CRS_EVENT_SERVER_ABORTED         = &HC00036BC

'
' MessageId: CRS_EVENT_REPLICATION_ABORTED
'
' MessageText:
'
'  Project was aborted.
'
Const CRS_EVENT_REPLICATION_ABORTED    = &HC00036BD

'
' MessageId: CRS_EVENT_SEQUENCE_ERROR
'
' MessageText:
'
'  Internal messaging sequence error occurred.
'
Const CRS_EVENT_SEQUENCE_ERROR         = &HC00036BE

'
' MessageId: CRS_EVENT_SERVICE_STARTED
'
' MessageText:
'
'  Site Server Content Deployment service started successfully.
'
Const CRS_EVENT_SERVICE_STARTED        = &H400036BF

'
' MessageId: CRS_EVENT_SERVICE_SHUTDOWN
'
' MessageText:
'
'  Site Server Content Deployment service shut down successfully.
'
Const CRS_EVENT_SERVICE_SHUTDOWN       = &H400036C0

'
' MessageId: CRS_EVENT_METABASE_ACCESS
'
' MessageText:
'
'  Could not open given storage/stream.  Ensure the authentication account has access to this storage/stream.
'
Const CRS_EVENT_METABASE_ACCESS        = &HC00036C2

'
' MessageId: CRS_EVENT_AUTH_FAILURE
'
' MessageText:
'
'  Authorization failure against the destination server.  Ensure the service has access to this server.
'
Const CRS_EVENT_AUTH_FAILURE           = &HC00036C3

'
' MessageId: CRS_EVENT_REMOTE_AUTH_FAILURE
'
' MessageText:
'
'  Remote authorization failed to the destination server.  Ensure the service has access to this server.
'
Const CRS_EVENT_REMOTE_AUTH_FAILURE    = &HC00036C4

'
' MessageId: CRS_EVENT_ERROR_NOT_IN_ORDER
'
' MessageText:
'
'  Message was received out of order.  Closing connection.
'
Const CRS_EVENT_ERROR_NOT_IN_ORDER     = &HC00036C5

'
' MessageId: CRS_EVENT_CONNECTION_RETRY_FAILED
'
' MessageText:
'
'  Connection failed and could not be re-established.
'
Const CRS_EVENT_CONNECTION_RETRY_FAILED = &HC00036C6

'
' MessageId: CRS_EVENT_REPLICATION_CANCELED
'
' MessageText:
'
'  Project canceled at the request of the user.
'
Const CRS_EVENT_REPLICATION_CANCELED   = &HC00036C7

'
' MessageId: CRS_EVENT_ERROR_DEST_TOOBIG
'
' MessageText:
'
'  Could not add the specified destination(s).  The maximum number of destinations has been reached.
'
Const CRS_EVENT_ERROR_DEST_TOOBIG      = &HC00036C8

'
' MessageId: CRS_EVENT_ERROR_NO_IP_MAPPING
'
' MessageText:
'
'  Cannot resolve IP address for the destination server.  No virtual directory created.
'
Const CRS_EVENT_ERROR_NO_IP_MAPPING    = &HC00036C9

'
' MessageId: CRS_EVENT_ERROR_DISK_FULL
'
' MessageText:
'
'  Not enough space on the disk.
'
Const CRS_EVENT_ERROR_DISK_FULL        = &HC00036CA

'
' MessageId: CRS_EVENT_ERROR_TOO_MANY_RUNNING
'
' MessageText:
'
'  Too many active projects. No more can be started until others complete.
'
Const CRS_EVENT_ERROR_TOO_MANY_RUNNING = &HC00036CB

'
' MessageId: CRS_EVENT_ERROR_WOULDBLOCK
'
' MessageText:
'
'  The network operation would block.
'
Const CRS_EVENT_ERROR_WOULDBLOCK       = &H000036D3

'
' MessageId: CRS_EVENT_ERROR_NETDOWN
'
' MessageText:
'
'  The remote network is down.
'
Const CRS_EVENT_ERROR_NETDOWN          = &HC00036E2

'
' MessageId: CRS_EVENT_ERROR_NETUNREACH
'
' MessageText:
'
'  The remote network is unreachable.
'
Const CRS_EVENT_ERROR_NETUNREACH       = &HC00036E3

'
' MessageId: CRS_EVENT_ERROR_CONNABORTED
'
' MessageText:
'
'  The network connection was aborted at the network layer.
'
Const CRS_EVENT_ERROR_CONNABORTED      = &HC00036E5

'
' MessageId: CRS_EVENT_ERROR_TIMEOUT
'
' MessageText:
'
'  The network session timed out on a send or receive operation.
'
Const CRS_EVENT_ERROR_TIMEOUT          = &HC00036EC

'
' MessageId: CRS_EVENT_ERROR_NO_PROJECTS
'
' MessageText:
'
'  No projects defined.
'
Const CRS_EVENT_ERROR_NO_PROJECTS      = &HC0003714

'
' MessageId: CRS_EVENT_ERROR_PROJECT_NOT_FOUND
'
' MessageText:
'
'  Could not find the project.
'
Const CRS_EVENT_ERROR_PROJECT_NOT_FOUND = &HC0003715

'
' MessageId: CRS_EVENT_ERROR_INVALID_PARAMETER
'
' MessageText:
'
'  Invalid parameter.
'
Const CRS_EVENT_ERROR_INVALID_PARAMETER = &HC0003716

'
' MessageId: CRS_EVENT_ERROR_AUTHENTICATION_FAILURE
'
' MessageText:
'
'  Authentication failure. Ensure the account has proper access on local and remote servers.
'
Const CRS_EVENT_ERROR_AUTHENTICATION_FAILURE = &HC0003718

'
' MessageId: CRS_EVENT_ERROR_DELETE_PROJECT_DOWN_ROUTE
'
' MessageText:
'
'  Could not delete the route from the project on at least one machine down the defined routes.  The project will have to be edited manually there.
'
Const CRS_EVENT_ERROR_DELETE_PROJECT_DOWN_ROUTE = &H80003719

'
' MessageId: CRS_EVENT_ERROR_SERVICE_NOT_RUNNING
'
' MessageText:
'
'  Server is available, but the Site Server Content Deployment service is not running.
'
Const CRS_EVENT_ERROR_SERVICE_NOT_RUNNING = &HC000371A

'
' MessageId: CRS_EVENT_ERROR_HOST_DOWN
'
' MessageText:
'
'  Server is unavailable.
'
Const CRS_EVENT_ERROR_HOST_DOWN        = &HC000371B

'
' MessageId: CRS_EVENT_ERROR_BAD_NET_NAME
'
' MessageText:
'
'  Server cannot be found.
'
Const CRS_EVENT_ERROR_BAD_NET_NAME     = &HC000371C

'
' MessageId: CRS_EVENT_ERROR_ROUTE_NOT_FOUND
'
' MessageText:
'
'  Could not find route.  Ensure the route name is correct and that it exists on the target servers.
'
Const CRS_EVENT_ERROR_ROUTE_NOT_FOUND  = &HC000371D

'
' MessageId: CRS_EVENT_ERROR_NO_ROUTES
'
' MessageText:
'
'  No routes defined.
'
Const CRS_EVENT_ERROR_NO_ROUTES        = &HC000371E

'
' MessageId: CRS_EVENT_ERROR_CREATE_PROJECT_DOWN_ROUTE
'
' MessageText:
'
'  Could not create the project on at least one server down the defined routes.  The project will have to be created manually there.
'
Const CRS_EVENT_ERROR_CREATE_PROJECT_DOWN_ROUTE = &H8000371F

'
' MessageId: CRS_EVENT_ERROR_SERVICE_PAUSED
'
' MessageText:
'
'  Site Server Content Deployment service on the destination server is paused and is not accepting new requests.  Retry the project later.
'
Const CRS_EVENT_ERROR_SERVICE_PAUSED   = &HC0003720

'
' MessageId: CRS_EVENT_ERROR_SERVICE_NOT_PAUSED
'
' MessageText:
'
'  Could not restart service. Service is not paused.
'
Const CRS_EVENT_ERROR_SERVICE_NOT_PAUSED = &HC0003721

'
' MessageId: CRS_EVENT_ERROR_NAME_NOT_RESOLVED
'
' MessageText:
'
'  Could not resolve the URL.  Ensure URL and/or proxy settings are correct.
'
Const CRS_EVENT_ERROR_NAME_NOT_RESOLVED = &HC0003722

'
' MessageId: CRS_EVENT_ERROR_CONNECTION_RESET
'
' MessageText:
'
'  Connection to the destination server has been reset.  This indicates problems with the remote service or network.
'
Const CRS_EVENT_ERROR_CONNECTION_RESET = &HC0003723

'
' MessageId: CRS_EVENT_ERROR_REPLICATION_NOT_FOUND
'
' MessageText:
'
'  No entries.
'
Const CRS_EVENT_ERROR_REPLICATION_NOT_FOUND = &HC0003724

'
' MessageId: CRS_EVENT_ERROR_SERVICE_ALREADY_RUNNING
'
' MessageText:
'
'  Could not start service.  The service has already been started.
'
Const CRS_EVENT_ERROR_SERVICE_ALREADY_RUNNING = &HC0003725

'
' MessageId: CRS_EVENT_ERROR_PROJECT_ALREADY_RUNNING
'
' MessageText:
'
'  Failed to start project.  It is already running.
'
Const CRS_EVENT_ERROR_PROJECT_ALREADY_RUNNING = &HC0003726

'
' MessageId: CRS_EVENT_FILE_MOVE_ERROR
'
' MessageText:
'
'  Failed to move file.
'
Const CRS_EVENT_FILE_MOVE_ERROR        = &HC0003727

'
' MessageId: CRS_EVENT_PRODUCT_EXPIRED
'
' MessageText:
'
'  Thank you for your interest in Site Server Content Deployment.  This software has expired.  Please acquire the final retail version of this software.
'
Const CRS_EVENT_PRODUCT_EXPIRED        = &HC0003728

'
' MessageId: CRS_EVENT_ERROR_PROJECT_INCOMPLETE
'
' MessageText:
'
'  Project information is incomplete.
'
Const CRS_EVENT_ERROR_PROJECT_INCOMPLETE = &HC0003729

'
' MessageId: CRS_EVENT_ERROR_PARAMETER_NOT_FOUND
'
' MessageText:
'
'  Parameter not found.
'
Const CRS_EVENT_ERROR_PARAMETER_NOT_FOUND = &HC000372A

'
' MessageId: CRS_EVENT_ERROR_REPLICATION_RUNNING
'
' MessageText:
'
'  Project is running.  The operation could not be completed.
'
Const CRS_EVENT_ERROR_REPLICATION_RUNNING = &HC000372B

'
' MessageId: CRS_EVENT_ERROR_INVALID_PROJECT_NAME
'
' MessageText:
'
'  Project name is invalid.  Project names cannot contain backslashes and cannot be empty.
'
Const CRS_EVENT_ERROR_INVALID_PROJECT_NAME = &HC000372C

'
' MessageId: CRS_EVENT_ERROR_INVALID_ROUTE_NAME
'
' MessageText:
'
'  Route name is invalid.  Route names cannot contain backslashes or DBCS characters and cannot be empty.
'
Const CRS_EVENT_ERROR_INVALID_ROUTE_NAME = &HC000372D

'
' MessageId: CRS_EVENT_ERROR_INVALID_DWORD
'
' MessageText:
'
'  Parameter must be a positive integer.
'
Const CRS_EVENT_ERROR_INVALID_DWORD    = &HC000372E

'
' MessageId: CRS_EVENT_ERROR_NO_MORE_ITEMS
'
' MessageText:
'
'  No more items are in the list.
'
Const CRS_EVENT_ERROR_NO_MORE_ITEMS    = &H8000372F

'
' MessageId: CRS_EVENT_ERROR_TOO_MANY_ARGS
'
' MessageText:
'
'  Too many arguments specified.
'
Const CRS_EVENT_ERROR_TOO_MANY_ARGS    = &HC0003730

'
' MessageId: CRS_EVENT_MBS_INIT_ERROR
'
' MessageText:
'
'  Internal error trying to initialize for ACL replication.
'
Const CRS_EVENT_MBS_INIT_ERROR         = &HC0003731

'
' MessageId: CRS_EVENT_ERROR_OPENING_FILE
'
' MessageText:
'
'  Error opening file or file not found.
'
Const CRS_EVENT_ERROR_OPENING_FILE     = &HC0003733

'
' MessageId: CRS_EVENT_ERROR_FILE_FORMAT
'
' MessageText:
'
'  Invalid file format.
'
Const CRS_EVENT_ERROR_FILE_FORMAT      = &HC0003734

'
' MessageId: CRS_EVENT_ERROR_FILE_WRITE
'
' MessageText:
'
'  Error writing to file.
'
Const CRS_EVENT_ERROR_FILE_WRITE       = &HC0003735

'
' MessageId: CRS_EVENT_WINSOCK_WSAHOSTNAME
'
' MessageText:
'
'  Gethostname failed.
'
Const CRS_EVENT_WINSOCK_WSAHOSTNAME    = &HC0003736

'
' MessageId: CRS_EVENT_ERROR_INVALID_CONTEXT
'
' MessageText:
'
'  Current context is invalid.  Project being reset.
'
Const CRS_EVENT_ERROR_INVALID_CONTEXT  = &HC000373D

'
' MessageId: CRS_EVENT_ERROR_DOWNLEVEL_SERVER
'
' MessageText:
'
'  Operation is not supported on a down-level server.
'
Const CRS_EVENT_ERROR_DOWNLEVEL_SERVER = &HC000373E

'
' MessageId: CRS_EVENT_ERROR_NO_MAPPING
'
' MessageText:
'
'  URL does not map to any project definitions.
'
Const CRS_EVENT_ERROR_NO_MAPPING       = &HC000373F

'
' MessageId: CRS_EVENT_ERROR_START_PENDING
'
' MessageText:
'
'  Start pending completion of the active project.
'
Const CRS_EVENT_ERROR_START_PENDING    = &HC0003740

'
' MessageId: CRS_EVENT_ERROR_NO_EVENTSINKS
'
' MessageText:
'
'  No event sinks defined.
'
Const CRS_EVENT_ERROR_NO_EVENTSINKS    = &HC0003741

'
' MessageId: CRS_EVENT_ERROR_EVENTSINK_NOT_FOUND
'
' MessageText:
'
'  Could not find event sink.
'
Const CRS_EVENT_ERROR_EVENTSINK_NOT_FOUND = &HC0003742

'
' MessageId: CRS_EVENT_ERROR_WSAHOSTNOTFOUND
'
' MessageText:
'
'  Host not found.
'
Const CRS_EVENT_ERROR_WSAHOSTNOTFOUND  = &HC0003743

'
' MessageId: CRS_EVENT_ERROR_WSATRYAGAIN
'
' MessageText:
'
'  Host not found, or SERVERFAIL.  Try again.
'
Const CRS_EVENT_ERROR_WSATRYAGAIN      = &HC0003744

'
' MessageId: CRS_EVENT_ERROR_WSANORECOVERY
'
' MessageText:
'
'  Non-recoverable winsock error.
'
Const CRS_EVENT_ERROR_WSANORECOVERY    = &HC0003745

'
' MessageId: CRS_EVENT_ERROR_WSANODATA
'
' MessageText:
'
'  Invalid address.
'
Const CRS_EVENT_ERROR_WSANODATA        = &HC0003746

'
' MessageId: CRS_EVENT_EVENTSINK_INITIALIZED
'
' MessageText:
'
'  Event sink specified by the data field was successfully initialized.
'
Const CRS_EVENT_EVENTSINK_INITIALIZED  = &H00003747

'
' MessageId: CRS_EVENT_ERROR_EVENTSINK_NOT_INITIALIZED
'
' MessageText:
'
'  Event sink specified by the data field failed to initialize.
'
Const CRS_EVENT_ERROR_EVENTSINK_NOT_INITIALIZED = &HC0003748

'
' MessageId: CRS_EVENT_ERROR_NOTHING_TO_ROLLBACK
'
' MessageText:
'
'  Could not roll back project.  No rollback information found.
'
Const CRS_EVENT_ERROR_NOTHING_TO_ROLLBACK = &HC0003749

'
' MessageId: CRS_EVENT_ERROR_NO_DESTINATIONS
'
' MessageText:
'
'  Project could not be started because no destinations are defined.
'
Const CRS_EVENT_ERROR_NO_DESTINATIONS  = &HC000374A

'
' MessageId: CRS_EVENT_ERROR_REAUTHENTICATE
'
' MessageText:
'
'  Re-authenticate using an acceptable protocol.
'
Const CRS_EVENT_ERROR_REAUTHENTICATE   = &HC000374B

'
' MessageId: CRS_EVENT_ERROR_UNSUPPORTED
'
' MessageText:
'
'  Function not supported in this version to this server.
'
Const CRS_EVENT_ERROR_UNSUPPORTED      = &HC000374C

'
' MessageId: CRS_EVENT_ERROR_USER_NOT_FOUND
'
' MessageText:
'
'  Specified user could not be found.
'
Const CRS_EVENT_ERROR_USER_NOT_FOUND   = &HC000374D

'
' MessageId: CRS_EVENT_ERROR_NO_TRANSACTIONS
'
' MessageText:
'
'  No transactions for the specified project.
'
Const CRS_EVENT_ERROR_NO_TRANSACTIONS  = &HC000374E

'
' MessageId: CRS_EVENT_ERROR_NO_SERVERS
'
' MessageText:
'
'  No destination servers defined.
'
Const CRS_EVENT_ERROR_NO_SERVERS       = &HC000374F

'
' MessageId: CRS_EVENT_ERROR_NO_SCHEDULES
'
' MessageText:
'
'  No schedules are defined for this project.
'
Const CRS_EVENT_ERROR_NO_SCHEDULES     = &HC0003750

'
' MessageId: CRS_EVENT_ERROR_NO_EMAIL
'
' MessageText:
'
'  Could not contact SMTP server to send e-mail report.
'
Const CRS_EVENT_ERROR_NO_EMAIL         = &HC0003751

'
' MessageId: CRS_EVENT_ERROR_WAIT_ABORT
'
' MessageText:
'
'  Waiting to abort after losing connection with source server.
'
Const CRS_EVENT_ERROR_WAIT_ABORT       = &HC0003752

'
' MessageId: CRS_EVENT_RESUME_REPLICATION
'
' MessageText:
'
'  Resuming project.
'
Const CRS_EVENT_RESUME_REPLICATION     = &H40003753

'
' MessageId: CRS_EVENT_METABASE_NOT_FOUND
'
' MessageText:
'
'  Metabase is not responding.
'
Const CRS_EVENT_METABASE_NOT_FOUND     = &HC0003754

'
' MessageId: CRS_EVENT_SSE_VROOT_NOT_FOUND
'
' MessageText:
'
'  Site Server virtual directory not found.
'
Const CRS_EVENT_SSE_VROOT_NOT_FOUND    = &HC0003755

'
' MessageId: CRS_EVENT_WARNING_CONNECTION_FAILED
'
' MessageText:
'
'  Connection failed.  Will attempt to re-establish session.
'
Const CRS_EVENT_WARNING_CONNECTION_FAILED = &H80003756

'
' MessageId: CRS_EVENT_ERROR_DROPPED_EMAIL_REPORT
'
' MessageText:
'
'  Dropped e-mail report.
'
Const CRS_EVENT_ERROR_DROPPED_EMAIL_REPORT = &HC0003757

'
' MessageId: CRS_EVENT_ERROR_EMAIL_HOST_NOT_DEFINED
'
' MessageText:
'
'  No SMTP server defined.
'
Const CRS_EVENT_ERROR_EMAIL_HOST_NOT_DEFINED = &HC0003758

'
' MessageId: CRS_EVENT_VROOT_CREATION
'
' MessageText:
'
'  Could not create the specified virtual directory.
'
Const CRS_EVENT_VROOT_CREATION         = &H80003759

'
' MessageId: CRS_EVENT_UPLPAGE_CREATION
'
' MessageText:
'
'  Could not create the upload page.
'
Const CRS_EVENT_UPLPAGE_CREATION       = &HC000375A

'
' MessageId: CRS_EVENT_ERROR_CIRCULAR_ROUTE
'
' MessageText:
'
'  System has detected a circular route.  Project not created.
'
Const CRS_EVENT_ERROR_CIRCULAR_ROUTE   = &HC000375B

'
' MessageId: CRS_EVENT_ERROR_TRANSACTION_APPLY_FAILED
'
' MessageText:
'
'  Transaction application failed.  Check permissions on the destination directory and files and ensure that no files are locked open.
'
Const CRS_EVENT_ERROR_TRANSACTION_APPLY_FAILED = &HC000375C

'
' MessageId: CRS_EVENT_ERROR_DATABASE
'
' MessageText:
'
'  Database error occurred.
'
Const CRS_EVENT_ERROR_DATABASE         = &HC000375D

'
' MessageId: CRS_EVENT_ERROR_SINK_CONNECT_FAILED
'
' MessageText:
'
'  Unable to connect to remote server to forward events.
'
Const CRS_EVENT_ERROR_SINK_CONNECT_FAILED = &HC000375E

'
' MessageId: CRS_EVENT_ERROR_CANT_SEND_EVENTS_TO_DOWNLEVEL_SERVER
'
' MessageText:
'
'  Unable to send events to the destination server.  This operation is not supported.
'
Const CRS_EVENT_ERROR_CANT_SEND_EVENTS_TO_DOWNLEVEL_SERVER = &HC000375F

'
' MessageId: CRS_EVENT_ERROR_FILE_CORRUPT
'
' MessageText:
'
'  File is corrupt or unreadable.
'
Const CRS_EVENT_ERROR_FILE_CORRUPT     = &HC0003760

'
' MessageId: CRS_EVENT_ERROR_FILE_BUSY
'
' MessageText:
'
'  File is busy.
'
Const CRS_EVENT_ERROR_FILE_BUSY        = &HC0003761

'
' MessageId: CRS_EVENT_ACL_ERROR_INVALID_ACE
'
' MessageText:
'
'  Could not set the ACE on this file.
'
Const CRS_EVENT_ACL_ERROR_INVALID_ACE  = &H80003762

'
' MessageId: CRS_EVENT_ACL_ERROR_ACL_FAILED
'
' MessageText:
'
'  Could not set the ACLs appropriately on this file, setting default ACLs on this file.
'
Const CRS_EVENT_ACL_ERROR_ACL_FAILED   = &HC0003763

'
' MessageId: CRS_EVENT_ERROR_PROJECT_NOT_FOUND_ON_DESTINATION
'
' MessageText:
'
'  Could not find project on the destination server.
'
Const CRS_EVENT_ERROR_PROJECT_NOT_FOUND_ON_DESTINATION = &HC0003764

'
' MessageId: CRS_EVENT_ERROR_PROJECT_INCOMPLETE_ON_DESTINATION
'
' MessageText:
'
'  Project information is incomplete on the destination server.
'
Const CRS_EVENT_ERROR_PROJECT_INCOMPLETE_ON_DESTINATION = &HC0003765

'
' MessageId: CRS_EVENT_ERROR_SERVICE_DOWN_ON_REMOTE_SERVER
'
' MessageText:
'
'  Remote server is available, but the Site Server Content Deployment service is not running.
'
Const CRS_EVENT_ERROR_SERVICE_DOWN_ON_REMOTE_SERVER = &HC0003766

'
' MessageId: CRS_EVENT_ERROR_DISK_FULL_ON_DESTINATION
'
' MessageText:
'
'  Disk is full on the destination server.
'
Const CRS_EVENT_ERROR_DISK_FULL_ON_DESTINATION = &HC0003767

'
' MessageId: CRS_EVENT_FILE_CREATE_ERROR_ON_DESTINATION
'
' MessageText:
'
'  Unable to open a file on the destination server.  Check permissions on the project directory and files.
'
Const CRS_EVENT_FILE_CREATE_ERROR_ON_DESTINATION = &HC0003768

'
' MessageId: CRS_EVENT_ERROR_REMOTE_SERVER_NOT_FOUND
'
' MessageText:
'
'  Remote server could not be found.
'
Const CRS_EVENT_ERROR_REMOTE_SERVER_NOT_FOUND = &HC0003769

'
' MessageId: CRS_EVENT_ERROR_REMOTE_APPLY_FAILED
'
' MessageText:
'
'  Unable to apply transactions on the destination server.
'
Const CRS_EVENT_ERROR_REMOTE_APPLY_FAILED = &HC000376A

'
' MessageId: CRS_EVENT_ERROR_INVALID_FLAG_COMBINATION
'
' MessageText:
'
'  Invalid flag combination.
'
Const CRS_EVENT_ERROR_INVALID_FLAG_COMBINATION = &HC000376B

'
' MessageId: CRS_EVENT_ERROR_RUNNING_SCRIPT
'
' MessageText:
'
'  There was an error running the script.  Ensure that the script exists and can be located in the path.
'
Const CRS_EVENT_ERROR_RUNNING_SCRIPT   = &HC000376C

'
' MessageId: CRS_EVENT_ERROR_CANT_FORWARD_TO_LOCAL_SERVER
'
' MessageText:
'
'  Cannot forward events to the local server.
'
Const CRS_EVENT_ERROR_CANT_FORWARD_TO_LOCAL_SERVER = &HC000376D

'
' MessageId: CRS_EVENT_ERROR_SCHEDULE_NOT_FOUND
'
' MessageText:
'
'  Specified project schedule could not be found.
'
Const CRS_EVENT_ERROR_SCHEDULE_NOT_FOUND = &HC000376E

'
' MessageId: CRS_EVENT_ERROR_METABASE
'
' MessageText:
'
'  An error occurred accessing the metabase.  Ensure that the web site exists and that the account has access to it.
'
Const CRS_EVENT_ERROR_METABASE         = &HC000376F

'
' MessageId: CRS_EVENT_ERROR_SCHEDULER_FAILURE
'
' MessageText:
'
'  An error occurred with the task scheduler.
'
Const CRS_EVENT_ERROR_SCHEDULER_FAILURE = &HC0003770

'
' MessageId: CRS_EVENT_SAMEBOX_META_TARGET
'
' MessageText:
'
'  A destination for metabase replication is invalid.
'
Const CRS_EVENT_SAMEBOX_META_TARGET    = &HC0003771

'
' MessageId: CRS_EVENT_ERROR_DROPPED_EVENTS
'
' MessageText:
'
'  The event sink specified by the data field has started dropping events.
'
Const CRS_EVENT_ERROR_DROPPED_EVENTS   = &HC0003772

'
' MessageId: CRS_EVENT_REPLICATION_FIRST
'
' MessageText:
'
'  Site Server Content Deployment first replication event message.
'
Const CRS_EVENT_REPLICATION_FIRST      = &H400037DC

'
' MessageId: CRS_EVENT_STARTING_REPLICATION
'
' MessageText:
'
'  Project starting to the destination server.
'
Const CRS_EVENT_STARTING_REPLICATION   = &H400037DD

'
' MessageId: CRS_EVENT_REPLICATION_COMPLETE
'
' MessageText:
'
'  Project complete to the destination server.
'
Const CRS_EVENT_REPLICATION_COMPLETE   = &H400037DE

'
' MessageId: CRS_EVENT_STARTING_PULL_REPLICATION
'
' MessageText:
'
'  Retrieval project starting.
'
Const CRS_EVENT_STARTING_PULL_REPLICATION = &H400037DF

'
' MessageId: CRS_EVENT_PULL_REPLICATION_COMPLETE
'
' MessageText:
'
'  Retrieval project complete.
'
Const CRS_EVENT_PULL_REPLICATION_COMPLETE = &H400037E0

'
' MessageId: CRS_EVENT_STARTING_RECEIVE_REPLICATION
'
' MessageText:
'
'  Starting to receive project.
'
Const CRS_EVENT_STARTING_RECEIVE_REPLICATION = &H400037E1

'
' MessageId: CRS_EVENT_REPLICATION_RECEIVE_COMPLETE
'
' MessageText:
'
'  Finished receiving project.
'
Const CRS_EVENT_REPLICATION_RECEIVE_COMPLETE = &H400037E2

'
' MessageId: CRS_EVENT_STARTING_REPLICATION_SCAN
'
' MessageText:
'
'  Project starting.
'
Const CRS_EVENT_STARTING_REPLICATION_SCAN = &H400037E3

'
' MessageId: CRS_EVENT_REPLICATION_LAST
'
' MessageText:
'
'  Site Server Content Deployment last replication event message.
'
Const CRS_EVENT_REPLICATION_LAST       = &H4000380D

'
' MessageId: CRS_EVENT_FILE_FIRST
'
' MessageText:
'
'  Site Server Content Deployment first file event message.
'
Const CRS_EVENT_FILE_FIRST             = &H4000380E

'
' MessageId: CRS_EVENT_SENDING_FILE
'
' MessageText:
'
'  Sending file.
'
Const CRS_EVENT_SENDING_FILE           = &H4000380F

'
' MessageId: CRS_EVENT_SENT_FILE
'
' MessageText:
'
'  File sent.
'
Const CRS_EVENT_SENT_FILE              = &H40003810

'
' MessageId: CRS_EVENT_RECEIVING_FILE
'
' MessageText:
'
'  Receiving file.
'
Const CRS_EVENT_RECEIVING_FILE         = &H40003811

'
' MessageId: CRS_EVENT_RECEIVED_FILE
'
' MessageText:
'
'  File received.
'
Const CRS_EVENT_RECEIVED_FILE          = &H40003812

'
' MessageId: CRS_EVENT_SENT_DELETE_FILE
'
' MessageText:
'
'  Sent delete file request.
'
Const CRS_EVENT_SENT_DELETE_FILE       = &H40003813

'
' MessageId: CRS_EVENT_RECEIVED_DELETE_FILE
'
' MessageText:
'
'  File delete request received.
'
Const CRS_EVENT_RECEIVED_DELETE_FILE   = &H40003814

'
' MessageId: CRS_EVENT_RETRYING_SENDING_FILE
'
' MessageText:
'
'  Retrying to send file.
'
Const CRS_EVENT_RETRYING_SENDING_FILE  = &H40003818

'
' MessageId: CRS_EVENT_FILE_BUSY
'
' MessageText:
'
'  File is busy.  The service is waiting for the file to become available.
'
Const CRS_EVENT_FILE_BUSY              = &H40003819

'
' MessageId: CRS_EVENT_SENDING_ACL
'
' MessageText:
'
'  Sending the ACL for this file.
'
Const CRS_EVENT_SENDING_ACL            = &H4000381A

'
' MessageId: CRS_EVENT_SENT_ACL
'
' MessageText:
'
'  Sent the ACL for this file.
'
Const CRS_EVENT_SENT_ACL               = &H4000381B

'
' MessageId: CRS_EVENT_RECEIVING_ACL
'
' MessageText:
'
'  Receiving the ACL for this file.
'
Const CRS_EVENT_RECEIVING_ACL          = &H4000381C

'
' MessageId: CRS_EVENT_RECEIVED_ACL
'
' MessageText:
'
'  Received the ACL for this file.
'
Const CRS_EVENT_RECEIVED_ACL           = &H4000381D

'
' MessageId: CRS_EVENT_PULLED_FILE_HTTP
'
' MessageText:
'
'  File retrieved over HTTP.
'
Const CRS_EVENT_PULLED_FILE_HTTP       = &H4000381E

'
' MessageId: CRS_EVENT_PULLED_FILE_FTP
'
' MessageText:
'
'  File retrieved over FTP.
'
Const CRS_EVENT_PULLED_FILE_FTP        = &H4000381F

'
' MessageId: CRS_EVENT_FILE_COMMITTED
'
' MessageText:
'
'  File committed to disk.
'
Const CRS_EVENT_FILE_COMMITTED         = &H40003820

'
' MessageId: CRS_EVENT_FILE_DELETED
'
' MessageText:
'
'  File deleted.
'
Const CRS_EVENT_FILE_DELETED           = &H40003821

'
' MessageId: CRS_EVENT_SKIPPING_LOCKED_FILE
'
' MessageText:
'
'  File skipped because it could not be opened.
'
Const CRS_EVENT_SKIPPING_LOCKED_FILE   = &H80003822

'
' MessageId: CRS_EVENT_FILE_MATCHED
'
' MessageText:
'
'  File matched.
'
Const CRS_EVENT_FILE_MATCHED           = &H40003823

'
' MessageId: CRS_EVENT_FILE_LAST
'
' MessageText:
'
'  Site Server Content Deployment last file event message.
'
Const CRS_EVENT_FILE_LAST              = &H4000383F

'
' MessageId: CRS_EVENT_ADMIN_FIRST
'
' MessageText:
'
'  Site Server Content Deployment first administration event message.
'
Const CRS_EVENT_ADMIN_FIRST            = &H40003840

'
' MessageId: CRS_EVENT_PROJECT_CREATED
'
' MessageText:
'
'  Project created.
'
Const CRS_EVENT_PROJECT_CREATED        = &H40003841

'
' MessageId: CRS_EVENT_PROJECT_DELETED
'
' MessageText:
'
'  Project deleted.
'
Const CRS_EVENT_PROJECT_DELETED        = &H40003842

'
' MessageId: CRS_EVENT_PROJECT_EDITED
'
' MessageText:
'
'  Project edited.
'
Const CRS_EVENT_PROJECT_EDITED         = &H40003843

'
' MessageId: CRS_EVENT_ROUTE_CREATED
'
' MessageText:
'
'  Route created.
'
Const CRS_EVENT_ROUTE_CREATED          = &H40003844

'
' MessageId: CRS_EVENT_ROUTE_DELETED
'
' MessageText:
'
'  Route deleted.
'
Const CRS_EVENT_ROUTE_DELETED          = &H40003845

'
' MessageId: CRS_EVENT_ROUTE_EDITED
'
' MessageText:
'
'  Route edited.
'
Const CRS_EVENT_ROUTE_EDITED           = &H40003846

'
' MessageId: CRS_EVENT_SERVER_EDITED
'
' MessageText:
'
'  Server settings modified.
'
Const CRS_EVENT_SERVER_EDITED          = &H40003847

'
' MessageId: CRS_EVENT_EVENTSINK_CREATED
'
' MessageText:
'
'  Event sink specified by the data field was added.
'
Const CRS_EVENT_EVENTSINK_CREATED      = &H40003848

'
' MessageId: CRS_EVENT_EVENTSINK_DELETED
'
' MessageText:
'
'  Event sink specified by the data field was deleted.
'
Const CRS_EVENT_EVENTSINK_DELETED      = &H40003849

'
' MessageId: CRS_EVENT_CLEARED_EVENTS
'
' MessageText:
'
'  Event store specified by the data field was cleared.
'
Const CRS_EVENT_CLEARED_EVENTS         = &H4000384A

'
' MessageId: CRS_EVENT_CLEARED_ALL_EVENTS
'
' MessageText:
'
'  Each database event store on this server was cleared.
'
Const CRS_EVENT_CLEARED_ALL_EVENTS     = &H4000384B

'
' MessageId: CRS_EVENT_ADMIN_LAST
'
' MessageText:
'
'  Site Server Content Deployment last administration event message.
'
Const CRS_EVENT_ADMIN_LAST             = &H40003872

'
' MessageId: CRS_EVENT_SUMMARY_FIRST
'
' MessageText:
'
'  Site Server Content Deployment first summary event message.
'
Const CRS_EVENT_SUMMARY_FIRST          = &H400038A4

'
' MessageId: CRS_EVENT_SUMMARY_RECEIVE
'
' MessageText:
'
'  Project summary information (files received).
'
Const CRS_EVENT_SUMMARY_RECEIVE        = &H400038A5

'
' MessageId: CRS_EVENT_SUMMARY_SEND
'
' MessageText:
'
'  Project summary information (files sent).
'
Const CRS_EVENT_SUMMARY_SEND           = &H400038A6

'
' MessageId: CRS_EVENT_SUMMARY_PULL
'
' MessageText:
'
'  Project summary information (files pulled).
'
Const CRS_EVENT_SUMMARY_PULL           = &H400038A7

'
' MessageId: CRS_EVENT_SUMMARY_AUTOMATIC_RECEIVE
'
' MessageText:
'
'  Automatic project (receive) checkpoint summary information.
'
Const CRS_EVENT_SUMMARY_AUTOMATIC_RECEIVE = &H400038A8

'
' MessageId: CRS_EVENT_SUMMARY_AUTOMATIC_SEND
'
' MessageText:
'
'  Automatic project (send) checkpoint summary information.
'
Const CRS_EVENT_SUMMARY_AUTOMATIC_SEND = &H400038A9

'
' MessageId: CRS_EVENT_SUMMARY_RECEIVE_MATCHED
'
' MessageText:
'
'  Project summary information (files matched during receive).
'
Const CRS_EVENT_SUMMARY_RECEIVE_MATCHED = &H400038AA

'
' MessageId: CRS_EVENT_SUMMARY_SEND_MATCHED
'
' MessageText:
'
'  Project summary information (files matched during send).
'
Const CRS_EVENT_SUMMARY_SEND_MATCHED   = &H400038AB

'
' MessageId: CRS_EVENT_SUMMARY_PULL_MATCHED
'
' MessageText:
'
'  Project summary information (files matched during pull).
'
Const CRS_EVENT_SUMMARY_PULL_MATCHED   = &H400038AC

'
' MessageId: CRS_EVENT_SUMMARY_RECEIVE_ERRORED
'
' MessageText:
'
'  Project summary information (files errored during receive).
'
Const CRS_EVENT_SUMMARY_RECEIVE_ERRORED = &H400038AD

'
' MessageId: CRS_EVENT_SUMMARY_SEND_ERRORED
'
' MessageText:
'
'  Project summary information (files errored during send).
'
Const CRS_EVENT_SUMMARY_SEND_ERRORED   = &H400038AE

'
' MessageId: CRS_EVENT_SUMMARY_PULL_ERRORED
'
' MessageText:
'
'  Project summary information (files errored during pull).
'
Const CRS_EVENT_SUMMARY_PULL_ERRORED   = &H400038AF

'
' MessageId: CRS_EVENT_SUMMARY_LAST
'
' MessageText:
'
'  Site Server Content Deployment last summary event message.
'
Const CRS_EVENT_SUMMARY_LAST           = &H400038D6

'
' MessageId: CRS_EVENT_CAB_ERROR_FIRST
'
' MessageText:
'
'  Remote installer first error message.
'
Const CRS_EVENT_CAB_ERROR_FIRST        = &HC0003908

'
' MessageId: CRS_EVENT_CAB_ERROR_CABINET_NOT_FOUND
'
' MessageText:
'
'  Cannot find the specified cabinet file.
'
Const CRS_EVENT_CAB_ERROR_CABINET_NOT_FOUND = &HC0003909

'
' MessageId: CRS_EVENT_CAB_ERROR_NOT_A_CABINET
'
' MessageText:
'
'  Specified file is not a valid cabinet file.
'
Const CRS_EVENT_CAB_ERROR_NOT_A_CABINET = &HC000390A

'
' MessageId: CRS_EVENT_CAB_ERROR_UNKNOWN_CABINET_VERSION
'
' MessageText:
'
'  Specified file is an unknown version of a cabinet file.
'
Const CRS_EVENT_CAB_ERROR_UNKNOWN_CABINET_VERSION = &HC000390B

'
' MessageId: CRS_EVENT_CAB_ERROR_CORRUPT_CABINET
'
' MessageText:
'
'  Specified cabinet file is corrupt.
'
Const CRS_EVENT_CAB_ERROR_CORRUPT_CABINET = &HC000390C

'
' MessageId: CRS_EVENT_CAB_ERROR_ALLOC_FAIL
'
' MessageText:
'
'  Out of memory.
'
Const CRS_EVENT_CAB_ERROR_ALLOC_FAIL   = &HC000390D

'
' MessageId: CRS_EVENT_CAB_ERROR_BAD_COMPR_TYPE
'
' MessageText:
'
'  Specified cabinet file uses an unknown compression type.
'
Const CRS_EVENT_CAB_ERROR_BAD_COMPR_TYPE = &HC000390E

'
' MessageId: CRS_EVENT_CAB_ERROR_MDI_FAIL
'
' MessageText:
'
'  Compressed data in the specified cabinet file is corrupt.
'
Const CRS_EVENT_CAB_ERROR_MDI_FAIL     = &HC000390F

'
' MessageId: CRS_EVENT_CAB_ERROR_TARGET_FILE
'
' MessageText:
'
'  Could not save extracted files from the specified cabinet file.
'
Const CRS_EVENT_CAB_ERROR_TARGET_FILE  = &HC0003910

'
' MessageId: CRS_EVENT_CAB_ERROR_RESERVE_MISMATCH
'
' MessageText:
'
'  Specified cabinet file has a non-valid RESERVE size.
'
Const CRS_EVENT_CAB_ERROR_RESERVE_MISMATCH = &HC0003911

'
' MessageId: CRS_EVENT_CAB_ERROR_WRONG_CABINET
'
' MessageText:
'
'  Specified cabinet file is not the right cabinet in the set.
'
Const CRS_EVENT_CAB_ERROR_WRONG_CABINET = &HC0003912

'
' MessageId: CRS_EVENT_CAB_ERROR_USER_ABORT
'
' MessageText:
'
'  Could not extract the specified cabinet file. User aborted the operation.
'
Const CRS_EVENT_CAB_ERROR_USER_ABORT   = &HC0003913

'
' MessageId: CRS_EVENT_CAB_WARNING_CAB_NOT_SIGNED
'
' MessageText:
'
'  Specified cabinet file is not a signed cabinet file.
'
Const CRS_EVENT_CAB_WARNING_CAB_NOT_SIGNED = &H80003914

'
' MessageId: CRS_EVENT_CAB_WARNING_SIGNATURE_NOT_VERIFIED
'
' MessageText:
'
'  Signature on the specified cabinet could not be verified.
'
Const CRS_EVENT_CAB_WARNING_SIGNATURE_NOT_VERIFIED = &H80003915

'
' MessageId: CRS_EVENT_CAB_ERROR_INFFILE_NOT_FOUND
'
' MessageText:
'
'  INF file was not found inside the specified cabinet file.
'
Const CRS_EVENT_CAB_ERROR_INFFILE_NOT_FOUND = &HC0003916

'
' MessageId: CRS_EVENT_INF_ERROR_ADVPACK_NOT_LOADED
'
' MessageText:
'
'  Could not load ADVPACK.DLL.
'
Const CRS_EVENT_INF_ERROR_ADVPACK_NOT_LOADED = &HC0003917

'
' MessageId: CRS_EVENT_INF_ERROR_ADVPACK_WRONG_VERSION
'
' MessageText:
'
'  This version of ADVPACK.DLL is not supported.
'
Const CRS_EVENT_INF_ERROR_ADVPACK_WRONG_VERSION = &HC0003918

'
' MessageId: CRS_EVENT_INF_ERROR_INVALID_INF
'
' MessageText:
'
'  INF file found inside the specified cabinet file is not a valid INF file.
'
Const CRS_EVENT_INF_ERROR_INVALID_INF  = &HC0003919

'
' MessageId: CRS_EVENT_INF_ERROR_NOTHING_TO_INSTALL
'
' MessageText:
'
'  Could not find any of the remote install sections inside the INF file.
'
Const CRS_EVENT_INF_ERROR_NOTHING_TO_INSTALL = &HC000391A

'
' MessageId: CRS_EVENT_INF_ERROR_NOTHING_TO_UNINSTALL
'
' MessageText:
'
'  Could not find any of the remote uninstall sections inside the INF file.
'
Const CRS_EVENT_INF_ERROR_NOTHING_TO_UNINSTALL = &HC000391B

'
' MessageId: CRS_EVENT_INF_ERROR_BUSY_FILES
'
' MessageText:
'
'  Files are busy.  Cannot install them unless allowed to reboot.
'
Const CRS_EVENT_INF_ERROR_BUSY_FILES   = &HC000391C

'
' MessageId: CRS_EVENT_CAB_WARNING_MANUAL_REBOOT
'
' MessageText:
'
'  Setup completed successfully. The server could not be rebooted automatically. Manual reboot is necessary.
'
Const CRS_EVENT_CAB_WARNING_MANUAL_REBOOT = &H8000391D

'
' MessageId: CRS_EVENT_CAB_WARNING_REBOOT_NEEDED
'
' MessageText:
'
'  Setup completed successfully. The files became busy during setup.  Manual reboot is necessary.
'
Const CRS_EVENT_CAB_WARNING_REBOOT_NEEDED = &H8000391E

'
' MessageId: CRS_EVENT_INF_SUCCESS_REBOOT_IN_PROGRESS
'
' MessageText:
'
'  Setup completed successfully. The server is being rebooted.
'
Const CRS_EVENT_INF_SUCCESS_REBOOT_IN_PROGRESS = &H0000391F

'
' MessageId: CRS_EVENT_INF_SUCCESS
'
' MessageText:
'
'  Setup completed successfully.
'
Const CRS_EVENT_INF_SUCCESS            = &H00003921

'
' MessageId: CRS_EVENT_INF_ERROR_BUSY_FILES_UNINSTALL
'
' MessageText:
'
'  Files are busy.  Cannot uninstall them unless allowed to reboot.
'
Const CRS_EVENT_INF_ERROR_BUSY_FILES_UNINSTALL = &HC0003922

'
' MessageId: CRS_EVENT_CAB_WARNING_MANUAL_REBOOT_UNINSTALL
'
' MessageText:
'
'  Uninstall completed successfully. The server could not be rebooted automatically. Manual reboot is necessary.
'
Const CRS_EVENT_CAB_WARNING_MANUAL_REBOOT_UNINSTALL = &H80003923

'
' MessageId: CRS_EVENT_CAB_WARNING_REBOOT_NEEDED_UNINSTALL
'
' MessageText:
'
'  Uninstall completed successfully. The files became busy during setup.  Manual reboot is necessary.
'
Const CRS_EVENT_CAB_WARNING_REBOOT_NEEDED_UNINSTALL = &H80003924

'
' MessageId: CRS_EVENT_INF_SUCCESS_REBOOT_IN_PROGRESS_UNINSTALL
'
' MessageText:
'
'  Uninstall completed successfully. The server is being rebooted.
'
Const CRS_EVENT_INF_SUCCESS_REBOOT_IN_PROGRESS_UNINSTALL = &H00003925

'
' MessageId: CRS_EVENT_INF_SUCCESS_UNINSTALL
'
' MessageText:
'
'  Uninstall completed successfully.
'
Const CRS_EVENT_INF_SUCCESS_UNINSTALL  = &H00003926

'
' MessageId: CRS_EVENT_CAB_ERROR_ADVPACK_FAILED
'
' MessageText:
'
'  Problem installing the CAB. Check CAB and INF files for validity. 
'
Const CRS_EVENT_CAB_ERROR_ADVPACK_FAILED = &HC0003927

'
' MessageId: CRS_EVENT_CAB_ERROR_LOCKED_FILES
'
' MessageText:
'
'  At least one of the files inside the CAB is open for exclusive write/delete access.
'
Const CRS_EVENT_CAB_ERROR_LOCKED_FILES = &HC0003928

'
' MessageId: CRS_EVENT_CAB_ERROR_UNKNOWN
'
' MessageText:
'
'  Unknown error occurred while processing the specified cabinet file.
'
Const CRS_EVENT_CAB_ERROR_UNKNOWN      = &HC0003A06

'
' MessageId: CRS_EVENT_CAB_ERROR_LAST
'
' MessageText:
'
'  Remote installer last event message.
'
Const CRS_EVENT_CAB_ERROR_LAST         = &H40003A07

'
' MessageId: CRS_EVENT_LAST
'
' MessageText:
'
'  Site Server Content Deployment last event message.
'
Const CRS_EVENT_LAST                   = &H40003A97
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\crtdbg.h ===
/***
*crtdbg.h - Supports debugging features of the C runtime library.
*
*       Copyright (c) 1994-2000, Microsoft Corporation. All rights reserved.
*
*Purpose:
*       Support CRT debugging features.
*
*       [Public]
*
****/

#if     _MSC_VER > 1000
#pragma once
#endif

#ifndef _INC_CRTDBG
#define _INC_CRTDBG

#if     !defined(_WIN32)
#error ERROR: Only Win32 target supported!
#endif


#ifdef  __cplusplus
extern "C" {
#endif  /* __cplusplus */


 /****************************************************************************
 *
 * Constants and types
 *
 ***************************************************************************/

#if !defined(_W64)
#if !defined(__midl) && (defined(_X86_) || defined(_M_IX86)) && _MSC_VER >= 1300
#define _W64 __w64
#else
#define _W64
#endif
#endif

#ifndef _SIZE_T_DEFINED
#ifdef  _WIN64
typedef unsigned __int64    size_t;
#else
typedef _W64 unsigned int   size_t;
#endif
#define _SIZE_T_DEFINED
#endif

/* Define NULL pointer value */

#ifndef NULL
#ifdef  __cplusplus
#define NULL    0
#else
#define NULL    ((void *)0)
#endif
#endif

 /****************************************************************************
 *
 * Debug Reporting
 *
 ***************************************************************************/

typedef void *_HFILE; /* file handle pointer */

#define _CRT_WARN           0
#define _CRT_ERROR          1
#define _CRT_ASSERT         2
#define _CRT_ERRCNT         3

#define _CRTDBG_MODE_FILE      0x1
#define _CRTDBG_MODE_DEBUG     0x2
#define _CRTDBG_MODE_WNDW      0x4
#define _CRTDBG_REPORT_MODE    -1

#define _CRTDBG_INVALID_HFILE ((_HFILE)-1)
#define _CRTDBG_HFILE_ERROR   ((_HFILE)-2)
#define _CRTDBG_FILE_STDOUT   ((_HFILE)-4)
#define _CRTDBG_FILE_STDERR   ((_HFILE)-5)
#define _CRTDBG_REPORT_FILE   ((_HFILE)-6)

typedef int (__cdecl * _CRT_REPORT_HOOK)(int, char *, int *);

 /****************************************************************************
 *
 * Heap
 *
 ***************************************************************************/

 /****************************************************************************
 *
 * Client-defined allocation hook
 *
 ***************************************************************************/

#define _HOOK_ALLOC     1
#define _HOOK_REALLOC   2
#define _HOOK_FREE      3

typedef int (__cdecl * _CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int);

 /****************************************************************************
 *
 * Memory management
 *
 ***************************************************************************/

/*
 * Bit values for _crtDbgFlag flag:
 *
 * These bitflags control debug heap behavior.
 */

#define _CRTDBG_ALLOC_MEM_DF        0x01  /* Turn on debug allocation */
#define _CRTDBG_DELAY_FREE_MEM_DF   0x02  /* Don't actually free memory */
#define _CRTDBG_CHECK_ALWAYS_DF     0x04  /* Check heap every alloc/dealloc */
#define _CRTDBG_RESERVED_DF         0x08  /* Reserved - do not use */
#define _CRTDBG_CHECK_CRT_DF        0x10  /* Leak check/diff CRT blocks */
#define _CRTDBG_LEAK_CHECK_DF       0x20  /* Leak check at program exit */

/*
 * Some bit values for _crtDbgFlag which correspond to frequencies for checking
 * the the heap.
 */
#define _CRTDBG_CHECK_EVERY_16_DF   0x00100000  /* check heap every 16 heap ops */
#define _CRTDBG_CHECK_EVERY_128_DF  0x00800000  /* check heap every 128 heap ops */
#define _CRTDBG_CHECK_EVERY_1024_DF 0x04000000  /* check heap every 1024 heap ops */
#define _CRTDBG_CHECK_DEFAULT_DF    _CRTDBG_CHECK_EVERY_1024_DF

#define _CRTDBG_REPORT_FLAG         -1    /* Query bitflag status */

#define _BLOCK_TYPE(block)          (block & 0xFFFF)
#define _BLOCK_SUBTYPE(block)       (block >> 16 & 0xFFFF)


 /****************************************************************************
 *
 * Memory state
 *
 ***************************************************************************/

/* Memory block identification */
#define _FREE_BLOCK      0
#define _NORMAL_BLOCK    1
#define _CRT_BLOCK       2
#define _IGNORE_BLOCK    3
#define _CLIENT_BLOCK    4
#define _MAX_BLOCKS      5

typedef void (__cdecl * _CRT_DUMP_CLIENT)(void *, size_t);

struct _CrtMemBlockHeader;
typedef struct _CrtMemState
{
        struct _CrtMemBlockHeader * pBlockHeader;
        size_t lCounts[_MAX_BLOCKS];
        size_t lSizes[_MAX_BLOCKS];
        size_t lHighWaterCount;
        size_t lTotalCount;
} _CrtMemState;


 /****************************************************************************
 *
 * Declarations, prototype and function-like macros
 *
 ***************************************************************************/


#ifndef _DEBUG

 /****************************************************************************
 *
 * Debug OFF
 * Debug OFF
 * Debug OFF
 *
 ***************************************************************************/

#define _ASSERT(expr) ((void)0)

#define _ASSERTE(expr) ((void)0)


#define _RPT0(rptno, msg)

#define _RPT1(rptno, msg, arg1)

#define _RPT2(rptno, msg, arg1, arg2)

#define _RPT3(rptno, msg, arg1, arg2, arg3)

#define _RPT4(rptno, msg, arg1, arg2, arg3, arg4)


#define _RPTF0(rptno, msg)

#define _RPTF1(rptno, msg, arg1)

#define _RPTF2(rptno, msg, arg1, arg2)

#define _RPTF3(rptno, msg, arg1, arg2, arg3)

#define _RPTF4(rptno, msg, arg1, arg2, arg3, arg4)

#define _malloc_dbg(s, t, f, l)         malloc(s)
#define _calloc_dbg(c, s, t, f, l)      calloc(c, s)
#define _realloc_dbg(p, s, t, f, l)     realloc(p, s)
#define _expand_dbg(p, s, t, f, l)      _expand(p, s)
#define _free_dbg(p, t)                 free(p)
#define _msize_dbg(p, t)                _msize(p)

#define _aligned_malloc_dbg(s, a, f, l)         _aligned_malloc(s, a)
#define _aligned_realloc_dbg(p, s, a, f, l)     _aligned_realloc(p, s, a)
#define _aligned_free_dbg(p)                 _aligned_free(p)
#define _aligned_offset_malloc_dbg(s, a, o, f, l)       _aligned_offset_malloc(s, a, o)
#define _aligned_offset_realloc_dbg(p, s, a, o, f, l)   _aligned_offset_realloc(p, s, a, o)

#define _CrtSetReportHook(f)                ((void)0)
#define _CrtSetReportMode(t, f)             ((int)0)
#define _CrtSetReportFile(t, f)             ((void)0)

#define _CrtDbgBreak()                      ((void)0)

#define _CrtSetBreakAlloc(a)                ((long)0)

#define _CrtSetAllocHook(f)                 ((void)0)

#define _CrtCheckMemory()                   ((int)1)
#define _CrtSetDbgFlag(f)                   ((int)0)
#define _CrtDoForAllClientObjects(f, c)     ((void)0)
#define _CrtIsValidPointer(p, n, r)         ((int)1)
#define _CrtIsValidHeapPointer(p)           ((int)1)
#define _CrtIsMemoryBlock(p, t, r, f, l)    ((int)1)
#define _CrtReportBlockType(p)              ((int)-1)

#define _CrtSetDumpClient(f)                ((void)0)

#define _CrtMemCheckpoint(s)                ((void)0)
#define _CrtMemDifference(s1, s2, s3)       ((int)0)
#define _CrtMemDumpAllObjectsSince(s)       ((void)0)
#define _CrtMemDumpStatistics(s)            ((void)0)
#define _CrtDumpMemoryLeaks()               ((int)0)


#else   /* _DEBUG */


 /****************************************************************************
 *
 * Debug ON
 * Debug ON
 * Debug ON
 *
 ***************************************************************************/


/* Define _CRTIMP */

#ifndef _CRTIMP
#ifdef  _DLL
#define _CRTIMP __declspec(dllimport)
#else   /* ndef _DLL */
#define _CRTIMP
#endif  /* _DLL */
#endif  /* _CRTIMP */

 /****************************************************************************
 *
 * Debug Reporting
 *
 ***************************************************************************/

_CRTIMP extern long _crtAssertBusy;

_CRTIMP _CRT_REPORT_HOOK __cdecl _CrtSetReportHook(
        _CRT_REPORT_HOOK
        );

_CRTIMP int __cdecl _CrtSetReportMode(
        int,
        int
        );

_CRTIMP _HFILE __cdecl _CrtSetReportFile(
        int,
        _HFILE
        );

_CRTIMP int __cdecl _CrtDbgReport(
        int,
        const char *,
        int,
        const char *,
        const char *,
        ...);

/* Asserts */

#if     _MSC_VER >= 1300 || !defined(_M_IX86) || defined(_CRT_PORTABLE)
#define _ASSERT_BASE(expr, msg) \
        (void) ((expr) || \
                (1 != _CrtDbgReport(_CRT_ASSERT, __FILE__, __LINE__, NULL, msg)) || \
                (_CrtDbgBreak(), 0))
#else
#define _ASSERT_BASE(expr, msg) \
        do { if (!(expr) && \
                (1 == _CrtDbgReport(_CRT_ASSERT, __FILE__, __LINE__, NULL, msg))) \
             _CrtDbgBreak(); } while (0)
#endif

#define _ASSERT(expr)   _ASSERT_BASE((expr), NULL)

#define _ASSERTE(expr)  _ASSERT_BASE((expr), #expr)

/* Reports with no file/line info */

#if     _MSC_VER >= 1300 || !defined(_M_IX86) || defined(_CRT_PORTABLE)
#define _RPT_BASE(args) \
        (void) ((1 != _CrtDbgReport args) || \
                (_CrtDbgBreak(), 0))
#else
#define _RPT_BASE(args) \
        do { if ((1 == _CrtDbgReport args)) \
                _CrtDbgBreak(); } while (0)
#endif

#define _RPT0(rptno, msg) \
        _RPT_BASE((rptno, NULL, 0, NULL, "%s", msg))

#define _RPT1(rptno, msg, arg1) \
        _RPT_BASE((rptno, NULL, 0, NULL, msg, arg1))

#define _RPT2(rptno, msg, arg1, arg2) \
        _RPT_BASE((rptno, NULL, 0, NULL, msg, arg1, arg2))

#define _RPT3(rptno, msg, arg1, arg2, arg3) \
        _RPT_BASE((rptno, NULL, 0, NULL, msg, arg1, arg2, arg3))

#define _RPT4(rptno, msg, arg1, arg2, arg3, arg4) \
        _RPT_BASE((rptno, NULL, 0, NULL, msg, arg1, arg2, arg3, arg4))


/* Reports with file/line info */

#define _RPTF0(rptno, msg) \
        _RPT_BASE((rptno, __FILE__, __LINE__, NULL, "%s", msg))

#define _RPTF1(rptno, msg, arg1) \
        _RPT_BASE((rptno, __FILE__, __LINE__, NULL, msg, arg1))

#define _RPTF2(rptno, msg, arg1, arg2) \
        _RPT_BASE((rptno, __FILE__, __LINE__, NULL, msg, arg1, arg2))

#define _RPTF3(rptno, msg, arg1, arg2, arg3) \
        _RPT_BASE((rptno, __FILE__, __LINE__, NULL, msg, arg1, arg2, arg3))

#define _RPTF4(rptno, msg, arg1, arg2, arg3, arg4) \
        _RPT_BASE((rptno, __FILE__, __LINE__, NULL, msg, arg1, arg2, arg3, arg4))

#if     _MSC_VER >= 1300 && !defined(_CRT_PORTABLE)
#define _CrtDbgBreak() __debugbreak()
#elif   defined(_M_IX86) && !defined(_CRT_PORTABLE)
#define _CrtDbgBreak() __asm { int 3 }
#elif   defined(_M_ALPHA) && !defined(_CRT_PORTABLE)
void _BPT();
#pragma intrinsic(_BPT)
#define _CrtDbgBreak() _BPT()
#elif   defined(_M_IA64) && !defined(_CRT_PORTABLE)
void __break(int);
#pragma intrinsic (__break)
#define _CrtDbgBreak() __break(0x80016)
#else
_CRTIMP void __cdecl _CrtDbgBreak(
        void
        );
#endif

 /****************************************************************************
 *
 * Heap routines
 *
 ***************************************************************************/

#ifdef  _CRTDBG_MAP_ALLOC

#define   malloc(s)         _malloc_dbg(s, _NORMAL_BLOCK, __FILE__, __LINE__)
#define   calloc(c, s)      _calloc_dbg(c, s, _NORMAL_BLOCK, __FILE__, __LINE__)
#define   realloc(p, s)     _realloc_dbg(p, s, _NORMAL_BLOCK, __FILE__, __LINE__)
#define   _expand(p, s)     _expand_dbg(p, s, _NORMAL_BLOCK, __FILE__, __LINE__)
#define   free(p)           _free_dbg(p, _NORMAL_BLOCK)
#define   _msize(p)         _msize_dbg(p, _NORMAL_BLOCK)
#define   _aligned_malloc(s, a)                 _aligned_malloc_dbg(s, a, __FILE__, __LINE__)
#define   _aligned_realloc(p, s, a)             _aligned_realloc_dbg(p, s, a, __FILE__, __LINE__)
#define   _aligned_offset_malloc(s, a, o)       _aligned_offset_malloc_dbg(s, a, o, __FILE__, __LINE__)
#define   _aligned_offset_realloc(p, s, a, o)   _aligned_offset_realloc_dbg(p, s, a, o, __FILE__, __LINE__)
#define   _aligned_free(p)  _aligned_free_dbg(p)

#endif  /* _CRTDBG_MAP_ALLOC */

_CRTIMP extern long _crtBreakAlloc;      /* Break on this allocation */

_CRTIMP long __cdecl _CrtSetBreakAlloc(
        long
        );

/*
 * Prototypes for malloc, free, realloc, etc are in malloc.h
 */

_CRTIMP void * __cdecl _malloc_dbg(
        size_t,
        int,
        const char *,
        int
        );

_CRTIMP void * __cdecl _calloc_dbg(
        size_t,
        size_t,
        int,
        const char *,
        int
        );

_CRTIMP void * __cdecl _realloc_dbg(
        void *,
        size_t,
        int,
        const char *,
        int
        );

_CRTIMP void * __cdecl _expand_dbg(
        void *,
        size_t,
        int,
        const char *,
        int
        );

_CRTIMP void __cdecl _free_dbg(
        void *,
        int
        );

_CRTIMP size_t __cdecl _msize_dbg (
        void *,
        int
        );

_CRTIMP void * __cdecl _aligned_malloc_dbg(
        size_t,
        size_t,
        const char *,
        int
        );

_CRTIMP void * __cdecl _aligned_realloc_dbg(
        void *,
        size_t,
        size_t,
        const char *,
        int
        );

_CRTIMP void * __cdecl _aligned_offset_malloc_dbg(
        size_t,
        size_t,
        size_t,
        const char *,
        int
        );

_CRTIMP void * __cdecl _aligned_offset_realloc_dbg(
        void *,
        size_t,
        size_t,
        size_t,
        const char *,
        int
        );

_CRTIMP void __cdecl _aligned_free_dbg(
        void *
        );


 /****************************************************************************
 *
 * Client-defined allocation hook
 *
 ***************************************************************************/

_CRTIMP _CRT_ALLOC_HOOK __cdecl _CrtSetAllocHook(
        _CRT_ALLOC_HOOK
        );


 /****************************************************************************
 *
 * Memory management
 *
 ***************************************************************************/

/*
 * Bitfield flag that controls CRT heap behavior
 * Default setting is _CRTDBG_ALLOC_MEM_DF
 */

_CRTIMP extern int _crtDbgFlag;

_CRTIMP int __cdecl _CrtCheckMemory(
        void
        );

_CRTIMP int __cdecl _CrtSetDbgFlag(
        int
        );

_CRTIMP void __cdecl _CrtDoForAllClientObjects(
        void (*pfn)(void *, void *),
        void *
        );

_CRTIMP int __cdecl _CrtIsValidPointer(
        const void *,
        unsigned int,
        int
        );

_CRTIMP int __cdecl _CrtIsValidHeapPointer(
        const void *
        );

_CRTIMP int __cdecl _CrtIsMemoryBlock(
        const void *,
        unsigned int,
        long *,
        char **,
        int *
        );

_CRTIMP int __cdecl _CrtReportBlockType(
        const void *
        );


 /****************************************************************************
 *
 * Memory state
 *
 ***************************************************************************/

_CRTIMP _CRT_DUMP_CLIENT __cdecl _CrtSetDumpClient(
        _CRT_DUMP_CLIENT
        );

_CRTIMP void __cdecl _CrtMemCheckpoint(
        _CrtMemState *
        );

_CRTIMP int __cdecl _CrtMemDifference(
        _CrtMemState *,
        const _CrtMemState *,
        const _CrtMemState *
        );

_CRTIMP void __cdecl _CrtMemDumpAllObjectsSince(
        const _CrtMemState *
        );

_CRTIMP void __cdecl _CrtMemDumpStatistics(
        const _CrtMemState *
        );

_CRTIMP int __cdecl _CrtDumpMemoryLeaks(
        void
        );

#endif  /* _DEBUG */

#ifdef  __cplusplus
}

#ifndef _MFC_OVERRIDES_NEW

extern "C++" {

#pragma warning(disable: 4507)  /* Ignore faulty warning */

#ifndef _DEBUG

 /****************************************************************************
 *
 * Debug OFF
 * Debug OFF
 * Debug OFF
 *
 ***************************************************************************/

 
void * __cdecl operator new[](size_t);

inline void * __cdecl operator new(size_t s, int, const char *, int)
        { return ::operator new(s); }

inline void* __cdecl operator new[](size_t s, int, const char *, int)
        { return ::operator new[](s); }

#if     _MSC_VER >= 1200


void __cdecl operator delete[](void *);

inline void __cdecl operator delete(void * _P, int, const char *, int)
        { ::operator delete(_P); }
inline void __cdecl operator delete[](void * _P, int, const char *, int)
        { ::operator delete[](_P); }
#endif
#else /* _DEBUG */

 /****************************************************************************
 *
 * Debug ON
 * Debug ON
 * Debug ON
 *
 ***************************************************************************/
 
void * __cdecl operator new[](size_t);

void * __cdecl operator new(
        size_t,
        int,
        const char *,
        int
        );

void * __cdecl operator new[](
        size_t,
        int,
        const char *,
        int
        );

#if     _MSC_VER >= 1200
void __cdecl operator delete[](void *);

inline void __cdecl operator delete(void * _P, int, const char *, int)
        { ::operator delete(_P); }

inline void __cdecl operator delete[](void * _P, int, const char *, int)
        { ::operator delete[](_P); }
#endif

#ifdef _CRTDBG_MAP_ALLOC

inline void * __cdecl operator new(size_t s)
        { return ::operator new(s, _NORMAL_BLOCK, __FILE__, __LINE__); }

inline void* __cdecl operator new[](size_t s)
        { return ::operator new[](s, _NORMAL_BLOCK, __FILE__, __LINE__); }

#endif  /* _CRTDBG_MAP_ALLOC */

#endif  /* _DEBUG */

}

#endif  /* _MFC_OVERRIDES_NEW */

#endif  /* __cplusplus */

#endif  /* _INC_CRTDBG */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\cxq_cust.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


/* File created by MIDL compiler version 3.03.0110 */
/* at Tue Sep 09 20:17:54 1997
 */
/* Compiler settings for cxq_cust.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32, ms_ext, c_ext
    error checks: none
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __cxq_cust_h__
#define __cxq_cust_h__

#ifdef __cplusplus
extern "C"{
#endif 

/* Forward Declarations */ 

#ifndef __IH26XVideoEffects_FWD_DEFINED__
#define __IH26XVideoEffects_FWD_DEFINED__
typedef interface IH26XVideoEffects IH26XVideoEffects;
#endif 	/* __IH26XVideoEffects_FWD_DEFINED__ */


#ifndef __IH26XEncodeOptions_FWD_DEFINED__
#define __IH26XEncodeOptions_FWD_DEFINED__
typedef interface IH26XEncodeOptions IH26XEncodeOptions;
#endif 	/* __IH26XEncodeOptions_FWD_DEFINED__ */


#ifndef __IH26XSnapshot_FWD_DEFINED__
#define __IH26XSnapshot_FWD_DEFINED__
typedef interface IH26XSnapshot IH26XSnapshot;
#endif 	/* __IH26XSnapshot_FWD_DEFINED__ */


#ifndef __IH26XEncoderControl_FWD_DEFINED__
#define __IH26XEncoderControl_FWD_DEFINED__
typedef interface IH26XEncoderControl IH26XEncoderControl;
#endif 	/* __IH26XEncoderControl_FWD_DEFINED__ */


#ifndef __IH26XRTPControl_FWD_DEFINED__
#define __IH26XRTPControl_FWD_DEFINED__
typedef interface IH26XRTPControl IH26XRTPControl;
#endif 	/* __IH26XRTPControl_FWD_DEFINED__ */


/* header files for imported files */
#include "unknwn.h"

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

#ifndef __IH26XVideoEffects_INTERFACE_DEFINED__
#define __IH26XVideoEffects_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IH26XVideoEffects
 * at Tue Sep 09 20:17:54 1997
 * using MIDL 3.03.0110
 ****************************************/
/* [object][uuid] */ 


// STRUCTURES
typedef /* [public][public][public][public][public][public] */ 
enum __MIDL_IH26XVideoEffects_0001
    {	H26X_VE_UNDEFINED	= 0,
	H26X_VE_BRIGHTNESS	= H26X_VE_UNDEFINED + 1,
	H26X_VE_CONTRAST	= H26X_VE_BRIGHTNESS + 1,
	H26X_VE_SATURATION	= H26X_VE_CONTRAST + 1,
	H26X_VE_TINT	= H26X_VE_SATURATION + 1,
	H26X_VE_MIRROR	= H26X_VE_TINT + 1,
	H26X_VE_ASPECT_CORRECT	= H26X_VE_MIRROR + 1
    }	H26X_VIDEO_EFFECT;

typedef /* [public] */ struct  __MIDL_IH26XVideoEffects_0002
    {
    int iBrightness;
    int iSaturation;
    int iContrast;
    int iMirror;
    int iAspectCorrect;
    }	VIDEO_EFFECT_VALUES;

typedef struct __MIDL_IH26XVideoEffects_0002 __RPC_FAR *PTR_VIDEO_EFFECT_VALUES;

// METHODS

EXTERN_C const IID IID_IH26XVideoEffects;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("21555140-9C2B-11cf-90FA-00AA00A729EA")
    IH26XVideoEffects : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE getFactoryDefault( 
            /* [in] */ H26X_VIDEO_EFFECT veVideoEffect,
            /* [out] */ int __RPC_FAR *pinDefault) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getFactoryLimits( 
            /* [in] */ H26X_VIDEO_EFFECT veVideoEffect,
            /* [out] */ int __RPC_FAR *pinLower,
            /* [out] */ int __RPC_FAR *pinUpper) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getCurrent( 
            /* [in] */ H26X_VIDEO_EFFECT veVideoEffect,
            /* [out] */ int __RPC_FAR *pinValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE setCurrent( 
            /* [in] */ H26X_VIDEO_EFFECT veVideoEffect,
            /* [in] */ int inValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE resetCurrent( 
            /* [in] */ H26X_VIDEO_EFFECT veVideoEffect) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IH26XVideoEffectsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IH26XVideoEffects __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IH26XVideoEffects __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IH26XVideoEffects __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *getFactoryDefault )( 
            IH26XVideoEffects __RPC_FAR * This,
            /* [in] */ H26X_VIDEO_EFFECT veVideoEffect,
            /* [out] */ int __RPC_FAR *pinDefault);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *getFactoryLimits )( 
            IH26XVideoEffects __RPC_FAR * This,
            /* [in] */ H26X_VIDEO_EFFECT veVideoEffect,
            /* [out] */ int __RPC_FAR *pinLower,
            /* [out] */ int __RPC_FAR *pinUpper);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *getCurrent )( 
            IH26XVideoEffects __RPC_FAR * This,
            /* [in] */ H26X_VIDEO_EFFECT veVideoEffect,
            /* [out] */ int __RPC_FAR *pinValue);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *setCurrent )( 
            IH26XVideoEffects __RPC_FAR * This,
            /* [in] */ H26X_VIDEO_EFFECT veVideoEffect,
            /* [in] */ int inValue);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *resetCurrent )( 
            IH26XVideoEffects __RPC_FAR * This,
            /* [in] */ H26X_VIDEO_EFFECT veVideoEffect);
        
        END_INTERFACE
    } IH26XVideoEffectsVtbl;

    interface IH26XVideoEffects
    {
        CONST_VTBL struct IH26XVideoEffectsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IH26XVideoEffects_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IH26XVideoEffects_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IH26XVideoEffects_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IH26XVideoEffects_getFactoryDefault(This,veVideoEffect,pinDefault)	\
    (This)->lpVtbl -> getFactoryDefault(This,veVideoEffect,pinDefault)

#define IH26XVideoEffects_getFactoryLimits(This,veVideoEffect,pinLower,pinUpper)	\
    (This)->lpVtbl -> getFactoryLimits(This,veVideoEffect,pinLower,pinUpper)

#define IH26XVideoEffects_getCurrent(This,veVideoEffect,pinValue)	\
    (This)->lpVtbl -> getCurrent(This,veVideoEffect,pinValue)

#define IH26XVideoEffects_setCurrent(This,veVideoEffect,inValue)	\
    (This)->lpVtbl -> setCurrent(This,veVideoEffect,inValue)

#define IH26XVideoEffects_resetCurrent(This,veVideoEffect)	\
    (This)->lpVtbl -> resetCurrent(This,veVideoEffect)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IH26XVideoEffects_getFactoryDefault_Proxy( 
    IH26XVideoEffects __RPC_FAR * This,
    /* [in] */ H26X_VIDEO_EFFECT veVideoEffect,
    /* [out] */ int __RPC_FAR *pinDefault);


void __RPC_STUB IH26XVideoEffects_getFactoryDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IH26XVideoEffects_getFactoryLimits_Proxy( 
    IH26XVideoEffects __RPC_FAR * This,
    /* [in] */ H26X_VIDEO_EFFECT veVideoEffect,
    /* [out] */ int __RPC_FAR *pinLower,
    /* [out] */ int __RPC_FAR *pinUpper);


void __RPC_STUB IH26XVideoEffects_getFactoryLimits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IH26XVideoEffects_getCurrent_Proxy( 
    IH26XVideoEffects __RPC_FAR * This,
    /* [in] */ H26X_VIDEO_EFFECT veVideoEffect,
    /* [out] */ int __RPC_FAR *pinValue);


void __RPC_STUB IH26XVideoEffects_getCurrent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IH26XVideoEffects_setCurrent_Proxy( 
    IH26XVideoEffects __RPC_FAR * This,
    /* [in] */ H26X_VIDEO_EFFECT veVideoEffect,
    /* [in] */ int inValue);


void __RPC_STUB IH26XVideoEffects_setCurrent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IH26XVideoEffects_resetCurrent_Proxy( 
    IH26XVideoEffects __RPC_FAR * This,
    /* [in] */ H26X_VIDEO_EFFECT veVideoEffect);


void __RPC_STUB IH26XVideoEffects_resetCurrent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IH26XVideoEffects_INTERFACE_DEFINED__ */


#ifndef __IH26XEncodeOptions_INTERFACE_DEFINED__
#define __IH26XEncodeOptions_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IH26XEncodeOptions
 * at Tue Sep 09 20:17:54 1997
 * using MIDL 3.03.0110
 ****************************************/
/* [object][uuid] */ 


// STRUCTURES
typedef /* [public] */ struct  __MIDL_IH26XEncodeOptions_0001
    {
    int bExtendedMV;
    int bPBFrames;
    int bAdvPrediction;
    }	ENCODE_OPTIONS_VALUES;

typedef struct __MIDL_IH26XEncodeOptions_0001 __RPC_FAR *PTR_ENCODE_OPTIONS_VALUES;

// METHODS

EXTERN_C const IID IID_IH26XEncodeOptions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("65698D40-282D-11d0-8800-444553540000")
    IH26XEncodeOptions : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE get_EncodeOptions( 
            /* [out] */ PTR_ENCODE_OPTIONS_VALUES pOptionValues) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_EncodeOptionsDefault( 
            /* [out] */ PTR_ENCODE_OPTIONS_VALUES pOptionValues) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE set_EncodeOptions( 
            /* [in] */ PTR_ENCODE_OPTIONS_VALUES pOptionValues) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IH26XEncodeOptionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IH26XEncodeOptions __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IH26XEncodeOptions __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IH26XEncodeOptions __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_EncodeOptions )( 
            IH26XEncodeOptions __RPC_FAR * This,
            /* [out] */ PTR_ENCODE_OPTIONS_VALUES pOptionValues);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_EncodeOptionsDefault )( 
            IH26XEncodeOptions __RPC_FAR * This,
            /* [out] */ PTR_ENCODE_OPTIONS_VALUES pOptionValues);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *set_EncodeOptions )( 
            IH26XEncodeOptions __RPC_FAR * This,
            /* [in] */ PTR_ENCODE_OPTIONS_VALUES pOptionValues);
        
        END_INTERFACE
    } IH26XEncodeOptionsVtbl;

    interface IH26XEncodeOptions
    {
        CONST_VTBL struct IH26XEncodeOptionsVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IH26XEncodeOptions_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IH26XEncodeOptions_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IH26XEncodeOptions_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IH26XEncodeOptions_get_EncodeOptions(This,pOptionValues)	\
    (This)->lpVtbl -> get_EncodeOptions(This,pOptionValues)

#define IH26XEncodeOptions_get_EncodeOptionsDefault(This,pOptionValues)	\
    (This)->lpVtbl -> get_EncodeOptionsDefault(This,pOptionValues)

#define IH26XEncodeOptions_set_EncodeOptions(This,pOptionValues)	\
    (This)->lpVtbl -> set_EncodeOptions(This,pOptionValues)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IH26XEncodeOptions_get_EncodeOptions_Proxy( 
    IH26XEncodeOptions __RPC_FAR * This,
    /* [out] */ PTR_ENCODE_OPTIONS_VALUES pOptionValues);


void __RPC_STUB IH26XEncodeOptions_get_EncodeOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IH26XEncodeOptions_get_EncodeOptionsDefault_Proxy( 
    IH26XEncodeOptions __RPC_FAR * This,
    /* [out] */ PTR_ENCODE_OPTIONS_VALUES pOptionValues);


void __RPC_STUB IH26XEncodeOptions_get_EncodeOptionsDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IH26XEncodeOptions_set_EncodeOptions_Proxy( 
    IH26XEncodeOptions __RPC_FAR * This,
    /* [in] */ PTR_ENCODE_OPTIONS_VALUES pOptionValues);


void __RPC_STUB IH26XEncodeOptions_set_EncodeOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IH26XEncodeOptions_INTERFACE_DEFINED__ */


#ifndef __IH26XSnapshot_INTERFACE_DEFINED__
#define __IH26XSnapshot_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IH26XSnapshot
 * at Tue Sep 09 20:17:54 1997
 * using MIDL 3.03.0110
 ****************************************/
/* [object][uuid] */ 


#ifndef _WINGDI_
// STRUCTURES
typedef struct  __MIDL_IH26XSnapshot_0001
    {
    DWORD biSize;
    LONG biWidth;
    LONG biHeight;
    WORD biPlanes;
    WORD biBitCount;
    DWORD biCompression;
    DWORD biSizeImage;
    LONG biXPelsPerMeter;
    LONG biYPelsPerMeter;
    DWORD biClrUsed;
    DWORD biClrImportant;
    }	__RPC_FAR *LPBITMAPINFOHEADER;

#endif
// METHODS

EXTERN_C const IID IID_IH26XSnapshot;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3CB194A0-10AA-11d0-8800-444553540000")
    IH26XSnapshot : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE getBitmapInfoHeader( 
            /* [out] */ LPBITMAPINFOHEADER lpBmi) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE getSnapshot( 
            /* [in] */ LPBITMAPINFOHEADER lpBmi,
            /* [out] */ unsigned char __RPC_FAR *pvBuffer,
            /* [in] */ DWORD dwTimeout) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IH26XSnapshotVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IH26XSnapshot __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IH26XSnapshot __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IH26XSnapshot __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *getBitmapInfoHeader )( 
            IH26XSnapshot __RPC_FAR * This,
            /* [out] */ LPBITMAPINFOHEADER lpBmi);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *getSnapshot )( 
            IH26XSnapshot __RPC_FAR * This,
            /* [in] */ LPBITMAPINFOHEADER lpBmi,
            /* [out] */ unsigned char __RPC_FAR *pvBuffer,
            /* [in] */ DWORD dwTimeout);
        
        END_INTERFACE
    } IH26XSnapshotVtbl;

    interface IH26XSnapshot
    {
        CONST_VTBL struct IH26XSnapshotVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IH26XSnapshot_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IH26XSnapshot_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IH26XSnapshot_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IH26XSnapshot_getBitmapInfoHeader(This,lpBmi)	\
    (This)->lpVtbl -> getBitmapInfoHeader(This,lpBmi)

#define IH26XSnapshot_getSnapshot(This,lpBmi,pvBuffer,dwTimeout)	\
    (This)->lpVtbl -> getSnapshot(This,lpBmi,pvBuffer,dwTimeout)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IH26XSnapshot_getBitmapInfoHeader_Proxy( 
    IH26XSnapshot __RPC_FAR * This,
    /* [out] */ LPBITMAPINFOHEADER lpBmi);


void __RPC_STUB IH26XSnapshot_getBitmapInfoHeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IH26XSnapshot_getSnapshot_Proxy( 
    IH26XSnapshot __RPC_FAR * This,
    /* [in] */ LPBITMAPINFOHEADER lpBmi,
    /* [out] */ unsigned char __RPC_FAR *pvBuffer,
    /* [in] */ DWORD dwTimeout);


void __RPC_STUB IH26XSnapshot_getSnapshot_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IH26XSnapshot_INTERFACE_DEFINED__ */


#ifndef __IH26XEncoderControl_INTERFACE_DEFINED__
#define __IH26XEncoderControl_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IH26XEncoderControl
 * at Tue Sep 09 20:17:54 1997
 * using MIDL 3.03.0110
 ****************************************/
/* [object][uuid] */ 


// STRUCTURES
typedef /* [public] */ struct  __MIDL_IH26XEncoderControl_0001
    {
    DWORD dwTargetFrameSize;
    BOOL bFrameSizeBRC;
    BOOL bSendKey;
    DWORD dwQuality;
    DWORD dwFrameRate;
    DWORD dwDataRate;
    DWORD dwScale;
    DWORD dwWidth;
    DWORD dwKeyFrameInterval;
    }	ENC_CMP_DATA;

typedef struct __MIDL_IH26XEncoderControl_0001 __RPC_FAR *PTR_ENC_CMP_DATA;

// METHODS

EXTERN_C const IID IID_IH26XEncoderControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F9B78AA1-EA12-11cf-9FEC-00AA00A59F69")
    IH26XEncoderControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE get_EncodeCompression( 
            /* [out] */ PTR_ENC_CMP_DATA pData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_EncodeCompressionDefault( 
            /* [out] */ PTR_ENC_CMP_DATA pData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE set_EncodeCompression( 
            /* [in] */ PTR_ENC_CMP_DATA pData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IH26XEncoderControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IH26XEncoderControl __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IH26XEncoderControl __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IH26XEncoderControl __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_EncodeCompression )( 
            IH26XEncoderControl __RPC_FAR * This,
            /* [out] */ PTR_ENC_CMP_DATA pData);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_EncodeCompressionDefault )( 
            IH26XEncoderControl __RPC_FAR * This,
            /* [out] */ PTR_ENC_CMP_DATA pData);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *set_EncodeCompression )( 
            IH26XEncoderControl __RPC_FAR * This,
            /* [in] */ PTR_ENC_CMP_DATA pData);
        
        END_INTERFACE
    } IH26XEncoderControlVtbl;

    interface IH26XEncoderControl
    {
        CONST_VTBL struct IH26XEncoderControlVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IH26XEncoderControl_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IH26XEncoderControl_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IH26XEncoderControl_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IH26XEncoderControl_get_EncodeCompression(This,pData)	\
    (This)->lpVtbl -> get_EncodeCompression(This,pData)

#define IH26XEncoderControl_get_EncodeCompressionDefault(This,pData)	\
    (This)->lpVtbl -> get_EncodeCompressionDefault(This,pData)

#define IH26XEncoderControl_set_EncodeCompression(This,pData)	\
    (This)->lpVtbl -> set_EncodeCompression(This,pData)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IH26XEncoderControl_get_EncodeCompression_Proxy( 
    IH26XEncoderControl __RPC_FAR * This,
    /* [out] */ PTR_ENC_CMP_DATA pData);


void __RPC_STUB IH26XEncoderControl_get_EncodeCompression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IH26XEncoderControl_get_EncodeCompressionDefault_Proxy( 
    IH26XEncoderControl __RPC_FAR * This,
    /* [out] */ PTR_ENC_CMP_DATA pData);


void __RPC_STUB IH26XEncoderControl_get_EncodeCompressionDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IH26XEncoderControl_set_EncodeCompression_Proxy( 
    IH26XEncoderControl __RPC_FAR * This,
    /* [in] */ PTR_ENC_CMP_DATA pData);


void __RPC_STUB IH26XEncoderControl_set_EncodeCompression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IH26XEncoderControl_INTERFACE_DEFINED__ */


#ifndef __IH26XRTPControl_INTERFACE_DEFINED__
#define __IH26XRTPControl_INTERFACE_DEFINED__

/****************************************
 * Generated header for interface: IH26XRTPControl
 * at Tue Sep 09 20:17:54 1997
 * using MIDL 3.03.0110
 ****************************************/
/* [object][uuid] */ 


// STRUCTURES
typedef /* [public] */ struct  __MIDL_IH26XRTPControl_0001
    {
    BOOL bRTPHeader;
    DWORD dwPacketSize;
    DWORD dwPacketLoss;
    }	ENC_RTP_DATA;

typedef struct __MIDL_IH26XRTPControl_0001 __RPC_FAR *PTR_ENC_RTP_DATA;

// METHODS

EXTERN_C const IID IID_IH26XRTPControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1FC3F2C0-2BFD-11d0-8800-444553540000")
    IH26XRTPControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE get_RTPCompression( 
            /* [out] */ PTR_ENC_RTP_DATA pData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_RTPCompressionDefault( 
            /* [out] */ PTR_ENC_RTP_DATA pData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE set_RTPCompression( 
            /* [in] */ PTR_ENC_RTP_DATA pData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IH26XRTPControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            IH26XRTPControl __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            IH26XRTPControl __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            IH26XRTPControl __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_RTPCompression )( 
            IH26XRTPControl __RPC_FAR * This,
            /* [out] */ PTR_ENC_RTP_DATA pData);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *get_RTPCompressionDefault )( 
            IH26XRTPControl __RPC_FAR * This,
            /* [out] */ PTR_ENC_RTP_DATA pData);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *set_RTPCompression )( 
            IH26XRTPControl __RPC_FAR * This,
            /* [in] */ PTR_ENC_RTP_DATA pData);
        
        END_INTERFACE
    } IH26XRTPControlVtbl;

    interface IH26XRTPControl
    {
        CONST_VTBL struct IH26XRTPControlVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IH26XRTPControl_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IH26XRTPControl_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IH26XRTPControl_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IH26XRTPControl_get_RTPCompression(This,pData)	\
    (This)->lpVtbl -> get_RTPCompression(This,pData)

#define IH26XRTPControl_get_RTPCompressionDefault(This,pData)	\
    (This)->lpVtbl -> get_RTPCompressionDefault(This,pData)

#define IH26XRTPControl_set_RTPCompression(This,pData)	\
    (This)->lpVtbl -> set_RTPCompression(This,pData)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IH26XRTPControl_get_RTPCompression_Proxy( 
    IH26XRTPControl __RPC_FAR * This,
    /* [out] */ PTR_ENC_RTP_DATA pData);


void __RPC_STUB IH26XRTPControl_get_RTPCompression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IH26XRTPControl_get_RTPCompressionDefault_Proxy( 
    IH26XRTPControl __RPC_FAR * This,
    /* [out] */ PTR_ENC_RTP_DATA pData);


void __RPC_STUB IH26XRTPControl_get_RTPCompressionDefault_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IH26XRTPControl_set_RTPCompression_Proxy( 
    IH26XRTPControl __RPC_FAR * This,
    /* [in] */ PTR_ENC_RTP_DATA pData);


void __RPC_STUB IH26XRTPControl_set_RTPCompression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IH26XRTPControl_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3d.h ===
/*==========================================================================;
 *
 *
 *  File:   d3d.h
 *  Content:    Direct3D include file
 *
 ****************************************************************************/

#ifndef _D3D_H_
#define _D3D_H_

#ifndef DIRECT3D_VERSION
#define DIRECT3D_VERSION         0x0700
#endif

// include this file content only if compiling for <=DX7 interfaces
#if(DIRECT3D_VERSION < 0x0800)


#include <stdlib.h>

#define COM_NO_WINDOWS_H
#include <objbase.h>

#define D3DAPI WINAPI

/*
 * Interface IID's
 */
#if defined( _WIN32 ) && !defined( _NO_COM)
DEFINE_GUID( IID_IDirect3D,             0x3BBA0080,0x2421,0x11CF,0xA3,0x1A,0x00,0xAA,0x00,0xB9,0x33,0x56 );
#if(DIRECT3D_VERSION >= 0x0500)
DEFINE_GUID( IID_IDirect3D2,            0x6aae1ec1,0x662a,0x11d0,0x88,0x9d,0x00,0xaa,0x00,0xbb,0xb7,0x6a);
#endif /* DIRECT3D_VERSION >= 0x0500 */
#if(DIRECT3D_VERSION >= 0x0600)
DEFINE_GUID( IID_IDirect3D3,            0xbb223240,0xe72b,0x11d0,0xa9,0xb4,0x00,0xaa,0x00,0xc0,0x99,0x3e);
#endif /* DIRECT3D_VERSION >= 0x0600 */
#if(DIRECT3D_VERSION >= 0x0700)
DEFINE_GUID( IID_IDirect3D7,            0xf5049e77,0x4861,0x11d2,0xa4,0x7,0x0,0xa0,0xc9,0x6,0x29,0xa8);
#endif /* DIRECT3D_VERSION >= 0x0700 */

#if(DIRECT3D_VERSION >= 0x0500)
DEFINE_GUID( IID_IDirect3DRampDevice,   0xF2086B20,0x259F,0x11CF,0xA3,0x1A,0x00,0xAA,0x00,0xB9,0x33,0x56 );
DEFINE_GUID( IID_IDirect3DRGBDevice,    0xA4665C60,0x2673,0x11CF,0xA3,0x1A,0x00,0xAA,0x00,0xB9,0x33,0x56 );
DEFINE_GUID( IID_IDirect3DHALDevice,    0x84E63dE0,0x46AA,0x11CF,0x81,0x6F,0x00,0x00,0xC0,0x20,0x15,0x6E );
DEFINE_GUID( IID_IDirect3DMMXDevice,    0x881949a1,0xd6f3,0x11d0,0x89,0xab,0x00,0xa0,0xc9,0x05,0x41,0x29 );
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)
DEFINE_GUID( IID_IDirect3DRefDevice,    0x50936643, 0x13e9, 0x11d1, 0x89, 0xaa, 0x0, 0xa0, 0xc9, 0x5, 0x41, 0x29);
DEFINE_GUID( IID_IDirect3DNullDevice, 0x8767df22, 0xbacc, 0x11d1, 0x89, 0x69, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8);
#endif /* DIRECT3D_VERSION >= 0x0600 */
#if(DIRECT3D_VERSION >= 0x0700)
DEFINE_GUID( IID_IDirect3DTnLHalDevice, 0xf5049e78, 0x4861, 0x11d2, 0xa4, 0x7, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8);
#endif /* DIRECT3D_VERSION >= 0x0700 */

/*
 * Internal Guid to distinguish requested MMX from MMX being used as an RGB rasterizer
 */

DEFINE_GUID( IID_IDirect3DDevice,       0x64108800,0x957d,0X11d0,0x89,0xab,0x00,0xa0,0xc9,0x05,0x41,0x29 );
#if(DIRECT3D_VERSION >= 0x0500)
DEFINE_GUID( IID_IDirect3DDevice2,  0x93281501, 0x8cf8, 0x11d0, 0x89, 0xab, 0x0, 0xa0, 0xc9, 0x5, 0x41, 0x29);
#endif /* DIRECT3D_VERSION >= 0x0500 */
#if(DIRECT3D_VERSION >= 0x0600)
DEFINE_GUID( IID_IDirect3DDevice3,  0xb0ab3b60, 0x33d7, 0x11d1, 0xa9, 0x81, 0x0, 0xc0, 0x4f, 0xd7, 0xb1, 0x74);
#endif /* DIRECT3D_VERSION >= 0x0600 */
#if(DIRECT3D_VERSION >= 0x0700)
DEFINE_GUID( IID_IDirect3DDevice7,  0xf5049e79, 0x4861, 0x11d2, 0xa4, 0x7, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8);
#endif /* DIRECT3D_VERSION >= 0x0700 */

DEFINE_GUID( IID_IDirect3DTexture,      0x2CDCD9E0,0x25A0,0x11CF,0xA3,0x1A,0x00,0xAA,0x00,0xB9,0x33,0x56 );
#if(DIRECT3D_VERSION >= 0x0500)
DEFINE_GUID( IID_IDirect3DTexture2, 0x93281502, 0x8cf8, 0x11d0, 0x89, 0xab, 0x0, 0xa0, 0xc9, 0x5, 0x41, 0x29);
#endif /* DIRECT3D_VERSION >= 0x0500 */

DEFINE_GUID( IID_IDirect3DLight,        0x4417C142,0x33AD,0x11CF,0x81,0x6F,0x00,0x00,0xC0,0x20,0x15,0x6E );

DEFINE_GUID( IID_IDirect3DMaterial,     0x4417C144,0x33AD,0x11CF,0x81,0x6F,0x00,0x00,0xC0,0x20,0x15,0x6E );
#if(DIRECT3D_VERSION >= 0x0500)
DEFINE_GUID( IID_IDirect3DMaterial2,    0x93281503, 0x8cf8, 0x11d0, 0x89, 0xab, 0x0, 0xa0, 0xc9, 0x5, 0x41, 0x29);
#endif /* DIRECT3D_VERSION >= 0x0500 */
#if(DIRECT3D_VERSION >= 0x0600)
DEFINE_GUID( IID_IDirect3DMaterial3,    0xca9c46f4, 0xd3c5, 0x11d1, 0xb7, 0x5a, 0x0, 0x60, 0x8, 0x52, 0xb3, 0x12);
#endif /* DIRECT3D_VERSION >= 0x0600 */

DEFINE_GUID( IID_IDirect3DExecuteBuffer,0x4417C145,0x33AD,0x11CF,0x81,0x6F,0x00,0x00,0xC0,0x20,0x15,0x6E );
DEFINE_GUID( IID_IDirect3DViewport,     0x4417C146,0x33AD,0x11CF,0x81,0x6F,0x00,0x00,0xC0,0x20,0x15,0x6E );
#if(DIRECT3D_VERSION >= 0x0500)
DEFINE_GUID( IID_IDirect3DViewport2,    0x93281500, 0x8cf8, 0x11d0, 0x89, 0xab, 0x0, 0xa0, 0xc9, 0x5, 0x41, 0x29);
#endif /* DIRECT3D_VERSION >= 0x0500 */
#if(DIRECT3D_VERSION >= 0x0600)
DEFINE_GUID( IID_IDirect3DViewport3,    0xb0ab3b61, 0x33d7, 0x11d1, 0xa9, 0x81, 0x0, 0xc0, 0x4f, 0xd7, 0xb1, 0x74);
#endif /* DIRECT3D_VERSION >= 0x0600 */
#if(DIRECT3D_VERSION >= 0x0600)
DEFINE_GUID( IID_IDirect3DVertexBuffer, 0x7a503555, 0x4a83, 0x11d1, 0xa5, 0xdb, 0x0, 0xa0, 0xc9, 0x3, 0x67, 0xf8);
#endif /* DIRECT3D_VERSION >= 0x0600 */
#if(DIRECT3D_VERSION >= 0x0700)
DEFINE_GUID( IID_IDirect3DVertexBuffer7, 0xf5049e7d, 0x4861, 0x11d2, 0xa4, 0x7, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8);
#endif /* DIRECT3D_VERSION >= 0x0700 */
#endif

#ifdef __cplusplus
struct IDirect3D;
struct IDirect3DDevice;
struct IDirect3DLight;
struct IDirect3DMaterial;
struct IDirect3DExecuteBuffer;
struct IDirect3DTexture;
struct IDirect3DViewport;
typedef struct IDirect3D            *LPDIRECT3D;
typedef struct IDirect3DDevice      *LPDIRECT3DDEVICE;
typedef struct IDirect3DExecuteBuffer   *LPDIRECT3DEXECUTEBUFFER;
typedef struct IDirect3DLight       *LPDIRECT3DLIGHT;
typedef struct IDirect3DMaterial    *LPDIRECT3DMATERIAL;
typedef struct IDirect3DTexture     *LPDIRECT3DTEXTURE;
typedef struct IDirect3DViewport    *LPDIRECT3DVIEWPORT;

#if(DIRECT3D_VERSION >= 0x0500)
struct IDirect3D2;
struct IDirect3DDevice2;
struct IDirect3DMaterial2;
struct IDirect3DTexture2;
struct IDirect3DViewport2;
typedef struct IDirect3D2           *LPDIRECT3D2;
typedef struct IDirect3DDevice2     *LPDIRECT3DDEVICE2;
typedef struct IDirect3DMaterial2   *LPDIRECT3DMATERIAL2;
typedef struct IDirect3DTexture2    *LPDIRECT3DTEXTURE2;
typedef struct IDirect3DViewport2   *LPDIRECT3DVIEWPORT2;
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)
struct IDirect3D3;
struct IDirect3DDevice3;
struct IDirect3DMaterial3;
struct IDirect3DViewport3;
struct IDirect3DVertexBuffer;
typedef struct IDirect3D3            *LPDIRECT3D3;
typedef struct IDirect3DDevice3      *LPDIRECT3DDEVICE3;
typedef struct IDirect3DMaterial3    *LPDIRECT3DMATERIAL3;
typedef struct IDirect3DViewport3    *LPDIRECT3DVIEWPORT3;
typedef struct IDirect3DVertexBuffer *LPDIRECT3DVERTEXBUFFER;
#endif /* DIRECT3D_VERSION >= 0x0600 */

#if(DIRECT3D_VERSION >= 0x0700)
struct IDirect3D7;
struct IDirect3DDevice7;
struct IDirect3DVertexBuffer7;
typedef struct IDirect3D7             *LPDIRECT3D7;
typedef struct IDirect3DDevice7       *LPDIRECT3DDEVICE7;
typedef struct IDirect3DVertexBuffer7 *LPDIRECT3DVERTEXBUFFER7;
#endif /* DIRECT3D_VERSION >= 0x0700 */

#else

typedef struct IDirect3D        *LPDIRECT3D;
typedef struct IDirect3DDevice      *LPDIRECT3DDEVICE;
typedef struct IDirect3DExecuteBuffer   *LPDIRECT3DEXECUTEBUFFER;
typedef struct IDirect3DLight       *LPDIRECT3DLIGHT;
typedef struct IDirect3DMaterial    *LPDIRECT3DMATERIAL;
typedef struct IDirect3DTexture     *LPDIRECT3DTEXTURE;
typedef struct IDirect3DViewport    *LPDIRECT3DVIEWPORT;

#if(DIRECT3D_VERSION >= 0x0500)
typedef struct IDirect3D2           *LPDIRECT3D2;
typedef struct IDirect3DDevice2     *LPDIRECT3DDEVICE2;
typedef struct IDirect3DMaterial2   *LPDIRECT3DMATERIAL2;
typedef struct IDirect3DTexture2    *LPDIRECT3DTEXTURE2;
typedef struct IDirect3DViewport2   *LPDIRECT3DVIEWPORT2;
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)
typedef struct IDirect3D3            *LPDIRECT3D3;
typedef struct IDirect3DDevice3      *LPDIRECT3DDEVICE3;
typedef struct IDirect3DMaterial3    *LPDIRECT3DMATERIAL3;
typedef struct IDirect3DViewport3    *LPDIRECT3DVIEWPORT3;
typedef struct IDirect3DVertexBuffer *LPDIRECT3DVERTEXBUFFER;
#endif /* DIRECT3D_VERSION >= 0x0600 */

#if(DIRECT3D_VERSION >= 0x0700)
typedef struct IDirect3D7             *LPDIRECT3D7;
typedef struct IDirect3DDevice7       *LPDIRECT3DDEVICE7;
typedef struct IDirect3DVertexBuffer7 *LPDIRECT3DVERTEXBUFFER7;
#endif /* DIRECT3D_VERSION >= 0x0700 */

#endif

#include "d3dtypes.h"
#include "d3dcaps.h"


#ifdef __cplusplus
extern "C" {
#endif

/*
 * Direct3D interfaces
 */
#undef INTERFACE
#define INTERFACE IDirect3D

DECLARE_INTERFACE_(IDirect3D, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3D methods ***/
    STDMETHOD(Initialize)(THIS_ REFCLSID) PURE;
    STDMETHOD(EnumDevices)(THIS_ LPD3DENUMDEVICESCALLBACK,LPVOID) PURE;
    STDMETHOD(CreateLight)(THIS_ LPDIRECT3DLIGHT*,IUnknown*) PURE;
    STDMETHOD(CreateMaterial)(THIS_ LPDIRECT3DMATERIAL*,IUnknown*) PURE;
    STDMETHOD(CreateViewport)(THIS_ LPDIRECT3DVIEWPORT*,IUnknown*) PURE;
    STDMETHOD(FindDevice)(THIS_ LPD3DFINDDEVICESEARCH,LPD3DFINDDEVICERESULT) PURE;
};

typedef struct IDirect3D *LPDIRECT3D;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3D_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3D_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3D_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3D_Initialize(p,a) (p)->lpVtbl->Initialize(p,a)
#define IDirect3D_EnumDevices(p,a,b) (p)->lpVtbl->EnumDevices(p,a,b)
#define IDirect3D_CreateLight(p,a,b) (p)->lpVtbl->CreateLight(p,a,b)
#define IDirect3D_CreateMaterial(p,a,b) (p)->lpVtbl->CreateMaterial(p,a,b)
#define IDirect3D_CreateViewport(p,a,b) (p)->lpVtbl->CreateViewport(p,a,b)
#define IDirect3D_FindDevice(p,a,b) (p)->lpVtbl->FindDevice(p,a,b)
#else
#define IDirect3D_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3D_AddRef(p) (p)->AddRef()
#define IDirect3D_Release(p) (p)->Release()
#define IDirect3D_Initialize(p,a) (p)->Initialize(a)
#define IDirect3D_EnumDevices(p,a,b) (p)->EnumDevices(a,b)
#define IDirect3D_CreateLight(p,a,b) (p)->CreateLight(a,b)
#define IDirect3D_CreateMaterial(p,a,b) (p)->CreateMaterial(a,b)
#define IDirect3D_CreateViewport(p,a,b) (p)->CreateViewport(a,b)
#define IDirect3D_FindDevice(p,a,b) (p)->FindDevice(a,b)
#endif

#if(DIRECT3D_VERSION >= 0x0500)
#undef INTERFACE
#define INTERFACE IDirect3D2

DECLARE_INTERFACE_(IDirect3D2, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3D2 methods ***/
    STDMETHOD(EnumDevices)(THIS_ LPD3DENUMDEVICESCALLBACK,LPVOID) PURE;
    STDMETHOD(CreateLight)(THIS_ LPDIRECT3DLIGHT*,IUnknown*) PURE;
    STDMETHOD(CreateMaterial)(THIS_ LPDIRECT3DMATERIAL2*,IUnknown*) PURE;
    STDMETHOD(CreateViewport)(THIS_ LPDIRECT3DVIEWPORT2*,IUnknown*) PURE;
    STDMETHOD(FindDevice)(THIS_ LPD3DFINDDEVICESEARCH,LPD3DFINDDEVICERESULT) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFCLSID,LPDIRECTDRAWSURFACE,LPDIRECT3DDEVICE2*) PURE;
};

typedef struct IDirect3D2 *LPDIRECT3D2;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3D2_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3D2_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3D2_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3D2_EnumDevices(p,a,b) (p)->lpVtbl->EnumDevices(p,a,b)
#define IDirect3D2_CreateLight(p,a,b) (p)->lpVtbl->CreateLight(p,a,b)
#define IDirect3D2_CreateMaterial(p,a,b) (p)->lpVtbl->CreateMaterial(p,a,b)
#define IDirect3D2_CreateViewport(p,a,b) (p)->lpVtbl->CreateViewport(p,a,b)
#define IDirect3D2_FindDevice(p,a,b) (p)->lpVtbl->FindDevice(p,a,b)
#define IDirect3D2_CreateDevice(p,a,b,c) (p)->lpVtbl->CreateDevice(p,a,b,c)
#else
#define IDirect3D2_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3D2_AddRef(p) (p)->AddRef()
#define IDirect3D2_Release(p) (p)->Release()
#define IDirect3D2_EnumDevices(p,a,b) (p)->EnumDevices(a,b)
#define IDirect3D2_CreateLight(p,a,b) (p)->CreateLight(a,b)
#define IDirect3D2_CreateMaterial(p,a,b) (p)->CreateMaterial(a,b)
#define IDirect3D2_CreateViewport(p,a,b) (p)->CreateViewport(a,b)
#define IDirect3D2_FindDevice(p,a,b) (p)->FindDevice(a,b)
#define IDirect3D2_CreateDevice(p,a,b,c) (p)->CreateDevice(a,b,c)
#endif
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)
#undef INTERFACE
#define INTERFACE IDirect3D3

DECLARE_INTERFACE_(IDirect3D3, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3D3 methods ***/
    STDMETHOD(EnumDevices)(THIS_ LPD3DENUMDEVICESCALLBACK,LPVOID) PURE;
    STDMETHOD(CreateLight)(THIS_ LPDIRECT3DLIGHT*,LPUNKNOWN) PURE;
    STDMETHOD(CreateMaterial)(THIS_ LPDIRECT3DMATERIAL3*,LPUNKNOWN) PURE;
    STDMETHOD(CreateViewport)(THIS_ LPDIRECT3DVIEWPORT3*,LPUNKNOWN) PURE;
    STDMETHOD(FindDevice)(THIS_ LPD3DFINDDEVICESEARCH,LPD3DFINDDEVICERESULT) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFCLSID,LPDIRECTDRAWSURFACE4,LPDIRECT3DDEVICE3*,LPUNKNOWN) PURE;
    STDMETHOD(CreateVertexBuffer)(THIS_ LPD3DVERTEXBUFFERDESC,LPDIRECT3DVERTEXBUFFER*,DWORD,LPUNKNOWN) PURE;
    STDMETHOD(EnumZBufferFormats)(THIS_ REFCLSID,LPD3DENUMPIXELFORMATSCALLBACK,LPVOID) PURE;
    STDMETHOD(EvictManagedTextures)(THIS) PURE;
};

typedef struct IDirect3D3 *LPDIRECT3D3;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3D3_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3D3_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3D3_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3D3_EnumDevices(p,a,b) (p)->lpVtbl->EnumDevices(p,a,b)
#define IDirect3D3_CreateLight(p,a,b) (p)->lpVtbl->CreateLight(p,a,b)
#define IDirect3D3_CreateMaterial(p,a,b) (p)->lpVtbl->CreateMaterial(p,a,b)
#define IDirect3D3_CreateViewport(p,a,b) (p)->lpVtbl->CreateViewport(p,a,b)
#define IDirect3D3_FindDevice(p,a,b) (p)->lpVtbl->FindDevice(p,a,b)
#define IDirect3D3_CreateDevice(p,a,b,c,d) (p)->lpVtbl->CreateDevice(p,a,b,c,d)
#define IDirect3D3_CreateVertexBuffer(p,a,b,c,d) (p)->lpVtbl->CreateVertexBuffer(p,a,b,c,d)
#define IDirect3D3_EnumZBufferFormats(p,a,b,c) (p)->lpVtbl->EnumZBufferFormats(p,a,b,c)
#define IDirect3D3_EvictManagedTextures(p) (p)->lpVtbl->EvictManagedTextures(p)
#else
#define IDirect3D3_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3D3_AddRef(p) (p)->AddRef()
#define IDirect3D3_Release(p) (p)->Release()
#define IDirect3D3_EnumDevices(p,a,b) (p)->EnumDevices(a,b)
#define IDirect3D3_CreateLight(p,a,b) (p)->CreateLight(a,b)
#define IDirect3D3_CreateMaterial(p,a,b) (p)->CreateMaterial(a,b)
#define IDirect3D3_CreateViewport(p,a,b) (p)->CreateViewport(a,b)
#define IDirect3D3_FindDevice(p,a,b) (p)->FindDevice(a,b)
#define IDirect3D3_CreateDevice(p,a,b,c,d) (p)->CreateDevice(a,b,c,d)
#define IDirect3D3_CreateVertexBuffer(p,a,b,c,d) (p)->CreateVertexBuffer(a,b,c,d)
#define IDirect3D3_EnumZBufferFormats(p,a,b,c) (p)->EnumZBufferFormats(a,b,c)
#define IDirect3D3_EvictManagedTextures(p) (p)->EvictManagedTextures()
#endif
#endif /* DIRECT3D_VERSION >= 0x0600 */

#if(DIRECT3D_VERSION >= 0x0700)
#undef INTERFACE
#define INTERFACE IDirect3D7

DECLARE_INTERFACE_(IDirect3D7, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3D7 methods ***/
    STDMETHOD(EnumDevices)(THIS_ LPD3DENUMDEVICESCALLBACK7,LPVOID) PURE;
    STDMETHOD(CreateDevice)(THIS_ REFCLSID,LPDIRECTDRAWSURFACE7,LPDIRECT3DDEVICE7*) PURE;
    STDMETHOD(CreateVertexBuffer)(THIS_ LPD3DVERTEXBUFFERDESC,LPDIRECT3DVERTEXBUFFER7*,DWORD) PURE;
    STDMETHOD(EnumZBufferFormats)(THIS_ REFCLSID,LPD3DENUMPIXELFORMATSCALLBACK,LPVOID) PURE;
    STDMETHOD(EvictManagedTextures)(THIS) PURE;
};

typedef struct IDirect3D7 *LPDIRECT3D7;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3D7_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3D7_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3D7_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3D7_EnumDevices(p,a,b) (p)->lpVtbl->EnumDevices(p,a,b)
#define IDirect3D7_CreateDevice(p,a,b,c) (p)->lpVtbl->CreateDevice(p,a,b,c)
#define IDirect3D7_CreateVertexBuffer(p,a,b,c) (p)->lpVtbl->CreateVertexBuffer(p,a,b,c)
#define IDirect3D7_EnumZBufferFormats(p,a,b,c) (p)->lpVtbl->EnumZBufferFormats(p,a,b,c)
#define IDirect3D7_EvictManagedTextures(p) (p)->lpVtbl->EvictManagedTextures(p)
#else
#define IDirect3D7_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3D7_AddRef(p) (p)->AddRef()
#define IDirect3D7_Release(p) (p)->Release()
#define IDirect3D7_EnumDevices(p,a,b) (p)->EnumDevices(a,b)
#define IDirect3D7_CreateDevice(p,a,b,c) (p)->CreateDevice(a,b,c)
#define IDirect3D7_CreateVertexBuffer(p,a,b,c) (p)->CreateVertexBuffer(a,b,c)
#define IDirect3D7_EnumZBufferFormats(p,a,b,c) (p)->EnumZBufferFormats(a,b,c)
#define IDirect3D7_EvictManagedTextures(p) (p)->EvictManagedTextures()
#endif
#endif /* DIRECT3D_VERSION >= 0x0700 */
/*
 * Direct3D Device interfaces
 */
#undef INTERFACE
#define INTERFACE IDirect3DDevice

DECLARE_INTERFACE_(IDirect3DDevice, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DDevice methods ***/
    STDMETHOD(Initialize)(THIS_ LPDIRECT3D,LPGUID,LPD3DDEVICEDESC) PURE;
    STDMETHOD(GetCaps)(THIS_ LPD3DDEVICEDESC,LPD3DDEVICEDESC) PURE;
    STDMETHOD(SwapTextureHandles)(THIS_ LPDIRECT3DTEXTURE,LPDIRECT3DTEXTURE) PURE;
    STDMETHOD(CreateExecuteBuffer)(THIS_ LPD3DEXECUTEBUFFERDESC,LPDIRECT3DEXECUTEBUFFER*,IUnknown*) PURE;
    STDMETHOD(GetStats)(THIS_ LPD3DSTATS) PURE;
    STDMETHOD(Execute)(THIS_ LPDIRECT3DEXECUTEBUFFER,LPDIRECT3DVIEWPORT,DWORD) PURE;
    STDMETHOD(AddViewport)(THIS_ LPDIRECT3DVIEWPORT) PURE;
    STDMETHOD(DeleteViewport)(THIS_ LPDIRECT3DVIEWPORT) PURE;
    STDMETHOD(NextViewport)(THIS_ LPDIRECT3DVIEWPORT,LPDIRECT3DVIEWPORT*,DWORD) PURE;
    STDMETHOD(Pick)(THIS_ LPDIRECT3DEXECUTEBUFFER,LPDIRECT3DVIEWPORT,DWORD,LPD3DRECT) PURE;
    STDMETHOD(GetPickRecords)(THIS_ LPDWORD,LPD3DPICKRECORD) PURE;
    STDMETHOD(EnumTextureFormats)(THIS_ LPD3DENUMTEXTUREFORMATSCALLBACK,LPVOID) PURE;
    STDMETHOD(CreateMatrix)(THIS_ LPD3DMATRIXHANDLE) PURE;
    STDMETHOD(SetMatrix)(THIS_ D3DMATRIXHANDLE,const LPD3DMATRIX) PURE;
    STDMETHOD(GetMatrix)(THIS_ D3DMATRIXHANDLE,LPD3DMATRIX) PURE;
    STDMETHOD(DeleteMatrix)(THIS_ D3DMATRIXHANDLE) PURE;
    STDMETHOD(BeginScene)(THIS) PURE;
    STDMETHOD(EndScene)(THIS) PURE;
    STDMETHOD(GetDirect3D)(THIS_ LPDIRECT3D*) PURE;
};

typedef struct IDirect3DDevice *LPDIRECT3DDEVICE;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DDevice_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DDevice_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DDevice_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DDevice_Initialize(p,a,b,c) (p)->lpVtbl->Initialize(p,a,b,c)
#define IDirect3DDevice_GetCaps(p,a,b) (p)->lpVtbl->GetCaps(p,a,b)
#define IDirect3DDevice_SwapTextureHandles(p,a,b) (p)->lpVtbl->SwapTextureHandles(p,a,b)
#define IDirect3DDevice_CreateExecuteBuffer(p,a,b,c) (p)->lpVtbl->CreateExecuteBuffer(p,a,b,c)
#define IDirect3DDevice_GetStats(p,a) (p)->lpVtbl->GetStats(p,a)
#define IDirect3DDevice_Execute(p,a,b,c) (p)->lpVtbl->Execute(p,a,b,c)
#define IDirect3DDevice_AddViewport(p,a) (p)->lpVtbl->AddViewport(p,a)
#define IDirect3DDevice_DeleteViewport(p,a) (p)->lpVtbl->DeleteViewport(p,a)
#define IDirect3DDevice_NextViewport(p,a,b,c) (p)->lpVtbl->NextViewport(p,a,b,c)
#define IDirect3DDevice_Pick(p,a,b,c,d) (p)->lpVtbl->Pick(p,a,b,c,d)
#define IDirect3DDevice_GetPickRecords(p,a,b) (p)->lpVtbl->GetPickRecords(p,a,b)
#define IDirect3DDevice_EnumTextureFormats(p,a,b) (p)->lpVtbl->EnumTextureFormats(p,a,b)
#define IDirect3DDevice_CreateMatrix(p,a) (p)->lpVtbl->CreateMatrix(p,a)
#define IDirect3DDevice_SetMatrix(p,a,b) (p)->lpVtbl->SetMatrix(p,a,b)
#define IDirect3DDevice_GetMatrix(p,a,b) (p)->lpVtbl->GetMatrix(p,a,b)
#define IDirect3DDevice_DeleteMatrix(p,a) (p)->lpVtbl->DeleteMatrix(p,a)
#define IDirect3DDevice_BeginScene(p) (p)->lpVtbl->BeginScene(p)
#define IDirect3DDevice_EndScene(p) (p)->lpVtbl->EndScene(p)
#define IDirect3DDevice_GetDirect3D(p,a) (p)->lpVtbl->GetDirect3D(p,a)
#else
#define IDirect3DDevice_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DDevice_AddRef(p) (p)->AddRef()
#define IDirect3DDevice_Release(p) (p)->Release()
#define IDirect3DDevice_Initialize(p,a,b,c) (p)->Initialize(a,b,c)
#define IDirect3DDevice_GetCaps(p,a,b) (p)->GetCaps(a,b)
#define IDirect3DDevice_SwapTextureHandles(p,a,b) (p)->SwapTextureHandles(a,b)
#define IDirect3DDevice_CreateExecuteBuffer(p,a,b,c) (p)->CreateExecuteBuffer(a,b,c)
#define IDirect3DDevice_GetStats(p,a) (p)->GetStats(a)
#define IDirect3DDevice_Execute(p,a,b,c) (p)->Execute(a,b,c)
#define IDirect3DDevice_AddViewport(p,a) (p)->AddViewport(a)
#define IDirect3DDevice_DeleteViewport(p,a) (p)->DeleteViewport(a)
#define IDirect3DDevice_NextViewport(p,a,b,c) (p)->NextViewport(a,b,c)
#define IDirect3DDevice_Pick(p,a,b,c,d) (p)->Pick(a,b,c,d)
#define IDirect3DDevice_GetPickRecords(p,a,b) (p)->GetPickRecords(a,b)
#define IDirect3DDevice_EnumTextureFormats(p,a,b) (p)->EnumTextureFormats(a,b)
#define IDirect3DDevice_CreateMatrix(p,a) (p)->CreateMatrix(a)
#define IDirect3DDevice_SetMatrix(p,a,b) (p)->SetMatrix(a,b)
#define IDirect3DDevice_GetMatrix(p,a,b) (p)->GetMatrix(a,b)
#define IDirect3DDevice_DeleteMatrix(p,a) (p)->DeleteMatrix(a)
#define IDirect3DDevice_BeginScene(p) (p)->BeginScene()
#define IDirect3DDevice_EndScene(p) (p)->EndScene()
#define IDirect3DDevice_GetDirect3D(p,a) (p)->GetDirect3D(a)
#endif

#if(DIRECT3D_VERSION >= 0x0500)
#undef INTERFACE
#define INTERFACE IDirect3DDevice2

DECLARE_INTERFACE_(IDirect3DDevice2, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DDevice2 methods ***/
    STDMETHOD(GetCaps)(THIS_ LPD3DDEVICEDESC,LPD3DDEVICEDESC) PURE;
    STDMETHOD(SwapTextureHandles)(THIS_ LPDIRECT3DTEXTURE2,LPDIRECT3DTEXTURE2) PURE;
    STDMETHOD(GetStats)(THIS_ LPD3DSTATS) PURE;
    STDMETHOD(AddViewport)(THIS_ LPDIRECT3DVIEWPORT2) PURE;
    STDMETHOD(DeleteViewport)(THIS_ LPDIRECT3DVIEWPORT2) PURE;
    STDMETHOD(NextViewport)(THIS_ LPDIRECT3DVIEWPORT2,LPDIRECT3DVIEWPORT2*,DWORD) PURE;
    STDMETHOD(EnumTextureFormats)(THIS_ LPD3DENUMTEXTUREFORMATSCALLBACK,LPVOID) PURE;
    STDMETHOD(BeginScene)(THIS) PURE;
    STDMETHOD(EndScene)(THIS) PURE;
    STDMETHOD(GetDirect3D)(THIS_ LPDIRECT3D2*) PURE;
    STDMETHOD(SetCurrentViewport)(THIS_ LPDIRECT3DVIEWPORT2) PURE;
    STDMETHOD(GetCurrentViewport)(THIS_ LPDIRECT3DVIEWPORT2 *) PURE;
    STDMETHOD(SetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE,DWORD) PURE;
    STDMETHOD(GetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE *) PURE;
    STDMETHOD(Begin)(THIS_ D3DPRIMITIVETYPE,D3DVERTEXTYPE,DWORD) PURE;
    STDMETHOD(BeginIndexed)(THIS_ D3DPRIMITIVETYPE,D3DVERTEXTYPE,LPVOID,DWORD,DWORD) PURE;
    STDMETHOD(Vertex)(THIS_ LPVOID) PURE;
    STDMETHOD(Index)(THIS_ WORD) PURE;
    STDMETHOD(End)(THIS_ DWORD) PURE;
    STDMETHOD(GetRenderState)(THIS_ D3DRENDERSTATETYPE,LPDWORD) PURE;
    STDMETHOD(SetRenderState)(THIS_ D3DRENDERSTATETYPE,DWORD) PURE;
    STDMETHOD(GetLightState)(THIS_ D3DLIGHTSTATETYPE,LPDWORD) PURE;
    STDMETHOD(SetLightState)(THIS_ D3DLIGHTSTATETYPE,DWORD) PURE;
    STDMETHOD(SetTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(GetTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(MultiplyTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(DrawPrimitive)(THIS_ D3DPRIMITIVETYPE,D3DVERTEXTYPE,LPVOID,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitive)(THIS_ D3DPRIMITIVETYPE,D3DVERTEXTYPE,LPVOID,DWORD,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(SetClipStatus)(THIS_ LPD3DCLIPSTATUS) PURE;
    STDMETHOD(GetClipStatus)(THIS_ LPD3DCLIPSTATUS) PURE;
};

typedef struct IDirect3DDevice2 *LPDIRECT3DDEVICE2;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DDevice2_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DDevice2_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DDevice2_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DDevice2_GetCaps(p,a,b) (p)->lpVtbl->GetCaps(p,a,b)
#define IDirect3DDevice2_SwapTextureHandles(p,a,b) (p)->lpVtbl->SwapTextureHandles(p,a,b)
#define IDirect3DDevice2_GetStats(p,a) (p)->lpVtbl->GetStats(p,a)
#define IDirect3DDevice2_AddViewport(p,a) (p)->lpVtbl->AddViewport(p,a)
#define IDirect3DDevice2_DeleteViewport(p,a) (p)->lpVtbl->DeleteViewport(p,a)
#define IDirect3DDevice2_NextViewport(p,a,b,c) (p)->lpVtbl->NextViewport(p,a,b,c)
#define IDirect3DDevice2_EnumTextureFormats(p,a,b) (p)->lpVtbl->EnumTextureFormats(p,a,b)
#define IDirect3DDevice2_BeginScene(p) (p)->lpVtbl->BeginScene(p)
#define IDirect3DDevice2_EndScene(p) (p)->lpVtbl->EndScene(p)
#define IDirect3DDevice2_GetDirect3D(p,a) (p)->lpVtbl->GetDirect3D(p,a)
#define IDirect3DDevice2_SetCurrentViewport(p,a) (p)->lpVtbl->SetCurrentViewport(p,a)
#define IDirect3DDevice2_GetCurrentViewport(p,a) (p)->lpVtbl->GetCurrentViewport(p,a)
#define IDirect3DDevice2_SetRenderTarget(p,a,b) (p)->lpVtbl->SetRenderTarget(p,a,b)
#define IDirect3DDevice2_GetRenderTarget(p,a) (p)->lpVtbl->GetRenderTarget(p,a)
#define IDirect3DDevice2_Begin(p,a,b,c) (p)->lpVtbl->Begin(p,a,b,c)
#define IDirect3DDevice2_BeginIndexed(p,a,b,c,d,e) (p)->lpVtbl->BeginIndexed(p,a,b,c,d,e)
#define IDirect3DDevice2_Vertex(p,a) (p)->lpVtbl->Vertex(p,a)
#define IDirect3DDevice2_Index(p,a) (p)->lpVtbl->Index(p,a)
#define IDirect3DDevice2_End(p,a) (p)->lpVtbl->End(p,a)
#define IDirect3DDevice2_GetRenderState(p,a,b) (p)->lpVtbl->GetRenderState(p,a,b)
#define IDirect3DDevice2_SetRenderState(p,a,b) (p)->lpVtbl->SetRenderState(p,a,b)
#define IDirect3DDevice2_GetLightState(p,a,b) (p)->lpVtbl->GetLightState(p,a,b)
#define IDirect3DDevice2_SetLightState(p,a,b) (p)->lpVtbl->SetLightState(p,a,b)
#define IDirect3DDevice2_SetTransform(p,a,b) (p)->lpVtbl->SetTransform(p,a,b)
#define IDirect3DDevice2_GetTransform(p,a,b) (p)->lpVtbl->GetTransform(p,a,b)
#define IDirect3DDevice2_MultiplyTransform(p,a,b) (p)->lpVtbl->MultiplyTransform(p,a,b)
#define IDirect3DDevice2_DrawPrimitive(p,a,b,c,d,e) (p)->lpVtbl->DrawPrimitive(p,a,b,c,d,e)
#define IDirect3DDevice2_DrawIndexedPrimitive(p,a,b,c,d,e,f,g) (p)->lpVtbl->DrawIndexedPrimitive(p,a,b,c,d,e,f,g)
#define IDirect3DDevice2_SetClipStatus(p,a) (p)->lpVtbl->SetClipStatus(p,a)
#define IDirect3DDevice2_GetClipStatus(p,a) (p)->lpVtbl->GetClipStatus(p,a)
#else
#define IDirect3DDevice2_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DDevice2_AddRef(p) (p)->AddRef()
#define IDirect3DDevice2_Release(p) (p)->Release()
#define IDirect3DDevice2_GetCaps(p,a,b) (p)->GetCaps(a,b)
#define IDirect3DDevice2_SwapTextureHandles(p,a,b) (p)->SwapTextureHandles(a,b)
#define IDirect3DDevice2_GetStats(p,a) (p)->GetStats(a)
#define IDirect3DDevice2_AddViewport(p,a) (p)->AddViewport(a)
#define IDirect3DDevice2_DeleteViewport(p,a) (p)->DeleteViewport(a)
#define IDirect3DDevice2_NextViewport(p,a,b,c) (p)->NextViewport(a,b,c)
#define IDirect3DDevice2_EnumTextureFormats(p,a,b) (p)->EnumTextureFormats(a,b)
#define IDirect3DDevice2_BeginScene(p) (p)->BeginScene()
#define IDirect3DDevice2_EndScene(p) (p)->EndScene()
#define IDirect3DDevice2_GetDirect3D(p,a) (p)->GetDirect3D(a)
#define IDirect3DDevice2_SetCurrentViewport(p,a) (p)->SetCurrentViewport(a)
#define IDirect3DDevice2_GetCurrentViewport(p,a) (p)->GetCurrentViewport(a)
#define IDirect3DDevice2_SetRenderTarget(p,a,b) (p)->SetRenderTarget(a,b)
#define IDirect3DDevice2_GetRenderTarget(p,a) (p)->GetRenderTarget(a)
#define IDirect3DDevice2_Begin(p,a,b,c) (p)->Begin(a,b,c)
#define IDirect3DDevice2_BeginIndexed(p,a,b,c,d,e) (p)->BeginIndexed(a,b,c,d,e)
#define IDirect3DDevice2_Vertex(p,a) (p)->Vertex(a)
#define IDirect3DDevice2_Index(p,a) (p)->Index(a)
#define IDirect3DDevice2_End(p,a) (p)->End(a)
#define IDirect3DDevice2_GetRenderState(p,a,b) (p)->GetRenderState(a,b)
#define IDirect3DDevice2_SetRenderState(p,a,b) (p)->SetRenderState(a,b)
#define IDirect3DDevice2_GetLightState(p,a,b) (p)->GetLightState(a,b)
#define IDirect3DDevice2_SetLightState(p,a,b) (p)->SetLightState(a,b)
#define IDirect3DDevice2_SetTransform(p,a,b) (p)->SetTransform(a,b)
#define IDirect3DDevice2_GetTransform(p,a,b) (p)->GetTransform(a,b)
#define IDirect3DDevice2_MultiplyTransform(p,a,b) (p)->MultiplyTransform(a,b)
#define IDirect3DDevice2_DrawPrimitive(p,a,b,c,d,e) (p)->DrawPrimitive(a,b,c,d,e)
#define IDirect3DDevice2_DrawIndexedPrimitive(p,a,b,c,d,e,f,g) (p)->DrawIndexedPrimitive(a,b,c,d,e,f,g)
#define IDirect3DDevice2_SetClipStatus(p,a) (p)->SetClipStatus(a)
#define IDirect3DDevice2_GetClipStatus(p,a) (p)->GetClipStatus(a)
#endif
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)
#undef INTERFACE
#define INTERFACE IDirect3DDevice3

DECLARE_INTERFACE_(IDirect3DDevice3, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DDevice3 methods ***/
    STDMETHOD(GetCaps)(THIS_ LPD3DDEVICEDESC,LPD3DDEVICEDESC) PURE;
    STDMETHOD(GetStats)(THIS_ LPD3DSTATS) PURE;
    STDMETHOD(AddViewport)(THIS_ LPDIRECT3DVIEWPORT3) PURE;
    STDMETHOD(DeleteViewport)(THIS_ LPDIRECT3DVIEWPORT3) PURE;
    STDMETHOD(NextViewport)(THIS_ LPDIRECT3DVIEWPORT3,LPDIRECT3DVIEWPORT3*,DWORD) PURE;
    STDMETHOD(EnumTextureFormats)(THIS_ LPD3DENUMPIXELFORMATSCALLBACK,LPVOID) PURE;
    STDMETHOD(BeginScene)(THIS) PURE;
    STDMETHOD(EndScene)(THIS) PURE;
    STDMETHOD(GetDirect3D)(THIS_ LPDIRECT3D3*) PURE;
    STDMETHOD(SetCurrentViewport)(THIS_ LPDIRECT3DVIEWPORT3) PURE;
    STDMETHOD(GetCurrentViewport)(THIS_ LPDIRECT3DVIEWPORT3 *) PURE;
    STDMETHOD(SetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE4,DWORD) PURE;
    STDMETHOD(GetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE4 *) PURE;
    STDMETHOD(Begin)(THIS_ D3DPRIMITIVETYPE,DWORD,DWORD) PURE;
    STDMETHOD(BeginIndexed)(THIS_ D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,DWORD) PURE;
    STDMETHOD(Vertex)(THIS_ LPVOID) PURE;
    STDMETHOD(Index)(THIS_ WORD) PURE;
    STDMETHOD(End)(THIS_ DWORD) PURE;
    STDMETHOD(GetRenderState)(THIS_ D3DRENDERSTATETYPE,LPDWORD) PURE;
    STDMETHOD(SetRenderState)(THIS_ D3DRENDERSTATETYPE,DWORD) PURE;
    STDMETHOD(GetLightState)(THIS_ D3DLIGHTSTATETYPE,LPDWORD) PURE;
    STDMETHOD(SetLightState)(THIS_ D3DLIGHTSTATETYPE,DWORD) PURE;
    STDMETHOD(SetTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(GetTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(MultiplyTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(DrawPrimitive)(THIS_ D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitive)(THIS_ D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(SetClipStatus)(THIS_ LPD3DCLIPSTATUS) PURE;
    STDMETHOD(GetClipStatus)(THIS_ LPD3DCLIPSTATUS) PURE;
    STDMETHOD(DrawPrimitiveStrided)(THIS_ D3DPRIMITIVETYPE,DWORD,LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitiveStrided)(THIS_ D3DPRIMITIVETYPE,DWORD,LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(DrawPrimitiveVB)(THIS_ D3DPRIMITIVETYPE,LPDIRECT3DVERTEXBUFFER,DWORD,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitiveVB)(THIS_ D3DPRIMITIVETYPE,LPDIRECT3DVERTEXBUFFER,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(ComputeSphereVisibility)(THIS_ LPD3DVECTOR,LPD3DVALUE,DWORD,DWORD,LPDWORD) PURE;
    STDMETHOD(GetTexture)(THIS_ DWORD,LPDIRECT3DTEXTURE2 *) PURE;
    STDMETHOD(SetTexture)(THIS_ DWORD,LPDIRECT3DTEXTURE2) PURE;
    STDMETHOD(GetTextureStageState)(THIS_ DWORD,D3DTEXTURESTAGESTATETYPE,LPDWORD) PURE;
    STDMETHOD(SetTextureStageState)(THIS_ DWORD,D3DTEXTURESTAGESTATETYPE,DWORD) PURE;
    STDMETHOD(ValidateDevice)(THIS_ LPDWORD) PURE;
};

typedef struct IDirect3DDevice3 *LPDIRECT3DDEVICE3;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DDevice3_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DDevice3_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DDevice3_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DDevice3_GetCaps(p,a,b) (p)->lpVtbl->GetCaps(p,a,b)
#define IDirect3DDevice3_GetStats(p,a) (p)->lpVtbl->GetStats(p,a)
#define IDirect3DDevice3_AddViewport(p,a) (p)->lpVtbl->AddViewport(p,a)
#define IDirect3DDevice3_DeleteViewport(p,a) (p)->lpVtbl->DeleteViewport(p,a)
#define IDirect3DDevice3_NextViewport(p,a,b,c) (p)->lpVtbl->NextViewport(p,a,b,c)
#define IDirect3DDevice3_EnumTextureFormats(p,a,b) (p)->lpVtbl->EnumTextureFormats(p,a,b)
#define IDirect3DDevice3_BeginScene(p) (p)->lpVtbl->BeginScene(p)
#define IDirect3DDevice3_EndScene(p) (p)->lpVtbl->EndScene(p)
#define IDirect3DDevice3_GetDirect3D(p,a) (p)->lpVtbl->GetDirect3D(p,a)
#define IDirect3DDevice3_SetCurrentViewport(p,a) (p)->lpVtbl->SetCurrentViewport(p,a)
#define IDirect3DDevice3_GetCurrentViewport(p,a) (p)->lpVtbl->GetCurrentViewport(p,a)
#define IDirect3DDevice3_SetRenderTarget(p,a,b) (p)->lpVtbl->SetRenderTarget(p,a,b)
#define IDirect3DDevice3_GetRenderTarget(p,a) (p)->lpVtbl->GetRenderTarget(p,a)
#define IDirect3DDevice3_Begin(p,a,b,c) (p)->lpVtbl->Begin(p,a,b,c)
#define IDirect3DDevice3_BeginIndexed(p,a,b,c,d,e) (p)->lpVtbl->BeginIndexed(p,a,b,c,d,e)
#define IDirect3DDevice3_Vertex(p,a) (p)->lpVtbl->Vertex(p,a)
#define IDirect3DDevice3_Index(p,a) (p)->lpVtbl->Index(p,a)
#define IDirect3DDevice3_End(p,a) (p)->lpVtbl->End(p,a)
#define IDirect3DDevice3_GetRenderState(p,a,b) (p)->lpVtbl->GetRenderState(p,a,b)
#define IDirect3DDevice3_SetRenderState(p,a,b) (p)->lpVtbl->SetRenderState(p,a,b)
#define IDirect3DDevice3_GetLightState(p,a,b) (p)->lpVtbl->GetLightState(p,a,b)
#define IDirect3DDevice3_SetLightState(p,a,b) (p)->lpVtbl->SetLightState(p,a,b)
#define IDirect3DDevice3_SetTransform(p,a,b) (p)->lpVtbl->SetTransform(p,a,b)
#define IDirect3DDevice3_GetTransform(p,a,b) (p)->lpVtbl->GetTransform(p,a,b)
#define IDirect3DDevice3_MultiplyTransform(p,a,b) (p)->lpVtbl->MultiplyTransform(p,a,b)
#define IDirect3DDevice3_DrawPrimitive(p,a,b,c,d,e) (p)->lpVtbl->DrawPrimitive(p,a,b,c,d,e)
#define IDirect3DDevice3_DrawIndexedPrimitive(p,a,b,c,d,e,f,g) (p)->lpVtbl->DrawIndexedPrimitive(p,a,b,c,d,e,f,g)
#define IDirect3DDevice3_SetClipStatus(p,a) (p)->lpVtbl->SetClipStatus(p,a)
#define IDirect3DDevice3_GetClipStatus(p,a) (p)->lpVtbl->GetClipStatus(p,a)
#define IDirect3DDevice3_DrawPrimitiveStrided(p,a,b,c,d,e) (p)->lpVtbl->DrawPrimitiveStrided(p,a,b,c,d,e)
#define IDirect3DDevice3_DrawIndexedPrimitiveStrided(p,a,b,c,d,e,f,g) (p)->lpVtbl->DrawIndexedPrimitiveStrided(p,a,b,c,d,e,f,g)
#define IDirect3DDevice3_DrawPrimitiveVB(p,a,b,c,d,e) (p)->lpVtbl->DrawPrimitiveVB(p,a,b,c,d,e)
#define IDirect3DDevice3_DrawIndexedPrimitiveVB(p,a,b,c,d,e) (p)->lpVtbl->DrawIndexedPrimitiveVB(p,a,b,c,d,e)
#define IDirect3DDevice3_ComputeSphereVisibility(p,a,b,c,d,e) (p)->lpVtbl->ComputeSphereVisibility(p,a,b,c,d,e)
#define IDirect3DDevice3_GetTexture(p,a,b) (p)->lpVtbl->GetTexture(p,a,b)
#define IDirect3DDevice3_SetTexture(p,a,b) (p)->lpVtbl->SetTexture(p,a,b)
#define IDirect3DDevice3_GetTextureStageState(p,a,b,c) (p)->lpVtbl->GetTextureStageState(p,a,b,c)
#define IDirect3DDevice3_SetTextureStageState(p,a,b,c) (p)->lpVtbl->SetTextureStageState(p,a,b,c)
#define IDirect3DDevice3_ValidateDevice(p,a) (p)->lpVtbl->ValidateDevice(p,a)
#else
#define IDirect3DDevice3_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DDevice3_AddRef(p) (p)->AddRef()
#define IDirect3DDevice3_Release(p) (p)->Release()
#define IDirect3DDevice3_GetCaps(p,a,b) (p)->GetCaps(a,b)
#define IDirect3DDevice3_GetStats(p,a) (p)->GetStats(a)
#define IDirect3DDevice3_AddViewport(p,a) (p)->AddViewport(a)
#define IDirect3DDevice3_DeleteViewport(p,a) (p)->DeleteViewport(a)
#define IDirect3DDevice3_NextViewport(p,a,b,c) (p)->NextViewport(a,b,c)
#define IDirect3DDevice3_EnumTextureFormats(p,a,b) (p)->EnumTextureFormats(a,b)
#define IDirect3DDevice3_BeginScene(p) (p)->BeginScene()
#define IDirect3DDevice3_EndScene(p) (p)->EndScene()
#define IDirect3DDevice3_GetDirect3D(p,a) (p)->GetDirect3D(a)
#define IDirect3DDevice3_SetCurrentViewport(p,a) (p)->SetCurrentViewport(a)
#define IDirect3DDevice3_GetCurrentViewport(p,a) (p)->GetCurrentViewport(a)
#define IDirect3DDevice3_SetRenderTarget(p,a,b) (p)->SetRenderTarget(a,b)
#define IDirect3DDevice3_GetRenderTarget(p,a) (p)->GetRenderTarget(a)
#define IDirect3DDevice3_Begin(p,a,b,c) (p)->Begin(a,b,c)
#define IDirect3DDevice3_BeginIndexed(p,a,b,c,d,e) (p)->BeginIndexed(a,b,c,d,e)
#define IDirect3DDevice3_Vertex(p,a) (p)->Vertex(a)
#define IDirect3DDevice3_Index(p,a) (p)->Index(a)
#define IDirect3DDevice3_End(p,a) (p)->End(a)
#define IDirect3DDevice3_GetRenderState(p,a,b) (p)->GetRenderState(a,b)
#define IDirect3DDevice3_SetRenderState(p,a,b) (p)->SetRenderState(a,b)
#define IDirect3DDevice3_GetLightState(p,a,b) (p)->GetLightState(a,b)
#define IDirect3DDevice3_SetLightState(p,a,b) (p)->SetLightState(a,b)
#define IDirect3DDevice3_SetTransform(p,a,b) (p)->SetTransform(a,b)
#define IDirect3DDevice3_GetTransform(p,a,b) (p)->GetTransform(a,b)
#define IDirect3DDevice3_MultiplyTransform(p,a,b) (p)->MultiplyTransform(a,b)
#define IDirect3DDevice3_DrawPrimitive(p,a,b,c,d,e) (p)->DrawPrimitive(a,b,c,d,e)
#define IDirect3DDevice3_DrawIndexedPrimitive(p,a,b,c,d,e,f,g) (p)->DrawIndexedPrimitive(a,b,c,d,e,f,g)
#define IDirect3DDevice3_SetClipStatus(p,a) (p)->SetClipStatus(a)
#define IDirect3DDevice3_GetClipStatus(p,a) (p)->GetClipStatus(a)
#define IDirect3DDevice3_DrawPrimitiveStrided(p,a,b,c,d,e) (p)->DrawPrimitiveStrided(a,b,c,d,e)
#define IDirect3DDevice3_DrawIndexedPrimitiveStrided(p,a,b,c,d,e,f,g) (p)->DrawIndexedPrimitiveStrided(a,b,c,d,e,f,g)
#define IDirect3DDevice3_DrawPrimitiveVB(p,a,b,c,d,e) (p)->DrawPrimitiveVB(a,b,c,d,e)
#define IDirect3DDevice3_DrawIndexedPrimitiveVB(p,a,b,c,d,e) (p)->DrawIndexedPrimitiveVB(a,b,c,d,e)
#define IDirect3DDevice3_ComputeSphereVisibility(p,a,b,c,d,e) (p)->ComputeSphereVisibility(a,b,c,d,e)
#define IDirect3DDevice3_GetTexture(p,a,b) (p)->GetTexture(a,b)
#define IDirect3DDevice3_SetTexture(p,a,b) (p)->SetTexture(a,b)
#define IDirect3DDevice3_GetTextureStageState(p,a,b,c) (p)->GetTextureStageState(a,b,c)
#define IDirect3DDevice3_SetTextureStageState(p,a,b,c) (p)->SetTextureStageState(a,b,c)
#define IDirect3DDevice3_ValidateDevice(p,a) (p)->ValidateDevice(a)
#endif
#endif /* DIRECT3D_VERSION >= 0x0600 */

#if(DIRECT3D_VERSION >= 0x0700)
#undef INTERFACE
#define INTERFACE IDirect3DDevice7

DECLARE_INTERFACE_(IDirect3DDevice7, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DDevice7 methods ***/
    STDMETHOD(GetCaps)(THIS_ LPD3DDEVICEDESC7) PURE;
    STDMETHOD(EnumTextureFormats)(THIS_ LPD3DENUMPIXELFORMATSCALLBACK,LPVOID) PURE;
    STDMETHOD(BeginScene)(THIS) PURE;
    STDMETHOD(EndScene)(THIS) PURE;
    STDMETHOD(GetDirect3D)(THIS_ LPDIRECT3D7*) PURE;
    STDMETHOD(SetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE7,DWORD) PURE;
    STDMETHOD(GetRenderTarget)(THIS_ LPDIRECTDRAWSURFACE7 *) PURE;
    STDMETHOD(Clear)(THIS_ DWORD,LPD3DRECT,DWORD,D3DCOLOR,D3DVALUE,DWORD) PURE;
    STDMETHOD(SetTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(GetTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(SetViewport)(THIS_ LPD3DVIEWPORT7) PURE;
    STDMETHOD(MultiplyTransform)(THIS_ D3DTRANSFORMSTATETYPE,LPD3DMATRIX) PURE;
    STDMETHOD(GetViewport)(THIS_ LPD3DVIEWPORT7) PURE;
    STDMETHOD(SetMaterial)(THIS_ LPD3DMATERIAL7) PURE;
    STDMETHOD(GetMaterial)(THIS_ LPD3DMATERIAL7) PURE;
    STDMETHOD(SetLight)(THIS_ DWORD,LPD3DLIGHT7) PURE;
    STDMETHOD(GetLight)(THIS_ DWORD,LPD3DLIGHT7) PURE;
    STDMETHOD(SetRenderState)(THIS_ D3DRENDERSTATETYPE,DWORD) PURE;
    STDMETHOD(GetRenderState)(THIS_ D3DRENDERSTATETYPE,LPDWORD) PURE;
    STDMETHOD(BeginStateBlock)(THIS) PURE;
    STDMETHOD(EndStateBlock)(THIS_ LPDWORD) PURE;
    STDMETHOD(PreLoad)(THIS_ LPDIRECTDRAWSURFACE7) PURE;
    STDMETHOD(DrawPrimitive)(THIS_ D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitive)(THIS_ D3DPRIMITIVETYPE,DWORD,LPVOID,DWORD,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(SetClipStatus)(THIS_ LPD3DCLIPSTATUS) PURE;
    STDMETHOD(GetClipStatus)(THIS_ LPD3DCLIPSTATUS) PURE;
    STDMETHOD(DrawPrimitiveStrided)(THIS_ D3DPRIMITIVETYPE,DWORD,LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitiveStrided)(THIS_ D3DPRIMITIVETYPE,DWORD,LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(DrawPrimitiveVB)(THIS_ D3DPRIMITIVETYPE,LPDIRECT3DVERTEXBUFFER7,DWORD,DWORD,DWORD) PURE;
    STDMETHOD(DrawIndexedPrimitiveVB)(THIS_ D3DPRIMITIVETYPE,LPDIRECT3DVERTEXBUFFER7,DWORD,DWORD,LPWORD,DWORD,DWORD) PURE;
    STDMETHOD(ComputeSphereVisibility)(THIS_ LPD3DVECTOR,LPD3DVALUE,DWORD,DWORD,LPDWORD) PURE;
    STDMETHOD(GetTexture)(THIS_ DWORD,LPDIRECTDRAWSURFACE7 *) PURE;
    STDMETHOD(SetTexture)(THIS_ DWORD,LPDIRECTDRAWSURFACE7) PURE;
    STDMETHOD(GetTextureStageState)(THIS_ DWORD,D3DTEXTURESTAGESTATETYPE,LPDWORD) PURE;
    STDMETHOD(SetTextureStageState)(THIS_ DWORD,D3DTEXTURESTAGESTATETYPE,DWORD) PURE;
    STDMETHOD(ValidateDevice)(THIS_ LPDWORD) PURE;
    STDMETHOD(ApplyStateBlock)(THIS_ DWORD) PURE;
    STDMETHOD(CaptureStateBlock)(THIS_ DWORD) PURE;
    STDMETHOD(DeleteStateBlock)(THIS_ DWORD) PURE;
    STDMETHOD(CreateStateBlock)(THIS_ D3DSTATEBLOCKTYPE,LPDWORD) PURE;
    STDMETHOD(Load)(THIS_ LPDIRECTDRAWSURFACE7,LPPOINT,LPDIRECTDRAWSURFACE7,LPRECT,DWORD) PURE;
    STDMETHOD(LightEnable)(THIS_ DWORD,BOOL) PURE;
    STDMETHOD(GetLightEnable)(THIS_ DWORD,BOOL*) PURE;
    STDMETHOD(SetClipPlane)(THIS_ DWORD,D3DVALUE*) PURE;
    STDMETHOD(GetClipPlane)(THIS_ DWORD,D3DVALUE*) PURE;
    STDMETHOD(GetInfo)(THIS_ DWORD,LPVOID,DWORD) PURE;
};

typedef struct IDirect3DDevice7 *LPDIRECT3DDEVICE7;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DDevice7_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DDevice7_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DDevice7_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DDevice7_GetCaps(p,a) (p)->lpVtbl->GetCaps(p,a)
#define IDirect3DDevice7_EnumTextureFormats(p,a,b) (p)->lpVtbl->EnumTextureFormats(p,a,b)
#define IDirect3DDevice7_BeginScene(p) (p)->lpVtbl->BeginScene(p)
#define IDirect3DDevice7_EndScene(p) (p)->lpVtbl->EndScene(p)
#define IDirect3DDevice7_GetDirect3D(p,a) (p)->lpVtbl->GetDirect3D(p,a)
#define IDirect3DDevice7_SetRenderTarget(p,a,b) (p)->lpVtbl->SetRenderTarget(p,a,b)
#define IDirect3DDevice7_GetRenderTarget(p,a) (p)->lpVtbl->GetRenderTarget(p,a)
#define IDirect3DDevice7_Clear(p,a,b,c,d,e,f) (p)->lpVtbl->Clear(p,a,b,c,d,e,f)
#define IDirect3DDevice7_SetTransform(p,a,b) (p)->lpVtbl->SetTransform(p,a,b)
#define IDirect3DDevice7_GetTransform(p,a,b) (p)->lpVtbl->GetTransform(p,a,b)
#define IDirect3DDevice7_SetViewport(p,a) (p)->lpVtbl->SetViewport(p,a)
#define IDirect3DDevice7_MultiplyTransform(p,a,b) (p)->lpVtbl->MultiplyTransform(p,a,b)
#define IDirect3DDevice7_GetViewport(p,a) (p)->lpVtbl->GetViewport(p,a)
#define IDirect3DDevice7_SetMaterial(p,a) (p)->lpVtbl->SetMaterial(p,a)
#define IDirect3DDevice7_GetMaterial(p,a) (p)->lpVtbl->GetMaterial(p,a)
#define IDirect3DDevice7_SetLight(p,a,b) (p)->lpVtbl->SetLight(p,a,b)
#define IDirect3DDevice7_GetLight(p,a,b) (p)->lpVtbl->GetLight(p,a,b)
#define IDirect3DDevice7_SetRenderState(p,a,b) (p)->lpVtbl->SetRenderState(p,a,b)
#define IDirect3DDevice7_GetRenderState(p,a,b) (p)->lpVtbl->GetRenderState(p,a,b)
#define IDirect3DDevice7_BeginStateBlock(p) (p)->lpVtbl->BeginStateBlock(p)
#define IDirect3DDevice7_EndStateBlock(p,a) (p)->lpVtbl->EndStateBlock(p,a)
#define IDirect3DDevice7_PreLoad(p,a) (p)->lpVtbl->PreLoad(p,a)
#define IDirect3DDevice7_DrawPrimitive(p,a,b,c,d,e) (p)->lpVtbl->DrawPrimitive(p,a,b,c,d,e)
#define IDirect3DDevice7_DrawIndexedPrimitive(p,a,b,c,d,e,f,g) (p)->lpVtbl->DrawIndexedPrimitive(p,a,b,c,d,e,f,g)
#define IDirect3DDevice7_SetClipStatus(p,a) (p)->lpVtbl->SetClipStatus(p,a)
#define IDirect3DDevice7_GetClipStatus(p,a) (p)->lpVtbl->GetClipStatus(p,a)
#define IDirect3DDevice7_DrawPrimitiveStrided(p,a,b,c,d,e) (p)->lpVtbl->DrawPrimitiveStrided(p,a,b,c,d,e)
#define IDirect3DDevice7_DrawIndexedPrimitiveStrided(p,a,b,c,d,e,f,g) (p)->lpVtbl->DrawIndexedPrimitiveStrided(p,a,b,c,d,e,f,g)
#define IDirect3DDevice7_DrawPrimitiveVB(p,a,b,c,d,e) (p)->lpVtbl->DrawPrimitiveVB(p,a,b,c,d,e)
#define IDirect3DDevice7_DrawIndexedPrimitiveVB(p,a,b,c,d,e,f,g) (p)->lpVtbl->DrawIndexedPrimitiveVB(p,a,b,c,d,e,f,g)
#define IDirect3DDevice7_ComputeSphereVisibility(p,a,b,c,d,e) (p)->lpVtbl->ComputeSphereVisibility(p,a,b,c,d,e)
#define IDirect3DDevice7_GetTexture(p,a,b) (p)->lpVtbl->GetTexture(p,a,b)
#define IDirect3DDevice7_SetTexture(p,a,b) (p)->lpVtbl->SetTexture(p,a,b)
#define IDirect3DDevice7_GetTextureStageState(p,a,b,c) (p)->lpVtbl->GetTextureStageState(p,a,b,c)
#define IDirect3DDevice7_SetTextureStageState(p,a,b,c) (p)->lpVtbl->SetTextureStageState(p,a,b,c)
#define IDirect3DDevice7_ValidateDevice(p,a) (p)->lpVtbl->ValidateDevice(p,a)
#define IDirect3DDevice7_ApplyStateBlock(p,a) (p)->lpVtbl->ApplyStateBlock(p,a)
#define IDirect3DDevice7_CaptureStateBlock(p,a) (p)->lpVtbl->CaptureStateBlock(p,a)
#define IDirect3DDevice7_DeleteStateBlock(p,a) (p)->lpVtbl->DeleteStateBlock(p,a)
#define IDirect3DDevice7_CreateStateBlock(p,a,b) (p)->lpVtbl->CreateStateBlock(p,a,b)
#define IDirect3DDevice7_Load(p,a,b,c,d,e) (p)->lpVtbl->Load(p,a,b,c,d,e)
#define IDirect3DDevice7_LightEnable(p,a,b) (p)->lpVtbl->LightEnable(p,a,b)
#define IDirect3DDevice7_GetLightEnable(p,a,b) (p)->lpVtbl->GetLightEnable(p,a,b)
#define IDirect3DDevice7_SetClipPlane(p,a,b) (p)->lpVtbl->SetClipPlane(p,a,b)
#define IDirect3DDevice7_GetClipPlane(p,a,b) (p)->lpVtbl->GetClipPlane(p,a,b)
#define IDirect3DDevice7_GetInfo(p,a,b,c) (p)->lpVtbl->GetInfo(p,a,b,c)
#else
#define IDirect3DDevice7_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DDevice7_AddRef(p) (p)->AddRef()
#define IDirect3DDevice7_Release(p) (p)->Release()
#define IDirect3DDevice7_GetCaps(p,a) (p)->GetCaps(a)
#define IDirect3DDevice7_EnumTextureFormats(p,a,b) (p)->EnumTextureFormats(a,b)
#define IDirect3DDevice7_BeginScene(p) (p)->BeginScene()
#define IDirect3DDevice7_EndScene(p) (p)->EndScene()
#define IDirect3DDevice7_GetDirect3D(p,a) (p)->GetDirect3D(a)
#define IDirect3DDevice7_SetRenderTarget(p,a,b) (p)->SetRenderTarget(a,b)
#define IDirect3DDevice7_GetRenderTarget(p,a) (p)->GetRenderTarget(a)
#define IDirect3DDevice7_Clear(p,a,b,c,d,e,f) (p)->Clear(a,b,c,d,e,f)
#define IDirect3DDevice7_SetTransform(p,a,b) (p)->SetTransform(a,b)
#define IDirect3DDevice7_GetTransform(p,a,b) (p)->GetTransform(a,b)
#define IDirect3DDevice7_SetViewport(p,a) (p)->SetViewport(a)
#define IDirect3DDevice7_MultiplyTransform(p,a,b) (p)->MultiplyTransform(a,b)
#define IDirect3DDevice7_GetViewport(p,a) (p)->GetViewport(a)
#define IDirect3DDevice7_SetMaterial(p,a) (p)->SetMaterial(a)
#define IDirect3DDevice7_GetMaterial(p,a) (p)->GetMaterial(a)
#define IDirect3DDevice7_SetLight(p,a,b) (p)->SetLight(a,b)
#define IDirect3DDevice7_GetLight(p,a,b) (p)->GetLight(a,b)
#define IDirect3DDevice7_SetRenderState(p,a,b) (p)->SetRenderState(a,b)
#define IDirect3DDevice7_GetRenderState(p,a,b) (p)->GetRenderState(a,b)
#define IDirect3DDevice7_BeginStateBlock(p) (p)->BeginStateBlock()
#define IDirect3DDevice7_EndStateBlock(p,a) (p)->EndStateBlock(a)
#define IDirect3DDevice7_PreLoad(p,a) (p)->PreLoad(a)
#define IDirect3DDevice7_DrawPrimitive(p,a,b,c,d,e) (p)->DrawPrimitive(a,b,c,d,e)
#define IDirect3DDevice7_DrawIndexedPrimitive(p,a,b,c,d,e,f,g) (p)->DrawIndexedPrimitive(a,b,c,d,e,f,g)
#define IDirect3DDevice7_SetClipStatus(p,a) (p)->SetClipStatus(a)
#define IDirect3DDevice7_GetClipStatus(p,a) (p)->GetClipStatus(a)
#define IDirect3DDevice7_DrawPrimitiveStrided(p,a,b,c,d,e) (p)->DrawPrimitiveStrided(a,b,c,d,e)
#define IDirect3DDevice7_DrawIndexedPrimitiveStrided(p,a,b,c,d,e,f,g) (p)->DrawIndexedPrimitiveStrided(a,b,c,d,e,f,g)
#define IDirect3DDevice7_DrawPrimitiveVB(p,a,b,c,d,e) (p)->DrawPrimitiveVB(a,b,c,d,e)
#define IDirect3DDevice7_DrawIndexedPrimitiveVB(p,a,b,c,d,e,f,g) (p)->DrawIndexedPrimitiveVB(a,b,c,d,e,f,g)
#define IDirect3DDevice7_ComputeSphereVisibility(p,a,b,c,d,e) (p)->ComputeSphereVisibility(a,b,c,d,e)
#define IDirect3DDevice7_GetTexture(p,a,b) (p)->GetTexture(a,b)
#define IDirect3DDevice7_SetTexture(p,a,b) (p)->SetTexture(a,b)
#define IDirect3DDevice7_GetTextureStageState(p,a,b,c) (p)->GetTextureStageState(a,b,c)
#define IDirect3DDevice7_SetTextureStageState(p,a,b,c) (p)->SetTextureStageState(a,b,c)
#define IDirect3DDevice7_ValidateDevice(p,a) (p)->ValidateDevice(a)
#define IDirect3DDevice7_ApplyStateBlock(p,a) (p)->ApplyStateBlock(a)
#define IDirect3DDevice7_CaptureStateBlock(p,a) (p)->CaptureStateBlock(a)
#define IDirect3DDevice7_DeleteStateBlock(p,a) (p)->DeleteStateBlock(a)
#define IDirect3DDevice7_CreateStateBlock(p,a,b) (p)->CreateStateBlock(a,b)
#define IDirect3DDevice7_Load(p,a,b,c,d,e) (p)->Load(a,b,c,d,e)
#define IDirect3DDevice7_LightEnable(p,a,b) (p)->LightEnable(a,b)
#define IDirect3DDevice7_GetLightEnable(p,a,b) (p)->GetLightEnable(a,b)
#define IDirect3DDevice7_SetClipPlane(p,a,b) (p)->SetClipPlane(a,b)
#define IDirect3DDevice7_GetClipPlane(p,a,b) (p)->GetClipPlane(a,b)
#define IDirect3DDevice7_GetInfo(p,a,b,c) (p)->GetInfo(a,b,c)
#endif
#endif /* DIRECT3D_VERSION >= 0x0700 */

/*
 * Execute Buffer interface
 */
#undef INTERFACE
#define INTERFACE IDirect3DExecuteBuffer

DECLARE_INTERFACE_(IDirect3DExecuteBuffer, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DExecuteBuffer methods ***/
    STDMETHOD(Initialize)(THIS_ LPDIRECT3DDEVICE,LPD3DEXECUTEBUFFERDESC) PURE;
    STDMETHOD(Lock)(THIS_ LPD3DEXECUTEBUFFERDESC) PURE;
    STDMETHOD(Unlock)(THIS) PURE;
    STDMETHOD(SetExecuteData)(THIS_ LPD3DEXECUTEDATA) PURE;
    STDMETHOD(GetExecuteData)(THIS_ LPD3DEXECUTEDATA) PURE;
    STDMETHOD(Validate)(THIS_ LPDWORD,LPD3DVALIDATECALLBACK,LPVOID,DWORD) PURE;
    STDMETHOD(Optimize)(THIS_ DWORD) PURE;
};

typedef struct IDirect3DExecuteBuffer *LPDIRECT3DEXECUTEBUFFER;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DExecuteBuffer_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DExecuteBuffer_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DExecuteBuffer_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DExecuteBuffer_Initialize(p,a,b) (p)->lpVtbl->Initialize(p,a,b)
#define IDirect3DExecuteBuffer_Lock(p,a) (p)->lpVtbl->Lock(p,a)
#define IDirect3DExecuteBuffer_Unlock(p) (p)->lpVtbl->Unlock(p)
#define IDirect3DExecuteBuffer_SetExecuteData(p,a) (p)->lpVtbl->SetExecuteData(p,a)
#define IDirect3DExecuteBuffer_GetExecuteData(p,a) (p)->lpVtbl->GetExecuteData(p,a)
#define IDirect3DExecuteBuffer_Validate(p,a,b,c,d) (p)->lpVtbl->Validate(p,a,b,c,d)
#define IDirect3DExecuteBuffer_Optimize(p,a) (p)->lpVtbl->Optimize(p,a)
#else
#define IDirect3DExecuteBuffer_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DExecuteBuffer_AddRef(p) (p)->AddRef()
#define IDirect3DExecuteBuffer_Release(p) (p)->Release()
#define IDirect3DExecuteBuffer_Initialize(p,a,b) (p)->Initialize(a,b)
#define IDirect3DExecuteBuffer_Lock(p,a) (p)->Lock(a)
#define IDirect3DExecuteBuffer_Unlock(p) (p)->Unlock()
#define IDirect3DExecuteBuffer_SetExecuteData(p,a) (p)->SetExecuteData(a)
#define IDirect3DExecuteBuffer_GetExecuteData(p,a) (p)->GetExecuteData(a)
#define IDirect3DExecuteBuffer_Validate(p,a,b,c,d) (p)->Validate(a,b,c,d)
#define IDirect3DExecuteBuffer_Optimize(p,a) (p)->Optimize(a)
#endif

/*
 * Light interfaces
 */
#undef INTERFACE
#define INTERFACE IDirect3DLight

DECLARE_INTERFACE_(IDirect3DLight, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DLight methods ***/
    STDMETHOD(Initialize)(THIS_ LPDIRECT3D) PURE;
    STDMETHOD(SetLight)(THIS_ LPD3DLIGHT) PURE;
    STDMETHOD(GetLight)(THIS_ LPD3DLIGHT) PURE;
};

typedef struct IDirect3DLight *LPDIRECT3DLIGHT;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DLight_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DLight_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DLight_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DLight_Initialize(p,a) (p)->lpVtbl->Initialize(p,a)
#define IDirect3DLight_SetLight(p,a) (p)->lpVtbl->SetLight(p,a)
#define IDirect3DLight_GetLight(p,a) (p)->lpVtbl->GetLight(p,a)
#else
#define IDirect3DLight_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DLight_AddRef(p) (p)->AddRef()
#define IDirect3DLight_Release(p) (p)->Release()
#define IDirect3DLight_Initialize(p,a) (p)->Initialize(a)
#define IDirect3DLight_SetLight(p,a) (p)->SetLight(a)
#define IDirect3DLight_GetLight(p,a) (p)->GetLight(a)
#endif

/*
 * Material interfaces
 */
#undef INTERFACE
#define INTERFACE IDirect3DMaterial

DECLARE_INTERFACE_(IDirect3DMaterial, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DMaterial methods ***/
    STDMETHOD(Initialize)(THIS_ LPDIRECT3D) PURE;
    STDMETHOD(SetMaterial)(THIS_ LPD3DMATERIAL) PURE;
    STDMETHOD(GetMaterial)(THIS_ LPD3DMATERIAL) PURE;
    STDMETHOD(GetHandle)(THIS_ LPDIRECT3DDEVICE,LPD3DMATERIALHANDLE) PURE;
    STDMETHOD(Reserve)(THIS) PURE;
    STDMETHOD(Unreserve)(THIS) PURE;
};

typedef struct IDirect3DMaterial *LPDIRECT3DMATERIAL;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DMaterial_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DMaterial_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DMaterial_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DMaterial_Initialize(p,a) (p)->lpVtbl->Initialize(p,a)
#define IDirect3DMaterial_SetMaterial(p,a) (p)->lpVtbl->SetMaterial(p,a)
#define IDirect3DMaterial_GetMaterial(p,a) (p)->lpVtbl->GetMaterial(p,a)
#define IDirect3DMaterial_GetHandle(p,a,b) (p)->lpVtbl->GetHandle(p,a,b)
#define IDirect3DMaterial_Reserve(p) (p)->lpVtbl->Reserve(p)
#define IDirect3DMaterial_Unreserve(p) (p)->lpVtbl->Unreserve(p)
#else
#define IDirect3DMaterial_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DMaterial_AddRef(p) (p)->AddRef()
#define IDirect3DMaterial_Release(p) (p)->Release()
#define IDirect3DMaterial_Initialize(p,a) (p)->Initialize(a)
#define IDirect3DMaterial_SetMaterial(p,a) (p)->SetMaterial(a)
#define IDirect3DMaterial_GetMaterial(p,a) (p)->GetMaterial(a)
#define IDirect3DMaterial_GetHandle(p,a,b) (p)->GetHandle(a,b)
#define IDirect3DMaterial_Reserve(p) (p)->Reserve()
#define IDirect3DMaterial_Unreserve(p) (p)->Unreserve()
#endif

#if(DIRECT3D_VERSION >= 0x0500)
#undef INTERFACE
#define INTERFACE IDirect3DMaterial2

DECLARE_INTERFACE_(IDirect3DMaterial2, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DMaterial2 methods ***/
    STDMETHOD(SetMaterial)(THIS_ LPD3DMATERIAL) PURE;
    STDMETHOD(GetMaterial)(THIS_ LPD3DMATERIAL) PURE;
    STDMETHOD(GetHandle)(THIS_ LPDIRECT3DDEVICE2,LPD3DMATERIALHANDLE) PURE;
};

typedef struct IDirect3DMaterial2 *LPDIRECT3DMATERIAL2;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DMaterial2_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DMaterial2_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DMaterial2_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DMaterial2_SetMaterial(p,a) (p)->lpVtbl->SetMaterial(p,a)
#define IDirect3DMaterial2_GetMaterial(p,a) (p)->lpVtbl->GetMaterial(p,a)
#define IDirect3DMaterial2_GetHandle(p,a,b) (p)->lpVtbl->GetHandle(p,a,b)
#else
#define IDirect3DMaterial2_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DMaterial2_AddRef(p) (p)->AddRef()
#define IDirect3DMaterial2_Release(p) (p)->Release()
#define IDirect3DMaterial2_SetMaterial(p,a) (p)->SetMaterial(a)
#define IDirect3DMaterial2_GetMaterial(p,a) (p)->GetMaterial(a)
#define IDirect3DMaterial2_GetHandle(p,a,b) (p)->GetHandle(a,b)
#endif
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)
#undef INTERFACE
#define INTERFACE IDirect3DMaterial3

DECLARE_INTERFACE_(IDirect3DMaterial3, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DMaterial3 methods ***/
    STDMETHOD(SetMaterial)(THIS_ LPD3DMATERIAL) PURE;
    STDMETHOD(GetMaterial)(THIS_ LPD3DMATERIAL) PURE;
    STDMETHOD(GetHandle)(THIS_ LPDIRECT3DDEVICE3,LPD3DMATERIALHANDLE) PURE;
};

typedef struct IDirect3DMaterial3 *LPDIRECT3DMATERIAL3;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DMaterial3_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DMaterial3_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DMaterial3_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DMaterial3_SetMaterial(p,a) (p)->lpVtbl->SetMaterial(p,a)
#define IDirect3DMaterial3_GetMaterial(p,a) (p)->lpVtbl->GetMaterial(p,a)
#define IDirect3DMaterial3_GetHandle(p,a,b) (p)->lpVtbl->GetHandle(p,a,b)
#else
#define IDirect3DMaterial3_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DMaterial3_AddRef(p) (p)->AddRef()
#define IDirect3DMaterial3_Release(p) (p)->Release()
#define IDirect3DMaterial3_SetMaterial(p,a) (p)->SetMaterial(a)
#define IDirect3DMaterial3_GetMaterial(p,a) (p)->GetMaterial(a)
#define IDirect3DMaterial3_GetHandle(p,a,b) (p)->GetHandle(a,b)
#endif
#endif /* DIRECT3D_VERSION >= 0x0600 */

/*
 * Texture interfaces
 */
#undef INTERFACE
#define INTERFACE IDirect3DTexture

DECLARE_INTERFACE_(IDirect3DTexture, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DTexture methods ***/
    STDMETHOD(Initialize)(THIS_ LPDIRECT3DDEVICE,LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(GetHandle)(THIS_ LPDIRECT3DDEVICE,LPD3DTEXTUREHANDLE) PURE;
    STDMETHOD(PaletteChanged)(THIS_ DWORD,DWORD) PURE;
    STDMETHOD(Load)(THIS_ LPDIRECT3DTEXTURE) PURE;
    STDMETHOD(Unload)(THIS) PURE;
};

typedef struct IDirect3DTexture *LPDIRECT3DTEXTURE;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DTexture_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DTexture_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DTexture_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DTexture_Initialize(p,a,b) (p)->lpVtbl->Initialize(p,a,b)
#define IDirect3DTexture_GetHandle(p,a,b) (p)->lpVtbl->GetHandle(p,a,b)
#define IDirect3DTexture_PaletteChanged(p,a,b) (p)->lpVtbl->PaletteChanged(p,a,b)
#define IDirect3DTexture_Load(p,a) (p)->lpVtbl->Load(p,a)
#define IDirect3DTexture_Unload(p) (p)->lpVtbl->Unload(p)
#else
#define IDirect3DTexture_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DTexture_AddRef(p) (p)->AddRef()
#define IDirect3DTexture_Release(p) (p)->Release()
#define IDirect3DTexture_Initialize(p,a,b) (p)->Initialize(a,b)
#define IDirect3DTexture_GetHandle(p,a,b) (p)->GetHandle(a,b)
#define IDirect3DTexture_PaletteChanged(p,a,b) (p)->PaletteChanged(a,b)
#define IDirect3DTexture_Load(p,a) (p)->Load(a)
#define IDirect3DTexture_Unload(p) (p)->Unload()
#endif

#if(DIRECT3D_VERSION >= 0x0500)
#undef INTERFACE
#define INTERFACE IDirect3DTexture2

DECLARE_INTERFACE_(IDirect3DTexture2, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DTexture2 methods ***/
    STDMETHOD(GetHandle)(THIS_ LPDIRECT3DDEVICE2,LPD3DTEXTUREHANDLE) PURE;
    STDMETHOD(PaletteChanged)(THIS_ DWORD,DWORD) PURE;
    STDMETHOD(Load)(THIS_ LPDIRECT3DTEXTURE2) PURE;
};

typedef struct IDirect3DTexture2 *LPDIRECT3DTEXTURE2;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DTexture2_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DTexture2_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DTexture2_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DTexture2_GetHandle(p,a,b) (p)->lpVtbl->GetHandle(p,a,b)
#define IDirect3DTexture2_PaletteChanged(p,a,b) (p)->lpVtbl->PaletteChanged(p,a,b)
#define IDirect3DTexture2_Load(p,a) (p)->lpVtbl->Load(p,a)
#else
#define IDirect3DTexture2_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DTexture2_AddRef(p) (p)->AddRef()
#define IDirect3DTexture2_Release(p) (p)->Release()
#define IDirect3DTexture2_GetHandle(p,a,b) (p)->GetHandle(a,b)
#define IDirect3DTexture2_PaletteChanged(p,a,b) (p)->PaletteChanged(a,b)
#define IDirect3DTexture2_Load(p,a) (p)->Load(a)
#endif
#endif /* DIRECT3D_VERSION >= 0x0500 */

/*
 * Viewport interfaces
 */
#undef INTERFACE
#define INTERFACE IDirect3DViewport

DECLARE_INTERFACE_(IDirect3DViewport, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DViewport methods ***/
    STDMETHOD(Initialize)(THIS_ LPDIRECT3D) PURE;
    STDMETHOD(GetViewport)(THIS_ LPD3DVIEWPORT) PURE;
    STDMETHOD(SetViewport)(THIS_ LPD3DVIEWPORT) PURE;
    STDMETHOD(TransformVertices)(THIS_ DWORD,LPD3DTRANSFORMDATA,DWORD,LPDWORD) PURE;
    STDMETHOD(LightElements)(THIS_ DWORD,LPD3DLIGHTDATA) PURE;
    STDMETHOD(SetBackground)(THIS_ D3DMATERIALHANDLE) PURE;
    STDMETHOD(GetBackground)(THIS_ LPD3DMATERIALHANDLE,LPBOOL) PURE;
    STDMETHOD(SetBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(GetBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE*,LPBOOL) PURE;
    STDMETHOD(Clear)(THIS_ DWORD,LPD3DRECT,DWORD) PURE;
    STDMETHOD(AddLight)(THIS_ LPDIRECT3DLIGHT) PURE;
    STDMETHOD(DeleteLight)(THIS_ LPDIRECT3DLIGHT) PURE;
    STDMETHOD(NextLight)(THIS_ LPDIRECT3DLIGHT,LPDIRECT3DLIGHT*,DWORD) PURE;
};

typedef struct IDirect3DViewport *LPDIRECT3DVIEWPORT;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DViewport_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DViewport_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DViewport_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DViewport_Initialize(p,a) (p)->lpVtbl->Initialize(p,a)
#define IDirect3DViewport_GetViewport(p,a) (p)->lpVtbl->GetViewport(p,a)
#define IDirect3DViewport_SetViewport(p,a) (p)->lpVtbl->SetViewport(p,a)
#define IDirect3DViewport_TransformVertices(p,a,b,c,d) (p)->lpVtbl->TransformVertices(p,a,b,c,d)
#define IDirect3DViewport_LightElements(p,a,b) (p)->lpVtbl->LightElements(p,a,b)
#define IDirect3DViewport_SetBackground(p,a) (p)->lpVtbl->SetBackground(p,a)
#define IDirect3DViewport_GetBackground(p,a,b) (p)->lpVtbl->GetBackground(p,a,b)
#define IDirect3DViewport_SetBackgroundDepth(p,a) (p)->lpVtbl->SetBackgroundDepth(p,a)
#define IDirect3DViewport_GetBackgroundDepth(p,a,b) (p)->lpVtbl->GetBackgroundDepth(p,a,b)
#define IDirect3DViewport_Clear(p,a,b,c) (p)->lpVtbl->Clear(p,a,b,c)
#define IDirect3DViewport_AddLight(p,a) (p)->lpVtbl->AddLight(p,a)
#define IDirect3DViewport_DeleteLight(p,a) (p)->lpVtbl->DeleteLight(p,a)
#define IDirect3DViewport_NextLight(p,a,b,c) (p)->lpVtbl->NextLight(p,a,b,c)
#else
#define IDirect3DViewport_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DViewport_AddRef(p) (p)->AddRef()
#define IDirect3DViewport_Release(p) (p)->Release()
#define IDirect3DViewport_Initialize(p,a) (p)->Initialize(a)
#define IDirect3DViewport_GetViewport(p,a) (p)->GetViewport(a)
#define IDirect3DViewport_SetViewport(p,a) (p)->SetViewport(a)
#define IDirect3DViewport_TransformVertices(p,a,b,c,d) (p)->TransformVertices(a,b,c,d)
#define IDirect3DViewport_LightElements(p,a,b) (p)->LightElements(a,b)
#define IDirect3DViewport_SetBackground(p,a) (p)->SetBackground(a)
#define IDirect3DViewport_GetBackground(p,a,b) (p)->GetBackground(a,b)
#define IDirect3DViewport_SetBackgroundDepth(p,a) (p)->SetBackgroundDepth(a)
#define IDirect3DViewport_GetBackgroundDepth(p,a,b) (p)->GetBackgroundDepth(a,b)
#define IDirect3DViewport_Clear(p,a,b,c) (p)->Clear(a,b,c)
#define IDirect3DViewport_AddLight(p,a) (p)->AddLight(a)
#define IDirect3DViewport_DeleteLight(p,a) (p)->DeleteLight(a)
#define IDirect3DViewport_NextLight(p,a,b,c) (p)->NextLight(a,b,c)
#endif

#if(DIRECT3D_VERSION >= 0x0500)
#undef INTERFACE
#define INTERFACE IDirect3DViewport2

DECLARE_INTERFACE_(IDirect3DViewport2, IDirect3DViewport)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DViewport methods ***/
    STDMETHOD(Initialize)(THIS_ LPDIRECT3D) PURE;
    STDMETHOD(GetViewport)(THIS_ LPD3DVIEWPORT) PURE;
    STDMETHOD(SetViewport)(THIS_ LPD3DVIEWPORT) PURE;
    STDMETHOD(TransformVertices)(THIS_ DWORD,LPD3DTRANSFORMDATA,DWORD,LPDWORD) PURE;
    STDMETHOD(LightElements)(THIS_ DWORD,LPD3DLIGHTDATA) PURE;
    STDMETHOD(SetBackground)(THIS_ D3DMATERIALHANDLE) PURE;
    STDMETHOD(GetBackground)(THIS_ LPD3DMATERIALHANDLE,LPBOOL) PURE;
    STDMETHOD(SetBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(GetBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE*,LPBOOL) PURE;
    STDMETHOD(Clear)(THIS_ DWORD,LPD3DRECT,DWORD) PURE;
    STDMETHOD(AddLight)(THIS_ LPDIRECT3DLIGHT) PURE;
    STDMETHOD(DeleteLight)(THIS_ LPDIRECT3DLIGHT) PURE;
    STDMETHOD(NextLight)(THIS_ LPDIRECT3DLIGHT,LPDIRECT3DLIGHT*,DWORD) PURE;
    STDMETHOD(GetViewport2)(THIS_ LPD3DVIEWPORT2) PURE;
    STDMETHOD(SetViewport2)(THIS_ LPD3DVIEWPORT2) PURE;
};

typedef struct IDirect3DViewport2 *LPDIRECT3DVIEWPORT2;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DViewport2_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DViewport2_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DViewport2_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DViewport2_Initialize(p,a) (p)->lpVtbl->Initialize(p,a)
#define IDirect3DViewport2_GetViewport(p,a) (p)->lpVtbl->GetViewport(p,a)
#define IDirect3DViewport2_SetViewport(p,a) (p)->lpVtbl->SetViewport(p,a)
#define IDirect3DViewport2_TransformVertices(p,a,b,c,d) (p)->lpVtbl->TransformVertices(p,a,b,c,d)
#define IDirect3DViewport2_LightElements(p,a,b) (p)->lpVtbl->LightElements(p,a,b)
#define IDirect3DViewport2_SetBackground(p,a) (p)->lpVtbl->SetBackground(p,a)
#define IDirect3DViewport2_GetBackground(p,a,b) (p)->lpVtbl->GetBackground(p,a,b)
#define IDirect3DViewport2_SetBackgroundDepth(p,a) (p)->lpVtbl->SetBackgroundDepth(p,a)
#define IDirect3DViewport2_GetBackgroundDepth(p,a,b) (p)->lpVtbl->GetBackgroundDepth(p,a,b)
#define IDirect3DViewport2_Clear(p,a,b,c) (p)->lpVtbl->Clear(p,a,b,c)
#define IDirect3DViewport2_AddLight(p,a) (p)->lpVtbl->AddLight(p,a)
#define IDirect3DViewport2_DeleteLight(p,a) (p)->lpVtbl->DeleteLight(p,a)
#define IDirect3DViewport2_NextLight(p,a,b,c) (p)->lpVtbl->NextLight(p,a,b,c)
#define IDirect3DViewport2_GetViewport2(p,a) (p)->lpVtbl->GetViewport2(p,a)
#define IDirect3DViewport2_SetViewport2(p,a) (p)->lpVtbl->SetViewport2(p,a)
#else
#define IDirect3DViewport2_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DViewport2_AddRef(p) (p)->AddRef()
#define IDirect3DViewport2_Release(p) (p)->Release()
#define IDirect3DViewport2_Initialize(p,a) (p)->Initialize(a)
#define IDirect3DViewport2_GetViewport(p,a) (p)->GetViewport(a)
#define IDirect3DViewport2_SetViewport(p,a) (p)->SetViewport(a)
#define IDirect3DViewport2_TransformVertices(p,a,b,c,d) (p)->TransformVertices(a,b,c,d)
#define IDirect3DViewport2_LightElements(p,a,b) (p)->LightElements(a,b)
#define IDirect3DViewport2_SetBackground(p,a) (p)->SetBackground(a)
#define IDirect3DViewport2_GetBackground(p,a,b) (p)->GetBackground(a,b)
#define IDirect3DViewport2_SetBackgroundDepth(p,a) (p)->SetBackgroundDepth(a)
#define IDirect3DViewport2_GetBackgroundDepth(p,a,b) (p)->GetBackgroundDepth(a,b)
#define IDirect3DViewport2_Clear(p,a,b,c) (p)->Clear(a,b,c)
#define IDirect3DViewport2_AddLight(p,a) (p)->AddLight(a)
#define IDirect3DViewport2_DeleteLight(p,a) (p)->DeleteLight(a)
#define IDirect3DViewport2_NextLight(p,a,b,c) (p)->NextLight(a,b,c)
#define IDirect3DViewport2_GetViewport2(p,a) (p)->GetViewport2(a)
#define IDirect3DViewport2_SetViewport2(p,a) (p)->SetViewport2(a)
#endif
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)

#undef INTERFACE
#define INTERFACE IDirect3DViewport3

DECLARE_INTERFACE_(IDirect3DViewport3, IDirect3DViewport2)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DViewport2 methods ***/
    STDMETHOD(Initialize)(THIS_ LPDIRECT3D) PURE;
    STDMETHOD(GetViewport)(THIS_ LPD3DVIEWPORT) PURE;
    STDMETHOD(SetViewport)(THIS_ LPD3DVIEWPORT) PURE;
    STDMETHOD(TransformVertices)(THIS_ DWORD,LPD3DTRANSFORMDATA,DWORD,LPDWORD) PURE;
    STDMETHOD(LightElements)(THIS_ DWORD,LPD3DLIGHTDATA) PURE;
    STDMETHOD(SetBackground)(THIS_ D3DMATERIALHANDLE) PURE;
    STDMETHOD(GetBackground)(THIS_ LPD3DMATERIALHANDLE,LPBOOL) PURE;
    STDMETHOD(SetBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(GetBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE*,LPBOOL) PURE;
    STDMETHOD(Clear)(THIS_ DWORD,LPD3DRECT,DWORD) PURE;
    STDMETHOD(AddLight)(THIS_ LPDIRECT3DLIGHT) PURE;
    STDMETHOD(DeleteLight)(THIS_ LPDIRECT3DLIGHT) PURE;
    STDMETHOD(NextLight)(THIS_ LPDIRECT3DLIGHT,LPDIRECT3DLIGHT*,DWORD) PURE;
    STDMETHOD(GetViewport2)(THIS_ LPD3DVIEWPORT2) PURE;
    STDMETHOD(SetViewport2)(THIS_ LPD3DVIEWPORT2) PURE;
    STDMETHOD(SetBackgroundDepth2)(THIS_ LPDIRECTDRAWSURFACE4) PURE;
    STDMETHOD(GetBackgroundDepth2)(THIS_ LPDIRECTDRAWSURFACE4*,LPBOOL) PURE;
    STDMETHOD(Clear2)(THIS_ DWORD,LPD3DRECT,DWORD,D3DCOLOR,D3DVALUE,DWORD) PURE;
};

typedef struct IDirect3DViewport3 *LPDIRECT3DVIEWPORT3;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DViewport3_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DViewport3_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DViewport3_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DViewport3_Initialize(p,a) (p)->lpVtbl->Initialize(p,a)
#define IDirect3DViewport3_GetViewport(p,a) (p)->lpVtbl->GetViewport(p,a)
#define IDirect3DViewport3_SetViewport(p,a) (p)->lpVtbl->SetViewport(p,a)
#define IDirect3DViewport3_TransformVertices(p,a,b,c,d) (p)->lpVtbl->TransformVertices(p,a,b,c,d)
#define IDirect3DViewport3_LightElements(p,a,b) (p)->lpVtbl->LightElements(p,a,b)
#define IDirect3DViewport3_SetBackground(p,a) (p)->lpVtbl->SetBackground(p,a)
#define IDirect3DViewport3_GetBackground(p,a,b) (p)->lpVtbl->GetBackground(p,a,b)
#define IDirect3DViewport3_SetBackgroundDepth(p,a) (p)->lpVtbl->SetBackgroundDepth(p,a)
#define IDirect3DViewport3_GetBackgroundDepth(p,a,b) (p)->lpVtbl->GetBackgroundDepth(p,a,b)
#define IDirect3DViewport3_Clear(p,a,b,c) (p)->lpVtbl->Clear(p,a,b,c)
#define IDirect3DViewport3_AddLight(p,a) (p)->lpVtbl->AddLight(p,a)
#define IDirect3DViewport3_DeleteLight(p,a) (p)->lpVtbl->DeleteLight(p,a)
#define IDirect3DViewport3_NextLight(p,a,b,c) (p)->lpVtbl->NextLight(p,a,b,c)
#define IDirect3DViewport3_GetViewport2(p,a) (p)->lpVtbl->GetViewport2(p,a)
#define IDirect3DViewport3_SetViewport2(p,a) (p)->lpVtbl->SetViewport2(p,a)
#define IDirect3DViewport3_SetBackgroundDepth2(p,a) (p)->lpVtbl->SetBackgroundDepth2(p,a)
#define IDirect3DViewport3_GetBackgroundDepth2(p,a,b) (p)->lpVtbl->GetBackgroundDepth2(p,a,b)
#define IDirect3DViewport3_Clear2(p,a,b,c,d,e,f) (p)->lpVtbl->Clear2(p,a,b,c,d,e,f)
#else
#define IDirect3DViewport3_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DViewport3_AddRef(p) (p)->AddRef()
#define IDirect3DViewport3_Release(p) (p)->Release()
#define IDirect3DViewport3_Initialize(p,a) (p)->Initialize(a)
#define IDirect3DViewport3_GetViewport(p,a) (p)->GetViewport(a)
#define IDirect3DViewport3_SetViewport(p,a) (p)->SetViewport(a)
#define IDirect3DViewport3_TransformVertices(p,a,b,c,d) (p)->TransformVertices(a,b,c,d)
#define IDirect3DViewport3_LightElements(p,a,b) (p)->LightElements(a,b)
#define IDirect3DViewport3_SetBackground(p,a) (p)->SetBackground(a)
#define IDirect3DViewport3_GetBackground(p,a,b) (p)->GetBackground(a,b)
#define IDirect3DViewport3_SetBackgroundDepth(p,a) (p)->SetBackgroundDepth(a)
#define IDirect3DViewport3_GetBackgroundDepth(p,a,b) (p)->GetBackgroundDepth(a,b)
#define IDirect3DViewport3_Clear(p,a,b,c) (p)->Clear(a,b,c)
#define IDirect3DViewport3_AddLight(p,a) (p)->AddLight(a)
#define IDirect3DViewport3_DeleteLight(p,a) (p)->DeleteLight(a)
#define IDirect3DViewport3_NextLight(p,a,b,c) (p)->NextLight(a,b,c)
#define IDirect3DViewport3_GetViewport2(p,a) (p)->GetViewport2(a)
#define IDirect3DViewport3_SetViewport2(p,a) (p)->SetViewport2(a)
#define IDirect3DViewport3_SetBackgroundDepth2(p,a) (p)->SetBackgroundDepth2(a)
#define IDirect3DViewport3_GetBackgroundDepth2(p,a,b) (p)->GetBackgroundDepth2(a,b)
#define IDirect3DViewport3_Clear2(p,a,b,c,d,e,f) (p)->Clear2(a,b,c,d,e,f)
#endif
#endif /* DIRECT3D_VERSION >= 0x0600 */

#if(DIRECT3D_VERSION >= 0x0600)
#undef INTERFACE
#define INTERFACE IDirect3DVertexBuffer

DECLARE_INTERFACE_(IDirect3DVertexBuffer, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DVertexBuffer methods ***/
    STDMETHOD(Lock)(THIS_ DWORD,LPVOID*,LPDWORD) PURE;
    STDMETHOD(Unlock)(THIS) PURE;
    STDMETHOD(ProcessVertices)(THIS_ DWORD,DWORD,DWORD,LPDIRECT3DVERTEXBUFFER,DWORD,LPDIRECT3DDEVICE3,DWORD) PURE;
    STDMETHOD(GetVertexBufferDesc)(THIS_ LPD3DVERTEXBUFFERDESC) PURE;
    STDMETHOD(Optimize)(THIS_ LPDIRECT3DDEVICE3,DWORD) PURE;
};

typedef struct IDirect3DVertexBuffer *LPDIRECT3DVERTEXBUFFER;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DVertexBuffer_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DVertexBuffer_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DVertexBuffer_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DVertexBuffer_Lock(p,a,b,c) (p)->lpVtbl->Lock(p,a,b,c)
#define IDirect3DVertexBuffer_Unlock(p) (p)->lpVtbl->Unlock(p)
#define IDirect3DVertexBuffer_ProcessVertices(p,a,b,c,d,e,f,g) (p)->lpVtbl->ProcessVertices(p,a,b,c,d,e,f,g)
#define IDirect3DVertexBuffer_GetVertexBufferDesc(p,a) (p)->lpVtbl->GetVertexBufferDesc(p,a)
#define IDirect3DVertexBuffer_Optimize(p,a,b) (p)->lpVtbl->Optimize(p,a,b)
#else
#define IDirect3DVertexBuffer_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DVertexBuffer_AddRef(p) (p)->AddRef()
#define IDirect3DVertexBuffer_Release(p) (p)->Release()
#define IDirect3DVertexBuffer_Lock(p,a,b,c) (p)->Lock(a,b,c)
#define IDirect3DVertexBuffer_Unlock(p) (p)->Unlock()
#define IDirect3DVertexBuffer_ProcessVertices(p,a,b,c,d,e,f,g) (p)->ProcessVertices(a,b,c,d,e,f,g)
#define IDirect3DVertexBuffer_GetVertexBufferDesc(p,a) (p)->GetVertexBufferDesc(a)
#define IDirect3DVertexBuffer_Optimize(p,a,b) (p)->Optimize(a,b)
#endif
#endif /* DIRECT3D_VERSION >= 0x0600 */

#if(DIRECT3D_VERSION >= 0x0700)
#undef INTERFACE
#define INTERFACE IDirect3DVertexBuffer7

DECLARE_INTERFACE_(IDirect3DVertexBuffer7, IUnknown)
{
    /*** IUnknown methods ***/
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    /*** IDirect3DVertexBuffer7 methods ***/
    STDMETHOD(Lock)(THIS_ DWORD,LPVOID*,LPDWORD) PURE;
    STDMETHOD(Unlock)(THIS) PURE;
    STDMETHOD(ProcessVertices)(THIS_ DWORD,DWORD,DWORD,LPDIRECT3DVERTEXBUFFER7,DWORD,LPDIRECT3DDEVICE7,DWORD) PURE;
    STDMETHOD(GetVertexBufferDesc)(THIS_ LPD3DVERTEXBUFFERDESC) PURE;
    STDMETHOD(Optimize)(THIS_ LPDIRECT3DDEVICE7,DWORD) PURE;
    STDMETHOD(ProcessVerticesStrided)(THIS_ DWORD,DWORD,DWORD,LPD3DDRAWPRIMITIVESTRIDEDDATA,DWORD,LPDIRECT3DDEVICE7,DWORD) PURE;
};

typedef struct IDirect3DVertexBuffer7 *LPDIRECT3DVERTEXBUFFER7;

#if !defined(__cplusplus) || defined(CINTERFACE)
#define IDirect3DVertexBuffer7_QueryInterface(p,a,b) (p)->lpVtbl->QueryInterface(p,a,b)
#define IDirect3DVertexBuffer7_AddRef(p) (p)->lpVtbl->AddRef(p)
#define IDirect3DVertexBuffer7_Release(p) (p)->lpVtbl->Release(p)
#define IDirect3DVertexBuffer7_Lock(p,a,b,c) (p)->lpVtbl->Lock(p,a,b,c)
#define IDirect3DVertexBuffer7_Unlock(p) (p)->lpVtbl->Unlock(p)
#define IDirect3DVertexBuffer7_ProcessVertices(p,a,b,c,d,e,f,g) (p)->lpVtbl->ProcessVertices(p,a,b,c,d,e,f,g)
#define IDirect3DVertexBuffer7_GetVertexBufferDesc(p,a) (p)->lpVtbl->GetVertexBufferDesc(p,a)
#define IDirect3DVertexBuffer7_Optimize(p,a,b) (p)->lpVtbl->Optimize(p,a,b)
#define IDirect3DVertexBuffer7_ProcessVerticesStrided(p,a,b,c,d,e,f,g) (p)->lpVtbl->ProcessVerticesStrided(p,a,b,c,d,e,f,g)
#else
#define IDirect3DVertexBuffer7_QueryInterface(p,a,b) (p)->QueryInterface(a,b)
#define IDirect3DVertexBuffer7_AddRef(p) (p)->AddRef()
#define IDirect3DVertexBuffer7_Release(p) (p)->Release()
#define IDirect3DVertexBuffer7_Lock(p,a,b,c) (p)->Lock(a,b,c)
#define IDirect3DVertexBuffer7_Unlock(p) (p)->Unlock()
#define IDirect3DVertexBuffer7_ProcessVertices(p,a,b,c,d,e,f,g) (p)->ProcessVertices(a,b,c,d,e,f,g)
#define IDirect3DVertexBuffer7_GetVertexBufferDesc(p,a) (p)->GetVertexBufferDesc(a)
#define IDirect3DVertexBuffer7_Optimize(p,a,b) (p)->Optimize(a,b)
#define IDirect3DVertexBuffer7_ProcessVerticesStrided(p,a,b,c,d,e,f,g) (p)->ProcessVerticesStrided(a,b,c,d,e,f,g)
#endif
#endif /* DIRECT3D_VERSION >= 0x0700 */

#if(DIRECT3D_VERSION >= 0x0500)
/****************************************************************************
 *
 * Flags for IDirect3DDevice::NextViewport
 *
 ****************************************************************************/

/*
 * Return the next viewport
 */
#define D3DNEXT_NEXT    0x00000001l

/*
 * Return the first viewport
 */
#define D3DNEXT_HEAD    0x00000002l

/*
 * Return the last viewport
 */
#define D3DNEXT_TAIL    0x00000004l


/****************************************************************************
 *
 * Flags for DrawPrimitive/DrawIndexedPrimitive
 *   Also valid for Begin/BeginIndexed
 *   Also valid for VertexBuffer::CreateVertexBuffer
 ****************************************************************************/

/*
 * Wait until the device is ready to draw the primitive
 * This will cause DP to not return DDERR_WASSTILLDRAWING
 */
#define D3DDP_WAIT                  0x00000001l
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if (DIRECT3D_VERSION == 0x0500)
/*
 * Hint that it is acceptable to render the primitive out of order.
 */
#define D3DDP_OUTOFORDER            0x00000002l
#endif


#if(DIRECT3D_VERSION >= 0x0500)
/*
 * Hint that the primitives have been clipped by the application.
 */
#define D3DDP_DONOTCLIP             0x00000004l

/*
 * Hint that the extents need not be updated.
 */
#define D3DDP_DONOTUPDATEEXTENTS    0x00000008l
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)

/*
 * Hint that the lighting should not be applied on vertices.
 */

#define D3DDP_DONOTLIGHT            0x00000010l

#endif /* DIRECT3D_VERSION >= 0x0600 */

/*
 * Direct3D Errors
 * DirectDraw error codes are used when errors not specified here.
 */
#define D3D_OK              DD_OK
#define D3DERR_BADMAJORVERSION      MAKE_DDHRESULT(700)
#define D3DERR_BADMINORVERSION      MAKE_DDHRESULT(701)

#if(DIRECT3D_VERSION >= 0x0500)
/*
 * An invalid device was requested by the application.
 */
#define D3DERR_INVALID_DEVICE   MAKE_DDHRESULT(705)
#define D3DERR_INITFAILED       MAKE_DDHRESULT(706)

/*
 * SetRenderTarget attempted on a device that was
 * QI'd off the render target.
 */
#define D3DERR_DEVICEAGGREGATED MAKE_DDHRESULT(707)
#endif /* DIRECT3D_VERSION >= 0x0500 */

#define D3DERR_EXECUTE_CREATE_FAILED    MAKE_DDHRESULT(710)
#define D3DERR_EXECUTE_DESTROY_FAILED   MAKE_DDHRESULT(711)
#define D3DERR_EXECUTE_LOCK_FAILED  MAKE_DDHRESULT(712)
#define D3DERR_EXECUTE_UNLOCK_FAILED    MAKE_DDHRESULT(713)
#define D3DERR_EXECUTE_LOCKED       MAKE_DDHRESULT(714)
#define D3DERR_EXECUTE_NOT_LOCKED   MAKE_DDHRESULT(715)

#define D3DERR_EXECUTE_FAILED       MAKE_DDHRESULT(716)
#define D3DERR_EXECUTE_CLIPPED_FAILED   MAKE_DDHRESULT(717)

#define D3DERR_TEXTURE_NO_SUPPORT   MAKE_DDHRESULT(720)
#define D3DERR_TEXTURE_CREATE_FAILED    MAKE_DDHRESULT(721)
#define D3DERR_TEXTURE_DESTROY_FAILED   MAKE_DDHRESULT(722)
#define D3DERR_TEXTURE_LOCK_FAILED  MAKE_DDHRESULT(723)
#define D3DERR_TEXTURE_UNLOCK_FAILED    MAKE_DDHRESULT(724)
#define D3DERR_TEXTURE_LOAD_FAILED  MAKE_DDHRESULT(725)
#define D3DERR_TEXTURE_SWAP_FAILED  MAKE_DDHRESULT(726)
#define D3DERR_TEXTURE_LOCKED       MAKE_DDHRESULT(727)
#define D3DERR_TEXTURE_NOT_LOCKED   MAKE_DDHRESULT(728)
#define D3DERR_TEXTURE_GETSURF_FAILED   MAKE_DDHRESULT(729)

#define D3DERR_MATRIX_CREATE_FAILED MAKE_DDHRESULT(730)
#define D3DERR_MATRIX_DESTROY_FAILED    MAKE_DDHRESULT(731)
#define D3DERR_MATRIX_SETDATA_FAILED    MAKE_DDHRESULT(732)
#define D3DERR_MATRIX_GETDATA_FAILED    MAKE_DDHRESULT(733)
#define D3DERR_SETVIEWPORTDATA_FAILED   MAKE_DDHRESULT(734)

#if(DIRECT3D_VERSION >= 0x0500)
#define D3DERR_INVALIDCURRENTVIEWPORT   MAKE_DDHRESULT(735)
#define D3DERR_INVALIDPRIMITIVETYPE     MAKE_DDHRESULT(736)
#define D3DERR_INVALIDVERTEXTYPE        MAKE_DDHRESULT(737)
#define D3DERR_TEXTURE_BADSIZE          MAKE_DDHRESULT(738)
#define D3DERR_INVALIDRAMPTEXTURE       MAKE_DDHRESULT(739)
#endif /* DIRECT3D_VERSION >= 0x0500 */

#define D3DERR_MATERIAL_CREATE_FAILED   MAKE_DDHRESULT(740)
#define D3DERR_MATERIAL_DESTROY_FAILED  MAKE_DDHRESULT(741)
#define D3DERR_MATERIAL_SETDATA_FAILED  MAKE_DDHRESULT(742)
#define D3DERR_MATERIAL_GETDATA_FAILED  MAKE_DDHRESULT(743)

#if(DIRECT3D_VERSION >= 0x0500)
#define D3DERR_INVALIDPALETTE           MAKE_DDHRESULT(744)

#define D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY MAKE_DDHRESULT(745)
#define D3DERR_ZBUFF_NEEDS_VIDEOMEMORY  MAKE_DDHRESULT(746)
#define D3DERR_SURFACENOTINVIDMEM       MAKE_DDHRESULT(747)
#endif /* DIRECT3D_VERSION >= 0x0500 */

#define D3DERR_LIGHT_SET_FAILED     MAKE_DDHRESULT(750)
#if(DIRECT3D_VERSION >= 0x0500)
#define D3DERR_LIGHTHASVIEWPORT     MAKE_DDHRESULT(751)
#define D3DERR_LIGHTNOTINTHISVIEWPORT           MAKE_DDHRESULT(752)
#endif /* DIRECT3D_VERSION >= 0x0500 */

#define D3DERR_SCENE_IN_SCENE       MAKE_DDHRESULT(760)
#define D3DERR_SCENE_NOT_IN_SCENE   MAKE_DDHRESULT(761)
#define D3DERR_SCENE_BEGIN_FAILED   MAKE_DDHRESULT(762)
#define D3DERR_SCENE_END_FAILED     MAKE_DDHRESULT(763)

#if(DIRECT3D_VERSION >= 0x0500)
#define D3DERR_INBEGIN                  MAKE_DDHRESULT(770)
#define D3DERR_NOTINBEGIN               MAKE_DDHRESULT(771)
#define D3DERR_NOVIEWPORTS              MAKE_DDHRESULT(772)
#define D3DERR_VIEWPORTDATANOTSET       MAKE_DDHRESULT(773)
#define D3DERR_VIEWPORTHASNODEVICE      MAKE_DDHRESULT(774)
#define D3DERR_NOCURRENTVIEWPORT        MAKE_DDHRESULT(775)
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)
#define D3DERR_INVALIDVERTEXFORMAT              MAKE_DDHRESULT(2048)

/*
 * Attempted to CreateTexture on a surface that had a color key
 */
#define D3DERR_COLORKEYATTACHED                 MAKE_DDHRESULT(2050)

#define D3DERR_VERTEXBUFFEROPTIMIZED            MAKE_DDHRESULT(2060)
#define D3DERR_VBUF_CREATE_FAILED               MAKE_DDHRESULT(2061)
#define D3DERR_VERTEXBUFFERLOCKED               MAKE_DDHRESULT(2062)
#define D3DERR_VERTEXBUFFERUNLOCKFAILED         MAKE_DDHRESULT(2063)

#define D3DERR_ZBUFFER_NOTPRESENT               MAKE_DDHRESULT(2070)
#define D3DERR_STENCILBUFFER_NOTPRESENT         MAKE_DDHRESULT(2071)

#define D3DERR_WRONGTEXTUREFORMAT               MAKE_DDHRESULT(2072)
#define D3DERR_UNSUPPORTEDCOLOROPERATION        MAKE_DDHRESULT(2073)
#define D3DERR_UNSUPPORTEDCOLORARG              MAKE_DDHRESULT(2074)
#define D3DERR_UNSUPPORTEDALPHAOPERATION        MAKE_DDHRESULT(2075)
#define D3DERR_UNSUPPORTEDALPHAARG              MAKE_DDHRESULT(2076)
#define D3DERR_TOOMANYOPERATIONS                MAKE_DDHRESULT(2077)
#define D3DERR_CONFLICTINGTEXTUREFILTER         MAKE_DDHRESULT(2078)
#define D3DERR_UNSUPPORTEDFACTORVALUE           MAKE_DDHRESULT(2079)
#define D3DERR_CONFLICTINGRENDERSTATE           MAKE_DDHRESULT(2081)
#define D3DERR_UNSUPPORTEDTEXTUREFILTER         MAKE_DDHRESULT(2082)
#define D3DERR_TOOMANYPRIMITIVES                MAKE_DDHRESULT(2083)
#define D3DERR_INVALIDMATRIX                    MAKE_DDHRESULT(2084)
#define D3DERR_TOOMANYVERTICES                  MAKE_DDHRESULT(2085)
#define D3DERR_CONFLICTINGTEXTUREPALETTE        MAKE_DDHRESULT(2086)

#endif /* DIRECT3D_VERSION >= 0x0600 */

#if(DIRECT3D_VERSION >= 0x0700)
#define D3DERR_INVALIDSTATEBLOCK        MAKE_DDHRESULT(2100)
#define D3DERR_INBEGINSTATEBLOCK        MAKE_DDHRESULT(2101)
#define D3DERR_NOTINBEGINSTATEBLOCK     MAKE_DDHRESULT(2102)
#endif /* DIRECT3D_VERSION >= 0x0700 */


#ifdef __cplusplus
};
#endif

#endif /* (DIRECT3D_VERSION < 0x0800) */
#endif /* _D3D_H_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3dcaps.h ===
/*==========================================================================;
 *
 *
 *  File:       d3dcaps.h
 *  Content:    Direct3D capabilities include file
 *
 ***************************************************************************/

#ifndef _D3DCAPS_H
#define _D3DCAPS_H

/*
 *  Pull in DirectDraw include file automatically:
 */
#include "ddraw.h"

#ifndef DIRECT3D_VERSION
#define DIRECT3D_VERSION         0x0700
#endif

#pragma pack(4)

/* Description of capabilities of transform */

typedef struct _D3DTRANSFORMCAPS {
    DWORD dwSize;
    DWORD dwCaps;
} D3DTRANSFORMCAPS, *LPD3DTRANSFORMCAPS;

#define D3DTRANSFORMCAPS_CLIP           0x00000001L /* Will clip whilst transforming */

/* Description of capabilities of lighting */

typedef struct _D3DLIGHTINGCAPS {
    DWORD dwSize;
    DWORD dwCaps;                   /* Lighting caps */
    DWORD dwLightingModel;          /* Lighting model - RGB or mono */
    DWORD dwNumLights;              /* Number of lights that can be handled */
} D3DLIGHTINGCAPS, *LPD3DLIGHTINGCAPS;

#define D3DLIGHTINGMODEL_RGB            0x00000001L
#define D3DLIGHTINGMODEL_MONO           0x00000002L

#define D3DLIGHTCAPS_POINT              0x00000001L /* Point lights supported */
#define D3DLIGHTCAPS_SPOT               0x00000002L /* Spot lights supported */
#define D3DLIGHTCAPS_DIRECTIONAL        0x00000004L /* Directional lights supported */
#if(DIRECT3D_VERSION < 0x700)
#define D3DLIGHTCAPS_PARALLELPOINT      0x00000008L /* Parallel point lights supported */
#endif
#if(DIRECT3D_VERSION < 0x500)
#define D3DLIGHTCAPS_GLSPOT             0x00000010L /* GL syle spot lights supported */
#endif

/* Description of capabilities for each primitive type */

typedef struct _D3DPrimCaps {
    DWORD dwSize;
    DWORD dwMiscCaps;                 /* Capability flags */
    DWORD dwRasterCaps;
    DWORD dwZCmpCaps;
    DWORD dwSrcBlendCaps;
    DWORD dwDestBlendCaps;
    DWORD dwAlphaCmpCaps;
    DWORD dwShadeCaps;
    DWORD dwTextureCaps;
    DWORD dwTextureFilterCaps;
    DWORD dwTextureBlendCaps;
    DWORD dwTextureAddressCaps;
    DWORD dwStippleWidth;             /* maximum width and height of */
    DWORD dwStippleHeight;            /* of supported stipple (up to 32x32) */
} D3DPRIMCAPS, *LPD3DPRIMCAPS;

/* D3DPRIMCAPS dwMiscCaps */

#define D3DPMISCCAPS_MASKPLANES         0x00000001L
#define D3DPMISCCAPS_MASKZ              0x00000002L
#define D3DPMISCCAPS_LINEPATTERNREP     0x00000004L
#define D3DPMISCCAPS_CONFORMANT         0x00000008L
#define D3DPMISCCAPS_CULLNONE           0x00000010L
#define D3DPMISCCAPS_CULLCW             0x00000020L
#define D3DPMISCCAPS_CULLCCW            0x00000040L

/* D3DPRIMCAPS dwRasterCaps */

#define D3DPRASTERCAPS_DITHER                   0x00000001L
#define D3DPRASTERCAPS_ROP2                     0x00000002L
#define D3DPRASTERCAPS_XOR                      0x00000004L
#define D3DPRASTERCAPS_PAT                      0x00000008L
#define D3DPRASTERCAPS_ZTEST                    0x00000010L
#define D3DPRASTERCAPS_SUBPIXEL                 0x00000020L
#define D3DPRASTERCAPS_SUBPIXELX                0x00000040L
#define D3DPRASTERCAPS_FOGVERTEX                0x00000080L
#define D3DPRASTERCAPS_FOGTABLE                 0x00000100L
#define D3DPRASTERCAPS_STIPPLE                  0x00000200L
#if(DIRECT3D_VERSION >= 0x0500)
#define D3DPRASTERCAPS_ANTIALIASSORTDEPENDENT   0x00000400L
#define D3DPRASTERCAPS_ANTIALIASSORTINDEPENDENT 0x00000800L
#define D3DPRASTERCAPS_ANTIALIASEDGES           0x00001000L
#define D3DPRASTERCAPS_MIPMAPLODBIAS            0x00002000L
#define D3DPRASTERCAPS_ZBIAS                    0x00004000L
#define D3DPRASTERCAPS_ZBUFFERLESSHSR           0x00008000L
#define D3DPRASTERCAPS_FOGRANGE                 0x00010000L
#define D3DPRASTERCAPS_ANISOTROPY               0x00020000L
#endif /* DIRECT3D_VERSION >= 0x0500 */
#if(DIRECT3D_VERSION >= 0x0600)
#define D3DPRASTERCAPS_WBUFFER                      0x00040000L
#define D3DPRASTERCAPS_TRANSLUCENTSORTINDEPENDENT   0x00080000L
#define D3DPRASTERCAPS_WFOG                         0x00100000L
#define D3DPRASTERCAPS_ZFOG                         0x00200000L
#endif /* DIRECT3D_VERSION >= 0x0600 */

/* D3DPRIMCAPS dwZCmpCaps, dwAlphaCmpCaps */

#define D3DPCMPCAPS_NEVER               0x00000001L
#define D3DPCMPCAPS_LESS                0x00000002L
#define D3DPCMPCAPS_EQUAL               0x00000004L
#define D3DPCMPCAPS_LESSEQUAL           0x00000008L
#define D3DPCMPCAPS_GREATER             0x00000010L
#define D3DPCMPCAPS_NOTEQUAL            0x00000020L
#define D3DPCMPCAPS_GREATEREQUAL        0x00000040L
#define D3DPCMPCAPS_ALWAYS              0x00000080L

/* D3DPRIMCAPS dwSourceBlendCaps, dwDestBlendCaps */

#define D3DPBLENDCAPS_ZERO              0x00000001L
#define D3DPBLENDCAPS_ONE               0x00000002L
#define D3DPBLENDCAPS_SRCCOLOR          0x00000004L
#define D3DPBLENDCAPS_INVSRCCOLOR       0x00000008L
#define D3DPBLENDCAPS_SRCALPHA          0x00000010L
#define D3DPBLENDCAPS_INVSRCALPHA       0x00000020L
#define D3DPBLENDCAPS_DESTALPHA         0x00000040L
#define D3DPBLENDCAPS_INVDESTALPHA      0x00000080L
#define D3DPBLENDCAPS_DESTCOLOR         0x00000100L
#define D3DPBLENDCAPS_INVDESTCOLOR      0x00000200L
#define D3DPBLENDCAPS_SRCALPHASAT       0x00000400L
#define D3DPBLENDCAPS_BOTHSRCALPHA      0x00000800L
#define D3DPBLENDCAPS_BOTHINVSRCALPHA   0x00001000L

/* D3DPRIMCAPS dwShadeCaps */

#define D3DPSHADECAPS_COLORFLATMONO             0x00000001L
#define D3DPSHADECAPS_COLORFLATRGB              0x00000002L
#define D3DPSHADECAPS_COLORGOURAUDMONO          0x00000004L
#define D3DPSHADECAPS_COLORGOURAUDRGB           0x00000008L
#define D3DPSHADECAPS_COLORPHONGMONO            0x00000010L
#define D3DPSHADECAPS_COLORPHONGRGB             0x00000020L

#define D3DPSHADECAPS_SPECULARFLATMONO          0x00000040L
#define D3DPSHADECAPS_SPECULARFLATRGB           0x00000080L
#define D3DPSHADECAPS_SPECULARGOURAUDMONO       0x00000100L
#define D3DPSHADECAPS_SPECULARGOURAUDRGB        0x00000200L
#define D3DPSHADECAPS_SPECULARPHONGMONO         0x00000400L
#define D3DPSHADECAPS_SPECULARPHONGRGB          0x00000800L

#define D3DPSHADECAPS_ALPHAFLATBLEND            0x00001000L
#define D3DPSHADECAPS_ALPHAFLATSTIPPLED         0x00002000L
#define D3DPSHADECAPS_ALPHAGOURAUDBLEND         0x00004000L
#define D3DPSHADECAPS_ALPHAGOURAUDSTIPPLED      0x00008000L
#define D3DPSHADECAPS_ALPHAPHONGBLEND           0x00010000L
#define D3DPSHADECAPS_ALPHAPHONGSTIPPLED        0x00020000L

#define D3DPSHADECAPS_FOGFLAT                   0x00040000L
#define D3DPSHADECAPS_FOGGOURAUD                0x00080000L
#define D3DPSHADECAPS_FOGPHONG                  0x00100000L

/* D3DPRIMCAPS dwTextureCaps */

/*
 * Perspective-correct texturing is supported
 */
#define D3DPTEXTURECAPS_PERSPECTIVE     0x00000001L

/*
 * Power-of-2 texture dimensions are required
 */
#define D3DPTEXTURECAPS_POW2            0x00000002L

/*
 * Alpha in texture pixels is supported
 */
#define D3DPTEXTURECAPS_ALPHA           0x00000004L

/*
 * Color-keyed textures are supported
 */
#define D3DPTEXTURECAPS_TRANSPARENCY    0x00000008L

/*
 * obsolete, see D3DPTADDRESSCAPS_BORDER
 */
#define D3DPTEXTURECAPS_BORDER          0x00000010L

/*
 * Only square textures are supported
 */
#define D3DPTEXTURECAPS_SQUAREONLY      0x00000020L

#if(DIRECT3D_VERSION >= 0x0600)
/*
 * Texture indices are not scaled by the texture size prior
 * to interpolation.
 */
#define D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE 0x00000040L

/*
 * Device can draw alpha from texture palettes
 */
#define D3DPTEXTURECAPS_ALPHAPALETTE    0x00000080L

/*
 * Device can use non-POW2 textures if:
 *  1) D3DTEXTURE_ADDRESS is set to CLAMP for this texture's stage
 *  2) D3DRS_WRAP(N) is zero for this texture's coordinates
 *  3) mip mapping is not enabled (use magnification filter only)
 */
#define D3DPTEXTURECAPS_NONPOW2CONDITIONAL  0x00000100L

#endif /* DIRECT3D_VERSION >= 0x0600 */
#if(DIRECT3D_VERSION >= 0x0700)

// 0x00000200L unused

/*
 * Device can divide transformed texture coordinates by the
 * COUNTth texture coordinate (can do D3DTTFF_PROJECTED)
 */
#define D3DPTEXTURECAPS_PROJECTED  0x00000400L

/*
 * Device can do cubemap textures
 */
#define D3DPTEXTURECAPS_CUBEMAP           0x00000800L

#define D3DPTEXTURECAPS_COLORKEYBLEND     0x00001000L
#endif /* DIRECT3D_VERSION >= 0x0700 */

/* D3DPRIMCAPS dwTextureFilterCaps */

#define D3DPTFILTERCAPS_NEAREST         0x00000001L
#define D3DPTFILTERCAPS_LINEAR          0x00000002L
#define D3DPTFILTERCAPS_MIPNEAREST      0x00000004L
#define D3DPTFILTERCAPS_MIPLINEAR       0x00000008L
#define D3DPTFILTERCAPS_LINEARMIPNEAREST 0x00000010L
#define D3DPTFILTERCAPS_LINEARMIPLINEAR 0x00000020L

#if(DIRECT3D_VERSION >= 0x0600)
/* Device3 Min Filter */
#define D3DPTFILTERCAPS_MINFPOINT       0x00000100L
#define D3DPTFILTERCAPS_MINFLINEAR      0x00000200L
#define D3DPTFILTERCAPS_MINFANISOTROPIC 0x00000400L

/* Device3 Mip Filter */
#define D3DPTFILTERCAPS_MIPFPOINT       0x00010000L
#define D3DPTFILTERCAPS_MIPFLINEAR      0x00020000L

/* Device3 Mag Filter */
#define D3DPTFILTERCAPS_MAGFPOINT         0x01000000L
#define D3DPTFILTERCAPS_MAGFLINEAR        0x02000000L
#define D3DPTFILTERCAPS_MAGFANISOTROPIC   0x04000000L
#define D3DPTFILTERCAPS_MAGFAFLATCUBIC    0x08000000L
#define D3DPTFILTERCAPS_MAGFGAUSSIANCUBIC 0x10000000L
#endif /* DIRECT3D_VERSION >= 0x0600 */

/* D3DPRIMCAPS dwTextureBlendCaps */

#define D3DPTBLENDCAPS_DECAL            0x00000001L
#define D3DPTBLENDCAPS_MODULATE         0x00000002L
#define D3DPTBLENDCAPS_DECALALPHA       0x00000004L
#define D3DPTBLENDCAPS_MODULATEALPHA    0x00000008L
#define D3DPTBLENDCAPS_DECALMASK        0x00000010L
#define D3DPTBLENDCAPS_MODULATEMASK     0x00000020L
#define D3DPTBLENDCAPS_COPY             0x00000040L
#if(DIRECT3D_VERSION >= 0x0500)
#define D3DPTBLENDCAPS_ADD              0x00000080L
#endif /* DIRECT3D_VERSION >= 0x0500 */

/* D3DPRIMCAPS dwTextureAddressCaps */
#define D3DPTADDRESSCAPS_WRAP           0x00000001L
#define D3DPTADDRESSCAPS_MIRROR         0x00000002L
#define D3DPTADDRESSCAPS_CLAMP          0x00000004L
#if(DIRECT3D_VERSION >= 0x0500)
#define D3DPTADDRESSCAPS_BORDER         0x00000008L
#define D3DPTADDRESSCAPS_INDEPENDENTUV  0x00000010L
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)

/* D3DDEVICEDESC dwStencilCaps */

#define D3DSTENCILCAPS_KEEP     0x00000001L
#define D3DSTENCILCAPS_ZERO     0x00000002L
#define D3DSTENCILCAPS_REPLACE  0x00000004L
#define D3DSTENCILCAPS_INCRSAT  0x00000008L
#define D3DSTENCILCAPS_DECRSAT  0x00000010L
#define D3DSTENCILCAPS_INVERT   0x00000020L
#define D3DSTENCILCAPS_INCR     0x00000040L
#define D3DSTENCILCAPS_DECR     0x00000080L

/* D3DDEVICEDESC dwTextureOpCaps */

#define D3DTEXOPCAPS_DISABLE                    0x00000001L
#define D3DTEXOPCAPS_SELECTARG1                 0x00000002L
#define D3DTEXOPCAPS_SELECTARG2                 0x00000004L
#define D3DTEXOPCAPS_MODULATE                   0x00000008L
#define D3DTEXOPCAPS_MODULATE2X                 0x00000010L
#define D3DTEXOPCAPS_MODULATE4X                 0x00000020L
#define D3DTEXOPCAPS_ADD                        0x00000040L
#define D3DTEXOPCAPS_ADDSIGNED                  0x00000080L
#define D3DTEXOPCAPS_ADDSIGNED2X                0x00000100L
#define D3DTEXOPCAPS_SUBTRACT                   0x00000200L
#define D3DTEXOPCAPS_ADDSMOOTH                  0x00000400L
#define D3DTEXOPCAPS_BLENDDIFFUSEALPHA          0x00000800L
#define D3DTEXOPCAPS_BLENDTEXTUREALPHA          0x00001000L
#define D3DTEXOPCAPS_BLENDFACTORALPHA           0x00002000L
#define D3DTEXOPCAPS_BLENDTEXTUREALPHAPM        0x00004000L
#define D3DTEXOPCAPS_BLENDCURRENTALPHA          0x00008000L
#define D3DTEXOPCAPS_PREMODULATE                0x00010000L
#define D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR     0x00020000L
#define D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA     0x00040000L
#define D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR  0x00080000L
#define D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA  0x00100000L
#define D3DTEXOPCAPS_BUMPENVMAP                 0x00200000L
#define D3DTEXOPCAPS_BUMPENVMAPLUMINANCE        0x00400000L
#define D3DTEXOPCAPS_DOTPRODUCT3                0x00800000L

/* D3DDEVICEDESC dwFVFCaps flags */

#define D3DFVFCAPS_TEXCOORDCOUNTMASK    0x0000ffffL /* mask for texture coordinate count field */
#define D3DFVFCAPS_DONOTSTRIPELEMENTS   0x00080000L /* Device prefers that vertex elements not be stripped */

#endif /* DIRECT3D_VERSION >= 0x0600 */

/*
 * Description for a device.
 * This is used to describe a device that is to be created or to query
 * the current device.
 */
typedef struct _D3DDeviceDesc {
    DWORD            dwSize;                 /* Size of D3DDEVICEDESC structure */
    DWORD            dwFlags;                /* Indicates which fields have valid data */
    D3DCOLORMODEL    dcmColorModel;          /* Color model of device */
    DWORD            dwDevCaps;              /* Capabilities of device */
    D3DTRANSFORMCAPS dtcTransformCaps;       /* Capabilities of transform */
    BOOL             bClipping;              /* Device can do 3D clipping */
    D3DLIGHTINGCAPS  dlcLightingCaps;        /* Capabilities of lighting */
    D3DPRIMCAPS      dpcLineCaps;
    D3DPRIMCAPS      dpcTriCaps;
    DWORD            dwDeviceRenderBitDepth; /* One of DDBB_8, 16, etc.. */
    DWORD            dwDeviceZBufferBitDepth;/* One of DDBD_16, 32, etc.. */
    DWORD            dwMaxBufferSize;        /* Maximum execute buffer size */
    DWORD            dwMaxVertexCount;       /* Maximum vertex count */
#if(DIRECT3D_VERSION >= 0x0500)
    // *** New fields for DX5 *** //

    // Width and height caps are 0 for legacy HALs.
    DWORD        dwMinTextureWidth, dwMinTextureHeight;
    DWORD        dwMaxTextureWidth, dwMaxTextureHeight;
    DWORD        dwMinStippleWidth, dwMaxStippleWidth;
    DWORD        dwMinStippleHeight, dwMaxStippleHeight;
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)
    // New fields for DX6
    DWORD       dwMaxTextureRepeat;
    DWORD       dwMaxTextureAspectRatio;
    DWORD       dwMaxAnisotropy;

    // Guard band that the rasterizer can accommodate
    // Screen-space vertices inside this space but outside the viewport
    // will get clipped properly.
    D3DVALUE    dvGuardBandLeft;
    D3DVALUE    dvGuardBandTop;
    D3DVALUE    dvGuardBandRight;
    D3DVALUE    dvGuardBandBottom;

    D3DVALUE    dvExtentsAdjust;
    DWORD       dwStencilCaps;

    DWORD       dwFVFCaps;
    DWORD       dwTextureOpCaps;
    WORD        wMaxTextureBlendStages;
    WORD        wMaxSimultaneousTextures;
#endif /* DIRECT3D_VERSION >= 0x0600 */
} D3DDEVICEDESC, *LPD3DDEVICEDESC;

#if(DIRECT3D_VERSION >= 0x0700)
typedef struct _D3DDeviceDesc7 {
    DWORD            dwDevCaps;              /* Capabilities of device */
    D3DPRIMCAPS      dpcLineCaps;
    D3DPRIMCAPS      dpcTriCaps;
    DWORD            dwDeviceRenderBitDepth; /* One of DDBB_8, 16, etc.. */
    DWORD            dwDeviceZBufferBitDepth;/* One of DDBD_16, 32, etc.. */

    DWORD       dwMinTextureWidth, dwMinTextureHeight;
    DWORD       dwMaxTextureWidth, dwMaxTextureHeight;

    DWORD       dwMaxTextureRepeat;
    DWORD       dwMaxTextureAspectRatio;
    DWORD       dwMaxAnisotropy;

    D3DVALUE    dvGuardBandLeft;
    D3DVALUE    dvGuardBandTop;
    D3DVALUE    dvGuardBandRight;
    D3DVALUE    dvGuardBandBottom;

    D3DVALUE    dvExtentsAdjust;
    DWORD       dwStencilCaps;

    DWORD       dwFVFCaps;
    DWORD       dwTextureOpCaps;
    WORD        wMaxTextureBlendStages;
    WORD        wMaxSimultaneousTextures;

    DWORD       dwMaxActiveLights;
    D3DVALUE    dvMaxVertexW;
    GUID        deviceGUID;

    WORD        wMaxUserClipPlanes;
    WORD        wMaxVertexBlendMatrices;

    DWORD       dwVertexProcessingCaps;

    DWORD       dwReserved1;
    DWORD       dwReserved2;
    DWORD       dwReserved3;
    DWORD       dwReserved4;
} D3DDEVICEDESC7, *LPD3DDEVICEDESC7;
#endif /* DIRECT3D_VERSION >= 0x0700 */

#define D3DDEVICEDESCSIZE (sizeof(D3DDEVICEDESC))
#define D3DDEVICEDESC7SIZE (sizeof(D3DDEVICEDESC7))

typedef HRESULT (CALLBACK * LPD3DENUMDEVICESCALLBACK)(GUID FAR *lpGuid, LPSTR lpDeviceDescription, LPSTR lpDeviceName, LPD3DDEVICEDESC, LPD3DDEVICEDESC, LPVOID);

#if(DIRECT3D_VERSION >= 0x0700)
typedef HRESULT (CALLBACK * LPD3DENUMDEVICESCALLBACK7)(LPSTR lpDeviceDescription, LPSTR lpDeviceName, LPD3DDEVICEDESC7, LPVOID);
#endif /* DIRECT3D_VERSION >= 0x0700 */

/* D3DDEVICEDESC dwFlags indicating valid fields */

#define D3DDD_COLORMODEL            0x00000001L /* dcmColorModel is valid */
#define D3DDD_DEVCAPS               0x00000002L /* dwDevCaps is valid */
#define D3DDD_TRANSFORMCAPS         0x00000004L /* dtcTransformCaps is valid */
#define D3DDD_LIGHTINGCAPS          0x00000008L /* dlcLightingCaps is valid */
#define D3DDD_BCLIPPING             0x00000010L /* bClipping is valid */
#define D3DDD_LINECAPS              0x00000020L /* dpcLineCaps is valid */
#define D3DDD_TRICAPS               0x00000040L /* dpcTriCaps is valid */
#define D3DDD_DEVICERENDERBITDEPTH  0x00000080L /* dwDeviceRenderBitDepth is valid */
#define D3DDD_DEVICEZBUFFERBITDEPTH 0x00000100L /* dwDeviceZBufferBitDepth is valid */
#define D3DDD_MAXBUFFERSIZE         0x00000200L /* dwMaxBufferSize is valid */
#define D3DDD_MAXVERTEXCOUNT        0x00000400L /* dwMaxVertexCount is valid */

/* D3DDEVICEDESC dwDevCaps flags */

#define D3DDEVCAPS_FLOATTLVERTEX        0x00000001L /* Device accepts floating point */
                                                    /* for post-transform vertex data */
#define D3DDEVCAPS_SORTINCREASINGZ      0x00000002L /* Device needs data sorted for increasing Z */
#define D3DDEVCAPS_SORTDECREASINGZ      0X00000004L /* Device needs data sorted for decreasing Z */
#define D3DDEVCAPS_SORTEXACT            0x00000008L /* Device needs data sorted exactly */

#define D3DDEVCAPS_EXECUTESYSTEMMEMORY  0x00000010L /* Device can use execute buffers from system memory */
#define D3DDEVCAPS_EXECUTEVIDEOMEMORY   0x00000020L /* Device can use execute buffers from video memory */
#define D3DDEVCAPS_TLVERTEXSYSTEMMEMORY 0x00000040L /* Device can use TL buffers from system memory */
#define D3DDEVCAPS_TLVERTEXVIDEOMEMORY  0x00000080L /* Device can use TL buffers from video memory */
#define D3DDEVCAPS_TEXTURESYSTEMMEMORY  0x00000100L /* Device can texture from system memory */
#define D3DDEVCAPS_TEXTUREVIDEOMEMORY   0x00000200L /* Device can texture from device memory */
#if(DIRECT3D_VERSION >= 0x0500)
#define D3DDEVCAPS_DRAWPRIMTLVERTEX     0x00000400L /* Device can draw TLVERTEX primitives */
#define D3DDEVCAPS_CANRENDERAFTERFLIP   0x00000800L /* Device can render without waiting for flip to complete */
#define D3DDEVCAPS_TEXTURENONLOCALVIDMEM 0x00001000L /* Device can texture from nonlocal video memory */
#endif /* DIRECT3D_VERSION >= 0x0500 */
#if(DIRECT3D_VERSION >= 0x0600)
#define D3DDEVCAPS_DRAWPRIMITIVES2         0x00002000L /* Device can support DrawPrimitives2 */
#define D3DDEVCAPS_SEPARATETEXTUREMEMORIES 0x00004000L /* Device is texturing from separate memory pools */
#define D3DDEVCAPS_DRAWPRIMITIVES2EX       0x00008000L /* Device can support Extended DrawPrimitives2 i.e. DX7 compliant driver*/
#endif /* DIRECT3D_VERSION >= 0x0600 */
#if(DIRECT3D_VERSION >= 0x0700)
#define D3DDEVCAPS_HWTRANSFORMANDLIGHT     0x00010000L /* Device can support transformation and lighting in hardware and DRAWPRIMITIVES2EX must be also */
#define D3DDEVCAPS_CANBLTSYSTONONLOCAL     0x00020000L /* Device supports a Tex Blt from system memory to non-local vidmem */
#define D3DDEVCAPS_HWRASTERIZATION         0x00080000L /* Device has HW acceleration for rasterization */

/*
 * These are the flags in the D3DDEVICEDESC7.dwVertexProcessingCaps field
 */

/* device can do texgen */
#define D3DVTXPCAPS_TEXGEN              0x00000001L
/* device can do IDirect3DDevice7 colormaterialsource ops */
#define D3DVTXPCAPS_MATERIALSOURCE7     0x00000002L
/* device can do vertex fog */
#define D3DVTXPCAPS_VERTEXFOG           0x00000004L
/* device can do directional lights */
#define D3DVTXPCAPS_DIRECTIONALLIGHTS   0x00000008L
/* device can do positional lights (includes point and spot) */
#define D3DVTXPCAPS_POSITIONALLIGHTS    0x00000010L
/* device can do local viewer */
#define D3DVTXPCAPS_LOCALVIEWER         0x00000020L

#endif /* DIRECT3D_VERSION >= 0x0700 */

#define D3DFDS_COLORMODEL        0x00000001L /* Match color model */
#define D3DFDS_GUID              0x00000002L /* Match guid */
#define D3DFDS_HARDWARE          0x00000004L /* Match hardware/software */
#define D3DFDS_TRIANGLES         0x00000008L /* Match in triCaps */
#define D3DFDS_LINES             0x00000010L /* Match in lineCaps  */
#define D3DFDS_MISCCAPS          0x00000020L /* Match primCaps.dwMiscCaps */
#define D3DFDS_RASTERCAPS        0x00000040L /* Match primCaps.dwRasterCaps */
#define D3DFDS_ZCMPCAPS          0x00000080L /* Match primCaps.dwZCmpCaps */
#define D3DFDS_ALPHACMPCAPS      0x00000100L /* Match primCaps.dwAlphaCmpCaps */
#define D3DFDS_SRCBLENDCAPS      0x00000200L /* Match primCaps.dwSourceBlendCaps */
#define D3DFDS_DSTBLENDCAPS      0x00000400L /* Match primCaps.dwDestBlendCaps */
#define D3DFDS_SHADECAPS         0x00000800L /* Match primCaps.dwShadeCaps */
#define D3DFDS_TEXTURECAPS       0x00001000L /* Match primCaps.dwTextureCaps */
#define D3DFDS_TEXTUREFILTERCAPS 0x00002000L /* Match primCaps.dwTextureFilterCaps */
#define D3DFDS_TEXTUREBLENDCAPS  0x00004000L /* Match primCaps.dwTextureBlendCaps */
#define D3DFDS_TEXTUREADDRESSCAPS  0x00008000L /* Match primCaps.dwTextureBlendCaps */

/*
 * FindDevice arguments
 */
typedef struct _D3DFINDDEVICESEARCH {
    DWORD               dwSize;
    DWORD               dwFlags;
    BOOL                bHardware;
    D3DCOLORMODEL       dcmColorModel;
    GUID                guid;
    DWORD               dwCaps;
    D3DPRIMCAPS         dpcPrimCaps;
} D3DFINDDEVICESEARCH, *LPD3DFINDDEVICESEARCH;

typedef struct _D3DFINDDEVICERESULT {
    DWORD               dwSize;
    GUID                guid;           /* guid which matched */
    D3DDEVICEDESC       ddHwDesc;       /* hardware D3DDEVICEDESC */
    D3DDEVICEDESC       ddSwDesc;       /* software D3DDEVICEDESC */
} D3DFINDDEVICERESULT, *LPD3DFINDDEVICERESULT;

/*
 * Description of execute buffer.
 */
typedef struct _D3DExecuteBufferDesc {
    DWORD               dwSize;         /* size of this structure */
    DWORD               dwFlags;        /* flags indicating which fields are valid */
    DWORD               dwCaps;         /* capabilities of execute buffer */
    DWORD               dwBufferSize;   /* size of execute buffer data */
    LPVOID              lpData;         /* pointer to actual data */
} D3DEXECUTEBUFFERDESC, *LPD3DEXECUTEBUFFERDESC;

/* D3DEXECUTEBUFFER dwFlags indicating valid fields */

#define D3DDEB_BUFSIZE          0x00000001l     /* buffer size valid */
#define D3DDEB_CAPS             0x00000002l     /* caps valid */
#define D3DDEB_LPDATA           0x00000004l     /* lpData valid */

/* D3DEXECUTEBUFFER dwCaps */

#define D3DDEBCAPS_SYSTEMMEMORY 0x00000001l     /* buffer in system memory */
#define D3DDEBCAPS_VIDEOMEMORY  0x00000002l     /* buffer in device memory */
#define D3DDEBCAPS_MEM (D3DDEBCAPS_SYSTEMMEMORY|D3DDEBCAPS_VIDEOMEMORY)

#if(DIRECT3D_VERSION < 0x0800)

#if(DIRECT3D_VERSION >= 0x0700)
typedef struct _D3DDEVINFO_TEXTUREMANAGER {
    BOOL    bThrashing;                 /* indicates if thrashing */
    DWORD   dwApproxBytesDownloaded;    /* Approximate number of bytes downloaded by texture manager */
    DWORD   dwNumEvicts;                /* number of textures evicted */
    DWORD   dwNumVidCreates;            /* number of textures created in video memory */
    DWORD   dwNumTexturesUsed;          /* number of textures used */
    DWORD   dwNumUsedTexInVid;          /* number of used textures present in video memory */
    DWORD   dwWorkingSet;               /* number of textures in video memory */
    DWORD   dwWorkingSetBytes;          /* number of bytes in video memory */
    DWORD   dwTotalManaged;             /* total number of managed textures */
    DWORD   dwTotalBytes;               /* total number of bytes of managed textures */
    DWORD   dwLastPri;                  /* priority of last texture evicted */
} D3DDEVINFO_TEXTUREMANAGER, *LPD3DDEVINFO_TEXTUREMANAGER;

typedef struct _D3DDEVINFO_TEXTURING {
    DWORD   dwNumLoads;                 /* counts Load() API calls */
    DWORD   dwApproxBytesLoaded;        /* Approximate number bytes loaded via Load() */
    DWORD   dwNumPreLoads;              /* counts PreLoad() API calls */
    DWORD   dwNumSet;                   /* counts SetTexture() API calls */
    DWORD   dwNumCreates;               /* counts texture creates */
    DWORD   dwNumDestroys;              /* counts texture destroys */
    DWORD   dwNumSetPriorities;         /* counts SetPriority() API calls */
    DWORD   dwNumSetLODs;               /* counts SetLOD() API calls */
    DWORD   dwNumLocks;                 /* counts number of texture locks */
    DWORD   dwNumGetDCs;                /* counts number of GetDCs to textures */
} D3DDEVINFO_TEXTURING, *LPD3DDEVINFO_TEXTURING;
#endif /* DIRECT3D_VERSION >= 0x0700 */

#endif //(DIRECT3D_VERSION < 0x0800)

#pragma pack()


#endif /* _D3DCAPS_H_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\custcntl.h ===
/*****************************************************************************\
*                                                                             *
* custcntl.h -  Custom Control Library header file                            *
*                                                                             *
*               Copyright (c) 1992-1999, Microsoft Corp.  All rights reserved *
*                                                                             *
\*****************************************************************************/

#ifndef _INC_CUSTCNTL
#define _INC_CUSTCNTL

#if _MSC_VER > 1000
#pragma once
#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */


/*
 * General size defines.
 */
#define CCHCCCLASS          32          // Max chars in a class name.
#define CCHCCDESC           32          // Max chars in a control description.
#define CCHCCTEXT           256         // Max chars in a text field.


/*
 * CCSTYLE - Custom Control Style structure.  This structure is passed
 * tp the Custom Control Style function when the user wants to edit the
 * styles of the custom control.
 */
typedef struct tagCCSTYLEA {
    DWORD   flStyle;                    // Style of the control.
    DWORD   flExtStyle;                 // Extended style of the control.
    CHAR    szText[CCHCCTEXT];          // Text of the control.
    LANGID  lgid;                       // Language Id of the control's dialog.
    WORD    wReserved1;                 // Reserved value.  Do not change.
} CCSTYLEA, *LPCCSTYLEA;

typedef struct tagCCSTYLEW {
    DWORD   flStyle;                    // Style of the control.
    DWORD   flExtStyle;                 // Extended style of the control.
    WCHAR   szText[CCHCCTEXT];          // Text of the control.
    LANGID  lgid;                       // Language Id of the control's dialog.
    WORD    wReserved1;                 // Reserved value.  Do not change.
} CCSTYLEW, *LPCCSTYLEW;

#ifdef UNICODE
#define CCSTYLE     CCSTYLEW
#define LPCCSTYLE   LPCCSTYLEW
#else
#define CCSTYLE     CCSTYLEA
#define LPCCSTYLE   LPCCSTYLEA
#endif // UNICODE


/*
 * The Style function prototype.  This will be called when the user
 * wants to edit the styles of a custom control.  It should display a
 * dialog to edit the styles, update the styles in the pccs structure,
 * then return TRUE for success.  If an error occurs or the user
 * cancels the dialog, FALSE should be returned.
 */
typedef BOOL (CALLBACK* LPFNCCSTYLEA)(HWND hwndParent,  LPCCSTYLEA pccs);
typedef BOOL (CALLBACK* LPFNCCSTYLEW)(HWND hwndParent,  LPCCSTYLEW pccs);

#ifdef UNICODE
#define LPFNCCSTYLE LPFNCCSTYLEW
#else
#define LPFNCCSTYLE LPFNCCSTYLEA
#endif  // UNICODE


/*
 * The SizeToText function prototype.  This will be called if the user
 * requests that the custom control be sized to fit it's text.  It
 * should use the specified styles, text and font to determine how
 * large the control must be to accommodate the text, then return this
 * value in pixels.  The value of -1 should be returned if an error
 * occurs.
 */
typedef INT (CALLBACK* LPFNCCSIZETOTEXTA)(DWORD flStyle, DWORD flExtStyle,
    HFONT hfont, LPSTR pszText);
typedef INT (CALLBACK* LPFNCCSIZETOTEXTW)(DWORD flStyle, DWORD flExtStyle,
    HFONT hfont, LPWSTR pszText);

#ifdef UNICODE
#define LPFNCCSIZETOTEXT    LPFNCCSIZETOTEXTW
#else
#define LPFNCCSIZETOTEXT    LPFNCCSIZETOTEXTA
#endif  // UNICODE


/*
 * CCSTYLEFLAG - Custom Control Style Flag structure.  A table of these
 * structures is used to specify the define strings that match the
 * different styles for a custom control.
 */
typedef struct tagCCSTYLEFLAGA {
    DWORD flStyle;                      // Style bits for this style.
    DWORD flStyleMask;                  // Mask for the style.  Can be zero.
    LPSTR pszStyle;                     // Points to the style define string.
} CCSTYLEFLAGA, *LPCCSTYLEFLAGA;

typedef struct tagCCSTYLEFLAGW {
    DWORD flStyle;                      // Style bits for this style.
    DWORD flStyleMask;                  // Mask for the style.  Can be zero.
    LPWSTR pszStyle;                    // Points to the style define string.
} CCSTYLEFLAGW, *LPCCSTYLEFLAGW;

#ifdef UNICODE
#define CCSTYLEFLAG     CCSTYLEFLAGW
#define LPCCSTYLEFLAG   LPCCSTYLEFLAGW
#else
#define CCSTYLEFLAG     CCSTYLEFLAGA
#define LPCCSTYLEFLAG   LPCCSTYLEFLAGA
#endif // UNICODE


/*
 * CCF_* defines.  These flags are used for the flOptions field of the
 * CCINFO structure, and describe some basic characteristics of the
 * custom control.
 */
#define CCF_NOTEXT          0x00000001  // Control cannot have text.


/*
 * CCINFO - Custom Control Info structure.  This structure provides
 * the dialog editor with information about the control types that the
 * DLL supports.
 */
typedef struct tagCCINFOA {
    CHAR    szClass[CCHCCCLASS];        // Class name for the control.
    DWORD   flOptions;                  // Option flags (CCF_* defines).
    CHAR    szDesc[CCHCCDESC];          // Short, descriptive text for the ctrl.
    UINT    cxDefault;                  // Default width (in dialog units).
    UINT    cyDefault;                  // Default height (in dialog units).
    DWORD   flStyleDefault;             // Default style (WS_CHILD | WS_VISIBLE).
    DWORD   flExtStyleDefault;          // Default extended style.
    DWORD   flCtrlTypeMask;             // Mask for control type styles.
    CHAR    szTextDefault[CCHCCTEXT];   // Default text.
    INT     cStyleFlags;                // Entries in the following style table.
    LPCCSTYLEFLAGA aStyleFlags;         // Points to style flag table.
    LPFNCCSTYLEA lpfnStyle;             // Pointer to the Styles function.
    LPFNCCSIZETOTEXTA lpfnSizeToText;   // Pointer to the SizeToText function.
    DWORD   dwReserved1;                // Reserved.  Must be zero.
    DWORD   dwReserved2;                // Reserved.  Must be zero.
} CCINFOA, *LPCCINFOA;

typedef struct tagCCINFOW {
    WCHAR   szClass[CCHCCCLASS];        // Class name for the control.
    DWORD   flOptions;                  // Option flags (CCF_* defines).
    WCHAR   szDesc[CCHCCDESC];          // Short, descriptive text for the ctrl.
    UINT    cxDefault;                  // Default width (in dialog units).
    UINT    cyDefault;                  // Default height (in dialog units).
    DWORD   flStyleDefault;             // Default style (WS_CHILD | WS_VISIBLE).
    DWORD   flExtStyleDefault;          // Default extended style.
    DWORD   flCtrlTypeMask;             // Mask for control type styles.
    INT     cStyleFlags;                // Entries in the following style table.
    LPCCSTYLEFLAGW aStyleFlags;         // Points to style flag table.
    WCHAR   szTextDefault[CCHCCTEXT];   // Default text.
    LPFNCCSTYLEW lpfnStyle;             // Pointer to the Styles function.
    LPFNCCSIZETOTEXTW lpfnSizeToText;   // Pointer to the SizeToText function.
    DWORD   dwReserved1;                // Reserved.  Must be zero.
    DWORD   dwReserved2;                // Reserved.  Must be zero.
} CCINFOW, *LPCCINFOW;

#ifdef UNICODE
#define CCINFO      CCINFOW
#define LPCCINFO    LPCCINFOW
#else
#define CCINFO      CCINFOA
#define LPCCINFO    LPCCINFOA
#endif // UNICODE


/*
 * The Info function prototype.  This function is the first one
 * called by the dialog editor.  Custom control DLL's must export
 * one or both of the following functions by name (the ordinal
 * used for the export does not matter):
 *
 *  UINT CALLBACK CustomControlInfoA(LPCCINFOA acci)
 *  UINT CALLBACK CustomControlInfoW(LPCCINFOW acci)
 *
 * This function must return the number of controls that the DLL
 * supports, or NULL if an error occurs.  If the acci parameter is
 * not NULL, it will be pointing to an array of CCINFOA or CCINFOW
 * structures that should be filled in with the information about
 * the different control types supported by the DLL.
 *
 * If both functions are present, the CustomControlInfoW function
 * will be used by the dialog editor.
 */
typedef UINT (CALLBACK* LPFNCCINFOA)(LPCCINFOA acci);
typedef UINT (CALLBACK* LPFNCCINFOW)(LPCCINFOW acci);

#ifdef UNICODE
#define LPFNCCINFO  LPFNCCINFOW
#else
#define LPFNCCINFO  LPFNCCINFOA
#endif  // UNICODE


#ifdef __cplusplus
}
#endif  /* __cplusplus */

#endif  /* _INC_CUSTCNTL */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\D3drmvis.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1995-1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	d3drmvis.h
 *  Content:	Direct3DRM external visualinclude file
 *
 ***************************************************************************/

#ifndef _D3DRMVIS_H_
#define _D3DRMVIS_H_

#include "d3drm.h"
#include "d3drmobj.h"

#include <ocidl.h>
#include "dxfile.h"

#ifdef __cplusplus
extern "C" {
#endif

WIN_TYPES(IDirect3DRMExternalVisual, DIRECT3DRMEXTERNALVISUAL);
WIN_TYPES(IDirect3DRMExternalUtil, DIRECT3DRMEXTERNALUTIL);

DEFINE_GUID(IID_IDirect3DRMExternalVisual,
0x4516ec80, 0x8f20, 0x11d0, 0x9b, 0x6d, 0x00, 0x00, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(IID_IDirect3DRMExternalUtil,
0x4516ec80, 0x8f20, 0x11d0, 0x9b, 0x6d, 0x00, 0x00, 0xc0, 0x78, 0x1b, 0xc3);

/* In IDirect3DRMExternalVisual::CanSee() */
#define D3DRMEXTVIS_CANNOTSEE 0x00000001L
#define D3DRMEXTVIS_CANSEE    0x00000002L

/* In IDirect3DRMExternalVisual::Pick() */
#define D3DRMEXTVIS_NOTPICKED 0x00000001L
#define D3DRMEXTVIS_PICKED    0x00000002L

/* In D3DRMEXTVISRENDERCONTEXT.dwOverrides */
#define D3DRMEXTVIS_RENDERCONTEXT_OVERRIDEMATERIAL 0x00000001L
#define D3DRMEXTVIS_RENDERCONTEXT_OVERRIDETEXTURE  0x00000002L
#define D3DRMEXTVIS_RENDERCONTEXT_DEVICEOVERRIDE   0x00000004L

/* In D3DRMEXTVISRENDERCONTEXT.dwZBufferMode */
#define D3DRMEXTVIS_RENDERCONTEXT_ZBUFFERON        0x00000001L
#define D3DRMEXTVIS_RENDERCONTEXT_ZBUFFEROFF       0x00000002L

/*
 * Structure for IDirect3DRMExternalVisual::SetRenderContext()
 */
typedef struct
{
    DWORD dwSize;		/* Size of structure */
    DWORD dwFlags;		/* Must be zero */
    DWORD dwOverrides;		/* Indicates which overrides are in effect */
    D3DMATERIALHANDLE hMat;	/* If non-zero, this material handle MUST
				   be used for all rendering */
    D3DTEXTUREHANDLE hTex;	/* If non-zero, this texture handle MUST
				   be used for all rendering */
    D3DRMMATERIALOVERRIDE dmUserOverride; /* contains per-attribute overrides
					     for materials */
    D3DRMSHADEMODE pShadeMode;  /* Flat, gouraud or phong */
    D3DRMLIGHTMODE pLightMode;  /* On or off */
    D3DRMFILLMODE pFillMode;    /* Points, wireframe or solid */
    DWORD dwZBufferMode;	/* As defined above */
    DWORD dwRenderMode;		/* Blended transparency and/or sorted */
} D3DRMEXTVISRENDERCONTEXT, *LPD3DRMEXTVISRENDERCONTEXT;

/*
 * Structure for IDirect3DRMExternalVisual::RayPick()
 */
typedef struct
{
    D3DVALUE  dDistance;
    D3DVECTOR dvPosition;
    D3DVECTOR dvNormal;
    D3DVALUE  tu;
    D3DVALUE  tv;
    D3DCOLOR  dcColor;
} D3DRMEXTVISRAYPICKINFO, *LPD3DRMEXTVISRAYPICKINFO;

#undef INTERFACE
#define INTERFACE IDirect3DRMExternalVisual
DECLARE_INTERFACE_(IDirect3DRMExternalVisual, IUnknown)
{
    IUNKNOWN_METHODS(PURE);

    /*
     * IDirect3DRMExternalVisual methods
     */
    STDMETHOD(Initialize)(THIS_ LPDIRECT3DRM, LPDIRECT3DRMEXTERNALUTIL,
			  DWORD dwFlags) PURE;
    STDMETHOD(Load)(THIS_ IDirectXFileData *dObject, 
		    IPropertyBag *pPropBag, 
		    DWORD dwFlags) PURE;

    /*
     * Information about device state, viewport state, overrides, etc...
     */
    STDMETHOD(SetRenderContext)(THIS_ LPD3DRMEXTVISRENDERCONTEXT pCntx,
				DWORD dwFlags) PURE;
    
    /*
     * Rendering operations
     */
    STDMETHOD(CanSee)(THIS_ LPDIRECT3DRMDEVICE2, LPDIRECT3DRMVIEWPORT2,
		      LPDWORD pdwCanSee) PURE;
    STDMETHOD(Render)(THIS_ LPDIRECT3DRMDEVICE2, LPDIRECT3DRMVIEWPORT2,
		      DWORD dwFlags) PURE;
    STDMETHOD(DeviceChange)(THIS) PURE;

    /* 
     * Notify external visuals when BeginScene/EndScene are called during 
     * rendering
     */
    STDMETHOD(BeginScene)(THIS) PURE;
    STDMETHOD(EndScene)(THIS) PURE;

    /*
     * Picking
     */
    STDMETHOD(Pick)(THIS_ LPDIRECT3DRMVIEWPORT2 pViewIn,
		    LPDIRECT3DRMFRAME3 pFrameIn,
		    DWORD dwXIn, DWORD dwYIn,
		    LPD3DVALUE pdvZOut, LPDWORD pdwPicked) PURE;

    /*
     * RayPicking
     *
     * dwFlags can contain:
     * D3DRMRAYPICK_INTERPOLATENORMAL - pPickInfo.dvNormal must be filled in
     * D3DRMRAYPICK_INTERPOLATECOLOR  - pPickInfo.dcColor must be filled in
     * D3DRMRAYPICK_INTERPOLATEUV     - pPickInfo.tu, tv must be filled in
     */
    STDMETHOD(RayPick)(THIS_ LPDIRECT3DRMFRAME3 pFrameIn,
		       LPD3DRMRAY pRayIn,
		       DWORD dwFlags,
		       LPDWORD pdwPicked,
		       LPD3DRMEXTVISRAYPICKINFO pPickInfo) PURE;

    /*
     * Misc
     */
    STDMETHOD(GetBox)(THIS_ LPD3DRMBOX) PURE;
    STDMETHOD(GetAge)(THIS_ LPDWORD) PURE;
};

/*
 * Flags for UpdateBounds
 */
#define D3DRMEXTUTIL_BOUNDSINVALIDATE 0x00000001L
#define D3DRMEXTUTIL_BOUNDSVALID      0x00000002L

#undef INTERFACE
#define INTERFACE IDirect3DRMExternalUtil
DECLARE_INTERFACE_(IDirect3DRMExternalUtil, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);

    /*
     * External Visual must use these methods to provide IDirect3DRMObject
     * functionality.
     */
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMExternalUtil methods
     */

    /*
     * Texture Management
     */
    STDMETHOD(FindDeviceTexture)(LPDIRECT3DRMDEVICE2, LPDIRECT3DRMTEXTURE,
				 LPDWORD dwDevTexId) PURE;
    STDMETHOD(GetTextureHandle)(DWORD dwDevTexId, LPDWORD pdwHandle) PURE;
    STDMETHOD(DestroyDeviceTexture)(DWORD dwDevTexId) PURE;
    STDMETHOD(ValidateDeviceTextures)(LPDIRECT3DRMDEVICE2,
				      LPDWORD dwDevTexIds,
				      DWORD dwNumIds) PURE;
    STDMETHOD(UpdateBounds)(DWORD dwFlags,
			    LPD3DVECTOR dvMin,
			    LPD3DVECTOR dvMax) PURE;
    STDMETHOD(SetExtents)(LPDIRECT3DRMVIEWPORT2,
			  DWORD dwNumExtents, 
			  LPD3DCLIPSTATUS pExtents) PURE;
};

#ifdef __cplusplus
};
#endif /* __cplusplus */

#endif /* _D3DRMVIS_H_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\cutlist.h ===
//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

// CutList related definitions and interfaces for ActiveMovie

#ifndef __CUTLIST__
#define __CUTLIST__

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

#define CL_DEFAULT_TIME			(-1L)

enum CL_ELEM_STATUS {
	CL_NOT_PLAYED = 0,
	CL_PLAYING = 1,
	CL_FINISHED = 2,
	CL_STATE_INVALID = 3,
	CL_STATE_MASK = CL_STATE_INVALID,
	CL_WAIT_FOR_STATE = 0xF0000000
};

enum CL_ELEM_FLAGS{
	CL_ELEM_FIRST = 1,
	CL_ELEM_LAST = 2,
	CL_ELEM_NULL = 4,
	CL_ELEM_ALL  = 0xFFFFFFFF,
	CL_ELEM_NONE = 0x0L
};


#ifndef __IAMCutListElement_INTERFACE_DEFINED__
#define __IAMCutListElement_INTERFACE_DEFINED__
#define __IAMFileCutListElement_INTERFACE_DEFINED__
#define __IAMVideoCutListElement_INTERFACE_DEFINED__
#define __IAMAudioCutListElement_INTERFACE_DEFINED__

interface IAMCutListElement : public IUnknown
{
public:
        virtual HRESULT __stdcall GetElementStartPosition( 
            /* [out] */ REFERENCE_TIME *pmtStart) = 0;
        
        virtual HRESULT __stdcall GetElementDuration( 
            /* [out] */ REFERENCE_TIME *pmtDuration) = 0;
        
        virtual HRESULT __stdcall IsFirstElement( void ) = 0;
        
        virtual HRESULT __stdcall IsLastElement( void ) = 0; 
        
        virtual HRESULT __stdcall IsNull( void ) = 0;
        
        virtual HRESULT __stdcall ElementStatus( 
            DWORD *pdwStatus,
            DWORD dwTimeoutMs) = 0;
        
};


interface IAMFileCutListElement : public IUnknown
{
public:
        virtual HRESULT __stdcall GetFileName( 
            /* [out] */ LPWSTR *ppwstrFileName) = 0;
        
        virtual HRESULT __stdcall GetTrimInPosition( 
            /* [out] */ REFERENCE_TIME *pmtTrimIn) = 0;
        
        virtual HRESULT __stdcall GetTrimOutPosition( 
            /* [out] */ REFERENCE_TIME *pmtTrimOut) = 0;
        
        virtual HRESULT __stdcall GetOriginPosition( 
            /* [out] */ REFERENCE_TIME *pmtOrigin) = 0;
        
        virtual HRESULT __stdcall GetTrimLength( 
            /* [out] */ REFERENCE_TIME *pmtLength) = 0;
        
        virtual HRESULT __stdcall GetElementSplitOffset( 
            /* [out] */ REFERENCE_TIME *pmtOffset) = 0;
        
};


interface IAMVideoCutListElement : public IUnknown
{
public:
        virtual HRESULT __stdcall IsSingleFrame( void) = 0;
        
        virtual HRESULT __stdcall GetStreamIndex( 
            /* [out] */ DWORD *piStream) = 0;
        
};
    

interface IAMAudioCutListElement : public IUnknown
{
public:
        virtual HRESULT __stdcall GetStreamIndex( 
            /* [out] */ DWORD *piStream) = 0;
        
        virtual HRESULT __stdcall HasFadeIn( void) = 0;
        
        virtual HRESULT __stdcall HasFadeOut( void) = 0;
        
};

#endif		// #ifndef IAMCutListElement


interface IStandardCutList : public IUnknown
{
	public:
		virtual HRESULT __stdcall AddElement(
			/* [in] */		IAMCutListElement	*pElement,
			/* [in] */		REFERENCE_TIME	mtStart,
			/* [in] */		REFERENCE_TIME	mtDuration)=0;

		virtual HRESULT __stdcall RemoveElement(
			/* [in] */		IAMCutListElement	*pElement) = 0;

		virtual HRESULT __stdcall GetFirstElement(
			/* [out] */		IAMCutListElement	**ppElement)=0;
		virtual HRESULT __stdcall GetLastElement(
			/* [out] */		IAMCutListElement	**ppElement)=0;
		virtual HRESULT __stdcall GetNextElement(
			/* [out] */		IAMCutListElement	**ppElement)=0;
		virtual HRESULT __stdcall GetPreviousElement(
			/* [out] */		IAMCutListElement	**ppElement)=0;
		
		virtual HRESULT __stdcall GetMediaType(
			/* [out] */		AM_MEDIA_TYPE *pmt)=0;
		virtual HRESULT __stdcall SetMediaType(
			/* [in] */		AM_MEDIA_TYPE *pmt)=0;
};


interface IFileClip : public IUnknown
{
	public:
		virtual HRESULT __stdcall SetFileAndStream(
			/* [in] */		LPWSTR	wstrFileName,
			/* [in] */		DWORD	streamNum) = 0;
		
		virtual HRESULT __stdcall CreateCut(
			/* [out] */		IAMCutListElement	**ppElement,
			/* [in] */		REFERENCE_TIME	mtTrimIn,
			/* [in] */		REFERENCE_TIME	mtTrimOut,
			/* [in] */		REFERENCE_TIME	mtOrigin,
			/* [in] */		REFERENCE_TIME	mtLength,
			/* [in] */		REFERENCE_TIME	mtOffset) = 0;

		virtual HRESULT __stdcall GetMediaType(
			/* [out] */		AM_MEDIA_TYPE	*pmt) = 0;
};

interface ICutListGraphBuilder : public IUnknown
{
public:
		virtual HRESULT __stdcall SetFilterGraph(
			/*[in]*/	IGraphBuilder	*pFilterGraph)=0;

		virtual HRESULT __stdcall GetFilterGraph(
			/*[out]*/	IGraphBuilder	**ppFilterGraph)=0;
		
		virtual HRESULT __stdcall AddCutList(
			/*[in]*/	IStandardCutList 	*pCutList,
			/*[out]*/	IPin			**ppPin)=0;
		
		virtual HRESULT __stdcall RemoveCutList(
			/*[in]*/	IStandardCutList 	*pCutList)=0;
		
		virtual HRESULT __stdcall SetOutputFileName(
			/*[in]*/	const GUID	*pType,
			/*[in]*/	LPCOLESTR	lpwstrFile,
			/*[in]*/	IBaseFilter	**ppf,
			/*[in]*/	IFileSinkFilter	**pSink) = 0;
		
		virtual HRESULT __stdcall Render(void) = 0;

		virtual HRESULT __stdcall GetElementFlags(
			/*[in]*/	IAMCutListElement *pElement,
			/*[out]*/	LPDWORD lpdwFlags) = 0;
		
};


#ifdef __cplusplus
}
#endif // __cplusplus
#endif // __CUTLIST__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3dvec.inl ===
/****************************************************************** 
 *                                                                *
 *   D3DVec.inl                                                   *
 *                                                                *
 *   Float-valued 3D vector class for Direct3D.                   *
 *                                                                *
 *   Copyright (c) 1996-1998 Microsoft Corp. All rights reserved. *
 *                                                                *
 ******************************************************************/

#include <math.h>

// =====================================
// Constructors
// =====================================

inline
_D3DVECTOR::_D3DVECTOR(D3DVALUE f)
{
    x = y = z = f;
}

inline
_D3DVECTOR::_D3DVECTOR(D3DVALUE _x, D3DVALUE _y, D3DVALUE _z)
{
    x = _x; y = _y; z = _z;
}

inline
_D3DVECTOR::_D3DVECTOR(const D3DVALUE f[3])
{
    x = f[0]; y = f[1]; z = f[2];
}

// =====================================
// Access grants
// =====================================

inline const D3DVALUE&
_D3DVECTOR::operator[](int i) const
{
    return (&x)[i];
}

inline D3DVALUE&
_D3DVECTOR::operator[](int i)
{
    return (&x)[i];
}


// =====================================
// Assignment operators
// =====================================

inline _D3DVECTOR&
_D3DVECTOR::operator += (const _D3DVECTOR& v)
{
   x += v.x;   y += v.y;   z += v.z;
   return *this;
}

inline _D3DVECTOR&
_D3DVECTOR::operator -= (const _D3DVECTOR& v)
{
   x -= v.x;   y -= v.y;   z -= v.z;
   return *this;
}

inline _D3DVECTOR&
_D3DVECTOR::operator *= (const _D3DVECTOR& v)
{
   x *= v.x;   y *= v.y;   z *= v.z;
   return *this;
}

inline _D3DVECTOR&
_D3DVECTOR::operator /= (const _D3DVECTOR& v)
{
   x /= v.x;   y /= v.y;   z /= v.z;
   return *this;
}

inline _D3DVECTOR&
_D3DVECTOR::operator *= (D3DVALUE s)
{
   x *= s;   y *= s;   z *= s;
   return *this;
}

inline _D3DVECTOR&
_D3DVECTOR::operator /= (D3DVALUE s)
{
   x /= s;   y /= s;   z /= s;
   return *this;
}

inline _D3DVECTOR
operator + (const _D3DVECTOR& v)
{
   return v;
}

inline _D3DVECTOR
operator - (const _D3DVECTOR& v)
{
   return _D3DVECTOR(-v.x, -v.y, -v.z);
}

inline _D3DVECTOR
operator + (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return _D3DVECTOR(v1.x+v2.x, v1.y+v2.y, v1.z+v2.z);
}

inline _D3DVECTOR
operator - (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return _D3DVECTOR(v1.x-v2.x, v1.y-v2.y, v1.z-v2.z);
}

inline _D3DVECTOR
operator * (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return _D3DVECTOR(v1.x*v2.x, v1.y*v2.y, v1.z*v2.z);
}

inline _D3DVECTOR
operator / (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return _D3DVECTOR(v1.x/v2.x, v1.y/v2.y, v1.z/v2.z);
}

inline int
operator < (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return v1[0] < v2[0] && v1[1] < v2[1] && v1[2] < v2[2];
}

inline int
operator <= (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return v1[0] <= v2[0] && v1[1] <= v2[1] && v1[2] <= v2[2];
}

inline _D3DVECTOR
operator * (const _D3DVECTOR& v, D3DVALUE s)
{
   return _D3DVECTOR(s*v.x, s*v.y, s*v.z);
}

inline _D3DVECTOR
operator * (D3DVALUE s, const _D3DVECTOR& v)
{
   return _D3DVECTOR(s*v.x, s*v.y, s*v.z);
}

inline _D3DVECTOR
operator / (const _D3DVECTOR& v, D3DVALUE s)
{
   return _D3DVECTOR(v.x/s, v.y/s, v.z/s);
}

inline int
operator == (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return v1.x==v2.x && v1.y==v2.y && v1.z == v2.z;
}

inline D3DVALUE
Magnitude (const _D3DVECTOR& v)
{
   return (D3DVALUE) sqrt(SquareMagnitude(v));
}

inline D3DVALUE
SquareMagnitude (const _D3DVECTOR& v)
{
   return v.x*v.x + v.y*v.y + v.z*v.z;
}

inline _D3DVECTOR
Normalize (const _D3DVECTOR& v)
{
   return v / Magnitude(v);
}

inline D3DVALUE
Min (const _D3DVECTOR& v)
{
   D3DVALUE ret = v.x;
   if (v.y < ret) ret = v.y;
   if (v.z < ret) ret = v.z;
   return ret;
}

inline D3DVALUE
Max (const _D3DVECTOR& v)
{
   D3DVALUE ret = v.x;
   if (ret < v.y) ret = v.y;
   if (ret < v.z) ret = v.z;
   return ret;
}

inline _D3DVECTOR
Minimize (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return _D3DVECTOR( v1[0] < v2[0] ? v1[0] : v2[0],
                   v1[1] < v2[1] ? v1[1] : v2[1],
                   v1[2] < v2[2] ? v1[2] : v2[2]);
}

inline _D3DVECTOR
Maximize (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return _D3DVECTOR( v1[0] > v2[0] ? v1[0] : v2[0],
                   v1[1] > v2[1] ? v1[1] : v2[1],
                   v1[2] > v2[2] ? v1[2] : v2[2]);
}

inline D3DVALUE
DotProduct (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return v1.x*v2.x + v1.y * v2.y + v1.z*v2.z;
}

inline _D3DVECTOR
CrossProduct (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
	_D3DVECTOR result;

	result[0] = v1[1] * v2[2] - v1[2] * v2[1];
	result[1] = v1[2] * v2[0] - v1[0] * v2[2];
	result[2] = v1[0] * v2[1] - v1[1] * v2[0];

	return result;
}

inline _D3DMATRIX
operator* (const _D3DMATRIX& a, const _D3DMATRIX& b)
{
    _D3DMATRIX ret;
    for (int i=0; i<4; i++) {
        for (int j=0; j<4; j++) {
            ret(i, j) = 0.0f;
            for (int k=0; k<4; k++) {
                ret(i, j) += a(i, k) * b(k, j);
            }
        }
    }
    return ret;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3dx.h ===
///////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 1999 Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dx.h
//  Content:    D3DX utility library
//
///////////////////////////////////////////////////////////////////////////

#ifndef __D3DX_H__
#define __D3DX_H__

#ifndef D3DXINLINE
#ifdef __cplusplus
#define D3DXINLINE inline
#else
#define D3DXINLINE _inline
#endif
#endif

#include "d3dxcore.h"
#include "d3dxmath.h"
#include "d3dxshapes.h"
#include "d3dxsprite.h"

#endif //__D3DX_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3drm.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1995-1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	d3drm.h
 *  Content:	Direct3DRM include file
 *
 ***************************************************************************/

#ifndef __D3DRM_H__
#define __D3DRM_H__

#include "ddraw.h"

#ifdef __cplusplus
struct IDirect3DRM;
#endif

typedef struct IDirect3DRM *LPDIRECT3DRM;

#include "d3drmobj.h"

#ifdef __cplusplus
extern "C" {
#endif


DEFINE_GUID(IID_IDirect3DRM,	0x2bc49361, 0x8327, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRM2,	0x4516ecc8, 0x8f20, 0x11d0, 0x9b, 0x6d, 0x00, 0x00, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(IID_IDirect3DRM3,   0x4516ec83, 0x8f20, 0x11d0, 0x9b, 0x6d, 0x00, 0x00, 0xc0, 0x78, 0x1b, 0xc3);
WIN_TYPES(IDirect3DRM, DIRECT3DRM);
WIN_TYPES(IDirect3DRM2, DIRECT3DRM2);
WIN_TYPES(IDirect3DRM3, DIRECT3DRM3);

/*
 * Direct3DRM Object Class (for CoCreateInstance())
 */
DEFINE_GUID(CLSID_CDirect3DRM,  0x4516ec41, 0x8f20, 0x11d0, 0x9b, 0x6d, 0x00, 0x00, 0xc0, 0x78, 0x1b, 0xc3);


/* Create a Direct3DRM API */
STDAPI Direct3DRMCreate(LPDIRECT3DRM FAR *lplpDirect3DRM);

#undef INTERFACE
#define INTERFACE IDirect3DRM

DECLARE_INTERFACE_(IDirect3DRM, IUnknown)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD(CreateObject)
	(THIS_ REFCLSID rclsid, LPUNKNOWN pUnkOuter, REFIID riid, LPVOID FAR* ppv) PURE;
    STDMETHOD(CreateFrame)	(THIS_ LPDIRECT3DRMFRAME, LPDIRECT3DRMFRAME *) PURE;
    STDMETHOD(CreateMesh)	(THIS_ LPDIRECT3DRMMESH *) PURE;
    STDMETHOD(CreateMeshBuilder)(THIS_ LPDIRECT3DRMMESHBUILDER *) PURE;
    STDMETHOD(CreateFace)	(THIS_ LPDIRECT3DRMFACE *) PURE;
    STDMETHOD(CreateAnimation)	(THIS_ LPDIRECT3DRMANIMATION *) PURE;
    STDMETHOD(CreateAnimationSet)(THIS_ LPDIRECT3DRMANIMATIONSET *) PURE;
    STDMETHOD(CreateTexture)	(THIS_ LPD3DRMIMAGE, LPDIRECT3DRMTEXTURE *) PURE;
    STDMETHOD(CreateLight)	(THIS_ D3DRMLIGHTTYPE, D3DCOLOR, LPDIRECT3DRMLIGHT *) PURE;
    STDMETHOD(CreateLightRGB)
	(THIS_ D3DRMLIGHTTYPE, D3DVALUE, D3DVALUE, D3DVALUE, LPDIRECT3DRMLIGHT *) PURE;
    STDMETHOD(CreateMaterial)	(THIS_ D3DVALUE, LPDIRECT3DRMMATERIAL *) PURE;
    STDMETHOD(CreateDevice)	(THIS_ DWORD, DWORD, LPDIRECT3DRMDEVICE *) PURE;

    /* Create a Windows Device using DirectDraw surfaces */
    STDMETHOD(CreateDeviceFromSurface)
    (	THIS_ LPGUID lpGUID, LPDIRECTDRAW lpDD,
	LPDIRECTDRAWSURFACE lpDDSBack, LPDIRECT3DRMDEVICE *
    ) PURE;

    /* Create a Windows Device using D3D objects */
    STDMETHOD(CreateDeviceFromD3D)
    (	THIS_ LPDIRECT3D lpD3D, LPDIRECT3DDEVICE lpD3DDev,
	LPDIRECT3DRMDEVICE *
    ) PURE;

    STDMETHOD(CreateDeviceFromClipper)
    (	THIS_ LPDIRECTDRAWCLIPPER lpDDClipper, LPGUID lpGUID,
	int width, int height, LPDIRECT3DRMDEVICE *) PURE;

    STDMETHOD(CreateTextureFromSurface)(THIS_ LPDIRECTDRAWSURFACE lpDDS, LPDIRECT3DRMTEXTURE *) PURE;
   
    STDMETHOD(CreateShadow)
    (	THIS_ LPDIRECT3DRMVISUAL, LPDIRECT3DRMLIGHT,
	D3DVALUE px, D3DVALUE py, D3DVALUE pz,
	D3DVALUE nx, D3DVALUE ny, D3DVALUE nz,
	LPDIRECT3DRMVISUAL *
    ) PURE;
    STDMETHOD(CreateViewport)
    (	THIS_ LPDIRECT3DRMDEVICE, LPDIRECT3DRMFRAME, DWORD, DWORD,
	DWORD, DWORD, LPDIRECT3DRMVIEWPORT *
    ) PURE;
    STDMETHOD(CreateWrap)
    (	THIS_ D3DRMWRAPTYPE, LPDIRECT3DRMFRAME,
	D3DVALUE ox, D3DVALUE oy, D3DVALUE oz,
	D3DVALUE dx, D3DVALUE dy, D3DVALUE dz,
	D3DVALUE ux, D3DVALUE uy, D3DVALUE uz,
	D3DVALUE ou, D3DVALUE ov,
	D3DVALUE su, D3DVALUE sv,
	LPDIRECT3DRMWRAP *
    ) PURE;
    STDMETHOD(CreateUserVisual) (THIS_ D3DRMUSERVISUALCALLBACK, LPVOID lPArg, LPDIRECT3DRMUSERVISUAL *) PURE;
    STDMETHOD(LoadTexture)	(THIS_ const char *, LPDIRECT3DRMTEXTURE *) PURE;
    STDMETHOD(LoadTextureFromResource)	(THIS_ HRSRC rs, LPDIRECT3DRMTEXTURE *) PURE;
   
    STDMETHOD(SetSearchPath)	(THIS_ LPCSTR) PURE;
    STDMETHOD(AddSearchPath)	(THIS_ LPCSTR) PURE;
    STDMETHOD(GetSearchPath)	(THIS_ DWORD *size_return, LPSTR path_return) PURE;
    STDMETHOD(SetDefaultTextureColors)(THIS_ DWORD) PURE;
    STDMETHOD(SetDefaultTextureShades)(THIS_ DWORD) PURE;
   
    STDMETHOD(GetDevices)	(THIS_ LPDIRECT3DRMDEVICEARRAY *) PURE;
    STDMETHOD(GetNamedObject)	(THIS_ const char *, LPDIRECT3DRMOBJECT *) PURE;
   
    STDMETHOD(EnumerateObjects)	(THIS_ D3DRMOBJECTCALLBACK, LPVOID) PURE;
   
    STDMETHOD(Load)		
    (   THIS_ LPVOID, LPVOID, LPIID *, DWORD, D3DRMLOADOPTIONS,
    	D3DRMLOADCALLBACK, LPVOID, D3DRMLOADTEXTURECALLBACK, LPVOID,
	LPDIRECT3DRMFRAME
    ) PURE;
    STDMETHOD(Tick)		(THIS_ D3DVALUE) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRM2

DECLARE_INTERFACE_(IDirect3DRM2, IUnknown)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD(CreateObject)
	(THIS_ REFCLSID rclsid, LPUNKNOWN pUnkOuter, REFIID riid, LPVOID FAR* ppv) PURE;
    STDMETHOD(CreateFrame)	(THIS_ LPDIRECT3DRMFRAME, LPDIRECT3DRMFRAME2 *) PURE;
    STDMETHOD(CreateMesh)	(THIS_ LPDIRECT3DRMMESH *) PURE;
    STDMETHOD(CreateMeshBuilder)(THIS_ LPDIRECT3DRMMESHBUILDER2 *) PURE;
    STDMETHOD(CreateFace)	(THIS_ LPDIRECT3DRMFACE *) PURE;
    STDMETHOD(CreateAnimation)	(THIS_ LPDIRECT3DRMANIMATION *) PURE;
    STDMETHOD(CreateAnimationSet)(THIS_ LPDIRECT3DRMANIMATIONSET *) PURE;
    STDMETHOD(CreateTexture)	(THIS_ LPD3DRMIMAGE, LPDIRECT3DRMTEXTURE2 *) PURE;
    STDMETHOD(CreateLight)	(THIS_ D3DRMLIGHTTYPE, D3DCOLOR, LPDIRECT3DRMLIGHT *) PURE;
    STDMETHOD(CreateLightRGB)
	(THIS_ D3DRMLIGHTTYPE, D3DVALUE, D3DVALUE, D3DVALUE, LPDIRECT3DRMLIGHT *) PURE;
    STDMETHOD(CreateMaterial)	(THIS_ D3DVALUE, LPDIRECT3DRMMATERIAL *) PURE;
    STDMETHOD(CreateDevice)	(THIS_ DWORD, DWORD, LPDIRECT3DRMDEVICE2 *) PURE;

    /* Create a Windows Device using DirectDraw surfaces */
    STDMETHOD(CreateDeviceFromSurface)
    (	THIS_ LPGUID lpGUID, LPDIRECTDRAW lpDD,
	LPDIRECTDRAWSURFACE lpDDSBack, LPDIRECT3DRMDEVICE2 *
    ) PURE;

    /* Create a Windows Device using D3D objects */
    STDMETHOD(CreateDeviceFromD3D)
    (	THIS_ LPDIRECT3D2 lpD3D, LPDIRECT3DDEVICE2 lpD3DDev,
	LPDIRECT3DRMDEVICE2 *
    ) PURE;

    STDMETHOD(CreateDeviceFromClipper)
    (	THIS_ LPDIRECTDRAWCLIPPER lpDDClipper, LPGUID lpGUID,
	int width, int height, LPDIRECT3DRMDEVICE2 *) PURE;

    STDMETHOD(CreateTextureFromSurface)(THIS_ LPDIRECTDRAWSURFACE lpDDS, LPDIRECT3DRMTEXTURE2 *) PURE;
   
    STDMETHOD(CreateShadow)
    (	THIS_ LPDIRECT3DRMVISUAL, LPDIRECT3DRMLIGHT,
	D3DVALUE px, D3DVALUE py, D3DVALUE pz,
	D3DVALUE nx, D3DVALUE ny, D3DVALUE nz,
	LPDIRECT3DRMVISUAL *
    ) PURE;
    STDMETHOD(CreateViewport)
    (	THIS_ LPDIRECT3DRMDEVICE, LPDIRECT3DRMFRAME, DWORD, DWORD,
	DWORD, DWORD, LPDIRECT3DRMVIEWPORT *
    ) PURE;
    STDMETHOD(CreateWrap)
    (	THIS_ D3DRMWRAPTYPE, LPDIRECT3DRMFRAME,
	D3DVALUE ox, D3DVALUE oy, D3DVALUE oz,
	D3DVALUE dx, D3DVALUE dy, D3DVALUE dz,
	D3DVALUE ux, D3DVALUE uy, D3DVALUE uz,
	D3DVALUE ou, D3DVALUE ov,
	D3DVALUE su, D3DVALUE sv,
	LPDIRECT3DRMWRAP *
    ) PURE;
    STDMETHOD(CreateUserVisual) (THIS_ D3DRMUSERVISUALCALLBACK, LPVOID lPArg, LPDIRECT3DRMUSERVISUAL *) PURE;
    STDMETHOD(LoadTexture)	(THIS_ const char *, LPDIRECT3DRMTEXTURE2 *) PURE;
    STDMETHOD(LoadTextureFromResource)	(THIS_ HMODULE hModule, LPCTSTR strName, LPCTSTR strType, LPDIRECT3DRMTEXTURE2 *) PURE;
   
    STDMETHOD(SetSearchPath)	(THIS_ LPCSTR) PURE;
    STDMETHOD(AddSearchPath)	(THIS_ LPCSTR) PURE;
    STDMETHOD(GetSearchPath)	(THIS_ DWORD *size_return, LPSTR path_return) PURE;
    STDMETHOD(SetDefaultTextureColors)(THIS_ DWORD) PURE;
    STDMETHOD(SetDefaultTextureShades)(THIS_ DWORD) PURE;
   
    STDMETHOD(GetDevices)	(THIS_ LPDIRECT3DRMDEVICEARRAY *) PURE;
    STDMETHOD(GetNamedObject)	(THIS_ const char *, LPDIRECT3DRMOBJECT *) PURE;
   
    STDMETHOD(EnumerateObjects)	(THIS_ D3DRMOBJECTCALLBACK, LPVOID) PURE;
   
    STDMETHOD(Load)		
    (   THIS_ LPVOID, LPVOID, LPIID *, DWORD, D3DRMLOADOPTIONS,
    	D3DRMLOADCALLBACK, LPVOID, D3DRMLOADTEXTURECALLBACK, LPVOID,
	LPDIRECT3DRMFRAME
    ) PURE;
    STDMETHOD(Tick)		(THIS_ D3DVALUE) PURE;

    STDMETHOD(CreateProgressiveMesh)(THIS_ LPDIRECT3DRMPROGRESSIVEMESH *) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRM3

DECLARE_INTERFACE_(IDirect3DRM3, IUnknown)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD(CreateObject)
	(THIS_ REFCLSID rclsid, LPUNKNOWN pUnkOuter, REFIID riid, LPVOID FAR* ppv) PURE;
    STDMETHOD(CreateFrame)	(THIS_ LPDIRECT3DRMFRAME3, LPDIRECT3DRMFRAME3 *) PURE;
    STDMETHOD(CreateMesh)	(THIS_ LPDIRECT3DRMMESH *) PURE;
    STDMETHOD(CreateMeshBuilder)(THIS_ LPDIRECT3DRMMESHBUILDER3 *) PURE;
    STDMETHOD(CreateFace)	(THIS_ LPDIRECT3DRMFACE2 *) PURE;
    STDMETHOD(CreateAnimation)	(THIS_ LPDIRECT3DRMANIMATION2 *) PURE;
    STDMETHOD(CreateAnimationSet)(THIS_ LPDIRECT3DRMANIMATIONSET2 *) PURE;
    STDMETHOD(CreateTexture)	(THIS_ LPD3DRMIMAGE, LPDIRECT3DRMTEXTURE3 *) PURE;
    STDMETHOD(CreateLight)	(THIS_ D3DRMLIGHTTYPE, D3DCOLOR, LPDIRECT3DRMLIGHT *) PURE;
    STDMETHOD(CreateLightRGB)
	(THIS_ D3DRMLIGHTTYPE, D3DVALUE, D3DVALUE, D3DVALUE, LPDIRECT3DRMLIGHT *) PURE;
    STDMETHOD(CreateMaterial)	(THIS_ D3DVALUE, LPDIRECT3DRMMATERIAL2 *) PURE;
    STDMETHOD(CreateDevice)	(THIS_ DWORD, DWORD, LPDIRECT3DRMDEVICE3 *) PURE;

    /* Create a Windows Device using DirectDraw surfaces */
    STDMETHOD(CreateDeviceFromSurface)
    (	THIS_ LPGUID lpGUID, LPDIRECTDRAW lpDD,
	LPDIRECTDRAWSURFACE lpDDSBack, DWORD dwFlags, LPDIRECT3DRMDEVICE3 *
    ) PURE;

    /* Create a Windows Device using D3D objects */
    STDMETHOD(CreateDeviceFromD3D)
    (	THIS_ LPDIRECT3D2 lpD3D, LPDIRECT3DDEVICE2 lpD3DDev,
	LPDIRECT3DRMDEVICE3 *
    ) PURE;

    STDMETHOD(CreateDeviceFromClipper)
    (	THIS_ LPDIRECTDRAWCLIPPER lpDDClipper, LPGUID lpGUID,
	int width, int height, LPDIRECT3DRMDEVICE3 *) PURE;

    STDMETHOD(CreateTextureFromSurface)(THIS_ LPDIRECTDRAWSURFACE lpDDS, LPDIRECT3DRMTEXTURE3 *) PURE;
   
    STDMETHOD(CreateShadow)
    (	THIS_ LPUNKNOWN, LPDIRECT3DRMLIGHT,
	D3DVALUE px, D3DVALUE py, D3DVALUE pz,
	D3DVALUE nx, D3DVALUE ny, D3DVALUE nz,
	LPDIRECT3DRMSHADOW2 *
    ) PURE;
    STDMETHOD(CreateViewport)
    (	THIS_ LPDIRECT3DRMDEVICE3, LPDIRECT3DRMFRAME3, DWORD, DWORD,
	DWORD, DWORD, LPDIRECT3DRMVIEWPORT2 *
    ) PURE;
    STDMETHOD(CreateWrap)
    (	THIS_ D3DRMWRAPTYPE, LPDIRECT3DRMFRAME3,
	D3DVALUE ox, D3DVALUE oy, D3DVALUE oz,
	D3DVALUE dx, D3DVALUE dy, D3DVALUE dz,
	D3DVALUE ux, D3DVALUE uy, D3DVALUE uz,
	D3DVALUE ou, D3DVALUE ov,
	D3DVALUE su, D3DVALUE sv,
	LPDIRECT3DRMWRAP *
    ) PURE;
    STDMETHOD(CreateUserVisual) (THIS_ D3DRMUSERVISUALCALLBACK, LPVOID lPArg, LPDIRECT3DRMUSERVISUAL *) PURE;
    STDMETHOD(LoadTexture)	(THIS_ const char *, LPDIRECT3DRMTEXTURE3 *) PURE;
    STDMETHOD(LoadTextureFromResource)	(THIS_ HMODULE hModule, LPCTSTR strName, LPCTSTR strType, LPDIRECT3DRMTEXTURE3 *) PURE;
   
    STDMETHOD(SetSearchPath)	(THIS_ LPCSTR) PURE;
    STDMETHOD(AddSearchPath)	(THIS_ LPCSTR) PURE;
    STDMETHOD(GetSearchPath)	(THIS_ DWORD *size_return, LPSTR path_return) PURE;
    STDMETHOD(SetDefaultTextureColors)(THIS_ DWORD) PURE;
    STDMETHOD(SetDefaultTextureShades)(THIS_ DWORD) PURE;
   
    STDMETHOD(GetDevices)	(THIS_ LPDIRECT3DRMDEVICEARRAY *) PURE;
    STDMETHOD(GetNamedObject)	(THIS_ const char *, LPDIRECT3DRMOBJECT *) PURE;
   
    STDMETHOD(EnumerateObjects)	(THIS_ D3DRMOBJECTCALLBACK, LPVOID) PURE;
   
    STDMETHOD(Load)		
    (   THIS_ LPVOID, LPVOID, LPIID *, DWORD, D3DRMLOADOPTIONS,
    	D3DRMLOADCALLBACK, LPVOID, D3DRMLOADTEXTURE3CALLBACK, LPVOID,
	LPDIRECT3DRMFRAME3
    ) PURE;
    STDMETHOD(Tick)		(THIS_ D3DVALUE) PURE;

    STDMETHOD(CreateProgressiveMesh)(THIS_ LPDIRECT3DRMPROGRESSIVEMESH *) PURE;

    /* Used with IDirect3DRMObject2 */
    STDMETHOD(RegisterClient)   (THIS_ REFGUID rguid, LPDWORD lpdwID) PURE;
    STDMETHOD(UnregisterClient) (THIS_ REFGUID rguid) PURE;

    STDMETHOD(CreateClippedVisual) (THIS_ LPDIRECT3DRMVISUAL, LPDIRECT3DRMCLIPPEDVISUAL *) PURE;
    STDMETHOD(SetOptions) (THIS_ DWORD);
    STDMETHOD(GetOptions) (THIS_ LPDWORD);
};

#define D3DRM_OK			DD_OK
#define D3DRMERR_BADOBJECT		MAKE_DDHRESULT(781)
#define D3DRMERR_BADTYPE		MAKE_DDHRESULT(782)
#define D3DRMERR_BADALLOC		MAKE_DDHRESULT(783)
#define D3DRMERR_FACEUSED		MAKE_DDHRESULT(784)
#define D3DRMERR_NOTFOUND		MAKE_DDHRESULT(785)
#define D3DRMERR_NOTDONEYET		MAKE_DDHRESULT(786)
#define D3DRMERR_FILENOTFOUND		MAKE_DDHRESULT(787)
#define D3DRMERR_BADFILE		MAKE_DDHRESULT(788)
#define D3DRMERR_BADDEVICE		MAKE_DDHRESULT(789)
#define D3DRMERR_BADVALUE		MAKE_DDHRESULT(790)
#define D3DRMERR_BADMAJORVERSION	MAKE_DDHRESULT(791)
#define D3DRMERR_BADMINORVERSION	MAKE_DDHRESULT(792)
#define D3DRMERR_UNABLETOEXECUTE	MAKE_DDHRESULT(793)
#define D3DRMERR_LIBRARYNOTFOUND        MAKE_DDHRESULT(794)
#define D3DRMERR_INVALIDLIBRARY         MAKE_DDHRESULT(795)
#define D3DRMERR_PENDING                MAKE_DDHRESULT(796)
#define D3DRMERR_NOTENOUGHDATA          MAKE_DDHRESULT(797)
#define D3DRMERR_REQUESTTOOLARGE        MAKE_DDHRESULT(798)
#define D3DRMERR_REQUESTTOOSMALL        MAKE_DDHRESULT(799)
#define D3DRMERR_CONNECTIONLOST         MAKE_DDHRESULT(800)
#define D3DRMERR_LOADABORTED            MAKE_DDHRESULT(801)
#define D3DRMERR_NOINTERNET             MAKE_DDHRESULT(802)
#define D3DRMERR_BADCACHEFILE           MAKE_DDHRESULT(803)
#define D3DRMERR_BOXNOTSET		MAKE_DDHRESULT(804)
#define D3DRMERR_BADPMDATA              MAKE_DDHRESULT(805)
#define D3DRMERR_CLIENTNOTREGISTERED    MAKE_DDHRESULT(806)
#define D3DRMERR_NOTCREATEDFROMDDS	MAKE_DDHRESULT(807)
#define D3DRMERR_NOSUCHKEY              MAKE_DDHRESULT(808)
#define D3DRMERR_INCOMPATABLEKEY        MAKE_DDHRESULT(809)
#define D3DRMERR_ELEMENTINUSE		MAKE_DDHRESULT(810)
#define D3DRMERR_TEXTUREFORMATNOTFOUND  MAKE_DDHRESULT(811)
#define D3DRMERR_NOTAGGREGATED          MAKE_DDHRESULT(812)

#ifdef __cplusplus
};
#endif

#endif /* _D3DRMAPI_H_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3dxerr.h ===
//----------------------------------------------------------------------
//                                                                      
//   d3dxerr.h --  0xC code definitions for the D3DX API                
//                                                                      
//   Copyright (c) 1991-1999, Microsoft Corp. All rights reserved.      
//                                                                      
//----------------------------------------------------------------------
#ifndef __D3DXERR_H__
#define __D3DXERR_H__

// 
//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//
#define FACILITY_D3DX    0x877



//
// MessageId: D3DXERR_NOMEMORY
//
// MessageText:
//
//  Out of memory.
// 
#define D3DXERR_NOMEMORY    ((HRESULT)0xC8770BB8L)


//
// MessageId: D3DXERR_NULLPOINTER
//
// MessageText:
//
//  A NULL pointer was passed as a parameter.
// 
#define D3DXERR_NULLPOINTER    ((HRESULT)0xC8770BB9L)


//
// MessageId: D3DXERR_INVALIDD3DXDEVICEINDEX
//
// MessageText:
//
//  The Device Index passed in is invalid.
// 
#define D3DXERR_INVALIDD3DXDEVICEINDEX    ((HRESULT)0xC8770BBAL)


//
// MessageId: D3DXERR_NODIRECTDRAWAVAILABLE
//
// MessageText:
//
//  DirectDraw has not been created.
// 
#define D3DXERR_NODIRECTDRAWAVAILABLE    ((HRESULT)0xC8770BBBL)


//
// MessageId: D3DXERR_NODIRECT3DAVAILABLE
//
// MessageText:
//
//  Direct3D has not been created.
// 
#define D3DXERR_NODIRECT3DAVAILABLE    ((HRESULT)0xC8770BBCL)


//
// MessageId: D3DXERR_NODIRECT3DDEVICEAVAILABLE
//
// MessageText:
//
//  Direct3D device has not been created.
// 
#define D3DXERR_NODIRECT3DDEVICEAVAILABLE    ((HRESULT)0xC8770BBDL)


//
// MessageId: D3DXERR_NOPRIMARYAVAILABLE
//
// MessageText:
//
//  Primary surface has not been created.
// 
#define D3DXERR_NOPRIMARYAVAILABLE    ((HRESULT)0xC8770BBEL)


//
// MessageId: D3DXERR_NOZBUFFERAVAILABLE
//
// MessageText:
//
//  Z buffer has not been created.
// 
#define D3DXERR_NOZBUFFERAVAILABLE    ((HRESULT)0xC8770BBFL)


//
// MessageId: D3DXERR_NOBACKBUFFERAVAILABLE
//
// MessageText:
//
//  Backbuffer has not been created.
// 
#define D3DXERR_NOBACKBUFFERAVAILABLE    ((HRESULT)0xC8770BC0L)


//
// MessageId: D3DXERR_COULDNTUPDATECAPS
//
// MessageText:
//
//  Failed to update caps database after changing display mode.
// 
#define D3DXERR_COULDNTUPDATECAPS    ((HRESULT)0xC8770BC1L)


//
// MessageId: D3DXERR_NOZBUFFER
//
// MessageText:
//
//  Could not create Z buffer.
// 
#define D3DXERR_NOZBUFFER    ((HRESULT)0xC8770BC2L)


//
// MessageId: D3DXERR_INVALIDMODE
//
// MessageText:
//
//  Display mode is not valid.
// 
#define D3DXERR_INVALIDMODE    ((HRESULT)0xC8770BC3L)


//
// MessageId: D3DXERR_INVALIDPARAMETER
//
// MessageText:
//
//  One or more of the parameters passed is invalid.
// 
#define D3DXERR_INVALIDPARAMETER    ((HRESULT)0xC8770BC4L)


//
// MessageId: D3DXERR_INITFAILED
//
// MessageText:
//
//  D3DX failed to initialize itself.
// 
#define D3DXERR_INITFAILED    ((HRESULT)0xC8770BC5L)


//
// MessageId: D3DXERR_STARTUPFAILED
//
// MessageText:
//
//  D3DX failed to start up.
// 
#define D3DXERR_STARTUPFAILED    ((HRESULT)0xC8770BC6L)


//
// MessageId: D3DXERR_D3DXNOTSTARTEDYET
//
// MessageText:
//
//  D3DXInitialize() must be called first.
// 
#define D3DXERR_D3DXNOTSTARTEDYET    ((HRESULT)0xC8770BC7L)


//
// MessageId: D3DXERR_NOTINITIALIZED
//
// MessageText:
//
//  D3DX is not initialized yet.
// 
#define D3DXERR_NOTINITIALIZED    ((HRESULT)0xC8770BC8L)


//
// MessageId: D3DXERR_FAILEDDRAWTEXT
//
// MessageText:
//
//  Failed to render text to the surface.
// 
#define D3DXERR_FAILEDDRAWTEXT    ((HRESULT)0xC8770BC9L)


//
// MessageId: D3DXERR_BADD3DXCONTEXT
//
// MessageText:
//
//  Bad D3DX context.
// 
#define D3DXERR_BADD3DXCONTEXT    ((HRESULT)0xC8770BCAL)


//
// MessageId: D3DXERR_CAPSNOTSUPPORTED
//
// MessageText:
//
//  The requested device capabilities are not supported.
// 
#define D3DXERR_CAPSNOTSUPPORTED    ((HRESULT)0xC8770BCBL)


//
// MessageId: D3DXERR_UNSUPPORTEDFILEFORMAT
//
// MessageText:
//
//  The image file format is unrecognized.
// 
#define D3DXERR_UNSUPPORTEDFILEFORMAT    ((HRESULT)0xC8770BCCL)


//
// MessageId: D3DXERR_IFLERROR
//
// MessageText:
//
//  The image file loading library error.
// 
#define D3DXERR_IFLERROR    ((HRESULT)0xC8770BCDL)


//
// MessageId: D3DXERR_FAILEDGETCAPS
//
// MessageText:
//
//  Could not obtain device caps.
// 
#define D3DXERR_FAILEDGETCAPS    ((HRESULT)0xC8770BCEL)


//
// MessageId: D3DXERR_CANNOTRESIZEFULLSCREEN
//
// MessageText:
//
//  Resize does not work for full-screen.
// 
#define D3DXERR_CANNOTRESIZEFULLSCREEN    ((HRESULT)0xC8770BCFL)


//
// MessageId: D3DXERR_CANNOTRESIZENONWINDOWED
//
// MessageText:
//
//  Resize does not work for non-windowed contexts.
// 
#define D3DXERR_CANNOTRESIZENONWINDOWED    ((HRESULT)0xC8770BD0L)


//
// MessageId: D3DXERR_FRONTBUFFERALREADYEXISTS
//
// MessageText:
//
//  Front buffer already exists.
// 
#define D3DXERR_FRONTBUFFERALREADYEXISTS    ((HRESULT)0xC8770BD1L)


//
// MessageId: D3DXERR_FULLSCREENPRIMARYEXISTS
//
// MessageText:
//
//  The app is using the primary in full-screen mode.
// 
#define D3DXERR_FULLSCREENPRIMARYEXISTS    ((HRESULT)0xC8770BD2L)


//
// MessageId: D3DXERR_GETDCFAILED
//
// MessageText:
//
//  Could not get device context.
// 
#define D3DXERR_GETDCFAILED    ((HRESULT)0xC8770BD3L)


//
// MessageId: D3DXERR_BITBLTFAILED
//
// MessageText:
//
//  Could not bitBlt.
// 
#define D3DXERR_BITBLTFAILED    ((HRESULT)0xC8770BD4L)


//
// MessageId: D3DXERR_NOTEXTURE
//
// MessageText:
//
//  There is no surface backing up this texture.
// 
#define D3DXERR_NOTEXTURE    ((HRESULT)0xC8770BD5L)


//
// MessageId: D3DXERR_MIPLEVELABSENT
//
// MessageText:
//
//  There is no such miplevel for this surface.
// 
#define D3DXERR_MIPLEVELABSENT    ((HRESULT)0xC8770BD6L)


//
// MessageId: D3DXERR_SURFACENOTPALETTED
//
// MessageText:
//
//  The surface is not paletted.
// 
#define D3DXERR_SURFACENOTPALETTED    ((HRESULT)0xC8770BD7L)


//
// MessageId: D3DXERR_ENUMFORMATSFAILED
//
// MessageText:
//
//  An error occured while enumerating surface formats.
// 
#define D3DXERR_ENUMFORMATSFAILED    ((HRESULT)0xC8770BD8L)


//
// MessageId: D3DXERR_COLORDEPTHTOOLOW
//
// MessageText:
//
//  D3DX only supports color depths of 16 bit or greater.
// 
#define D3DXERR_COLORDEPTHTOOLOW    ((HRESULT)0xC8770BD9L)


//
// MessageId: D3DXERR_INVALIDFILEFORMAT
//
// MessageText:
//
//  The file format is invalid.
// 
#define D3DXERR_INVALIDFILEFORMAT    ((HRESULT)0xC8770BDAL)


//
// MessageId: D3DXERR_NOMATCHFOUND
//
// MessageText:
//
//  No suitable match found.
// 
#define D3DXERR_NOMATCHFOUND    ((HRESULT)0xC8770BDBL)



#endif //__D3DXERR_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3drmdef.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1995-1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	d3drm.h
 *  Content:	Direct3DRM include file
 *
 ***************************************************************************/

#ifndef __D3DRMDEFS_H__
#define __D3DRMDEFS_H__

#include <stddef.h>
#include "d3dtypes.h"

#ifdef WIN32
#define D3DRMAPI  __stdcall
#else
#define D3DRMAPI
#endif

#if defined(__cplusplus)
extern "C" {
#endif

#ifndef TRUE
#define FALSE 0
#define TRUE 1
#endif

typedef struct _D3DRMVECTOR4D
{   D3DVALUE x, y, z, w;
} D3DRMVECTOR4D, *LPD3DRMVECTOR4D;

typedef D3DVALUE D3DRMMATRIX4D[4][4];

typedef struct _D3DRMQUATERNION
{   D3DVALUE s;
    D3DVECTOR v;
} D3DRMQUATERNION, *LPD3DRMQUATERNION;

typedef struct _D3DRMRAY
{   D3DVECTOR dvDir;
    D3DVECTOR dvPos;
} D3DRMRAY, *LPD3DRMRAY;

typedef struct _D3DRMBOX
{   D3DVECTOR min, max;
} D3DRMBOX, *LPD3DRMBOX;

typedef void (*D3DRMWRAPCALLBACK)
    (LPD3DVECTOR, int* u, int* v, LPD3DVECTOR a, LPD3DVECTOR b, LPVOID);

typedef enum _D3DRMLIGHTTYPE
{   D3DRMLIGHT_AMBIENT,
    D3DRMLIGHT_POINT,
    D3DRMLIGHT_SPOT,
    D3DRMLIGHT_DIRECTIONAL,
    D3DRMLIGHT_PARALLELPOINT
} D3DRMLIGHTTYPE, *LPD3DRMLIGHTTYPE;

typedef enum _D3DRMSHADEMODE {
    D3DRMSHADE_FLAT	= 0,
    D3DRMSHADE_GOURAUD	= 1,
    D3DRMSHADE_PHONG	= 2,

    D3DRMSHADE_MASK	= 7,
    D3DRMSHADE_MAX	= 8
} D3DRMSHADEMODE, *LPD3DRMSHADEMODE;

typedef enum _D3DRMLIGHTMODE {
    D3DRMLIGHT_OFF	= 0 * D3DRMSHADE_MAX,
    D3DRMLIGHT_ON	= 1 * D3DRMSHADE_MAX,

    D3DRMLIGHT_MASK	= 7 * D3DRMSHADE_MAX,
    D3DRMLIGHT_MAX	= 8 * D3DRMSHADE_MAX
} D3DRMLIGHTMODE, *LPD3DRMLIGHTMODE;

typedef enum _D3DRMFILLMODE {
    D3DRMFILL_POINTS	= 0 * D3DRMLIGHT_MAX,
    D3DRMFILL_WIREFRAME	= 1 * D3DRMLIGHT_MAX,
    D3DRMFILL_SOLID	= 2 * D3DRMLIGHT_MAX,

    D3DRMFILL_MASK	= 7 * D3DRMLIGHT_MAX,
    D3DRMFILL_MAX	= 8 * D3DRMLIGHT_MAX
} D3DRMFILLMODE, *LPD3DRMFILLMODE;

typedef DWORD D3DRMRENDERQUALITY, *LPD3DRMRENDERQUALITY;

#define D3DRMRENDER_WIREFRAME	(D3DRMSHADE_FLAT+D3DRMLIGHT_OFF+D3DRMFILL_WIREFRAME)
#define D3DRMRENDER_UNLITFLAT	(D3DRMSHADE_FLAT+D3DRMLIGHT_OFF+D3DRMFILL_SOLID)
#define D3DRMRENDER_FLAT	(D3DRMSHADE_FLAT+D3DRMLIGHT_ON+D3DRMFILL_SOLID)
#define D3DRMRENDER_GOURAUD	(D3DRMSHADE_GOURAUD+D3DRMLIGHT_ON+D3DRMFILL_SOLID)
#define D3DRMRENDER_PHONG	(D3DRMSHADE_PHONG+D3DRMLIGHT_ON+D3DRMFILL_SOLID)

#define D3DRMRENDERMODE_BLENDEDTRANSPARENCY	1
#define D3DRMRENDERMODE_SORTEDTRANSPARENCY	2
#define D3DRMRENDERMODE_LIGHTINMODELSPACE	8
#define D3DRMRENDERMODE_VIEWDEPENDENTSPECULAR	16
#define D3DRMRENDERMODE_DISABLESORTEDALPHAZWRITE 32

typedef enum _D3DRMTEXTUREQUALITY
{   D3DRMTEXTURE_NEAREST,		/* choose nearest texel */
    D3DRMTEXTURE_LINEAR,		/* interpolate 4 texels */
    D3DRMTEXTURE_MIPNEAREST,		/* nearest texel in nearest mipmap  */
    D3DRMTEXTURE_MIPLINEAR,		/* interpolate 2 texels from 2 mipmaps */
    D3DRMTEXTURE_LINEARMIPNEAREST,	/* interpolate 4 texels in nearest mipmap */
    D3DRMTEXTURE_LINEARMIPLINEAR	/* interpolate 8 texels from 2 mipmaps */
} D3DRMTEXTUREQUALITY, *LPD3DRMTEXTUREQUALITY;

/*
 * Texture flags
 */
#define D3DRMTEXTURE_FORCERESIDENT	    0x00000001 /* texture should be kept in video memory */
#define D3DRMTEXTURE_STATIC		    0x00000002 /* texture will not change */
#define D3DRMTEXTURE_DOWNSAMPLEPOINT	    0x00000004 /* point filtering should be used when downsampling */
#define D3DRMTEXTURE_DOWNSAMPLEBILINEAR	    0x00000008 /* bilinear filtering should be used when downsampling */
#define D3DRMTEXTURE_DOWNSAMPLEREDUCEDEPTH  0x00000010 /* reduce bit depth when downsampling */
#define D3DRMTEXTURE_DOWNSAMPLENONE	    0x00000020 /* texture should never be downsampled */
#define D3DRMTEXTURE_CHANGEDPIXELS	    0x00000040 /* pixels have changed */
#define D3DRMTEXTURE_CHANGEDPALETTE	    0x00000080 /* palette has changed */
#define D3DRMTEXTURE_INVALIDATEONLY	    0x00000100 /* dirty regions are invalid */

/*
 * Shadow flags
 */
#define D3DRMSHADOW_TRUEALPHA		    0x00000001 /* shadow should render without artifacts when true alpha is on */

typedef enum _D3DRMCOMBINETYPE
{   D3DRMCOMBINE_REPLACE,
    D3DRMCOMBINE_BEFORE,
    D3DRMCOMBINE_AFTER
} D3DRMCOMBINETYPE, *LPD3DRMCOMBINETYPE;

typedef D3DCOLORMODEL D3DRMCOLORMODEL, *LPD3DRMCOLORMODEL;

typedef enum _D3DRMPALETTEFLAGS
{   D3DRMPALETTE_FREE,			/* renderer may use this entry freely */
    D3DRMPALETTE_READONLY,		/* fixed but may be used by renderer */
    D3DRMPALETTE_RESERVED		/* may not be used by renderer */
} D3DRMPALETTEFLAGS, *LPD3DRMPALETTEFLAGS;

typedef struct _D3DRMPALETTEENTRY
{   unsigned char red;		/* 0 .. 255 */
    unsigned char green;	/* 0 .. 255 */
    unsigned char blue;		/* 0 .. 255 */
    unsigned char flags;	/* one of D3DRMPALETTEFLAGS */
} D3DRMPALETTEENTRY, *LPD3DRMPALETTEENTRY;

typedef struct _D3DRMIMAGE
{   int width, height;		/* width and height in pixels */
    int aspectx, aspecty;	/* aspect ratio for non-square pixels */
    int depth;			/* bits per pixel */
    int rgb;			/* if false, pixels are indices into a
				   palette otherwise, pixels encode
				   RGB values. */
    int bytes_per_line;		/* number of bytes of memory for a
				   scanline. This must be a multiple
				   of 4. */
    void* buffer1;		/* memory to render into (first buffer). */
    void* buffer2;		/* second rendering buffer for double
				   buffering, set to NULL for single
				   buffering. */
    unsigned long red_mask;
    unsigned long green_mask;
    unsigned long blue_mask;
    unsigned long alpha_mask;	/* if rgb is true, these are masks for
				   the red, green and blue parts of a
				   pixel.  Otherwise, these are masks
				   for the significant bits of the
				   red, green and blue elements in the
				   palette.  For instance, most SVGA
				   displays use 64 intensities of red,
				   green and blue, so the masks should
				   all be set to 0xfc. */
    int palette_size;           /* number of entries in palette */
    D3DRMPALETTEENTRY* palette;	/* description of the palette (only if
				   rgb is false).  Must be (1<<depth)
				   elements. */
} D3DRMIMAGE, *LPD3DRMIMAGE;

typedef enum _D3DRMWRAPTYPE
{   D3DRMWRAP_FLAT,
    D3DRMWRAP_CYLINDER,
    D3DRMWRAP_SPHERE,
    D3DRMWRAP_CHROME,
    D3DRMWRAP_SHEET,
    D3DRMWRAP_BOX
} D3DRMWRAPTYPE, *LPD3DRMWRAPTYPE;

#define D3DRMWIREFRAME_CULL		1 /* cull backfaces */
#define D3DRMWIREFRAME_HIDDENLINE	2 /* lines are obscured by closer objects */

/*
 * Do not use righthanded perspective in Viewport2::SetProjection().
 * Set up righthanded mode by using IDirect3DRM3::SetOptions().
 */
typedef enum _D3DRMPROJECTIONTYPE
{   D3DRMPROJECT_PERSPECTIVE,
    D3DRMPROJECT_ORTHOGRAPHIC,
    D3DRMPROJECT_RIGHTHANDPERSPECTIVE, /* Only valid pre-DX6 */
    D3DRMPROJECT_RIGHTHANDORTHOGRAPHIC /* Only valid pre-DX6 */
} D3DRMPROJECTIONTYPE, *LPD3DRMPROJECTIONTYPE;

#define D3DRMOPTIONS_LEFTHANDED  0x00000001L /* Default */
#define D3DRMOPTIONS_RIGHTHANDED 0x00000002L

typedef enum _D3DRMXOFFORMAT
{   D3DRMXOF_BINARY,
    D3DRMXOF_COMPRESSED,
    D3DRMXOF_TEXT
} D3DRMXOFFORMAT, *LPD3DRMXOFFORMAT;

typedef DWORD D3DRMSAVEOPTIONS;
#define D3DRMXOFSAVE_NORMALS 1
#define D3DRMXOFSAVE_TEXTURECOORDINATES 2
#define D3DRMXOFSAVE_MATERIALS 4
#define D3DRMXOFSAVE_TEXTURENAMES 8
#define D3DRMXOFSAVE_ALL 15
#define D3DRMXOFSAVE_TEMPLATES 16
#define D3DRMXOFSAVE_TEXTURETOPOLOGY 32

typedef enum _D3DRMCOLORSOURCE
{   D3DRMCOLOR_FROMFACE,
    D3DRMCOLOR_FROMVERTEX
} D3DRMCOLORSOURCE, *LPD3DRMCOLORSOURCE;

typedef enum _D3DRMFRAMECONSTRAINT
{   D3DRMCONSTRAIN_Z,		/* use only X and Y rotations */
    D3DRMCONSTRAIN_Y,		/* use only X and Z rotations */
    D3DRMCONSTRAIN_X		/* use only Y and Z rotations */
} D3DRMFRAMECONSTRAINT, *LPD3DRMFRAMECONSTRAINT;

typedef enum _D3DRMMATERIALMODE
{   D3DRMMATERIAL_FROMMESH,
    D3DRMMATERIAL_FROMPARENT,
    D3DRMMATERIAL_FROMFRAME
} D3DRMMATERIALMODE, *LPD3DRMMATERIALMODE;

typedef enum _D3DRMFOGMODE
{   D3DRMFOG_LINEAR,		/* linear between start and end */
    D3DRMFOG_EXPONENTIAL,	/* density * exp(-distance) */
    D3DRMFOG_EXPONENTIALSQUARED	/* density * exp(-distance*distance) */
} D3DRMFOGMODE, *LPD3DRMFOGMODE;

typedef enum _D3DRMZBUFFERMODE {
    D3DRMZBUFFER_FROMPARENT,	/* default */
    D3DRMZBUFFER_ENABLE,	/* enable zbuffering */
    D3DRMZBUFFER_DISABLE	/* disable zbuffering */
} D3DRMZBUFFERMODE, *LPD3DRMZBUFFERMODE;

typedef enum _D3DRMSORTMODE {
    D3DRMSORT_FROMPARENT,	/* default */
    D3DRMSORT_NONE,		/* don't sort child frames */
    D3DRMSORT_FRONTTOBACK,	/* sort child frames front-to-back */
    D3DRMSORT_BACKTOFRONT	/* sort child frames back-to-front */
} D3DRMSORTMODE, *LPD3DRMSORTMODE;

typedef struct _D3DRMMATERIALOVERRIDE
{
    DWORD         dwSize;	/* Size of this structure */
    DWORD         dwFlags;	/* Indicate which fields are valid */
    D3DCOLORVALUE dcDiffuse;	/* RGBA */
    D3DCOLORVALUE dcAmbient;	/* RGB */
    D3DCOLORVALUE dcEmissive;	/* RGB */
    D3DCOLORVALUE dcSpecular;	/* RGB */
    D3DVALUE      dvPower;
    LPUNKNOWN     lpD3DRMTex;
} D3DRMMATERIALOVERRIDE, *LPD3DRMMATERIALOVERRIDE;

#define D3DRMMATERIALOVERRIDE_DIFFUSE_ALPHAONLY     0x00000001L
#define D3DRMMATERIALOVERRIDE_DIFFUSE_RGBONLY       0x00000002L
#define D3DRMMATERIALOVERRIDE_DIFFUSE               0x00000003L
#define D3DRMMATERIALOVERRIDE_AMBIENT               0x00000004L
#define D3DRMMATERIALOVERRIDE_EMISSIVE              0x00000008L
#define D3DRMMATERIALOVERRIDE_SPECULAR              0x00000010L
#define D3DRMMATERIALOVERRIDE_POWER                 0x00000020L
#define D3DRMMATERIALOVERRIDE_TEXTURE               0x00000040L
#define D3DRMMATERIALOVERRIDE_DIFFUSE_ALPHAMULTIPLY 0x00000080L
#define D3DRMMATERIALOVERRIDE_ALL                   0x000000FFL

#define D3DRMFPTF_ALPHA                           0x00000001L
#define D3DRMFPTF_NOALPHA                         0x00000002L
#define D3DRMFPTF_PALETTIZED                      0x00000004L
#define D3DRMFPTF_NOTPALETTIZED                   0x00000008L

#define D3DRMSTATECHANGE_UPDATEONLY		  0x000000001L
#define D3DRMSTATECHANGE_VOLATILE		  0x000000002L
#define D3DRMSTATECHANGE_NONVOLATILE		  0x000000004L
#define D3DRMSTATECHANGE_RENDER			  0x000000020L
#define D3DRMSTATECHANGE_LIGHT			  0x000000040L

/*
 * Values for flags in RM3::CreateDeviceFromSurface
 */
#define D3DRMDEVICE_NOZBUFFER           0x00000001L

/*
 * Values for flags in Object2::SetClientData
 */
#define D3DRMCLIENTDATA_NONE            0x00000001L
#define D3DRMCLIENTDATA_LOCALFREE       0x00000002L
#define D3DRMCLIENTDATA_IUNKNOWN        0x00000004L

/*
 * Values for flags in Frame2::AddMoveCallback.
 */
#define D3DRMCALLBACK_PREORDER		0
#define D3DRMCALLBACK_POSTORDER		1

/*
 * Values for flags in MeshBuilder2::RayPick.
 */
#define D3DRMRAYPICK_ONLYBOUNDINGBOXES		1
#define D3DRMRAYPICK_IGNOREFURTHERPRIMITIVES	2
#define D3DRMRAYPICK_INTERPOLATEUV		4
#define D3DRMRAYPICK_INTERPOLATECOLOR		8
#define D3DRMRAYPICK_INTERPOLATENORMAL		0x10	

/*
 * Values for flags in MeshBuilder3::AddFacesIndexed.
 */
#define D3DRMADDFACES_VERTICESONLY		1

/*
 * Values for flags in MeshBuilder2::GenerateNormals.
 */
#define D3DRMGENERATENORMALS_PRECOMPACT		1
#define D3DRMGENERATENORMALS_USECREASEANGLE	2

/*
 * Values for MeshBuilder3::GetParentMesh
 */
#define D3DRMMESHBUILDER_DIRECTPARENT		1
#define D3DRMMESHBUILDER_ROOTMESH		2

/*
 * Flags for MeshBuilder3::Enable
 */
#define D3DRMMESHBUILDER_RENDERENABLE	0x00000001L
#define D3DRMMESHBUILDER_PICKENABLE     0x00000002L

/*
 * Flags for MeshBuilder3::AddMeshBuilder
 */
#define D3DRMADDMESHBUILDER_DONTCOPYAPPDATA	1
#define D3DRMADDMESHBUILDER_FLATTENSUBMESHES	2
#define D3DRMADDMESHBUILDER_NOSUBMESHES		4

/*
 * Flags for Object2::GetAge when used with MeshBuilders
 */
#define D3DRMMESHBUILDERAGE_GEOMETRY    0x00000001L
#define D3DRMMESHBUILDERAGE_MATERIALS   0x00000002L
#define D3DRMMESHBUILDERAGE_TEXTURES    0x00000004L

/*
 * Format flags for MeshBuilder3::AddTriangles.
 */
#define D3DRMFVF_TYPE                   0x00000001L
#define D3DRMFVF_NORMAL                 0x00000002L
#define D3DRMFVF_COLOR                  0x00000004L
#define D3DRMFVF_TEXTURECOORDS          0x00000008L

#define D3DRMVERTEX_STRIP               0x00000001L
#define D3DRMVERTEX_FAN                 0x00000002L
#define D3DRMVERTEX_LIST                0x00000004L

/*
 * Values for flags in Viewport2::Clear2
 */
#define D3DRMCLEAR_TARGET               0x00000001L
#define D3DRMCLEAR_ZBUFFER              0x00000002L
#define D3DRMCLEAR_DIRTYRECTS           0x00000004L
#define D3DRMCLEAR_ALL                  (D3DRMCLEAR_TARGET | \
					 D3DRMCLEAR_ZBUFFER | \
					 D3DRMCLEAR_DIRTYRECTS)

/*
 * Values for flags in Frame3::SetSceneFogMethod
 */
#define D3DRMFOGMETHOD_VERTEX          0x00000001L
#define D3DRMFOGMETHOD_TABLE           0x00000002L
#define D3DRMFOGMETHOD_ANY             0x00000004L

/*
 * Values for flags in Frame3::SetTraversalOptions
 */
#define D3DRMFRAME_RENDERENABLE        0x00000001L
#define D3DRMFRAME_PICKENABLE          0x00000002L

typedef DWORD D3DRMANIMATIONOPTIONS;
#define D3DRMANIMATION_OPEN 0x01L
#define D3DRMANIMATION_CLOSED 0x02L
#define D3DRMANIMATION_LINEARPOSITION 0x04L
#define D3DRMANIMATION_SPLINEPOSITION 0x08L
#define D3DRMANIMATION_SCALEANDROTATION 0x00000010L
#define D3DRMANIMATION_POSITION 0x00000020L

typedef DWORD D3DRMINTERPOLATIONOPTIONS;
#define D3DRMINTERPOLATION_OPEN 0x01L
#define D3DRMINTERPOLATION_CLOSED 0x02L
#define D3DRMINTERPOLATION_NEAREST 0x0100L
#define D3DRMINTERPOLATION_LINEAR 0x04L
#define D3DRMINTERPOLATION_SPLINE 0x08L
#define D3DRMINTERPOLATION_VERTEXCOLOR 0x40L
#define D3DRMINTERPOLATION_SLERPNORMALS 0x80L

typedef DWORD D3DRMLOADOPTIONS;

#define D3DRMLOAD_FROMFILE  0x00L
#define D3DRMLOAD_FROMRESOURCE 0x01L
#define D3DRMLOAD_FROMMEMORY 0x02L
#define D3DRMLOAD_FROMSTREAM 0x04L
#define D3DRMLOAD_FROMURL 0x08L

#define D3DRMLOAD_BYNAME 0x10L
#define D3DRMLOAD_BYPOSITION 0x20L
#define D3DRMLOAD_BYGUID 0x40L
#define D3DRMLOAD_FIRST 0x80L

#define D3DRMLOAD_INSTANCEBYREFERENCE 0x100L
#define D3DRMLOAD_INSTANCEBYCOPYING 0x200L

#define D3DRMLOAD_ASYNCHRONOUS 0x400L

typedef struct _D3DRMLOADRESOURCE {
  HMODULE hModule;
  LPCTSTR lpName;
  LPCTSTR lpType;
} D3DRMLOADRESOURCE, *LPD3DRMLOADRESOURCE;

typedef struct _D3DRMLOADMEMORY {
  LPVOID lpMemory;
  DWORD dSize;
} D3DRMLOADMEMORY, *LPD3DRMLOADMEMORY;

#define D3DRMPMESHSTATUS_VALID 0x01L
#define D3DRMPMESHSTATUS_INTERRUPTED 0x02L
#define D3DRMPMESHSTATUS_BASEMESHCOMPLETE 0x04L
#define D3DRMPMESHSTATUS_COMPLETE 0x08L
#define D3DRMPMESHSTATUS_RENDERABLE 0x10L

#define D3DRMPMESHEVENT_BASEMESH 0x01L
#define D3DRMPMESHEVENT_COMPLETE 0x02L

typedef struct _D3DRMPMESHLOADSTATUS {
  DWORD dwSize;            // Size of this structure
  DWORD dwPMeshSize;       // Total Size (bytes)
  DWORD dwBaseMeshSize;    // Total Size of the Base Mesh
  DWORD dwBytesLoaded;     // Total bytes loaded
  DWORD dwVerticesLoaded;  // Number of vertices loaded
  DWORD dwFacesLoaded;     // Number of faces loaded
  HRESULT dwLoadResult;    // Result of the load operation
  DWORD dwFlags;
} D3DRMPMESHLOADSTATUS, *LPD3DRMPMESHLOADSTATUS;

typedef enum _D3DRMUSERVISUALREASON {
    D3DRMUSERVISUAL_CANSEE,
    D3DRMUSERVISUAL_RENDER
} D3DRMUSERVISUALREASON, *LPD3DRMUSERVISUALREASON;


typedef struct _D3DRMANIMATIONKEY 
{
    DWORD dwSize;
    DWORD dwKeyType;
    D3DVALUE dvTime;
    DWORD dwID;
#if (!defined __cplusplus) || (!defined D3D_OVERLOADS)
    union 
    {
	D3DRMQUATERNION dqRotateKey;
	D3DVECTOR dvScaleKey;
	D3DVECTOR dvPositionKey;
    };
#else
    /*
     * We do this as D3D_OVERLOADS defines constructors for D3DVECTOR,
     * this can then not be used in a union.  Use the inlines provided
     * to extract and set the required component.
     */
    D3DVALUE dvK[4];
#endif
} D3DRMANIMATIONKEY;
typedef D3DRMANIMATIONKEY *LPD3DRMANIMATIONKEY;

#if (defined __cplusplus) && (defined D3D_OVERLOADS)
inline VOID
D3DRMAnimationGetRotateKey(const D3DRMANIMATIONKEY& rmKey,
			   D3DRMQUATERNION& rmQuat)
{
    rmQuat.s = rmKey.dvK[0];
    rmQuat.v = D3DVECTOR(rmKey.dvK[1], rmKey.dvK[2], rmKey.dvK[3]);
}

inline VOID
D3DRMAnimationGetScaleKey(const D3DRMANIMATIONKEY& rmKey,
			  D3DVECTOR& dvVec)
{
    dvVec = D3DVECTOR(rmKey.dvK[0], rmKey.dvK[1], rmKey.dvK[2]);
}

inline VOID
D3DRMAnimationGetPositionKey(const D3DRMANIMATIONKEY& rmKey,
			     D3DVECTOR& dvVec)
{
    dvVec = D3DVECTOR(rmKey.dvK[0], rmKey.dvK[1], rmKey.dvK[2]);
}
inline VOID
D3DRMAnimationSetRotateKey(D3DRMANIMATIONKEY& rmKey,
			   const D3DRMQUATERNION& rmQuat)
{
    rmKey.dvK[0] = rmQuat.s;
    rmKey.dvK[1] = rmQuat.v.x;
    rmKey.dvK[2] = rmQuat.v.y;
    rmKey.dvK[3] = rmQuat.v.z;
}

inline VOID
D3DRMAnimationSetScaleKey(D3DRMANIMATIONKEY& rmKey,
			  const D3DVECTOR& dvVec)
{
    rmKey.dvK[0] = dvVec.x;
    rmKey.dvK[1] = dvVec.y;
    rmKey.dvK[2] = dvVec.z;
}

inline VOID
D3DRMAnimationSetPositionKey(D3DRMANIMATIONKEY& rmKey,
			     const D3DVECTOR& dvVec)
{
    rmKey.dvK[0] = dvVec.x;
    rmKey.dvK[1] = dvVec.y;
    rmKey.dvK[2] = dvVec.z;
}
#endif

#define D3DRMANIMATION_ROTATEKEY 0x01
#define D3DRMANIMATION_SCALEKEY 0x02
#define D3DRMANIMATION_POSITIONKEY 0x03


typedef DWORD D3DRMMAPPING, D3DRMMAPPINGFLAG, *LPD3DRMMAPPING;
static const D3DRMMAPPINGFLAG D3DRMMAP_WRAPU = 1;
static const D3DRMMAPPINGFLAG D3DRMMAP_WRAPV = 2;
static const D3DRMMAPPINGFLAG D3DRMMAP_PERSPCORRECT = 4;

typedef struct _D3DRMVERTEX
{   D3DVECTOR	    position;
    D3DVECTOR	    normal;
    D3DVALUE	    tu, tv;
    D3DCOLOR	    color;
} D3DRMVERTEX, *LPD3DRMVERTEX;

typedef LONG D3DRMGROUPINDEX; /* group indexes begin a 0 */
static const D3DRMGROUPINDEX D3DRMGROUP_ALLGROUPS = -1;

/*
 * Create a color from three components in the range 0-1 inclusive.
 */
extern D3DCOLOR D3DRMAPI	D3DRMCreateColorRGB(D3DVALUE red,
					  D3DVALUE green,
					  D3DVALUE blue);

/*
 * Create a color from four components in the range 0-1 inclusive.
 */
extern D3DCOLOR D3DRMAPI	D3DRMCreateColorRGBA(D3DVALUE red,
						 D3DVALUE green,
						 D3DVALUE blue,
						 D3DVALUE alpha);

/*
 * Get the red component of a color.
 */
extern D3DVALUE 		D3DRMAPI D3DRMColorGetRed(D3DCOLOR);

/*
 * Get the green component of a color.
 */
extern D3DVALUE 		D3DRMAPI D3DRMColorGetGreen(D3DCOLOR);

/*
 * Get the blue component of a color.
 */
extern D3DVALUE 		D3DRMAPI D3DRMColorGetBlue(D3DCOLOR);

/*
 * Get the alpha component of a color.
 */
extern D3DVALUE 		D3DRMAPI D3DRMColorGetAlpha(D3DCOLOR);

/*
 * Add two vectors.  Returns its first argument.
 */
extern LPD3DVECTOR 	D3DRMAPI D3DRMVectorAdd(LPD3DVECTOR d,
					  LPD3DVECTOR s1,
					  LPD3DVECTOR s2);

/*
 * Subtract two vectors.  Returns its first argument.
 */
extern LPD3DVECTOR 	D3DRMAPI D3DRMVectorSubtract(LPD3DVECTOR d,
					       LPD3DVECTOR s1,
					       LPD3DVECTOR s2);
/*
 * Reflect a ray about a given normal.  Returns its first argument.
 */
extern LPD3DVECTOR 	D3DRMAPI D3DRMVectorReflect(LPD3DVECTOR d,
					      LPD3DVECTOR ray,
					      LPD3DVECTOR norm);

/*
 * Calculate the vector cross product.  Returns its first argument.
 */
extern LPD3DVECTOR 	D3DRMAPI D3DRMVectorCrossProduct(LPD3DVECTOR d,
						   LPD3DVECTOR s1,
						   LPD3DVECTOR s2);
/*
 * Return the vector dot product.
 */
extern D3DVALUE 		D3DRMAPI D3DRMVectorDotProduct(LPD3DVECTOR s1,
						 LPD3DVECTOR s2);

/*
 * Scale a vector so that its modulus is 1.  Returns its argument or
 * NULL if there was an error (e.g. a zero vector was passed).
 */
extern LPD3DVECTOR 	D3DRMAPI D3DRMVectorNormalize(LPD3DVECTOR);
#define D3DRMVectorNormalise D3DRMVectorNormalize

/*
 * Return the length of a vector (e.g. sqrt(x*x + y*y + z*z)).
 */
extern D3DVALUE 		D3DRMAPI D3DRMVectorModulus(LPD3DVECTOR v);

/*
 * Set the rotation part of a matrix to be a rotation of theta radians
 * around the given axis.
 */

extern LPD3DVECTOR 	D3DRMAPI D3DRMVectorRotate(LPD3DVECTOR r, LPD3DVECTOR v, LPD3DVECTOR axis, D3DVALUE theta);

/*
 * Scale a vector uniformly in all three axes
 */
extern LPD3DVECTOR	D3DRMAPI D3DRMVectorScale(LPD3DVECTOR d, LPD3DVECTOR s, D3DVALUE factor);

/*
 * Return a random unit vector
 */
extern LPD3DVECTOR	D3DRMAPI D3DRMVectorRandom(LPD3DVECTOR d);

/*
 * Returns a unit quaternion that represents a rotation of theta radians
 * around the given axis.
 */

extern LPD3DRMQUATERNION D3DRMAPI D3DRMQuaternionFromRotation(LPD3DRMQUATERNION quat,
							      LPD3DVECTOR v,
							      D3DVALUE theta);

/*
 * Calculate the product of two quaternions
 */
extern LPD3DRMQUATERNION D3DRMAPI D3DRMQuaternionMultiply(LPD3DRMQUATERNION q,
						    	  LPD3DRMQUATERNION a,
						   	  LPD3DRMQUATERNION b);

/*
 * Interpolate between two quaternions
 */
extern LPD3DRMQUATERNION D3DRMAPI D3DRMQuaternionSlerp(LPD3DRMQUATERNION q,
						       LPD3DRMQUATERNION a,
						       LPD3DRMQUATERNION b,
						       D3DVALUE alpha);

/*
 * Calculate the matrix for the rotation that a unit quaternion represents
 */
extern void 		D3DRMAPI D3DRMMatrixFromQuaternion(D3DRMMATRIX4D dmMat, LPD3DRMQUATERNION lpDqQuat);

/*
 * Calculate the quaternion that corresponds to a rotation matrix
 */
extern LPD3DRMQUATERNION D3DRMAPI D3DRMQuaternionFromMatrix(LPD3DRMQUATERNION, D3DRMMATRIX4D);


#if defined(__cplusplus)
};
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3drmobj.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1995-1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	d3drm.h
 *  Content:	Direct3DRM include file
 *
 ***************************************************************************/

#ifndef _D3DRMOBJ_H_
#define _D3DRMOBJ_H_

#include <objbase.h> /* Use Windows header files */
#define VIRTUAL
#include "d3drmdef.h"

#include "d3d.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
 * The methods for IUnknown
 */
#define IUNKNOWN_METHODS(kind) \
    STDMETHOD(QueryInterface)	   	(THIS_ REFIID riid, LPVOID *ppvObj) kind; \
    STDMETHOD_(ULONG, AddRef)	   	(THIS) kind; \
    STDMETHOD_(ULONG, Release)	   	(THIS) kind

/*
 * The methods for IDirect3DRMObject
 */
#define IDIRECT3DRMOBJECT_METHODS(kind) \
    STDMETHOD(Clone)			(THIS_ LPUNKNOWN pUnkOuter, REFIID riid, LPVOID *ppvObj) kind; \
    STDMETHOD(AddDestroyCallback)  	(THIS_ D3DRMOBJECTCALLBACK, LPVOID argument) kind; \
    STDMETHOD(DeleteDestroyCallback)	(THIS_ D3DRMOBJECTCALLBACK, LPVOID argument) kind; \
    STDMETHOD(SetAppData)	   	(THIS_ DWORD data) kind; \
    STDMETHOD_(DWORD, GetAppData)  	(THIS) kind; \
    STDMETHOD(SetName)		   	(THIS_ LPCSTR) kind; \
    STDMETHOD(GetName)			(THIS_ LPDWORD lpdwSize, LPSTR lpName) kind; \
    STDMETHOD(GetClassName)		(THIS_ LPDWORD lpdwSize, LPSTR lpName) kind


#define WIN_TYPES(itype, ptype) \
    typedef interface itype FAR *LP##ptype, FAR **LPLP##ptype

WIN_TYPES(IDirect3DRMObject, DIRECT3DRMOBJECT);
WIN_TYPES(IDirect3DRMObject2, DIRECT3DRMOBJECT2);
WIN_TYPES(IDirect3DRMDevice, DIRECT3DRMDEVICE);
WIN_TYPES(IDirect3DRMDevice2, DIRECT3DRMDEVICE2);
WIN_TYPES(IDirect3DRMDevice3, DIRECT3DRMDEVICE3);
WIN_TYPES(IDirect3DRMViewport, DIRECT3DRMVIEWPORT);
WIN_TYPES(IDirect3DRMViewport2, DIRECT3DRMVIEWPORT2);
WIN_TYPES(IDirect3DRMFrame, DIRECT3DRMFRAME);
WIN_TYPES(IDirect3DRMFrame2, DIRECT3DRMFRAME2);
WIN_TYPES(IDirect3DRMFrame3, DIRECT3DRMFRAME3);
WIN_TYPES(IDirect3DRMVisual, DIRECT3DRMVISUAL);
WIN_TYPES(IDirect3DRMMesh, DIRECT3DRMMESH);
WIN_TYPES(IDirect3DRMMeshBuilder, DIRECT3DRMMESHBUILDER);
WIN_TYPES(IDirect3DRMMeshBuilder2, DIRECT3DRMMESHBUILDER2);
WIN_TYPES(IDirect3DRMMeshBuilder3, DIRECT3DRMMESHBUILDER3);
WIN_TYPES(IDirect3DRMFace, DIRECT3DRMFACE);
WIN_TYPES(IDirect3DRMFace2, DIRECT3DRMFACE2);
WIN_TYPES(IDirect3DRMLight, DIRECT3DRMLIGHT);
WIN_TYPES(IDirect3DRMTexture, DIRECT3DRMTEXTURE);
WIN_TYPES(IDirect3DRMTexture2, DIRECT3DRMTEXTURE2);
WIN_TYPES(IDirect3DRMTexture3, DIRECT3DRMTEXTURE3);
WIN_TYPES(IDirect3DRMWrap, DIRECT3DRMWRAP);
WIN_TYPES(IDirect3DRMMaterial, DIRECT3DRMMATERIAL);
WIN_TYPES(IDirect3DRMMaterial2, DIRECT3DRMMATERIAL2);
WIN_TYPES(IDirect3DRMInterpolator, DIRECT3DRMINTERPOLATOR);
WIN_TYPES(IDirect3DRMAnimation, DIRECT3DRMANIMATION);
WIN_TYPES(IDirect3DRMAnimation2, DIRECT3DRMANIMATION2);
WIN_TYPES(IDirect3DRMAnimationSet, DIRECT3DRMANIMATIONSET);
WIN_TYPES(IDirect3DRMAnimationSet2, DIRECT3DRMANIMATIONSET2);
WIN_TYPES(IDirect3DRMUserVisual, DIRECT3DRMUSERVISUAL);
WIN_TYPES(IDirect3DRMShadow, DIRECT3DRMSHADOW);
WIN_TYPES(IDirect3DRMShadow2, DIRECT3DRMSHADOW2);
WIN_TYPES(IDirect3DRMArray, DIRECT3DRMARRAY);
WIN_TYPES(IDirect3DRMObjectArray, DIRECT3DRMOBJECTARRAY);
WIN_TYPES(IDirect3DRMDeviceArray, DIRECT3DRMDEVICEARRAY);
WIN_TYPES(IDirect3DRMFaceArray, DIRECT3DRMFACEARRAY);
WIN_TYPES(IDirect3DRMViewportArray, DIRECT3DRMVIEWPORTARRAY);
WIN_TYPES(IDirect3DRMFrameArray, DIRECT3DRMFRAMEARRAY);
WIN_TYPES(IDirect3DRMAnimationArray, DIRECT3DRMANIMATIONARRAY);
WIN_TYPES(IDirect3DRMVisualArray, DIRECT3DRMVISUALARRAY);
WIN_TYPES(IDirect3DRMPickedArray, DIRECT3DRMPICKEDARRAY);
WIN_TYPES(IDirect3DRMPicked2Array, DIRECT3DRMPICKED2ARRAY);
WIN_TYPES(IDirect3DRMLightArray, DIRECT3DRMLIGHTARRAY);
WIN_TYPES(IDirect3DRMProgressiveMesh, DIRECT3DRMPROGRESSIVEMESH);
WIN_TYPES(IDirect3DRMClippedVisual, DIRECT3DRMCLIPPEDVISUAL);

/*
 * Direct3DRM Object classes
 */
DEFINE_GUID(CLSID_CDirect3DRMDevice,	    0x4fa3568e, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMViewport,	    0x4fa3568f, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMFrame,	    0x4fa35690, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMMesh,	    0x4fa35691, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMMeshBuilder,   0x4fa35692, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMFace,	    0x4fa35693, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMLight,	    0x4fa35694, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMTexture,	    0x4fa35695, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMWrap,	    0x4fa35696, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMMaterial,	    0x4fa35697, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMAnimation,	    0x4fa35698, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMAnimationSet,  0x4fa35699, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMUserVisual,    0x4fa3569a, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMShadow,	    0x4fa3569b, 0x623f, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(CLSID_CDirect3DRMViewportInterpolator, 
0xde9eaa1, 0x3b84, 0x11d0, 0x9b, 0x6d, 0x0, 0x0, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(CLSID_CDirect3DRMFrameInterpolator, 
0xde9eaa2, 0x3b84, 0x11d0, 0x9b, 0x6d, 0x0, 0x0, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(CLSID_CDirect3DRMMeshInterpolator, 
0xde9eaa3, 0x3b84, 0x11d0, 0x9b, 0x6d, 0x0, 0x0, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(CLSID_CDirect3DRMLightInterpolator, 
0xde9eaa6, 0x3b84, 0x11d0, 0x9b, 0x6d, 0x0, 0x0, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(CLSID_CDirect3DRMMaterialInterpolator, 
0xde9eaa7, 0x3b84, 0x11d0, 0x9b, 0x6d, 0x0, 0x0, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(CLSID_CDirect3DRMTextureInterpolator, 
0xde9eaa8, 0x3b84, 0x11d0, 0x9b, 0x6d, 0x0, 0x0, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(CLSID_CDirect3DRMProgressiveMesh, 0x4516ec40, 0x8f20, 0x11d0, 0x9b, 0x6d, 0x00, 0x00, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(CLSID_CDirect3DRMClippedVisual,   0x5434e72d, 0x6d66, 0x11d1, 0xbb, 0xb, 0x0, 0x0, 0xf8, 0x75, 0x86, 0x5a);


/*
 * Direct3DRM Object interfaces
 */
DEFINE_GUID(IID_IDirect3DRMObject, 	    0xeb16cb00, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMObject2,         0x4516ec7c, 0x8f20, 0x11d0, 0x9b, 0x6d, 0x00, 0x00, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(IID_IDirect3DRMDevice, 	    0xe9e19280, 0x6e05, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMDevice2,	    0x4516ec78, 0x8f20, 0x11d0, 0x9b, 0x6d, 0x00, 0x00, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(IID_IDirect3DRMDevice3,     0x549f498b, 0xbfeb, 0x11d1, 0x8e, 0xd8, 0x0, 0xa0, 0xc9, 0x67, 0xa4, 0x82);
DEFINE_GUID(IID_IDirect3DRMViewport, 	    0xeb16cb02, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMViewport2,   0x4a1b1be6, 0xbfed, 0x11d1, 0x8e, 0xd8, 0x0, 0xa0, 0xc9, 0x67, 0xa4, 0x82);
DEFINE_GUID(IID_IDirect3DRMFrame, 	    0xeb16cb03, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMFrame2,	    0xc3dfbd60, 0x3988, 0x11d0, 0x9e, 0xc2, 0x0, 0x0, 0xc0, 0x29, 0x1a, 0xc3);
DEFINE_GUID(IID_IDirect3DRMFrame3,              0xff6b7f70, 0xa40e, 0x11d1, 0x91, 0xf9, 0x0, 0x0, 0xf8, 0x75, 0x8e, 0x66);
DEFINE_GUID(IID_IDirect3DRMVisual, 	    0xeb16cb04, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMMesh, 	    0xa3a80d01, 0x6e12, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMMeshBuilder,	    0xa3a80d02, 0x6e12, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMMeshBuilder2,    0x4516ec77, 0x8f20, 0x11d0, 0x9b, 0x6d, 0x0, 0x0, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(IID_IDirect3DRMMeshBuilder3,    0x4516ec82, 0x8f20, 0x11d0, 0x9b, 0x6d, 0x00, 0x00, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(IID_IDirect3DRMFace, 	    0xeb16cb07, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMFace2,           0x4516ec81, 0x8f20, 0x11d0, 0x9b, 0x6d, 0x00, 0x00, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(IID_IDirect3DRMLight, 	    0xeb16cb08, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMTexture, 	    0xeb16cb09, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMTexture2,        0x120f30c0, 0x1629, 0x11d0, 0x94, 0x1c, 0x0, 0x80, 0xc8, 0xc, 0xfa, 0x7b);
DEFINE_GUID(IID_IDirect3DRMTexture3,        0xff6b7f73, 0xa40e, 0x11d1, 0x91, 0xf9, 0x0, 0x0, 0xf8, 0x75, 0x8e, 0x66);
DEFINE_GUID(IID_IDirect3DRMWrap, 	    0xeb16cb0a, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMMaterial, 	    0xeb16cb0b, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMMaterial2,       0xff6b7f75, 0xa40e, 0x11d1, 0x91, 0xf9, 0x0, 0x0, 0xf8, 0x75, 0x8e, 0x66);
DEFINE_GUID(IID_IDirect3DRMAnimation, 	    0xeb16cb0d, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMAnimation2,      0xff6b7f77, 0xa40e, 0x11d1, 0x91, 0xf9, 0x0, 0x0, 0xf8, 0x75, 0x8e, 0x66);
DEFINE_GUID(IID_IDirect3DRMAnimationSet,    0xeb16cb0e, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMAnimationSet2,   0xff6b7f79, 0xa40e, 0x11d1, 0x91, 0xf9, 0x0, 0x0, 0xf8, 0x75, 0x8e, 0x66);
DEFINE_GUID(IID_IDirect3DRMObjectArray,	    0x242f6bc2, 0x3849, 0x11d0, 0x9b, 0x6d, 0x0, 0x0, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(IID_IDirect3DRMDeviceArray,	    0xeb16cb10, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMViewportArray,   0xeb16cb11, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMFrameArray, 	    0xeb16cb12, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMVisualArray,	    0xeb16cb13, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMLightArray, 	    0xeb16cb14, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMPickedArray,	    0xeb16cb16, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMFaceArray,	    0xeb16cb17, 0xd271, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMAnimationArray, 
0xd5f1cae0, 0x4bd7, 0x11d1, 0xb9, 0x74, 0x0, 0x60, 0x8, 0x3e, 0x45, 0xf3);
DEFINE_GUID(IID_IDirect3DRMUserVisual,	    0x59163de0, 0x6d43, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMShadow,	    0xaf359780, 0x6ba3, 0x11cf, 0xac, 0x4a, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);
DEFINE_GUID(IID_IDirect3DRMShadow2,	    0x86b44e25, 0x9c82, 0x11d1, 0xbb, 0xb, 0x0, 0xa0, 0xc9, 0x81, 0xa0, 0xa6);
DEFINE_GUID(IID_IDirect3DRMInterpolator,    0x242f6bc1, 0x3849, 0x11d0, 0x9b, 0x6d, 0x0, 0x0, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(IID_IDirect3DRMProgressiveMesh, 0x4516ec79, 0x8f20, 0x11d0, 0x9b, 0x6d, 0x0, 0x0, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(IID_IDirect3DRMPicked2Array,    0x4516ec7b, 0x8f20, 0x11d0, 0x9b, 0x6d, 0x0, 0x0, 0xc0, 0x78, 0x1b, 0xc3);
DEFINE_GUID(IID_IDirect3DRMClippedVisual,   0x5434e733, 0x6d66, 0x11d1, 0xbb, 0xb, 0x0, 0x0, 0xf8, 0x75, 0x86, 0x5a);

typedef void (__cdecl *D3DRMOBJECTCALLBACK)(LPDIRECT3DRMOBJECT obj, LPVOID arg);
typedef void (__cdecl *D3DRMFRAMEMOVECALLBACK)(LPDIRECT3DRMFRAME obj, LPVOID arg, D3DVALUE delta);
typedef void (__cdecl *D3DRMFRAME3MOVECALLBACK)(LPDIRECT3DRMFRAME3 obj, LPVOID arg, D3DVALUE delta);
typedef void (__cdecl *D3DRMUPDATECALLBACK)(LPDIRECT3DRMDEVICE obj, LPVOID arg, int, LPD3DRECT);
typedef void (__cdecl *D3DRMDEVICE3UPDATECALLBACK)(LPDIRECT3DRMDEVICE3 obj, LPVOID arg, int, LPD3DRECT);
typedef int (__cdecl *D3DRMUSERVISUALCALLBACK)
    (   LPDIRECT3DRMUSERVISUAL obj, LPVOID arg,	D3DRMUSERVISUALREASON reason,
        LPDIRECT3DRMDEVICE dev, LPDIRECT3DRMVIEWPORT view
    );
typedef HRESULT (__cdecl *D3DRMLOADTEXTURECALLBACK)
    (char *tex_name, void *arg, LPDIRECT3DRMTEXTURE *);
typedef HRESULT (__cdecl *D3DRMLOADTEXTURE3CALLBACK)
    (char *tex_name, void *arg, LPDIRECT3DRMTEXTURE3 *);
typedef void (__cdecl *D3DRMLOADCALLBACK)
    (LPDIRECT3DRMOBJECT object, REFIID objectguid, LPVOID arg);

typedef HRESULT (__cdecl *D3DRMDOWNSAMPLECALLBACK)
    (LPDIRECT3DRMTEXTURE3 lpDirect3DRMTexture, LPVOID pArg,
     LPDIRECTDRAWSURFACE pDDSSrc, LPDIRECTDRAWSURFACE pDDSDst);
typedef HRESULT (__cdecl *D3DRMVALIDATIONCALLBACK)
    (LPDIRECT3DRMTEXTURE3 lpDirect3DRMTexture, LPVOID pArg,
     DWORD dwFlags, DWORD dwcRects, LPRECT pRects);


typedef struct _D3DRMPICKDESC
{
    ULONG	ulFaceIdx;
    LONG	lGroupIdx;
    D3DVECTOR	vPosition;

} D3DRMPICKDESC, *LPD3DRMPICKDESC;

typedef struct _D3DRMPICKDESC2
{
    ULONG	ulFaceIdx;
    LONG	lGroupIdx;
    D3DVECTOR	dvPosition;
    D3DVALUE	tu;
    D3DVALUE	tv;
    D3DVECTOR	dvNormal;
    D3DCOLOR	dcColor;

} D3DRMPICKDESC2, *LPD3DRMPICKDESC2;

#undef INTERFACE
#define INTERFACE IDirect3DRMObject

/*
 * Base class
 */
DECLARE_INTERFACE_(IDirect3DRMObject, IUnknown)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);
};

#undef INTERFACE
#define INTERFACE IDirect3DRMObject2

DECLARE_INTERFACE_(IDirect3DRMObject2, IUnknown)
{
    IUNKNOWN_METHODS(PURE);

    /*
     * IDirect3DRMObject2 methods
     */
    STDMETHOD(AddDestroyCallback)(THIS_ D3DRMOBJECTCALLBACK lpFunc, LPVOID pvArg) PURE;
    STDMETHOD(Clone)(THIS_ LPUNKNOWN pUnkOuter, REFIID riid, LPVOID *ppvObj) PURE; \
    STDMETHOD(DeleteDestroyCallback)(THIS_ D3DRMOBJECTCALLBACK lpFunc, LPVOID pvArg) PURE; \
    STDMETHOD(GetClientData)(THIS_ DWORD dwID, LPVOID* lplpvData) PURE;
    STDMETHOD(GetDirect3DRM)(THIS_ LPDIRECT3DRM* lplpDirect3DRM) PURE;
    STDMETHOD(GetName)(THIS_ LPDWORD lpdwSize, LPSTR lpName) PURE;
    STDMETHOD(SetClientData)(THIS_ DWORD dwID, LPVOID lpvData, DWORD dwFlags) PURE;
    STDMETHOD(SetName)(THIS_ LPCSTR lpName) PURE;
    STDMETHOD(GetAge)(THIS_ DWORD dwFlags, LPDWORD pdwAge) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMVisual

DECLARE_INTERFACE_(IDirect3DRMVisual, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);
};

#undef INTERFACE
#define INTERFACE IDirect3DRMDevice

DECLARE_INTERFACE_(IDirect3DRMDevice, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMDevice methods
     */
    STDMETHOD(Init)(THIS_ ULONG width, ULONG height) PURE;
    STDMETHOD(InitFromD3D)(THIS_ LPDIRECT3D lpD3D, LPDIRECT3DDEVICE lpD3DDev) PURE;
    STDMETHOD(InitFromClipper)(THIS_ LPDIRECTDRAWCLIPPER lpDDClipper, LPGUID lpGUID, int width, int height) PURE;

    STDMETHOD(Update)(THIS) PURE;
    STDMETHOD(AddUpdateCallback)(THIS_ D3DRMUPDATECALLBACK, LPVOID arg) PURE;
    STDMETHOD(DeleteUpdateCallback)(THIS_ D3DRMUPDATECALLBACK, LPVOID arg) PURE;
    STDMETHOD(SetBufferCount)(THIS_ DWORD) PURE;
    STDMETHOD_(DWORD, GetBufferCount)(THIS) PURE;

    STDMETHOD(SetDither)(THIS_ BOOL) PURE;
    STDMETHOD(SetShades)(THIS_ DWORD) PURE;
    STDMETHOD(SetQuality)(THIS_ D3DRMRENDERQUALITY) PURE;
    STDMETHOD(SetTextureQuality)(THIS_ D3DRMTEXTUREQUALITY) PURE;

    STDMETHOD(GetViewports)(THIS_ LPDIRECT3DRMVIEWPORTARRAY *return_views) PURE;

    STDMETHOD_(BOOL, GetDither)(THIS) PURE;
    STDMETHOD_(DWORD, GetShades)(THIS) PURE;
    STDMETHOD_(DWORD, GetHeight)(THIS) PURE;
    STDMETHOD_(DWORD, GetWidth)(THIS) PURE;
    STDMETHOD_(DWORD, GetTrianglesDrawn)(THIS) PURE;
    STDMETHOD_(DWORD, GetWireframeOptions)(THIS) PURE;
    STDMETHOD_(D3DRMRENDERQUALITY, GetQuality)(THIS) PURE;
    STDMETHOD_(D3DCOLORMODEL, GetColorModel)(THIS) PURE;
    STDMETHOD_(D3DRMTEXTUREQUALITY, GetTextureQuality)(THIS) PURE;
    STDMETHOD(GetDirect3DDevice)(THIS_ LPDIRECT3DDEVICE *) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMDevice2

DECLARE_INTERFACE_(IDirect3DRMDevice2, IDirect3DRMDevice)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMDevice methods
     */
    STDMETHOD(Init)(THIS_ ULONG width, ULONG height) PURE;
    STDMETHOD(InitFromD3D)(THIS_ LPDIRECT3D lpD3D, LPDIRECT3DDEVICE lpD3DDev) PURE;
    STDMETHOD(InitFromClipper)(THIS_ LPDIRECTDRAWCLIPPER lpDDClipper, LPGUID lpGUID, int width, int height) PURE;

    STDMETHOD(Update)(THIS) PURE;
    STDMETHOD(AddUpdateCallback)(THIS_ D3DRMUPDATECALLBACK, LPVOID arg) PURE;
    STDMETHOD(DeleteUpdateCallback)(THIS_ D3DRMUPDATECALLBACK, LPVOID arg) PURE;
    STDMETHOD(SetBufferCount)(THIS_ DWORD) PURE;
    STDMETHOD_(DWORD, GetBufferCount)(THIS) PURE;

    STDMETHOD(SetDither)(THIS_ BOOL) PURE;
    STDMETHOD(SetShades)(THIS_ DWORD) PURE;
    STDMETHOD(SetQuality)(THIS_ D3DRMRENDERQUALITY) PURE;
    STDMETHOD(SetTextureQuality)(THIS_ D3DRMTEXTUREQUALITY) PURE;

    STDMETHOD(GetViewports)(THIS_ LPDIRECT3DRMVIEWPORTARRAY *return_views) PURE;

    STDMETHOD_(BOOL, GetDither)(THIS) PURE;
    STDMETHOD_(DWORD, GetShades)(THIS) PURE;
    STDMETHOD_(DWORD, GetHeight)(THIS) PURE;
    STDMETHOD_(DWORD, GetWidth)(THIS) PURE;
    STDMETHOD_(DWORD, GetTrianglesDrawn)(THIS) PURE;
    STDMETHOD_(DWORD, GetWireframeOptions)(THIS) PURE;
    STDMETHOD_(D3DRMRENDERQUALITY, GetQuality)(THIS) PURE;
    STDMETHOD_(D3DCOLORMODEL, GetColorModel)(THIS) PURE;
    STDMETHOD_(D3DRMTEXTUREQUALITY, GetTextureQuality)(THIS) PURE;
    STDMETHOD(GetDirect3DDevice)(THIS_ LPDIRECT3DDEVICE *) PURE;

    /*
     * IDirect3DRMDevice2 methods
     */
    STDMETHOD(InitFromD3D2)(THIS_ LPDIRECT3D2 lpD3D, LPDIRECT3DDEVICE2 lpD3DDev) PURE;
    STDMETHOD(InitFromSurface)(THIS_ LPGUID lpGUID, LPDIRECTDRAW lpDD, LPDIRECTDRAWSURFACE lpDDSBack) PURE;
    STDMETHOD(SetRenderMode)(THIS_ DWORD dwFlags) PURE;
    STDMETHOD_(DWORD, GetRenderMode)(THIS) PURE;
    STDMETHOD(GetDirect3DDevice2)(THIS_ LPDIRECT3DDEVICE2 *) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMDevice3

DECLARE_INTERFACE_(IDirect3DRMDevice3, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMDevice methods
     */
    STDMETHOD(Init)(THIS_ ULONG width, ULONG height) PURE;
    STDMETHOD(InitFromD3D)(THIS_ LPDIRECT3D lpD3D, LPDIRECT3DDEVICE lpD3DDev) PURE;
    STDMETHOD(InitFromClipper)(THIS_ LPDIRECTDRAWCLIPPER lpDDClipper, LPGUID lpGUID, int width, int height) PURE;

    STDMETHOD(Update)(THIS) PURE;
    STDMETHOD(AddUpdateCallback)(THIS_ D3DRMDEVICE3UPDATECALLBACK, LPVOID arg) PURE;
    STDMETHOD(DeleteUpdateCallback)(THIS_ D3DRMDEVICE3UPDATECALLBACK, LPVOID arg) PURE;
    STDMETHOD(SetBufferCount)(THIS_ DWORD) PURE;
    STDMETHOD_(DWORD, GetBufferCount)(THIS) PURE;

    STDMETHOD(SetDither)(THIS_ BOOL) PURE;
    STDMETHOD(SetShades)(THIS_ DWORD) PURE;
    STDMETHOD(SetQuality)(THIS_ D3DRMRENDERQUALITY) PURE;
    STDMETHOD(SetTextureQuality)(THIS_ D3DRMTEXTUREQUALITY) PURE;

    STDMETHOD(GetViewports)(THIS_ LPDIRECT3DRMVIEWPORTARRAY *return_views) PURE;

    STDMETHOD_(BOOL, GetDither)(THIS) PURE;
    STDMETHOD_(DWORD, GetShades)(THIS) PURE;
    STDMETHOD_(DWORD, GetHeight)(THIS) PURE;
    STDMETHOD_(DWORD, GetWidth)(THIS) PURE;
    STDMETHOD_(DWORD, GetTrianglesDrawn)(THIS) PURE;
    STDMETHOD_(DWORD, GetWireframeOptions)(THIS) PURE;
    STDMETHOD_(D3DRMRENDERQUALITY, GetQuality)(THIS) PURE;
    STDMETHOD_(D3DCOLORMODEL, GetColorModel)(THIS) PURE;
    STDMETHOD_(D3DRMTEXTUREQUALITY, GetTextureQuality)(THIS) PURE;
    STDMETHOD(GetDirect3DDevice)(THIS_ LPDIRECT3DDEVICE *) PURE;

    /*
     * IDirect3DRMDevice2 methods
     */
    STDMETHOD(InitFromD3D2)(THIS_ LPDIRECT3D2 lpD3D, LPDIRECT3DDEVICE2 lpD3DDev) PURE;
    STDMETHOD(InitFromSurface)(THIS_ LPGUID lpGUID, LPDIRECTDRAW lpDD, LPDIRECTDRAWSURFACE lpDDSBack, DWORD dwFlags) PURE;
    STDMETHOD(SetRenderMode)(THIS_ DWORD dwFlags) PURE;
    STDMETHOD_(DWORD, GetRenderMode)(THIS) PURE;
    STDMETHOD(GetDirect3DDevice2)(THIS_ LPDIRECT3DDEVICE2 *) PURE;

    /*
     * IDirect3DRMDevice3 methods
     */
    STDMETHOD(FindPreferredTextureFormat)(THIS_ DWORD dwBitDepths, DWORD dwFlags, LPDDPIXELFORMAT lpDDPF) PURE;
    STDMETHOD(RenderStateChange)(THIS_ D3DRENDERSTATETYPE drsType, DWORD dwVal, DWORD dwFlags) PURE;
    STDMETHOD(LightStateChange)(THIS_ D3DLIGHTSTATETYPE drsType, DWORD dwVal, DWORD dwFlags) PURE;
    STDMETHOD(GetStateChangeOptions)(THIS_ DWORD dwStateClass, DWORD dwStateNum, LPDWORD pdwFlags) PURE;
    STDMETHOD(SetStateChangeOptions)(THIS_ DWORD dwStateClass, DWORD dwStateNum, DWORD dwFlags) PURE;
};


#undef INTERFACE
#define INTERFACE IDirect3DRMViewport

DECLARE_INTERFACE_(IDirect3DRMViewport, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMViewport methods
     */
    STDMETHOD(Init)
    (	THIS_ LPDIRECT3DRMDEVICE dev, LPDIRECT3DRMFRAME camera,
	DWORD xpos, DWORD ypos, DWORD width, DWORD height
    ) PURE;
    STDMETHOD(Clear)(THIS) PURE;
    STDMETHOD(Render)(THIS_ LPDIRECT3DRMFRAME) PURE;

    STDMETHOD(SetFront)(THIS_ D3DVALUE) PURE;
    STDMETHOD(SetBack)(THIS_ D3DVALUE) PURE;
    STDMETHOD(SetField)(THIS_ D3DVALUE) PURE;
    STDMETHOD(SetUniformScaling)(THIS_ BOOL) PURE;
    STDMETHOD(SetCamera)(THIS_ LPDIRECT3DRMFRAME) PURE;
    STDMETHOD(SetProjection)(THIS_ D3DRMPROJECTIONTYPE) PURE;
    STDMETHOD(Transform)(THIS_ D3DRMVECTOR4D *d, D3DVECTOR *s) PURE;
    STDMETHOD(InverseTransform)(THIS_ D3DVECTOR *d, D3DRMVECTOR4D *s) PURE;
    STDMETHOD(Configure)(THIS_ LONG x, LONG y, DWORD width, DWORD height) PURE;
    STDMETHOD(ForceUpdate)(THIS_ DWORD x1, DWORD y1, DWORD x2, DWORD y2) PURE;
    STDMETHOD(SetPlane)(THIS_ D3DVALUE left, D3DVALUE right, D3DVALUE bottom, D3DVALUE top) PURE;

    STDMETHOD(GetCamera)(THIS_ LPDIRECT3DRMFRAME *) PURE;
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DRMDEVICE *) PURE;
    STDMETHOD(GetPlane)(THIS_ D3DVALUE *left, D3DVALUE *right, D3DVALUE *bottom, D3DVALUE *top) PURE;
    STDMETHOD(Pick)(THIS_ LONG x, LONG y, LPDIRECT3DRMPICKEDARRAY *return_visuals) PURE;

    STDMETHOD_(BOOL, GetUniformScaling)(THIS) PURE;
    STDMETHOD_(LONG, GetX)(THIS) PURE;
    STDMETHOD_(LONG, GetY)(THIS) PURE;
    STDMETHOD_(DWORD, GetWidth)(THIS) PURE;
    STDMETHOD_(DWORD, GetHeight)(THIS) PURE;
    STDMETHOD_(D3DVALUE, GetField)(THIS) PURE;
    STDMETHOD_(D3DVALUE, GetBack)(THIS) PURE;
    STDMETHOD_(D3DVALUE, GetFront)(THIS) PURE;
    STDMETHOD_(D3DRMPROJECTIONTYPE, GetProjection)(THIS) PURE;
    STDMETHOD(GetDirect3DViewport)(THIS_ LPDIRECT3DVIEWPORT *) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMViewport2
DECLARE_INTERFACE_(IDirect3DRMViewport2, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMViewport2 methods
     */
    STDMETHOD(Init)
    (	THIS_ LPDIRECT3DRMDEVICE3 dev, LPDIRECT3DRMFRAME3 camera,
	DWORD xpos, DWORD ypos, DWORD width, DWORD height
    ) PURE;
    STDMETHOD(Clear)(THIS_ DWORD dwFlags) PURE;
    STDMETHOD(Render)(THIS_ LPDIRECT3DRMFRAME3) PURE;

    STDMETHOD(SetFront)(THIS_ D3DVALUE) PURE;
    STDMETHOD(SetBack)(THIS_ D3DVALUE) PURE;
    STDMETHOD(SetField)(THIS_ D3DVALUE) PURE;
    STDMETHOD(SetUniformScaling)(THIS_ BOOL) PURE;
    STDMETHOD(SetCamera)(THIS_ LPDIRECT3DRMFRAME3) PURE;
    STDMETHOD(SetProjection)(THIS_ D3DRMPROJECTIONTYPE) PURE;
    STDMETHOD(Transform)(THIS_ D3DRMVECTOR4D *d, D3DVECTOR *s) PURE;
    STDMETHOD(InverseTransform)(THIS_ D3DVECTOR *d, D3DRMVECTOR4D *s) PURE;
    STDMETHOD(Configure)(THIS_ LONG x, LONG y, DWORD width, DWORD height) PURE;
    STDMETHOD(ForceUpdate)(THIS_ DWORD x1, DWORD y1, DWORD x2, DWORD y2) PURE;
    STDMETHOD(SetPlane)(THIS_ D3DVALUE left, D3DVALUE right, D3DVALUE bottom, D3DVALUE top) PURE;

    STDMETHOD(GetCamera)(THIS_ LPDIRECT3DRMFRAME3 *) PURE;
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DRMDEVICE3 *) PURE;
    STDMETHOD(GetPlane)(THIS_ D3DVALUE *left, D3DVALUE *right, D3DVALUE *bottom, D3DVALUE *top) PURE;
    STDMETHOD(Pick)(THIS_ LONG x, LONG y, LPDIRECT3DRMPICKEDARRAY *return_visuals) PURE;

    STDMETHOD_(BOOL, GetUniformScaling)(THIS) PURE;
    STDMETHOD_(LONG, GetX)(THIS) PURE;
    STDMETHOD_(LONG, GetY)(THIS) PURE;
    STDMETHOD_(DWORD, GetWidth)(THIS) PURE;
    STDMETHOD_(DWORD, GetHeight)(THIS) PURE;
    STDMETHOD_(D3DVALUE, GetField)(THIS) PURE;
    STDMETHOD_(D3DVALUE, GetBack)(THIS) PURE;
    STDMETHOD_(D3DVALUE, GetFront)(THIS) PURE;
    STDMETHOD_(D3DRMPROJECTIONTYPE, GetProjection)(THIS) PURE;
    STDMETHOD(GetDirect3DViewport)(THIS_ LPDIRECT3DVIEWPORT *) PURE;
    STDMETHOD(TransformVectors)(THIS_ DWORD dwNumVectors,
				LPD3DRMVECTOR4D lpDstVectors,
				LPD3DVECTOR lpSrcVectors) PURE;
    STDMETHOD(InverseTransformVectors)(THIS_ DWORD dwNumVectors,
				       LPD3DVECTOR lpDstVectors,
				       LPD3DRMVECTOR4D lpSrcVectors) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMFrame

DECLARE_INTERFACE_(IDirect3DRMFrame, IDirect3DRMVisual)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMFrame methods
     */
    STDMETHOD(AddChild)(THIS_ LPDIRECT3DRMFRAME child) PURE;
    STDMETHOD(AddLight)(THIS_ LPDIRECT3DRMLIGHT) PURE;
    STDMETHOD(AddMoveCallback)(THIS_ D3DRMFRAMEMOVECALLBACK, VOID *arg) PURE;
    STDMETHOD(AddTransform)(THIS_ D3DRMCOMBINETYPE, D3DRMMATRIX4D) PURE;
    STDMETHOD(AddTranslation)(THIS_ D3DRMCOMBINETYPE, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(AddScale)(THIS_ D3DRMCOMBINETYPE, D3DVALUE sx, D3DVALUE sy, D3DVALUE sz) PURE;
    STDMETHOD(AddRotation)(THIS_ D3DRMCOMBINETYPE, D3DVALUE x, D3DVALUE y, D3DVALUE z, D3DVALUE theta) PURE;
    STDMETHOD(AddVisual)(THIS_ LPDIRECT3DRMVISUAL) PURE;
    STDMETHOD(GetChildren)(THIS_ LPDIRECT3DRMFRAMEARRAY *children) PURE;
    STDMETHOD_(D3DCOLOR, GetColor)(THIS) PURE;
    STDMETHOD(GetLights)(THIS_ LPDIRECT3DRMLIGHTARRAY *lights) PURE;
    STDMETHOD_(D3DRMMATERIALMODE, GetMaterialMode)(THIS) PURE;
    STDMETHOD(GetParent)(THIS_ LPDIRECT3DRMFRAME *) PURE;
    STDMETHOD(GetPosition)(THIS_ LPDIRECT3DRMFRAME reference, LPD3DVECTOR return_position) PURE;
    STDMETHOD(GetRotation)(THIS_ LPDIRECT3DRMFRAME reference, LPD3DVECTOR axis, LPD3DVALUE return_theta) PURE;
    STDMETHOD(GetScene)(THIS_ LPDIRECT3DRMFRAME *) PURE;
    STDMETHOD_(D3DRMSORTMODE, GetSortMode)(THIS) PURE;
    STDMETHOD(GetTexture)(THIS_ LPDIRECT3DRMTEXTURE *) PURE;
    STDMETHOD(GetTransform)(THIS_ D3DRMMATRIX4D return_matrix) PURE;
    STDMETHOD(GetVelocity)(THIS_ LPDIRECT3DRMFRAME reference, LPD3DVECTOR return_velocity, BOOL with_rotation) PURE;
    STDMETHOD(GetOrientation)(THIS_ LPDIRECT3DRMFRAME reference, LPD3DVECTOR dir, LPD3DVECTOR up) PURE;
    STDMETHOD(GetVisuals)(THIS_ LPDIRECT3DRMVISUALARRAY *visuals) PURE;
    STDMETHOD(GetTextureTopology)(THIS_ BOOL *wrap_u, BOOL *wrap_v) PURE;
    STDMETHOD(InverseTransform)(THIS_ D3DVECTOR *d, D3DVECTOR *s) PURE;
    STDMETHOD(Load)(THIS_ LPVOID filename, LPVOID name, D3DRMLOADOPTIONS loadflags, D3DRMLOADTEXTURECALLBACK, LPVOID lpArg)PURE;
    STDMETHOD(LookAt)(THIS_ LPDIRECT3DRMFRAME target, LPDIRECT3DRMFRAME reference, D3DRMFRAMECONSTRAINT) PURE;
    STDMETHOD(Move)(THIS_ D3DVALUE delta) PURE;
    STDMETHOD(DeleteChild)(THIS_ LPDIRECT3DRMFRAME) PURE;
    STDMETHOD(DeleteLight)(THIS_ LPDIRECT3DRMLIGHT) PURE;
    STDMETHOD(DeleteMoveCallback)(THIS_ D3DRMFRAMEMOVECALLBACK, VOID *arg) PURE;
    STDMETHOD(DeleteVisual)(THIS_ LPDIRECT3DRMVISUAL) PURE;
    STDMETHOD_(D3DCOLOR, GetSceneBackground)(THIS) PURE;
    STDMETHOD(GetSceneBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE *) PURE;
    STDMETHOD_(D3DCOLOR, GetSceneFogColor)(THIS) PURE;
    STDMETHOD_(BOOL, GetSceneFogEnable)(THIS) PURE;
    STDMETHOD_(D3DRMFOGMODE, GetSceneFogMode)(THIS) PURE;
    STDMETHOD(GetSceneFogParams)(THIS_ D3DVALUE *return_start, D3DVALUE *return_end, D3DVALUE *return_density) PURE;
    STDMETHOD(SetSceneBackground)(THIS_ D3DCOLOR) PURE;
    STDMETHOD(SetSceneBackgroundRGB)(THIS_ D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;
    STDMETHOD(SetSceneBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(SetSceneBackgroundImage)(THIS_ LPDIRECT3DRMTEXTURE) PURE;
    STDMETHOD(SetSceneFogEnable)(THIS_ BOOL) PURE;
    STDMETHOD(SetSceneFogColor)(THIS_ D3DCOLOR) PURE;
    STDMETHOD(SetSceneFogMode)(THIS_ D3DRMFOGMODE) PURE;
    STDMETHOD(SetSceneFogParams)(THIS_ D3DVALUE start, D3DVALUE end, D3DVALUE density) PURE;
    STDMETHOD(SetColor)(THIS_ D3DCOLOR) PURE;
    STDMETHOD(SetColorRGB)(THIS_ D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;
    STDMETHOD_(D3DRMZBUFFERMODE, GetZbufferMode)(THIS) PURE;
    STDMETHOD(SetMaterialMode)(THIS_ D3DRMMATERIALMODE) PURE;
    STDMETHOD(SetOrientation)
    (	THIS_ LPDIRECT3DRMFRAME reference,
	D3DVALUE dx, D3DVALUE dy, D3DVALUE dz,
	D3DVALUE ux, D3DVALUE uy, D3DVALUE uz
    ) PURE;
    STDMETHOD(SetPosition)(THIS_ LPDIRECT3DRMFRAME reference, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(SetRotation)(THIS_ LPDIRECT3DRMFRAME reference, D3DVALUE x, D3DVALUE y, D3DVALUE z, D3DVALUE theta) PURE;
    STDMETHOD(SetSortMode)(THIS_ D3DRMSORTMODE) PURE;
    STDMETHOD(SetTexture)(THIS_ LPDIRECT3DRMTEXTURE) PURE;
    STDMETHOD(SetTextureTopology)(THIS_ BOOL wrap_u, BOOL wrap_v) PURE;
    STDMETHOD(SetVelocity)(THIS_ LPDIRECT3DRMFRAME reference, D3DVALUE x, D3DVALUE y, D3DVALUE z, BOOL with_rotation) PURE;
    STDMETHOD(SetZbufferMode)(THIS_ D3DRMZBUFFERMODE) PURE;
    STDMETHOD(Transform)(THIS_ D3DVECTOR *d, D3DVECTOR *s) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMFrame2

DECLARE_INTERFACE_(IDirect3DRMFrame2, IDirect3DRMFrame)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMFrame methods
     */
    STDMETHOD(AddChild)(THIS_ LPDIRECT3DRMFRAME child) PURE;
    STDMETHOD(AddLight)(THIS_ LPDIRECT3DRMLIGHT) PURE;
    STDMETHOD(AddMoveCallback)(THIS_ D3DRMFRAMEMOVECALLBACK, VOID *arg) PURE;
    STDMETHOD(AddTransform)(THIS_ D3DRMCOMBINETYPE, D3DRMMATRIX4D) PURE;
    STDMETHOD(AddTranslation)(THIS_ D3DRMCOMBINETYPE, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(AddScale)(THIS_ D3DRMCOMBINETYPE, D3DVALUE sx, D3DVALUE sy, D3DVALUE sz) PURE;
    STDMETHOD(AddRotation)(THIS_ D3DRMCOMBINETYPE, D3DVALUE x, D3DVALUE y, D3DVALUE z, D3DVALUE theta) PURE;
    STDMETHOD(AddVisual)(THIS_ LPDIRECT3DRMVISUAL) PURE;
    STDMETHOD(GetChildren)(THIS_ LPDIRECT3DRMFRAMEARRAY *children) PURE;
    STDMETHOD_(D3DCOLOR, GetColor)(THIS) PURE;
    STDMETHOD(GetLights)(THIS_ LPDIRECT3DRMLIGHTARRAY *lights) PURE;
    STDMETHOD_(D3DRMMATERIALMODE, GetMaterialMode)(THIS) PURE;
    STDMETHOD(GetParent)(THIS_ LPDIRECT3DRMFRAME *) PURE;
    STDMETHOD(GetPosition)(THIS_ LPDIRECT3DRMFRAME reference, LPD3DVECTOR return_position) PURE;
    STDMETHOD(GetRotation)(THIS_ LPDIRECT3DRMFRAME reference, LPD3DVECTOR axis, LPD3DVALUE return_theta) PURE;
    STDMETHOD(GetScene)(THIS_ LPDIRECT3DRMFRAME *) PURE;
    STDMETHOD_(D3DRMSORTMODE, GetSortMode)(THIS) PURE;
    STDMETHOD(GetTexture)(THIS_ LPDIRECT3DRMTEXTURE *) PURE;
    STDMETHOD(GetTransform)(THIS_ D3DRMMATRIX4D return_matrix) PURE;
    STDMETHOD(GetVelocity)(THIS_ LPDIRECT3DRMFRAME reference, LPD3DVECTOR return_velocity, BOOL with_rotation) PURE;
    STDMETHOD(GetOrientation)(THIS_ LPDIRECT3DRMFRAME reference, LPD3DVECTOR dir, LPD3DVECTOR up) PURE;
    STDMETHOD(GetVisuals)(THIS_ LPDIRECT3DRMVISUALARRAY *visuals) PURE;
    STDMETHOD(GetTextureTopology)(THIS_ BOOL *wrap_u, BOOL *wrap_v) PURE;
    STDMETHOD(InverseTransform)(THIS_ D3DVECTOR *d, D3DVECTOR *s) PURE;
    STDMETHOD(Load)(THIS_ LPVOID filename, LPVOID name, D3DRMLOADOPTIONS loadflags, D3DRMLOADTEXTURECALLBACK, LPVOID lpArg)PURE;
    STDMETHOD(LookAt)(THIS_ LPDIRECT3DRMFRAME target, LPDIRECT3DRMFRAME reference, D3DRMFRAMECONSTRAINT) PURE;
    STDMETHOD(Move)(THIS_ D3DVALUE delta) PURE;
    STDMETHOD(DeleteChild)(THIS_ LPDIRECT3DRMFRAME) PURE;
    STDMETHOD(DeleteLight)(THIS_ LPDIRECT3DRMLIGHT) PURE;
    STDMETHOD(DeleteMoveCallback)(THIS_ D3DRMFRAMEMOVECALLBACK, VOID *arg) PURE;
    STDMETHOD(DeleteVisual)(THIS_ LPDIRECT3DRMVISUAL) PURE;
    STDMETHOD_(D3DCOLOR, GetSceneBackground)(THIS) PURE;
    STDMETHOD(GetSceneBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE *) PURE;
    STDMETHOD_(D3DCOLOR, GetSceneFogColor)(THIS) PURE;
    STDMETHOD_(BOOL, GetSceneFogEnable)(THIS) PURE;
    STDMETHOD_(D3DRMFOGMODE, GetSceneFogMode)(THIS) PURE;
    STDMETHOD(GetSceneFogParams)(THIS_ D3DVALUE *return_start, D3DVALUE *return_end, D3DVALUE *return_density) PURE;
    STDMETHOD(SetSceneBackground)(THIS_ D3DCOLOR) PURE;
    STDMETHOD(SetSceneBackgroundRGB)(THIS_ D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;
    STDMETHOD(SetSceneBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(SetSceneBackgroundImage)(THIS_ LPDIRECT3DRMTEXTURE) PURE;
    STDMETHOD(SetSceneFogEnable)(THIS_ BOOL) PURE;
    STDMETHOD(SetSceneFogColor)(THIS_ D3DCOLOR) PURE;
    STDMETHOD(SetSceneFogMode)(THIS_ D3DRMFOGMODE) PURE;
    STDMETHOD(SetSceneFogParams)(THIS_ D3DVALUE start, D3DVALUE end, D3DVALUE density) PURE;
    STDMETHOD(SetColor)(THIS_ D3DCOLOR) PURE;
    STDMETHOD(SetColorRGB)(THIS_ D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;
    STDMETHOD_(D3DRMZBUFFERMODE, GetZbufferMode)(THIS) PURE;
    STDMETHOD(SetMaterialMode)(THIS_ D3DRMMATERIALMODE) PURE;
    STDMETHOD(SetOrientation)
    (	THIS_ LPDIRECT3DRMFRAME reference,
	D3DVALUE dx, D3DVALUE dy, D3DVALUE dz,
	D3DVALUE ux, D3DVALUE uy, D3DVALUE uz
    ) PURE;
    STDMETHOD(SetPosition)(THIS_ LPDIRECT3DRMFRAME reference, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(SetRotation)(THIS_ LPDIRECT3DRMFRAME reference, D3DVALUE x, D3DVALUE y, D3DVALUE z, D3DVALUE theta) PURE;
    STDMETHOD(SetSortMode)(THIS_ D3DRMSORTMODE) PURE;
    STDMETHOD(SetTexture)(THIS_ LPDIRECT3DRMTEXTURE) PURE;
    STDMETHOD(SetTextureTopology)(THIS_ BOOL wrap_u, BOOL wrap_v) PURE;
    STDMETHOD(SetVelocity)(THIS_ LPDIRECT3DRMFRAME reference, D3DVALUE x, D3DVALUE y, D3DVALUE z, BOOL with_rotation) PURE;
    STDMETHOD(SetZbufferMode)(THIS_ D3DRMZBUFFERMODE) PURE;
    STDMETHOD(Transform)(THIS_ D3DVECTOR *d, D3DVECTOR *s) PURE;

    /*
     * IDirect3DRMFrame2 methods
     */
    STDMETHOD(AddMoveCallback2)(THIS_ D3DRMFRAMEMOVECALLBACK, VOID *arg, DWORD dwFlags) PURE;
    STDMETHOD(GetBox)(THIS_ LPD3DRMBOX) PURE;
    STDMETHOD_(BOOL, GetBoxEnable)(THIS) PURE;
    STDMETHOD(GetAxes)(THIS_ LPD3DVECTOR dir, LPD3DVECTOR up);
    STDMETHOD(GetMaterial)(THIS_ LPDIRECT3DRMMATERIAL *) PURE;
    STDMETHOD_(BOOL, GetInheritAxes)(THIS);
    STDMETHOD(GetHierarchyBox)(THIS_ LPD3DRMBOX) PURE;

    STDMETHOD(SetBox)(THIS_ LPD3DRMBOX) PURE;
    STDMETHOD(SetBoxEnable)(THIS_ BOOL) PURE;
    STDMETHOD(SetAxes)(THIS_ D3DVALUE dx, D3DVALUE dy, D3DVALUE dz,
		       D3DVALUE ux, D3DVALUE uy, D3DVALUE uz);
    STDMETHOD(SetInheritAxes)(THIS_ BOOL inherit_from_parent);
    STDMETHOD(SetMaterial)(THIS_ LPDIRECT3DRMMATERIAL) PURE;
    STDMETHOD(SetQuaternion)(THIS_ LPDIRECT3DRMFRAME reference, D3DRMQUATERNION *q) PURE;

    STDMETHOD(RayPick)(THIS_ LPDIRECT3DRMFRAME reference, LPD3DRMRAY ray, DWORD dwFlags, LPDIRECT3DRMPICKED2ARRAY *return_visuals) PURE;
    STDMETHOD(Save)(THIS_ LPCSTR filename, D3DRMXOFFORMAT d3dFormat, 
		    D3DRMSAVEOPTIONS d3dSaveFlags);
};

#undef INTERFACE
#define INTERFACE IDirect3DRMFrame3

DECLARE_INTERFACE_(IDirect3DRMFrame3, IDirect3DRMVisual)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMFrame3 methods
     */
    STDMETHOD(AddChild)(THIS_ LPDIRECT3DRMFRAME3 child) PURE;
    STDMETHOD(AddLight)(THIS_ LPDIRECT3DRMLIGHT) PURE;
    STDMETHOD(AddMoveCallback)(THIS_ D3DRMFRAME3MOVECALLBACK, VOID *arg, DWORD dwFlags) PURE;
    STDMETHOD(AddTransform)(THIS_ D3DRMCOMBINETYPE, D3DRMMATRIX4D) PURE;
    STDMETHOD(AddTranslation)(THIS_ D3DRMCOMBINETYPE, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(AddScale)(THIS_ D3DRMCOMBINETYPE, D3DVALUE sx, D3DVALUE sy, D3DVALUE sz) PURE;
    STDMETHOD(AddRotation)(THIS_ D3DRMCOMBINETYPE, D3DVALUE x, D3DVALUE y, D3DVALUE z, D3DVALUE theta) PURE;
    STDMETHOD(AddVisual)(THIS_ LPUNKNOWN) PURE;
    STDMETHOD(GetChildren)(THIS_ LPDIRECT3DRMFRAMEARRAY *children) PURE;
    STDMETHOD_(D3DCOLOR, GetColor)(THIS) PURE;
    STDMETHOD(GetLights)(THIS_ LPDIRECT3DRMLIGHTARRAY *lights) PURE;
    STDMETHOD_(D3DRMMATERIALMODE, GetMaterialMode)(THIS) PURE;
    STDMETHOD(GetParent)(THIS_ LPDIRECT3DRMFRAME3 *) PURE;
    STDMETHOD(GetPosition)(THIS_ LPDIRECT3DRMFRAME3 reference, LPD3DVECTOR return_position) PURE;
    STDMETHOD(GetRotation)(THIS_ LPDIRECT3DRMFRAME3 reference, LPD3DVECTOR axis, LPD3DVALUE return_theta) PURE;
    STDMETHOD(GetScene)(THIS_ LPDIRECT3DRMFRAME3 *) PURE;
    STDMETHOD_(D3DRMSORTMODE, GetSortMode)(THIS) PURE;
    STDMETHOD(GetTexture)(THIS_ LPDIRECT3DRMTEXTURE3 *) PURE;
    STDMETHOD(GetTransform)(THIS_ LPDIRECT3DRMFRAME3 reference,
			     D3DRMMATRIX4D rmMatrix) PURE;
    STDMETHOD(GetVelocity)(THIS_ LPDIRECT3DRMFRAME3 reference, LPD3DVECTOR return_velocity, BOOL with_rotation) PURE;
    STDMETHOD(GetOrientation)(THIS_ LPDIRECT3DRMFRAME3 reference, LPD3DVECTOR dir, LPD3DVECTOR up) PURE;
    STDMETHOD(GetVisuals)(THIS_ LPDWORD lpdwCount, LPUNKNOWN *) PURE;
    STDMETHOD(InverseTransform)(THIS_ D3DVECTOR *d, D3DVECTOR *s) PURE;
    STDMETHOD(Load)(THIS_ LPVOID filename, LPVOID name, D3DRMLOADOPTIONS loadflags, D3DRMLOADTEXTURE3CALLBACK, LPVOID lpArg)PURE;
    STDMETHOD(LookAt)(THIS_ LPDIRECT3DRMFRAME3 target, LPDIRECT3DRMFRAME3 reference, D3DRMFRAMECONSTRAINT) PURE;
    STDMETHOD(Move)(THIS_ D3DVALUE delta) PURE;
    STDMETHOD(DeleteChild)(THIS_ LPDIRECT3DRMFRAME3) PURE;
    STDMETHOD(DeleteLight)(THIS_ LPDIRECT3DRMLIGHT) PURE;
    STDMETHOD(DeleteMoveCallback)(THIS_ D3DRMFRAME3MOVECALLBACK, VOID *arg) PURE;
    STDMETHOD(DeleteVisual)(THIS_ LPUNKNOWN) PURE;
    STDMETHOD_(D3DCOLOR, GetSceneBackground)(THIS) PURE;
    STDMETHOD(GetSceneBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE *) PURE;
    STDMETHOD_(D3DCOLOR, GetSceneFogColor)(THIS) PURE;
    STDMETHOD_(BOOL, GetSceneFogEnable)(THIS) PURE;
    STDMETHOD_(D3DRMFOGMODE, GetSceneFogMode)(THIS) PURE;
    STDMETHOD(GetSceneFogParams)(THIS_ D3DVALUE *return_start, D3DVALUE *return_end, D3DVALUE *return_density) PURE;
    STDMETHOD(SetSceneBackground)(THIS_ D3DCOLOR) PURE;
    STDMETHOD(SetSceneBackgroundRGB)(THIS_ D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;
    STDMETHOD(SetSceneBackgroundDepth)(THIS_ LPDIRECTDRAWSURFACE) PURE;
    STDMETHOD(SetSceneBackgroundImage)(THIS_ LPDIRECT3DRMTEXTURE3) PURE;
    STDMETHOD(SetSceneFogEnable)(THIS_ BOOL) PURE;
    STDMETHOD(SetSceneFogColor)(THIS_ D3DCOLOR) PURE;
    STDMETHOD(SetSceneFogMode)(THIS_ D3DRMFOGMODE) PURE;
    STDMETHOD(SetSceneFogParams)(THIS_ D3DVALUE start, D3DVALUE end, D3DVALUE density) PURE;
    STDMETHOD(SetColor)(THIS_ D3DCOLOR) PURE;
    STDMETHOD(SetColorRGB)(THIS_ D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;
    STDMETHOD_(D3DRMZBUFFERMODE, GetZbufferMode)(THIS) PURE;
    STDMETHOD(SetMaterialMode)(THIS_ D3DRMMATERIALMODE) PURE;
    STDMETHOD(SetOrientation)
    (	THIS_ LPDIRECT3DRMFRAME3 reference,
	D3DVALUE dx, D3DVALUE dy, D3DVALUE dz,
	D3DVALUE ux, D3DVALUE uy, D3DVALUE uz
    ) PURE;
    STDMETHOD(SetPosition)(THIS_ LPDIRECT3DRMFRAME3 reference, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(SetRotation)(THIS_ LPDIRECT3DRMFRAME3 reference, D3DVALUE x, D3DVALUE y, D3DVALUE z, D3DVALUE theta) PURE;
    STDMETHOD(SetSortMode)(THIS_ D3DRMSORTMODE) PURE;
    STDMETHOD(SetTexture)(THIS_ LPDIRECT3DRMTEXTURE3) PURE;
    STDMETHOD(SetVelocity)(THIS_ LPDIRECT3DRMFRAME3 reference, D3DVALUE x, D3DVALUE y, D3DVALUE z, BOOL with_rotation) PURE;
    STDMETHOD(SetZbufferMode)(THIS_ D3DRMZBUFFERMODE) PURE;
    STDMETHOD(Transform)(THIS_ D3DVECTOR *d, D3DVECTOR *s) PURE;
    STDMETHOD(GetBox)(THIS_ LPD3DRMBOX) PURE;
    STDMETHOD_(BOOL, GetBoxEnable)(THIS) PURE;
    STDMETHOD(GetAxes)(THIS_ LPD3DVECTOR dir, LPD3DVECTOR up);
    STDMETHOD(GetMaterial)(THIS_ LPDIRECT3DRMMATERIAL2 *) PURE;
    STDMETHOD_(BOOL, GetInheritAxes)(THIS);
    STDMETHOD(GetHierarchyBox)(THIS_ LPD3DRMBOX) PURE;

    STDMETHOD(SetBox)(THIS_ LPD3DRMBOX) PURE;
    STDMETHOD(SetBoxEnable)(THIS_ BOOL) PURE;
    STDMETHOD(SetAxes)(THIS_ D3DVALUE dx, D3DVALUE dy, D3DVALUE dz,
		       D3DVALUE ux, D3DVALUE uy, D3DVALUE uz);
    STDMETHOD(SetInheritAxes)(THIS_ BOOL inherit_from_parent);
    STDMETHOD(SetMaterial)(THIS_ LPDIRECT3DRMMATERIAL2) PURE;
    STDMETHOD(SetQuaternion)(THIS_ LPDIRECT3DRMFRAME3 reference, D3DRMQUATERNION *q) PURE;

    STDMETHOD(RayPick)(THIS_ LPDIRECT3DRMFRAME3 reference, LPD3DRMRAY ray, DWORD dwFlags, LPDIRECT3DRMPICKED2ARRAY *return_visuals) PURE;
    STDMETHOD(Save)(THIS_ LPCSTR filename, D3DRMXOFFORMAT d3dFormat, 
		    D3DRMSAVEOPTIONS d3dSaveFlags);
    STDMETHOD(TransformVectors)(THIS_ LPDIRECT3DRMFRAME3 reference,
				DWORD dwNumVectors,
				LPD3DVECTOR lpDstVectors,
				LPD3DVECTOR lpSrcVectors) PURE;
    STDMETHOD(InverseTransformVectors)(THIS_ LPDIRECT3DRMFRAME3 reference,
				       DWORD dwNumVectors,
				       LPD3DVECTOR lpDstVectors,
				       LPD3DVECTOR lpSrcVectors) PURE;
    STDMETHOD(SetTraversalOptions)(THIS_ DWORD dwFlags) PURE;
    STDMETHOD(GetTraversalOptions)(THIS_ LPDWORD lpdwFlags) PURE;
    STDMETHOD(SetSceneFogMethod)(THIS_ DWORD dwFlags) PURE;
    STDMETHOD(GetSceneFogMethod)(THIS_ LPDWORD lpdwFlags) PURE;
    STDMETHOD(SetMaterialOverride)(THIS_ LPD3DRMMATERIALOVERRIDE) PURE;
    STDMETHOD(GetMaterialOverride)(THIS_ LPD3DRMMATERIALOVERRIDE) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMMesh

DECLARE_INTERFACE_(IDirect3DRMMesh, IDirect3DRMVisual)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMMesh methods
     */
    STDMETHOD(Scale)(THIS_ D3DVALUE sx, D3DVALUE sy, D3DVALUE sz) PURE;
    STDMETHOD(Translate)(THIS_ D3DVALUE tx, D3DVALUE ty, D3DVALUE tz) PURE;
    STDMETHOD(GetBox)(THIS_ D3DRMBOX *) PURE;
    STDMETHOD(AddGroup)(THIS_ unsigned vCount, unsigned fCount, unsigned vPerFace, unsigned *fData, D3DRMGROUPINDEX *returnId) PURE;
    STDMETHOD(SetVertices)(THIS_ D3DRMGROUPINDEX id, unsigned index, unsigned count, D3DRMVERTEX *values) PURE;
    STDMETHOD(SetGroupColor)(THIS_ D3DRMGROUPINDEX id, D3DCOLOR value) PURE;
    STDMETHOD(SetGroupColorRGB)(THIS_ D3DRMGROUPINDEX id, D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;
    STDMETHOD(SetGroupMapping)(THIS_ D3DRMGROUPINDEX id, D3DRMMAPPING value) PURE;
    STDMETHOD(SetGroupQuality)(THIS_ D3DRMGROUPINDEX id, D3DRMRENDERQUALITY value) PURE;
    STDMETHOD(SetGroupMaterial)(THIS_ D3DRMGROUPINDEX id, LPDIRECT3DRMMATERIAL value) PURE;
    STDMETHOD(SetGroupTexture)(THIS_ D3DRMGROUPINDEX id, LPDIRECT3DRMTEXTURE value) PURE;

    STDMETHOD_(unsigned, GetGroupCount)(THIS) PURE;
    STDMETHOD(GetGroup)(THIS_ D3DRMGROUPINDEX id, unsigned *vCount, unsigned *fCount, unsigned *vPerFace, DWORD *fDataSize, unsigned *fData) PURE;
    STDMETHOD(GetVertices)(THIS_ D3DRMGROUPINDEX id, DWORD index, DWORD count, D3DRMVERTEX *returnPtr) PURE;
    STDMETHOD_(D3DCOLOR, GetGroupColor)(THIS_ D3DRMGROUPINDEX id) PURE;
    STDMETHOD_(D3DRMMAPPING, GetGroupMapping)(THIS_ D3DRMGROUPINDEX id) PURE;
    STDMETHOD_(D3DRMRENDERQUALITY, GetGroupQuality)(THIS_ D3DRMGROUPINDEX id) PURE;
    STDMETHOD(GetGroupMaterial)(THIS_ D3DRMGROUPINDEX id, LPDIRECT3DRMMATERIAL *returnPtr) PURE;
    STDMETHOD(GetGroupTexture)(THIS_ D3DRMGROUPINDEX id, LPDIRECT3DRMTEXTURE *returnPtr) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMProgressiveMesh

DECLARE_INTERFACE_(IDirect3DRMProgressiveMesh, IDirect3DRMVisual)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMProgressiveMesh methods
     */
    STDMETHOD(Load) (THIS_ LPVOID lpObjLocation, LPVOID lpObjId, 
		     D3DRMLOADOPTIONS dloLoadflags, D3DRMLOADTEXTURECALLBACK lpCallback,
		     LPVOID lpArg) PURE;
    STDMETHOD(GetLoadStatus) (THIS_ LPD3DRMPMESHLOADSTATUS lpStatus) PURE;
    STDMETHOD(SetMinRenderDetail) (THIS_ D3DVALUE d3dVal) PURE;
    STDMETHOD(Abort) (THIS_ DWORD dwFlags) PURE;
    
    STDMETHOD(GetFaceDetail) (THIS_ LPDWORD lpdwCount) PURE;
    STDMETHOD(GetVertexDetail) (THIS_ LPDWORD lpdwCount) PURE;
    STDMETHOD(SetFaceDetail) (THIS_ DWORD dwCount) PURE;
    STDMETHOD(SetVertexDetail) (THIS_ DWORD dwCount) PURE;
    STDMETHOD(GetFaceDetailRange) (THIS_ LPDWORD lpdwMin, LPDWORD lpdwMax) PURE;
    STDMETHOD(GetVertexDetailRange) (THIS_ LPDWORD lpdwMin, LPDWORD lpdwMax) PURE;
    STDMETHOD(GetDetail) (THIS_ D3DVALUE *lpdvVal) PURE;
    STDMETHOD(SetDetail) (THIS_ D3DVALUE d3dVal) PURE;

    STDMETHOD(RegisterEvents) (THIS_ HANDLE hEvent, DWORD dwFlags, DWORD dwReserved) PURE;
    STDMETHOD(CreateMesh) (THIS_ LPDIRECT3DRMMESH *lplpD3DRMMesh) PURE;
    STDMETHOD(Duplicate) (THIS_ LPDIRECT3DRMPROGRESSIVEMESH *lplpD3DRMPMesh) PURE;
    STDMETHOD(GetBox) (THIS_ LPD3DRMBOX lpBBox) PURE;
    STDMETHOD(SetQuality) (THIS_ D3DRMRENDERQUALITY) PURE;
    STDMETHOD(GetQuality) (THIS_ LPD3DRMRENDERQUALITY lpdwquality) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMShadow

DECLARE_INTERFACE_(IDirect3DRMShadow, IDirect3DRMVisual)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMShadow methods
     */
    STDMETHOD(Init)
    (	THIS_ LPDIRECT3DRMVISUAL visual, LPDIRECT3DRMLIGHT light,
	D3DVALUE px, D3DVALUE py, D3DVALUE pz,
	D3DVALUE nx, D3DVALUE ny, D3DVALUE nz
    ) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMShadow2

DECLARE_INTERFACE_(IDirect3DRMShadow2, IDirect3DRMVisual)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMShadow methods
     */
    STDMETHOD(Init)
    (	THIS_ LPUNKNOWN pUNK, LPDIRECT3DRMLIGHT light,
	D3DVALUE px, D3DVALUE py, D3DVALUE pz,
	D3DVALUE nx, D3DVALUE ny, D3DVALUE nz
    ) PURE;

    /*
     * IDirect3DRMShadow2 methods
     */
    STDMETHOD(GetVisual)(THIS_ LPDIRECT3DRMVISUAL *) PURE;
    STDMETHOD(SetVisual)(THIS_ LPUNKNOWN pUNK, DWORD) PURE;
    STDMETHOD(GetLight)(THIS_ LPDIRECT3DRMLIGHT *) PURE;
    STDMETHOD(SetLight)(THIS_ LPDIRECT3DRMLIGHT, DWORD) PURE;
    STDMETHOD(GetPlane)(THIS_ LPD3DVALUE px, LPD3DVALUE py, LPD3DVALUE pz,
			LPD3DVALUE nx, LPD3DVALUE ny, LPD3DVALUE nz) PURE;
    STDMETHOD(SetPlane)(THIS_ D3DVALUE px, D3DVALUE py, D3DVALUE pz,
			D3DVALUE nx, D3DVALUE ny, D3DVALUE nz, DWORD) PURE;
    STDMETHOD(GetOptions)(THIS_ LPDWORD) PURE;
    STDMETHOD(SetOptions)(THIS_ DWORD) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMFace

DECLARE_INTERFACE_(IDirect3DRMFace, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMFace methods
     */
     STDMETHOD(AddVertex)(THIS_ D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
     STDMETHOD(AddVertexAndNormalIndexed)(THIS_ DWORD vertex, DWORD normal) PURE;
     STDMETHOD(SetColorRGB)(THIS_ D3DVALUE, D3DVALUE, D3DVALUE) PURE;
     STDMETHOD(SetColor)(THIS_ D3DCOLOR) PURE;
     STDMETHOD(SetTexture)(THIS_ LPDIRECT3DRMTEXTURE) PURE;
     STDMETHOD(SetTextureCoordinates)(THIS_ DWORD vertex, D3DVALUE u, D3DVALUE v) PURE;
     STDMETHOD(SetMaterial)(THIS_ LPDIRECT3DRMMATERIAL) PURE;
     STDMETHOD(SetTextureTopology)(THIS_ BOOL wrap_u, BOOL wrap_v) PURE;

     STDMETHOD(GetVertex)(THIS_ DWORD index, D3DVECTOR *vertex, D3DVECTOR *normal) PURE;
     STDMETHOD(GetVertices)(THIS_ DWORD *vertex_count, D3DVECTOR *coords, D3DVECTOR *normals);
     STDMETHOD(GetTextureCoordinates)(THIS_ DWORD vertex, D3DVALUE *u, D3DVALUE *v) PURE;
     STDMETHOD(GetTextureTopology)(THIS_ BOOL *wrap_u, BOOL *wrap_v) PURE;
     STDMETHOD(GetNormal)(THIS_ D3DVECTOR *) PURE;
     STDMETHOD(GetTexture)(THIS_ LPDIRECT3DRMTEXTURE *) PURE;
     STDMETHOD(GetMaterial)(THIS_ LPDIRECT3DRMMATERIAL *) PURE;

     STDMETHOD_(int, GetVertexCount)(THIS) PURE;
     STDMETHOD_(int, GetVertexIndex)(THIS_ DWORD which) PURE;
     STDMETHOD_(int, GetTextureCoordinateIndex)(THIS_ DWORD which) PURE;
     STDMETHOD_(D3DCOLOR, GetColor)(THIS) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMFace2

DECLARE_INTERFACE_(IDirect3DRMFace2, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMFace methods
     */
     STDMETHOD(AddVertex)(THIS_ D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
     STDMETHOD(AddVertexAndNormalIndexed)(THIS_ DWORD vertex, DWORD normal) PURE;
     STDMETHOD(SetColorRGB)(THIS_ D3DVALUE, D3DVALUE, D3DVALUE) PURE;
     STDMETHOD(SetColor)(THIS_ D3DCOLOR) PURE;
     STDMETHOD(SetTexture)(THIS_ LPDIRECT3DRMTEXTURE3) PURE;
     STDMETHOD(SetTextureCoordinates)(THIS_ DWORD vertex, D3DVALUE u, D3DVALUE v) PURE;
     STDMETHOD(SetMaterial)(THIS_ LPDIRECT3DRMMATERIAL2) PURE;
     STDMETHOD(SetTextureTopology)(THIS_ BOOL wrap_u, BOOL wrap_v) PURE;

     STDMETHOD(GetVertex)(THIS_ DWORD index, D3DVECTOR *vertex, D3DVECTOR *normal) PURE;
     STDMETHOD(GetVertices)(THIS_ DWORD *vertex_count, D3DVECTOR *coords, D3DVECTOR *normals);
     STDMETHOD(GetTextureCoordinates)(THIS_ DWORD vertex, D3DVALUE *u, D3DVALUE *v) PURE;
     STDMETHOD(GetTextureTopology)(THIS_ BOOL *wrap_u, BOOL *wrap_v) PURE;
     STDMETHOD(GetNormal)(THIS_ D3DVECTOR *) PURE;
     STDMETHOD(GetTexture)(THIS_ LPDIRECT3DRMTEXTURE3 *) PURE;
     STDMETHOD(GetMaterial)(THIS_ LPDIRECT3DRMMATERIAL2 *) PURE;

     STDMETHOD_(int, GetVertexCount)(THIS) PURE;
     STDMETHOD_(int, GetVertexIndex)(THIS_ DWORD which) PURE;
     STDMETHOD_(int, GetTextureCoordinateIndex)(THIS_ DWORD which) PURE;
     STDMETHOD_(D3DCOLOR, GetColor)(THIS) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMMeshBuilder

DECLARE_INTERFACE_(IDirect3DRMMeshBuilder, IDirect3DRMVisual)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMMeshBuilder methods
     */
    STDMETHOD(Load)(THIS_ LPVOID filename, LPVOID name, D3DRMLOADOPTIONS loadflags, D3DRMLOADTEXTURECALLBACK, LPVOID lpArg) PURE;
    STDMETHOD(Save)(THIS_ const char *filename, D3DRMXOFFORMAT, D3DRMSAVEOPTIONS save) PURE;
    STDMETHOD(Scale)(THIS_ D3DVALUE sx, D3DVALUE sy, D3DVALUE sz) PURE;
    STDMETHOD(Translate)(THIS_ D3DVALUE tx, D3DVALUE ty, D3DVALUE tz) PURE;
    STDMETHOD(SetColorSource)(THIS_ D3DRMCOLORSOURCE) PURE;
    STDMETHOD(GetBox)(THIS_ D3DRMBOX *) PURE;
    STDMETHOD(GenerateNormals)(THIS) PURE;
    STDMETHOD_(D3DRMCOLORSOURCE, GetColorSource)(THIS) PURE;

    STDMETHOD(AddMesh)(THIS_ LPDIRECT3DRMMESH) PURE;
    STDMETHOD(AddMeshBuilder)(THIS_ LPDIRECT3DRMMESHBUILDER) PURE;
    STDMETHOD(AddFrame)(THIS_ LPDIRECT3DRMFRAME) PURE;
    STDMETHOD(AddFace)(THIS_ LPDIRECT3DRMFACE) PURE;
    STDMETHOD(AddFaces)
    (	THIS_ DWORD vcount, D3DVECTOR *vertices, DWORD ncount, D3DVECTOR *normals,
	DWORD *data, LPDIRECT3DRMFACEARRAY*
    ) PURE;
    STDMETHOD(ReserveSpace)(THIS_ DWORD vertex_Count, DWORD normal_count, DWORD face_count) PURE;
    STDMETHOD(SetColorRGB)(THIS_ D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;
    STDMETHOD(SetColor)(THIS_ D3DCOLOR) PURE;
    STDMETHOD(SetTexture)(THIS_ LPDIRECT3DRMTEXTURE) PURE;
    STDMETHOD(SetMaterial)(THIS_ LPDIRECT3DRMMATERIAL) PURE;
    STDMETHOD(SetTextureTopology)(THIS_ BOOL wrap_u, BOOL wrap_v) PURE;
    STDMETHOD(SetQuality)(THIS_ D3DRMRENDERQUALITY) PURE;
    STDMETHOD(SetPerspective)(THIS_ BOOL) PURE;
    STDMETHOD(SetVertex)(THIS_ DWORD index, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(SetNormal)(THIS_ DWORD index, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(SetTextureCoordinates)(THIS_ DWORD index, D3DVALUE u, D3DVALUE v) PURE;
    STDMETHOD(SetVertexColor)(THIS_ DWORD index, D3DCOLOR) PURE;
    STDMETHOD(SetVertexColorRGB)(THIS_ DWORD index, D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;

    STDMETHOD(GetFaces)(THIS_ LPDIRECT3DRMFACEARRAY*) PURE;
    STDMETHOD(GetVertices)
    (	THIS_ DWORD *vcount, D3DVECTOR *vertices, DWORD *ncount, D3DVECTOR *normals, DWORD *face_data_size, DWORD *face_data
    ) PURE;
    STDMETHOD(GetTextureCoordinates)(THIS_ DWORD index, D3DVALUE *u, D3DVALUE *v) PURE;

    STDMETHOD_(int, AddVertex)(THIS_ D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD_(int, AddNormal)(THIS_ D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(CreateFace)(THIS_ LPDIRECT3DRMFACE*) PURE;
    STDMETHOD_(D3DRMRENDERQUALITY, GetQuality)(THIS) PURE;
    STDMETHOD_(BOOL, GetPerspective)(THIS) PURE;
    STDMETHOD_(int, GetFaceCount)(THIS) PURE;
    STDMETHOD_(int, GetVertexCount)(THIS) PURE;
    STDMETHOD_(D3DCOLOR, GetVertexColor)(THIS_ DWORD index) PURE;

    STDMETHOD(CreateMesh)(THIS_ LPDIRECT3DRMMESH*) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMMeshBuilder2

DECLARE_INTERFACE_(IDirect3DRMMeshBuilder2, IDirect3DRMMeshBuilder)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMMeshBuilder methods
     */
    STDMETHOD(Load)(THIS_ LPVOID filename, LPVOID name, D3DRMLOADOPTIONS loadflags, D3DRMLOADTEXTURECALLBACK, LPVOID lpArg) PURE;
    STDMETHOD(Save)(THIS_ const char *filename, D3DRMXOFFORMAT, D3DRMSAVEOPTIONS save) PURE;
    STDMETHOD(Scale)(THIS_ D3DVALUE sx, D3DVALUE sy, D3DVALUE sz) PURE;
    STDMETHOD(Translate)(THIS_ D3DVALUE tx, D3DVALUE ty, D3DVALUE tz) PURE;
    STDMETHOD(SetColorSource)(THIS_ D3DRMCOLORSOURCE) PURE;
    STDMETHOD(GetBox)(THIS_ D3DRMBOX *) PURE;
    STDMETHOD(GenerateNormals)(THIS) PURE;
    STDMETHOD_(D3DRMCOLORSOURCE, GetColorSource)(THIS) PURE;

    STDMETHOD(AddMesh)(THIS_ LPDIRECT3DRMMESH) PURE;
    STDMETHOD(AddMeshBuilder)(THIS_ LPDIRECT3DRMMESHBUILDER) PURE;
    STDMETHOD(AddFrame)(THIS_ LPDIRECT3DRMFRAME) PURE;
    STDMETHOD(AddFace)(THIS_ LPDIRECT3DRMFACE) PURE;
    STDMETHOD(AddFaces)
    (	THIS_ DWORD vcount, D3DVECTOR *vertices, DWORD ncount, D3DVECTOR *normals,
	DWORD *data, LPDIRECT3DRMFACEARRAY*
    ) PURE;
    STDMETHOD(ReserveSpace)(THIS_ DWORD vertex_Count, DWORD normal_count, DWORD face_count) PURE;
    STDMETHOD(SetColorRGB)(THIS_ D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;
    STDMETHOD(SetColor)(THIS_ D3DCOLOR) PURE;
    STDMETHOD(SetTexture)(THIS_ LPDIRECT3DRMTEXTURE) PURE;
    STDMETHOD(SetMaterial)(THIS_ LPDIRECT3DRMMATERIAL) PURE;
    STDMETHOD(SetTextureTopology)(THIS_ BOOL wrap_u, BOOL wrap_v) PURE;
    STDMETHOD(SetQuality)(THIS_ D3DRMRENDERQUALITY) PURE;
    STDMETHOD(SetPerspective)(THIS_ BOOL) PURE;
    STDMETHOD(SetVertex)(THIS_ DWORD index, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(SetNormal)(THIS_ DWORD index, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(SetTextureCoordinates)(THIS_ DWORD index, D3DVALUE u, D3DVALUE v) PURE;
    STDMETHOD(SetVertexColor)(THIS_ DWORD index, D3DCOLOR) PURE;
    STDMETHOD(SetVertexColorRGB)(THIS_ DWORD index, D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;

    STDMETHOD(GetFaces)(THIS_ LPDIRECT3DRMFACEARRAY*) PURE;
    STDMETHOD(GetVertices)
    (	THIS_ DWORD *vcount, D3DVECTOR *vertices, DWORD *ncount, D3DVECTOR *normals, DWORD *face_data_size, DWORD *face_data
    ) PURE;
    STDMETHOD(GetTextureCoordinates)(THIS_ DWORD index, D3DVALUE *u, D3DVALUE *v) PURE;

    STDMETHOD_(int, AddVertex)(THIS_ D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD_(int, AddNormal)(THIS_ D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(CreateFace)(THIS_ LPDIRECT3DRMFACE*) PURE;
    STDMETHOD_(D3DRMRENDERQUALITY, GetQuality)(THIS) PURE;
    STDMETHOD_(BOOL, GetPerspective)(THIS) PURE;
    STDMETHOD_(int, GetFaceCount)(THIS) PURE;
    STDMETHOD_(int, GetVertexCount)(THIS) PURE;
    STDMETHOD_(D3DCOLOR, GetVertexColor)(THIS_ DWORD index) PURE;

    STDMETHOD(CreateMesh)(THIS_ LPDIRECT3DRMMESH*) PURE;

    /*
     * IDirect3DRMMeshBuilder2 methods
     */
    STDMETHOD(GenerateNormals2)(THIS_ D3DVALUE crease, DWORD dwFlags) PURE;
    STDMETHOD(GetFace)(THIS_ DWORD index, LPDIRECT3DRMFACE*) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMMeshBuilder3

DECLARE_INTERFACE_(IDirect3DRMMeshBuilder3, IDirect3DRMVisual)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMMeshBuilder3 methods
     */
    STDMETHOD(Load)(THIS_ LPVOID filename, LPVOID name, D3DRMLOADOPTIONS loadflags, D3DRMLOADTEXTURE3CALLBACK, LPVOID lpArg) PURE;
    STDMETHOD(Save)(THIS_ const char *filename, D3DRMXOFFORMAT, D3DRMSAVEOPTIONS save) PURE;
    STDMETHOD(Scale)(THIS_ D3DVALUE sx, D3DVALUE sy, D3DVALUE sz) PURE;
    STDMETHOD(Translate)(THIS_ D3DVALUE tx, D3DVALUE ty, D3DVALUE tz) PURE;
    STDMETHOD(SetColorSource)(THIS_ D3DRMCOLORSOURCE) PURE;
    STDMETHOD(GetBox)(THIS_ D3DRMBOX *) PURE;
    STDMETHOD(GenerateNormals)(THIS_ D3DVALUE crease, DWORD dwFlags) PURE;
    STDMETHOD_(D3DRMCOLORSOURCE, GetColorSource)(THIS) PURE;

    STDMETHOD(AddMesh)(THIS_ LPDIRECT3DRMMESH) PURE;
    STDMETHOD(AddMeshBuilder)(THIS_ LPDIRECT3DRMMESHBUILDER3, DWORD dwFlags) PURE;
    STDMETHOD(AddFrame)(THIS_ LPDIRECT3DRMFRAME3) PURE;
    STDMETHOD(AddFace)(THIS_ LPDIRECT3DRMFACE2) PURE;
    STDMETHOD(AddFaces)
    (	THIS_ DWORD vcount, D3DVECTOR *vertices, DWORD ncount, D3DVECTOR *normals,
	DWORD *data, LPDIRECT3DRMFACEARRAY*
    ) PURE;
    STDMETHOD(ReserveSpace)(THIS_ DWORD vertex_Count, DWORD normal_count, DWORD face_count) PURE;
    STDMETHOD(SetColorRGB)(THIS_ D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;
    STDMETHOD(SetColor)(THIS_ D3DCOLOR) PURE;
    STDMETHOD(SetTexture)(THIS_ LPDIRECT3DRMTEXTURE3) PURE;
    STDMETHOD(SetMaterial)(THIS_ LPDIRECT3DRMMATERIAL2) PURE;
    STDMETHOD(SetTextureTopology)(THIS_ BOOL wrap_u, BOOL wrap_v) PURE;
    STDMETHOD(SetQuality)(THIS_ D3DRMRENDERQUALITY) PURE;
    STDMETHOD(SetPerspective)(THIS_ BOOL) PURE;
    STDMETHOD(SetVertex)(THIS_ DWORD index, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(SetNormal)(THIS_ DWORD index, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(SetTextureCoordinates)(THIS_ DWORD index, D3DVALUE u, D3DVALUE v) PURE;
    STDMETHOD(SetVertexColor)(THIS_ DWORD index, D3DCOLOR) PURE;
    STDMETHOD(SetVertexColorRGB)(THIS_ DWORD index, D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;
    STDMETHOD(GetFaces)(THIS_ LPDIRECT3DRMFACEARRAY*) PURE;
    STDMETHOD(GetGeometry)
    (	THIS_ DWORD *vcount, D3DVECTOR *vertices, DWORD *ncount, D3DVECTOR *normals, DWORD *face_data_size, DWORD *face_data
    ) PURE;
    STDMETHOD(GetTextureCoordinates)(THIS_ DWORD index, D3DVALUE *u, D3DVALUE *v) PURE;
    STDMETHOD_(int, AddVertex)(THIS_ D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD_(int, AddNormal)(THIS_ D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(CreateFace)(THIS_ LPDIRECT3DRMFACE2 *) PURE;
    STDMETHOD_(D3DRMRENDERQUALITY, GetQuality)(THIS) PURE;
    STDMETHOD_(BOOL, GetPerspective)(THIS) PURE;
    STDMETHOD_(int, GetFaceCount)(THIS) PURE;
    STDMETHOD_(int, GetVertexCount)(THIS) PURE;
    STDMETHOD_(D3DCOLOR, GetVertexColor)(THIS_ DWORD index) PURE;
    STDMETHOD(CreateMesh)(THIS_ LPDIRECT3DRMMESH*) PURE;
    STDMETHOD(GetFace)(THIS_ DWORD index, LPDIRECT3DRMFACE2 *) PURE;
    STDMETHOD(GetVertex)(THIS_ DWORD dwIndex, LPD3DVECTOR lpVector) PURE;
    STDMETHOD(GetNormal)(THIS_ DWORD dwIndex, LPD3DVECTOR lpVector) PURE;
    STDMETHOD(DeleteVertices)(THIS_ DWORD dwIndexFirst, DWORD dwCount) PURE;
    STDMETHOD(DeleteNormals)(THIS_ DWORD dwIndexFirst, DWORD dwCount) PURE;
    STDMETHOD(DeleteFace)(THIS_ LPDIRECT3DRMFACE2) PURE;
    STDMETHOD(Empty)(THIS_ DWORD dwFlags) PURE;
    STDMETHOD(Optimize)(THIS_ DWORD dwFlags) PURE;
    STDMETHOD(AddFacesIndexed)(THIS_ DWORD dwFlags, DWORD *lpdwvIndices, DWORD *dwIndexFirst, DWORD *dwCount) PURE;
    STDMETHOD(CreateSubMesh)(THIS_ LPUNKNOWN *) PURE;
    STDMETHOD(GetParentMesh)(THIS_ DWORD, LPUNKNOWN *) PURE;
    STDMETHOD(GetSubMeshes)(THIS_ LPDWORD lpdwCount, LPUNKNOWN *) PURE;
    STDMETHOD(DeleteSubMesh)(THIS_ LPUNKNOWN) PURE;
    STDMETHOD(Enable)(THIS_ DWORD) PURE;
    STDMETHOD(GetEnable)(THIS_ DWORD *) PURE;
    STDMETHOD(AddTriangles)(THIS_ DWORD dwFlags, DWORD dwFormat,
			    DWORD dwVertexCount, LPVOID lpvData) PURE;
    STDMETHOD(SetVertices)(THIS_ DWORD dwIndexFirst, DWORD dwCount, LPD3DVECTOR) PURE;
    STDMETHOD(GetVertices)(THIS_ DWORD dwIndexFirst, LPDWORD lpdwCount, LPD3DVECTOR) PURE;
    STDMETHOD(SetNormals)(THIS_ DWORD dwIndexFirst, DWORD dwCount, LPD3DVECTOR) PURE;
    STDMETHOD(GetNormals)(THIS_ DWORD dwIndexFirst, LPDWORD lpdwCount, LPD3DVECTOR) PURE;
    STDMETHOD_(int, GetNormalCount)(THIS) PURE;
};  

#undef INTERFACE
#define INTERFACE IDirect3DRMLight

DECLARE_INTERFACE_(IDirect3DRMLight, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMLight methods
     */
    STDMETHOD(SetType)(THIS_ D3DRMLIGHTTYPE) PURE;
    STDMETHOD(SetColor)(THIS_ D3DCOLOR) PURE;
    STDMETHOD(SetColorRGB)(THIS_ D3DVALUE red, D3DVALUE green, D3DVALUE blue) PURE;
    STDMETHOD(SetRange)(THIS_ D3DVALUE) PURE;
    STDMETHOD(SetUmbra)(THIS_ D3DVALUE) PURE;
    STDMETHOD(SetPenumbra)(THIS_ D3DVALUE) PURE;
    STDMETHOD(SetConstantAttenuation)(THIS_ D3DVALUE) PURE;
    STDMETHOD(SetLinearAttenuation)(THIS_ D3DVALUE) PURE;
    STDMETHOD(SetQuadraticAttenuation)(THIS_ D3DVALUE) PURE;

    STDMETHOD_(D3DVALUE, GetRange)(THIS) PURE;
    STDMETHOD_(D3DVALUE, GetUmbra)(THIS) PURE;
    STDMETHOD_(D3DVALUE, GetPenumbra)(THIS) PURE;
    STDMETHOD_(D3DVALUE, GetConstantAttenuation)(THIS) PURE;
    STDMETHOD_(D3DVALUE, GetLinearAttenuation)(THIS) PURE;
    STDMETHOD_(D3DVALUE, GetQuadraticAttenuation)(THIS) PURE;
    STDMETHOD_(D3DCOLOR, GetColor)(THIS) PURE;
    STDMETHOD_(D3DRMLIGHTTYPE, GetType)(THIS) PURE;

    STDMETHOD(SetEnableFrame)(THIS_ LPDIRECT3DRMFRAME) PURE;
    STDMETHOD(GetEnableFrame)(THIS_ LPDIRECT3DRMFRAME*) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMTexture

DECLARE_INTERFACE_(IDirect3DRMTexture, IDirect3DRMVisual)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMTexture methods
     */
    STDMETHOD(InitFromFile)(THIS_ const char *filename) PURE;
    STDMETHOD(InitFromSurface)(THIS_ LPDIRECTDRAWSURFACE lpDDS) PURE;
    STDMETHOD(InitFromResource)(THIS_ HRSRC) PURE;
    STDMETHOD(Changed)(THIS_ BOOL pixels, BOOL palette) PURE;

    STDMETHOD(SetColors)(THIS_ DWORD) PURE;
    STDMETHOD(SetShades)(THIS_ DWORD) PURE;
    STDMETHOD(SetDecalSize)(THIS_ D3DVALUE width, D3DVALUE height) PURE;
    STDMETHOD(SetDecalOrigin)(THIS_ LONG x, LONG y) PURE;
    STDMETHOD(SetDecalScale)(THIS_ DWORD) PURE;
    STDMETHOD(SetDecalTransparency)(THIS_ BOOL) PURE;
    STDMETHOD(SetDecalTransparentColor)(THIS_ D3DCOLOR) PURE;

    STDMETHOD(GetDecalSize)(THIS_ D3DVALUE *width_return, D3DVALUE *height_return) PURE;
    STDMETHOD(GetDecalOrigin)(THIS_ LONG *x_return, LONG *y_return) PURE;

    STDMETHOD_(D3DRMIMAGE *, GetImage)(THIS) PURE;
    STDMETHOD_(DWORD, GetShades)(THIS) PURE;
    STDMETHOD_(DWORD, GetColors)(THIS) PURE;
    STDMETHOD_(DWORD, GetDecalScale)(THIS) PURE;
    STDMETHOD_(BOOL, GetDecalTransparency)(THIS) PURE;
    STDMETHOD_(D3DCOLOR, GetDecalTransparentColor)(THIS) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMTexture2

DECLARE_INTERFACE_(IDirect3DRMTexture2, IDirect3DRMTexture)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMTexture methods
     */
    STDMETHOD(InitFromFile)(THIS_ const char *filename) PURE;
    STDMETHOD(InitFromSurface)(THIS_ LPDIRECTDRAWSURFACE lpDDS) PURE;
    STDMETHOD(InitFromResource)(THIS_ HRSRC) PURE;
    STDMETHOD(Changed)(THIS_ BOOL pixels, BOOL palette) PURE;

    STDMETHOD(SetColors)(THIS_ DWORD) PURE;
    STDMETHOD(SetShades)(THIS_ DWORD) PURE;
    STDMETHOD(SetDecalSize)(THIS_ D3DVALUE width, D3DVALUE height) PURE;
    STDMETHOD(SetDecalOrigin)(THIS_ LONG x, LONG y) PURE;
    STDMETHOD(SetDecalScale)(THIS_ DWORD) PURE;
    STDMETHOD(SetDecalTransparency)(THIS_ BOOL) PURE;
    STDMETHOD(SetDecalTransparentColor)(THIS_ D3DCOLOR) PURE;

    STDMETHOD(GetDecalSize)(THIS_ D3DVALUE *width_return, D3DVALUE *height_return) PURE;
    STDMETHOD(GetDecalOrigin)(THIS_ LONG *x_return, LONG *y_return) PURE;

    STDMETHOD_(D3DRMIMAGE *, GetImage)(THIS) PURE;
    STDMETHOD_(DWORD, GetShades)(THIS) PURE;
    STDMETHOD_(DWORD, GetColors)(THIS) PURE;
    STDMETHOD_(DWORD, GetDecalScale)(THIS) PURE;
    STDMETHOD_(BOOL, GetDecalTransparency)(THIS) PURE;
    STDMETHOD_(D3DCOLOR, GetDecalTransparentColor)(THIS) PURE;

    /*
     * IDirect3DRMTexture2 methods
     */
    STDMETHOD(InitFromImage)(THIS_ LPD3DRMIMAGE) PURE;
    STDMETHOD(InitFromResource2)(THIS_ HMODULE hModule, LPCTSTR strName, LPCTSTR strType) PURE;
    STDMETHOD(GenerateMIPMap)(THIS_ DWORD) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMTexture3

DECLARE_INTERFACE_(IDirect3DRMTexture3, IDirect3DRMVisual)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMTexture3 methods
     */
    STDMETHOD(InitFromFile)(THIS_ const char *filename) PURE;
    STDMETHOD(InitFromSurface)(THIS_ LPDIRECTDRAWSURFACE lpDDS) PURE;
    STDMETHOD(InitFromResource)(THIS_ HRSRC) PURE;
    STDMETHOD(Changed)(THIS_ DWORD dwFlags, DWORD dwcRects, LPRECT pRects) PURE;
    STDMETHOD(SetColors)(THIS_ DWORD) PURE;
    STDMETHOD(SetShades)(THIS_ DWORD) PURE;
    STDMETHOD(SetDecalSize)(THIS_ D3DVALUE width, D3DVALUE height) PURE;
    STDMETHOD(SetDecalOrigin)(THIS_ LONG x, LONG y) PURE;
    STDMETHOD(SetDecalScale)(THIS_ DWORD) PURE;
    STDMETHOD(SetDecalTransparency)(THIS_ BOOL) PURE;
    STDMETHOD(SetDecalTransparentColor)(THIS_ D3DCOLOR) PURE;

    STDMETHOD(GetDecalSize)(THIS_ D3DVALUE *width_return, D3DVALUE *height_return) PURE;
    STDMETHOD(GetDecalOrigin)(THIS_ LONG *x_return, LONG *y_return) PURE;

    STDMETHOD_(D3DRMIMAGE *, GetImage)(THIS) PURE;
    STDMETHOD_(DWORD, GetShades)(THIS) PURE;
    STDMETHOD_(DWORD, GetColors)(THIS) PURE;
    STDMETHOD_(DWORD, GetDecalScale)(THIS) PURE;
    STDMETHOD_(BOOL, GetDecalTransparency)(THIS) PURE;
    STDMETHOD_(D3DCOLOR, GetDecalTransparentColor)(THIS) PURE;
    STDMETHOD(InitFromImage)(THIS_ LPD3DRMIMAGE) PURE;
    STDMETHOD(InitFromResource2)(THIS_ HMODULE hModule, LPCTSTR strName, LPCTSTR strType) PURE;
    STDMETHOD(GenerateMIPMap)(THIS_ DWORD) PURE;
    STDMETHOD(GetSurface)(THIS_ DWORD dwFlags, LPDIRECTDRAWSURFACE* lplpDDS) PURE;
    STDMETHOD(SetCacheOptions)(THIS_ LONG lImportance, DWORD dwFlags) PURE;
    STDMETHOD(GetCacheOptions)(THIS_ LPLONG lplImportance, LPDWORD lpdwFlags) PURE;
    STDMETHOD(SetDownsampleCallback)(THIS_ D3DRMDOWNSAMPLECALLBACK pCallback, LPVOID pArg) PURE;
    STDMETHOD(SetValidationCallback)(THIS_ D3DRMVALIDATIONCALLBACK pCallback, LPVOID pArg) PURE;
};


#undef INTERFACE
#define INTERFACE IDirect3DRMWrap

DECLARE_INTERFACE_(IDirect3DRMWrap, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMWrap methods
     */
    STDMETHOD(Init)
    (	THIS_ D3DRMWRAPTYPE, LPDIRECT3DRMFRAME ref,
	D3DVALUE ox, D3DVALUE oy, D3DVALUE oz,
	D3DVALUE dx, D3DVALUE dy, D3DVALUE dz,
	D3DVALUE ux, D3DVALUE uy, D3DVALUE uz,
	D3DVALUE ou, D3DVALUE ov,
	D3DVALUE su, D3DVALUE sv
    ) PURE;
    STDMETHOD(Apply)(THIS_ LPDIRECT3DRMOBJECT) PURE;
    STDMETHOD(ApplyRelative)(THIS_ LPDIRECT3DRMFRAME frame, LPDIRECT3DRMOBJECT) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMMaterial

DECLARE_INTERFACE_(IDirect3DRMMaterial, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMMaterial methods
     */
    STDMETHOD(SetPower)(THIS_ D3DVALUE power) PURE;
    STDMETHOD(SetSpecular)(THIS_ D3DVALUE r, D3DVALUE g, D3DVALUE b) PURE;
    STDMETHOD(SetEmissive)(THIS_ D3DVALUE r, D3DVALUE g, D3DVALUE b) PURE;

    STDMETHOD_(D3DVALUE, GetPower)(THIS) PURE;
    STDMETHOD(GetSpecular)(THIS_ D3DVALUE* r, D3DVALUE* g, D3DVALUE* b) PURE;
    STDMETHOD(GetEmissive)(THIS_ D3DVALUE* r, D3DVALUE* g, D3DVALUE* b) PURE;
};


#undef INTERFACE
#define INTERFACE IDirect3DRMMaterial2

DECLARE_INTERFACE_(IDirect3DRMMaterial2, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMMaterial2 methods
     */
    STDMETHOD(SetPower)(THIS_ D3DVALUE power) PURE;
    STDMETHOD(SetSpecular)(THIS_ D3DVALUE r, D3DVALUE g, D3DVALUE b) PURE;
    STDMETHOD(SetEmissive)(THIS_ D3DVALUE r, D3DVALUE g, D3DVALUE b) PURE;
    STDMETHOD_(D3DVALUE, GetPower)(THIS) PURE;
    STDMETHOD(GetSpecular)(THIS_ D3DVALUE* r, D3DVALUE* g, D3DVALUE* b) PURE;
    STDMETHOD(GetEmissive)(THIS_ D3DVALUE* r, D3DVALUE* g, D3DVALUE* b) PURE;
    STDMETHOD(GetAmbient)(THIS_ D3DVALUE* r, D3DVALUE* g, D3DVALUE* b) PURE;
    STDMETHOD(SetAmbient)(THIS_ D3DVALUE r, D3DVALUE g, D3DVALUE b) PURE;
};


#undef INTERFACE
#define INTERFACE IDirect3DRMAnimation

DECLARE_INTERFACE_(IDirect3DRMAnimation, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMAnimation methods
     */
    STDMETHOD(SetOptions)(THIS_ D3DRMANIMATIONOPTIONS flags) PURE;
    STDMETHOD(AddRotateKey)(THIS_ D3DVALUE time, D3DRMQUATERNION *q) PURE;
    STDMETHOD(AddPositionKey)(THIS_ D3DVALUE time, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(AddScaleKey)(THIS_ D3DVALUE time, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(DeleteKey)(THIS_ D3DVALUE time) PURE;
    STDMETHOD(SetFrame)(THIS_ LPDIRECT3DRMFRAME frame) PURE;
    STDMETHOD(SetTime)(THIS_ D3DVALUE time) PURE;

    STDMETHOD_(D3DRMANIMATIONOPTIONS, GetOptions)(THIS) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMAnimation2

DECLARE_INTERFACE_(IDirect3DRMAnimation2, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMAnimation2 methods
     */
    STDMETHOD(SetOptions)(THIS_ D3DRMANIMATIONOPTIONS flags) PURE;
    STDMETHOD(AddRotateKey)(THIS_ D3DVALUE time, D3DRMQUATERNION *q) PURE;
    STDMETHOD(AddPositionKey)(THIS_ D3DVALUE time, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(AddScaleKey)(THIS_ D3DVALUE time, D3DVALUE x, D3DVALUE y, D3DVALUE z) PURE;
    STDMETHOD(DeleteKey)(THIS_ D3DVALUE time) PURE;
    STDMETHOD(SetFrame)(THIS_ LPDIRECT3DRMFRAME3 frame) PURE;
    STDMETHOD(SetTime)(THIS_ D3DVALUE time) PURE;

    STDMETHOD_(D3DRMANIMATIONOPTIONS, GetOptions)(THIS) PURE;
    STDMETHOD(GetFrame)(THIS_ LPDIRECT3DRMFRAME3 *lpD3DFrame) PURE;
    STDMETHOD(DeleteKeyByID)(THIS_ DWORD dwID) PURE;
    STDMETHOD(AddKey)(THIS_ LPD3DRMANIMATIONKEY lpKey) PURE;
    STDMETHOD(ModifyKey)(THIS_ LPD3DRMANIMATIONKEY lpKey) PURE;
    STDMETHOD(GetKeys)(THIS_ D3DVALUE dvTimeMin,
		       D3DVALUE dvTimeMax, LPDWORD lpdwNumKeys,
		       LPD3DRMANIMATIONKEY lpKey);
};

#undef INTERFACE
#define INTERFACE IDirect3DRMAnimationSet

DECLARE_INTERFACE_(IDirect3DRMAnimationSet, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMAnimationSet methods
     */
    STDMETHOD(AddAnimation)(THIS_ LPDIRECT3DRMANIMATION aid) PURE;
    STDMETHOD(Load)(THIS_ LPVOID filename, LPVOID name, D3DRMLOADOPTIONS loadflags, D3DRMLOADTEXTURECALLBACK, LPVOID lpArg, LPDIRECT3DRMFRAME parent)PURE;
    STDMETHOD(DeleteAnimation)(THIS_ LPDIRECT3DRMANIMATION aid) PURE;
    STDMETHOD(SetTime)(THIS_ D3DVALUE time) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMAnimationSet2

DECLARE_INTERFACE_(IDirect3DRMAnimationSet2, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMAnimationSet2 methods
     */
    STDMETHOD(AddAnimation)(THIS_ LPDIRECT3DRMANIMATION2 aid) PURE;
    STDMETHOD(Load)(THIS_ LPVOID filename, LPVOID name, D3DRMLOADOPTIONS loadflags, D3DRMLOADTEXTURE3CALLBACK, LPVOID lpArg, LPDIRECT3DRMFRAME3 parent)PURE;
    STDMETHOD(DeleteAnimation)(THIS_ LPDIRECT3DRMANIMATION2 aid) PURE;
    STDMETHOD(SetTime)(THIS_ D3DVALUE time) PURE;
    STDMETHOD(GetAnimations)(THIS_ LPDIRECT3DRMANIMATIONARRAY *) PURE;
};


#undef INTERFACE
#define INTERFACE IDirect3DRMUserVisual

DECLARE_INTERFACE_(IDirect3DRMUserVisual, IDirect3DRMVisual)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMUserVisual methods
     */
    STDMETHOD(Init)(THIS_ D3DRMUSERVISUALCALLBACK fn, void *arg) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMArray

DECLARE_INTERFACE_(IDirect3DRMArray, IUnknown)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD_(DWORD, GetSize)(THIS) PURE;
    /* No GetElement method as it would get overloaded
     * in derived classes, and overloading is
     * a no-no in COM
     */
};

#undef INTERFACE
#define INTERFACE IDirect3DRMObjectArray

DECLARE_INTERFACE_(IDirect3DRMObjectArray, IDirect3DRMArray)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD_(DWORD, GetSize)(THIS) PURE;
    STDMETHOD(GetElement)(THIS_ DWORD index, LPDIRECT3DRMOBJECT *) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMDeviceArray

DECLARE_INTERFACE_(IDirect3DRMDeviceArray, IDirect3DRMArray)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD_(DWORD, GetSize)(THIS) PURE;
    STDMETHOD(GetElement)(THIS_ DWORD index, LPDIRECT3DRMDEVICE *) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMFrameArray

DECLARE_INTERFACE_(IDirect3DRMFrameArray, IDirect3DRMArray)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD_(DWORD, GetSize)(THIS) PURE;
    STDMETHOD(GetElement)(THIS_ DWORD index, LPDIRECT3DRMFRAME *) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMViewportArray

DECLARE_INTERFACE_(IDirect3DRMViewportArray, IDirect3DRMArray)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD_(DWORD, GetSize)(THIS) PURE;
    STDMETHOD(GetElement)(THIS_ DWORD index, LPDIRECT3DRMVIEWPORT *) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMVisualArray

DECLARE_INTERFACE_(IDirect3DRMVisualArray, IDirect3DRMArray)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD_(DWORD, GetSize)(THIS) PURE;
    STDMETHOD(GetElement)(THIS_ DWORD index, LPDIRECT3DRMVISUAL *) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMAnimationArray

DECLARE_INTERFACE_(IDirect3DRMAnimationArray, IDirect3DRMArray)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD_(DWORD, GetSize)(THIS) PURE;
    STDMETHOD(GetElement)(THIS_ DWORD index, LPDIRECT3DRMANIMATION2 *) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMPickedArray

DECLARE_INTERFACE_(IDirect3DRMPickedArray, IDirect3DRMArray)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD_(DWORD, GetSize)(THIS) PURE;
    STDMETHOD(GetPick)(THIS_ DWORD index, LPDIRECT3DRMVISUAL *, LPDIRECT3DRMFRAMEARRAY *, LPD3DRMPICKDESC) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMLightArray

DECLARE_INTERFACE_(IDirect3DRMLightArray, IDirect3DRMArray)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD_(DWORD, GetSize)(THIS) PURE;
    STDMETHOD(GetElement)(THIS_ DWORD index, LPDIRECT3DRMLIGHT *) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMFaceArray

DECLARE_INTERFACE_(IDirect3DRMFaceArray, IDirect3DRMArray)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD_(DWORD, GetSize)(THIS) PURE;
    STDMETHOD(GetElement)(THIS_ DWORD index, LPDIRECT3DRMFACE *) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMPicked2Array

DECLARE_INTERFACE_(IDirect3DRMPicked2Array, IDirect3DRMArray)
{
    IUNKNOWN_METHODS(PURE);

    STDMETHOD_(DWORD, GetSize)(THIS) PURE;
    STDMETHOD(GetPick)(THIS_ DWORD index, LPDIRECT3DRMVISUAL *, LPDIRECT3DRMFRAMEARRAY *, LPD3DRMPICKDESC2) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMInterpolator

DECLARE_INTERFACE_(IDirect3DRMInterpolator, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMInterpolator methods
     */
    STDMETHOD(AttachObject)(THIS_ LPDIRECT3DRMOBJECT) PURE;
    STDMETHOD(GetAttachedObjects)(THIS_ LPDIRECT3DRMOBJECTARRAY *) PURE;
    STDMETHOD(DetachObject)(THIS_ LPDIRECT3DRMOBJECT) PURE;
    STDMETHOD(SetIndex)(THIS_ D3DVALUE) PURE;
    STDMETHOD_(D3DVALUE, GetIndex)(THIS) PURE;
    STDMETHOD(Interpolate)(THIS_ D3DVALUE, LPDIRECT3DRMOBJECT, D3DRMINTERPOLATIONOPTIONS) PURE;
};

#undef INTERFACE
#define INTERFACE IDirect3DRMClippedVisual

DECLARE_INTERFACE_(IDirect3DRMClippedVisual, IDirect3DRMVisual)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMClippedVisual methods
     */
    STDMETHOD(Init) (THIS_ LPDIRECT3DRMVISUAL) PURE;
    STDMETHOD(AddPlane) (THIS_ LPDIRECT3DRMFRAME3, LPD3DVECTOR, LPD3DVECTOR, DWORD, LPDWORD) PURE;
    STDMETHOD(DeletePlane)(THIS_ DWORD, DWORD) PURE;
    STDMETHOD(GetPlaneIDs)(THIS_ LPDWORD, LPDWORD, DWORD) PURE;
    STDMETHOD(GetPlane) (THIS_ DWORD, LPDIRECT3DRMFRAME3, LPD3DVECTOR, LPD3DVECTOR, DWORD) PURE;
    STDMETHOD(SetPlane) (THIS_ DWORD, LPDIRECT3DRMFRAME3, LPD3DVECTOR, LPD3DVECTOR, DWORD) PURE;
};

#ifdef __cplusplus
};
#endif
#endif /* _D3DRMOBJ_H_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3drmwin.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1995-1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:	d3drm.h
 *  Content:	Direct3DRM include file
 *
 ***************************************************************************/

#ifndef __D3DRMWIN_H__
#define __D3DRMWIN_H__

#ifndef WIN32
#define WIN32
#endif

#include "d3drm.h"

#include "ddraw.h"
#include "d3d.h"

/*
 * GUIDS used by Direct3DRM Windows interface
 */
DEFINE_GUID(IID_IDirect3DRMWinDevice,	0xc5016cc0, 0xd273, 0x11ce, 0xac, 0x48, 0x0, 0x0, 0xc0, 0x38, 0x25, 0xa1);

WIN_TYPES(IDirect3DRMWinDevice, DIRECT3DRMWINDEVICE);

#undef INTERFACE
#define INTERFACE IDirect3DRMWinDevice

DECLARE_INTERFACE_(IDirect3DRMWinDevice, IDirect3DRMObject)
{
    IUNKNOWN_METHODS(PURE);
    IDIRECT3DRMOBJECT_METHODS(PURE);

    /*
     * IDirect3DRMWinDevice methods
     */

    /* Repaint the window with the last frame which was rendered. */
    STDMETHOD(HandlePaint)(THIS_ HDC hdc) PURE;

    /* Respond to a WM_ACTIVATE message. */
    STDMETHOD(HandleActivate)(THIS_ WORD wparam) PURE;
};


#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3dxcore.h ===
///////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 1999 Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dxcore.h
//  Content:    D3DX core types and functions
//
///////////////////////////////////////////////////////////////////////////

#ifndef __D3DXCORE_H__
#define __D3DXCORE_H__

#include <d3d.h>
#include <limits.h>
#include "d3dxerr.h"


typedef struct ID3DXContext *LPD3DXCONTEXT;

// {9B74ED7A-BBEF-11d2-9F8E-0000F8080835}
DEFINE_GUID(IID_ID3DXContext, 
     0x9b74ed7a, 0xbbef, 0x11d2, 0x9f, 0x8e, 0x0, 0x0, 0xf8, 0x8, 0x8, 0x35);


///////////////////////////////////////////////////////////////////////////
// Defines and Enumerators used below:
///////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
// D3DX_DEFAULT:
// ---------
// A predefined value that could be used for any parameter in D3DX APIs or 
// member functions that is an enumerant or a handle.  The D3DX 
// documentation indicates wherever D3DX_DEFAULT may be used, 
// and how it will be interpreted in each situation.
//-------------------------------------------------------------------------
#define D3DX_DEFAULT ULONG_MAX
                            
//-------------------------------------------------------------------------
// D3DX_DEFAULT_FLOAT:
// ------------------
// Similar to D3DX_DEFAULT, but used for floating point parameters.
// The D3DX documentation indicates wherever D3DX_DEFAULT_FLOAT may be used, 
// and how it will be interpreted in each situation.
//-------------------------------------------------------------------------
#define D3DX_DEFAULT_FLOAT FLT_MAX
                            
//-------------------------------------------------------------------------
// Hardware Acceleration Level:
// ---------------------------
// These constants represent pre-defined hardware acceleration levels,
// and may be used as a default anywhere a (DWORD) deviceIndex is required.
// Each pre-define indicates a different level of hardware acceleration.
// They are an alternative to using explicit deviceIndices retrieved by
// D3DXGetDeviceDescription().
//
// The only case these pre-defines should be used as device indices is if
// a particular level of acceleration is required, and given more than 
// one capable device on the computer, it does not matter which one
// is used.
//
// The method of selection is as follows: If one of the D3DX devices on 
// the primary DDraw device supports a requested hardware acceleration 
// level, it will be used. Otherwise, the first matching device discovered 
// by D3DX will be used.  
//
// Of course, it is possible for no match to exist for any of the
// pre-defines on a particular computer.  Passing such a value into the
// D3DX apis will simply cause them to fail, reporting that no match
// is available.
// 
// D3DX_HWLEVEL_NULL:      Null implementation (draws nothing)
// D3DX_HWLEVEL_REFERENCE: Reference implementation (slowest)
// D3DX_HWLEVEL_2D:        2D acceleration only (RGB rasterizer used)
// D3DX_HWLEVEL_RASTER:    Rasterization acceleration (likely most useful)
// D3DX_HWLEVEL_TL:        Transform and lighting acceleration 
// D3DX_DEFAULT:           The highest level of acceleration available
//                         on the primary DDraw device.
//-------------------------------------------------------------------------
#define D3DX_HWLEVEL_NULL       (D3DX_DEFAULT - 1)
#define D3DX_HWLEVEL_REFERENCE  (D3DX_DEFAULT - 2)
#define D3DX_HWLEVEL_2D         (D3DX_DEFAULT - 3) 
#define D3DX_HWLEVEL_RASTER     (D3DX_DEFAULT - 4) 
#define D3DX_HWLEVEL_TL         (D3DX_DEFAULT - 5) 

//-------------------------------------------------------------------------
// Surface Class:
// -------------
// These are the various types of 2D-surfaces classified according to their
// usage. Note that a number of them overlap. e.g. STENCILBUFFERS and 
// DEPTHBUFFERS overlap (since in DX7 implementation the stencil and depth
// bits are part of the same pixel format).
//
// Mapping to the DX7 DDPIXELFORMAT concepts:
// -----------------------------------------
// D3DX_SC_DEPTHBUFFER:    All ddpfs which have the DDPF_ZPIXELS or the
//                           DDPF_ZBUFFER flags set.
// D3DX_SC_STENCILBUFFER:  All ddpfs which have the DDPF_STENCILBUFFER 
//                          flag set.
// D3DX_SC_BUMPMAP:        All ddpfs which have the DDPF_BUMPLUMINANCE 
//                           or the DDPF_BUMPDUDV flags set.
// D3DX_SC_LUMINANCEMAP:   All ddpfs which have the DDPF_BUMPLUMINANCE
//                           or the DDPF_LUMINANCE flags set.
// D3DX_SC_COLORTEXTURE:   All the surfaces that have color information in
//                           them and can be used for texturing.
// D3DX_SC_COLORRENDERTGT: All the surfaces that contain color 
//                           information and can be used as render targets.
//-------------------------------------------------------------------------
#define D3DX_SC_DEPTHBUFFER     0x01
#define D3DX_SC_STENCILBUFFER   0x02
#define D3DX_SC_COLORTEXTURE    0x04
#define D3DX_SC_BUMPMAP         0x08
#define D3DX_SC_LUMINANCEMAP    0x10
#define D3DX_SC_COLORRENDERTGT  0x20

//-------------------------------------------------------------------------
// Surface Formats:
// ---------------
// These are the various types of surface formats that can be enumerated, 
// there is no DDPIXELFORMAT structure in D3DX, the enums carry the meaning 
// (like FOURCCs).
//
// All the surface classes are represented here.  
//
//-------------------------------------------------------------------------
typedef enum _D3DX_SURFACEFORMAT
{
    D3DX_SF_UNKNOWN    = 0,
    D3DX_SF_R8G8B8     = 1,
    D3DX_SF_A8R8G8B8   = 2,
    D3DX_SF_X8R8G8B8   = 3,
    D3DX_SF_R5G6B5     = 4,
    D3DX_SF_R5G5B5     = 5,
    D3DX_SF_PALETTE4   = 6,
    D3DX_SF_PALETTE8   = 7,
    D3DX_SF_A1R5G5B5   = 8,
    D3DX_SF_X4R4G4B4   = 9,
    D3DX_SF_A4R4G4B4   =10,
    D3DX_SF_L8         =11,      // 8 bit luminance-only
    D3DX_SF_A8L8       =12,      // 16 bit alpha-luminance
    D3DX_SF_U8V8       =13,      // 16 bit bump map format
    D3DX_SF_U5V5L6     =14,      // 16 bit bump map format with luminance
    D3DX_SF_U8V8L8     =15,      // 24 bit bump map format with luminance
    D3DX_SF_UYVY       =16,      // UYVY format (PC98 compliance)
    D3DX_SF_YUY2       =17,      // YUY2 format (PC98 compliance)
    D3DX_SF_DXT1       =18,      // S3 texture compression technique 1
    D3DX_SF_DXT3       =19,      // S3 texture compression technique 3
    D3DX_SF_DXT5       =20,      // S3 texture compression technique 5
    D3DX_SF_R3G3B2     =21,      // 8 bit RGB texture format
    D3DX_SF_A8         =22,      // 8 bit alpha-only
    D3DX_SF_TEXTUREMAX =23,      // Last texture format

    D3DX_SF_Z16S0      =256,
    D3DX_SF_Z32S0      =257,
    D3DX_SF_Z15S1      =258,
    D3DX_SF_Z24S8      =259,
    D3DX_SF_S1Z15      =260,
    D3DX_SF_S8Z24      =261,
    D3DX_SF_DEPTHMAX   =262,     // Last depth format

    D3DX_SF_FORCEMAX  = (DWORD)(-1)
} D3DX_SURFACEFORMAT;

//-------------------------------------------------------------------------
// Filtering types for Texture APIs 
//
// -------------
// These are the various filter types for generation of mip-maps 
//
// D3DX_FILTERTYPE
// -----------------------------------------
// D3DX_FT_POINT:   Point sampling only - no filtering
// D3DX_FT_LINEAR:  Bi-linear filtering
//
//-------------------------------------------------------------------------
typedef enum _D3DX_FILTERTYPE
{
    D3DX_FT_POINT    = 0x01,
    D3DX_FT_LINEAR   = 0x02,
    D3DX_FT_DEFAULT  = D3DX_DEFAULT
} D3DX_FILTERTYPE;

///////////////////////////////////////////////////////////////////////////
// Structures used below:
///////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
// D3DX_VIDMODEDESC: Display mode description.
// ----------------
// width:       Screen Width 
// height:      Screen Height
// bpp:         Bits per pixel
// refreshRate: Refresh rate
//-------------------------------------------------------------------------
typedef struct  _D3DX_VIDMODEDESC
{
    DWORD width;
    DWORD height;
    DWORD bpp;
    DWORD refreshRate;
} D3DX_VIDMODEDESC;

//-------------------------------------------------------------------------
// D3DX_DEVICEDESC: Description of a device that can do 3D
// ---------------
// deviceIndex:   Unique (DWORD) number for the device.
// hwLevel:       Level of acceleration afforded.  This is one of the
//                predefined Device Indices, and exists in this
//                structure for informational purposes only.  More than
//                one device on the system may have the same hwLevel.
//                To refer to a particular device with the D3DX apis,
//                use the value in the deviceIndex member instead.
// ddGuid:        The ddraw GUID
// d3dDeviceGuid: Direct3D Device GUID
// ddDeviceID:    DDraw's GetDeviceIdentifier GUID.  This GUID is unique to
//                a particular driver revision on a particular video card.
// driverDesc:    String describing the driver
// monitor:       Handle to the video monitor used by this device (multimon
//                specific).  Devices that use different monitors on a 
//                multimon system report different values in this field.
//                Therefore, to test for a multimon system, an application 
//                should look for more than one different monitor handle in 
//                the list of D3DX devices.
// onPrimary:     Indicates if this device is on the primary monitor
//                (multimon specific).
//-------------------------------------------------------------------------
#define D3DX_DRIVERDESC_LENGTH    256

typedef struct _D3DX_DEVICEDESC
{
    DWORD       deviceIndex;  
    DWORD       hwLevel;
    GUID        ddGuid;       
    GUID        d3dDeviceGuid;   
    GUID        ddDeviceID;      
    char        driverDesc[D3DX_DRIVERDESC_LENGTH];          
    HMONITOR    monitor;
    BOOL        onPrimary;
} D3DX_DEVICEDESC;

///////////////////////////////////////////////////////////////////////////
// APIs:
///////////////////////////////////////////////////////////////////////////
#ifdef __cplusplus
extern "C" {
#endif //__cplusplus
    
//-------------------------------------------------------------------------
// D3DXInitialize: The very first call a D3DX app must make.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXInitialize();

//-------------------------------------------------------------------------
// D3DXUninitialize: The very last call a D3DX app must make.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXUninitialize();

//-------------------------------------------------------------------------
// D3DXGetDeviceCount: Returns the maximum number of D3DXdevices 
// ------------------  available.
//
// D3DXGetDeviceDescription: Lists the 2D and 3D capabilities of the devices. 
// ------------------------  Also, the various guids needed by ddraw and d3d.
//
// Params: 
//     [in] DWORD deviceIndex: Which device? Starts at 0.
//     [in] D3DX_DEVICEDESC* pd3dxDevice: Pointer to the D3DX_DEVICEDESC
//                                        structure to be filled in.
//-------------------------------------------------------------------------
DWORD WINAPI 
    D3DXGetDeviceCount();

HRESULT WINAPI
    D3DXGetDeviceDescription(DWORD            deviceIndex, 
                             D3DX_DEVICEDESC* pd3dxDeviceDesc);

//-------------------------------------------------------------------------
// D3DXGetMaxNumVideoModes: Returns the maximum number of video-modes .
// -----------------------  
//
// Params:
//     [in]  DWORD deviceIndex: The device being referred to.
//     [in]  DWORD flags: If D3DX_GVM_REFRESHRATE is set, then the refresh
//                        rates are not ignored.
//
// D3DXGetVideoMode:  Describes a particular video mode for this device
// ----------------
//
// Note:  These queries will simply give you a list of modes that the
//        display adapter tells DirectX that it supports.
//        There is no guarantee that D3DXCreateContext(Ex) will succeed 
//        with all listed video modes.  This is a fundamental limitation 
//        of the current DirectX architecture which D3DX cannot hide in 
//        any clean way.
//
// Params:
//     [in]  DWORD deviceIndex: The device being referred to.
//     [in]  DWORD flags: If D3DX_GVM_REFRESHRATE is set, then the refresh
//                        rates are returned
//     [in]  DWORD which: Which VideoMode ? Starts at 0.
//     [out] D3DX_VIDMODEDESC* pModeList: Pointer to the D3DX_VIDMODEDESC
//                        structure that will be filled in.
//-------------------------------------------------------------------------
DWORD WINAPI 
    D3DXGetMaxNumVideoModes(DWORD       deviceIndex, 
                            DWORD       flags);

HRESULT WINAPI
    D3DXGetVideoMode(DWORD             deviceIndex, 
                     DWORD             flags, 
                     DWORD             modeIndex, 
                     D3DX_VIDMODEDESC* pModeDesc);

#define D3DX_GVM_REFRESHRATE      0x00000001
//-------------------------------------------------------------------------
// D3DXGetMaxSurfaceFormats: Returns the maximum number of surface
// ------------------------  formats supported by the device at that
//                           video mode.
//
// D3DXGetSurfaceFormat: Describes one of the supported surface formats.
// --------------------- 
//
// Params:
//     [in]  DWORD  deviceIndex: The device being referred to.
//     [in]  D3DX_VIDMODEDESC* pDesc: The display mode at which the supported
//                                    surface formats are requested. If it is
//                                    NULL, the current display mode is 
//                                    assumed.
//     [in]  DWORD surfClassFlags: Required surface classes.  Only surface
//                                 formats which support all specified 
//                                 surface classes will be returned.  
//                                 (Multiple surface classes may be specified
//                                 using bitwise OR.) 
//     [in]  DWORD which: Which surface formats to retrieve. Starts at 0.
//     [out] D3DX_SURFACEFORMAT* pFormat: The surface format
//-------------------------------------------------------------------------
DWORD WINAPI 
    D3DXGetMaxSurfaceFormats(DWORD             deviceIndex, 
                             D3DX_VIDMODEDESC* pDesc,
                             DWORD             surfClassFlags);
HRESULT WINAPI
    D3DXGetSurfaceFormat(DWORD               deviceIndex,
                         D3DX_VIDMODEDESC*   pDesc,
                         DWORD               surfClassFlags,                   
                         DWORD               surfaceIndex, 
                         D3DX_SURFACEFORMAT* pFormat);


//-------------------------------------------------------------------------
// D3DXGetCurrentVideoMode: Retrieves the current video mode for this device.
// -------------------
//
// Params:
//     [in]  DWORD deviceIndex: The device being referred to.
//     [out] D3DX_VIDMODEDESC* pVidMode: The current video mode
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXGetCurrentVideoMode(DWORD             deviceIndex, 
                            D3DX_VIDMODEDESC* pVidMode);

//-------------------------------------------------------------------------
// D3DXGetDeviceCaps: Lists all the capabilities of a device at a display 
//                    mode.
// ----------------
//
// Params:
//     [in]  DWORD  deviceIndex: The device being referred to.
//     [in]  D3DX_VIDMODEDESC* pDesc:  If this is NULL, we will return the 
//                                     caps at the current display mode of 
//                                     the device.
//     [out] D3DDEVICEDESC7* pD3DDeviceDesc7: D3D Caps ( NULL to ignore 
//                                              parameter)
//     [out] DDCAPS7* pDDHalCaps: DDraw HAL Caps (NULL to ignore parameter)
//     [out] DDCAPS7* pDDHelCaps: DDraw HEL Caps (NULL to ignore  paramter)
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXGetDeviceCaps(DWORD             deviceIndex, 
                      D3DX_VIDMODEDESC* pVidMode,
                      D3DDEVICEDESC7*   pD3DCaps,
                      DDCAPS*           pDDHALCaps,
                      DDCAPS*           pDDHELCaps);

//-------------------------------------------------------------------------
// D3DXCreateContext: Initializes the chosen device. It is the simplest init
// -----------------  function available.  Parameters are treated the same
//                    as the matching subset of parameters in 
//                    D3DXCreateContextEx, documented below.
//                    Remaining D3DXCreateContextEx parameters that are
//                    not present in D3DXCreateContext are treated as
//                    D3DX_DEFAULT.  Note that multimon is not supported
//                    with D3DXCreateContext.
//
// D3DXCreateContextEx: A more advanced function to initialize the device.
// -------------------  Also accepts D3DX_DEFAULT for most of the parameters
//                      and then will do what D3DXCreateContext did.
//
// Note: Do not expect D3DXCreateContext(Ex) to be fail-safe (as with any
//       API).  Supported device capablilites should be used as a guide
//       for choosing parameter values.  Keep in mind that there will 
//       inevitably be some combinations of parameters that just do not work.
// 
// Params:
//     [in]  DWORD deviceIndex: The device being referred to.   
//     [in]  DWORD flags: The valid flags are D3DX_CONTEXT_FULLSCREEN, and
//                        D3DX_CONTEXT_OFFSCREEN.  These flags cannot both
//                        be specified.  If no flags are specified, the
//                        context defaults to windowed mode.
//
//     [in]  HWND  hwnd: Device window.  See note.
//     [in]  HWND  hwndFocus: Window which receives keyboard messages from 
//                            the device window.  The device window should be 
//                            a child of focus window.  Useful for multimon 
//                            applications.  See note.
//     NOTE: 
//         windowed:   
//             hwnd must be a valid window.  hwndFocus must be NULL or 
//             D3DX_DEFAULT.
//
//         fullscreen: 
//             Either hwnd or hwndFocus must be a valid window.  (Both cannot
//             be NULL or D3DX_DEFAULT).  If hwnd is NULL or D3DX_DEFAULT, 
//             a default device window will be created as a child of hwndFocus.
//
//         offscreen:
//             Both hwnd and hwndFocus must be NULL or D3DX_DEFAULT
//
//     [in]  DWORD numColorBits: If D3DX_DEFAULT is passed for windowed mode,
//                               the current desktop's color depth is chosen.
//                               For full screen mode, D3DX_DEFAULT causes 16
//                               bit color to be used.                               
//     [in]  DWORD numAlphaBits: If D3DX_DEFAULT is passed, 0 is chosen.
//     [in]  DWORD numDepthbits: If D3DX_DEFAULT is passed,
//                               the highest available number of depth bits
//                               is chosen.  See note.
//     [in]  DWORD numStencilBits: If D3DX_DEFAULT is passed, the highest
//                                 available number of stencil bits is chosen.
//                                 See note.
//
//     NOTE: If both numDepthBits and numStencilBits are D3DX_DEFAULT,
//           D3DX first picks the highest available number of stencil
//           bits.  Then, for the chosen number of stencil bits, 
//           the highest available number of depth bits is chosen.
//           If only one of numStencilBits or numDepthBits 
//           is D3DX_DEFAULT, the highest number of bits available 
//           for this parameter is chosen out of only the formats
//           that support the number of bits requested for the
//           fixed parameter.
//
//     [in]  DWORD numBackBuffers: Number of back buffers, or D3DX_DEFAULT.
//                                 See note.
//
//     NOTE:
//        windowed: D3DX_DEFAULT means 1.  You must specify one back buffer.
//
//        fullscreen: D3DX_DEFAULT means 1.  Any number of back buffers can be
//            specified.
//
//        offscreen: D3DX_DEFAULT means 0.  You cannot specify additional back 
//            buffers.
//
//     [in]  DWORD width: Width, in pixels, or D3DX_DEFAULT.  See note.
//     [in]  DWORD height: Height, in pixels, or D3DX_DEFAULT.  See note.
//
//     NOTE: 
//        windowed: If either width or height is D3DX_DEFAULT, both values
//            default to the dimensions of the client area of hwnd.
//
//        fullscreen: If either width or height is D3DX_DEFAULT, width 
//            defaults to 640, and height defaults to 480.
//
//        offscreen: An error is returned if either width or height is 
//            D3DX_DEFAULT.
//
//     [in]  DWORD refreshRate: D3DX_DEFAULT means we let ddraw choose for 
//                              us.  Ignored for windowed and offscreen modes.
//     [out] LPD3DXCONTEXT* ppCtx: This is the Context object that is used for
//                                 rendering on that device.
//
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXCreateContext(DWORD          deviceIndex,  
                      DWORD          flags,
                      HWND           hwnd,
                      DWORD          width, 
                      DWORD          height,
                      LPD3DXCONTEXT* ppCtx);

HRESULT WINAPI
    D3DXCreateContextEx(DWORD          deviceIndex,  
                        DWORD          flags,
                        HWND           hwnd,
                        HWND           hwndFocus, 
                        DWORD          numColorBits,
                        DWORD          numAlphaBits,
                        DWORD          numDepthbits,
                        DWORD          numStencilBits,
                        DWORD          numBackBuffers,
                        DWORD          width, 
                        DWORD          height,
                        DWORD          refreshRate,
                        LPD3DXCONTEXT* ppCtx);

// The D3DXCreateContext(Ex) flags are:
#define D3DX_CONTEXT_FULLSCREEN  0x00000001
#define D3DX_CONTEXT_OFFSCREEN   0x00000002

//-------------------------------------------------------------------------
// D3DXGetErrorString: Prints out the error string given an hresult. Prints
// ------------------  Win32 as well as DX6 error messages besides the D3DX
//                     messages.
//
// Params:
//     [in]  HRESULT hr: The error code to be deciphered.
//     [in]  DWORD strLength: Length of the string passed in.
//     [out] LPSTR pStr:  The string output. This string of appropriate
//                       size needs to be passed in.
//-------------------------------------------------------------------------
void WINAPI
    D3DXGetErrorString(HRESULT hr, 
                       DWORD   strLength, 
                       LPSTR   pStr);

//-------------------------------------------------------------------------
// D3DXMakeDDPixelFormat: Fills in a DDPIXELFORMAT structure based on the 
// ---------------------   D3DX surface format requested.
//
// Params:
//     [in]  D3DX_SURFACEFORMAT d3dxFormat: Surface format.
//     [out] DDPIXELFORMAT*     pddpf:      Pixel format matching the given
//                                          surface format.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXMakeDDPixelFormat(D3DX_SURFACEFORMAT d3dxFormat, 
                          DDPIXELFORMAT*     pddpf);

//-------------------------------------------------------------------------
// D3DXMakeSurfaceFormat: Determines the surface format corresponding to 
// ---------------------  a given DDPIXELFORMAT. 
//
// Params:
//     [in]  DDPIXELFORMAT* pddpf: Pixel format.
// Return Value:
//     D3DX_SURFACEFORMAT: Surface format matching the given pixel format.
//                         D3DX_SF_UNKNOWN if the format is not supported
//-------------------------------------------------------------------------
D3DX_SURFACEFORMAT WINAPI
    D3DXMakeSurfaceFormat(DDPIXELFORMAT* pddpf);

#ifdef __cplusplus
}
#endif //__cplusplus    

///////////////////////////////////////////////////////////////////////////
// Interfaces:
///////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
// ID3DXContext interface: 
//
// This encapsulates all the stuff that the app might 
// want to do at initialization time and any global control over d3d and 
// ddraw.
//-------------------------------------------------------------------------


DECLARE_INTERFACE_(ID3DXContext, IUnknown)
{
    //
    // IUnknown methods 
    //
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID* ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    // Get the DDraw and Direct3D objects to call DirectDraw or
    // Direct3D Immediate Mode functions. 
    // If the objects don't exist (because they have not
    // been created for some reason) NULL is returned.
    // All the objects returned in the following Get* functions
    // are addref'ed. It is the application's responsibility to
    // release them when no longer needed.
    STDMETHOD_(LPDIRECTDRAW7,GetDD)(THIS) PURE;
    STDMETHOD_(LPDIRECT3D7,GetD3D)(THIS) PURE;
    STDMETHOD_(LPDIRECT3DDEVICE7,GetD3DDevice)(THIS) PURE;

    // Get the various buffers that get created at the init time
    // These are addref'ed as well. It is the application's responsibility
    // to release them before the app quits or when it needs a resize.
    STDMETHOD_(LPDIRECTDRAWSURFACE7,GetPrimary)(THIS) PURE;
    STDMETHOD_(LPDIRECTDRAWSURFACE7,GetZBuffer)(THIS) PURE;
    STDMETHOD_(LPDIRECTDRAWSURFACE7,GetBackBuffer)(THIS_ DWORD which) PURE;

    // Get the associated window handles 
    STDMETHOD_(HWND,GetWindow)(THIS) PURE;
    STDMETHOD_(HWND,GetFocusWindow)(THIS) PURE;

    // 
    // Various Get methods, in case the user had specified default
    // parameters
    //
    STDMETHOD(GetDeviceIndex)(THIS_ 
                              LPDWORD pDeviceIndex, 
                              LPDWORD pHwLevel) PURE;

    STDMETHOD_(DWORD, GetNumBackBuffers)(THIS) PURE;

    STDMETHOD(GetNumBits)(THIS_
                          LPDWORD pColorBits, 
                          LPDWORD pDepthBits,
                          LPDWORD pAlphaBits, 
                          LPDWORD pStencilBits) PURE;

    STDMETHOD(GetBufferSize)(THIS_ 
                             LPDWORD pWidth, 
                             LPDWORD pHeight) PURE;

    // Get the flags that were used to create this context
    STDMETHOD_(DWORD, GetCreationFlags)(THIS) PURE;
    STDMETHOD_(DWORD, GetRefreshRate)(THIS) PURE;
    
    // Restoring surfaces in case stuff is lost
    STDMETHOD(RestoreSurfaces)(THIS) PURE;
    
    // Resize all the buffers to the new width and height
    STDMETHOD(Resize)(THIS_ DWORD width, DWORD height) PURE;

    // Update the frame using a flip or a blit,
    // If the D3DX_UPDATE_NOVSYNC flag is set, blit is used if the 
    // driver cannot flip without waiting for vsync in full-screen mode.
    STDMETHOD(UpdateFrame)(THIS_ DWORD flags) PURE;

    // Render a string at the specified coordinates, with the specified 
    // colour. This is only provided as a convenience for 
    // debugging/information during development.
    // topLeftX and topLeftY represent the location of the top left corner
    // of the string, on the render target.  
    // The coordinate and color parameters each have a range of 0.0-1.0
    STDMETHOD(DrawDebugText)(THIS_
                             float topLeftX, 
                             float topLeftY,
                             D3DCOLOR color,
                             LPSTR pString) PURE;

    // Clears to the current viewport
    // The following are the valid flags:
    // D3DCLEAR_TARGET  (to clear the render target )
    // D3DCLEAR_ZBUFFER (to clear the depth-buffer )
    // D3DCLEAR_STENCIL (to clear the stencil-buffer )
    STDMETHOD(Clear)(THIS_ DWORD ClearFlags) PURE;

    STDMETHOD(SetClearColor)(THIS_ D3DCOLOR color ) PURE;
    STDMETHOD(SetClearDepth)(THIS_ float z) PURE;
    STDMETHOD(SetClearStencil)(THIS_ DWORD stencil) PURE;
};


//-------------------------------------------------------------------------
// Flags for Update member function:
//

// Flag to indicate that blit should be used instead of a flip
// for full-screen rendering.
#define D3DX_UPDATE_NOVSYNC (1<<0)

///////////////////////////////////////////////////////////////////////////
// Texturing APIs:
///////////////////////////////////////////////////////////////////////////
#ifdef __cplusplus
extern "C" {
#endif //__cplusplus
    
//-------------------------------------------------------------------------
// D3DXCheckTextureRequirements: Return information about texture creation 
// ----------------------------  (used by CreateTexture, CreateTextureFromFile
//                                and CreateCubeMapTexture)
//
// Parameters:
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
//  pFlags   
//      allows specification of D3DX_TEXTURE_NOMIPMAP
//      D3DX_TEXTURE_NOMIPMAP may be returned in the case where mipmap creation 
//      is not supported.
//  pWidth
//      width in pixels or NULL 
//      returns corrected width
//  pHeight       
//      height in pixels or NULL
//      returns corrected height
//  pPixelFormat
//      surface format 
//      returns best match to input format
//
//  Notes: 1. Unless the flags is set to specifically prevent creating 
//            mipmaps, mipmaps are generated all the way till 1x1 surface.
//         2. width, height and pixelformat are altered based on available 
//            hardware. For example:
//              a. Texture dimensions may be required to be powers of 2
//              b. We may require width == height for some devices
//              c. If PixelFormat is unavailable, a best fit is made
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCheckTextureRequirements( LPDIRECT3DDEVICE7     pd3dDevice,
                                  LPDWORD               pFlags, 
                                  LPDWORD               pWidth,  
                                  LPDWORD               pHeight,  
                                  D3DX_SURFACEFORMAT*   pPixelFormat);

//-------------------------------------------------------------------------
// D3DXCreateTexture: Create an empty texture object
// -----------------
//
// Parameters:
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
//  pFlags   
//      allows specification of D3DX_TEXTURE_NOMIPMAP
//      D3DX_TEXTURE_NOMIPMAP may be returned in the case where mipmap creation 
//      is not supported. Additionally, D3DX_TEXTURE_STAGE<n> can be specified
//      to indicate which texture stage the texture is for e.g. 
//      D3D_TEXTURE_STAGE1 indicates that the texture is for use with texture 
//      stage one. Stage Zero is the default if no TEXTURE_STAGE flags are
//      set.
//  pWidth
//      width in pixels; 0 or NULL is unacceptable
//      returns corrected width
//  pHeight       
//      height in pixels; 0 or NULL is unacceptable
//      returns corrected height
//  pPixelFormat
//      surface format. D3DX_DEFAULT is unacceptable.
//      returns actual format that was used
//  pDDPal
//      DDraw palette that is set (if present) on paletted surfaces.
//      It is ignored even if it is set, for non-paletted surfaces.
//  ppDDSurf
//      The ddraw surface that will be created
//  pNumMipMaps
//      the number of mipmaps actually generated
//
//  Notes: See notes for D3DXCheckTextureRequirements. 
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreateTexture( LPDIRECT3DDEVICE7     pd3dDevice,
                       LPDWORD               pFlags, 
                       LPDWORD               pWidth,  
                       LPDWORD               pHeight,  
                       D3DX_SURFACEFORMAT*   pPixelFormat,
                       LPDIRECTDRAWPALETTE   pDDPal,
                       LPDIRECTDRAWSURFACE7* ppDDSurf,
                       LPDWORD               pNumMipMaps);

//-------------------------------------------------------------------------
// D3DXCreateCubeMapTexture: Create blank cube-map texture
// ------------------------
//
// Parameters:
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
//  pFlags   
//      allows specification of D3DX_TEXTURE_NOMIPMAP
//      D3DX_TEXTURE_NOMIPMAP may be returned in the case where mipmap creation 
//      is not supported. Additionally, D3DX_TEXTURE_STAGE<n> can be specified
//      to indicate which texture stage the texture is for e.g. 
//      D3D_TEXTURE_STAGE1 indicates that the texture is for use with texture 
//      stage one. Stage Zero is the default if no TEXTURE_STAGE flags are
//      set.
//  cubefaces
//      allows specification of which faces of the cube-map to generate.
//      D3DX_DEFAULT, 0, and DDSCAPS2_CUBEMAP_ALLFACES all mean
//      "create all 6 faces of the cubemap". Any combination of
//      DDSCAPS2_CUBEMAP_POSITIVEX, DDSCAPS2_CUBEMAP_NEGATIVEX,
//      DDSCAPS2_CUBEMAP_POSITIVEY, DDSCAPS2_CUBEMAP_NEGATIVEY,
//      DDSCAPS2_CUBEMAP_POSITIVEZ, or DDSCAPS2_CUBEMAP_NEGATIVEZ, is
//      valid.
//  colorEmptyFaces
//      allows specification of the color to use for the faces that were not
//      specified in the cubefaces parameter.
//  pWidth
//      width in pixels; 0 or NULL is unacceptable
//      returns corrected width
//  pHeight       
//      height in pixels; 0 or NULL is unacceptable
//      returns corrected height
//  pPixelFormat
//      surface format. D3DX_DEFAULT is unacceptable.
//      returns actual format that was used
//  pDDPal
//      DDraw palette that is set (if present) on paletted surfaces.
//      It is ignored even if it is set, for non-paletted surfaces.
//  ppDDSurf
//      the ddraw surface that will be created
//  pNumMipMaps
//      the number of mipmaps generated for a particular face of the 
//      cubemap.
//
//  Notes: See notes for D3DXCheckTextureRequirements. 
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreateCubeMapTexture( LPDIRECT3DDEVICE7     pd3dDevice,
                              LPDWORD               pFlags, 
                              DWORD                 cubefaces,
                              D3DCOLOR              colorEmptyFaces,
                              LPDWORD               pWidth,  
                              LPDWORD               pHeight,  
                              D3DX_SURFACEFORMAT    *pPixelFormat,
                              LPDIRECTDRAWPALETTE   pDDPal,
                              LPDIRECTDRAWSURFACE7* ppDDSurf,
                              LPDWORD               pNumMipMaps);


//-------------------------------------------------------------------------
// D3DXCreateTextureFromFile: Create a texture object from a file or from the 
// -------------------------  resource. Only BMP and DIB are supported from the
//                            resource portion of the executable.
//
// Parameters:
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
//  pFlags   
//      allows specification of D3DX_TEXTURE_NOMIPMAP
//      D3DX_TEXTURE_NOMIPMAP may be returned in the case where mipmap creation 
//      is not supported. Additionally, D3DX_TEXTURE_STAGE<n> can be specified
//      to indicate which texture stage the texture is for e.g. 
//      D3D_TEXTURE_STAGE1 indicates that the texture is for use with texture 
//      stage one. Stage Zero is the default if no TEXTURE_STAGE flags are
//      set.
//  pWidth  
//      Width in pixels. If 0 or D3DX_DEFAULT, the width will be taken 
//      from the file
//      returns corrected width
//  pHeight   
//      Height in pixels. If 0 or D3DX_DEFAULT, the height will be taken 
//      from the file
//      returns corrected height
//  pPixelFormat
//      If D3DX_SF_UNKNOWN is passed in, pixel format closest to the bitmap 
//      will be chosen
//      returns actual format that was used
//  pDDPal
//      DDraw palette that is set (if present) on paletted surfaces.
//      It is ignored even if it is set, for non-paletted surfaces.
//  ppDDSurf
//      The ddraw surface that will be created.
//  pNumMipMaps
//      The number of mipmaps generated.
//  pSrcName
//      File name. BMP, DIB, DDS, are supported. 
//      
//      TGA is supported for the following cases: 16, 24, 32bpp direct color and 8bpp palettized. 
//      Also, 8, 16bpp grayscale is supported. RLE versions of the above 
//      TGA formats are also supported. ColorKey and Premultiplied Alpha 
//      are not currently supported for TGA files.
//      returns created format
//
//  Notes: See notes for D3DXCheckTextureRequirements. 
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreateTextureFromFile( LPDIRECT3DDEVICE7     pd3dDevice,
                               LPDWORD               pFlags, 
                               LPDWORD               pWidth,  
                               LPDWORD               pHeight,  
                               D3DX_SURFACEFORMAT*   pPixelFormat,
                               LPDIRECTDRAWPALETTE   pDDPal,
                               LPDIRECTDRAWSURFACE7* ppDDSurf,
                               LPDWORD               pNumMipMaps,
                               LPSTR                 pSrcName,
                               D3DX_FILTERTYPE       filterType);

//-------------------------------------------------------------------------
// D3DXLoadTextureFromFile: Load from a file into a mipmap level. Doing the 
// -----------------------  necessary color conversion and rescaling. File
//                          format support is identical to 
//                          D3DXCreateTextureFromFile's.
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
// pTexture
//      a pointer to a DD7Surface which was created with either 
//      CreateTextureFromFile or CreateTexture.
// mipMapLevel
//      indicates mipmap level
//      Note: 
//          1. Error if mipmap level doesn't exist
//          2. If D3DX_DEFAULT and equal number of mipmap levels exist
//             then all the source mip-levels are loaded
//          3. If the source has mipmaps and the dest doesn't, use the top one
//          4. If the dest has miplevels and source doesn't, we expand
//          5. If there are unequal numbers of miplevels, we expand
// pSrcName
//      File name. BMP, DIB, DDS, are supported. 
//      For details on TGA support, refer to the comments for 
//      D3DXCreateTextureFromFile
// pSrcRect
//      the source rectangle or null (whole surface)
// pDestRect
//      the destination rectangle or null (whole surface)
// filterType 
//      filter used for mipmap generation
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXLoadTextureFromFile( LPDIRECT3DDEVICE7    pd3dDevice,
                             LPDIRECTDRAWSURFACE7 pTexture,
                             DWORD                mipMapLevel,
                             LPSTR                pSrcName, 
                             RECT*                pSrcRect, 
                             RECT*                pDestRect,
                             D3DX_FILTERTYPE      filterType);

//-------------------------------------------------------------------------
// D3DXLoadTextureFromSurface: Load from a DDraw Surface into a mipmap level. 
// --------------------------  Doing the necessary color conversion.
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
// pTexture
//      a pointer to a DD7Surface which was created with either 
//      CreateTextureFromFile or CreateTexture.
// mipMapLevel
//      indicates mipmap level
//      Note: 
//          1. Error if mipmap level doesn't exist
//          2. If D3DX_DEFAULT and equal number of mipmap levels exist
//             then all the source mip-levels are loaded
//          3. If the source has mipmaps and the dest doesn't, use the top one
//          4. If the dest has miplevels and source doesn't, we expand
//          5. If there are unequal numbers of miplevels, we expand
// pSurfaceSrc
//      the source surface
// pSrcRect
//      the source rectangle or null (whole surface)
// pDestRect
//      the destination rectangle or null (whole surface)
// filterType 
//      filter used for mipmap generation
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXLoadTextureFromSurface( LPDIRECT3DDEVICE7    pd3dDevice,
                                LPDIRECTDRAWSURFACE7 pTexture,
                                DWORD                mipMapLevel,
                                LPDIRECTDRAWSURFACE7 pSurfaceSrc, 
                                RECT*                pSrcRect, 
                                RECT*                pDestRect,
                                D3DX_FILTERTYPE      filterType);

//-------------------------------------------------------------------------
// D3DXLoadTextureFromMemory: Load a mip level from memory. Doing the necessary
// -------------------------  color conversion.
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
// pTexture
//      a pointer to a DD7Surface which was created with either 
//      CreateTextureFromFile or CreateTexture.
// mipMapLevel
//      indicates mipmap level
//      Note: 
//          1. Error if mipmap level doesn't exist
//          2. If D3DX_DEFAULT and equal number of mipmap levels exist
//             then all the source mip-levels are loaded
//          3. If the source has mipmaps and the dest doesn't, use the top one
//          4. If the dest has miplevels and source doesn't, we expand
//          5. If there are unequal numbers of miplevels, we expand
// pMemory
//      pointer to source memory from which the texture will be loaded
// pDDPal
//      DirectDraw Palette, that the app passes in optionally if the memory is 
//      supposed to be paletteized.
// srcPixelFormat
//      PixelFormat of the source.
// srcPitch
//      The pitch of the memory or D3DX_DEFAULT (based on srcPixelFormat)
// pDestRect
//      The destination rectangle or null (whole surface)
// filterType 
//      filter used for mipmap generation
// 
// Assumptions: The source (memory) is loaded in full
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXLoadTextureFromMemory( LPDIRECT3DDEVICE7    pd3dDevice, 
                               LPDIRECTDRAWSURFACE7 pTexture,
                               DWORD                mipMapLevel, 
                               LPVOID               pMemory,
                               LPDIRECTDRAWPALETTE  pDDPal,
                               D3DX_SURFACEFORMAT   srcPixelFormat,
                               DWORD                srcPitch,
                               RECT*                pDestRect,
                               D3DX_FILTERTYPE      filterType);

#ifdef __cplusplus
}
#endif //__cplusplus    

//-------------------------------------------------------------------------
// Flags for texture create functions; applies to 
// D3DXCreateTexture, D3DXCreateCubeMapTexture and D3DXCreateTextureFromFile.
//

// Flag to indicate that mipmap generation is not desired.
#define D3DX_TEXTURE_NOMIPMAP  (1 << 8)

// Flags to indicate which texture stage the texture is
// intended for use with. Specifying the stage is necessary at
// texture creation time for HW devices that expose the
// D3DDEVCAPS_SEPARATETEXTUREMEMORIES bit in their D3DDEVICEDESC
// structure.
#define D3DX_TEXTURE_STAGE0    (0)
#define D3DX_TEXTURE_STAGE1    (1)
#define D3DX_TEXTURE_STAGE2    (2)
#define D3DX_TEXTURE_STAGE3    (3)
#define D3DX_TEXTURE_STAGE4    (4)
#define D3DX_TEXTURE_STAGE5    (5)
#define D3DX_TEXTURE_STAGE6    (6)
#define D3DX_TEXTURE_STAGE7    (7)

// Mask to extract the texture stage value out of the flags to
// the texture create functions.
#define D3DX_TEXTURE_STAGE_MASK (0x7)

#endif //__D3DXCORE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\DAnimId.h ===
// Copyright (C) Microsoft Corporation, 1998
//
// IDs for DANIM Events
//
// Just follow the template when adding either DISPIDs or new interfaces.
//

#ifndef __DANIMDISPID_H__
#define __DANIMDISPID_H__

// Base offset:

#define DISPID_BASE                                             0x00000000

// Interface offsets:
#define DAVIEWERCONTROL_OFFSET                                  0x1000
#define DAVIEW_OFFSET                                           0x2000

// Interface bases:
#define DISPID_DANIMEVENT_BASE                                  (DISPID_BASE + DAVIEWERCONTROL_OFFSET)
#define DISPID_VIEWEVENT_BASE                                   (DISPID_BASE + DAVIEW_OFFSET)

// DAVIEWERCONTROL DISPIDs:
#define DISPID_DANIMEVENT_START                          (DISPID_DANIMEVENT_BASE + 0x01)
#define DISPID_DANIMEVENT_MOUSEUP                        (DISPID_DANIMEVENT_BASE + 0x02)
#define DISPID_DANIMEVENT_MOUSEDOWN                      (DISPID_DANIMEVENT_BASE + 0x03)
#define DISPID_DANIMEVENT_MOUSEMOVE                      (DISPID_DANIMEVENT_BASE + 0x04)
#define DISPID_DANIMEVENT_CLICK                          (DISPID_DANIMEVENT_BASE + 0x05)
#define DISPID_DANIMEVENT_KEYPRESS                       (DISPID_DANIMEVENT_BASE + 0x06)
#define DISPID_DANIMEVENT_KEYUP                          (DISPID_DANIMEVENT_BASE + 0x07)
#define DISPID_DANIMEVENT_KEYDOWN                        (DISPID_DANIMEVENT_BASE + 0x08)
#define DISPID_DANIMEVENT_ERROR                          (DISPID_DANIMEVENT_BASE + 0x09)
#define DISPID_DANIMEVENT_STOP                           (DISPID_DANIMEVENT_BASE + 0x0A)
#define DISPID_DANIMEVENT_PAUSE                          (DISPID_DANIMEVENT_BASE + 0x0B)
#define DISPID_DANIMEVENT_RESUME                         (DISPID_DANIMEVENT_BASE + 0x0C)

//VIEW DISPIDS
#define DISPID_VIEWEVENT_START                                  (DISPID_VIEWEVENT_BASE + 0x01)
#define DISPID_VIEWEVENT_STOP                                   (DISPID_VIEWEVENT_BASE + 0x02)
#define DISPID_VIEWEVENT_ONMOUSEMOVE                            (DISPID_VIEWEVENT_BASE + 0x03)
#define DISPID_VIEWEVENT_ONMOUSEBUTTON                          (DISPID_VIEWEVENT_BASE + 0x04)
#define DISPID_VIEWEVENT_ONKEY                                  (DISPID_VIEWEVENT_BASE + 0x05)
#define DISPID_VIEWEVENT_ONFOCUS                                (DISPID_VIEWEVENT_BASE + 0x06)
#define DISPID_VIEWEVENT_PAUSE                                  (DISPID_VIEWEVENT_BASE + 0x07)
#define DISPID_VIEWEVENT_RESUME                                 (DISPID_VIEWEVENT_BASE + 0x08)
#define DISPID_VIEWEVENT_ERROR                                  (DISPID_VIEWEVENT_BASE + 0x09)

#endif  //__DANIMDISPID_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3dtypes.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:   d3dtypes.h
 *  Content:    Direct3D types include file
 *
 ***************************************************************************/

#ifndef _D3DTYPES_H_
#define _D3DTYPES_H_

#ifndef DIRECT3D_VERSION
#define DIRECT3D_VERSION         0x0700
#endif

#if (DIRECT3D_VERSION >= 0x0800)
#pragma message("should not include d3dtypes.h when compiling for DX8 or newer interfaces")
#endif

#include <windows.h>

#include <float.h>
#include "ddraw.h"

#pragma warning(disable:4201) // anonymous unions warning
#pragma pack(4)


/* D3DVALUE is the fundamental Direct3D fractional data type */

#define D3DVALP(val, prec) ((float)(val))
#define D3DVAL(val) ((float)(val))

#ifndef DX_SHARED_DEFINES

/*
 * This definition is shared with other DirectX components whose header files
 * might already have defined it. Therefore, we don't define this type if
 * someone else already has (as indicated by the definition of
 * DX_SHARED_DEFINES). We don't set DX_SHARED_DEFINES here as there are
 * other types in this header that are also shared. The last of these
 * shared defines in this file will set DX_SHARED_DEFINES.
 */
typedef float D3DVALUE, *LPD3DVALUE;

#endif /* DX_SHARED_DEFINES */

#define D3DDivide(a, b)    (float)((double) (a) / (double) (b))
#define D3DMultiply(a, b)    ((a) * (b))

typedef LONG D3DFIXED;

#ifndef RGB_MAKE
/*
 * Format of CI colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |         color index           |   fraction    |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define CI_GETALPHA(ci)    ((ci) >> 24)
#define CI_GETINDEX(ci)    (((ci) >> 8) & 0xffff)
#define CI_GETFRACTION(ci) ((ci) & 0xff)
#define CI_ROUNDINDEX(ci)  CI_GETINDEX((ci) + 0x80)
#define CI_MASKALPHA(ci)   ((ci) & 0xffffff)
#define CI_MAKE(a, i, f)    (((a) << 24) | ((i) << 8) | (f))

/*
 * Format of RGBA colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    alpha      |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGBA_GETALPHA(rgb)      ((rgb) >> 24)
#define RGBA_GETRED(rgb)        (((rgb) >> 16) & 0xff)
#define RGBA_GETGREEN(rgb)      (((rgb) >> 8) & 0xff)
#define RGBA_GETBLUE(rgb)       ((rgb) & 0xff)
#define RGBA_MAKE(r, g, b, a)   ((D3DCOLOR) (((a) << 24) | ((r) << 16) | ((g) << 8) | (b)))

/* D3DRGB and D3DRGBA may be used as initialisers for D3DCOLORs
 * The float values must be in the range 0..1
 */
#define D3DRGB(r, g, b) \
    (0xff000000L | ( ((long)((r) * 255)) << 16) | (((long)((g) * 255)) << 8) | (long)((b) * 255))
#define D3DRGBA(r, g, b, a) \
    (   (((long)((a) * 255)) << 24) | (((long)((r) * 255)) << 16) \
    |   (((long)((g) * 255)) << 8) | (long)((b) * 255) \
    )

/*
 * Format of RGB colors is
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *  |    ignored    |      red      |     green     |     blue      |
 *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */
#define RGB_GETRED(rgb)         (((rgb) >> 16) & 0xff)
#define RGB_GETGREEN(rgb)       (((rgb) >> 8) & 0xff)
#define RGB_GETBLUE(rgb)        ((rgb) & 0xff)
#define RGBA_SETALPHA(rgba, x) (((x) << 24) | ((rgba) & 0x00ffffff))
#define RGB_MAKE(r, g, b)       ((D3DCOLOR) (((r) << 16) | ((g) << 8) | (b)))
#define RGBA_TORGB(rgba)       ((D3DCOLOR) ((rgba) & 0xffffff))
#define RGB_TORGBA(rgb)        ((D3DCOLOR) ((rgb) | 0xff000000))

#endif

/*
 * Flags for Enumerate functions
 */

/*
 * Stop the enumeration
 */
#define D3DENUMRET_CANCEL                        DDENUMRET_CANCEL

/*
 * Continue the enumeration
 */
#define D3DENUMRET_OK                            DDENUMRET_OK

typedef HRESULT (CALLBACK* LPD3DVALIDATECALLBACK)(LPVOID lpUserArg, DWORD dwOffset);
typedef HRESULT (CALLBACK* LPD3DENUMTEXTUREFORMATSCALLBACK)(LPDDSURFACEDESC lpDdsd, LPVOID lpContext);
typedef HRESULT (CALLBACK* LPD3DENUMPIXELFORMATSCALLBACK)(LPDDPIXELFORMAT lpDDPixFmt, LPVOID lpContext);

#ifndef DX_SHARED_DEFINES

/*
 * This definition is shared with other DirectX components whose header files
 * might already have defined it. Therefore, we don't define this type if
 * someone else already has (as indicated by the definition of
 * DX_SHARED_DEFINES). We don't set DX_SHARED_DEFINES here as there are
 * other types in this header that are also shared. The last of these
 * shared defines in this file will set DX_SHARED_DEFINES.
 */
#ifndef D3DCOLOR_DEFINED
typedef DWORD D3DCOLOR;
#define D3DCOLOR_DEFINED
#endif
typedef DWORD *LPD3DCOLOR;

#endif /* DX_SHARED_DEFINES */

typedef DWORD D3DMATERIALHANDLE, *LPD3DMATERIALHANDLE;
typedef DWORD D3DTEXTUREHANDLE, *LPD3DTEXTUREHANDLE;
typedef DWORD D3DMATRIXHANDLE, *LPD3DMATRIXHANDLE;

#ifndef D3DCOLORVALUE_DEFINED
typedef struct _D3DCOLORVALUE {
    union {
    D3DVALUE r;
    D3DVALUE dvR;
    };
    union {
    D3DVALUE g;
    D3DVALUE dvG;
    };
    union {
    D3DVALUE b;
    D3DVALUE dvB;
    };
    union {
    D3DVALUE a;
    D3DVALUE dvA;
    };
} D3DCOLORVALUE;
#define D3DCOLORVALUE_DEFINED
#endif
typedef struct _D3DCOLORVALUE *LPD3DCOLORVALUE;

#ifndef D3DRECT_DEFINED
typedef struct _D3DRECT {
    union {
    LONG x1;
    LONG lX1;
    };
    union {
    LONG y1;
    LONG lY1;
    };
    union {
    LONG x2;
    LONG lX2;
    };
    union {
    LONG y2;
    LONG lY2;
    };
} D3DRECT;
#define D3DRECT_DEFINED
#endif
typedef struct _D3DRECT *LPD3DRECT;

#ifndef DX_SHARED_DEFINES

/*
 * This definition is shared with other DirectX components whose header files
 * might already have defined it. Therefore, we don't define this type if
 * someone else already has (as indicated by the definition of
 * DX_SHARED_DEFINES).
 */

#ifndef D3DVECTOR_DEFINED
typedef struct _D3DVECTOR {
    union {
    D3DVALUE x;
    D3DVALUE dvX;
    };
    union {
    D3DVALUE y;
    D3DVALUE dvY;
    };
    union {
    D3DVALUE z;
    D3DVALUE dvZ;
    };
#if(DIRECT3D_VERSION >= 0x0500)
#if (defined __cplusplus) && (defined D3D_OVERLOADS)

public:

    // =====================================
    // Constructors
    // =====================================

    _D3DVECTOR() { }
    _D3DVECTOR(D3DVALUE f);
    _D3DVECTOR(D3DVALUE _x, D3DVALUE _y, D3DVALUE _z);
    _D3DVECTOR(const D3DVALUE f[3]);

    // =====================================
    // Access grants
    // =====================================

    const D3DVALUE&operator[](int i) const;
    D3DVALUE&operator[](int i);

    // =====================================
    // Assignment operators
    // =====================================

    _D3DVECTOR& operator += (const _D3DVECTOR& v);
    _D3DVECTOR& operator -= (const _D3DVECTOR& v);
    _D3DVECTOR& operator *= (const _D3DVECTOR& v);
    _D3DVECTOR& operator /= (const _D3DVECTOR& v);
    _D3DVECTOR& operator *= (D3DVALUE s);
    _D3DVECTOR& operator /= (D3DVALUE s);

    // =====================================
    // Unary operators
    // =====================================

    friend _D3DVECTOR operator + (const _D3DVECTOR& v);
    friend _D3DVECTOR operator - (const _D3DVECTOR& v);


    // =====================================
    // Binary operators
    // =====================================

    // Addition and subtraction
        friend _D3DVECTOR operator + (const _D3DVECTOR& v1, const _D3DVECTOR& v2);
        friend _D3DVECTOR operator - (const _D3DVECTOR& v1, const _D3DVECTOR& v2);
    // Scalar multiplication and division
        friend _D3DVECTOR operator * (const _D3DVECTOR& v, D3DVALUE s);
        friend _D3DVECTOR operator * (D3DVALUE s, const _D3DVECTOR& v);
        friend _D3DVECTOR operator / (const _D3DVECTOR& v, D3DVALUE s);
    // Memberwise multiplication and division
        friend _D3DVECTOR operator * (const _D3DVECTOR& v1, const _D3DVECTOR& v2);
        friend _D3DVECTOR operator / (const _D3DVECTOR& v1, const _D3DVECTOR& v2);

    // Vector dominance
        friend int operator < (const _D3DVECTOR& v1, const _D3DVECTOR& v2);
        friend int operator <= (const _D3DVECTOR& v1, const _D3DVECTOR& v2);

    // Bitwise equality
        friend int operator == (const _D3DVECTOR& v1, const _D3DVECTOR& v2);

    // Length-related functions
        friend D3DVALUE SquareMagnitude (const _D3DVECTOR& v);
        friend D3DVALUE Magnitude (const _D3DVECTOR& v);

    // Returns vector with same direction and unit length
        friend _D3DVECTOR Normalize (const _D3DVECTOR& v);

    // Return min/max component of the input vector
        friend D3DVALUE Min (const _D3DVECTOR& v);
        friend D3DVALUE Max (const _D3DVECTOR& v);

    // Return memberwise min/max of input vectors
        friend _D3DVECTOR Minimize (const _D3DVECTOR& v1, const _D3DVECTOR& v2);
        friend _D3DVECTOR Maximize (const _D3DVECTOR& v1, const _D3DVECTOR& v2);

    // Dot and cross product
        friend D3DVALUE DotProduct (const _D3DVECTOR& v1, const _D3DVECTOR& v2);
        friend _D3DVECTOR CrossProduct (const _D3DVECTOR& v1, const _D3DVECTOR& v2);

#endif
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DVECTOR;
#define D3DVECTOR_DEFINED
#endif
typedef struct _D3DVECTOR *LPD3DVECTOR;

/*
 * As this is the last of the shared defines to be defined we now set
 * D3D_SHARED_DEFINES to flag that fact that this header has defined these
 * types.
 */
#define DX_SHARED_DEFINES

#endif /* DX_SHARED_DEFINES */

/*
 * Vertex data types supported in an ExecuteBuffer.
 */

/*
 * Homogeneous vertices
 */

typedef struct _D3DHVERTEX {
    DWORD           dwFlags;        /* Homogeneous clipping flags */
    union {
    D3DVALUE    hx;
    D3DVALUE    dvHX;
    };
    union {
    D3DVALUE    hy;
    D3DVALUE    dvHY;
    };
    union {
    D3DVALUE    hz;
    D3DVALUE    dvHZ;
    };
} D3DHVERTEX, *LPD3DHVERTEX;

/*
 * Transformed/lit vertices
 */
typedef struct _D3DTLVERTEX {
    union {
    D3DVALUE    sx;             /* Screen coordinates */
    D3DVALUE    dvSX;
    };
    union {
    D3DVALUE    sy;
    D3DVALUE    dvSY;
    };
    union {
    D3DVALUE    sz;
    D3DVALUE    dvSZ;
    };
    union {
    D3DVALUE    rhw;        /* Reciprocal of homogeneous w */
    D3DVALUE    dvRHW;
    };
    union {
    D3DCOLOR    color;          /* Vertex color */
    D3DCOLOR    dcColor;
    };
    union {
    D3DCOLOR    specular;       /* Specular component of vertex */
    D3DCOLOR    dcSpecular;
    };
    union {
    D3DVALUE    tu;             /* Texture coordinates */
    D3DVALUE    dvTU;
    };
    union {
    D3DVALUE    tv;
    D3DVALUE    dvTV;
    };
#if(DIRECT3D_VERSION >= 0x0500)
#if (defined __cplusplus) && (defined D3D_OVERLOADS)
    _D3DTLVERTEX() { }
    _D3DTLVERTEX(const D3DVECTOR& v, float _rhw,
                 D3DCOLOR _color, D3DCOLOR _specular,
                 float _tu, float _tv)
        { sx = v.x; sy = v.y; sz = v.z; rhw = _rhw;
          color = _color; specular = _specular;
          tu = _tu; tv = _tv;
        }
#endif
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DTLVERTEX, *LPD3DTLVERTEX;

/*
 * Untransformed/lit vertices
 */
typedef struct _D3DLVERTEX {
    union {
    D3DVALUE     x;             /* Homogeneous coordinates */
    D3DVALUE     dvX;
    };
    union {
    D3DVALUE     y;
    D3DVALUE     dvY;
    };
    union {
    D3DVALUE     z;
    D3DVALUE     dvZ;
    };
    DWORD            dwReserved;
    union {
    D3DCOLOR     color;         /* Vertex color */
    D3DCOLOR     dcColor;
    };
    union {
    D3DCOLOR     specular;      /* Specular component of vertex */
    D3DCOLOR     dcSpecular;
    };
    union {
    D3DVALUE     tu;            /* Texture coordinates */
    D3DVALUE     dvTU;
    };
    union {
    D3DVALUE     tv;
    D3DVALUE     dvTV;
    };
#if(DIRECT3D_VERSION >= 0x0500)
#if (defined __cplusplus) && (defined D3D_OVERLOADS)
    _D3DLVERTEX() { }
    _D3DLVERTEX(const D3DVECTOR& v,
                D3DCOLOR _color, D3DCOLOR _specular,
                float _tu, float _tv)
        { x = v.x; y = v.y; z = v.z; dwReserved = 0;
          color = _color; specular = _specular;
          tu = _tu; tv = _tv;
        }
#endif
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DLVERTEX, *LPD3DLVERTEX;

/*
 * Untransformed/unlit vertices
 */

typedef struct _D3DVERTEX {
    union {
    D3DVALUE     x;             /* Homogeneous coordinates */
    D3DVALUE     dvX;
    };
    union {
    D3DVALUE     y;
    D3DVALUE     dvY;
    };
    union {
    D3DVALUE     z;
    D3DVALUE     dvZ;
    };
    union {
    D3DVALUE     nx;            /* Normal */
    D3DVALUE     dvNX;
    };
    union {
    D3DVALUE     ny;
    D3DVALUE     dvNY;
    };
    union {
    D3DVALUE     nz;
    D3DVALUE     dvNZ;
    };
    union {
    D3DVALUE     tu;            /* Texture coordinates */
    D3DVALUE     dvTU;
    };
    union {
    D3DVALUE     tv;
    D3DVALUE     dvTV;
    };
#if(DIRECT3D_VERSION >= 0x0500)
#if (defined __cplusplus) && (defined D3D_OVERLOADS)
    _D3DVERTEX() { }
    _D3DVERTEX(const D3DVECTOR& v, const D3DVECTOR& n, float _tu, float _tv)
        { x = v.x; y = v.y; z = v.z;
          nx = n.x; ny = n.y; nz = n.z;
          tu = _tu; tv = _tv;
        }
#endif
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DVERTEX, *LPD3DVERTEX;


/*
 * Matrix, viewport, and tranformation structures and definitions.
 */

#ifndef D3DMATRIX_DEFINED
typedef struct _D3DMATRIX {
#if(DIRECT3D_VERSION >= 0x0500)
#if (defined __cplusplus) && (defined D3D_OVERLOADS)
    union {
        struct {
#endif

#endif /* DIRECT3D_VERSION >= 0x0500 */
            D3DVALUE        _11, _12, _13, _14;
            D3DVALUE        _21, _22, _23, _24;
            D3DVALUE        _31, _32, _33, _34;
            D3DVALUE        _41, _42, _43, _44;

#if(DIRECT3D_VERSION >= 0x0500)
#if (defined __cplusplus) && (defined D3D_OVERLOADS)
        };
        D3DVALUE m[4][4];
    };
    _D3DMATRIX() { }
    _D3DMATRIX( D3DVALUE _m00, D3DVALUE _m01, D3DVALUE _m02, D3DVALUE _m03,
                D3DVALUE _m10, D3DVALUE _m11, D3DVALUE _m12, D3DVALUE _m13,
                D3DVALUE _m20, D3DVALUE _m21, D3DVALUE _m22, D3DVALUE _m23,
                D3DVALUE _m30, D3DVALUE _m31, D3DVALUE _m32, D3DVALUE _m33
        )
        {
                m[0][0] = _m00; m[0][1] = _m01; m[0][2] = _m02; m[0][3] = _m03;
                m[1][0] = _m10; m[1][1] = _m11; m[1][2] = _m12; m[1][3] = _m13;
                m[2][0] = _m20; m[2][1] = _m21; m[2][2] = _m22; m[2][3] = _m23;
                m[3][0] = _m30; m[3][1] = _m31; m[3][2] = _m32; m[3][3] = _m33;
        }

    D3DVALUE& operator()(int iRow, int iColumn) { return m[iRow][iColumn]; }
    const D3DVALUE& operator()(int iRow, int iColumn) const { return m[iRow][iColumn]; }
#if(DIRECT3D_VERSION >= 0x0600)
    friend _D3DMATRIX operator* (const _D3DMATRIX&, const _D3DMATRIX&);
#endif /* DIRECT3D_VERSION >= 0x0600 */
#endif
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DMATRIX;
#define D3DMATRIX_DEFINED
#endif
typedef struct _D3DMATRIX *LPD3DMATRIX;

#if (defined __cplusplus) && (defined D3D_OVERLOADS)
#include "d3dvec.inl"
#endif

typedef struct _D3DVIEWPORT {
    DWORD       dwSize;
    DWORD       dwX;
    DWORD       dwY;        /* Top left */
    DWORD       dwWidth;
    DWORD       dwHeight;   /* Dimensions */
    D3DVALUE    dvScaleX;   /* Scale homogeneous to screen */
    D3DVALUE    dvScaleY;   /* Scale homogeneous to screen */
    D3DVALUE    dvMaxX;     /* Min/max homogeneous x coord */
    D3DVALUE    dvMaxY;     /* Min/max homogeneous y coord */
    D3DVALUE    dvMinZ;
    D3DVALUE    dvMaxZ;     /* Min/max homogeneous z coord */
} D3DVIEWPORT, *LPD3DVIEWPORT;

#if(DIRECT3D_VERSION >= 0x0500)
typedef struct _D3DVIEWPORT2 {
    DWORD       dwSize;
    DWORD       dwX;
    DWORD       dwY;        /* Viewport Top left */
    DWORD       dwWidth;
    DWORD       dwHeight;   /* Viewport Dimensions */
    D3DVALUE    dvClipX;        /* Top left of clip volume */
    D3DVALUE    dvClipY;
    D3DVALUE    dvClipWidth;    /* Clip Volume Dimensions */
    D3DVALUE    dvClipHeight;
    D3DVALUE    dvMinZ;         /* Min/max of clip Volume */
    D3DVALUE    dvMaxZ;
} D3DVIEWPORT2, *LPD3DVIEWPORT2;
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0700)
typedef struct _D3DVIEWPORT7 {
    DWORD       dwX;
    DWORD       dwY;            /* Viewport Top left */
    DWORD       dwWidth;
    DWORD       dwHeight;       /* Viewport Dimensions */
    D3DVALUE    dvMinZ;         /* Min/max of clip Volume */
    D3DVALUE    dvMaxZ;
} D3DVIEWPORT7, *LPD3DVIEWPORT7;
#endif /* DIRECT3D_VERSION >= 0x0700 */

/*
 * Values for clip fields.
 */

#if(DIRECT3D_VERSION >= 0x0700)

// Max number of user clipping planes, supported in D3D.
#define D3DMAXUSERCLIPPLANES 32

// These bits could be ORed together to use with D3DRENDERSTATE_CLIPPLANEENABLE
//
#define D3DCLIPPLANE0 (1 << 0)
#define D3DCLIPPLANE1 (1 << 1)
#define D3DCLIPPLANE2 (1 << 2)
#define D3DCLIPPLANE3 (1 << 3)
#define D3DCLIPPLANE4 (1 << 4)
#define D3DCLIPPLANE5 (1 << 5)

#endif /* DIRECT3D_VERSION >= 0x0700 */

#define D3DCLIP_LEFT                0x00000001L
#define D3DCLIP_RIGHT               0x00000002L
#define D3DCLIP_TOP             0x00000004L
#define D3DCLIP_BOTTOM              0x00000008L
#define D3DCLIP_FRONT               0x00000010L
#define D3DCLIP_BACK                0x00000020L
#define D3DCLIP_GEN0                0x00000040L
#define D3DCLIP_GEN1                0x00000080L
#define D3DCLIP_GEN2                0x00000100L
#define D3DCLIP_GEN3                0x00000200L
#define D3DCLIP_GEN4                0x00000400L
#define D3DCLIP_GEN5                0x00000800L

/*
 * Values for d3d status.
 */
#define D3DSTATUS_CLIPUNIONLEFT         D3DCLIP_LEFT
#define D3DSTATUS_CLIPUNIONRIGHT        D3DCLIP_RIGHT
#define D3DSTATUS_CLIPUNIONTOP          D3DCLIP_TOP
#define D3DSTATUS_CLIPUNIONBOTTOM       D3DCLIP_BOTTOM
#define D3DSTATUS_CLIPUNIONFRONT        D3DCLIP_FRONT
#define D3DSTATUS_CLIPUNIONBACK         D3DCLIP_BACK
#define D3DSTATUS_CLIPUNIONGEN0         D3DCLIP_GEN0
#define D3DSTATUS_CLIPUNIONGEN1         D3DCLIP_GEN1
#define D3DSTATUS_CLIPUNIONGEN2         D3DCLIP_GEN2
#define D3DSTATUS_CLIPUNIONGEN3         D3DCLIP_GEN3
#define D3DSTATUS_CLIPUNIONGEN4         D3DCLIP_GEN4
#define D3DSTATUS_CLIPUNIONGEN5         D3DCLIP_GEN5

#define D3DSTATUS_CLIPINTERSECTIONLEFT      0x00001000L
#define D3DSTATUS_CLIPINTERSECTIONRIGHT     0x00002000L
#define D3DSTATUS_CLIPINTERSECTIONTOP       0x00004000L
#define D3DSTATUS_CLIPINTERSECTIONBOTTOM    0x00008000L
#define D3DSTATUS_CLIPINTERSECTIONFRONT     0x00010000L
#define D3DSTATUS_CLIPINTERSECTIONBACK      0x00020000L
#define D3DSTATUS_CLIPINTERSECTIONGEN0      0x00040000L
#define D3DSTATUS_CLIPINTERSECTIONGEN1      0x00080000L
#define D3DSTATUS_CLIPINTERSECTIONGEN2      0x00100000L
#define D3DSTATUS_CLIPINTERSECTIONGEN3      0x00200000L
#define D3DSTATUS_CLIPINTERSECTIONGEN4      0x00400000L
#define D3DSTATUS_CLIPINTERSECTIONGEN5      0x00800000L
#define D3DSTATUS_ZNOTVISIBLE               0x01000000L
/* Do not use 0x80000000 for any status flags in future as it is reserved */

#define D3DSTATUS_CLIPUNIONALL  (       \
        D3DSTATUS_CLIPUNIONLEFT |   \
        D3DSTATUS_CLIPUNIONRIGHT    |   \
        D3DSTATUS_CLIPUNIONTOP  |   \
        D3DSTATUS_CLIPUNIONBOTTOM   |   \
        D3DSTATUS_CLIPUNIONFRONT    |   \
        D3DSTATUS_CLIPUNIONBACK |   \
        D3DSTATUS_CLIPUNIONGEN0 |   \
        D3DSTATUS_CLIPUNIONGEN1 |   \
        D3DSTATUS_CLIPUNIONGEN2 |   \
        D3DSTATUS_CLIPUNIONGEN3 |   \
        D3DSTATUS_CLIPUNIONGEN4 |   \
        D3DSTATUS_CLIPUNIONGEN5     \
        )

#define D3DSTATUS_CLIPINTERSECTIONALL   (       \
        D3DSTATUS_CLIPINTERSECTIONLEFT  |   \
        D3DSTATUS_CLIPINTERSECTIONRIGHT |   \
        D3DSTATUS_CLIPINTERSECTIONTOP   |   \
        D3DSTATUS_CLIPINTERSECTIONBOTTOM    |   \
        D3DSTATUS_CLIPINTERSECTIONFRONT |   \
        D3DSTATUS_CLIPINTERSECTIONBACK  |   \
        D3DSTATUS_CLIPINTERSECTIONGEN0  |   \
        D3DSTATUS_CLIPINTERSECTIONGEN1  |   \
        D3DSTATUS_CLIPINTERSECTIONGEN2  |   \
        D3DSTATUS_CLIPINTERSECTIONGEN3  |   \
        D3DSTATUS_CLIPINTERSECTIONGEN4  |   \
        D3DSTATUS_CLIPINTERSECTIONGEN5      \
        )

#define D3DSTATUS_DEFAULT   (           \
        D3DSTATUS_CLIPINTERSECTIONALL   |   \
        D3DSTATUS_ZNOTVISIBLE)


/*
 * Options for direct transform calls
 */
#define D3DTRANSFORM_CLIPPED       0x00000001l
#define D3DTRANSFORM_UNCLIPPED     0x00000002l

typedef struct _D3DTRANSFORMDATA {
    DWORD           dwSize;
    LPVOID      lpIn;           /* Input vertices */
    DWORD           dwInSize;       /* Stride of input vertices */
    LPVOID      lpOut;          /* Output vertices */
    DWORD           dwOutSize;      /* Stride of output vertices */
    LPD3DHVERTEX    lpHOut;         /* Output homogeneous vertices */
    DWORD           dwClip;         /* Clipping hint */
    DWORD           dwClipIntersection;
    DWORD           dwClipUnion;    /* Union of all clip flags */
    D3DRECT         drExtent;       /* Extent of transformed vertices */
} D3DTRANSFORMDATA, *LPD3DTRANSFORMDATA;

/*
 * Structure defining position and direction properties for lighting.
 */
typedef struct _D3DLIGHTINGELEMENT {
    D3DVECTOR dvPosition;           /* Lightable point in model space */
    D3DVECTOR dvNormal;             /* Normalised unit vector */
} D3DLIGHTINGELEMENT, *LPD3DLIGHTINGELEMENT;

/*
 * Structure defining material properties for lighting.
 */
typedef struct _D3DMATERIAL {
    DWORD           dwSize;
    union {
    D3DCOLORVALUE   diffuse;        /* Diffuse color RGBA */
    D3DCOLORVALUE   dcvDiffuse;
    };
    union {
    D3DCOLORVALUE   ambient;        /* Ambient color RGB */
    D3DCOLORVALUE   dcvAmbient;
    };
    union {
    D3DCOLORVALUE   specular;       /* Specular 'shininess' */
    D3DCOLORVALUE   dcvSpecular;
    };
    union {
    D3DCOLORVALUE   emissive;       /* Emissive color RGB */
    D3DCOLORVALUE   dcvEmissive;
    };
    union {
    D3DVALUE        power;          /* Sharpness if specular highlight */
    D3DVALUE        dvPower;
    };
    D3DTEXTUREHANDLE    hTexture;       /* Handle to texture map */
    DWORD           dwRampSize;
} D3DMATERIAL, *LPD3DMATERIAL;

#if(DIRECT3D_VERSION >= 0x0700)

typedef struct _D3DMATERIAL7 {
    union {
    D3DCOLORVALUE   diffuse;        /* Diffuse color RGBA */
    D3DCOLORVALUE   dcvDiffuse;
    };
    union {
    D3DCOLORVALUE   ambient;        /* Ambient color RGB */
    D3DCOLORVALUE   dcvAmbient;
    };
    union {
    D3DCOLORVALUE   specular;       /* Specular 'shininess' */
    D3DCOLORVALUE   dcvSpecular;
    };
    union {
    D3DCOLORVALUE   emissive;       /* Emissive color RGB */
    D3DCOLORVALUE   dcvEmissive;
    };
    union {
    D3DVALUE        power;          /* Sharpness if specular highlight */
    D3DVALUE        dvPower;
    };
} D3DMATERIAL7, *LPD3DMATERIAL7;

#endif /* DIRECT3D_VERSION >= 0x0700 */

#if(DIRECT3D_VERSION < 0x0800)

typedef enum _D3DLIGHTTYPE {
    D3DLIGHT_POINT          = 1,
    D3DLIGHT_SPOT           = 2,
    D3DLIGHT_DIRECTIONAL    = 3,
// Note: The following light type (D3DLIGHT_PARALLELPOINT)
// is no longer supported from D3D for DX7 onwards.
    D3DLIGHT_PARALLELPOINT  = 4,
#if(DIRECT3D_VERSION < 0x0500) // For backward compatible headers
    D3DLIGHT_GLSPOT         = 5,
#endif
    D3DLIGHT_FORCE_DWORD    = 0x7fffffff, /* force 32-bit size enum */
} D3DLIGHTTYPE;

#else
typedef enum _D3DLIGHTTYPE D3DLIGHTTYPE;
#define D3DLIGHT_PARALLELPOINT  (D3DLIGHTTYPE)4
#define D3DLIGHT_GLSPOT         (D3DLIGHTTYPE)5

#endif //(DIRECT3D_VERSION < 0x0800)

/*
 * Structure defining a light source and its properties.
 */
typedef struct _D3DLIGHT {
    DWORD           dwSize;
    D3DLIGHTTYPE    dltType;            /* Type of light source */
    D3DCOLORVALUE   dcvColor;           /* Color of light */
    D3DVECTOR       dvPosition;         /* Position in world space */
    D3DVECTOR       dvDirection;        /* Direction in world space */
    D3DVALUE        dvRange;            /* Cutoff range */
    D3DVALUE        dvFalloff;          /* Falloff */
    D3DVALUE        dvAttenuation0;     /* Constant attenuation */
    D3DVALUE        dvAttenuation1;     /* Linear attenuation */
    D3DVALUE        dvAttenuation2;     /* Quadratic attenuation */
    D3DVALUE        dvTheta;            /* Inner angle of spotlight cone */
    D3DVALUE        dvPhi;              /* Outer angle of spotlight cone */
} D3DLIGHT, *LPD3DLIGHT;

#if(DIRECT3D_VERSION >= 0x0700)

typedef struct _D3DLIGHT7 {
    D3DLIGHTTYPE    dltType;            /* Type of light source */
    D3DCOLORVALUE   dcvDiffuse;         /* Diffuse color of light */
    D3DCOLORVALUE   dcvSpecular;        /* Specular color of light */
    D3DCOLORVALUE   dcvAmbient;         /* Ambient color of light */
    D3DVECTOR       dvPosition;         /* Position in world space */
    D3DVECTOR       dvDirection;        /* Direction in world space */
    D3DVALUE        dvRange;            /* Cutoff range */
    D3DVALUE        dvFalloff;          /* Falloff */
    D3DVALUE        dvAttenuation0;     /* Constant attenuation */
    D3DVALUE        dvAttenuation1;     /* Linear attenuation */
    D3DVALUE        dvAttenuation2;     /* Quadratic attenuation */
    D3DVALUE        dvTheta;            /* Inner angle of spotlight cone */
    D3DVALUE        dvPhi;              /* Outer angle of spotlight cone */
} D3DLIGHT7, *LPD3DLIGHT7;

#endif /* DIRECT3D_VERSION >= 0x0700 */

#if(DIRECT3D_VERSION >= 0x0500)
/*
 * Structure defining a light source and its properties.
 */

/* flags bits */
#define D3DLIGHT_ACTIVE         0x00000001
#define D3DLIGHT_NO_SPECULAR    0x00000002
#define D3DLIGHT_ALL (D3DLIGHT_ACTIVE | D3DLIGHT_NO_SPECULAR)

/* maximum valid light range */
#define D3DLIGHT_RANGE_MAX      ((float)sqrt(FLT_MAX))

typedef struct _D3DLIGHT2 {
    DWORD           dwSize;
    D3DLIGHTTYPE    dltType;        /* Type of light source */
    D3DCOLORVALUE   dcvColor;       /* Color of light */
    D3DVECTOR       dvPosition;     /* Position in world space */
    D3DVECTOR       dvDirection;    /* Direction in world space */
    D3DVALUE        dvRange;        /* Cutoff range */
    D3DVALUE        dvFalloff;      /* Falloff */
    D3DVALUE        dvAttenuation0; /* Constant attenuation */
    D3DVALUE        dvAttenuation1; /* Linear attenuation */
    D3DVALUE        dvAttenuation2; /* Quadratic attenuation */
    D3DVALUE        dvTheta;        /* Inner angle of spotlight cone */
    D3DVALUE        dvPhi;          /* Outer angle of spotlight cone */
    DWORD           dwFlags;
} D3DLIGHT2, *LPD3DLIGHT2;

#endif /* DIRECT3D_VERSION >= 0x0500 */
typedef struct _D3DLIGHTDATA {
    DWORD                dwSize;
    LPD3DLIGHTINGELEMENT lpIn;      /* Input positions and normals */
    DWORD                dwInSize;  /* Stride of input elements */
    LPD3DTLVERTEX        lpOut;     /* Output colors */
    DWORD                dwOutSize; /* Stride of output colors */
} D3DLIGHTDATA, *LPD3DLIGHTDATA;

#if(DIRECT3D_VERSION >= 0x0500)
/*
 * Before DX5, these values were in an enum called
 * D3DCOLORMODEL. This was not correct, since they are
 * bit flags. A driver can surface either or both flags
 * in the dcmColorModel member of D3DDEVICEDESC.
 */
#define D3DCOLOR_MONO   1
#define D3DCOLOR_RGB    2

typedef DWORD D3DCOLORMODEL;
#endif /* DIRECT3D_VERSION >= 0x0500 */

/*
 * Options for clearing
 */
#define D3DCLEAR_TARGET            0x00000001l  /* Clear target surface */
#define D3DCLEAR_ZBUFFER           0x00000002l  /* Clear target z buffer */
#if(DIRECT3D_VERSION >= 0x0600)
#define D3DCLEAR_STENCIL           0x00000004l  /* Clear stencil planes */
#endif /* DIRECT3D_VERSION >= 0x0600 */

/*
 * Execute buffers are allocated via Direct3D.  These buffers may then
 * be filled by the application with instructions to execute along with
 * vertex data.
 */

/*
 * Supported op codes for execute instructions.
 */
typedef enum _D3DOPCODE {
    D3DOP_POINT                 = 1,
    D3DOP_LINE                  = 2,
    D3DOP_TRIANGLE      = 3,
    D3DOP_MATRIXLOAD        = 4,
    D3DOP_MATRIXMULTIPLY    = 5,
    D3DOP_STATETRANSFORM        = 6,
    D3DOP_STATELIGHT        = 7,
    D3DOP_STATERENDER       = 8,
    D3DOP_PROCESSVERTICES       = 9,
    D3DOP_TEXTURELOAD       = 10,
    D3DOP_EXIT                  = 11,
    D3DOP_BRANCHFORWARD     = 12,
    D3DOP_SPAN          = 13,
    D3DOP_SETSTATUS     = 14,
#if(DIRECT3D_VERSION >= 0x0500)
    D3DOP_FORCE_DWORD           = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DOPCODE;

typedef struct _D3DINSTRUCTION {
    BYTE bOpcode;   /* Instruction opcode */
    BYTE bSize;     /* Size of each instruction data unit */
    WORD wCount;    /* Count of instruction data units to follow */
} D3DINSTRUCTION, *LPD3DINSTRUCTION;

/*
 * Structure for texture loads
 */
typedef struct _D3DTEXTURELOAD {
    D3DTEXTUREHANDLE hDestTexture;
    D3DTEXTUREHANDLE hSrcTexture;
} D3DTEXTURELOAD, *LPD3DTEXTURELOAD;

/*
 * Structure for picking
 */
typedef struct _D3DPICKRECORD {
    BYTE     bOpcode;
    BYTE     bPad;
    DWORD    dwOffset;
    D3DVALUE dvZ;
} D3DPICKRECORD, *LPD3DPICKRECORD;

/*
 * The following defines the rendering states which can be set in the
 * execute buffer.
 */

#if(DIRECT3D_VERSION < 0x0800)

typedef enum _D3DSHADEMODE {
    D3DSHADE_FLAT              = 1,
    D3DSHADE_GOURAUD           = 2,
    D3DSHADE_PHONG             = 3,
#if(DIRECT3D_VERSION >= 0x0500)
    D3DSHADE_FORCE_DWORD       = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DSHADEMODE;

typedef enum _D3DFILLMODE {
    D3DFILL_POINT          = 1,
    D3DFILL_WIREFRAME          = 2,
    D3DFILL_SOLID          = 3,
#if(DIRECT3D_VERSION >= 0x0500)
    D3DFILL_FORCE_DWORD        = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DFILLMODE;

typedef struct _D3DLINEPATTERN {
    WORD    wRepeatFactor;
    WORD    wLinePattern;
} D3DLINEPATTERN;

#endif //(DIRECT3D_VERSION < 0x0800)

typedef enum _D3DTEXTUREFILTER {
    D3DFILTER_NEAREST          = 1,
    D3DFILTER_LINEAR           = 2,
    D3DFILTER_MIPNEAREST       = 3,
    D3DFILTER_MIPLINEAR        = 4,
    D3DFILTER_LINEARMIPNEAREST = 5,
    D3DFILTER_LINEARMIPLINEAR  = 6,
#if(DIRECT3D_VERSION >= 0x0500)
    D3DFILTER_FORCE_DWORD      = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DTEXTUREFILTER;

#if(DIRECT3D_VERSION < 0x0800)

typedef enum _D3DBLEND {
    D3DBLEND_ZERO              = 1,
    D3DBLEND_ONE               = 2,
    D3DBLEND_SRCCOLOR          = 3,
    D3DBLEND_INVSRCCOLOR       = 4,
    D3DBLEND_SRCALPHA          = 5,
    D3DBLEND_INVSRCALPHA       = 6,
    D3DBLEND_DESTALPHA         = 7,
    D3DBLEND_INVDESTALPHA      = 8,
    D3DBLEND_DESTCOLOR         = 9,
    D3DBLEND_INVDESTCOLOR      = 10,
    D3DBLEND_SRCALPHASAT       = 11,
    D3DBLEND_BOTHSRCALPHA      = 12,
    D3DBLEND_BOTHINVSRCALPHA   = 13,
#if(DIRECT3D_VERSION >= 0x0500)
    D3DBLEND_FORCE_DWORD       = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DBLEND;

#endif //(DIRECT3D_VERSION < 0x0800)

typedef enum _D3DTEXTUREBLEND {
    D3DTBLEND_DECAL            = 1,
    D3DTBLEND_MODULATE         = 2,
    D3DTBLEND_DECALALPHA       = 3,
    D3DTBLEND_MODULATEALPHA    = 4,
    D3DTBLEND_DECALMASK        = 5,
    D3DTBLEND_MODULATEMASK     = 6,
    D3DTBLEND_COPY             = 7,
#if(DIRECT3D_VERSION >= 0x0500)
    D3DTBLEND_ADD              = 8,
    D3DTBLEND_FORCE_DWORD      = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DTEXTUREBLEND;

#if(DIRECT3D_VERSION < 0x0800)

typedef enum _D3DTEXTUREADDRESS {
    D3DTADDRESS_WRAP           = 1,
    D3DTADDRESS_MIRROR         = 2,
    D3DTADDRESS_CLAMP          = 3,
#if(DIRECT3D_VERSION >= 0x0500)
    D3DTADDRESS_BORDER         = 4,
    D3DTADDRESS_FORCE_DWORD    = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DTEXTUREADDRESS;

typedef enum _D3DCULL {
    D3DCULL_NONE               = 1,
    D3DCULL_CW                 = 2,
    D3DCULL_CCW                = 3,
#if(DIRECT3D_VERSION >= 0x0500)
    D3DCULL_FORCE_DWORD        = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DCULL;

typedef enum _D3DCMPFUNC {
    D3DCMP_NEVER               = 1,
    D3DCMP_LESS                = 2,
    D3DCMP_EQUAL               = 3,
    D3DCMP_LESSEQUAL           = 4,
    D3DCMP_GREATER             = 5,
    D3DCMP_NOTEQUAL            = 6,
    D3DCMP_GREATEREQUAL        = 7,
    D3DCMP_ALWAYS              = 8,
#if(DIRECT3D_VERSION >= 0x0500)
    D3DCMP_FORCE_DWORD         = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DCMPFUNC;

#if(DIRECT3D_VERSION >= 0x0600)
typedef enum _D3DSTENCILOP {
    D3DSTENCILOP_KEEP           = 1,
    D3DSTENCILOP_ZERO           = 2,
    D3DSTENCILOP_REPLACE        = 3,
    D3DSTENCILOP_INCRSAT        = 4,
    D3DSTENCILOP_DECRSAT        = 5,
    D3DSTENCILOP_INVERT         = 6,
    D3DSTENCILOP_INCR           = 7,
    D3DSTENCILOP_DECR           = 8,
    D3DSTENCILOP_FORCE_DWORD    = 0x7fffffff, /* force 32-bit size enum */
} D3DSTENCILOP;
#endif /* DIRECT3D_VERSION >= 0x0600 */

typedef enum _D3DFOGMODE {
    D3DFOG_NONE                = 0,
    D3DFOG_EXP                 = 1,
    D3DFOG_EXP2                = 2,
#if(DIRECT3D_VERSION >= 0x0500)
    D3DFOG_LINEAR              = 3,
    D3DFOG_FORCE_DWORD         = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DFOGMODE;

#if(DIRECT3D_VERSION >= 0x0600)
typedef enum _D3DZBUFFERTYPE {
    D3DZB_FALSE                 = 0,
    D3DZB_TRUE                  = 1, // Z buffering
    D3DZB_USEW                  = 2, // W buffering
    D3DZB_FORCE_DWORD           = 0x7fffffff, /* force 32-bit size enum */
} D3DZBUFFERTYPE;
#endif /* DIRECT3D_VERSION >= 0x0600 */

#endif //(DIRECT3D_VERSION < 0x0800)

#if(DIRECT3D_VERSION >= 0x0500)
typedef enum _D3DANTIALIASMODE {
    D3DANTIALIAS_NONE          = 0,
    D3DANTIALIAS_SORTDEPENDENT = 1,
    D3DANTIALIAS_SORTINDEPENDENT = 2,
    D3DANTIALIAS_FORCE_DWORD   = 0x7fffffff, /* force 32-bit size enum */
} D3DANTIALIASMODE;

// Vertex types supported by Direct3D
typedef enum _D3DVERTEXTYPE {
    D3DVT_VERTEX        = 1,
    D3DVT_LVERTEX       = 2,
    D3DVT_TLVERTEX      = 3,
    D3DVT_FORCE_DWORD   = 0x7fffffff, /* force 32-bit size enum */
} D3DVERTEXTYPE;

#if(DIRECT3D_VERSION < 0x0800)

// Primitives supported by draw-primitive API
typedef enum _D3DPRIMITIVETYPE {
    D3DPT_POINTLIST     = 1,
    D3DPT_LINELIST      = 2,
    D3DPT_LINESTRIP     = 3,
    D3DPT_TRIANGLELIST  = 4,
    D3DPT_TRIANGLESTRIP = 5,
    D3DPT_TRIANGLEFAN   = 6,
    D3DPT_FORCE_DWORD   = 0x7fffffff, /* force 32-bit size enum */
} D3DPRIMITIVETYPE;

#endif //(DIRECT3D_VERSION < 0x0800)

#endif /* DIRECT3D_VERSION >= 0x0500 */
/*
 * Amount to add to a state to generate the override for that state.
 */
#define D3DSTATE_OVERRIDE_BIAS      256

/*
 * A state which sets the override flag for the specified state type.
 */
#define D3DSTATE_OVERRIDE(type) (D3DRENDERSTATETYPE)(((DWORD) (type) + D3DSTATE_OVERRIDE_BIAS))

#if(DIRECT3D_VERSION < 0x0800)

typedef enum _D3DTRANSFORMSTATETYPE {
    D3DTRANSFORMSTATE_WORLD         = 1,
    D3DTRANSFORMSTATE_VIEW          = 2,
    D3DTRANSFORMSTATE_PROJECTION    = 3,
#if(DIRECT3D_VERSION >= 0x0700)
    D3DTRANSFORMSTATE_WORLD1        = 4,  // 2nd matrix to blend
    D3DTRANSFORMSTATE_WORLD2        = 5,  // 3rd matrix to blend
    D3DTRANSFORMSTATE_WORLD3        = 6,  // 4th matrix to blend
    D3DTRANSFORMSTATE_TEXTURE0      = 16,
    D3DTRANSFORMSTATE_TEXTURE1      = 17,
    D3DTRANSFORMSTATE_TEXTURE2      = 18,
    D3DTRANSFORMSTATE_TEXTURE3      = 19,
    D3DTRANSFORMSTATE_TEXTURE4      = 20,
    D3DTRANSFORMSTATE_TEXTURE5      = 21,
    D3DTRANSFORMSTATE_TEXTURE6      = 22,
    D3DTRANSFORMSTATE_TEXTURE7      = 23,
#endif /* DIRECT3D_VERSION >= 0x0700 */
#if(DIRECT3D_VERSION >= 0x0500)
    D3DTRANSFORMSTATE_FORCE_DWORD     = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DTRANSFORMSTATETYPE;

#else

//
// legacy transform state names
//
typedef enum _D3DTRANSFORMSTATETYPE D3DTRANSFORMSTATETYPE;
#define D3DTRANSFORMSTATE_WORLD         (D3DTRANSFORMSTATETYPE)1
#define D3DTRANSFORMSTATE_VIEW          (D3DTRANSFORMSTATETYPE)2
#define D3DTRANSFORMSTATE_PROJECTION    (D3DTRANSFORMSTATETYPE)3
#define D3DTRANSFORMSTATE_WORLD1        (D3DTRANSFORMSTATETYPE)4
#define D3DTRANSFORMSTATE_WORLD2        (D3DTRANSFORMSTATETYPE)5
#define D3DTRANSFORMSTATE_WORLD3        (D3DTRANSFORMSTATETYPE)6
#define D3DTRANSFORMSTATE_TEXTURE0      (D3DTRANSFORMSTATETYPE)16
#define D3DTRANSFORMSTATE_TEXTURE1      (D3DTRANSFORMSTATETYPE)17
#define D3DTRANSFORMSTATE_TEXTURE2      (D3DTRANSFORMSTATETYPE)18
#define D3DTRANSFORMSTATE_TEXTURE3      (D3DTRANSFORMSTATETYPE)19
#define D3DTRANSFORMSTATE_TEXTURE4      (D3DTRANSFORMSTATETYPE)20
#define D3DTRANSFORMSTATE_TEXTURE5      (D3DTRANSFORMSTATETYPE)21
#define D3DTRANSFORMSTATE_TEXTURE6      (D3DTRANSFORMSTATETYPE)22
#define D3DTRANSFORMSTATE_TEXTURE7      (D3DTRANSFORMSTATETYPE)23

#endif //(DIRECT3D_VERSION < 0x0800)

typedef enum _D3DLIGHTSTATETYPE {
    D3DLIGHTSTATE_MATERIAL          = 1,
    D3DLIGHTSTATE_AMBIENT           = 2,
    D3DLIGHTSTATE_COLORMODEL        = 3,
    D3DLIGHTSTATE_FOGMODE           = 4,
    D3DLIGHTSTATE_FOGSTART          = 5,
    D3DLIGHTSTATE_FOGEND            = 6,
    D3DLIGHTSTATE_FOGDENSITY        = 7,
#if(DIRECT3D_VERSION >= 0x0600)
    D3DLIGHTSTATE_COLORVERTEX       = 8,
#endif /* DIRECT3D_VERSION >= 0x0600 */
#if(DIRECT3D_VERSION >= 0x0500)
    D3DLIGHTSTATE_FORCE_DWORD         = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DLIGHTSTATETYPE;

#if(DIRECT3D_VERSION < 0x0800)

typedef enum _D3DRENDERSTATETYPE {
    D3DRENDERSTATE_ANTIALIAS          = 2,    /* D3DANTIALIASMODE */
    D3DRENDERSTATE_TEXTUREPERSPECTIVE = 4,    /* TRUE for perspective correction */
    D3DRENDERSTATE_ZENABLE            = 7,    /* D3DZBUFFERTYPE (or TRUE/FALSE for legacy) */
    D3DRENDERSTATE_FILLMODE           = 8,    /* D3DFILL_MODE        */
    D3DRENDERSTATE_SHADEMODE          = 9,    /* D3DSHADEMODE */
    D3DRENDERSTATE_LINEPATTERN        = 10,   /* D3DLINEPATTERN */
    D3DRENDERSTATE_ZWRITEENABLE       = 14,   /* TRUE to enable z writes */
    D3DRENDERSTATE_ALPHATESTENABLE    = 15,   /* TRUE to enable alpha tests */
    D3DRENDERSTATE_LASTPIXEL          = 16,   /* TRUE for last-pixel on lines */
    D3DRENDERSTATE_SRCBLEND           = 19,   /* D3DBLEND */
    D3DRENDERSTATE_DESTBLEND          = 20,   /* D3DBLEND */
    D3DRENDERSTATE_CULLMODE           = 22,   /* D3DCULL */
    D3DRENDERSTATE_ZFUNC              = 23,   /* D3DCMPFUNC */
    D3DRENDERSTATE_ALPHAREF           = 24,   /* D3DFIXED */
    D3DRENDERSTATE_ALPHAFUNC          = 25,   /* D3DCMPFUNC */
    D3DRENDERSTATE_DITHERENABLE       = 26,   /* TRUE to enable dithering */
#if(DIRECT3D_VERSION >= 0x0500)
    D3DRENDERSTATE_ALPHABLENDENABLE   = 27,   /* TRUE to enable alpha blending */
#endif /* DIRECT3D_VERSION >= 0x0500 */
    D3DRENDERSTATE_FOGENABLE          = 28,   /* TRUE to enable fog blending */
    D3DRENDERSTATE_SPECULARENABLE     = 29,   /* TRUE to enable specular */
    D3DRENDERSTATE_ZVISIBLE           = 30,   /* TRUE to enable z checking */
    D3DRENDERSTATE_STIPPLEDALPHA      = 33,   /* TRUE to enable stippled alpha (RGB device only) */
    D3DRENDERSTATE_FOGCOLOR           = 34,   /* D3DCOLOR */
    D3DRENDERSTATE_FOGTABLEMODE       = 35,   /* D3DFOGMODE */
#if(DIRECT3D_VERSION >= 0x0700)
    D3DRENDERSTATE_FOGSTART           = 36,   /* Fog start (for both vertex and pixel fog) */
    D3DRENDERSTATE_FOGEND             = 37,   /* Fog end      */
    D3DRENDERSTATE_FOGDENSITY         = 38,   /* Fog density  */
#endif /* DIRECT3D_VERSION >= 0x0700 */
#if(DIRECT3D_VERSION >= 0x0500)
    D3DRENDERSTATE_EDGEANTIALIAS      = 40,   /* TRUE to enable edge antialiasing */
    D3DRENDERSTATE_COLORKEYENABLE     = 41,   /* TRUE to enable source colorkeyed textures */
    D3DRENDERSTATE_ZBIAS              = 47,   /* LONG Z bias */
    D3DRENDERSTATE_RANGEFOGENABLE     = 48,   /* Enables range-based fog */
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)
    D3DRENDERSTATE_STENCILENABLE      = 52,   /* BOOL enable/disable stenciling */
    D3DRENDERSTATE_STENCILFAIL        = 53,   /* D3DSTENCILOP to do if stencil test fails */
    D3DRENDERSTATE_STENCILZFAIL       = 54,   /* D3DSTENCILOP to do if stencil test passes and Z test fails */
    D3DRENDERSTATE_STENCILPASS        = 55,   /* D3DSTENCILOP to do if both stencil and Z tests pass */
    D3DRENDERSTATE_STENCILFUNC        = 56,   /* D3DCMPFUNC fn.  Stencil Test passes if ((ref & mask) stencilfn (stencil & mask)) is true */
    D3DRENDERSTATE_STENCILREF         = 57,   /* Reference value used in stencil test */
    D3DRENDERSTATE_STENCILMASK        = 58,   /* Mask value used in stencil test */
    D3DRENDERSTATE_STENCILWRITEMASK   = 59,   /* Write mask applied to values written to stencil buffer */
    D3DRENDERSTATE_TEXTUREFACTOR      = 60,   /* D3DCOLOR used for multi-texture blend */
#endif /* DIRECT3D_VERSION >= 0x0600 */

#if(DIRECT3D_VERSION >= 0x0600)

    /*
     * 128 values [128, 255] are reserved for texture coordinate wrap flags.
     * These are constructed with the D3DWRAP_U and D3DWRAP_V macros. Using
     * a flags word preserves forward compatibility with texture coordinates
     * that are >2D.
     */
    D3DRENDERSTATE_WRAP0              = 128,  /* wrap for 1st texture coord. set */
    D3DRENDERSTATE_WRAP1              = 129,  /* wrap for 2nd texture coord. set */
    D3DRENDERSTATE_WRAP2              = 130,  /* wrap for 3rd texture coord. set */
    D3DRENDERSTATE_WRAP3              = 131,  /* wrap for 4th texture coord. set */
    D3DRENDERSTATE_WRAP4              = 132,  /* wrap for 5th texture coord. set */
    D3DRENDERSTATE_WRAP5              = 133,  /* wrap for 6th texture coord. set */
    D3DRENDERSTATE_WRAP6              = 134,  /* wrap for 7th texture coord. set */
    D3DRENDERSTATE_WRAP7              = 135,  /* wrap for 8th texture coord. set */
#endif /* DIRECT3D_VERSION >= 0x0600 */
#if(DIRECT3D_VERSION >= 0x0700)
    D3DRENDERSTATE_CLIPPING            = 136,
    D3DRENDERSTATE_LIGHTING            = 137,
    D3DRENDERSTATE_EXTENTS             = 138,
    D3DRENDERSTATE_AMBIENT             = 139,
    D3DRENDERSTATE_FOGVERTEXMODE       = 140,
    D3DRENDERSTATE_COLORVERTEX         = 141,
    D3DRENDERSTATE_LOCALVIEWER         = 142,
    D3DRENDERSTATE_NORMALIZENORMALS    = 143,
    D3DRENDERSTATE_COLORKEYBLENDENABLE = 144,
    D3DRENDERSTATE_DIFFUSEMATERIALSOURCE    = 145,
    D3DRENDERSTATE_SPECULARMATERIALSOURCE   = 146,
    D3DRENDERSTATE_AMBIENTMATERIALSOURCE    = 147,
    D3DRENDERSTATE_EMISSIVEMATERIALSOURCE   = 148,
    D3DRENDERSTATE_VERTEXBLEND              = 151,
    D3DRENDERSTATE_CLIPPLANEENABLE          = 152,

#endif /* DIRECT3D_VERSION >= 0x0700 */

//
// retired renderstates - not supported for DX7 interfaces
//
    D3DRENDERSTATE_TEXTUREHANDLE      = 1,    /* Texture handle for legacy interfaces (Texture,Texture2) */
    D3DRENDERSTATE_TEXTUREADDRESS     = 3,    /* D3DTEXTUREADDRESS  */
    D3DRENDERSTATE_WRAPU              = 5,    /* TRUE for wrapping in u */
    D3DRENDERSTATE_WRAPV              = 6,    /* TRUE for wrapping in v */
    D3DRENDERSTATE_MONOENABLE         = 11,   /* TRUE to enable mono rasterization */
    D3DRENDERSTATE_ROP2               = 12,   /* ROP2 */
    D3DRENDERSTATE_PLANEMASK          = 13,   /* DWORD physical plane mask */
    D3DRENDERSTATE_TEXTUREMAG         = 17,   /* D3DTEXTUREFILTER */
    D3DRENDERSTATE_TEXTUREMIN         = 18,   /* D3DTEXTUREFILTER */
    D3DRENDERSTATE_TEXTUREMAPBLEND    = 21,   /* D3DTEXTUREBLEND */
    D3DRENDERSTATE_SUBPIXEL           = 31,   /* TRUE to enable subpixel correction */
    D3DRENDERSTATE_SUBPIXELX          = 32,   /* TRUE to enable correction in X only */
    D3DRENDERSTATE_STIPPLEENABLE      = 39,   /* TRUE to enable stippling */
#if(DIRECT3D_VERSION >= 0x0500)
    D3DRENDERSTATE_BORDERCOLOR        = 43,   /* Border color for texturing w/border */
    D3DRENDERSTATE_TEXTUREADDRESSU    = 44,   /* Texture addressing mode for U coordinate */
    D3DRENDERSTATE_TEXTUREADDRESSV    = 45,   /* Texture addressing mode for V coordinate */
    D3DRENDERSTATE_MIPMAPLODBIAS      = 46,   /* D3DVALUE Mipmap LOD bias */
    D3DRENDERSTATE_ANISOTROPY         = 49,   /* Max. anisotropy. 1 = no anisotropy */
#endif /* DIRECT3D_VERSION >= 0x0500 */
    D3DRENDERSTATE_FLUSHBATCH         = 50,   /* Explicit flush for DP batching (DX5 Only) */
#if(DIRECT3D_VERSION >= 0x0600)
    D3DRENDERSTATE_TRANSLUCENTSORTINDEPENDENT=51, /* BOOL enable sort-independent transparency */
#endif /* DIRECT3D_VERSION >= 0x0600 */
    D3DRENDERSTATE_STIPPLEPATTERN00   = 64,   /* Stipple pattern 01...  */
    D3DRENDERSTATE_STIPPLEPATTERN01   = 65,
    D3DRENDERSTATE_STIPPLEPATTERN02   = 66,
    D3DRENDERSTATE_STIPPLEPATTERN03   = 67,
    D3DRENDERSTATE_STIPPLEPATTERN04   = 68,
    D3DRENDERSTATE_STIPPLEPATTERN05   = 69,
    D3DRENDERSTATE_STIPPLEPATTERN06   = 70,
    D3DRENDERSTATE_STIPPLEPATTERN07   = 71,
    D3DRENDERSTATE_STIPPLEPATTERN08   = 72,
    D3DRENDERSTATE_STIPPLEPATTERN09   = 73,
    D3DRENDERSTATE_STIPPLEPATTERN10   = 74,
    D3DRENDERSTATE_STIPPLEPATTERN11   = 75,
    D3DRENDERSTATE_STIPPLEPATTERN12   = 76,
    D3DRENDERSTATE_STIPPLEPATTERN13   = 77,
    D3DRENDERSTATE_STIPPLEPATTERN14   = 78,
    D3DRENDERSTATE_STIPPLEPATTERN15   = 79,
    D3DRENDERSTATE_STIPPLEPATTERN16   = 80,
    D3DRENDERSTATE_STIPPLEPATTERN17   = 81,
    D3DRENDERSTATE_STIPPLEPATTERN18   = 82,
    D3DRENDERSTATE_STIPPLEPATTERN19   = 83,
    D3DRENDERSTATE_STIPPLEPATTERN20   = 84,
    D3DRENDERSTATE_STIPPLEPATTERN21   = 85,
    D3DRENDERSTATE_STIPPLEPATTERN22   = 86,
    D3DRENDERSTATE_STIPPLEPATTERN23   = 87,
    D3DRENDERSTATE_STIPPLEPATTERN24   = 88,
    D3DRENDERSTATE_STIPPLEPATTERN25   = 89,
    D3DRENDERSTATE_STIPPLEPATTERN26   = 90,
    D3DRENDERSTATE_STIPPLEPATTERN27   = 91,
    D3DRENDERSTATE_STIPPLEPATTERN28   = 92,
    D3DRENDERSTATE_STIPPLEPATTERN29   = 93,
    D3DRENDERSTATE_STIPPLEPATTERN30   = 94,
    D3DRENDERSTATE_STIPPLEPATTERN31   = 95,

//
// retired renderstate names - the values are still used under new naming conventions
//
    D3DRENDERSTATE_FOGTABLESTART      = 36,   /* Fog table start    */
    D3DRENDERSTATE_FOGTABLEEND        = 37,   /* Fog table end      */
    D3DRENDERSTATE_FOGTABLEDENSITY    = 38,   /* Fog table density  */

#if(DIRECT3D_VERSION >= 0x0500)
    D3DRENDERSTATE_FORCE_DWORD        = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DRENDERSTATETYPE;

#else

typedef enum _D3DRENDERSTATETYPE D3DRENDERSTATETYPE;

//
// legacy renderstate names
//
#define D3DRENDERSTATE_TEXTUREPERSPECTIVE       (D3DRENDERSTATETYPE)4
#define D3DRENDERSTATE_ZENABLE                  (D3DRENDERSTATETYPE)7
#define D3DRENDERSTATE_FILLMODE                 (D3DRENDERSTATETYPE)8
#define D3DRENDERSTATE_SHADEMODE                (D3DRENDERSTATETYPE)9
#define D3DRENDERSTATE_LINEPATTERN              (D3DRENDERSTATETYPE)10
#define D3DRENDERSTATE_ZWRITEENABLE             (D3DRENDERSTATETYPE)14
#define D3DRENDERSTATE_ALPHATESTENABLE          (D3DRENDERSTATETYPE)15
#define D3DRENDERSTATE_LASTPIXEL                (D3DRENDERSTATETYPE)16
#define D3DRENDERSTATE_SRCBLEND                 (D3DRENDERSTATETYPE)19
#define D3DRENDERSTATE_DESTBLEND                (D3DRENDERSTATETYPE)20
#define D3DRENDERSTATE_CULLMODE                 (D3DRENDERSTATETYPE)22
#define D3DRENDERSTATE_ZFUNC                    (D3DRENDERSTATETYPE)23
#define D3DRENDERSTATE_ALPHAREF                 (D3DRENDERSTATETYPE)24
#define D3DRENDERSTATE_ALPHAFUNC                (D3DRENDERSTATETYPE)25
#define D3DRENDERSTATE_DITHERENABLE             (D3DRENDERSTATETYPE)26
#define D3DRENDERSTATE_ALPHABLENDENABLE         (D3DRENDERSTATETYPE)27
#define D3DRENDERSTATE_FOGENABLE                (D3DRENDERSTATETYPE)28
#define D3DRENDERSTATE_SPECULARENABLE           (D3DRENDERSTATETYPE)29
#define D3DRENDERSTATE_ZVISIBLE                 (D3DRENDERSTATETYPE)30
#define D3DRENDERSTATE_STIPPLEDALPHA            (D3DRENDERSTATETYPE)33
#define D3DRENDERSTATE_FOGCOLOR                 (D3DRENDERSTATETYPE)34
#define D3DRENDERSTATE_FOGTABLEMODE             (D3DRENDERSTATETYPE)35
#define D3DRENDERSTATE_FOGSTART                 (D3DRENDERSTATETYPE)36
#define D3DRENDERSTATE_FOGEND                   (D3DRENDERSTATETYPE)37
#define D3DRENDERSTATE_FOGDENSITY               (D3DRENDERSTATETYPE)38
#define D3DRENDERSTATE_EDGEANTIALIAS            (D3DRENDERSTATETYPE)40
#define D3DRENDERSTATE_ZBIAS                    (D3DRENDERSTATETYPE)47
#define D3DRENDERSTATE_RANGEFOGENABLE           (D3DRENDERSTATETYPE)48
#define D3DRENDERSTATE_STENCILENABLE            (D3DRENDERSTATETYPE)52
#define D3DRENDERSTATE_STENCILFAIL              (D3DRENDERSTATETYPE)53
#define D3DRENDERSTATE_STENCILZFAIL             (D3DRENDERSTATETYPE)54
#define D3DRENDERSTATE_STENCILPASS              (D3DRENDERSTATETYPE)55
#define D3DRENDERSTATE_STENCILFUNC              (D3DRENDERSTATETYPE)56
#define D3DRENDERSTATE_STENCILREF               (D3DRENDERSTATETYPE)57
#define D3DRENDERSTATE_STENCILMASK              (D3DRENDERSTATETYPE)58
#define D3DRENDERSTATE_STENCILWRITEMASK         (D3DRENDERSTATETYPE)59
#define D3DRENDERSTATE_TEXTUREFACTOR            (D3DRENDERSTATETYPE)60
#define D3DRENDERSTATE_WRAP0                    (D3DRENDERSTATETYPE)128
#define D3DRENDERSTATE_WRAP1                    (D3DRENDERSTATETYPE)129
#define D3DRENDERSTATE_WRAP2                    (D3DRENDERSTATETYPE)130
#define D3DRENDERSTATE_WRAP3                    (D3DRENDERSTATETYPE)131
#define D3DRENDERSTATE_WRAP4                    (D3DRENDERSTATETYPE)132
#define D3DRENDERSTATE_WRAP5                    (D3DRENDERSTATETYPE)133
#define D3DRENDERSTATE_WRAP6                    (D3DRENDERSTATETYPE)134
#define D3DRENDERSTATE_WRAP7                    (D3DRENDERSTATETYPE)135

#define D3DRENDERSTATE_CLIPPING                 (D3DRENDERSTATETYPE)136
#define D3DRENDERSTATE_LIGHTING                 (D3DRENDERSTATETYPE)137
#define D3DRENDERSTATE_EXTENTS                  (D3DRENDERSTATETYPE)138
#define D3DRENDERSTATE_AMBIENT                  (D3DRENDERSTATETYPE)139
#define D3DRENDERSTATE_FOGVERTEXMODE            (D3DRENDERSTATETYPE)140
#define D3DRENDERSTATE_COLORVERTEX              (D3DRENDERSTATETYPE)141
#define D3DRENDERSTATE_LOCALVIEWER              (D3DRENDERSTATETYPE)142
#define D3DRENDERSTATE_NORMALIZENORMALS         (D3DRENDERSTATETYPE)143
#define D3DRENDERSTATE_COLORKEYBLENDENABLE      (D3DRENDERSTATETYPE)144
#define D3DRENDERSTATE_DIFFUSEMATERIALSOURCE    (D3DRENDERSTATETYPE)145
#define D3DRENDERSTATE_SPECULARMATERIALSOURCE   (D3DRENDERSTATETYPE)146
#define D3DRENDERSTATE_AMBIENTMATERIALSOURCE    (D3DRENDERSTATETYPE)147
#define D3DRENDERSTATE_EMISSIVEMATERIALSOURCE   (D3DRENDERSTATETYPE)148
#define D3DRENDERSTATE_VERTEXBLEND              (D3DRENDERSTATETYPE)151
#define D3DRENDERSTATE_CLIPPLANEENABLE          (D3DRENDERSTATETYPE)152

//
// retired renderstates - not supported for DX7 interfaces
//
#define D3DRENDERSTATE_TEXTUREHANDLE     (D3DRENDERSTATETYPE)1
#define D3DRENDERSTATE_ANTIALIAS         (D3DRENDERSTATETYPE)2
#define D3DRENDERSTATE_TEXTUREADDRESS    (D3DRENDERSTATETYPE)3
#define D3DRENDERSTATE_WRAPU             (D3DRENDERSTATETYPE)5
#define D3DRENDERSTATE_WRAPV             (D3DRENDERSTATETYPE)6
#define D3DRENDERSTATE_MONOENABLE        (D3DRENDERSTATETYPE)11
#define D3DRENDERSTATE_ROP2              (D3DRENDERSTATETYPE)12
#define D3DRENDERSTATE_PLANEMASK         (D3DRENDERSTATETYPE)13
#define D3DRENDERSTATE_TEXTUREMAG        (D3DRENDERSTATETYPE)17
#define D3DRENDERSTATE_TEXTUREMIN        (D3DRENDERSTATETYPE)18
#define D3DRENDERSTATE_TEXTUREMAPBLEND   (D3DRENDERSTATETYPE)21
#define D3DRENDERSTATE_SUBPIXEL          (D3DRENDERSTATETYPE)31
#define D3DRENDERSTATE_SUBPIXELX         (D3DRENDERSTATETYPE)32
#define D3DRENDERSTATE_STIPPLEENABLE     (D3DRENDERSTATETYPE)39
#define D3DRENDERSTATE_OLDALPHABLENDENABLE  (D3DRENDERSTATETYPE)42
#define D3DRENDERSTATE_BORDERCOLOR       (D3DRENDERSTATETYPE)43
#define D3DRENDERSTATE_TEXTUREADDRESSU   (D3DRENDERSTATETYPE)44
#define D3DRENDERSTATE_TEXTUREADDRESSV   (D3DRENDERSTATETYPE)45
#define D3DRENDERSTATE_MIPMAPLODBIAS     (D3DRENDERSTATETYPE)46
#define D3DRENDERSTATE_ANISOTROPY        (D3DRENDERSTATETYPE)49
#define D3DRENDERSTATE_FLUSHBATCH        (D3DRENDERSTATETYPE)50
#define D3DRENDERSTATE_TRANSLUCENTSORTINDEPENDENT (D3DRENDERSTATETYPE)51
#define D3DRENDERSTATE_STIPPLEPATTERN00  (D3DRENDERSTATETYPE)64
#define D3DRENDERSTATE_STIPPLEPATTERN01  (D3DRENDERSTATETYPE)65
#define D3DRENDERSTATE_STIPPLEPATTERN02  (D3DRENDERSTATETYPE)66
#define D3DRENDERSTATE_STIPPLEPATTERN03  (D3DRENDERSTATETYPE)67
#define D3DRENDERSTATE_STIPPLEPATTERN04  (D3DRENDERSTATETYPE)68
#define D3DRENDERSTATE_STIPPLEPATTERN05  (D3DRENDERSTATETYPE)69
#define D3DRENDERSTATE_STIPPLEPATTERN06  (D3DRENDERSTATETYPE)70
#define D3DRENDERSTATE_STIPPLEPATTERN07  (D3DRENDERSTATETYPE)71
#define D3DRENDERSTATE_STIPPLEPATTERN08  (D3DRENDERSTATETYPE)72
#define D3DRENDERSTATE_STIPPLEPATTERN09  (D3DRENDERSTATETYPE)73
#define D3DRENDERSTATE_STIPPLEPATTERN10  (D3DRENDERSTATETYPE)74
#define D3DRENDERSTATE_STIPPLEPATTERN11  (D3DRENDERSTATETYPE)75
#define D3DRENDERSTATE_STIPPLEPATTERN12  (D3DRENDERSTATETYPE)76
#define D3DRENDERSTATE_STIPPLEPATTERN13  (D3DRENDERSTATETYPE)77
#define D3DRENDERSTATE_STIPPLEPATTERN14  (D3DRENDERSTATETYPE)78
#define D3DRENDERSTATE_STIPPLEPATTERN15  (D3DRENDERSTATETYPE)79
#define D3DRENDERSTATE_STIPPLEPATTERN16  (D3DRENDERSTATETYPE)80
#define D3DRENDERSTATE_STIPPLEPATTERN17  (D3DRENDERSTATETYPE)81
#define D3DRENDERSTATE_STIPPLEPATTERN18  (D3DRENDERSTATETYPE)82
#define D3DRENDERSTATE_STIPPLEPATTERN19  (D3DRENDERSTATETYPE)83
#define D3DRENDERSTATE_STIPPLEPATTERN20  (D3DRENDERSTATETYPE)84
#define D3DRENDERSTATE_STIPPLEPATTERN21  (D3DRENDERSTATETYPE)85
#define D3DRENDERSTATE_STIPPLEPATTERN22  (D3DRENDERSTATETYPE)86
#define D3DRENDERSTATE_STIPPLEPATTERN23  (D3DRENDERSTATETYPE)87
#define D3DRENDERSTATE_STIPPLEPATTERN24  (D3DRENDERSTATETYPE)88
#define D3DRENDERSTATE_STIPPLEPATTERN25  (D3DRENDERSTATETYPE)89
#define D3DRENDERSTATE_STIPPLEPATTERN26  (D3DRENDERSTATETYPE)90
#define D3DRENDERSTATE_STIPPLEPATTERN27  (D3DRENDERSTATETYPE)91
#define D3DRENDERSTATE_STIPPLEPATTERN28  (D3DRENDERSTATETYPE)92
#define D3DRENDERSTATE_STIPPLEPATTERN29  (D3DRENDERSTATETYPE)93
#define D3DRENDERSTATE_STIPPLEPATTERN30  (D3DRENDERSTATETYPE)94
#define D3DRENDERSTATE_STIPPLEPATTERN31  (D3DRENDERSTATETYPE)95

//
// retired renderstates - not supported for DX8 interfaces
//
#define D3DRENDERSTATE_COLORKEYENABLE        (D3DRENDERSTATETYPE)41
#define D3DRENDERSTATE_COLORKEYBLENDENABLE   (D3DRENDERSTATETYPE)144

//
// retired renderstate names - the values are still used under new naming conventions
//
#define D3DRENDERSTATE_BLENDENABLE       (D3DRENDERSTATETYPE)27
#define D3DRENDERSTATE_FOGTABLESTART     (D3DRENDERSTATETYPE)36
#define D3DRENDERSTATE_FOGTABLEEND       (D3DRENDERSTATETYPE)37
#define D3DRENDERSTATE_FOGTABLEDENSITY   (D3DRENDERSTATETYPE)38

#endif //(DIRECT3D_VERSION < 0x0800)


#if(DIRECT3D_VERSION < 0x0800)

// Values for material source
typedef enum _D3DMATERIALCOLORSOURCE
{
    D3DMCS_MATERIAL = 0,                // Color from material is used
    D3DMCS_COLOR1   = 1,                // Diffuse vertex color is used
    D3DMCS_COLOR2   = 2,                // Specular vertex color is used
    D3DMCS_FORCE_DWORD = 0x7fffffff,    // force 32-bit size enum
} D3DMATERIALCOLORSOURCE;


#if(DIRECT3D_VERSION >= 0x0500)
// For back-compatibility with legacy compilations
#define D3DRENDERSTATE_BLENDENABLE      D3DRENDERSTATE_ALPHABLENDENABLE
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)

// Bias to apply to the texture coordinate set to apply a wrap to.
#define D3DRENDERSTATE_WRAPBIAS                 128UL

/* Flags to construct the WRAP render states */
#define D3DWRAP_U   0x00000001L
#define D3DWRAP_V   0x00000002L

#endif /* DIRECT3D_VERSION >= 0x0600 */

#if(DIRECT3D_VERSION >= 0x0700)

/* Flags to construct the WRAP render states for 1D thru 4D texture coordinates */
#define D3DWRAPCOORD_0   0x00000001L    // same as D3DWRAP_U
#define D3DWRAPCOORD_1   0x00000002L    // same as D3DWRAP_V
#define D3DWRAPCOORD_2   0x00000004L
#define D3DWRAPCOORD_3   0x00000008L

#endif /* DIRECT3D_VERSION >= 0x0700 */

#endif //(DIRECT3D_VERSION < 0x0800)

#define D3DRENDERSTATE_STIPPLEPATTERN(y) (D3DRENDERSTATE_STIPPLEPATTERN00 + (y))

typedef struct _D3DSTATE {
    union {
#if(DIRECT3D_VERSION < 0x0800)
    D3DTRANSFORMSTATETYPE   dtstTransformStateType;
#endif //(DIRECT3D_VERSION < 0x0800)
    D3DLIGHTSTATETYPE   dlstLightStateType;
    D3DRENDERSTATETYPE  drstRenderStateType;
    };
    union {
    DWORD           dwArg[1];
    D3DVALUE        dvArg[1];
    };
} D3DSTATE, *LPD3DSTATE;


/*
 * Operation used to load matrices
 * hDstMat = hSrcMat
 */
typedef struct _D3DMATRIXLOAD {
    D3DMATRIXHANDLE hDestMatrix;   /* Destination matrix */
    D3DMATRIXHANDLE hSrcMatrix;   /* Source matrix */
} D3DMATRIXLOAD, *LPD3DMATRIXLOAD;

/*
 * Operation used to multiply matrices
 * hDstMat = hSrcMat1 * hSrcMat2
 */
typedef struct _D3DMATRIXMULTIPLY {
    D3DMATRIXHANDLE hDestMatrix;   /* Destination matrix */
    D3DMATRIXHANDLE hSrcMatrix1;  /* First source matrix */
    D3DMATRIXHANDLE hSrcMatrix2;  /* Second source matrix */
} D3DMATRIXMULTIPLY, *LPD3DMATRIXMULTIPLY;

/*
 * Operation used to transform and light vertices.
 */
typedef struct _D3DPROCESSVERTICES {
    DWORD        dwFlags;    /* Do we transform or light or just copy? */
    WORD         wStart;     /* Index to first vertex in source */
    WORD         wDest;      /* Index to first vertex in local buffer */
    DWORD        dwCount;    /* Number of vertices to be processed */
    DWORD    dwReserved; /* Must be zero */
} D3DPROCESSVERTICES, *LPD3DPROCESSVERTICES;

#define D3DPROCESSVERTICES_TRANSFORMLIGHT   0x00000000L
#define D3DPROCESSVERTICES_TRANSFORM        0x00000001L
#define D3DPROCESSVERTICES_COPY         0x00000002L
#define D3DPROCESSVERTICES_OPMASK       0x00000007L

#define D3DPROCESSVERTICES_UPDATEEXTENTS    0x00000008L
#define D3DPROCESSVERTICES_NOCOLOR      0x00000010L


#if(DIRECT3D_VERSION >= 0x0600)


#if(DIRECT3D_VERSION < 0x0800)

/*
 * State enumerants for per-stage texture processing.
 */
typedef enum _D3DTEXTURESTAGESTATETYPE
{
    D3DTSS_COLOROP        =  1, /* D3DTEXTUREOP - per-stage blending controls for color channels */
    D3DTSS_COLORARG1      =  2, /* D3DTA_* (texture arg) */
    D3DTSS_COLORARG2      =  3, /* D3DTA_* (texture arg) */
    D3DTSS_ALPHAOP        =  4, /* D3DTEXTUREOP - per-stage blending controls for alpha channel */
    D3DTSS_ALPHAARG1      =  5, /* D3DTA_* (texture arg) */
    D3DTSS_ALPHAARG2      =  6, /* D3DTA_* (texture arg) */
    D3DTSS_BUMPENVMAT00   =  7, /* D3DVALUE (bump mapping matrix) */
    D3DTSS_BUMPENVMAT01   =  8, /* D3DVALUE (bump mapping matrix) */
    D3DTSS_BUMPENVMAT10   =  9, /* D3DVALUE (bump mapping matrix) */
    D3DTSS_BUMPENVMAT11   = 10, /* D3DVALUE (bump mapping matrix) */
    D3DTSS_TEXCOORDINDEX  = 11, /* identifies which set of texture coordinates index this texture */
    D3DTSS_ADDRESS        = 12, /* D3DTEXTUREADDRESS for both coordinates */
    D3DTSS_ADDRESSU       = 13, /* D3DTEXTUREADDRESS for U coordinate */
    D3DTSS_ADDRESSV       = 14, /* D3DTEXTUREADDRESS for V coordinate */
    D3DTSS_BORDERCOLOR    = 15, /* D3DCOLOR */
    D3DTSS_MAGFILTER      = 16, /* D3DTEXTUREMAGFILTER filter to use for magnification */
    D3DTSS_MINFILTER      = 17, /* D3DTEXTUREMINFILTER filter to use for minification */
    D3DTSS_MIPFILTER      = 18, /* D3DTEXTUREMIPFILTER filter to use between mipmaps during minification */
    D3DTSS_MIPMAPLODBIAS  = 19, /* D3DVALUE Mipmap LOD bias */
    D3DTSS_MAXMIPLEVEL    = 20, /* DWORD 0..(n-1) LOD index of largest map to use (0 == largest) */
    D3DTSS_MAXANISOTROPY  = 21, /* DWORD maximum anisotropy */
    D3DTSS_BUMPENVLSCALE  = 22, /* D3DVALUE scale for bump map luminance */
    D3DTSS_BUMPENVLOFFSET = 23, /* D3DVALUE offset for bump map luminance */
#if(DIRECT3D_VERSION >= 0x0700)
    D3DTSS_TEXTURETRANSFORMFLAGS = 24, /* D3DTEXTURETRANSFORMFLAGS controls texture transform */
#endif /* DIRECT3D_VERSION >= 0x0700 */
    D3DTSS_FORCE_DWORD   = 0x7fffffff, /* force 32-bit size enum */
} D3DTEXTURESTAGESTATETYPE;

#if(DIRECT3D_VERSION >= 0x0700)
// Values, used with D3DTSS_TEXCOORDINDEX, to specify that the vertex data(position
// and normal in the camera space) should be taken as texture coordinates
// Low 16 bits are used to specify texture coordinate index, to take the WRAP mode from
//
#define D3DTSS_TCI_PASSTHRU                             0x00000000
#define D3DTSS_TCI_CAMERASPACENORMAL                    0x00010000
#define D3DTSS_TCI_CAMERASPACEPOSITION                  0x00020000
#define D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR          0x00030000
#endif /* DIRECT3D_VERSION >= 0x0700 */

/*
 * Enumerations for COLOROP and ALPHAOP texture blending operations set in
 * texture processing stage controls in D3DRENDERSTATE.
 */
typedef enum _D3DTEXTUREOP
{
// Control
    D3DTOP_DISABLE    = 1,      // disables stage
    D3DTOP_SELECTARG1 = 2,      // the default
    D3DTOP_SELECTARG2 = 3,

// Modulate
    D3DTOP_MODULATE   = 4,      // multiply args together
    D3DTOP_MODULATE2X = 5,      // multiply and  1 bit
    D3DTOP_MODULATE4X = 6,      // multiply and  2 bits

// Add
    D3DTOP_ADD          =  7,   // add arguments together
    D3DTOP_ADDSIGNED    =  8,   // add with -0.5 bias
    D3DTOP_ADDSIGNED2X  =  9,   // as above but left  1 bit
    D3DTOP_SUBTRACT     = 10,   // Arg1 - Arg2, with no saturation
    D3DTOP_ADDSMOOTH    = 11,   // add 2 args, subtract product
                                // Arg1 + Arg2 - Arg1*Arg2
                                // = Arg1 + (1-Arg1)*Arg2

// Linear alpha blend: Arg1*(Alpha) + Arg2*(1-Alpha)
    D3DTOP_BLENDDIFFUSEALPHA    = 12, // iterated alpha
    D3DTOP_BLENDTEXTUREALPHA    = 13, // texture alpha
    D3DTOP_BLENDFACTORALPHA     = 14, // alpha from D3DRENDERSTATE_TEXTUREFACTOR
    // Linear alpha blend with pre-multiplied arg1 input: Arg1 + Arg2*(1-Alpha)
    D3DTOP_BLENDTEXTUREALPHAPM  = 15, // texture alpha
    D3DTOP_BLENDCURRENTALPHA    = 16, // by alpha of current color

// Specular mapping
    D3DTOP_PREMODULATE            = 17,     // modulate with next texture before use
    D3DTOP_MODULATEALPHA_ADDCOLOR = 18,     // Arg1.RGB + Arg1.A*Arg2.RGB
                                            // COLOROP only
    D3DTOP_MODULATECOLOR_ADDALPHA = 19,     // Arg1.RGB*Arg2.RGB + Arg1.A
                                            // COLOROP only
    D3DTOP_MODULATEINVALPHA_ADDCOLOR = 20,  // (1-Arg1.A)*Arg2.RGB + Arg1.RGB
                                            // COLOROP only
    D3DTOP_MODULATEINVCOLOR_ADDALPHA = 21,  // (1-Arg1.RGB)*Arg2.RGB + Arg1.A
                                            // COLOROP only

// Bump mapping
    D3DTOP_BUMPENVMAP           = 22, // per pixel env map perturbation
    D3DTOP_BUMPENVMAPLUMINANCE  = 23, // with luminance channel
    // This can do either diffuse or specular bump mapping with correct input.
    // Performs the function (Arg1.R*Arg2.R + Arg1.G*Arg2.G + Arg1.B*Arg2.B)
    // where each component has been scaled and offset to make it signed.
    // The result is replicated into all four (including alpha) channels.
    // This is a valid COLOROP only.
    D3DTOP_DOTPRODUCT3          = 24,

    D3DTOP_FORCE_DWORD = 0x7fffffff,
} D3DTEXTUREOP;

/*
 * Values for COLORARG1,2 and ALPHAARG1,2 texture blending operations
 * set in texture processing stage controls in D3DRENDERSTATE.
 */
#define D3DTA_SELECTMASK        0x0000000f  // mask for arg selector
#define D3DTA_DIFFUSE           0x00000000  // select diffuse color
#define D3DTA_CURRENT           0x00000001  // select result of previous stage
#define D3DTA_TEXTURE           0x00000002  // select texture color
#define D3DTA_TFACTOR           0x00000003  // select RENDERSTATE_TEXTUREFACTOR
#if(DIRECT3D_VERSION >= 0x0700)
#define D3DTA_SPECULAR          0x00000004  // select specular color
#endif /* DIRECT3D_VERSION >= 0x0700 */
#define D3DTA_COMPLEMENT        0x00000010  // take 1.0 - x
#define D3DTA_ALPHAREPLICATE    0x00000020  // replicate alpha to color components

#endif //(DIRECT3D_VERSION < 0x0800)

/*
 *  IDirect3DTexture2 State Filter Types
 */
typedef enum _D3DTEXTUREMAGFILTER
{
    D3DTFG_POINT        = 1,    // nearest
    D3DTFG_LINEAR       = 2,    // linear interpolation
    D3DTFG_FLATCUBIC    = 3,    // cubic
    D3DTFG_GAUSSIANCUBIC = 4,   // different cubic kernel
    D3DTFG_ANISOTROPIC  = 5,    //
#if(DIRECT3D_VERSION >= 0x0700)
#endif /* DIRECT3D_VERSION >= 0x0700 */
    D3DTFG_FORCE_DWORD  = 0x7fffffff,   // force 32-bit size enum
} D3DTEXTUREMAGFILTER;

typedef enum _D3DTEXTUREMINFILTER
{
    D3DTFN_POINT        = 1,    // nearest
    D3DTFN_LINEAR       = 2,    // linear interpolation
    D3DTFN_ANISOTROPIC  = 3,    //
    D3DTFN_FORCE_DWORD  = 0x7fffffff,   // force 32-bit size enum
} D3DTEXTUREMINFILTER;

typedef enum _D3DTEXTUREMIPFILTER
{
    D3DTFP_NONE         = 1,    // mipmapping disabled (use MAG filter)
    D3DTFP_POINT        = 2,    // nearest
    D3DTFP_LINEAR       = 3,    // linear interpolation
    D3DTFP_FORCE_DWORD  = 0x7fffffff,   // force 32-bit size enum
} D3DTEXTUREMIPFILTER;

#endif /* DIRECT3D_VERSION >= 0x0600 */

/*
 * Triangle flags
 */

/*
 * Tri strip and fan flags.
 * START loads all three vertices
 * EVEN and ODD load just v3 with even or odd culling
 * START_FLAT contains a count from 0 to 29 that allows the
 * whole strip or fan to be culled in one hit.
 * e.g. for a quad len = 1
 */
#define D3DTRIFLAG_START            0x00000000L
#define D3DTRIFLAG_STARTFLAT(len) (len)     /* 0 < len < 30 */
#define D3DTRIFLAG_ODD              0x0000001eL
#define D3DTRIFLAG_EVEN             0x0000001fL

/*
 * Triangle edge flags
 * enable edges for wireframe or antialiasing
 */
#define D3DTRIFLAG_EDGEENABLE1          0x00000100L /* v0-v1 edge */
#define D3DTRIFLAG_EDGEENABLE2          0x00000200L /* v1-v2 edge */
#define D3DTRIFLAG_EDGEENABLE3          0x00000400L /* v2-v0 edge */
#define D3DTRIFLAG_EDGEENABLETRIANGLE \
        (D3DTRIFLAG_EDGEENABLE1 | D3DTRIFLAG_EDGEENABLE2 | D3DTRIFLAG_EDGEENABLE3)

/*
 * Primitive structures and related defines.  Vertex offsets are to types
 * D3DVERTEX, D3DLVERTEX, or D3DTLVERTEX.
 */

/*
 * Triangle list primitive structure
 */
typedef struct _D3DTRIANGLE {
    union {
    WORD    v1;            /* Vertex indices */
    WORD    wV1;
    };
    union {
    WORD    v2;
    WORD    wV2;
    };
    union {
    WORD    v3;
    WORD    wV3;
    };
    WORD        wFlags;       /* Edge (and other) flags */
} D3DTRIANGLE, *LPD3DTRIANGLE;

/*
 * Line list structure.
 * The instruction count defines the number of line segments.
 */
typedef struct _D3DLINE {
    union {
    WORD    v1;            /* Vertex indices */
    WORD    wV1;
    };
    union {
    WORD    v2;
    WORD    wV2;
    };
} D3DLINE, *LPD3DLINE;

/*
 * Span structure
 * Spans join a list of points with the same y value.
 * If the y value changes, a new span is started.
 */
typedef struct _D3DSPAN {
    WORD    wCount; /* Number of spans */
    WORD    wFirst; /* Index to first vertex */
} D3DSPAN, *LPD3DSPAN;

/*
 * Point structure
 */
typedef struct _D3DPOINT {
    WORD    wCount;     /* number of points     */
    WORD    wFirst;     /* index to first vertex    */
} D3DPOINT, *LPD3DPOINT;


/*
 * Forward branch structure.
 * Mask is logically anded with the driver status mask
 * if the result equals 'value', the branch is taken.
 */
typedef struct _D3DBRANCH {
    DWORD   dwMask;     /* Bitmask against D3D status */
    DWORD   dwValue;
    BOOL    bNegate;        /* TRUE to negate comparison */
    DWORD   dwOffset;   /* How far to branch forward (0 for exit)*/
} D3DBRANCH, *LPD3DBRANCH;

/*
 * Status used for set status instruction.
 * The D3D status is initialised on device creation
 * and is modified by all execute calls.
 */
typedef struct _D3DSTATUS {
    DWORD       dwFlags;    /* Do we set extents or status */
    DWORD   dwStatus;   /* D3D status */
    D3DRECT drExtent;
} D3DSTATUS, *LPD3DSTATUS;

#define D3DSETSTATUS_STATUS     0x00000001L
#define D3DSETSTATUS_EXTENTS        0x00000002L
#define D3DSETSTATUS_ALL    (D3DSETSTATUS_STATUS | D3DSETSTATUS_EXTENTS)

#if(DIRECT3D_VERSION >= 0x0500)
typedef struct _D3DCLIPSTATUS {
    DWORD dwFlags; /* Do we set 2d extents, 3D extents or status */
    DWORD dwStatus; /* Clip status */
    float minx, maxx; /* X extents */
    float miny, maxy; /* Y extents */
    float minz, maxz; /* Z extents */
} D3DCLIPSTATUS, *LPD3DCLIPSTATUS;

#define D3DCLIPSTATUS_STATUS        0x00000001L
#define D3DCLIPSTATUS_EXTENTS2      0x00000002L
#define D3DCLIPSTATUS_EXTENTS3      0x00000004L

#endif /* DIRECT3D_VERSION >= 0x0500 */
/*
 * Statistics structure
 */
typedef struct _D3DSTATS {
    DWORD        dwSize;
    DWORD        dwTrianglesDrawn;
    DWORD        dwLinesDrawn;
    DWORD        dwPointsDrawn;
    DWORD        dwSpansDrawn;
    DWORD        dwVerticesProcessed;
} D3DSTATS, *LPD3DSTATS;

/*
 * Execute options.
 * When calling using D3DEXECUTE_UNCLIPPED all the primitives
 * inside the buffer must be contained within the viewport.
 */
#define D3DEXECUTE_CLIPPED       0x00000001l
#define D3DEXECUTE_UNCLIPPED     0x00000002l

typedef struct _D3DEXECUTEDATA {
    DWORD       dwSize;
    DWORD       dwVertexOffset;
    DWORD       dwVertexCount;
    DWORD       dwInstructionOffset;
    DWORD       dwInstructionLength;
    DWORD       dwHVertexOffset;
    D3DSTATUS   dsStatus;   /* Status after execute */
} D3DEXECUTEDATA, *LPD3DEXECUTEDATA;

/*
 * Palette flags.
 * This are or'ed with the peFlags in the PALETTEENTRYs passed to DirectDraw.
 */
#define D3DPAL_FREE 0x00    /* Renderer may use this entry freely */
#define D3DPAL_READONLY 0x40    /* Renderer may not set this entry */
#define D3DPAL_RESERVED 0x80    /* Renderer may not use this entry */


#if(DIRECT3D_VERSION >= 0x0600)

typedef struct _D3DVERTEXBUFFERDESC {
    DWORD dwSize;
    DWORD dwCaps;
    DWORD dwFVF;
    DWORD dwNumVertices;
} D3DVERTEXBUFFERDESC, *LPD3DVERTEXBUFFERDESC;

#define D3DVBCAPS_SYSTEMMEMORY      0x00000800l
#define D3DVBCAPS_WRITEONLY         0x00010000l
#define D3DVBCAPS_OPTIMIZED         0x80000000l
#define D3DVBCAPS_DONOTCLIP         0x00000001l

/* Vertex Operations for ProcessVertices */
#define D3DVOP_LIGHT       (1 << 10)
#define D3DVOP_TRANSFORM   (1 << 0)
#define D3DVOP_CLIP        (1 << 2)
#define D3DVOP_EXTENTS     (1 << 3)


#if(DIRECT3D_VERSION < 0x0800)

/* The maximum number of vertices user can pass to any d3d
   drawing function or to create vertex buffer with
*/
#define D3DMAXNUMVERTICES    ((1<<16) - 1)
/* The maximum number of primitives user can pass to any d3d
   drawing function.
*/
#define D3DMAXNUMPRIMITIVES  ((1<<16) - 1)

#if(DIRECT3D_VERSION >= 0x0700)

/* Bits for dwFlags in ProcessVertices call */
#define D3DPV_DONOTCOPYDATA (1 << 0)

#endif /* DIRECT3D_VERSION >= 0x0700 */

#endif //(DIRECT3D_VERSION < 0x0800)

//-------------------------------------------------------------------

#if(DIRECT3D_VERSION < 0x0800)

// Flexible vertex format bits
//
#define D3DFVF_RESERVED0        0x001
#define D3DFVF_POSITION_MASK    0x00E
#define D3DFVF_XYZ              0x002
#define D3DFVF_XYZRHW           0x004
#if(DIRECT3D_VERSION >= 0x0700)
#define D3DFVF_XYZB1            0x006
#define D3DFVF_XYZB2            0x008
#define D3DFVF_XYZB3            0x00a
#define D3DFVF_XYZB4            0x00c
#define D3DFVF_XYZB5            0x00e

#endif /* DIRECT3D_VERSION >= 0x0700 */
#define D3DFVF_NORMAL           0x010
#define D3DFVF_RESERVED1        0x020
#define D3DFVF_DIFFUSE          0x040
#define D3DFVF_SPECULAR         0x080

#define D3DFVF_TEXCOUNT_MASK    0xf00
#define D3DFVF_TEXCOUNT_SHIFT   8
#define D3DFVF_TEX0             0x000
#define D3DFVF_TEX1             0x100
#define D3DFVF_TEX2             0x200
#define D3DFVF_TEX3             0x300
#define D3DFVF_TEX4             0x400
#define D3DFVF_TEX5             0x500
#define D3DFVF_TEX6             0x600
#define D3DFVF_TEX7             0x700
#define D3DFVF_TEX8             0x800

#define D3DFVF_RESERVED2        0xf000  // 4 reserved bits

#else
#define D3DFVF_RESERVED1        0x020
#endif //(DIRECT3D_VERSION < 0x0800)

#define D3DFVF_VERTEX ( D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 )
#define D3DFVF_LVERTEX ( D3DFVF_XYZ | D3DFVF_RESERVED1 | D3DFVF_DIFFUSE | \
                         D3DFVF_SPECULAR | D3DFVF_TEX1 )
#define D3DFVF_TLVERTEX ( D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | \
                          D3DFVF_TEX1 )


typedef struct _D3DDP_PTRSTRIDE
{
    LPVOID lpvData;
    DWORD  dwStride;
} D3DDP_PTRSTRIDE;

#define D3DDP_MAXTEXCOORD 8

typedef struct _D3DDRAWPRIMITIVESTRIDEDDATA
{
    D3DDP_PTRSTRIDE position;
    D3DDP_PTRSTRIDE normal;
    D3DDP_PTRSTRIDE diffuse;
    D3DDP_PTRSTRIDE specular;
    D3DDP_PTRSTRIDE textureCoords[D3DDP_MAXTEXCOORD];
} D3DDRAWPRIMITIVESTRIDEDDATA, *LPD3DDRAWPRIMITIVESTRIDEDDATA;
//---------------------------------------------------------------------
// ComputeSphereVisibility return values
//
#define D3DVIS_INSIDE_FRUSTUM       0
#define D3DVIS_INTERSECT_FRUSTUM    1
#define D3DVIS_OUTSIDE_FRUSTUM      2
#define D3DVIS_INSIDE_LEFT          0
#define D3DVIS_INTERSECT_LEFT       (1 << 2)
#define D3DVIS_OUTSIDE_LEFT         (2 << 2)
#define D3DVIS_INSIDE_RIGHT         0
#define D3DVIS_INTERSECT_RIGHT      (1 << 4)
#define D3DVIS_OUTSIDE_RIGHT        (2 << 4)
#define D3DVIS_INSIDE_TOP           0
#define D3DVIS_INTERSECT_TOP        (1 << 6)
#define D3DVIS_OUTSIDE_TOP          (2 << 6)
#define D3DVIS_INSIDE_BOTTOM        0
#define D3DVIS_INTERSECT_BOTTOM     (1 << 8)
#define D3DVIS_OUTSIDE_BOTTOM       (2 << 8)
#define D3DVIS_INSIDE_NEAR          0
#define D3DVIS_INTERSECT_NEAR       (1 << 10)
#define D3DVIS_OUTSIDE_NEAR         (2 << 10)
#define D3DVIS_INSIDE_FAR           0
#define D3DVIS_INTERSECT_FAR        (1 << 12)
#define D3DVIS_OUTSIDE_FAR          (2 << 12)

#define D3DVIS_MASK_FRUSTUM         (3 << 0)
#define D3DVIS_MASK_LEFT            (3 << 2)
#define D3DVIS_MASK_RIGHT           (3 << 4)
#define D3DVIS_MASK_TOP             (3 << 6)
#define D3DVIS_MASK_BOTTOM          (3 << 8)
#define D3DVIS_MASK_NEAR            (3 << 10)
#define D3DVIS_MASK_FAR             (3 << 12)

#endif /* DIRECT3D_VERSION >= 0x0600 */

#if(DIRECT3D_VERSION < 0x0800)

#if(DIRECT3D_VERSION >= 0x0700)

// To be used with GetInfo()
#define D3DDEVINFOID_TEXTUREMANAGER    1
#define D3DDEVINFOID_D3DTEXTUREMANAGER 2
#define D3DDEVINFOID_TEXTURING         3

typedef enum _D3DSTATEBLOCKTYPE
{
    D3DSBT_ALL           = 1, // capture all state
    D3DSBT_PIXELSTATE    = 2, // capture pixel state
    D3DSBT_VERTEXSTATE   = 3, // capture vertex state
    D3DSBT_FORCE_DWORD   = 0xffffffff
} D3DSTATEBLOCKTYPE;

// The D3DVERTEXBLENDFLAGS type is used with D3DRENDERSTATE_VERTEXBLEND state.
//
typedef enum _D3DVERTEXBLENDFLAGS
{
    D3DVBLEND_DISABLE  = 0, // Disable vertex blending
    D3DVBLEND_1WEIGHT  = 1, // blend between 2 matrices
    D3DVBLEND_2WEIGHTS = 2, // blend between 3 matrices
    D3DVBLEND_3WEIGHTS = 3, // blend between 4 matrices
} D3DVERTEXBLENDFLAGS;

typedef enum _D3DTEXTURETRANSFORMFLAGS {
    D3DTTFF_DISABLE         = 0,    // texture coordinates are passed directly
    D3DTTFF_COUNT1          = 1,    // rasterizer should expect 1-D texture coords
    D3DTTFF_COUNT2          = 2,    // rasterizer should expect 2-D texture coords
    D3DTTFF_COUNT3          = 3,    // rasterizer should expect 3-D texture coords
    D3DTTFF_COUNT4          = 4,    // rasterizer should expect 4-D texture coords
    D3DTTFF_PROJECTED       = 256,  // texcoords to be divided by COUNTth element
    D3DTTFF_FORCE_DWORD     = 0x7fffffff,
} D3DTEXTURETRANSFORMFLAGS;

// Macros to set texture coordinate format bits in the FVF id

#define D3DFVF_TEXTUREFORMAT2 0         // Two floating point values
#define D3DFVF_TEXTUREFORMAT1 3         // One floating point value
#define D3DFVF_TEXTUREFORMAT3 1         // Three floating point values
#define D3DFVF_TEXTUREFORMAT4 2         // Four floating point values

#define D3DFVF_TEXCOORDSIZE3(CoordIndex) (D3DFVF_TEXTUREFORMAT3 << (CoordIndex*2 + 16))
#define D3DFVF_TEXCOORDSIZE2(CoordIndex) (D3DFVF_TEXTUREFORMAT2)
#define D3DFVF_TEXCOORDSIZE4(CoordIndex) (D3DFVF_TEXTUREFORMAT4 << (CoordIndex*2 + 16))
#define D3DFVF_TEXCOORDSIZE1(CoordIndex) (D3DFVF_TEXTUREFORMAT1 << (CoordIndex*2 + 16))


#endif /* DIRECT3D_VERSION >= 0x0700 */

#else
//
// legacy vertex blend names
//
typedef enum _D3DVERTEXBLENDFLAGS D3DVERTEXBLENDFLAGS;
#define D3DVBLEND_DISABLE  (D3DVERTEXBLENDFLAGS)0
#define D3DVBLEND_1WEIGHT  (D3DVERTEXBLENDFLAGS)1
#define D3DVBLEND_2WEIGHTS (D3DVERTEXBLENDFLAGS)2
#define D3DVBLEND_3WEIGHTS (D3DVERTEXBLENDFLAGS)3

#endif //(DIRECT3D_VERSION < 0x0800)

#pragma pack()
#pragma warning(default:4201)

#endif /* _D3DTYPES_H_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3dxmath.h ===
//////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 1998 - 1999 Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dxmath.h
//  Content:    D3DX math types and functions
//
//////////////////////////////////////////////////////////////////////////////

#ifndef __D3DXMATH_H__
#define __D3DXMATH_H__

#include <d3d.h>
#include <math.h>
#include <limits.h>
#include "d3dxerr.h"

#ifndef D3DXINLINE
#ifdef __cplusplus
#define D3DXINLINE inline
#else
#define D3DXINLINE _inline
#endif
#endif

#pragma warning(disable:4201) // anonymous unions warning



typedef struct ID3DXMatrixStack *LPD3DXMATRIXSTACK;

// {E3357330-CC5E-11d2-A434-00A0C90629A8}
DEFINE_GUID( IID_ID3DXMatrixStack,
             0xe3357330, 0xcc5e, 0x11d2, 0xa4, 0x34, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8);


//===========================================================================
//
// General purpose utilities
//
//===========================================================================
#define D3DX_PI    ((float)  3.141592654f)
#define D3DX_1BYPI ((float)  0.318309886f)

#define D3DXToRadian( degree ) ((degree) * (D3DX_PI / 180.0f))
#define D3DXToDegree( radian ) ((radian) * (180.0f / D3DX_PI))



//===========================================================================
//
// Vectors
//
//===========================================================================

//--------------------------
// 2D Vector
//--------------------------
typedef struct D3DXVECTOR2
{
#ifdef __cplusplus
public:
    D3DXVECTOR2() {};
    D3DXVECTOR2( const float * );
    D3DXVECTOR2( float x, float y );

    // casting
    operator float* ();
    operator const float* () const;

    // assignment operators
    D3DXVECTOR2& operator += ( const D3DXVECTOR2& );
    D3DXVECTOR2& operator -= ( const D3DXVECTOR2& );
    D3DXVECTOR2& operator *= ( float );
    D3DXVECTOR2& operator /= ( float );

    // unary operators
    D3DXVECTOR2 operator + () const;
    D3DXVECTOR2 operator - () const;

    // binary operators
    D3DXVECTOR2 operator + ( const D3DXVECTOR2& ) const;
    D3DXVECTOR2 operator - ( const D3DXVECTOR2& ) const;
    D3DXVECTOR2 operator * ( float ) const;
    D3DXVECTOR2 operator / ( float ) const;

    friend D3DXVECTOR2 operator * ( float, const D3DXVECTOR2& );

    BOOL operator == ( const D3DXVECTOR2& ) const;
    BOOL operator != ( const D3DXVECTOR2& ) const;


public:
#endif //__cplusplus
    float x, y;
} D3DXVECTOR2, *LPD3DXVECTOR2;


//--------------------------
// 3D Vector
//--------------------------
typedef struct D3DXVECTOR3
{
#ifdef __cplusplus
public:
    D3DXVECTOR3() {};
    D3DXVECTOR3( const float * );
    D3DXVECTOR3( const D3DVECTOR& );
    D3DXVECTOR3( float x, float y, float z );

    // casting
    operator float* ();
    operator const float* () const;

    operator D3DVECTOR* ();
    operator const D3DVECTOR* () const;

    operator D3DVECTOR& ();
    operator const D3DVECTOR& () const;

    // assignment operators
    D3DXVECTOR3& operator += ( const D3DXVECTOR3& );
    D3DXVECTOR3& operator -= ( const D3DXVECTOR3& );
    D3DXVECTOR3& operator *= ( float );
    D3DXVECTOR3& operator /= ( float );

    // unary operators
    D3DXVECTOR3 operator + () const;
    D3DXVECTOR3 operator - () const;

    // binary operators
    D3DXVECTOR3 operator + ( const D3DXVECTOR3& ) const;
    D3DXVECTOR3 operator - ( const D3DXVECTOR3& ) const;
    D3DXVECTOR3 operator * ( float ) const;
    D3DXVECTOR3 operator / ( float ) const;

    friend D3DXVECTOR3 operator * ( float, const struct D3DXVECTOR3& );

    BOOL operator == ( const D3DXVECTOR3& ) const;
    BOOL operator != ( const D3DXVECTOR3& ) const;

public:
#endif //__cplusplus
    float x, y, z;
} D3DXVECTOR3, *LPD3DXVECTOR3;


//--------------------------
// 4D Vector
//--------------------------
typedef struct D3DXVECTOR4
{
#ifdef __cplusplus
public:
    D3DXVECTOR4() {};
    D3DXVECTOR4( const float* );
    D3DXVECTOR4( float x, float y, float z, float w );

    // casting
    operator float* ();
    operator const float* () const;

    // assignment operators
    D3DXVECTOR4& operator += ( const D3DXVECTOR4& );
    D3DXVECTOR4& operator -= ( const D3DXVECTOR4& );
    D3DXVECTOR4& operator *= ( float );
    D3DXVECTOR4& operator /= ( float );

    // unary operators
    D3DXVECTOR4 operator + () const;
    D3DXVECTOR4 operator - () const;

    // binary operators
    D3DXVECTOR4 operator + ( const D3DXVECTOR4& ) const;
    D3DXVECTOR4 operator - ( const D3DXVECTOR4& ) const;
    D3DXVECTOR4 operator * ( float ) const;
    D3DXVECTOR4 operator / ( float ) const;

    friend D3DXVECTOR4 operator * ( float, const D3DXVECTOR4& );

    BOOL operator == ( const D3DXVECTOR4& ) const;
    BOOL operator != ( const D3DXVECTOR4& ) const;

public:
#endif //__cplusplus
    float x, y, z, w;
} D3DXVECTOR4, *LPD3DXVECTOR4;


//===========================================================================
//
// Matrices
//
//===========================================================================
typedef struct D3DXMATRIX
{
#ifdef __cplusplus
public:
    D3DXMATRIX() {};
    D3DXMATRIX( const float * );
    D3DXMATRIX( const D3DMATRIX& );
    D3DXMATRIX( float m00, float m01, float m02, float m03,
                float m10, float m11, float m12, float m13,
                float m20, float m21, float m22, float m23,
                float m30, float m31, float m32, float m33 );


    // access grants
    float& operator () ( UINT iRow, UINT iCol );
    float  operator () ( UINT iRow, UINT iCol ) const;

    // casting operators
    operator float* ();
    operator const float* () const;

    operator D3DMATRIX* ();
    operator const D3DMATRIX* () const;

    operator D3DMATRIX& ();
    operator const D3DMATRIX& () const;

    // assignment operators
    D3DXMATRIX& operator *= ( const D3DXMATRIX& );
    D3DXMATRIX& operator += ( const D3DXMATRIX& );
    D3DXMATRIX& operator -= ( const D3DXMATRIX& );
    D3DXMATRIX& operator *= ( float );
    D3DXMATRIX& operator /= ( float );

    // unary operators
    D3DXMATRIX operator + () const;
    D3DXMATRIX operator - () const;

    // binary operators
    D3DXMATRIX operator * ( const D3DXMATRIX& ) const;
    D3DXMATRIX operator + ( const D3DXMATRIX& ) const;
    D3DXMATRIX operator - ( const D3DXMATRIX& ) const;
    D3DXMATRIX operator * ( float ) const;
    D3DXMATRIX operator / ( float ) const;

    friend D3DXMATRIX operator * ( float, const D3DXMATRIX& );

    BOOL operator == ( const D3DXMATRIX& ) const;
    BOOL operator != ( const D3DXMATRIX& ) const;


#endif //__cplusplus

    union
    {
        float m[4][4];
#ifdef __cplusplus
        struct
        {
            float m00, m01, m02, m03;
            float m10, m11, m12, m13;
            float m20, m21, m22, m23;
            float m30, m31, m32, m33;
        };
#endif //__cplusplus
    };
} D3DXMATRIX, *LPD3DXMATRIX;


//===========================================================================
//
//    Quaternions
//
//===========================================================================
typedef struct D3DXQUATERNION
{
#ifdef __cplusplus
public:
    D3DXQUATERNION() {}
    D3DXQUATERNION( const float * );
    D3DXQUATERNION( float x, float y, float z, float w );

    // casting
    operator float* ();
    operator const float* () const;

    // assignment operators
    D3DXQUATERNION& operator += ( const D3DXQUATERNION& );
    D3DXQUATERNION& operator -= ( const D3DXQUATERNION& );
    D3DXQUATERNION& operator *= ( const D3DXQUATERNION& );
    D3DXQUATERNION& operator *= ( float );
    D3DXQUATERNION& operator /= ( float );

    // unary operators
    D3DXQUATERNION  operator + () const;
    D3DXQUATERNION  operator - () const;

    // binary operators
    D3DXQUATERNION operator + ( const D3DXQUATERNION& ) const;
    D3DXQUATERNION operator - ( const D3DXQUATERNION& ) const;
    D3DXQUATERNION operator * ( const D3DXQUATERNION& ) const;
    D3DXQUATERNION operator * ( float ) const;
    D3DXQUATERNION operator / ( float ) const;

    friend D3DXQUATERNION operator * (float, const D3DXQUATERNION& );

    BOOL operator == ( const D3DXQUATERNION& ) const;
    BOOL operator != ( const D3DXQUATERNION& ) const;

#endif //__cplusplus
    float x, y, z, w;
} D3DXQUATERNION, *LPD3DXQUATERNION;


//===========================================================================
//
// Planes
//
//===========================================================================
typedef struct D3DXPLANE
{
#ifdef __cplusplus
public:
    D3DXPLANE() {}
    D3DXPLANE( const float* );
    D3DXPLANE( float a, float b, float c, float d );

    // casting
    operator float* ();
    operator const float* () const;

    // unary operators
    D3DXPLANE operator + () const;
    D3DXPLANE operator - () const;

    // binary operators
    BOOL operator == ( const D3DXPLANE& ) const;
    BOOL operator != ( const D3DXPLANE& ) const;

#endif //__cplusplus
    float a, b, c, d;
} D3DXPLANE, *LPD3DXPLANE;


//===========================================================================
//
// Colors
//
//===========================================================================

typedef struct D3DXCOLOR
{
#ifdef __cplusplus
public:
    D3DXCOLOR() {}
    D3DXCOLOR( DWORD argb );
    D3DXCOLOR( const float * );
    D3DXCOLOR( const D3DCOLORVALUE& );
    D3DXCOLOR( float r, float g, float b, float a );

    // casting
    operator DWORD () const;

    operator float* ();
    operator const float* () const;

    operator D3DCOLORVALUE* ();
    operator const D3DCOLORVALUE* () const;

    operator D3DCOLORVALUE& ();
    operator const D3DCOLORVALUE& () const;

    // assignment operators
    D3DXCOLOR& operator += ( const D3DXCOLOR& );
    D3DXCOLOR& operator -= ( const D3DXCOLOR& );
    D3DXCOLOR& operator *= ( float );
    D3DXCOLOR& operator /= ( float );

    // unary operators
    D3DXCOLOR operator + () const;
    D3DXCOLOR operator - () const;

    // binary operators
    D3DXCOLOR operator + ( const D3DXCOLOR& ) const;
    D3DXCOLOR operator - ( const D3DXCOLOR& ) const;
    D3DXCOLOR operator * ( float ) const;
    D3DXCOLOR operator / ( float ) const;

    friend D3DXCOLOR operator * (float, const D3DXCOLOR& );

    BOOL operator == ( const D3DXCOLOR& ) const;
    BOOL operator != ( const D3DXCOLOR& ) const;

#endif //__cplusplus
    FLOAT r, g, b, a;
} D3DXCOLOR, *LPD3DXCOLOR;



//===========================================================================
//
// D3DX math functions:
//
// NOTE:
//  * All these functions can take the same object as in and out parameters.
//
//  * Out parameters are typically also returned as return values, so that
//    the output of one function may be used as a parameter to another.
//
//===========================================================================

//--------------------------
// 2D Vector
//--------------------------

// inline

float D3DXVec2Length
    ( const D3DXVECTOR2 *pV );

float D3DXVec2LengthSq
    ( const D3DXVECTOR2 *pV );

float D3DXVec2Dot
    ( const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 );

// Z component of ((x1,y1,0) cross (x2,y2,0))
float D3DXVec2CCW
    ( const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 );

D3DXVECTOR2* D3DXVec2Add
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 );

D3DXVECTOR2* D3DXVec2Subtract
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 );

// Minimize each component.  x = min(x1, x2), y = min(y1, y2)
D3DXVECTOR2* D3DXVec2Minimize
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 );

// Maximize each component.  x = max(x1, x2), y = max(y1, y2)
D3DXVECTOR2* D3DXVec2Maximize
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 );

D3DXVECTOR2* D3DXVec2Scale
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV, float s );

// Linear interpolation. V1 + s(V2-V1)
D3DXVECTOR2* D3DXVec2Lerp
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2,
      float s );

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

D3DXVECTOR2* WINAPI D3DXVec2Normalize
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV );

// Hermite interpolation between position V1, tangent T1 (when s == 0)
// and position V2, tangent T2 (when s == 1).
D3DXVECTOR2* WINAPI D3DXVec2Hermite
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pT1,
      const D3DXVECTOR2 *pV2, const D3DXVECTOR2 *pT2, float s );

// Barycentric coordinates.  V1 + f(V2-V1) + g(V3-V1)
D3DXVECTOR2* WINAPI D3DXVec2BaryCentric
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2,
      D3DXVECTOR2 *pV3, float f, float g);

// Transform (x, y, 0, 1) by matrix.
D3DXVECTOR4* WINAPI D3DXVec2Transform
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR2 *pV, const D3DXMATRIX *pM );

// Transform (x, y, 0, 1) by matrix, project result back into w=1.
D3DXVECTOR2* WINAPI D3DXVec2TransformCoord
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV, const D3DXMATRIX *pM );

// Transform (x, y, 0, 0) by matrix.
D3DXVECTOR2* WINAPI D3DXVec2TransformNormal
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV, const D3DXMATRIX *pM );

#ifdef __cplusplus
}
#endif


//--------------------------
// 3D Vector
//--------------------------

// inline

float D3DXVec3Length
    ( const D3DXVECTOR3 *pV );

float D3DXVec3LengthSq
    ( const D3DXVECTOR3 *pV );

float D3DXVec3Dot
    ( const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 );

D3DXVECTOR3* D3DXVec3Cross
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 );

D3DXVECTOR3* D3DXVec3Add
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 );

D3DXVECTOR3* D3DXVec3Subtract
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 );

// Minimize each component.  x = min(x1, x2), y = min(y1, y2), ...
D3DXVECTOR3* D3DXVec3Minimize
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 );

// Maximize each component.  x = max(x1, x2), y = max(y1, y2), ...
D3DXVECTOR3* D3DXVec3Maximize
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 );

D3DXVECTOR3* D3DXVec3Scale
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV, float s);

// Linear interpolation. V1 + s(V2-V1)
D3DXVECTOR3* D3DXVec3Lerp
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2,
      float s );

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

D3DXVECTOR3* WINAPI D3DXVec3Normalize
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV );

// Hermite interpolation between position V1, tangent T1 (when s == 0)
// and position V2, tangent T2 (when s == 1).
D3DXVECTOR3* WINAPI D3DXVec3Hermite
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pT1,
      const D3DXVECTOR3 *pV2, const D3DXVECTOR3 *pT2, float s );

// Barycentric coordinates.  V1 + f(V2-V1) + g(V3-V1)
D3DXVECTOR3* WINAPI D3DXVec3BaryCentric
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2,
      const D3DXVECTOR3 *pV3, float f, float g);

// Transform (x, y, z, 1) by matrix.
D3DXVECTOR4* WINAPI D3DXVec3Transform
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR3 *pV, const D3DXMATRIX *pM );

// Transform (x, y, z, 1) by matrix, project result back into w=1.
D3DXVECTOR3* WINAPI D3DXVec3TransformCoord
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV, const D3DXMATRIX *pM );

// Transform (x, y, z, 0) by matrix.
D3DXVECTOR3* WINAPI D3DXVec3TransformNormal
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV, const D3DXMATRIX *pM );

#ifdef __cplusplus
}
#endif



//--------------------------
// 4D Vector
//--------------------------

// inline

float D3DXVec4Length
    ( const D3DXVECTOR4 *pV );

float D3DXVec4LengthSq
    ( const D3DXVECTOR4 *pV );

float D3DXVec4Dot
    ( const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2 );

D3DXVECTOR4* D3DXVec4Add
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2);

D3DXVECTOR4* D3DXVec4Subtract
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2);

// Minimize each component.  x = min(x1, x2), y = min(y1, y2), ...
D3DXVECTOR4* D3DXVec4Minimize
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2);

// Maximize each component.  x = max(x1, x2), y = max(y1, y2), ...
D3DXVECTOR4* D3DXVec4Maximize
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2);

D3DXVECTOR4* D3DXVec4Scale
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV, float s);

// Linear interpolation. V1 + s(V2-V1)
D3DXVECTOR4* D3DXVec4Lerp
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2,
      float s );

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

// Cross-product in 4 dimensions.
D3DXVECTOR4* WINAPI D3DXVec4Cross
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2,
      const D3DXVECTOR4 *pV3);

D3DXVECTOR4* WINAPI D3DXVec4Normalize
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV );

// Hermite interpolation between position V1, tangent T1 (when s == 0)
// and position V2, tangent T2 (when s == 1).
D3DXVECTOR4* WINAPI D3DXVec4Hermite
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pT1,
      const D3DXVECTOR4 *pV2, const D3DXVECTOR4 *pT2, float s );

// Barycentric coordinates.  V1 + f(V2-V1) + g(V3-V1)
D3DXVECTOR4* WINAPI D3DXVec4BaryCentric
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2,
      const D3DXVECTOR4 *pV3, float f, float g);

// Transform vector by matrix.
D3DXVECTOR4* WINAPI D3DXVec4Transform
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV, const D3DXMATRIX *pM );

#ifdef __cplusplus
}
#endif


//--------------------------
// 4D Matrix
//--------------------------

// inline

D3DXMATRIX* D3DXMatrixIdentity
    ( D3DXMATRIX *pOut );

BOOL D3DXMatrixIsIdentity
    ( const D3DXMATRIX *pM );


// non-inline
#ifdef __cplusplus
extern "C" {
#endif

float WINAPI D3DXMatrixfDeterminant
    ( const D3DXMATRIX *pM );

// Matrix multiplication.  The result represents the transformation M2 
// followed by the transformation M1.  (Out = M1 * M2)
D3DXMATRIX* WINAPI D3DXMatrixMultiply
    ( D3DXMATRIX *pOut, const D3DXMATRIX *pM1, const D3DXMATRIX *pM2 );

D3DXMATRIX* WINAPI D3DXMatrixTranspose
    ( D3DXMATRIX *pOut, const D3DXMATRIX *pM );

// Calculate inverse of matrix.  Inversion my fail, in which case NULL will
// be returned.  The determinant of pM is also returned it pfDeterminant
// is non-NULL.
D3DXMATRIX* WINAPI D3DXMatrixInverse
    ( D3DXMATRIX *pOut, float *pfDeterminant, const D3DXMATRIX *pM );

// Build a matrix which scales by (sx, sy, sz)
D3DXMATRIX* WINAPI D3DXMatrixScaling
    ( D3DXMATRIX *pOut, float sx, float sy, float sz );

// Build a matrix which translates by (x, y, z)
D3DXMATRIX* WINAPI D3DXMatrixTranslation
    ( D3DXMATRIX *pOut, float x, float y, float z );

// Build a matrix which rotates around the X axis
D3DXMATRIX* WINAPI D3DXMatrixRotationX
    ( D3DXMATRIX *pOut, float angle );

// Build a matrix which rotates around the Y axis
D3DXMATRIX* WINAPI D3DXMatrixRotationY
    ( D3DXMATRIX *pOut, float angle );

// Build a matrix which rotates around the Z axis
D3DXMATRIX* WINAPI D3DXMatrixRotationZ
    ( D3DXMATRIX *pOut, float angle );

// Build a matrix which rotates around an arbitrary axis
D3DXMATRIX* WINAPI D3DXMatrixRotationAxis
    ( D3DXMATRIX *pOut, const D3DXVECTOR3 *pV, float angle );

// Build a matrix from a quaternion
D3DXMATRIX* WINAPI D3DXMatrixRotationQuaternion
    ( D3DXMATRIX *pOut, const D3DXQUATERNION *pQ);

// Yaw around the Y axis, a pitch around the X axis,
// and a roll around the Z axis.
D3DXMATRIX* WINAPI D3DXMatrixRotationYawPitchRoll
    ( D3DXMATRIX *pOut, float yaw, float pitch, float roll );


// Build transformation matrix.  NULL arguments are treated as identity.
// Mout = Msc-1 * Msr-1 * Ms * Msr * Msc * Mrc-1 * Mr * Mrc * Mt
D3DXMATRIX* WINAPI D3DXMatrixTransformation
    ( D3DXMATRIX *pOut, const D3DXVECTOR3 *pScalingCenter,
      const D3DXQUATERNION *pScalingRotation, const D3DXVECTOR3 *pScaling,
      const D3DXVECTOR3 *pRotationCenter, const D3DXQUATERNION *pRotation,
      const D3DXVECTOR3 *pTranslation);

// Build affine transformation matrix.  NULL arguments are treated as identity.
// Mout = Ms * Mrc-1 * Mr * Mrc * Mt
D3DXMATRIX* WINAPI D3DXMatrixAffineTransformation
    ( D3DXMATRIX *pOut, float Scaling, const D3DXVECTOR3 *pRotationCenter,
      const D3DXQUATERNION *pRotation, const D3DXVECTOR3 *pTranslation);

// Build a lookat matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixLookAt
    ( D3DXMATRIX *pOut, const D3DXVECTOR3 *pEye, const D3DXVECTOR3 *pAt,
      const D3DXVECTOR3 *pUp );

// Build a lookat matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixLookAtLH
    ( D3DXMATRIX *pOut, const D3DXVECTOR3 *pEye, const D3DXVECTOR3 *pAt,
      const D3DXVECTOR3 *pUp );

// Build a perspective projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspective
    ( D3DXMATRIX *pOut, float w, float h, float zn, float zf );

// Build a perspective projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveLH
    ( D3DXMATRIX *pOut, float w, float h, float zn, float zf );

// Build a perspective projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveFov
    ( D3DXMATRIX *pOut, float fovy, float aspect, float zn, float zf );

// Build a perspective projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveFovLH
    ( D3DXMATRIX *pOut, float fovy, float aspect, float zn, float zf );

// Build a perspective projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveOffCenter
    ( D3DXMATRIX *pOut, float l, float r, float b, float t, float zn,
      float zf );

// Build a perspective projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveOffCenterLH
    ( D3DXMATRIX *pOut, float l, float r, float b, float t, float zn,
      float zf );

// Build an ortho projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixOrtho
    ( D3DXMATRIX *pOut, float w, float h, float zn, float zf );

// Build an ortho projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixOrthoLH
    ( D3DXMATRIX *pOut, float w, float h, float zn, float zf );

// Build an ortho projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixOrthoOffCenter
    ( D3DXMATRIX *pOut, float l, float r, float b, float t, float zn,
      float zf );

// Build an ortho projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixOrthoOffCenterLH
    ( D3DXMATRIX *pOut, float l, float r, float b, float t, float zn,
      float zf );

// Build a matrix which flattens geometry into a plane, as if casting
// a shadow from a light.
D3DXMATRIX* WINAPI D3DXMatrixShadow
    ( D3DXMATRIX *pOut, const D3DXVECTOR4 *pLight,
      const D3DXPLANE *pPlane );

// Build a matrix which reflects the coordinate system about a plane
D3DXMATRIX* WINAPI D3DXMatrixReflect
    ( D3DXMATRIX *pOut, const D3DXPLANE *pPlane );

#ifdef __cplusplus
}
#endif


//--------------------------
// Quaternion
//--------------------------

// inline

float D3DXQuaternionLength
    ( const D3DXQUATERNION *pQ );

// Length squared, or "norm"
float D3DXQuaternionLengthSq
    ( const D3DXQUATERNION *pQ );

float D3DXQuaternionDot
    ( const D3DXQUATERNION *pQ1, const D3DXQUATERNION *pQ2 );

// (0, 0, 0, 1)
D3DXQUATERNION* D3DXQuaternionIdentity
    ( D3DXQUATERNION *pOut );

BOOL D3DXQuaternionIsIdentity
    ( const D3DXQUATERNION *pQ );

// (-x, -y, -z, w)
D3DXQUATERNION* D3DXQuaternionConjugate
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ );


// non-inline
#ifdef __cplusplus
extern "C" {
#endif

// Compute a quaternin's axis and angle of rotation. Expects unit quaternions.
void WINAPI D3DXQuaternionToAxisAngle
    ( const D3DXQUATERNION *pQ, D3DXVECTOR3 *pAxis, float *pAngle );

// Build a quaternion from a rotation matrix.
D3DXQUATERNION* WINAPI D3DXQuaternionRotationMatrix
    ( D3DXQUATERNION *pOut, const D3DXMATRIX *pM);

// Rotation about arbitrary axis.
D3DXQUATERNION* WINAPI D3DXQuaternionRotationAxis
    ( D3DXQUATERNION *pOut, const D3DXVECTOR3 *pV, float angle );

// Yaw around the Y axis, a pitch around the X axis,
// and a roll around the Z axis.
D3DXQUATERNION* WINAPI D3DXQuaternionRotationYawPitchRoll
    ( D3DXQUATERNION *pOut, float yaw, float pitch, float roll );

// Quaternion multiplication.  The result represents the rotation Q2 
// followed by the rotation Q1.  (Out = Q2 * Q1)
D3DXQUATERNION* WINAPI D3DXQuaternionMultiply
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ1,
      const D3DXQUATERNION *pQ2 );

D3DXQUATERNION* WINAPI D3DXQuaternionNormalize
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ );

// Conjugate and re-norm
D3DXQUATERNION* WINAPI D3DXQuaternionInverse
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ );

// Expects unit quaternions.
// if q = (cos(theta), sin(theta) * v); ln(q) = (0, theta * v)
D3DXQUATERNION* WINAPI D3DXQuaternionLn
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ );

// Expects pure quaternions. (w == 0)  w is ignored in calculation.
// if q = (0, theta * v); exp(q) = (cos(theta), sin(theta) * v)
D3DXQUATERNION* WINAPI D3DXQuaternionExp
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ );

// Spherical linear interpolation between Q1 (s == 0) and Q2 (s == 1).
// Expects unit quaternions.
D3DXQUATERNION* WINAPI D3DXQuaternionSlerp
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ1,
      const D3DXQUATERNION *pQ2, float t );

// Spherical quadrangle interpolation.
// Slerp(Slerp(Q1, Q4, t), Slerp(Q2, Q3, t), 2t(1-t))
D3DXQUATERNION* WINAPI D3DXQuaternionSquad
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ1,
      const D3DXQUATERNION *pQ2, const D3DXQUATERNION *pQ3,
      const D3DXQUATERNION *pQ4, float t );

// Slerp(Slerp(Q1, Q2, f+g), Slerp(Q1, Q3, f+g), g/(f+g))
D3DXQUATERNION* WINAPI D3DXQuaternionBaryCentric
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ1,
      const D3DXQUATERNION *pQ2, const D3DXQUATERNION *pQ3,
      float f, float g );

#ifdef __cplusplus
}
#endif


//--------------------------
// Plane
//--------------------------

// inline

// ax + by + cz + dw
float D3DXPlaneDot
    ( const D3DXPLANE *pP, const D3DXVECTOR4 *pV);

// ax + by + cz + d
float D3DXPlaneDotCoord
    ( const D3DXPLANE *pP, const D3DXVECTOR3 *pV);

// ax + by + cz
float D3DXPlaneDotNormal
    ( const D3DXPLANE *pP, const D3DXVECTOR3 *pV);

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

// Normalize plane (so that |a,b,c| == 1)
D3DXPLANE* WINAPI D3DXPlaneNormalize
    ( D3DXPLANE *pOut, const D3DXPLANE *pP);

// Find the intersection between a plane and a line.  If the line is
// parallel to the plane, NULL is returned.
D3DXVECTOR3* WINAPI D3DXPlaneIntersectLine
    ( D3DXVECTOR3 *pOut, const D3DXPLANE *pP, const D3DXVECTOR3 *pV1,
      const D3DXVECTOR3 *pV2);

// Construct a plane from a point and a normal
D3DXPLANE* WINAPI D3DXPlaneFromPointNormal
    ( D3DXPLANE *pOut, const D3DXVECTOR3 *pPoint, const D3DXVECTOR3 *pNormal);

// Construct a plane from 3 points
D3DXPLANE* WINAPI D3DXPlaneFromPoints
    ( D3DXPLANE *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2,
      const D3DXVECTOR3 *pV3);

// Transform a plane by a matrix.  The vector (a,b,c) must be normal.
// M must be an affine transform.
D3DXPLANE* WINAPI D3DXPlaneTransform
    ( D3DXPLANE *pOut, const D3DXPLANE *pP, const D3DXMATRIX *pM );

#ifdef __cplusplus
}
#endif


//--------------------------
// Color
//--------------------------

// inline

// (1-r, 1-g, 1-b, a)
D3DXCOLOR* D3DXColorNegative
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC);

D3DXCOLOR* D3DXColorAdd
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2);

D3DXCOLOR* D3DXColorSubtract
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2);

D3DXCOLOR* D3DXColorScale
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC, float s);

// (r1*r2, g1*g2, b1*b2, a1*a2)
D3DXCOLOR* D3DXColorModulate
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2);

// Linear interpolation of r,g,b, and a. C1 + s(C2-C1)
D3DXCOLOR* D3DXColorLerp
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2, float s);

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

// Interpolate r,g,b between desaturated color and color.
// DesaturatedColor + s(Color - DesaturatedColor)
D3DXCOLOR* WINAPI D3DXColorAdjustSaturation
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC, float s);

// Interpolate r,g,b between 50% grey and color.  Grey + s(Color - Grey)
D3DXCOLOR* WINAPI D3DXColorAdjustContrast
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC, float c);

#ifdef __cplusplus
}
#endif






//===========================================================================
//
//    Matrix Stack
//
//===========================================================================

DECLARE_INTERFACE_(ID3DXMatrixStack, IUnknown)
{
    //
    // IUnknown methods
    //
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    //
    // ID3DXMatrixStack methods
    //

    // Pops the top of the stack, returns the current top
    // *after* popping the top.
    STDMETHOD(Pop)(THIS) PURE;

    // Pushes the stack by one, duplicating the current matrix.
    STDMETHOD(Push)(THIS) PURE;

    // Loads identity in the current matrix.
    STDMETHOD(LoadIdentity)(THIS) PURE;

    // Loads the given matrix into the current matrix
    STDMETHOD(LoadMatrix)(THIS_ const D3DXMATRIX* pM ) PURE;

    // Right-Multiplies the given matrix to the current matrix.
    // (transformation is about the current world origin)
    STDMETHOD(MultMatrix)(THIS_ const D3DXMATRIX* pM ) PURE;

    // Left-Multiplies the given matrix to the current matrix
    // (transformation is about the local origin of the object)
    STDMETHOD(MultMatrixLocal)(THIS_ const D3DXMATRIX* pM ) PURE;

    // Right multiply the current matrix with the computed rotation
    // matrix, counterclockwise about the given axis with the given angle.
    // (rotation is about the current world origin)
    STDMETHOD(RotateAxis)
        (THIS_ const D3DXVECTOR3* pV, float angle) PURE;

    // Left multiply the current matrix with the computed rotation
    // matrix, counterclockwise about the given axis with the given angle.
    // (rotation is about the local origin of the object)
    STDMETHOD(RotateAxisLocal)
        (THIS_ const D3DXVECTOR3* pV, float angle) PURE;

    // Right multiply the current matrix with the computed rotation
    // matrix. All angles are counterclockwise. (rotation is about the
    // current world origin)

    // The rotation is composed of a yaw around the Y axis, a pitch around
    // the X axis, and a roll around the Z axis.
    STDMETHOD(RotateYawPitchRoll)
        (THIS_ float yaw, float pitch, float roll) PURE;

    // Left multiply the current matrix with the computed rotation
    // matrix. All angles are counterclockwise. (rotation is about the
    // local origin of the object)

    // The rotation is composed of a yaw around the Y axis, a pitch around
    // the X axis, and a roll around the Z axis.
    STDMETHOD(RotateYawPitchRollLocal)
        (THIS_ float yaw, float pitch, float roll) PURE;

    // Right multiply the current matrix with the computed scale
    // matrix. (transformation is about the current world origin)
    STDMETHOD(Scale)(THIS_ float x, float y, float z) PURE;

    // Left multiply the current matrix with the computed scale
    // matrix. (transformation is about the local origin of the object)
    STDMETHOD(ScaleLocal)(THIS_ float x, float y, float z) PURE;

    // Right multiply the current matrix with the computed translation
    // matrix. (transformation is about the current world origin)
    STDMETHOD(Translate)(THIS_ float x, float y, float z ) PURE;

    // Left multiply the current matrix with the computed translation
    // matrix. (transformation is about the local origin of the object)
    STDMETHOD(TranslateLocal)(THIS_ float x, float y, float z) PURE;

    // Obtain the current matrix at the top of the stack
    STDMETHOD_(D3DXMATRIX*, GetTop)(THIS) PURE;
};

#ifdef __cplusplus
extern "C" {
#endif

HRESULT WINAPI D3DXCreateMatrixStack( DWORD flags, LPD3DXMATRIXSTACK *ppStack );

#ifdef __cplusplus
}
#endif

#include "d3dxmath.inl"

#pragma warning(default:4201)

#endif // __D3DXMATH_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3dxsprite.h ===
///////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 1999 Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dxsprite.h
//  Content:    D3DX sprite helper functions
//
//      These functions allow you to use sprites with D3DX. A "sprite" is
//      loosely defined as a 2D image that you want to transfer to the 
//      rendering target. The source image can be a texture created
//      with the help of the D3DX texture loader; though advanced users may
//      want to create their own. A helper function (PrepareDeviceForSprite)
//      is provided to make it easy to set up render states on a device. 
//      (Again, advanced users can use their own created devices.) 
//
//      There are two general techniques for sprites; the simpler one just
//      specifies a destination rectangle and a rotation anlge. A more 
//      powerful technique supports rendering to non-rectangular quads.
//
//      Both techniques support clipping, alpha, and rotation. More
//      details are below.
//
///////////////////////////////////////////////////////////////////////////

#ifndef __D3DXSPRITE_H__
#define __D3DXSPRITE_H__

#include <d3d.h>
#include <limits.h>
#include "d3dxerr.h"

#ifdef __cplusplus
extern "C" {
#endif


//-------------------------------------------------------------------------
// D3DXPrepareDeviceForSprite:
//
// Call this function to set up all the render states necessary for
// BltSprite/WarpSprite to work correctly. (Advanced users may opt to
// not call this function first; in which case Blt/WarpSprite functions
// will use whatever render/texture states were set up on the device when
// they are called.)
//
// Warning: This function modifies render states and may impact performance
// negatively on some 3D hardware if it is called too often per frame.
//
// Warning: If the render state changes (other than through calls to 
// BltSprite or WarpSprite), you will need to call this function again before 
// calling BltSprite or WarpSprite.
//
// Details: This function modifies the the rendering first texture stage and 
// it modifies some renderstates for the entire device. Here is the exact 
// list:
// 
//   SetTextureStageState(0, D3DTSS_COLORARG1,         D3DTA_TEXTURE);
//   SetTextureStageState(0, D3DTSS_COLOROP,           D3DTOP_SELECTARG1);
//   SetTextureStageState(0, D3DTSS_ALPHAARG1,         D3DTA_TEXTURE);
//   SetTextureStageState(0, D3DTSS_ALPHAARG2,         D3DTA_DIFFUSE);
//   SetTextureStageState(0, D3DTSS_ALPHAOP,           D3DTOP_MODULATE);
//   SetTextureStageState(0, D3DTSS_MINFILTER,         D3DTFN_LINEAR);
//   SetTextureStageState(0, D3DTSS_MAGFILTER,         D3DTFG_LINEAR);
// 
//   SetRenderState(D3DRENDERSTATE_SRCBLEND,           D3DBLEND_SRCALPHA);
//   SetRenderState(D3DRENDERSTATE_DESTBLEND,          D3DBLEND_INVSRCALPHA);
//   SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,   TRUE);
//
//   Depending on the value of ZEnable parameter, this function will
//   will either call
//   SetRenderState(D3DRENDERSTATE_ZENABLE,            FALSE);
//   - or -
//   SetRenderState(D3DRENDERSTATE_ZENABLE,            TRUE);
//
// Parameters: 
//      pd3dDevice  - a pointer to the d3d device that you wish to prepare
//                    for use with D3DX Sprite Services
//      ZEnable     - a flag indicating whether you want the sprites to
//                    check and update the Z buffer as part of rendering.
//                    If ZEnable is FALSE, OR you are using
//                    alpha-blending, then it is necessary to render your
//                    sprites from back-to-front. 
//
//-------------------------------------------------------------------------

#ifdef __cplusplus
HRESULT WINAPI
    D3DXPrepareDeviceForSprite( LPDIRECT3DDEVICE7 pd3dDevice, 
                                BOOL ZEnable = FALSE);
#else
HRESULT WINAPI
    D3DXPrepareDeviceForSprite( LPDIRECT3DDEVICE7 pd3dDevice, 
                                BOOL ZEnable);
#endif



//-------------------------------------------------------------------------
// The D3DXDrawBasicSprite() function performs blitting of source images onto 
// a 3D rendering device. This function only calls SetTexture on the first 
// renderstage with the parameter (pd3dTexture) if that parameter is non-null. 
// This function assumes that D3DXPrepareDeviceForSprite has been called on 
// the device or that caller has in some other way correctly prepared the 
// renderstates.
//
// This function supports scaling, rotations, alpha-blending, and choosing 
// a source sub-rect.
// 
// Rotation angle is specified in radians. Both rotations and scales
// are applied around the center of the sprite; where the center of the
// sprite is half the width/height of the sprite, plus the offset parameter. 
//
// Use the offset parameter if you want the sprite's center to be something 
// other than the image center.
//
// The destination point indicates where you would like the center of
// the sprite to draw to.
//
// Parameters: 
//      pd3dTexture - a pointer to the surface containing the texture
//      pd3dDevice  - a pointer to the d3d device to render to. It is
//                    assumed that render states are set up. (See
//                    D3DXPrepareDeviceForSprite)
//      ppointDest  - a pointer to the target point for the sprite. The
//                    components of the vector must be in screen
//                    space.
//      alpha       - alpha value to apply to sprite. 1.0 means totally
//                    opaque; and 0.0 means totally transparent. 
//                    WARNING: If you are using alpha, then you should render
//                    from back to front in order to avoid rendering
//                    artifacts.
//      angleRad    - angle of rotation around the 'center' of the rect
//      scale       - a uniform scale that is applied to the source rect
//                    to specify the size of the image that is rendered
//      pOffset     - offset from the center of the source rect to use as the 
//                    center of rotation
//      pSourceRect - a rect that indicates what portion of the source
//                    source texture to use. If NULL is passed, then the
//                    entire source is used. If the source texture was 
//                    created via D3DX, then the rect should be specified
//                    in the coordinates of the original image (so that you
//                    don't have to worry about stretching/scaling that D3DX
//                    may have done to make the image work with your current
//                    3D Device.) Note that horizontal or vertical mirroring 
//                    may be simply accomplished by swapping the left/right 
//                    or top/bottom fields of this RECT.
//-------------------------------------------------------------------------

#ifdef __cplusplus
HRESULT WINAPI 
    D3DXDrawSpriteSimple(LPDIRECTDRAWSURFACE7  pd3dTexture, 
                         LPDIRECT3DDEVICE7     pd3dDevice, 
                         const D3DXVECTOR3     *ppointDest, 
                         float                 alpha        = 1.0f,
                         float                 scale        = 1.0f,
                         float                 angleRad     = 0.0f,
                         const D3DXVECTOR2     *pOffset     = NULL,
                         const RECT            *pSourceRect = NULL);
#else
HRESULT WINAPI 
    D3DXDrawSpriteSimple(LPDIRECTDRAWSURFACE7  pd3dTexture, 
                         LPDIRECT3DDEVICE7     pd3dDevice, 
                         D3DXVECTOR3           *ppointDest, 
                         float                 alpha,
                         float                 scale,
                         float                 angleRad,
                         D3DXVECTOR2           *pOffset,
                         RECT                  *pSourceRect);
#endif

//-------------------------------------------------------------------------
// The D3DXDrawSprite() function transforms source images onto a 3D 
// rendering device. It takes a general 4x4 matrix which is use to transform
// the points of a default rect: (left=-.5, top=-.5, right=+.5, bottom=+.5).
// (This default rect was chosen so that it was centered around the origin
// to ease setting up rotations. And it was chosen to have a width/height of one
// to ease setting up scales.)
// 
// This function only calls SetTexture on the first 
// renderstage with the parameter (pd3dTexture) if that parameter is non-null. 
// This function assumes that D3DXPrepareDeviceForSprite has been called on 
// the device or that caller has in some other way correctly prepared the 
// renderstates.
//
// This function supports alpha-blending, and choosing 
// a source sub-rect. (A value of NULL for source sub-rect means the entire
// texture is used.)
//
// Note that if the transformed points have a value for w (the homogenous
// coordinate) that is not 1, then this function will invert it and pass
// that value to D3D as the rhw field of a TLVERTEX. If the value for w is
// zero, then it use 1 as the rhw.
//
// Parameters: 
//      pd3dTexture - a pointer to the surface containing the texture
//      pd3dDevice  - a pointer to the d3d device to render to. It is
//                    assumed that render states are set up. (See
//                    D3DXPrepareDeviceForSprite)
//      pMatrixTransform - 4x4 matrix that specifies the transformation
//                    that will be applied to the default -.5 to +.5 
//                    rectangle.
//      alpha       - alpha value to apply to sprite. 1.0 means totally
//                    opaque; and 0.0 means totally transparent. 
//                    WARNING: If you are using alpha, then you should render
//                    from back to front in order to avoid rendering
//                    artifacts.Furthermore, you should avoid scenarios where 
//                    semi-transparent objects intersect.
//      pSourceRect - a rect that indicates what portion of the source
//                    source texture to use. If NULL is passed, then the
//                    entire source is used. If the source texture was 
//                    created via D3DX, then the rect should be specified
//                    in the coordinates of the original image (so that you
//                    don't have to worry about stretching/scaling that D3DX
//                    may have done to make the image work with your current
//                    3D Device.) Note that mirroring may be simply accomplished
//                    by swapping the left/right or top/bottom fields of
//                    this RECT.
// 
//-------------------------------------------------------------------------

#ifdef __cplusplus
HRESULT WINAPI 
    D3DXDrawSpriteTransform(LPDIRECTDRAWSURFACE7  pd3dTexture, 
                            LPDIRECT3DDEVICE7     pd3dDevice, 
                            const D3DXMATRIX      *pMatrixTransform, 
                            float                 alpha         = 1.0f,
                            const RECT            *pSourceRect  = NULL);
#else
HRESULT WINAPI 
    D3DXDrawSpriteTransform(LPDIRECTDRAWSURFACE7  pd3dTexture, 
                            LPDIRECT3DDEVICE7     pd3dDevice, 
                            D3DXMATRIX            *pMatrixTransform, 
                            float                 alpha,
                            RECT                  *pSourceRect);
#endif

//-------------------------------------------------------------------------
// The D3DXBuildSpriteTransform() function is a helper provided which
// creates a matrix corresponding to simple properties. This matrix is
// set up to pass directly to D3DXTransformSprite.
//
// Parameters: 
//      pMatrix     - a pointer to the result matrix
//      prectDest   - a pointer to the target rectangle for the sprite
//      angleRad    - angle of rotation around the 'center' of the rect
//      pOffset     - offset from the center of the source rect to use as the 
//                    center of rotation
// 
//-------------------------------------------------------------------------

#ifdef __cplusplus
void WINAPI
    D3DXBuildSpriteTransform(D3DXMATRIX            *pMatrix,
                             const RECT            *prectDest,
                             float                 angleRad     = 0.0f,
                             const D3DXVECTOR2     *pOffset     = NULL);
#else
void WINAPI
    D3DXBuildSpriteTransform(D3DXMATRIX            *pMatrix,
                             RECT                  *prectDest,
                             float                 angleRad,
                             D3DXVECTOR2           *pOffset);
#endif


//-------------------------------------------------------------------------
// The D3DXDrawSprite3D() function renders a texture onto a 3D quad. The
// quad ABCD is broken into two triangles ABC and ACD which are rendered
// via DrawPrim.
//
// Parameters: 
//      pd3dTexture - a pointer to the surface containing the texture
//      pd3dDevice  - a pointer to the d3d device to render to. It is
//                    assumed that render states are set up. (See
//                    D3DXPrepareDeviceForSprite)
//      quad        - array of 4 points in the following order:
//                    upper-left, upper-right, lower-right, lower-left.
//                    If these vectors contain a W, then this function
//                    will take the reciprocal of that value to pass as
//                    as the rhw (i.e. reciprocal homogenous w).
//      alpha       - alpha value to apply to sprite. 1.0 means totally
//                    opaque; and 0.0 means totally transparent. 
//                    WARNING: If you are using alpha, then you should render
//                    from back to front in order to avoid rendering
//                    artifacts.Furthermore, you should avoid scenarios where 
//                    semi-transparent objects intersect.
//      pSourceRect - a rect that indicates what portion of the source
//                    source texture to use. If NULL is passed, then the
//                    entire source is used. If the source texture was 
//                    created via D3DX, then the rect should be specified
//                    in the coordinates of the original image (so that you
//                    don't have to worry about stretching/scaling that D3DX
//                    may have done to make the image work with your current
//                    3D Device.) Note that mirroring may be simply accomplished
//                    by swapping the left/right or top/bottom fields of
//                    this RECT.
//-------------------------------------------------------------------------

#ifdef __cplusplus
HRESULT WINAPI 
    D3DXDrawSprite3D(LPDIRECTDRAWSURFACE7  pd3dTexture, 
                     LPDIRECT3DDEVICE7     pd3dDevice, 
                     const D3DXVECTOR4     quad[4], 
                     float                 alpha         = 1.0f,
                     const RECT            *pSourceRect  = NULL);
#else
HRESULT WINAPI 
    D3DXDrawSprite3D(LPDIRECTDRAWSURFACE7  pd3dTexture, 
                     LPDIRECT3DDEVICE7     pd3dDevice, 
                     D3DXVECTOR4           quad[4], 
                     float                 alpha,
                     RECT                  *pSourceRect);
#endif



#ifdef __cplusplus
} // extern "C"
#endif

#endif // __D3DXSPRITE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3dxmath.inl ===
//////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 1998 - 1999 Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dxmath.inl
//  Content:    D3DX math inline functions
//
//////////////////////////////////////////////////////////////////////////////

#ifndef __D3DXMATH_INL__
#define __D3DXMATH_INL__


//===========================================================================
//
// Inline Class Methods
//
//===========================================================================

#ifdef __cplusplus

//--------------------------
// 2D Vector
//--------------------------

D3DXINLINE 
D3DXVECTOR2::D3DXVECTOR2( const float *pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    x = pf[0];
    y = pf[1];
}

D3DXINLINE 
D3DXVECTOR2::D3DXVECTOR2( float fx, float fy )
{
    x = fx;
    y = fy;
}

// casting
D3DXINLINE 
D3DXVECTOR2::operator float* ()
{
    return (float *) &x;
}

D3DXINLINE 
D3DXVECTOR2::operator const float* () const
{
    return (const float *) &x;
}

// assignment operators
D3DXINLINE D3DXVECTOR2& 
D3DXVECTOR2::operator += ( const D3DXVECTOR2& v )
{
    x += v.x;
    y += v.y;
    return *this;
}

D3DXINLINE D3DXVECTOR2& 
D3DXVECTOR2::operator -= ( const D3DXVECTOR2& v )
{
    x -= v.x;
    y -= v.y;
    return *this;
}

D3DXINLINE D3DXVECTOR2& 
D3DXVECTOR2::operator *= ( float f )
{
    x *= f;
    y *= f;
    return *this;
}

D3DXINLINE D3DXVECTOR2& 
D3DXVECTOR2::operator /= ( float f )
{
    float fInv = 1.0f / f;
    x *= fInv;
    y *= fInv;
    return *this;
}

// unary operators
D3DXINLINE D3DXVECTOR2 
D3DXVECTOR2::operator + () const
{
    return *this;
}

D3DXINLINE D3DXVECTOR2 
D3DXVECTOR2::operator - () const
{
    return D3DXVECTOR2(-x, -y);
}

// binary operators
D3DXINLINE D3DXVECTOR2 
D3DXVECTOR2::operator + ( const D3DXVECTOR2& v ) const
{
    return D3DXVECTOR2(x + v.x, y + v.y);
}

D3DXINLINE D3DXVECTOR2 
D3DXVECTOR2::operator - ( const D3DXVECTOR2& v ) const
{
    return D3DXVECTOR2(x - v.x, y - v.y);
}

D3DXINLINE D3DXVECTOR2 
D3DXVECTOR2::operator * ( float f ) const
{
    return D3DXVECTOR2(x * f, y * f);
}

D3DXINLINE D3DXVECTOR2 
D3DXVECTOR2::operator / ( float f ) const
{
    float fInv = 1.0f / f;
    return D3DXVECTOR2(x * fInv, y * fInv);
}


D3DXINLINE D3DXVECTOR2 
operator * ( float f, const D3DXVECTOR2& v )
{
    return D3DXVECTOR2(f * v.x, f * v.y);
}

D3DXINLINE BOOL 
D3DXVECTOR2::operator == ( const D3DXVECTOR2& v ) const
{
    return x == v.x && y == v.y;
}

D3DXINLINE BOOL 
D3DXVECTOR2::operator != ( const D3DXVECTOR2& v ) const
{
    return x != v.x || y != v.y;
}




//--------------------------
// 3D Vector
//--------------------------
D3DXINLINE 
D3DXVECTOR3::D3DXVECTOR3( const float *pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    x = pf[0];
    y = pf[1];
    z = pf[2];
}

D3DXINLINE 
D3DXVECTOR3::D3DXVECTOR3( const D3DVECTOR& v )
{
    x = v.x;
    y = v.y;
    z = v.z;
}

D3DXINLINE 
D3DXVECTOR3::D3DXVECTOR3( float fx, float fy, float fz )
{
    x = fx;
    y = fy;
    z = fz;
}


// casting
D3DXINLINE 
D3DXVECTOR3::operator float* ()
{
    return (float *) &x;
}

D3DXINLINE 
D3DXVECTOR3::operator const float* () const
{
    return (const float *) &x;
}


D3DXINLINE 
D3DXVECTOR3::operator D3DVECTOR* ()
{
    return (D3DVECTOR *) &x;
}

D3DXINLINE 
D3DXVECTOR3::operator const D3DVECTOR* () const
{
    return (const D3DVECTOR *) &x;
}


D3DXINLINE 
D3DXVECTOR3::operator D3DVECTOR& ()
{
    return *((D3DVECTOR *) &x);
}

D3DXINLINE 
D3DXVECTOR3::operator const D3DVECTOR& () const
{
    return *((const D3DVECTOR *) &x);
}


// assignment operators
D3DXINLINE D3DXVECTOR3& 
D3DXVECTOR3::operator += ( const D3DXVECTOR3& v )
{
    x += v.x;
    y += v.y;
    z += v.z;
    return *this;
}

D3DXINLINE D3DXVECTOR3& 
D3DXVECTOR3::operator -= ( const D3DXVECTOR3& v )
{
    x -= v.x;
    y -= v.y;
    z -= v.z;
    return *this;
}

D3DXINLINE D3DXVECTOR3& 
D3DXVECTOR3::operator *= ( float f )
{
    x *= f;
    y *= f;
    z *= f;
    return *this;
}

D3DXINLINE D3DXVECTOR3& 
D3DXVECTOR3::operator /= ( float f )
{
    float fInv = 1.0f / f;
    x *= fInv;
    y *= fInv;
    z *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXVECTOR3 
D3DXVECTOR3::operator + () const
{
    return *this;
}

D3DXINLINE D3DXVECTOR3 
D3DXVECTOR3::operator - () const
{
    return D3DXVECTOR3(-x, -y, -z);
}


// binary operators
D3DXINLINE D3DXVECTOR3 
D3DXVECTOR3::operator + ( const D3DXVECTOR3& v ) const
{
    return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);
}

D3DXINLINE D3DXVECTOR3 
D3DXVECTOR3::operator - ( const D3DXVECTOR3& v ) const
{
    return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);
}

D3DXINLINE D3DXVECTOR3 
D3DXVECTOR3::operator * ( float f ) const
{
    return D3DXVECTOR3(x * f, y * f, z * f);
}

D3DXINLINE D3DXVECTOR3 
D3DXVECTOR3::operator / ( float f ) const
{
    float fInv = 1.0f / f;
    return D3DXVECTOR3(x * fInv, y * fInv, z * fInv);
}


D3DXINLINE D3DXVECTOR3 
operator * ( float f, const struct D3DXVECTOR3& v )
{
    return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);
}


D3DXINLINE BOOL 
D3DXVECTOR3::operator == ( const D3DXVECTOR3& v ) const
{
    return x == v.x && y == v.y && z == v.z;
}

D3DXINLINE BOOL 
D3DXVECTOR3::operator != ( const D3DXVECTOR3& v ) const
{
    return x != v.x || y != v.y || z != v.z;
}



//--------------------------
// 4D Vector
//--------------------------
D3DXINLINE 
D3DXVECTOR4::D3DXVECTOR4( const float *pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    x = pf[0];
    y = pf[1];
    z = pf[2];
    w = pf[3];
}

D3DXINLINE 
D3DXVECTOR4::D3DXVECTOR4( float fx, float fy, float fz, float fw )
{
    x = fx;
    y = fy;
    z = fz;
    w = fw;
}


// casting
D3DXINLINE 
D3DXVECTOR4::operator float* ()
{
    return (float *) &x;
}

D3DXINLINE 
D3DXVECTOR4::operator const float* () const
{
    return (const float *) &x;
}


// assignment operators
D3DXINLINE D3DXVECTOR4& 
D3DXVECTOR4::operator += ( const D3DXVECTOR4& v )
{
    x += v.x;
    y += v.y;
    z += v.z;
    w += v.w;
    return *this;
}

D3DXINLINE D3DXVECTOR4& 
D3DXVECTOR4::operator -= ( const D3DXVECTOR4& v )
{
    x -= v.x;
    y -= v.y;
    z -= v.z;
    w -= v.w;
    return *this;
}

D3DXINLINE D3DXVECTOR4& 
D3DXVECTOR4::operator *= ( float f )
{
    x *= f;
    y *= f;
    z *= f;
    w *= f;
    return *this;
}

D3DXINLINE D3DXVECTOR4& 
D3DXVECTOR4::operator /= ( float f )
{
    float fInv = 1.0f / f;
    x *= fInv;
    y *= fInv;
    z *= fInv;
    w *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXVECTOR4 
D3DXVECTOR4::operator + () const
{
    return *this;
}

D3DXINLINE D3DXVECTOR4 
D3DXVECTOR4::operator - () const
{
    return D3DXVECTOR4(-x, -y, -z, -w);
}


// binary operators
D3DXINLINE D3DXVECTOR4 
D3DXVECTOR4::operator + ( const D3DXVECTOR4& v ) const
{
    return D3DXVECTOR4(x + v.x, y + v.y, z + v.z, w + v.w);
}

D3DXINLINE D3DXVECTOR4 
D3DXVECTOR4::operator - ( const D3DXVECTOR4& v ) const
{
    return D3DXVECTOR4(x - v.x, y - v.y, z - v.z, w - v.w);
}

D3DXINLINE D3DXVECTOR4 
D3DXVECTOR4::operator * ( float f ) const
{
    return D3DXVECTOR4(x * f, y * f, z * f, w * f);
}

D3DXINLINE D3DXVECTOR4 
D3DXVECTOR4::operator / ( float f ) const
{
    float fInv = 1.0f / f;
    return D3DXVECTOR4(x * fInv, y * fInv, z * fInv, w * fInv);
}


D3DXINLINE D3DXVECTOR4 
operator * ( float f, const D3DXVECTOR4& v )
{
    return D3DXVECTOR4(f * v.x, f * v.y, f * v.z, f * v.w);
}


D3DXINLINE BOOL 
D3DXVECTOR4::operator == ( const D3DXVECTOR4& v ) const
{
    return x == v.x && y == v.y && z == v.z && w == v.w;
}

D3DXINLINE BOOL 
D3DXVECTOR4::operator != ( const D3DXVECTOR4& v ) const
{
    return x != v.x || y != v.y || z != v.z || w != v.w;
}


//--------------------------
// Matrix
//--------------------------
D3DXINLINE 
D3DXMATRIX::D3DXMATRIX( const float* pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    memcpy(&m00, pf, sizeof(D3DXMATRIX));
}

D3DXINLINE 
D3DXMATRIX::D3DXMATRIX( const D3DMATRIX& mat )
{
    memcpy(&m00, &mat, sizeof(D3DXMATRIX));
}

D3DXINLINE 
D3DXMATRIX::D3DXMATRIX( float f00, float f01, float f02, float f03,
                        float f10, float f11, float f12, float f13,
                        float f20, float f21, float f22, float f23,
                        float f30, float f31, float f32, float f33 )
{
    m00 = f00; m01 = f01; m02 = f02; m03 = f03;
    m10 = f10; m11 = f11; m12 = f12; m13 = f13;
    m20 = f20; m21 = f21; m22 = f22; m23 = f23;
    m30 = f30; m31 = f31; m32 = f32; m33 = f33;
}



// access grants
D3DXINLINE float& 
D3DXMATRIX::operator () ( UINT iRow, UINT iCol )
{
    return m[iRow][iCol];
}

D3DXINLINE float  
D3DXMATRIX::operator () ( UINT iRow, UINT iCol ) const
{
    return m[iRow][iCol];
}


// casting operators
D3DXINLINE 
D3DXMATRIX::operator float* ()
{
    return (float *) &m00;
}

D3DXINLINE 
D3DXMATRIX::operator const float* () const
{
    return (const float *) &m00;
}


D3DXINLINE 
D3DXMATRIX::operator D3DMATRIX* ()
{
    return (D3DMATRIX *) &m00;
}

D3DXINLINE 
D3DXMATRIX::operator const D3DMATRIX* () const
{
    return (const D3DMATRIX *) &m00;
}


D3DXINLINE 
D3DXMATRIX::operator D3DMATRIX& ()
{
    return *((D3DMATRIX *) &m00);
}

D3DXINLINE 
D3DXMATRIX::operator const D3DMATRIX& () const
{
    return *((const D3DMATRIX *) &m00);
}


// assignment operators
D3DXINLINE D3DXMATRIX& 
D3DXMATRIX::operator *= ( const D3DXMATRIX& mat )
{
    D3DXMatrixMultiply(this, this, &mat);
    return *this;
}

D3DXINLINE D3DXMATRIX& 
D3DXMATRIX::operator += ( const D3DXMATRIX& mat )
{
    m00 += mat.m00; m01 += mat.m01; m02 += mat.m02; m03 += mat.m03;
    m10 += mat.m10; m11 += mat.m11; m12 += mat.m12; m13 += mat.m13;
    m20 += mat.m20; m21 += mat.m21; m22 += mat.m22; m23 += mat.m23;
    m30 += mat.m30; m31 += mat.m31; m32 += mat.m32; m33 += mat.m33;
    return *this;
}

D3DXINLINE D3DXMATRIX& 
D3DXMATRIX::operator -= ( const D3DXMATRIX& mat )
{
    m00 -= mat.m00; m01 -= mat.m01; m02 -= mat.m02; m03 -= mat.m03;
    m10 -= mat.m10; m11 -= mat.m11; m12 -= mat.m12; m13 -= mat.m13;
    m20 -= mat.m20; m21 -= mat.m21; m22 -= mat.m22; m23 -= mat.m23;
    m30 -= mat.m30; m31 -= mat.m31; m32 -= mat.m32; m33 -= mat.m33;
    return *this;
}

D3DXINLINE D3DXMATRIX& 
D3DXMATRIX::operator *= ( float f )
{
    m00 *= f; m01 *= f; m02 *= f; m03 *= f;
    m10 *= f; m11 *= f; m12 *= f; m13 *= f;
    m20 *= f; m21 *= f; m22 *= f; m23 *= f;
    m30 *= f; m31 *= f; m32 *= f; m33 *= f;
    return *this;
}

D3DXINLINE D3DXMATRIX& 
D3DXMATRIX::operator /= ( float f )
{
    float fInv = 1.0f / f;
    m00 *= fInv; m01 *= fInv; m02 *= fInv; m03 *= fInv;
    m10 *= fInv; m11 *= fInv; m12 *= fInv; m13 *= fInv;
    m20 *= fInv; m21 *= fInv; m22 *= fInv; m23 *= fInv;
    m30 *= fInv; m31 *= fInv; m32 *= fInv; m33 *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator + () const
{
    return *this;
}

D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator - () const
{
    return D3DXMATRIX(-m00, -m01, -m02, -m03,
                      -m10, -m11, -m12, -m13,
                      -m20, -m21, -m22, -m23,
                      -m30, -m31, -m32, -m33);
}


// binary operators
D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator * ( const D3DXMATRIX& mat ) const
{
    D3DXMATRIX matT;
    D3DXMatrixMultiply(&matT, this, &mat);
    return matT;
}

D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator + ( const D3DXMATRIX& mat ) const
{
    return D3DXMATRIX(m00 + mat.m00, m01 + mat.m01, m02 + mat.m02, m03 + mat.m03, 
                      m10 + mat.m10, m11 + mat.m11, m12 + mat.m12, m13 + mat.m13, 
                      m20 + mat.m20, m21 + mat.m21, m22 + mat.m22, m23 + mat.m23, 
                      m30 + mat.m30, m31 + mat.m31, m32 + mat.m32, m33 + mat.m33);
}    

D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator - ( const D3DXMATRIX& mat ) const
{
    return D3DXMATRIX(m00 - mat.m00, m01 - mat.m01, m02 - mat.m02, m03 - mat.m03, 
                      m10 - mat.m10, m11 - mat.m11, m12 - mat.m12, m13 - mat.m13, 
                      m20 - mat.m20, m21 - mat.m21, m22 - mat.m22, m23 - mat.m23, 
                      m30 - mat.m30, m31 - mat.m31, m32 - mat.m32, m33 - mat.m33);
}

D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator * ( float f ) const
{
    return D3DXMATRIX(m00 * f, m01 * f, m02 * f, m03 * f, 
                      m10 * f, m11 * f, m12 * f, m13 * f, 
                      m20 * f, m21 * f, m22 * f, m23 * f, 
                      m30 * f, m31 * f, m32 * f, m33 * f);
}

D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator / ( float f ) const
{
    float fInv = 1.0f / f;
    return D3DXMATRIX(m00 * fInv, m01 * fInv, m02 * fInv, m03 * fInv, 
                      m10 * fInv, m11 * fInv, m12 * fInv, m13 * fInv, 
                      m20 * fInv, m21 * fInv, m22 * fInv, m23 * fInv, 
                      m30 * fInv, m31 * fInv, m32 * fInv, m33 * fInv);
}


D3DXINLINE D3DXMATRIX 
operator * ( float f, const D3DXMATRIX& mat )
{
    return D3DXMATRIX(f * mat.m00, f * mat.m01, f * mat.m02, f * mat.m03, 
                      f * mat.m10, f * mat.m11, f * mat.m12, f * mat.m13, 
                      f * mat.m20, f * mat.m21, f * mat.m22, f * mat.m23, 
                      f * mat.m30, f * mat.m31, f * mat.m32, f * mat.m33);
}


D3DXINLINE BOOL 
D3DXMATRIX::operator == ( const D3DXMATRIX& mat ) const
{
    return 0 == memcmp(this, &mat, sizeof(D3DXMATRIX));
}

D3DXINLINE BOOL 
D3DXMATRIX::operator != ( const D3DXMATRIX& mat ) const
{
    return 0 != memcmp(this, &mat, sizeof(D3DXMATRIX));
}



//--------------------------
// Quaternion
//--------------------------

D3DXINLINE 
D3DXQUATERNION::D3DXQUATERNION( const float* pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    x = pf[0];
    y = pf[1];
    z = pf[2];
    w = pf[3];
}

D3DXINLINE 
D3DXQUATERNION::D3DXQUATERNION( float fx, float fy, float fz, float fw )
{
    x = fx;
    y = fy;
    z = fz;
    w = fw;
}


// casting
D3DXINLINE 
D3DXQUATERNION::operator float* ()
{
    return (float *) &x;
}

D3DXINLINE 
D3DXQUATERNION::operator const float* () const
{
    return (const float *) &x;
}


// assignment operators
D3DXINLINE D3DXQUATERNION& 
D3DXQUATERNION::operator += ( const D3DXQUATERNION& q )
{
    x += q.x;
    y += q.y;
    z += q.z;
    w += q.w;
    return *this;
}

D3DXINLINE D3DXQUATERNION& 
D3DXQUATERNION::operator -= ( const D3DXQUATERNION& q )
{
    x -= q.x;
    y -= q.y;
    z -= q.z;
    w -= q.w;
    return *this;
}

D3DXINLINE D3DXQUATERNION& 
D3DXQUATERNION::operator *= ( const D3DXQUATERNION& q )
{
    D3DXQuaternionMultiply(this, this, &q);
    return *this;
}

D3DXINLINE D3DXQUATERNION& 
D3DXQUATERNION::operator *= ( float f )
{
    x *= f;
    y *= f;
    z *= f;
    w *= f;
    return *this;
}

D3DXINLINE D3DXQUATERNION& 
D3DXQUATERNION::operator /= ( float f )
{
    float fInv = 1.0f / f;
    x *= fInv;
    y *= fInv;
    z *= fInv;
    w *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXQUATERNION  
D3DXQUATERNION::operator + () const
{
    return *this;
}

D3DXINLINE D3DXQUATERNION  
D3DXQUATERNION::operator - () const
{
    return D3DXQUATERNION(-x, -y, -z, -w);
}


// binary operators
D3DXINLINE D3DXQUATERNION 
D3DXQUATERNION::operator + ( const D3DXQUATERNION& q ) const
{
    return D3DXQUATERNION(x + q.x, y + q.y, z + q.z, w + q.w);
}

D3DXINLINE D3DXQUATERNION 
D3DXQUATERNION::operator - ( const D3DXQUATERNION& q ) const
{
    return D3DXQUATERNION(x - q.x, y - q.y, z - q.z, w - q.w);
}

D3DXINLINE D3DXQUATERNION 
D3DXQUATERNION::operator * ( const D3DXQUATERNION& q ) const
{
    D3DXQUATERNION qT;
    D3DXQuaternionMultiply(&qT, this, &q);
    return qT;
}

D3DXINLINE D3DXQUATERNION 
D3DXQUATERNION::operator * ( float f ) const
{
    return D3DXQUATERNION(x * f, y * f, z * f, w * f);
}

D3DXINLINE D3DXQUATERNION 
D3DXQUATERNION::operator / ( float f ) const
{
    float fInv = 1.0f / f;
    return D3DXQUATERNION(x * fInv, y * fInv, z * fInv, w * fInv);
}


D3DXINLINE D3DXQUATERNION 
operator * (float f, const D3DXQUATERNION& q )
{
    return D3DXQUATERNION(f * q.x, f * q.y, f * q.z, f * q.w);
}


D3DXINLINE BOOL 
D3DXQUATERNION::operator == ( const D3DXQUATERNION& q ) const
{
    return x == q.x && y == q.y && z == q.z && w == q.w;
}

D3DXINLINE BOOL 
D3DXQUATERNION::operator != ( const D3DXQUATERNION& q ) const
{
    return x != q.x || y != q.y || z != q.z || w != q.w;
}



//--------------------------
// Plane
//--------------------------

D3DXINLINE 
D3DXPLANE::D3DXPLANE( const float* pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    a = pf[0];
    b = pf[1];
    c = pf[2];
    d = pf[3];
}

D3DXINLINE 
D3DXPLANE::D3DXPLANE( float fa, float fb, float fc, float fd )
{
    a = fa;
    b = fb;
    c = fc;
    d = fd;
}


// casting
D3DXINLINE 
D3DXPLANE::operator float* ()
{
    return (float *) &a;
}

D3DXINLINE 
D3DXPLANE::operator const float* () const
{
    return (const float *) &a;
}


// unary operators
D3DXINLINE D3DXPLANE 
D3DXPLANE::operator + () const
{
    return *this;
}

D3DXINLINE D3DXPLANE 
D3DXPLANE::operator - () const
{
    return D3DXPLANE(-a, -b, -c, -d);
}


// binary operators
D3DXINLINE BOOL 
D3DXPLANE::operator == ( const D3DXPLANE& p ) const
{
    return a == p.a && b == p.b && c == p.c && d == p.d;
}

D3DXINLINE BOOL 
D3DXPLANE::operator != ( const D3DXPLANE& p ) const
{
    return a != p.a || b != p.b || c != p.c || d != p.d;
}




//--------------------------
// Color
//--------------------------

D3DXINLINE 
D3DXCOLOR::D3DXCOLOR( DWORD dw )
{
    const float f = 1.0f / 255.0f;
    r = f * (float) (unsigned char) (dw >> 16);
    g = f * (float) (unsigned char) (dw >>  8);
    b = f * (float) (unsigned char) (dw >>  0);
    a = f * (float) (unsigned char) (dw >> 24);
}

D3DXINLINE 
D3DXCOLOR::D3DXCOLOR( const float* pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    r = pf[0];
    g = pf[1];
    b = pf[2];
    a = pf[3];
}

D3DXINLINE 
D3DXCOLOR::D3DXCOLOR( const D3DCOLORVALUE& c )
{
    r = c.r;
    g = c.g;
    b = c.b;
    a = c.a;
}

D3DXINLINE 
D3DXCOLOR::D3DXCOLOR( float fr, float fg, float fb, float fa )
{
    r = fr;
    g = fg;
    b = fb;
    a = fa;
}


// casting
D3DXINLINE 
D3DXCOLOR::operator DWORD () const
{
    DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);
    DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);
    DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);
    DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

    return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;
}


D3DXINLINE 
D3DXCOLOR::operator float * ()
{
    return (float *) &r;
}

D3DXINLINE 
D3DXCOLOR::operator const float * () const
{
    return (const float *) &r;
}


D3DXINLINE 
D3DXCOLOR::operator D3DCOLORVALUE * ()
{
    return (D3DCOLORVALUE *) &r;
}

D3DXINLINE 
D3DXCOLOR::operator const D3DCOLORVALUE * () const
{
    return (const D3DCOLORVALUE *) &r;
}


D3DXINLINE 
D3DXCOLOR::operator D3DCOLORVALUE& ()
{
    return *((D3DCOLORVALUE *) &r);
}

D3DXINLINE 
D3DXCOLOR::operator const D3DCOLORVALUE& () const
{
    return *((const D3DCOLORVALUE *) &r);
}


// assignment operators
D3DXINLINE D3DXCOLOR& 
D3DXCOLOR::operator += ( const D3DXCOLOR& c )
{
    r += c.r;
    g += c.g;
    b += c.b;
    a += c.a;
    return *this;
}

D3DXINLINE D3DXCOLOR& 
D3DXCOLOR::operator -= ( const D3DXCOLOR& c )
{
    r -= c.r;
    g -= c.g;
    b -= c.b;
    a -= c.a;
    return *this;
}

D3DXINLINE D3DXCOLOR& 
D3DXCOLOR::operator *= ( float f )
{
    r *= f;
    g *= f;
    b *= f;
    a *= f;
    return *this;
}

D3DXINLINE D3DXCOLOR& 
D3DXCOLOR::operator /= ( float f )
{
    float fInv = 1.0f / f;
    r *= fInv;
    g *= fInv;
    b *= fInv;
    a *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXCOLOR 
D3DXCOLOR::operator + () const
{
    return *this;
}

D3DXINLINE D3DXCOLOR 
D3DXCOLOR::operator - () const
{
    return D3DXCOLOR(-r, -g, -b, -a);
}


// binary operators
D3DXINLINE D3DXCOLOR 
D3DXCOLOR::operator + ( const D3DXCOLOR& c ) const
{
    return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);
}

D3DXINLINE D3DXCOLOR 
D3DXCOLOR::operator - ( const D3DXCOLOR& c ) const
{
    return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);
}

D3DXINLINE D3DXCOLOR 
D3DXCOLOR::operator * ( float f ) const
{
    return D3DXCOLOR(r * f, g * f, b * f, a * f);
}

D3DXINLINE D3DXCOLOR 
D3DXCOLOR::operator / ( float f ) const
{
    float fInv = 1.0f / f;
    return D3DXCOLOR(r * fInv, g * fInv, b * fInv, a * fInv);
}


D3DXINLINE D3DXCOLOR 
operator * (float f, const D3DXCOLOR& c )
{
    return D3DXCOLOR(f * c.r, f * c.g, f * c.b, f * c.a);
}


D3DXINLINE BOOL 
D3DXCOLOR::operator == ( const D3DXCOLOR& c ) const
{
    return r == c.r && g == c.g && b == c.b && a == c.a;
}

D3DXINLINE BOOL 
D3DXCOLOR::operator != ( const D3DXCOLOR& c ) const
{
    return r != c.r || g != c.g || b != c.b || a != c.a;
}


#endif //__cplusplus



//===========================================================================
//
// Inline functions
//
//===========================================================================


//--------------------------
// 2D Vector
//--------------------------

D3DXINLINE float D3DXVec2Length
    ( const D3DXVECTOR2 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

#ifdef __cplusplus
    return sqrtf(pV->x * pV->x + pV->y * pV->y);
#else
    return (float) sqrt(pV->x * pV->x + pV->y * pV->y);
#endif 
}

D3DXINLINE float D3DXVec2LengthSq
    ( const D3DXVECTOR2 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

    return pV->x * pV->x + pV->y * pV->y;
}

D3DXINLINE float D3DXVec2Dot
    ( const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pV1 || !pV2)
        return 0.0f;
#endif

    return pV1->x * pV2->x + pV1->y * pV2->y;
}

D3DXINLINE float D3DXVec2CCW
    ( const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pV1 || !pV2)
        return 0.0f;
#endif

    return pV1->x * pV2->y - pV1->y * pV2->x;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Add
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + pV2->x;
    pOut->y = pV1->y + pV2->y;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Subtract
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x - pV2->x;
    pOut->y = pV1->y - pV2->y;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Minimize
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x < pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y < pV2->y ? pV1->y : pV2->y;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Maximize
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x > pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y > pV2->y ? pV1->y : pV2->y;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Scale
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV, float s )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV)
        return NULL;
#endif

    pOut->x = pV->x * s;
    pOut->y = pV->y * s;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Lerp
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2,
      float s )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + s * (pV2->x - pV1->x);
    pOut->y = pV1->y + s * (pV2->y - pV1->y);
    return pOut;
}


//--------------------------
// 3D Vector
//--------------------------

D3DXINLINE float D3DXVec3Length
    ( const D3DXVECTOR3 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

#ifdef __cplusplus
    return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);
#else
    return (float) sqrt(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);
#endif
}

D3DXINLINE float D3DXVec3LengthSq
    ( const D3DXVECTOR3 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

    return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;
}

D3DXINLINE float D3DXVec3Dot
    ( const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pV1 || !pV2)
        return 0.0f;
#endif

    return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Cross
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 )
{
    D3DXVECTOR3 v;

#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    v.x = pV1->y * pV2->z - pV1->z * pV2->y;
    v.y = pV1->z * pV2->x - pV1->x * pV2->z;
    v.z = pV1->x * pV2->y - pV1->y * pV2->x;

    *pOut = v;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Add
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + pV2->x;
    pOut->y = pV1->y + pV2->y;
    pOut->z = pV1->z + pV2->z;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Subtract
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x - pV2->x;
    pOut->y = pV1->y - pV2->y;
    pOut->z = pV1->z - pV2->z;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Minimize
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x < pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y < pV2->y ? pV1->y : pV2->y;
    pOut->z = pV1->z < pV2->z ? pV1->z : pV2->z;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Maximize
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x > pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y > pV2->y ? pV1->y : pV2->y;
    pOut->z = pV1->z > pV2->z ? pV1->z : pV2->z;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Scale
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV, float s)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV)
        return NULL;
#endif

    pOut->x = pV->x * s;
    pOut->y = pV->y * s;
    pOut->z = pV->z * s;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Lerp
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2,
      float s )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + s * (pV2->x - pV1->x);
    pOut->y = pV1->y + s * (pV2->y - pV1->y);
    pOut->z = pV1->z + s * (pV2->z - pV1->z);
    return pOut;
}


//--------------------------
// 4D Vector
//--------------------------

D3DXINLINE float D3DXVec4Length
    ( const D3DXVECTOR4 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

#ifdef __cplusplus
    return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z + pV->w * pV->w);
#else
    return (float) sqrt(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z + pV->w * pV->w);
#endif
}

D3DXINLINE float D3DXVec4LengthSq
    ( const D3DXVECTOR4 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

    return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z + pV->w * pV->w;
}

D3DXINLINE float D3DXVec4Dot
    ( const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pV1 || !pV2)
        return 0.0f;
#endif

    return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z + pV1->w * pV2->w;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Add
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + pV2->x;
    pOut->y = pV1->y + pV2->y;
    pOut->z = pV1->z + pV2->z;
    pOut->w = pV1->w + pV2->w;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Subtract
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x - pV2->x;
    pOut->y = pV1->y - pV2->y;
    pOut->z = pV1->z - pV2->z;
    pOut->w = pV1->w - pV2->w;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Minimize
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x < pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y < pV2->y ? pV1->y : pV2->y;
    pOut->z = pV1->z < pV2->z ? pV1->z : pV2->z;
    pOut->w = pV1->w < pV2->w ? pV1->w : pV2->w;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Maximize
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x > pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y > pV2->y ? pV1->y : pV2->y;
    pOut->z = pV1->z > pV2->z ? pV1->z : pV2->z;
    pOut->w = pV1->w > pV2->w ? pV1->w : pV2->w;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Scale
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV, float s)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV)
        return NULL;
#endif

    pOut->x = pV->x * s;
    pOut->y = pV->y * s;
    pOut->z = pV->z * s;
    pOut->w = pV->w * s;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Lerp
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2,
      float s )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + s * (pV2->x - pV1->x);
    pOut->y = pV1->y + s * (pV2->y - pV1->y);
    pOut->z = pV1->z + s * (pV2->z - pV1->z);
    pOut->w = pV1->w + s * (pV2->w - pV1->w);
    return pOut;
}


//--------------------------
// 4D Matrix
//--------------------------

D3DXINLINE D3DXMATRIX* D3DXMatrixIdentity
    ( D3DXMATRIX *pOut )
{
#ifdef D3DX_DEBUG
    if(!pOut)
        return NULL;
#endif

    pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] = 
    pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] = 
    pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] = 
    pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

    pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;
    return pOut;
}


D3DXINLINE BOOL D3DXMatrixIsIdentity
    ( const D3DXMATRIX *pM )
{
#ifdef D3DX_DEBUG
    if(!pM)
        return FALSE;
#endif

    return pM->m[0][0] == 1.0f && pM->m[0][1] == 0.0f && pM->m[0][2] == 0.0f && pM->m[0][3] == 0.0f &&
           pM->m[1][0] == 0.0f && pM->m[1][1] == 1.0f && pM->m[1][2] == 0.0f && pM->m[1][3] == 0.0f &&
           pM->m[2][0] == 0.0f && pM->m[2][1] == 0.0f && pM->m[2][2] == 1.0f && pM->m[2][3] == 0.0f &&
           pM->m[3][0] == 0.0f && pM->m[3][1] == 0.0f && pM->m[3][2] == 0.0f && pM->m[3][3] == 1.0f;
}


//--------------------------
// Quaternion
//--------------------------

D3DXINLINE float D3DXQuaternionLength
    ( const D3DXQUATERNION *pQ )
{
#ifdef D3DX_DEBUG
    if(!pQ)
        return 0.0f;
#endif

#ifdef __cplusplus
    return sqrtf(pQ->x * pQ->x + pQ->y * pQ->y + pQ->z * pQ->z + pQ->w * pQ->w);
#else
    return (float) sqrt(pQ->x * pQ->x + pQ->y * pQ->y + pQ->z * pQ->z + pQ->w * pQ->w);
#endif
}

D3DXINLINE float D3DXQuaternionLengthSq
    ( const D3DXQUATERNION *pQ )
{
#ifdef D3DX_DEBUG
    if(!pQ)
        return 0.0f;
#endif

    return pQ->x * pQ->x + pQ->y * pQ->y + pQ->z * pQ->z + pQ->w * pQ->w;
}

D3DXINLINE float D3DXQuaternionDot
    ( const D3DXQUATERNION *pQ1, const D3DXQUATERNION *pQ2 )
{
#ifdef D3DX_DEBUG
    if(!pQ1 || !pQ2)
        return 0.0f;
#endif

    return pQ1->x * pQ2->x + pQ1->y * pQ2->y + pQ1->z * pQ2->z + pQ1->w * pQ2->w;
}


D3DXINLINE D3DXQUATERNION* D3DXQuaternionIdentity
    ( D3DXQUATERNION *pOut )
{
#ifdef D3DX_DEBUG
    if(!pOut)
        return NULL;
#endif

    pOut->x = pOut->y = pOut->z = 0.0f;
    pOut->w = 1.0f;
    return pOut;
}

D3DXINLINE BOOL D3DXQuaternionIsIdentity
    ( const D3DXQUATERNION *pQ )
{
#ifdef D3DX_DEBUG
    if(!pQ)
        return FALSE;
#endif

    return pQ->x == 0.0f && pQ->y == 0.0f && pQ->z == 0.0f && pQ->w == 1.0f;
}


D3DXINLINE D3DXQUATERNION* D3DXQuaternionConjugate
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pQ)
        return NULL;
#endif

    pOut->x = -pQ->x;
    pOut->y = -pQ->y;
    pOut->z = -pQ->z;
    pOut->w =  pQ->w;
    return pOut;
}


//--------------------------
// Plane
//--------------------------

D3DXINLINE float D3DXPlaneDot
    ( const D3DXPLANE *pP, const D3DXVECTOR4 *pV)
{
#ifdef D3DX_DEBUG
    if(!pP || !pV)
        return 0.0f;
#endif

    return pP->a * pV->x + pP->b * pV->y + pP->c * pV->z + pP->d * pV->w;
}

D3DXINLINE float D3DXPlaneDotCoord
    ( const D3DXPLANE *pP, const D3DXVECTOR3 *pV)
{
#ifdef D3DX_DEBUG
    if(!pP || !pV)
        return 0.0f;
#endif

    return pP->a * pV->x + pP->b * pV->y + pP->c * pV->z + pP->d;
}

D3DXINLINE float D3DXPlaneDotNormal
    ( const D3DXPLANE *pP, const D3DXVECTOR3 *pV)
{
#ifdef D3DX_DEBUG
    if(!pP || !pV)
        return 0.0f;
#endif

    return pP->a * pV->x + pP->b * pV->y + pP->c * pV->z;
}


//--------------------------
// Color
//--------------------------

D3DXINLINE D3DXCOLOR* D3DXColorNegative
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC)
        return NULL;
#endif

    pOut->r = 1.0f - pC->r;
    pOut->g = 1.0f - pC->g;
    pOut->b = 1.0f - pC->b;
    pOut->a = pC->a;
    return pOut;
}

D3DXINLINE D3DXCOLOR* D3DXColorAdd        
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC1 || !pC2)
        return NULL;
#endif

    pOut->r = pC1->r + pC2->r;
    pOut->g = pC1->g + pC2->g;
    pOut->b = pC1->b + pC2->b;
    pOut->a = pC1->a + pC2->a;
    return pOut;
}

D3DXINLINE D3DXCOLOR* D3DXColorSubtract   
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC1 || !pC2)
        return NULL;
#endif

    pOut->r = pC1->r - pC2->r;
    pOut->g = pC1->g - pC2->g;
    pOut->b = pC1->b - pC2->b;
    pOut->a = pC1->a - pC2->a;
    return pOut;
}

D3DXINLINE D3DXCOLOR* D3DXColorScale      
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC, float s)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC)
        return NULL;
#endif

    pOut->r = pC->r * s;
    pOut->g = pC->g * s;
    pOut->b = pC->b * s;
    pOut->a = pC->a * s;
    return pOut;
} 

D3DXINLINE D3DXCOLOR* D3DXColorModulate   
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC1 || !pC2)
        return NULL;
#endif

    pOut->r = pC1->r * pC2->r;
    pOut->g = pC1->g * pC2->g;
    pOut->b = pC1->b * pC2->b;
    pOut->a = pC1->a * pC2->a;
    return pOut;
}

D3DXINLINE D3DXCOLOR* D3DXColorLerp       
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2, float s)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC1 || !pC2)
        return NULL;
#endif

    pOut->r = pC1->r + s * (pC2->r - pC1->r);
    pOut->g = pC1->g + s * (pC2->g - pC1->g);
    pOut->b = pC1->b + s * (pC2->b - pC1->b);
    pOut->a = pC1->a + s * (pC2->a - pC1->a);
    return pOut;
}


#endif // __D3DXMATH_INL__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\d3dxshapes.h ===
///////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 1999 Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dxshapes.h
//  Content:    D3DX simple shapes
//
///////////////////////////////////////////////////////////////////////////

#ifndef __D3DXSHAPES_H__
#define __D3DXSHAPES_H__

#include <d3d.h>
#include <limits.h>
#include "d3dxerr.h"


typedef struct ID3DXSimpleShape *LPD3DXSIMPLESHAPE;

// {CFCD4602-EB7B-11d2-A440-00A0C90629A8}
DEFINE_GUID( IID_ID3DXSimpleShape, 
0xcfcd4602, 0xeb7b, 0x11d2, 0xa4, 0x40, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8 );


///////////////////////////////////////////////////////////////////////////
// Interfaces:
///////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
// ID3DXSimpleShape interface: 
//-------------------------------------------------------------------------

DECLARE_INTERFACE_(ID3DXSimpleShape, IUnknown)
{
    // IUnknown methods 
    STDMETHOD(QueryInterface)(THIS_ REFIID  riid, LPVOID* ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    // ID3DXSimpleShape methods
    STDMETHOD_(LPDIRECT3DVERTEXBUFFER7, GetVB)(THIS) PURE;
    STDMETHOD_(DWORD, GetIndices)(THIS_ LPWORD *ppIndices) PURE;
    STDMETHOD(Draw)(THIS) PURE;
};



///////////////////////////////////////////////////////////////////////////
// Functions:
///////////////////////////////////////////////////////////////////////////

#ifdef __cplusplus
extern "C" {
#endif //__cplusplus


//-------------------------------------------------------------------------
// D3DXCreatePolygon: Creates an 'n' sided polygon using the device
// ----------------  specified. It returns a vertex buffer that can be used
//                   for drawing or manipulation by the program later on.
//
// Params: 
//     [in]  LPDIRECT3DDEVICE7 pDevice: The device to create off. 
//     [in]  float sideSize: Length of a side.
//     [in]  DWORD numTexCoords:   The number of texture coordinates desired
//                                 in the vertex-buffer. (Default is 1)
//                                 D3DX_DEFAULT is a valid input.
//     [out] IDirect3DVertexBuffer7** ppVB: The output shape interface.
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreatePolygon(LPDIRECT3DDEVICE7  pDevice,
                      float              sideSize, 
                      DWORD              numSides, 
                      DWORD              numTexCoords, 
                      LPD3DXSIMPLESHAPE* ppShape );

//-------------------------------------------------------------------------
// D3DXCreateBox: Creates a box (cuboid) of given dimensions using the  
// ------------  device. It returns a vertex buffer that can
//               be used for drawing or manipulation by the program later on.
//
// Params: 
//     [in]  LPDIRECT3DDEVICE7 pDevice: The device to create off. 
//     [in]  float width: Width of the box (along x-axis)
//     [in]  float height: Height of the box (along y-axis)
//     [in]  float depth: Depth of the box (along z-axis)
//     [in]  DWORD numTexCoords: The number of texture coordinates desired
//                               in the vertex-buffer. Default is 1. 
//                               D3DX_DEFAULT is a valid input here.
//     [out] LPD3DXSIMPLESHAPE* ppShape: The output vertex-buffer.
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreateBox(LPDIRECT3DDEVICE7  pDevice, 
                  float              width,
                  float              height,
                  float              depth,
                  DWORD              numTexCoords, 
                  LPD3DXSIMPLESHAPE* ppShape );

//-------------------------------------------------------------------------
// D3DXCreateCylinder: Creates a cylinder of given dimensions using the  
// -----------------  device. It returns a vertex buffer that
//                    can be used for drawing or manipulation by the program
//                    later on.
//
// Params: 
//     [in]  LPDIRECT3DDEVICE7 pDevice: The device to create off. 
//     [in]  float baseRadius: Base-radius (default is 1.0f, shd be >= 0.0f)
//     [in]  float topRadius: Top-radius (default is 1.0f, shd be >= 0.0f)
//     [in]  float height: Height (default is 1.0f, shd be >= 0.0f)
//     [in]  DWORD numSlices: Number of slices about the main axis.
//                            (default is 8) D3DX_DEFAULT is a valid input.
//     [in]  DWORD numStacks: Number of stacks along the main axis. 
//                            (default is 8) D3DX_DEFAULT is a valid input.
//     [in]  DWORD numTexCoords: The number of texture coordinates desired
//                               in the vertex-buffer. Default is 1. 
//                               D3DX_DEFAULT is a valid input here.
//     [out] LPD3DXSIMPLESHAPE* ppShape: The output shape interface.
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreateCylinder(LPDIRECT3DDEVICE7  pDevice,
                       float              baseRadius, 
                       float              topRadius, 
                       float              height, 
                       DWORD              numSlices, 
                       DWORD              numStacks,   
                       DWORD              numTexCoords, 
                       LPD3DXSIMPLESHAPE* ppShape );


//-------------------------------------------------------------------------
// D3DXCreateTorus: Creates a torus of given dimensions using the  
// --------------  device specified. It returns a vertex buffer that can
//                 be used for drawing or manipulation by the program later
//                 on. It draws a doughnut, centered at (0, 0, 0) whose axis 
//                 is aligned with the z-axis. With the innerRadius used
//                 as the radius of the cross-section (minor-Radius) and 
//                 the outerRadius used as the radius of the central 'hole'. 
//
// Params: 
//     [in]  LPDIRECT3DDEVICE7 pDevice: The device to create off. 
//     [in]  float innerRadius: inner radius (default is 1.0f, shd be >= 0.0f)
//     [in]  float outerRadius: outer radius (default is 2.0f, shd be >= 0.0f)
//     [in]  DWORD numSides: Number of sides in the cross-section 
//                           (default is 8). D3DX_DEFAULT is a valid input.
//     [in]  DWORD numRings: Number of rings making up the torus 
//                           (default is 8) D3DX_DEFAULT is a valid input.
//     [in]  DWORD numTexCoords: The number of texture coordinates desired
//                                 in the vertex-buffer. Default is 1. 
//                                 D3DX_DEFAULT is a valid input here.
//     [out] LPD3DXSIMPLESHAPE* ppShape: The output shape interface.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXCreateTorus(LPDIRECT3DDEVICE7  pDevice,
                    float              innerRadius,
                    float              outerRadius, 
                    DWORD              numSides,
                    DWORD              numRings, 
                    DWORD              numTexCoords,  
                    LPD3DXSIMPLESHAPE* ppShape );

//-------------------------------------------------------------------------
// D3DXCreateTeapot: Creates a teapot using the device specified. 
// ----------------  It returns a vertex buffer that can be used for
//                   drawing or manipulation by the program later on.
//
// Params: 
//     [in]  LPDIRECT3DDEVICE7 pDevice: The device to create off. 
//     [in]  DWORD numTexCoords: The number of texture coordinates desired
//                               in the vertex-buffer. Default is 1. 
//                               D3DX_DEFAULT is a valid input here.
//     [out] LPD3DXSIMPLESHAPE* ppShape: The output shape interface.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXCreateTeapot(LPDIRECT3DDEVICE7  pDevice,
                     DWORD              numTexCoords, 
                     LPD3DXSIMPLESHAPE* ppShape);

//-------------------------------------------------------------------------
// D3DXCreateSphere: Creates a cylinder of given dimensions using the
// ----------------  device specified. 
//                   It returns a vertex buffer that can be used for
//                   drawing or manipulation by the program later on.
//
// Params: 
//     [in]  LPDIRECT3DDEVICE7 pDevice: The device to create off. 
//     [in]  float radius: radius (default is 1.0f, shd be >= 0.0f)
//     [in]  float height: Height (default is 1.0f, shd be >= 0.0f)
//     [in]  DWORD numSlices: Number of slices about the main axis
//                            (default is 8) D3DX_DEFAULT is a valid input.
//     [in]  DWORD numStacks: Number of stacks along the main axis
//                            (default is 8) D3DX_DEFAULT is a valid input.
//     [in]  DWORD numTexCoords: The number of texture coordinates desired
//                               in the vertex-buffer. Default is 1. 
//                               D3DX_DEFAULT is a valid input here.
//     [out] LPD3DXSIMPLESHAPE* ppShape: The output shape interface.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXCreateSphere(LPDIRECT3DDEVICE7  pDevice, 
                     float              radius, 
                     DWORD              numSlices, 
                     DWORD              numStacks,
                     DWORD              numTexCoords, 
                     LPD3DXSIMPLESHAPE* ppShape);

#ifdef __cplusplus
}
#endif //__cplusplus    
#endif //__D3DXSHAPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\data.h ===
/*
================================================================================
    ========================================================================
    ========================================================================

    File:           cdata.h
    Description:    headers for CData and child classes
    Created:        9/3/1997
    Author:         Matthijs Gates
    Mail:           mgates@microsoft.com

    Copyright (C) 1997  Microsoft Corporation.  All Rights Reserved.

    ========================================================================
    ========================================================================
================================================================================
*/

#if !defined(DATA_H)
#define DATA_H

#include "brtest.h"
#include "util.h"

//==============================================================================
//
//  Class:  CData
//
//------------------------------------------------------------------------------
//  Description:        root class for data.
//
//  Public methods:
//
//  Public properties:
//
//  9/3/1997
//  mgates
//
//==============================================================================
class CData
{
    CRITICAL_SECTION    m_crtCDataLock ;    // critical section lock
    INT                 m_iBufferSize ;     // buffer sizes are always in bytes !

    VOID InitCData() ;
    
    // P U B L I C

    public :
    
        CData() ;
        virtual ~CData() ;
    
        virtual BYTE    *GetBuffer() { return m_lpbBuffer ; }
        virtual INT     GetBufferSize() { return m_iBufferSize ; }
        
    // P R O T E C T E D
        
    protected :

        virtual BOOL    CDataSetBuffer(BYTE *lpbBuffer, INT iBufferSize) ;
        VOID    Lock()      { EnterCriticalSection(&m_crtCDataLock) ; }
        VOID    Unlock()    { LeaveCriticalSection(&m_crtCDataLock) ; }

        BYTE *m_lpbBuffer ;
} ;

//==============================================================================
//
//  Class:  CDataCountup
//
//------------------------------------------------------------------------------
//  Description:
//
//  Public methods:
//
//  Public properties:
//
//  9/12/1997
//  mgates
//
//==============================================================================
class CDataCountup : public CData
{
    BOOL    m_fFirst ;
    INT     m_cDword ;
    BOOL    m_fFreeze ;
    
    // P U B L I C -------------------------------------------------------------

    public :
    
        CDataCountup(INT iBufferSize = DEF_DATABUFFERSIZE) ;
        ~CDataCountup() ;
        
        virtual BYTE    *GetBuffer() ;
        BOOL SetBufferSize(INT iBufferSize) ;
        VOID Reset(INT iBaseNumber = 0) ;
        BOOL FreezeCountup(BOOL fFreeze) { m_fFreeze = fFreeze ; return TRUE ; }
        BOOL IsCountupFrozen()  { return m_fFreeze ; }
        
        enum { DEF_DATABUFFERSIZE   = 1024,
               MIN_BUFFERSIZE       = 100,
               MAX_BUFFERSIZE       = 65504     // max UDP is 65507, aligned on
                                                //  DWORD boundary is 65504
             } ;
} ;

//==============================================================================
//
//  Class:  CDataString
//
//------------------------------------------------------------------------------
//  Description:        CData derivative to hold a regular null-terminated
//                      string.
//
//  Public methods:
//                      Set()           sets the content
//                      GetBuffer()     retrieves the null-terminated string
//                      GetBufferSize() returns the length of the string,
//                                        excluding the null-terminator
//
//  Public properties:
//                      - none -
//
//  9/4/1997
//  mgates
//
//==============================================================================
class CDataString : public CData
{
    CString m_strBuffer ;
    
    // P U B L I C

    public :
    
        CDataString() { ; }
        CDataString(CString &strBuffer) : m_strBuffer(strBuffer) { ; }
        CDataString(const char *szBuffer) : m_strBuffer(szBuffer) { ; }
        ~CDataString() ;
        
        BOOL Set(CString &strBuffer) ;
        BOOL Set(const char *szBuffer) ;
        
        BYTE *GetBuffer() { return (BYTE *) m_strBuffer.GetBuffer(0) ; }
        INT GetBufferSize() { return m_strBuffer.GetLength() ; }
} ;

#endif  // DATA_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\datapath.h ===
/*****************************************************************************\
*                                                                             *
* DataPath.h    Obsolete DataPath header                                      *
*                                                                             *
*               Copyright 1995 - 1999 Microsoft Corp. All rights reserved.    *
*                                                                             *
\*****************************************************************************/

#ifndef __datapath_h__
#define __datapath_h__
#pragma message("WARNING: your code should #include ocidl.h instead of datapath.h")
#include <ocidl.h>
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\datguids.h ===
// fe7d6c53-2dac-446a-b0bd-d73e21e924c9
DEFINE_GUID(DATAFMT_SCRIPT,0xfe7d6c53,0x2dac,0x446a,0xb0,0xbd,0xd7,0x3e,0x21,0xe9,0x24,0xc9);
// 485da097-141e-4aa5-bb3b-a5618d95d02b
DEFINE_GUID(DATAFMT_EXEC,0x485da097,0x141e,0x4aa5,0xbb,0x3b,0xa5,0x61,0x8d,0x95,0xd0,0x2b);
// 1b7639b6-6357-47d1-9a07-12452dc073e9
DEFINE_GUID(DATAFMT_UNICODE16,0x1b7639b6,0x6357,0x47d1,0x9a,0x07,0x12,0x45,0x2d,0xc0,0x73,0xe9);
// 1b49cb32-e3a4-43f0-9c94-d0197bb97114
DEFINE_GUID(DATAFMT_HTML,0x1b49cb32,0xe3a4,0x43f0,0x9c,0x94,0xd0,0x19,0x7b,0xb9,0x71,0x14);
// 369eeeab-a0e8-45ca-86a6-a83ce5697e28
DEFINE_GUID(DATAFMT_DPOF,0x369eeeab,0xa0e8,0x45ca,0x86,0xa6,0xa8,0x3c,0xe5,0x69,0x7e,0x28);
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\daogetrw.h ===
/************************************************************************
**  D A O G E T R W . H                                                 *
**                                                                      *
**  GetRows interface                                                   *
**                                                                      *
**  Warning: This file is copied from cdaost.h. Changes must be made    *
**           in both files                                              *
**                                                                      *
**                                                                      *
*************************************************************************
** Copyright (C) 1996 by Microsoft Corporation                          *
**         All Rights Reserved                                          *
************************************************************************/

#if !defined (_DAOGETRW_H_)
#define _DAOGETRW_H_

/*
	Enumerations
*/
typedef enum
	{
	DAOCOLKIND_IND = 0,
	DAOCOLKIND_STR,
	DAOCOLKIND_WSTR
	} DAOCOLKIND;

typedef enum
	{
	DAO_I2 = 0,
	DAO_I4,
	DAO_R4,
	DAO_R8,
	DAO_CURRENCY,
	DAO_DATE,
	DAO_BOOL,
	DAO_BSTR,
	DAO_LPSTR,
	DAO_LPWSTR,
	DAO_BLOB,
	DAO_BYTES,
	DAO_CHAR,
	DAO_WCHAR,
	DAO_ANYVARIANT,
	DAO_BOOKMARK,
	DAO_BYTE,
	DAO_GUID,
	DAO_DATATYPEMAX
	} DAODATATYPE;

/*
	Macros
*/
#define DAO_NOINDICATOR 0xffffffff
#define DAO_NULL        0xffffffff
#define DAO_CANTCOERCE  0xfffffffc
#define DAO_NOMAXLENGTH 0x00000000

#define DAOROWFETCH_CALLEEALLOCATES     0x00000001
#define DAOROWFETCH_DONTADVANCE         0x00000002
#define DAOROWFETCH_FORCEREFRESH        0x00000004
#define DAOROWFETCH_BINDABSOLUTE        0x00000008
#define DAOROWFETCH_ODBCNEXT			0x00000010

#define DAOBINDING_DIRECT               0x00000001
#define DAOBINDING_VARIANT              0x00000002
#define DAOBINDING_CALLBACK             0x00000004

/*
	Structures
*/
typedef struct
	{
	DWORD           dwKind;
	union
		{
		LONG        ind;
		LPCSTR      lpstr;
		LPCWSTR		lpwstr;
		};
	} DAOCOLUMNID;
typedef DAOCOLUMNID *LPDAOCOLUMNID;

// Callback for binding
EXTERN_C typedef HRESULT (STDAPICALLTYPE *LPDAOBINDFUNC)(ULONG cb, DWORD dwUser, LPVOID *ppData);
#define DAOBINDINGFUNC(f)   STDAPI f (ULONG cb, DWORD dwUser, LPVOID *ppData)

typedef struct
	{
	DAOCOLUMNID     columnID;
	ULONG           cbDataOffset;
	ULONG           cbMaxLen;
	ULONG           cbInfoOffset;
	DWORD           dwBinding;
	DWORD           dwDataType;
	DWORD           dwUser;
	} DAOCOLUMNBINDING;
typedef DAOCOLUMNBINDING *LPDAOCOLUMNBINDING;

typedef struct
	{
	ULONG           cRowsRequested;
	DWORD           dwFlags;
	LPVOID          pData;
	LPVOID          pVarData;
	ULONG           cbVarData;
	ULONG           cRowsReturned;
	} DAOFETCHROWS;
typedef DAOFETCHROWS *LPDAOFETCHROWS;

/*
	New Errors

	**NOTE: OLE standard ids to be determined.
*/
#define S_BUFFERTOOSMALL    MAKE_SCODE(SEVERITY_SUCCESS,    FACILITY_ITF,   0x1000)
#define S_ENDOFCURSOR       MAKE_SCODE(SEVERITY_SUCCESS,    FACILITY_ITF,   0x1001)
#define S_SILENTCANCEL      MAKE_SCODE(SEVERITY_SUCCESS,    FACILITY_ITF,   0x1002)
#define S_RECORDDELETED     MAKE_SCODE(SEVERITY_SUCCESS,    FACILITY_ITF,   0x1003)

#define E_ROWTOOSHORT       MAKE_SCODE(SEVERITY_ERROR,      FACILITY_ITF,   0x1000)
#define E_BADBINDINFO       MAKE_SCODE(SEVERITY_ERROR,      FACILITY_ITF,   0x1001)
#define E_COLUMNUNAVAILABLE MAKE_SCODE(SEVERITY_ERROR,      FACILITY_ITF,   0x1002)


/*
	Interfaces
*/
#undef INTERFACE
#define INTERFACE ICDAORecordset
DECLARE_INTERFACE_(ICDAORecordset, IDispatch)
	{
	STDMETHOD(GetRows)          (THIS_ LONG cRowsToSkip, LONG cCol, LPDAOCOLUMNBINDING prgBndCol, ULONG cbRowLen, LPDAOFETCHROWS pFetchRows) PURE;
	STDMETHOD(SetNotify)		(THIS_ REFIID riid, BOOL fNotify);
	STDMETHOD(GetNotify)		(THIS_ REFIID riid, BOOL *fNotify);
	STDMETHOD(OnBeforeNotify)	(THIS_ REFIID riid, DWORD cat, DWORD rsn, VARIANT v1, VARIANT v2);
	STDMETHOD(OnAfterNotify)	(THIS_ REFIID riid, DWORD cat, DWORD rsn, VARIANT v1, VARIANT v2, HRESULT hr);
	STDMETHOD(PutLock)			(THIS_ BOOL f);
	STDMETHOD(GetLock)			(THIS_ BOOL *f);
	STDMETHOD(AddGetRowsErr)    (THIS_ HRESULT hr) PURE;
	};

//Get rows errors
#define errVtoFetchBuffTooSmall	-30028	//3640	The fetch buffer was too small for the amount of data you requested.
#define errVtoEOFDuringFetch	-30029	//3641	There are fewer records remaining in the recordset than you requested.
#define errVtoSilentCancel		-30030	//3642	A cancel was performed on the operation.
#define errVtoRecordDeleted		-30031	//3643	One of the records in the recordset was deleted by another process.
#define errVtoRowLenTooSmall	-30032	//3646	The specified row length is shorter than the sum of the column lengths.
#define errVtoBadBindInfo		-30033	//3645	One of the binding parameters is incorrect.
#define errVtoColumnMissing		-30034	//3647	A column requested is not being returned to the recordset.

#endif // _DAOGETRW_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\Danim_i.c ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 5.02.0235 */
/* at Wed Apr 21 13:46:42 1999
 */
/* Compiler settings for Danim.Idl:
    Os (OptLev=s), W1, Zp8, env=Win32 (32b run), ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#if !defined(_M_IA64) && !defined(_M_AXP64)

#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, LIBID_DirectAnimation,0x34f681d0,0x3640,0x11cf,0x92,0x94,0x00,0xaa,0x00,0xb8,0xa7,0x33);


MIDL_DEFINE_GUID(IID, IID_IDAViewSite,0x283807B3,0x2C60,0x11d0,0xA3,0x1D,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(IID, IID_IDAView,0x283807B4,0x2C60,0x11d0,0xA3,0x1D,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(IID, IID_IDABehavior,0x283807B7,0x2C60,0x11d0,0xA3,0x1D,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(IID, IID_IDANumber,0x9CDE7340,0x3C20,0x11d0,0xA3,0x30,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(IID, IID_IDABvrHook,0x3E2487C4,0x8709,0x11d0,0xB1,0x77,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(IID, IID_IDADrawingSurface,0xBC0BFD34,0xD21D,0x11d0,0x93,0x85,0x00,0xC0,0x4F,0xB6,0xBD,0x36);


MIDL_DEFINE_GUID(IID, IID_IDAPickableResult,0x4A933703,0xE36F,0x11d0,0x9B,0x99,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDAEvent,0x50B4791E,0x4731,0x11d0,0x89,0x12,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(IID, IID_IDA2Behavior,0x9CADDC0C,0xAD56,0x11d1,0x9F,0xF8,0x00,0xC0,0x4F,0xA3,0x21,0x95);


MIDL_DEFINE_GUID(IID, IID_IDAImport,0xFC54BEAA,0x5B12,0x11d1,0x8E,0x7B,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDAModifiableBehavior,0xFC54BEAB,0x5B12,0x11d1,0x8E,0x7B,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(CLSID, CLSID_DABehavior,0x283807B8,0x2C60,0x11d0,0xA3,0x1D,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(IID, IID_IDAUntilNotifier,0x3F3DA01A,0x4705,0x11d0,0x87,0x10,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDABoolean,0xC46C1BC0,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDACamera,0xC46C1BE1,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAColor,0xC46C1BC5,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAGeometry,0xC46C1BDF,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAImage,0xC46C1BD3,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAMatte,0xC46C1BD1,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAMicrophone,0xC46C1BE5,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAMontage,0xC46C1BD5,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAPath2,0xC46C1BCF,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAPoint2,0xC46C1BC7,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAPoint3,0xC46C1BD7,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDASound,0xC46C1BE3,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAString,0xC46C1BC3,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDATransform2,0xC46C1BCB,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDATransform3,0xC46C1BDB,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAVector2,0xC46C1BC9,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAVector3,0xC46C1BD9,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAFontStyle,0x25B0F91D,0xD23D,0x11d0,0x9B,0x85,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDALineStyle,0xC46C1BF1,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAEndStyle,0xC46C1BEB,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAJoinStyle,0xC46C1BED,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDADashStyle,0xC46C1BEF,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDABbox2,0xC46C1BCD,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDABbox3,0xC46C1BDD,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAPair,0xC46C1BF3,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAArray,0xD17506C2,0x6B26,0x11d0,0x89,0x14,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(IID, IID_IDATuple,0x5DFB2650,0x9668,0x11d0,0xB1,0x7B,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(IID, IID_IDAUserData,0xAF868305,0xAB0B,0x11d0,0x87,0x6A,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDA2Geometry,0xB90E5258,0x574A,0x11d1,0x8E,0x7B,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDA2Image,0xB90E5259,0x574A,0x11d1,0x8E,0x7B,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDA2FontStyle,0x960D8EFF,0xE494,0x11d1,0xAB,0x75,0x00,0xC0,0x4F,0xD9,0x2B,0x6B);


MIDL_DEFINE_GUID(IID, IID_IDA2LineStyle,0x5F00F545,0xDF18,0x11d1,0xAB,0x6F,0x00,0xC0,0x4F,0xD9,0x2B,0x6B);


MIDL_DEFINE_GUID(IID, IID_IDA2Event,0xB90E525A,0x574A,0x11d1,0x8E,0x7B,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDA2Array,0x2A8F0B06,0xBE2B,0x11d1,0xB2,0x19,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(IID, IID_IDAPreferences,0x69B5BC70,0x9B19,0x11d0,0x9B,0x60,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDA2View,0x2AE71568,0x4B34,0x11d1,0xB1,0xE3,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(CLSID, CLSID_DAView,0x283807B5,0x2C60,0x11d0,0xA3,0x1D,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(IID, IID_IDASite,0x45393DF0,0x54B9,0x11cf,0x92,0xA2,0x00,0xAA,0x00,0xB8,0xA7,0x33);


MIDL_DEFINE_GUID(IID, IID_IDAImportationResult,0x4A933702,0xE36F,0x11d0,0x9B,0x99,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDADXTransformResult,0xBACD4D86,0x4A4F,0x11d1,0x9B,0xC8,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDAStatics,0x542FB452,0x5003,0x11cf,0x92,0xA2,0x00,0xAA,0x00,0xB8,0xA7,0x33);


MIDL_DEFINE_GUID(IID, IID_IDA2Statics,0xFA261CF0,0xC44E,0x11d1,0x9B,0xE4,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(CLSID, CLSID_DAStatics,0x542FB453,0x5003,0x11cf,0x92,0xA2,0x00,0xAA,0x00,0xB8,0xA7,0x33);


MIDL_DEFINE_GUID(IID, IID_IDAViewerControl,0x0E41257B,0x812D,0x11D0,0x9B,0x4A,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDAViewerControlWindowed,0xBA8B033E,0x1E91,0x11d1,0x88,0x09,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDA2ViewerControl,0xF3E1B522,0xD8A6,0x11d1,0x9B,0xE5,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDA2ViewerControlWindowed,0xA3034056,0xEC1C,0x11d1,0x9B,0xE8,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(CLSID, CLSID_DAViewerControl,0xB6FFC24C,0x7E13,0x11D0,0x9B,0x47,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(CLSID, CLSID_DAViewerControlWindowed,0x69AD90EF,0x1C20,0x11d1,0x88,0x01,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(CLSID, CLSID_DABoolean,0xC46C1BC1,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DACamera,0xC46C1BE2,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAColor,0xC46C1BC6,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAGeometry,0xC46C1BE0,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAImage,0xC46C1BD4,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAMatte,0xC46C1BD2,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAMicrophone,0xC46C1BE6,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAMontage,0xC46C1BD6,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DANumber,0x9CDE7341,0x3C20,0x11d0,0xA3,0x30,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(CLSID, CLSID_DAPath2,0xC46C1BD0,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAPoint2,0xC46C1BC8,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAPoint3,0xC46C1BD8,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DASound,0xC46C1BE4,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAString,0xC46C1BC4,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DATransform2,0xC46C1BCC,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DATransform3,0xC46C1BDC,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAVector2,0xC46C1BCA,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAVector3,0xC46C1BDA,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAFontStyle,0x25B0F91C,0xD23D,0x11d0,0x9B,0x85,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(CLSID, CLSID_DALineStyle,0xC46C1BF2,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAEndStyle,0xC46C1BEC,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAJoinStyle,0xC46C1BEE,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DADashStyle,0xC46C1BF0,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DABbox2,0xC46C1BCE,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DABbox3,0xC46C1BDE,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAPair,0xC46C1BF4,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAEvent,0x50B4791F,0x4731,0x11d0,0x89,0x12,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(CLSID, CLSID_DAArray,0xD17506C3,0x6B26,0x11d0,0x89,0x14,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(CLSID, CLSID_DATuple,0x5DFB2651,0x9668,0x11d0,0xB1,0x7B,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(CLSID, CLSID_DAUserData,0xAF868304,0xAB0B,0x11d0,0x87,0x6A,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(CLSID, CLSID_DAImportationResult,0xBCBB1F75,0xE384,0x11d0,0x9B,0x99,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(CLSID, CLSID_DAPickableResult,0xBCBB1F74,0xE384,0x11d0,0x9B,0x99,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif



#endif /* !defined(_M_IA64) && !defined(_M_AXP64)*/


#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 5.02.0235 */
/* at Wed Apr 21 13:46:45 1999
 */
/* Compiler settings for Danim.Idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win64 (32b run,appending), ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#if defined(_M_IA64) || defined(_M_AXP64)

#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, LIBID_DirectAnimation,0x34f681d0,0x3640,0x11cf,0x92,0x94,0x00,0xaa,0x00,0xb8,0xa7,0x33);


MIDL_DEFINE_GUID(IID, IID_IDAViewSite,0x283807B3,0x2C60,0x11d0,0xA3,0x1D,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(IID, IID_IDAView,0x283807B4,0x2C60,0x11d0,0xA3,0x1D,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(IID, IID_IDABehavior,0x283807B7,0x2C60,0x11d0,0xA3,0x1D,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(IID, IID_IDANumber,0x9CDE7340,0x3C20,0x11d0,0xA3,0x30,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(IID, IID_IDABvrHook,0x3E2487C4,0x8709,0x11d0,0xB1,0x77,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(IID, IID_IDADrawingSurface,0xBC0BFD34,0xD21D,0x11d0,0x93,0x85,0x00,0xC0,0x4F,0xB6,0xBD,0x36);


MIDL_DEFINE_GUID(IID, IID_IDAPickableResult,0x4A933703,0xE36F,0x11d0,0x9B,0x99,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDAEvent,0x50B4791E,0x4731,0x11d0,0x89,0x12,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(IID, IID_IDA2Behavior,0x9CADDC0C,0xAD56,0x11d1,0x9F,0xF8,0x00,0xC0,0x4F,0xA3,0x21,0x95);


MIDL_DEFINE_GUID(IID, IID_IDAImport,0xFC54BEAA,0x5B12,0x11d1,0x8E,0x7B,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDAModifiableBehavior,0xFC54BEAB,0x5B12,0x11d1,0x8E,0x7B,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(CLSID, CLSID_DABehavior,0x283807B8,0x2C60,0x11d0,0xA3,0x1D,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(IID, IID_IDAUntilNotifier,0x3F3DA01A,0x4705,0x11d0,0x87,0x10,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDABoolean,0xC46C1BC0,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDACamera,0xC46C1BE1,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAColor,0xC46C1BC5,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAGeometry,0xC46C1BDF,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAImage,0xC46C1BD3,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAMatte,0xC46C1BD1,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAMicrophone,0xC46C1BE5,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAMontage,0xC46C1BD5,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAPath2,0xC46C1BCF,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAPoint2,0xC46C1BC7,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAPoint3,0xC46C1BD7,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDASound,0xC46C1BE3,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAString,0xC46C1BC3,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDATransform2,0xC46C1BCB,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDATransform3,0xC46C1BDB,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAVector2,0xC46C1BC9,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAVector3,0xC46C1BD9,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAFontStyle,0x25B0F91D,0xD23D,0x11d0,0x9B,0x85,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDALineStyle,0xC46C1BF1,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAEndStyle,0xC46C1BEB,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAJoinStyle,0xC46C1BED,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDADashStyle,0xC46C1BEF,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDABbox2,0xC46C1BCD,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDABbox3,0xC46C1BDD,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAPair,0xC46C1BF3,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(IID, IID_IDAArray,0xD17506C2,0x6B26,0x11d0,0x89,0x14,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(IID, IID_IDATuple,0x5DFB2650,0x9668,0x11d0,0xB1,0x7B,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(IID, IID_IDAUserData,0xAF868305,0xAB0B,0x11d0,0x87,0x6A,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDA2Geometry,0xB90E5258,0x574A,0x11d1,0x8E,0x7B,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDA2Image,0xB90E5259,0x574A,0x11d1,0x8E,0x7B,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDA2FontStyle,0x960D8EFF,0xE494,0x11d1,0xAB,0x75,0x00,0xC0,0x4F,0xD9,0x2B,0x6B);


MIDL_DEFINE_GUID(IID, IID_IDA2LineStyle,0x5F00F545,0xDF18,0x11d1,0xAB,0x6F,0x00,0xC0,0x4F,0xD9,0x2B,0x6B);


MIDL_DEFINE_GUID(IID, IID_IDA2Event,0xB90E525A,0x574A,0x11d1,0x8E,0x7B,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDA2Array,0x2A8F0B06,0xBE2B,0x11d1,0xB2,0x19,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(IID, IID_IDAPreferences,0x69B5BC70,0x9B19,0x11d0,0x9B,0x60,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDA2View,0x2AE71568,0x4B34,0x11d1,0xB1,0xE3,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(CLSID, CLSID_DAView,0x283807B5,0x2C60,0x11d0,0xA3,0x1D,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(IID, IID_IDASite,0x45393DF0,0x54B9,0x11cf,0x92,0xA2,0x00,0xAA,0x00,0xB8,0xA7,0x33);


MIDL_DEFINE_GUID(IID, IID_IDAImportationResult,0x4A933702,0xE36F,0x11d0,0x9B,0x99,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDADXTransformResult,0xBACD4D86,0x4A4F,0x11d1,0x9B,0xC8,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDAStatics,0x542FB452,0x5003,0x11cf,0x92,0xA2,0x00,0xAA,0x00,0xB8,0xA7,0x33);


MIDL_DEFINE_GUID(IID, IID_IDA2Statics,0xFA261CF0,0xC44E,0x11d1,0x9B,0xE4,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(CLSID, CLSID_DAStatics,0x542FB453,0x5003,0x11cf,0x92,0xA2,0x00,0xAA,0x00,0xB8,0xA7,0x33);


MIDL_DEFINE_GUID(IID, IID_IDAViewerControl,0x0E41257B,0x812D,0x11D0,0x9B,0x4A,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDAViewerControlWindowed,0xBA8B033E,0x1E91,0x11d1,0x88,0x09,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(IID, IID_IDA2ViewerControl,0xF3E1B522,0xD8A6,0x11d1,0x9B,0xE5,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(IID, IID_IDA2ViewerControlWindowed,0xA3034056,0xEC1C,0x11d1,0x9B,0xE8,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(CLSID, CLSID_DAViewerControl,0xB6FFC24C,0x7E13,0x11D0,0x9B,0x47,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(CLSID, CLSID_DAViewerControlWindowed,0x69AD90EF,0x1C20,0x11d1,0x88,0x01,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(CLSID, CLSID_DABoolean,0xC46C1BC1,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DACamera,0xC46C1BE2,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAColor,0xC46C1BC6,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAGeometry,0xC46C1BE0,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAImage,0xC46C1BD4,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAMatte,0xC46C1BD2,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAMicrophone,0xC46C1BE6,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAMontage,0xC46C1BD6,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DANumber,0x9CDE7341,0x3C20,0x11d0,0xA3,0x30,0x00,0xAA,0x00,0xB9,0x2C,0x03);


MIDL_DEFINE_GUID(CLSID, CLSID_DAPath2,0xC46C1BD0,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAPoint2,0xC46C1BC8,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAPoint3,0xC46C1BD8,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DASound,0xC46C1BE4,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAString,0xC46C1BC4,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DATransform2,0xC46C1BCC,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DATransform3,0xC46C1BDC,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAVector2,0xC46C1BCA,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAVector3,0xC46C1BDA,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAFontStyle,0x25B0F91C,0xD23D,0x11d0,0x9B,0x85,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(CLSID, CLSID_DALineStyle,0xC46C1BF2,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAEndStyle,0xC46C1BEC,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAJoinStyle,0xC46C1BEE,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DADashStyle,0xC46C1BF0,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DABbox2,0xC46C1BCE,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DABbox3,0xC46C1BDE,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAPair,0xC46C1BF4,0x3C52,0x11d0,0x92,0x00,0x84,0x8C,0x1D,0x00,0x00,0x00);


MIDL_DEFINE_GUID(CLSID, CLSID_DAEvent,0x50B4791F,0x4731,0x11d0,0x89,0x12,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(CLSID, CLSID_DAArray,0xD17506C3,0x6B26,0x11d0,0x89,0x14,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(CLSID, CLSID_DATuple,0x5DFB2651,0x9668,0x11d0,0xB1,0x7B,0x00,0xC0,0x4F,0xC2,0xA0,0xCA);


MIDL_DEFINE_GUID(CLSID, CLSID_DAUserData,0xAF868304,0xAB0B,0x11d0,0x87,0x6A,0x00,0xC0,0x4F,0xC2,0x9D,0x46);


MIDL_DEFINE_GUID(CLSID, CLSID_DAImportationResult,0xBCBB1F75,0xE384,0x11d0,0x9B,0x99,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);


MIDL_DEFINE_GUID(CLSID, CLSID_DAPickableResult,0xBCBB1F74,0xE384,0x11d0,0x9B,0x99,0x00,0xC0,0x4F,0xC2,0xF5,0x1D);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif



#endif /* defined(_M_IA64) || defined(_M_AXP64)*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\public\wsdk\inc\crt70\danim.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0334 */
/* Compiler settings for danim.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __danim_h__
#define __danim_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IDAViewSite_FWD_DEFINED__
#define __IDAViewSite_FWD_DEFINED__
typedef interface IDAViewSite IDAViewSite;
#endif 	/* __IDAViewSite_FWD_DEFINED__ */


#ifndef __IDAView_FWD_DEFINED__
#define __IDAView_FWD_DEFINED__
typedef interface IDAView IDAView;
#endif 	/* __IDAView_FWD_DEFINED__ */


#ifndef __IDABehavior_FWD_DEFINED__
#define __IDABehavior_FWD_DEFINED__
typedef interface IDABehavior IDABehavior;
#endif 	/* __IDABehavior_FWD_DEFINED__ */


#ifndef __IDANumber_FWD_DEFINED__
#define __IDANumber_FWD_DEFINED__
typedef interface IDANumber IDANumber;
#endif 	/* __IDANumber_FWD_DEFINED__ */


#ifndef __IDABvrHook_FWD_DEFINED__
#define __IDABvrHook_FWD_DEFINED__
typedef interface IDABvrHook IDABvrHook;
#endif 	/* __IDABvrHook_FWD_DEFINED__ */


#ifndef __IDADrawingSurface_FWD_DEFINED__
#define __IDADrawingSurface_FWD_DEFINED__
typedef interface IDADrawingSurface IDADrawingSurface;
#endif 	/* __IDADrawingSurface_FWD_DEFINED__ */


#ifndef __IDAPickableResult_FWD_DEFINED__
#define __IDAPickableResult_FWD_DEFINED__
typedef interface IDAPickableResult IDAPickableResult;
#endif 	/* __IDAPickableResult_FWD_DEFINED__ */


#ifndef __IDAEvent_FWD_DEFINED__
#define __IDAEvent_FWD_DEFINED__
typedef interface IDAEvent IDAEvent;
#endif 	/* __IDAEvent_FWD_DEFINED__ */


#ifndef __IDA2Behavior_FWD_DEFINED__
#define __IDA2Behavior_FWD_DEFINED__
typedef interface IDA2Behavior IDA2Behavior;
#endif 	/* __IDA2Behavior_FWD_DEFINED__ */


#ifndef __IDAImport_FWD_DEFINED__
#define __IDAImport_FWD_DEFINED__
typedef interface IDAImport IDAImport;
#endif 	/* __IDAImport_FWD_DEFINED__ */


#ifndef __IDAModifiableBehavior_FWD_DEFINED__
#define __IDAModifiableBehavior_FWD_DEFINED__
typedef interface IDAModifiableBehavior IDAModifiableBehavior;
#endif 	/* __IDAModifiableBehavior_FWD_DEFINED__ */


#ifndef __DABehavior_FWD_DEFINED__
#define __DABehavior_FWD_DEFINED__

#ifdef __cplusplus
typedef class DABehavior DABehavior;
#else
typedef struct DABehavior DABehavior;
#endif /* __cplusplus */

#endif 	/* __DABehavior_FWD_DEFINED__ */


#ifndef __IDAUntilNotifier_FWD_DEFINED__
#define __IDAUntilNotifier_FWD_DEFINED__
typedef interface IDAUntilNotifier IDAUntilNotifier;
#endif 	/* __IDAUntilNotifier_FWD_DEFINED__ */


#ifndef __IDABoolean_FWD_DEFINED__
#define __IDABoolean_FWD_DEFINED__
typedef interface IDABoolean IDABoolean;
#endif 	/* __IDABoolean_FWD_DEFINED__ */


#ifndef __IDACamera_FWD_DEFINED__
#define __IDACamera_FWD_DEFINED__
typedef interface IDACamera IDACamera;
#endif 	/* __IDACamera_FWD_DEFINED__ */


#ifndef __IDAColor_FWD_DEFINED__
#define __IDAColor_FWD_DEFINED__
typedef interface IDAColor IDAColor;
#endif 	/* __IDAColor_FWD_DEFINED__ */


#ifndef __IDAGeometry_FWD_DEFINED__
#define __IDAGeometry_FWD_DEFINED__
typedef interface IDAGeometry IDAGeometry;
#endif 	/* __IDAGeometry_FWD_DEFINED__ */


#ifndef __IDAImage_FWD_DEFINED__
#define __IDAImage_FWD_DEFINED__
typedef interface IDAImage IDAImage;
#endif 	/* __IDAImage_FWD_DEFINED__ */


#ifndef __IDAMatte_FWD_DEFINED__
#define __IDAMatte_FWD_DEFINED__
typedef interface IDAMatte IDAMatte;
#endif 	/* __IDAMatte_FWD_DEFINED__ */


#ifndef __IDAMicrophone_FWD_DEFINED__
#define __IDAMicrophone_FWD_DEFINED__
typedef interface IDAMicrophone IDAMicrophone;
#endif 	/* __IDAMicrophone_FWD_DEFINED__ */


#ifndef __IDAMontage_FWD_DEFINED__
#define __IDAMontage_FWD_DEFINED__
typedef interface IDAMontage IDAMontage;
#endif 	/* __IDAMontage_FWD_DEFINED__ */


#ifndef __IDAPath2_FWD_DEFINED__
#define __IDAPath2_FWD_DEFINED__
typedef interface IDAPath2 IDAPath2;
#endif 	/* __IDAPath2_FWD_DEFINED__ */


#ifndef __IDAPoint2_FWD_DEFINED__
#define __IDAPoint2_FWD_DEFINED__
typedef interface IDAPoint2 IDAPoint2;
#endif 	/* __IDAPoint2_FWD_DEFINED__ */


#ifndef __IDAPoint3_FWD_DEFINED__
#define __IDAPoint3_FWD_DEFINED__
typedef interface IDAPoint3 IDAPoint3;
#endif 	/* __IDAPoint3_FWD_DEFINED__ */


#ifndef __IDASound_FWD_DEFINED__
#define __IDASound_FWD_DEFINED__
typedef interface IDASound IDASound;
#endif 	/* __IDASound_FWD_DEFINED__ */


#ifndef __IDAString_FWD_DEFINED__
#define __IDAString_FWD_DEFINED__
typedef interface IDAString IDAString;
#endif 	/* __IDAString_FWD_DEFINED__ */


#ifndef __IDATransform2_FWD_DEFINED__
#define __IDATransform2_FWD_DEFINED__
typedef interface IDATransform2 IDATransform2;
#endif 	/* __IDATransform2_FWD_DEFINED__ */


#ifndef __IDATransform3_FWD_DEFINED__
#define __IDATransform3_FWD_DEFINED__
typedef interface IDATransform3 IDATransform3;
#endif 	/* __IDATransform3_FWD_DEFINED__ */


#ifndef __IDAVector2_FWD_DEFINED__
#define __IDAVector2_FWD_DEFINED__
typedef interface IDAVector2 IDAVector2;
#endif 	/* __IDAVector2_FWD_DEFINED__ */


#ifndef __IDAVector3_FWD_DEFINED__
#define __IDAVector3_FWD_DEFINED__
typedef interface IDAVector3 IDAVector3;
#endif 	/* __IDAVector3_FWD_DEFINED__ */


#ifndef __IDAFontStyle_FWD_DEFINED__
#define __IDAFontStyle_FWD_DEFINED__
typedef interface IDAFontStyle IDAFontStyle;
#endif 	/* __IDAFontStyle_FWD_DEFINED__ */


#ifndef __IDALineStyle_FWD_DEFINED__
#define __IDALineStyle_FWD_DEFINED__
typedef interface IDALineStyle IDALineStyle;
#endif 	/* __IDALineStyle_FWD_DEFINED__ */


#ifndef __IDAEndStyle_FWD_DEFINED__
#define __IDAEndStyle_FWD_DEFINED__
typedef interface IDAEndStyle IDAEndStyle;
#endif 	/* __IDAEndStyle_FWD_DEFINED__ */


#ifndef __IDAJoinStyle_FWD_DEFINED__
#define __IDAJoinStyle_FWD_DEFINED__
typedef interface IDAJoinStyle IDAJoinStyle;
#endif 	/* __IDAJoinStyle_FWD_DEFINED__ */


#ifndef __IDADashStyle_FWD_DEFINED__
#define __IDADashStyle_FWD_DEFINED__
typedef interface IDADashStyle IDADashStyle;
#endif 	/* __IDADashStyle_FWD_DEFINED__ */


#ifndef __IDABbox2_FWD_DEFINED__
#define __IDABbox2_FWD_DEFINED__
typedef interface IDABbox2 IDABbox2;
#endif 	/* __IDABbox2_FWD_DEFINED__ */


#ifndef __IDABbox3_FWD_DEFINED__
#define __IDABbox3_FWD_DEFINED__
typedef interface IDABbox3 IDABbox3;
#endif 	/* __IDABbox3_FWD_DEFINED__ */


#ifndef __IDAPair_FWD_DEFINED__
#define __IDAPair_FWD_DEFINED__
typedef interface IDAPair IDAPair;
#endif 	/* __IDAPair_FWD_DEFINED__ */


#ifndef __IDAArray_FWD_DEFINED__
#define __IDAArray_FWD_DEFINED__
typedef interface IDAArray IDAArray;
#endif 	/* __IDAArray_FWD_DEFINED__ */


#ifndef __IDATuple_FWD_DEFINED__
#define __IDATuple_FWD_DEFINED__
typedef interface IDATuple IDATuple;
#endif 	/* __IDATuple_FWD_DEFINED__ */


#ifndef __IDAUserData_FWD_DEFINED__
#define __IDAUserData_FWD_DEFINED__
typedef interface IDAUserData IDAUserData;
#endif 	/* __IDAUserData_FWD_DEFINED__ */


#ifndef __IDA2Geometry_FWD_DEFINED__
#define __IDA2Geometry_FWD_DEFINED__
typedef interface IDA2Geometry IDA2Geometry;
#endif 	/* __IDA2Geometry_FWD_DEFINED__ */


#ifndef __IDA2Image_FWD_DEFINED__
#define __IDA2Image_FWD_DEFINED__
typedef interface IDA2Image IDA2Image;
#endif 	/* __IDA2Image_FWD_DEFINED__ */


#ifndef __IDA2FontStyle_FWD_DEFINED__
#define __IDA2FontStyle_FWD_DEFINED__
typedef interface IDA2FontStyle IDA2FontStyle;
#endif 	/* __IDA2FontStyle_FWD_DEFINED__ */


#ifndef __IDA2LineStyle_FWD_DEFINED__
#define __IDA2LineStyle_FWD_DEFINED__
typedef interface IDA2LineStyle IDA2LineStyle;
#endif 	/* __IDA2LineStyle_FWD_DEFINED__ */


#ifndef __IDA2Event_FWD_DEFINED__
#define __IDA2Event_FWD_DEFINED__
typedef interface IDA2Event IDA2Event;
#endif 	/* __IDA2Event_FWD_DEFINED__ */


#ifndef __IDA2Array_FWD_DEFINED__
#define __IDA2Array_FWD_DEFINED__
typedef interface IDA2Array IDA2Array;
#endif 	/* __IDA2Array_FWD_DEFINED__ */


#ifndef __IDA2Color_FWD_DEFINED__
#define __IDA2Color_FWD_DEFINED__
typedef interface IDA2Color IDA2Color;
#endif 	/* __IDA2Color_FWD_DEFINED__ */


#ifndef __IDA3Geometry_FWD_DEFINED__
#define __IDA3Geometry_FWD_DEFINED__
typedef interface IDA3Geometry IDA3Geometry;
#endif 	/* __IDA3Geometry_FWD_DEFINED__ */


#ifndef __IDA3Image_FWD_DEFINED__
#define __IDA3Image_FWD_DEFINED__
typedef interface IDA3Image IDA3Image;
#endif 	/* __IDA3Image_FWD_DEFINED__ */


#ifndef __IDA3Array_FWD_DEFINED__
#define __IDA3Array_FWD_DEFINED__
typedef interface IDA3Array IDA3Array;
#endif 	/* __IDA3Array_FWD_DEFINED__ */


#ifndef __IDAPreferences_FWD_DEFINED__
#define __IDAPreferences_FWD_DEFINED__
typedef interface IDAPreferences IDAPreferences;
#endif 	/* __IDAPreferences_FWD_DEFINED__ */


#ifndef __IDA2View_FWD_DEFINED__
#define __IDA2View_FWD_DEFINED__
typedef interface IDA2View IDA2View;
#endif 	/* __IDA2View_FWD_DEFINED__ */


#ifndef __IDA3View_FWD_DEFINED__
#define __IDA3View_FWD_DEFINED__
typedef interface IDA3View IDA3View;
#endif 	/* __IDA3View_FWD_DEFINED__ */


#ifndef ___IDAViewEvents_FWD_DEFINED__
#define ___IDAViewEvents_FWD_DEFINED__
typedef interface _IDAViewEvents _IDAViewEvents;
#endif 	/* ___IDAViewEvents_FWD_DEFINED__ */


#ifndef __DAView_FWD_DEFINED__
#define __DAView_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAView DAView;
#else
typedef struct DAView DAView;
#endif /* __cplusplus */

#endif 	/* __DAView_FWD_DEFINED__ */


#ifndef __IDASite_FWD_DEFINED__
#define __IDASite_FWD_DEFINED__
typedef interface IDASite IDASite;
#endif 	/* __IDASite_FWD_DEFINED__ */


#ifndef __IDAImportationResult_FWD_DEFINED__
#define __IDAImportationResult_FWD_DEFINED__
typedef interface IDAImportationResult IDAImportationResult;
#endif 	/* __IDAImportationResult_FWD_DEFINED__ */


#ifndef __IDADXTransformResult_FWD_DEFINED__
#define __IDADXTransformResult_FWD_DEFINED__
typedef interface IDADXTransformResult IDADXTransformResult;
#endif 	/* __IDADXTransformResult_FWD_DEFINED__ */


#ifndef __IDAStatics_FWD_DEFINED__
#define __IDAStatics_FWD_DEFINED__
typedef interface IDAStatics IDAStatics;
#endif 	/* __IDAStatics_FWD_DEFINED__ */


#ifndef __IDA2Statics_FWD_DEFINED__
#define __IDA2Statics_FWD_DEFINED__
typedef interface IDA2Statics IDA2Statics;
#endif 	/* __IDA2Statics_FWD_DEFINED__ */


#ifndef __IDA3Statics_FWD_DEFINED__
#define __IDA3Statics_FWD_DEFINED__
typedef interface IDA3Statics IDA3Statics;
#endif 	/* __IDA3Statics_FWD_DEFINED__ */


#ifndef __DAStatics_FWD_DEFINED__
#define __DAStatics_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAStatics DAStatics;
#else
typedef struct DAStatics DAStatics;
#endif /* __cplusplus */

#endif 	/* __DAStatics_FWD_DEFINED__ */


#ifndef __IDAViewerControl_FWD_DEFINED__
#define __IDAViewerControl_FWD_DEFINED__
typedef interface IDAViewerControl IDAViewerControl;
#endif 	/* __IDAViewerControl_FWD_DEFINED__ */


#ifndef __IDAViewerControlWindowed_FWD_DEFINED__
#define __IDAViewerControlWindowed_FWD_DEFINED__
typedef interface IDAViewerControlWindowed IDAViewerControlWindowed;
#endif 	/* __IDAViewerControlWindowed_FWD_DEFINED__ */


#ifndef __IDA2ViewerControl_FWD_DEFINED__
#define __IDA2ViewerControl_FWD_DEFINED__
typedef interface IDA2ViewerControl IDA2ViewerControl;
#endif 	/* __IDA2ViewerControl_FWD_DEFINED__ */


#ifndef __IDA2ViewerControlWindowed_FWD_DEFINED__
#define __IDA2ViewerControlWindowed_FWD_DEFINED__
typedef interface IDA2ViewerControlWindowed IDA2ViewerControlWindowed;
#endif 	/* __IDA2ViewerControlWindowed_FWD_DEFINED__ */


#ifndef __IDA3ViewerControl_FWD_DEFINED__
#define __IDA3ViewerControl_FWD_DEFINED__
typedef interface IDA3ViewerControl IDA3ViewerControl;
#endif 	/* __IDA3ViewerControl_FWD_DEFINED__ */


#ifndef __IDA3ViewerControlWindowed_FWD_DEFINED__
#define __IDA3ViewerControlWindowed_FWD_DEFINED__
typedef interface IDA3ViewerControlWindowed IDA3ViewerControlWindowed;
#endif 	/* __IDA3ViewerControlWindowed_FWD_DEFINED__ */


#ifndef ___IDAViewerControlEvents_FWD_DEFINED__
#define ___IDAViewerControlEvents_FWD_DEFINED__
typedef interface _IDAViewerControlEvents _IDAViewerControlEvents;
#endif 	/* ___IDAViewerControlEvents_FWD_DEFINED__ */


#ifndef __DAViewerControl_FWD_DEFINED__
#define __DAViewerControl_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAViewerControl DAViewerControl;
#else
typedef struct DAViewerControl DAViewerControl;
#endif /* __cplusplus */

#endif 	/* __DAViewerControl_FWD_DEFINED__ */


#ifndef __DAViewerControlWindowed_FWD_DEFINED__
#define __DAViewerControlWindowed_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAViewerControlWindowed DAViewerControlWindowed;
#else
typedef struct DAViewerControlWindowed DAViewerControlWindowed;
#endif /* __cplusplus */

#endif 	/* __DAViewerControlWindowed_FWD_DEFINED__ */


#ifndef __DABoolean_FWD_DEFINED__
#define __DABoolean_FWD_DEFINED__

#ifdef __cplusplus
typedef class DABoolean DABoolean;
#else
typedef struct DABoolean DABoolean;
#endif /* __cplusplus */

#endif 	/* __DABoolean_FWD_DEFINED__ */


#ifndef __DACamera_FWD_DEFINED__
#define __DACamera_FWD_DEFINED__

#ifdef __cplusplus
typedef class DACamera DACamera;
#else
typedef struct DACamera DACamera;
#endif /* __cplusplus */

#endif 	/* __DACamera_FWD_DEFINED__ */


#ifndef __DAColor_FWD_DEFINED__
#define __DAColor_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAColor DAColor;
#else
typedef struct DAColor DAColor;
#endif /* __cplusplus */

#endif 	/* __DAColor_FWD_DEFINED__ */


#ifndef __DAGeometry_FWD_DEFINED__
#define __DAGeometry_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAGeometry DAGeometry;
#else
typedef struct DAGeometry DAGeometry;
#endif /* __cplusplus */

#endif 	/* __DAGeometry_FWD_DEFINED__ */


#ifndef __DAImage_FWD_DEFINED__
#define __DAImage_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAImage DAImage;
#else
typedef struct DAImage DAImage;
#endif /* __cplusplus */

#endif 	/* __DAImage_FWD_DEFINED__ */


#ifndef __DAMatte_FWD_DEFINED__
#define __DAMatte_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAMatte DAMatte;
#else
typedef struct DAMatte DAMatte;
#endif /* __cplusplus */

#endif 	/* __DAMatte_FWD_DEFINED__ */


#ifndef __DAMicrophone_FWD_DEFINED__
#define __DAMicrophone_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAMicrophone DAMicrophone;
#else
typedef struct DAMicrophone DAMicrophone;
#endif /* __cplusplus */

#endif 	/* __DAMicrophone_FWD_DEFINED__ */


#ifndef __DAMontage_FWD_DEFINED__
#define __DAMontage_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAMontage DAMontage;
#else
typedef struct DAMontage DAMontage;
#endif /* __cplusplus */

#endif 	/* __DAMontage_FWD_DEFINED__ */


#ifndef __DANumber_FWD_DEFINED__
#define __DANumber_FWD_DEFINED__

#ifdef __cplusplus
typedef class DANumber DANumber;
#else
typedef struct DANumber DANumber;
#endif /* __cplusplus */

#endif 	/* __DANumber_FWD_DEFINED__ */


#ifndef __DAPath2_FWD_DEFINED__
#define __DAPath2_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAPath2 DAPath2;
#else
typedef struct DAPath2 DAPath2;
#endif /* __cplusplus */

#endif 	/* __DAPath2_FWD_DEFINED__ */


#ifndef __DAPoint2_FWD_DEFINED__
#define __DAPoint2_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAPoint2 DAPoint2;
#else
typedef struct DAPoint2 DAPoint2;
#endif /* __cplusplus */

#endif 	/* __DAPoint2_FWD_DEFINED__ */


#ifndef __DAPoint3_FWD_DEFINED__
#define __DAPoint3_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAPoint3 DAPoint3;
#else
typedef struct DAPoint3 DAPoint3;
#endif /* __cplusplus */

#endif 	/* __DAPoint3_FWD_DEFINED__ */


#ifndef __DASound_FWD_DEFINED__
#define __DASound_FWD_DEFINED__

#ifdef __cplusplus
typedef class DASound DASound;
#else
typedef struct DASound DASound;
#endif /* __cplusplus */

#endif 	/* __DASound_FWD_DEFINED__ */


#ifndef __DAString_FWD_DEFINED__
#define __DAString_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAString DAString;
#else
typedef struct DAString DAString;
#endif /* __cplusplus */

#endif 	/* __DAString_FWD_DEFINED__ */


#ifndef __DATransform2_FWD_DEFINED__
#define __DATransform2_FWD_DEFINED__

#ifdef __cplusplus
typedef class DATransform2 DATransform2;
#else
typedef struct DATransform2 DATransform2;
#endif /* __cplusplus */

#endif 	/* __DATransform2_FWD_DEFINED__ */


#ifndef __DATransform3_FWD_DEFINED__
#define __DATransform3_FWD_DEFINED__

#ifdef __cplusplus
typedef class DATransform3 DATransform3;
#else
typedef struct DATransform3 DATransform3;
#endif /* __cplusplus */

#endif 	/* __DATransform3_FWD_DEFINED__ */


#ifndef __DAVector2_FWD_DEFINED__
#define __DAVector2_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAVector2 DAVector2;
#else
typedef struct DAVector2 DAVector2;
#endif /* __cplusplus */

#endif 	/* __DAVector2_FWD_DEFINED__ */


#ifndef __DAVector3_FWD_DEFINED__
#define __DAVector3_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAVector3 DAVector3;
#else
typedef struct DAVector3 DAVector3;
#endif /* __cplusplus */

#endif 	/* __DAVector3_FWD_DEFINED__ */


#ifndef __DAFontStyle_FWD_DEFINED__
#define __DAFontStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAFontStyle DAFontStyle;
#else
typedef struct DAFontStyle DAFontStyle;
#endif /* __cplusplus */

#endif 	/* __DAFontStyle_FWD_DEFINED__ */


#ifndef __DALineStyle_FWD_DEFINED__
#define __DALineStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class DALineStyle DALineStyle;
#else
typedef struct DALineStyle DALineStyle;
#endif /* __cplusplus */

#endif 	/* __DALineStyle_FWD_DEFINED__ */


#ifndef __DAEndStyle_FWD_DEFINED__
#define __DAEndStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAEndStyle DAEndStyle;
#else
typedef struct DAEndStyle DAEndStyle;
#endif /* __cplusplus */

#endif 	/* __DAEndStyle_FWD_DEFINED__ */


#ifndef __DAJoinStyle_FWD_DEFINED__
#define __DAJoinStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAJoinStyle DAJoinStyle;
#else
typedef struct DAJoinStyle DAJoinStyle;
#endif /* __cplusplus */

#endif 	/* __DAJoinStyle_FWD_DEFINED__ */


#ifndef __DADashStyle_FWD_DEFINED__
#define __DADashStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class DADashStyle DADashStyle;
#else
typedef struct DADashStyle DADashStyle;
#endif /* __cplusplus */

#endif 	/* __DADashStyle_FWD_DEFINED__ */


#ifndef __DABbox2_FWD_DEFINED__
#define __DABbox2_FWD_DEFINED__

#ifdef __cplusplus
typedef class DABbox2 DABbox2;
#else
typedef struct DABbox2 DABbox2;
#endif /* __cplusplus */

#endif 	/* __DABbox2_FWD_DEFINED__ */


#ifndef __DABbox3_FWD_DEFINED__
#define __DABbox3_FWD_DEFINED__

#ifdef __cplusplus
typedef class DABbox3 DABbox3;
#else
typedef struct DABbox3 DABbox3;
#endif /* __cplusplus */

#endif 	/* __DABbox3_FWD_DEFINED__ */


#ifndef __DAPair_FWD_DEFINED__
#define __DAPair_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAPair DAPair;
#else
typedef struct DAPair DAPair;
#endif /* __cplusplus */

#endif 	/* __DAPair_FWD_DEFINED__ */


#ifndef __DAEvent_FWD_DEFINED__
#define __DAEvent_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAEvent DAEvent;
#else
typedef struct DAEvent DAEvent;
#endif /* __cplusplus */

#endif 	/* __DAEvent_FWD_DEFINED__ */


#ifndef __DAArray_FWD_DEFINED__
#define __DAArray_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAArray DAArray;
#else
typedef struct DAArray DAArray;
#endif /* __cplusplus */

#endif 	/* __DAArray_FWD_DEFINED__ */


#ifndef __DATuple_FWD_DEFINED__
#define __DATuple_FWD_DEFINED__

#ifdef __cplusplus
typedef class DATuple DATuple;
#else
typedef struct DATuple DATuple;
#endif /* __cplusplus */

#endif 	/* __DATuple_FWD_DEFINED__ */


#ifndef __DAUserData_FWD_DEFINED__
#define __DAUserData_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAUserData DAUserData;
#else
typedef struct DAUserData DAUserData;
#endif /* __cplusplus */

#endif 	/* __DAUserData_FWD_DEFINED__ */


#ifndef __DAImportationResult_FWD_DEFINED__
#define __DAImportationResult_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAImportationResult DAImportationResult;
#else
typedef struct DAImportationResult DAImportationResult;
#endif /* __cplusplus */

#endif 	/* __DAImportationResult_FWD_DEFINED__ */


#ifndef __DAPickableResult_FWD_DEFINED__
#define __DAPickableResult_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAPickableResult DAPickableResult;
#else
typedef struct DAPickableResult DAPickableResult;
#endif /* __cplusplus */

#endif 	/* __DAPickableResult_FWD_DEFINED__ */


/* header files for imported files */
#include "oleidl.h"
#include "servprov.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_danim_0000 */
/* [local] */ 

typedef IDAPickableResult *PickableResultPtr;



extern RPC_IF_HANDLE __MIDL_itf_danim_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_danim_0000_v0_0_s_ifspec;


#ifndef __DirectAnimation_LIBRARY_DEFINED__
#define __DirectAnimation_LIBRARY_DEFINED__

/* library DirectAnimation */
/* [version][lcid][helpstring][uuid] */ 









/* [helpstring] */ 
enum __MIDL___MIDL_itf_danim_0134_0001
    {	DAContinueTimeline	= 1L << 0,
	DASwitchFinal	= 1L << 1,
	DASwitchNextTick	= 1L << 2
    } ;
typedef /* [public][helpstring] */ 
enum __MIDL___MIDL_itf_danim_0135_0001
    {	DAQUAL_AA_TEXT_ON	= 1L << 0,
	DAQUAL_AA_TEXT_OFF	= 1L << 1,
	DAQUAL_AA_LINES_ON	= 1L << 2,
	DAQUAL_AA_LINES_OFF	= 1L << 3,
	DAQUAL_AA_SOLIDS_ON	= 1L << 4,
	DAQUAL_AA_SOLIDS_OFF	= 1L << 5,
	DAQUAL_AA_CLIP_ON	= 1L << 6,
	DAQUAL_AA_CLIP_OFF	= 1L << 7,
	DAQUAL_MSHTML_COLORS_ON	= 1L << 8,
	DAQUAL_MSHTML_COLORS_OFF	= 1L << 9,
	DAQUAL_QUALITY_TRANSFORMS_ON	= 1L << 10,
	DAQUAL_QUALITY_TRANSFORMS_OFF	= 1L << 11
    } 	DA_IMAGE_QUALITY_FLAGS;

typedef /* [public][helpstring] */ 
enum __MIDL___MIDL_itf_danim_0135_0002
    {	DAINVRECT_MERGE_BOXES	= 1L << 0
    } 	DA_INVALIDATED_RECTS_FLAGS;

typedef /* [public][helpstring] */ 
enum __MIDL___MIDL_itf_danim_0135_0003
    {	DASHSTYLE_SOLID	= 0,
	DASHSTYLE_DASH	= 1L,
	DASHSTYLE_DOT	= 2L,
	DASHSTYLE_DASHDOT	= 3L,
	DASHSTYLE_DASHDOTDOT	= 4L,
	DASHSTYLE_NULL	= 5L
    } 	DA_DASHSTYLE_ENUM;

typedef /* [public][helpstring] */ 
enum __MIDL___MIDL_itf_danim_0135_0004
    {	ENDSTYLE_ROUND	= 0,
	ENDSTYLE_SQUARE	= 1L,
	ENDSTYLE_FLAT	= 2L
    } 	DA_ENDSTYLE_ENUM;

typedef /* [public][helpstring] */ 
enum __MIDL___MIDL_itf_danim_0135_0005
    {	JOINSTYLE_ROUND	= 0,
	JOINSTYLE_BEVEL	= 1L,
	JOINSTYLE_MITER	= 2L
    } 	DA_JOINSTYLE_ENUM;






































/* [helpstring] */ 
enum __MIDL___MIDL_itf_danim_0182_0001
    {	DAAsyncFlag	= 0x1
    } ;
typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_danim_0185_0001
    {	DAEmpty	= 0,
	DASolid	= 1,
	DADash	= 2
    } 	DA_DASH_STYLE;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_danim_0185_0002
    {	DAEndFlat	= 0,
	DAEndSquare	= 1,
	DAEndRound	= 2
    } 	DA_END_STYLE;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_danim_0185_0003
    {	DAJoinBevel	= 0,
	DAJoinRound	= 1,
	DAJoinMiter	= 2
    } 	DA_JOIN_STYLE;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_danim_0193_0001
    {	DAMultimediaTimer	= 0,
	DAContainerTimer	= 1,
	DAWMTimer	= 2
    } 	DA_TIMER_SOURCE;


EXTERN_C const IID LIBID_DirectAnimation;

#ifndef __IDAViewSite_INTERFACE_DEFINED__
#define __IDAViewSite_INTERFACE_DEFINED__

/* interface IDAViewSite */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAViewSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("283807B3-2C60-11d0-A31D-00AA00B92C03")
    IDAViewSite : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetStatusText( 
            /* [in] */ BSTR StatusText) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAViewSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAViewSite * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAViewSite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAViewSite * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAViewSite * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAViewSite * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAViewSite * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAViewSite * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *SetStatusText )( 
            IDAViewSite * This,
            /* [in] */ BSTR StatusText);
        
        END_INTERFACE
    } IDAViewSiteVtbl;

    interface IDAViewSite
    {
        CONST_VTBL struct IDAViewSiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAViewSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAViewSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAViewSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAViewSite_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAViewSite_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAViewSite_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAViewSite_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAViewSite_SetStatusText(This,StatusText)	\
    (This)->lpVtbl -> SetStatusText(This,StatusText)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAViewSite_SetStatusText_Proxy( 
    IDAViewSite * This,
    /* [in] */ BSTR StatusText);


void __RPC_STUB IDAViewSite_SetStatusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAViewSite_INTERFACE_DEFINED__ */


#ifndef __IDAView_INTERFACE_DEFINED__
#define __IDAView_INTERFACE_DEFINED__

/* interface IDAView */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("283807B4-2C60-11d0-A31D-00AA00B92C03")
    IDAView : public IDispatch
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_SimulationTime( 
            /* [retval][out] */ double *simTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Tick( 
            /* [in] */ double simTime,
            /* [retval][out] */ VARIANT_BOOL *needToRender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Render( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddBvrToRun( 
            /* [in] */ IDABehavior *bvr,
            /* [retval][out] */ LONG *pId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveRunningBvr( 
            /* [in] */ LONG id) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StartModel( 
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StopModel( void) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ long *hwnd) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Window( 
            /* [in] */ long hwnd) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_IDirectDrawSurface( 
            /* [retval][out] */ IUnknown **ddsurf) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IDirectDrawSurface( 
            /* [in] */ IUnknown *ddsurf) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_DC( 
            /* [retval][out] */ HDC *dc) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DC( 
            /* [in] */ HDC dc) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_CompositeDirectlyToTarget( 
            /* [retval][out] */ VARIANT_BOOL *composeToTarget) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CompositeDirectlyToTarget( 
            /* [in] */ VARIANT_BOOL composeToTarget) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetViewport( 
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetClipRect( 
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RePaint( 
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PaletteChanged( 
            /* [in] */ VARIANT_BOOL bNew) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Site( 
            /* [retval][out] */ IDAViewSite **pViewSite) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Site( 
            /* [in] */ IDAViewSite *pViewSite) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClientSite( 
            /* [in] */ IOleClientSite *pClientSite) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClientSite( 
            /* [retval][out] */ IOleClientSite **pClientSite) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnMouseMove( 
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE modifiers) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnMouseButton( 
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE button,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnKey( 
            /* [in] */ double when,
            /* [in] */ LONG key,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnFocus( 
            /* [in] */ VARIANT_BOOL bHasFocus) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Preferences( 
            /* [retval][out] */ IDAPreferences **prefs) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE QueryHitPoint( 
            /* [in] */ DWORD dwAspect,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [in] */ LONG lCloseHint,
            /* [retval][out] */ DWORD *pHitResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAView * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAView * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAView * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAView * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAView * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SimulationTime )( 
            IDAView * This,
            /* [retval][out] */ double *simTime);
        
        HRESULT ( STDMETHODCALLTYPE *Tick )( 
            IDAView * This,
            /* [in] */ double simTime,
            /* [retval][out] */ VARIANT_BOOL *needToRender);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDAView * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddBvrToRun )( 
            IDAView * This,
            /* [in] */ IDABehavior *bvr,
            /* [retval][out] */ LONG *pId);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveRunningBvr )( 
            IDAView * This,
            /* [in] */ LONG id);
        
        HRESULT ( STDMETHODCALLTYPE *StartModel )( 
            IDAView * This,
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime);
        
        HRESULT ( STDMETHODCALLTYPE *StopModel )( 
            IDAView * This);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            IDAView * This,
            /* [retval][out] */ long *hwnd);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Window )( 
            IDAView * This,
            /* [in] */ long hwnd);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IDirectDrawSurface )( 
            IDAView * This,
            /* [retval][out] */ IUnknown **ddsurf);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IDirectDrawSurface )( 
            IDAView * This,
            /* [in] */ IUnknown *ddsurf);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DC )( 
            IDAView * This,
            /* [retval][out] */ HDC *dc);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DC )( 
            IDAView * This,
            /* [in] */ HDC dc);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompositeDirectlyToTarget )( 
            IDAView * This,
            /* [retval][out] */ VARIANT_BOOL *composeToTarget);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CompositeDirectlyToTarget )( 
            IDAView * This,
            /* [in] */ VARIANT_BOOL composeToTarget);
        
        HRESULT ( STDMETHODCALLTYPE *SetViewport )( 
            IDAView * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *SetClipRect )( 
            IDAView * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *RePaint )( 
            IDAView * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *PaletteChanged )( 
            IDAView * This,
            /* [in] */ VARIANT_BOOL bNew);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Site )( 
            IDAView * This,
            /* [retval][out] */ IDAViewSite **pViewSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Site )( 
            IDAView * This,
            /* [in] */ IDAViewSite *pViewSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientSite )( 
            IDAView * This,
            /* [in] */ IOleClientSite *pClientSite);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientSite )( 
            IDAView * This,
            /* [retval][out] */ IOleClientSite **pClientSite);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseMove )( 
            IDAView * This,
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseButton )( 
            IDAView * This,
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE button,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnKey )( 
            IDAView * This,
            /* [in] */ double when,
            /* [in] */ LONG key,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnFocus )( 
            IDAView * This,
            /* [in] */ VARIANT_BOOL bHasFocus);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Preferences )( 
            IDAView * This,
            /* [retval][out] */ IDAPreferences **prefs);
        
        HRESULT ( STDMETHODCALLTYPE *QueryHitPoint )( 
            IDAView * This,
            /* [in] */ DWORD dwAspect,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [in] */ LONG lCloseHint,
            /* [retval][out] */ DWORD *pHitResult);
        
        END_INTERFACE
    } IDAViewVtbl;

    interface IDAView
    {
        CONST_VTBL struct IDAViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAView_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAView_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAView_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAView_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAView_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAView_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAView_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAView_get_SimulationTime(This,simTime)	\
    (This)->lpVtbl -> get_SimulationTime(This,simTime)

#define IDAView_Tick(This,simTime,needToRender)	\
    (This)->lpVtbl -> Tick(This,simTime,needToRender)

#define IDAView_Render(This)	\
    (This)->lpVtbl -> Render(This)

#define IDAView_AddBvrToRun(This,bvr,pId)	\
    (This)->lpVtbl -> AddBvrToRun(This,bvr,pId)

#define IDAView_RemoveRunningBvr(This,id)	\
    (This)->lpVtbl -> RemoveRunningBvr(This,id)

#define IDAView_StartModel(This,pImage,pSound,startTime)	\
    (This)->lpVtbl -> StartModel(This,pImage,pSound,startTime)

#define IDAView_StopModel(This)	\
    (This)->lpVtbl -> StopModel(This)

#define IDAView_get_Window(This,hwnd)	\
    (This)->lpVtbl -> get_Window(This,hwnd)

#define IDAView_put_Window(This,hwnd)	\
    (This)->lpVtbl -> put_Window(This,hwnd)

#define IDAView_get_IDirectDrawSurface(This,ddsurf)	\
    (This)->lpVtbl -> get_IDirectDrawSurface(This,ddsurf)

#define IDAView_put_IDirectDrawSurface(This,ddsurf)	\
    (This)->lpVtbl -> put_IDirectDrawSurface(This,ddsurf)

#define IDAView_get_DC(This,dc)	\
    (This)->lpVtbl -> get_DC(This,dc)

#define IDAView_put_DC(This,dc)	\
    (This)->lpVtbl -> put_DC(This,dc)

#define IDAView_get_CompositeDirectlyToTarget(This,composeToTarget)	\
    (This)->lpVtbl -> get_CompositeDirectlyToTarget(This,composeToTarget)

#define IDAView_put_CompositeDirectlyToTarget(This,composeToTarget)	\
    (This)->lpVtbl -> put_CompositeDirectlyToTarget(This,composeToTarget)

#define IDAView_SetViewport(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> SetViewport(This,xPos,yPos,w,h)

#define IDAView_SetClipRect(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> SetClipRect(This,xPos,yPos,w,h)

#define IDAView_RePaint(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> RePaint(This,xPos,yPos,w,h)

#define IDAView_PaletteChanged(This,bNew)	\
    (This)->lpVtbl -> PaletteChanged(This,bNew)

#define IDAView_get_Site(This,pViewSite)	\
    (This)->lpVtbl -> get_Site(This,pViewSite)

#define IDAView_put_Site(This,pViewSite)	\
    (This)->lpVtbl -> put_Site(This,pViewSite)

#define IDAView_put_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> put_ClientSite(This,pClientSite)

#define IDAView_get_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> get_ClientSite(This,pClientSite)

#define IDAView_OnMouseMove(This,when,xPos,yPos,modifiers)	\
    (This)->lpVtbl -> OnMouseMove(This,when,xPos,yPos,modifiers)

#define IDAView_OnMouseButton(This,when,xPos,yPos,button,bPressed,modifiers)	\
    (This)->lpVtbl -> OnMouseButton(This,when,xPos,yPos,button,bPressed,modifiers)

#define IDAView_OnKey(This,when,key,bPressed,modifiers)	\
    (This)->lpVtbl -> OnKey(This,when,key,bPressed,modifiers)

#define IDAView_OnFocus(This,bHasFocus)	\
    (This)->lpVtbl -> OnFocus(This,bHasFocus)

#define IDAView_get_Preferences(This,prefs)	\
    (This)->lpVtbl -> get_Preferences(This,prefs)

#define IDAView_QueryHitPoint(This,dwAspect,prcBounds,ptLoc,lCloseHint,pHitResult)	\
    (This)->lpVtbl -> QueryHitPoint(This,dwAspect,prcBounds,ptLoc,lCloseHint,pHitResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_SimulationTime_Proxy( 
    IDAView * This,
    /* [retval][out] */ double *simTime);


void __RPC_STUB IDAView_get_SimulationTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_Tick_Proxy( 
    IDAView * This,
    /* [in] */ double simTime,
    /* [retval][out] */ VARIANT_BOOL *needToRender);


void __RPC_STUB IDAView_Tick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_Render_Proxy( 
    IDAView * This);


void __RPC_STUB IDAView_Render_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_AddBvrToRun_Proxy( 
    IDAView * This,
    /* [in] */ IDABehavior *bvr,
    /* [retval][out] */ LONG *pId);


void __RPC_STUB IDAView_AddBvrToRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_RemoveRunningBvr_Proxy( 
    IDAView * This,
    /* [in] */ LONG id);


void __RPC_STUB IDAView_RemoveRunningBvr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_StartModel_Proxy( 
    IDAView * This,
    /* [in] */ IDAImage *pImage,
    /* [in] */ IDASound *pSound,
    /* [in] */ double startTime);


void __RPC_STUB IDAView_StartModel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_StopModel_Proxy( 
    IDAView * This);


void __RPC_STUB IDAView_StopModel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_Window_Proxy( 
    IDAView * This,
    /* [retval][out] */ long *hwnd);


void __RPC_STUB IDAView_get_Window_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAView_put_Window_Proxy( 
    IDAView * This,
    /* [in] */ long hwnd);


void __RPC_STUB IDAView_put_Window_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_IDirectDrawSurface_Proxy( 
    IDAView * This,
    /* [retval][out] */ IUnknown **ddsurf);


void __RPC_STUB IDAView_get_IDirectDrawSurface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAView_put_IDirectDrawSurface_Proxy( 
    IDAView * This,
    /* [in] */ IUnknown *ddsurf);


void __RPC_STUB IDAView_put_IDirectDrawSurface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_DC_Proxy( 
    IDAView * This,
    /* [retval][out] */ HDC *dc);


void __RPC_STUB IDAView_get_DC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAView_put_DC_Proxy( 
    IDAView * This,
    /* [in] */ HDC dc);


void __RPC_STUB IDAView_put_DC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_CompositeDirectlyToTarget_Proxy( 
    IDAView * This,
    /* [retval][out] */ VARIANT_BOOL *composeToTarget);


void __RPC_STUB IDAView_get_CompositeDirectlyToTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAView_put_CompositeDirectlyToTarget_Proxy( 
    IDAView * This,
    /* [in] */ VARIANT_BOOL composeToTarget);


void __RPC_STUB IDAView_put_CompositeDirectlyToTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_SetViewport_Proxy( 
    IDAView * This,
    /* [in] */ LONG xPos,
    /* [in] */ LONG yPos,
    /* [in] */ LONG w,
    /* [in] */ LONG h);


void __RPC_STUB IDAView_SetViewport_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_SetClipRect_Proxy( 
    IDAView * This,
    /* [in] */ LONG xPos,
    /* [in] */ LONG yPos,
    /* [in] */ LONG w,
    /* [in] */ LONG h);


void __RPC_STUB IDAView_SetClipRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_RePaint_Proxy( 
    IDAView * This,
    /* [in] */ LONG xPos,
    /* [in] */ LONG yPos,
    /* [in] */ LONG w,
    /* [in] */ LONG h);


void __RPC_STUB IDAView_RePaint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_PaletteChanged_Proxy( 
    IDAView * This,
    /* [in] */ VARIANT_BOOL bNew);


void __RPC_STUB IDAView_PaletteChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_Site_Proxy( 
    IDAView * This,
    /* [retval][out] */ IDAViewSite **pViewSite);


void __RPC_STUB IDAView_get_Site_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAView_put_Site_Proxy( 
    IDAView * This,
    /* [in] */ IDAViewSite *pViewSite);


void __RPC_STUB IDAView_put_Site_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAView_put_ClientSite_Proxy( 
    IDAView * This,
    /* [in] */ IOleClientSite *pClientSite);


void __RPC_STUB IDAView_put_ClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_ClientSite_Proxy( 
    IDAView * This,
    /* [retval][out] */ IOleClientSite **pClientSite);


void __RPC_STUB IDAView_get_ClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_OnMouseMove_Proxy( 
    IDAView * This,
    /* [in] */ double when,
    /* [in] */ LONG xPos,
    /* [in] */ LONG yPos,
    /* [in] */ BYTE modifiers);


void __RPC_STUB IDAView_OnMouseMove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_OnMouseButton_Proxy( 
    IDAView * This,
    /* [in] */ double when,
    /* [in] */ LONG xPos,
    /* [in] */ LONG yPos,
    /* [in] */ BYTE button,
    /* [in] */ VARIANT_BOOL bPressed,
    /* [in] */ BYTE modifiers);


void __RPC_STUB IDAView_OnMouseButton_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_OnKey_Proxy( 
    IDAView * This,
    /* [in] */ double when,
    /* [in] */ LONG key,
    /* [in] */ VARIANT_BOOL bPressed,
    /* [in] */ BYTE modifiers);


void __RPC_STUB IDAView_OnKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_OnFocus_Proxy( 
    IDAView * This,
    /* [in] */ VARIANT_BOOL bHasFocus);


void __RPC_STUB IDAView_OnFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_Preferences_Proxy( 
    IDAView * This,
    /* [retval][out] */ IDAPreferences **prefs);


void __RPC_STUB IDAView_get_Preferences_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_QueryHitPoint_Proxy( 
    IDAView * This,
    /* [in] */ DWORD dwAspect,
    /* [in] */ LPCRECT prcBounds,
    /* [in] */ POINT ptLoc,
    /* [in] */ LONG lCloseHint,
    /* [retval][out] */ DWORD *pHitResult);


void __RPC_STUB IDAView_QueryHitPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAView_INTERFACE_DEFINED__ */


#ifndef __IDABehavior_INTERFACE_DEFINED__
#define __IDABehavior_INTERFACE_DEFINED__

/* interface IDABehavior */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDABehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("283807B7-2C60-11d0-A31D-00AA00B92C03")
    IDABehavior : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetClassName( 
            /* [retval][out] */ BSTR *pClassName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Init( 
            /* [in] */ IDABehavior *toBvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Importance( 
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RunOnce( 
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubstituteTime( 
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SwitchTo( 
            /* [in] */ IDABehavior *switchTo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SwitchToNumber( 
            /* [in] */ double numToSwitchTo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SwitchToString( 
            /* [in] */ BSTR strToSwitchTo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Hook( 
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Duration( 
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DurationAnim( 
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Repeat( 
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RepeatForever( 
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsReady( 
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDABehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDABehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDABehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDABehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDABehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDABehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDABehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDABehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDABehavior * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDABehavior * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDABehavior * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDABehavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDABehavior * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDABehavior * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDABehavior * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDABehavior * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDABehavior * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDABehavior * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDABehavior * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDABehavior * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDABehavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDABehavior * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        END_INTERFACE
    } IDABehaviorVtbl;

    interface IDABehavior
    {
        CONST_VTBL struct IDABehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDABehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDABehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDABehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDABehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDABehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDABehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDABehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDABehavior_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDABehavior_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDABehavior_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDABehavior_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDABehavior_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDABehavior_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDABehavior_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDABehavior_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDABehavior_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDABehavior_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDABehavior_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDABehavior_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDABehavior_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDABehavior_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDABehavior_GetClassName_Proxy( 
    IDABehavior * This,
    /* [retval][out] */ BSTR *pClassName);


void __RPC_STUB IDABehavior_GetClassName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_Init_Proxy( 
    IDABehavior * This,
    /* [in] */ IDABehavior *toBvr);


void __RPC_STUB IDABehavior_Init_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_Importance_Proxy( 
    IDABehavior * This,
    /* [in] */ double relativeImportance,
    /* [retval][out] */ IDABehavior **ppBvr);


void __RPC_STUB IDABehavior_Importance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_RunOnce_Proxy( 
    IDABehavior * This,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDABehavior_RunOnce_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_SubstituteTime_Proxy( 
    IDABehavior * This,
    /* [in] */ IDANumber *xform,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDABehavior_SubstituteTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_SwitchTo_Proxy( 
    IDABehavior * This,
    /* [in] */ IDABehavior *switchTo);


void __RPC_STUB IDABehavior_SwitchTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_SwitchToNumber_Proxy( 
    IDABehavior * This,
    /* [in] */ double numToSwitchTo);


void __RPC_STUB IDABehavior_SwitchToNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_SwitchToString_Proxy( 
    IDABehavior * This,
    /* [in] */ BSTR strToSwitchTo);


void __RPC_STUB IDABehavior_SwitchToString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_Hook_Proxy( 
    IDABehavior * This,
    /* [in] */ IDABvrHook *notifier,
    /* [retval][out] */ IDABehavior **pBvr);


void __RPC_STUB IDABehavior_Hook_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_Duration_Proxy( 
    IDABehavior * This,
    /* [in] */ double duration,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDABehavior_Duration_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_DurationAnim_Proxy( 
    IDABehavior * This,
    /* [in] */ IDANumber *duration,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDABehavior_DurationAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_Repeat_Proxy( 
    IDABehavior * This,
    /* [in] */ LONG count,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDABehavior_Repeat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_RepeatForever_Proxy( 
    IDABehavior * This,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDABehavior_RepeatForever_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_IsReady_Proxy( 
    IDABehavior * This,
    /* [in] */ VARIANT_BOOL bBlock,
    /* [retval][out] */ VARIANT_BOOL *b);


void __RPC_STUB IDABehavior_IsReady_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDABehavior_INTERFACE_DEFINED__ */


#ifndef __IDANumber_INTERFACE_DEFINED__
#define __IDANumber_INTERFACE_DEFINED__

/* interface IDANumber */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDANumber;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9CDE7340-3C20-11d0-A330-00AA00B92C03")
    IDANumber : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Extract( 
            /* [retval][out] */ double *ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AnimateProperty( 
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDANumber **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ToStringAnim( 
            /* [in] */ IDANumber *precision_0,
            /* [retval][out] */ IDAString **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ToString( 
            /* [in] */ double precision_0,
            /* [retval][out] */ IDAString **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDANumberVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDANumber * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDANumber * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDANumber * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDANumber * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDANumber * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDANumber * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDANumber * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDANumber * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDANumber * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDANumber * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDANumber * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDANumber * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDANumber * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDANumber * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDANumber * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDANumber * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDANumber * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDANumber * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDANumber * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDANumber * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDANumber * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Extract )( 
            IDANumber * This,
            /* [retval][out] */ double *ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AnimateProperty )( 
            IDANumber * This,
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ToStringAnim )( 
            IDANumber * This,
            /* [in] */ IDANumber *precision_0,
            /* [retval][out] */ IDAString **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToString )( 
            IDANumber * This,
            /* [in] */ double precision_0,
            /* [retval][out] */ IDAString **ret_1);
        
        END_INTERFACE
    } IDANumberVtbl;

    interface IDANumber
    {
        CONST_VTBL struct IDANumberVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDANumber_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDANumber_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDANumber_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDANumber_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDANumber_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDANumber_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDANumber_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDANumber_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDANumber_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDANumber_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDANumber_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDANumber_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDANumber_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDANumber_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDANumber_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDANumber_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDANumber_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDANumber_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDANumber_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDANumber_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDANumber_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDANumber_Extract(This,ret_0)	\
    (This)->lpVtbl -> Extract(This,ret_0)

#define IDANumber_AnimateProperty(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)	\
    (This)->lpVtbl -> AnimateProperty(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)

#define IDANumber_ToStringAnim(This,precision_0,ret_1)	\
    (This)->lpVtbl -> ToStringAnim(This,precision_0,ret_1)

#define IDANumber_ToString(This,precision_0,ret_1)	\
    (This)->lpVtbl -> ToString(This,precision_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDANumber_Extract_Proxy( 
    IDANumber * This,
    /* [retval][out] */ double *ret_0);


void __RPC_STUB IDANumber_Extract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDANumber_AnimateProperty_Proxy( 
    IDANumber * This,
    /* [in] */ BSTR propertyPath_0,
    /* [in] */ BSTR scriptingLanguage_1,
    /* [in] */ VARIANT_BOOL invokeAsMethod_2,
    /* [in] */ double minUpdateInterval_3,
    /* [retval][out] */ IDANumber **ret_4);


void __RPC_STUB IDANumber_AnimateProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDANumber_ToStringAnim_Proxy( 
    IDANumber * This,
    /* [in] */ IDANumber *precision_0,
    /* [retval][out] */ IDAString **ret_1);


void __RPC_STUB IDANumber_ToStringAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDANumber_ToString_Proxy( 
    IDANumber * This,
    /* [in] */ double precision_0,
    /* [retval][out] */ IDAString **ret_1);


void __RPC_STUB IDANumber_ToString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDANumber_INTERFACE_DEFINED__ */


#ifndef __IDABvrHook_INTERFACE_DEFINED__
#define __IDABvrHook_INTERFACE_DEFINED__

/* interface IDABvrHook */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDABvrHook;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3E2487C4-8709-11d0-B177-00C04FC2A0CA")
    IDABvrHook : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Notify( 
            /* [in] */ LONG id,
            /* [in] */ VARIANT_BOOL startingPerformance,
            /* [in] */ double startTime,
            /* [in] */ double gTime,
            /* [in] */ double lTime,
            /* [in] */ IDABehavior *sampleVal,
            /* [in] */ IDABehavior *curRunningBvr,
            /* [retval][out] */ IDABehavior **ppBvr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDABvrHookVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDABvrHook * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDABvrHook * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDABvrHook * This);
        
        HRESULT ( STDMETHODCALLTYPE *Notify )( 
            IDABvrHook * This,
            /* [in] */ LONG id,
            /* [in] */ VARIANT_BOOL startingPerformance,
            /* [in] */ double startTime,
            /* [in] */ double gTime,
            /* [in] */ double lTime,
            /* [in] */ IDABehavior *sampleVal,
            /* [in] */ IDABehavior *curRunningBvr,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        END_INTERFACE
    } IDABvrHookVtbl;

    interface IDABvrHook
    {
        CONST_VTBL struct IDABvrHookVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDABvrHook_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDABvrHook_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDABvrHook_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDABvrHook_Notify(This,id,startingPerformance,startTime,gTime,lTime,sampleVal,curRunningBvr,ppBvr)	\
    (This)->lpVtbl -> Notify(This,id,startingPerformance,startTime,gTime,lTime,sampleVal,curRunningBvr,ppBvr)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDABvrHook_Notify_Proxy( 
    IDABvrHook * This,
    /* [in] */ LONG id,
    /* [in] */ VARIANT_BOOL startingPerformance,
    /* [in] */ double startTime,
    /* [in] */ double gTime,
    /* [in] */ double lTime,
    /* [in] */ IDABehavior *sampleVal,
    /* [in] */ IDABehavior *curRunningBvr,
    /* [retval][out] */ IDABehavior **ppBvr);


void __RPC_STUB IDABvrHook_Notify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDABvrHook_INTERFACE_DEFINED__ */


#ifndef __IDADrawingSurface_INTERFACE_DEFINED__
#define __IDADrawingSurface_INTERFACE_DEFINED__

/* interface IDADrawingSurface */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDADrawingSurface;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BC0BFD34-D21D-11d0-9385-00C04FB6BD36")
    IDADrawingSurface : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
            /* [retval][out] */ IDAImage **img) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineStyle( 
            /* [in] */ IDALineStyle *ls) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderStyle( 
            /* [in] */ IDALineStyle *bs) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FontStyle( 
            /* [in] */ IDAFontStyle *fs) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClipMatte( 
            /* [in] */ IDAMatte *matte) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MouseEventsEnabled( 
            /* [in] */ VARIANT_BOOL on) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HatchFillTransparent( 
            /* [in] */ VARIANT_BOOL fillOff) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LocalContextImage( 
            /* [retval][out] */ IDAImage **img) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SaveGraphicsState( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RestoreGraphicsState( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Opacity( 
            /* [in] */ double opac) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpacityAnim( 
            /* [in] */ IDANumber *opac) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Crop( 
            /* [in] */ double lowerLeftX,
            /* [in] */ double lowerLeftY,
            /* [in] */ double upperRightX,
            /* [in] */ double upperRightY) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CropPoints( 
            /* [in] */ IDAPoint2 *min,
            /* [in] */ IDAPoint2 *max) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform2 *xform) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LineColor( 
            /* [in] */ IDAColor *clr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LineWidth( 
            /* [in] */ double w) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LineDashStyle( 
            /* [in] */ DA_DASH_STYLE id) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LineEndStyle( 
            /* [in] */ DA_END_STYLE id) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LineJoinStyle( 
            /* [in] */ DA_JOIN_STYLE id) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BorderColor( 
            /* [in] */ IDAColor *clr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BorderWidth( 
            /* [in] */ double w) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BorderDashStyle( 
            /* [in] */ DA_DASH_STYLE id) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BorderEndStyle( 
            /* [in] */ DA_END_STYLE obsolete) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BorderJoinStyle( 
            /* [in] */ DA_JOIN_STYLE id) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Font( 
            /* [in] */ BSTR FontFace,
            /* [in] */ LONG sizeInPoints,
            /* [in] */ VARIANT_BOOL Bold,
            /* [in] */ VARIANT_BOOL italic,
            /* [in] */ VARIANT_BOOL underline,
            /* [in] */ VARIANT_BOOL strikethrough) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextureFill( 
            /* [in] */ IDAImage *obsolete1,
            /* [in] */ double obsolete2,
            /* [in] */ double obsolete3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImageFill( 
            /* [in] */ IDAImage *obsolete1,
            /* [in] */ double obsolete2,
            /* [in] */ double obsolete3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FillTexture( 
            /* [in] */ IDAImage *img) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FillImage( 
            /* [in] */ IDAImage *img) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FillStyle( 
            /* [in] */ int ID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FillColor( 
            /* [in] */ IDAColor *foreground) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SecondaryFillColor( 
            /* [in] */ IDAColor *val) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientShape( 
            /* [in] */ VARIANT pts) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientExtent( 
            /* [in] */ double startx,
            /* [in] */ double starty,
            /* [in] */ double finishx,
            /* [in] */ double finishy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientExtentPoints( 
            /* [in] */ IDAPoint2 *startColor,
            /* [in] */ IDAPoint2 *stopColor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientRolloffPower( 
            /* [in] */ double power) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientRolloffPowerAnim( 
            /* [in] */ IDANumber *power) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FixedFillScale( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HorizontalFillScale( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE VerticalFillScale( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AutoSizeFillScale( void) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE PolylineEx( 
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *pts[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Polyline( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE PolygonEx( 
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *pts[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Polygon( 
            /* [in] */ VARIANT v) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LinePoints( 
            /* [in] */ IDAPoint2 *p1,
            /* [in] */ IDAPoint2 *p2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Line( 
            /* [in] */ double startX,
            /* [in] */ double startY,
            /* [in] */ double endX,
            /* [in] */ double endY) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ArcRadians( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ArcDegrees( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Oval( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double w,
            /* [in] */ double h) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rect( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double w,
            /* [in] */ double h) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RoundRect( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double w,
            /* [in] */ double h,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PieRadians( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PieDegrees( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Text( 
            /* [in] */ BSTR str,
            /* [in] */ double xPos,
            /* [in] */ double yPos) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextPoint( 
            /* [in] */ BSTR str,
            /* [in] */ IDAPoint2 *point) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FillPath( 
            /* [in] */ IDAPath2 *path) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DrawPath( 
            /* [in] */ IDAPath2 *path) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OverlayImage( 
            /* [in] */ IDAImage *img) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDADrawingSurfaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDADrawingSurface * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDADrawingSurface * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDADrawingSurface * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDADrawingSurface * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDADrawingSurface * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDADrawingSurface * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IDADrawingSurface * This,
            /* [retval][out] */ IDAImage **img);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineStyle )( 
            IDADrawingSurface * This,
            /* [in] */ IDALineStyle *ls);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderStyle )( 
            IDADrawingSurface * This,
            /* [in] */ IDALineStyle *bs);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontStyle )( 
            IDADrawingSurface * This,
            /* [in] */ IDAFontStyle *fs);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClipMatte )( 
            IDADrawingSurface * This,
            /* [in] */ IDAMatte *matte);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MouseEventsEnabled )( 
            IDADrawingSurface * This,
            /* [in] */ VARIANT_BOOL on);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HatchFillTransparent )( 
            IDADrawingSurface * This,
            /* [in] */ VARIANT_BOOL fillOff);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalContextImage )( 
            IDADrawingSurface * This,
            /* [retval][out] */ IDAImage **img);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *SaveGraphicsState )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *RestoreGraphicsState )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDADrawingSurface * This,
            /* [in] */ double opac);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDADrawingSurface * This,
            /* [in] */ IDANumber *opac);
        
        HRESULT ( STDMETHODCALLTYPE *Crop )( 
            IDADrawingSurface * This,
            /* [in] */ double lowerLeftX,
            /* [in] */ double lowerLeftY,
            /* [in] */ double upperRightX,
            /* [in] */ double upperRightY);
        
        HRESULT ( STDMETHODCALLTYPE *CropPoints )( 
            IDADrawingSurface * This,
            /* [in] */ IDAPoint2 *min,
            /* [in] */ IDAPoint2 *max);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDADrawingSurface * This,
            /* [in] */ IDATransform2 *xform);
        
        HRESULT ( STDMETHODCALLTYPE *LineColor )( 
            IDADrawingSurface * This,
            /* [in] */ IDAColor *clr);
        
        HRESULT ( STDMETHODCALLTYPE *LineWidth )( 
            IDADrawingSurface * This,
            /* [in] */ double w);
        
        HRESULT ( STDMETHODCALLTYPE *LineDashStyle )( 
            IDADrawingSurface * This,
            /* [in] */ DA_DASH_STYLE id);
        
        HRESULT ( STDMETHODCALLTYPE *LineEndStyle )( 
            IDADrawingSurface * This,
            /* [in] */ DA_END_STYLE id);
        
        HRESULT ( STDMETHODCALLTYPE *LineJoinStyle )( 
            IDADrawingSurface * This,
            /* [in] */ DA_JOIN_STYLE id);
        
        HRESULT ( STDMETHODCALLTYPE *BorderColor )( 
            IDADrawingSurface * This,
            /* [in] */ IDAColor *clr);
        
        HRESULT ( STDMETHODCALLTYPE *BorderWidth )( 
            IDADrawingSurface * This,
            /* [in] */ double w);
        
        HRESULT ( STDMETHODCALLTYPE *BorderDashStyle )( 
            IDADrawingSurface * This,
            /* [in] */ DA_DASH_STYLE id);
        
        HRESULT ( STDMETHODCALLTYPE *BorderEndStyle )( 
            IDADrawingSurface * This,
            /* [in] */ DA_END_STYLE obsolete);
        
        HRESULT ( STDMETHODCALLTYPE *BorderJoinStyle )( 
            IDADrawingSurface * This,
            /* [in] */ DA_JOIN_STYLE id);
        
        HRESULT ( STDMETHODCALLTYPE *Font )( 
            IDADrawingSurface * This,
            /* [in] */ BSTR FontFace,
            /* [in] */ LONG sizeInPoints,
            /* [in] */ VARIANT_BOOL Bold,
            /* [in] */ VARIANT_BOOL italic,
            /* [in] */ VARIANT_BOOL underline,
            /* [in] */ VARIANT_BOOL strikethrough);
        
        HRESULT ( STDMETHODCALLTYPE *TextureFill )( 
            IDADrawingSurface * This,
            /* [in] */ IDAImage *obsolete1,
            /* [in] */ double obsolete2,
            /* [in] */ double obsolete3);
        
        HRESULT ( STDMETHODCALLTYPE *ImageFill )( 
            IDADrawingSurface * This,
            /* [in] */ IDAImage *obsolete1,
            /* [in] */ double obsolete2,
            /* [in] */ double obsolete3);
        
        HRESULT ( STDMETHODCALLTYPE *FillTexture )( 
            IDADrawingSurface * This,
            /* [in] */ IDAImage *img);
        
        HRESULT ( STDMETHODCALLTYPE *FillImage )( 
            IDADrawingSurface * This,
            /* [in] */ IDAImage *img);
        
        HRESULT ( STDMETHODCALLTYPE *FillStyle )( 
            IDADrawingSurface * This,
            /* [in] */ int ID);
        
        HRESULT ( STDMETHODCALLTYPE *FillColor )( 
            IDADrawingSurface * This,
            /* [in] */ IDAColor *foreground);
        
        HRESULT ( STDMETHODCALLTYPE *SecondaryFillColor )( 
            IDADrawingSurface * This,
            /* [in] */ IDAColor *val);
        
        HRESULT ( STDMETHODCALLTYPE *GradientShape )( 
            IDADrawingSurface * This,
            /* [in] */ VARIANT pts);
        
        HRESULT ( STDMETHODCALLTYPE *GradientExtent )( 
            IDADrawingSurface * This,
            /* [in] */ double startx,
            /* [in] */ double starty,
            /* [in] */ double finishx,
            /* [in] */ double finishy);
        
        HRESULT ( STDMETHODCALLTYPE *GradientExtentPoints )( 
            IDADrawingSurface * This,
            /* [in] */ IDAPoint2 *startColor,
            /* [in] */ IDAPoint2 *stopColor);
        
        HRESULT ( STDMETHODCALLTYPE *GradientRolloffPower )( 
            IDADrawingSurface * This,
            /* [in] */ double power);
        
        HRESULT ( STDMETHODCALLTYPE *GradientRolloffPowerAnim )( 
            IDADrawingSurface * This,
            /* [in] */ IDANumber *power);
        
        HRESULT ( STDMETHODCALLTYPE *FixedFillScale )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *HorizontalFillScale )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *VerticalFillScale )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *AutoSizeFillScale )( 
            IDADrawingSurface * This);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolylineEx )( 
            IDADrawingSurface * This,
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *pts[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *Polyline )( 
            IDADrawingSurface * This,
            /* [in] */ VARIANT v);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolygonEx )( 
            IDADrawingSurface * This,
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *pts[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *Polygon )( 
            IDADrawingSurface * This,
            /* [in] */ VARIANT v);
        
        HRESULT ( STDMETHODCALLTYPE *LinePoints )( 
            IDADrawingSurface * This,
            /* [in] */ IDAPoint2 *p1,
            /* [in] */ IDAPoint2 *p2);
        
        HRESULT ( STDMETHODCALLTYPE *Line )( 
            IDADrawingSurface * This,
            /* [in] */ double startX,
            /* [in] */ double startY,
            /* [in] */ double endX,
            /* [in] */ double endY);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadians )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight);
        
        HRESULT ( STDMETHODCALLTYPE *ArcDegrees )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight);
        
        HRESULT ( STDMETHODCALLTYPE *Oval )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double w,
            /* [in] */ double h);
        
        HRESULT ( STDMETHODCALLTYPE *Rect )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double w,
            /* [in] */ double h);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRect )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double w,
            /* [in] */ double h,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadians )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight);
        
        HRESULT ( STDMETHODCALLTYPE *PieDegrees )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight);
        
        HRESULT ( STDMETHODCALLTYPE *Text )( 
            IDADrawingSurface * This,
            /* [in] */ BSTR str,
            /* [in] */ double xPos,
            /* [in] */ double yPos);
        
        HRESULT ( STDMETHODCALLTYPE *TextPoint )( 
            IDADrawingSurface * This,
            /* [in] */ BSTR str,
            /* [in] */ IDAPoint2 *point);
        
        HRESULT ( STDMETHODCALLTYPE *FillPath )( 
            IDADrawingSurface * This,
            /* [in] */ IDAPath2 *path);
        
        HRESULT ( STDMETHODCALLTYPE *DrawPath )( 
            IDADrawingSurface * This,
            /* [in] */ IDAPath2 *path);
        
        HRESULT ( STDMETHODCALLTYPE *OverlayImage )( 
            IDADrawingSurface * This,
            /* [in] */ IDAImage *img);
        
        END_INTERFACE
    } IDADrawingSurfaceVtbl;

    interface IDADrawingSurface
    {
        CONST_VTBL struct IDADrawingSurfaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDADrawingSurface_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDADrawingSurface_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDADrawingSurface_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDADrawingSurface_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDADrawingSurface_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDADrawingSurface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDADrawingSurface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDADrawingSurface_get_Image(This,img)	\
    (This)->lpVtbl -> get_Image(This,img)

#define IDADrawingSurface_put_LineStyle(This,ls)	\
    (This)->lpVtbl -> put_LineStyle(This,ls)

#define IDADrawingSurface_put_BorderStyle(This,bs)	\
    (This)->lpVtbl -> put_BorderStyle(This,bs)

#define IDADrawingSurface_put_FontStyle(This,fs)	\
    (This)->lpVtbl -> put_FontStyle(This,fs)

#define IDADrawingSurface_put_ClipMatte(This,matte)	\
    (This)->lpVtbl -> put_ClipMatte(This,matte)

#define IDADrawingSurface_put_MouseEventsEnabled(This,on)	\
    (This)->lpVtbl -> put_MouseEventsEnabled(This,on)

#define IDADrawingSurface_put_HatchFillTransparent(This,fillOff)	\
    (This)->lpVtbl -> put_HatchFillTransparent(This,fillOff)

#define IDADrawingSurface_get_LocalContextImage(This,img)	\
    (This)->lpVtbl -> get_LocalContextImage(This,img)

#define IDADrawingSurface_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IDADrawingSurface_Clear(This)	\
    (This)->lpVtbl -> Clear(This)

#define IDADrawingSurface_SaveGraphicsState(This)	\
    (This)->lpVtbl -> SaveGraphicsState(This)

#define IDADrawingSurface_RestoreGraphicsState(This)	\
    (This)->lpVtbl -> RestoreGraphicsState(This)

#define IDADrawingSurface_Opacity(This,opac)	\
    (This)->lpVtbl -> Opacity(This,opac)

#define IDADrawingSurface_OpacityAnim(This,opac)	\
    (This)->lpVtbl -> OpacityAnim(This,opac)

#define IDADrawingSurface_Crop(This,lowerLeftX,lowerLeftY,upperRightX,upperRightY)	\
    (This)->lpVtbl -> Crop(This,lowerLeftX,lowerLeftY,upperRightX,upperRightY)

#define IDADrawingSurface_CropPoints(This,min,max)	\
    (This)->lpVtbl -> CropPoints(This,min,max)

#define IDADrawingSurface_Transform(This,xform)	\
    (This)->lpVtbl -> Transform(This,xform)

#define IDADrawingSurface_LineColor(This,clr)	\
    (This)->lpVtbl -> LineColor(This,clr)

#define IDADrawingSurface_LineWidth(This,w)	\
    (This)->lpVtbl -> LineWidth(This,w)

#define IDADrawingSurface_LineDashStyle(This,id)	\
    (This)->lpVtbl -> LineDashStyle(This,id)

#define IDADrawingSurface_LineEndStyle(This,id)	\
    (This)->lpVtbl -> LineEndStyle(This,id)

#define IDADrawingSurface_LineJoinStyle(This,id)	\
    (This)->lpVtbl -> LineJoinStyle(This,id)

#define IDADrawingSurface_BorderColor(This,clr)	\
    (This)->lpVtbl -> BorderColor(This,clr)

#define IDADrawingSurface_BorderWidth(This,w)	\
    (This)->lpVtbl -> BorderWidth(This,w)

#define IDADrawingSurface_BorderDashStyle(This,id)	\
    (This)->lpVtbl -> BorderDashStyle(This,id)

#define IDADrawingSurface_BorderEndStyle(This,obsolete)	\
    (This)->lpVtbl -> BorderEndStyle(This,obsolete)

#define IDADrawingSurface_BorderJoinStyle(This,id)	\
    (This)->lpVtbl -> BorderJoinStyle(This,id)

#define IDADrawingSurface_Font(This,FontFace,sizeInPoints,Bold,italic,underline,strikethrough)	\
    (This)->lpVtbl -> Font(This,FontFace,sizeInPoints,Bold,italic,underline,strikethrough)

#define IDADrawingSurface_TextureFill(This,obsolete1,obsolete2,obsolete3)	\
    (This)->lpVtbl -> TextureFill(This,obsolete1,obsolete2,obsolete3)

#define IDADrawingSurface_ImageFill(This,obsolete1,obsolete2,obsolete3)	\
    (This)->lpVtbl -> ImageFill(This,obsolete1,obsolete2,obsolete3)

#define IDADrawingSurface_FillTexture(This,img)	\
    (This)->lpVtbl -> FillTexture(This,img)

#define IDADrawingSurface_FillImage(This,img)	\
    (This)->lpVtbl -> FillImage(This,img)

#define IDADrawingSurface_FillStyle(This,ID)	\
    (This)->lpVtbl -> FillStyle(This,ID)

#define IDADrawingSurface_FillColor(This,foreground)	\
    (This)->lpVtbl -> FillColor(This,foreground)

#define IDADrawingSurface_SecondaryFillColor(This,val)	\
    (This)->lpVtbl -> SecondaryFillColor(This,val)

#define IDADrawingSurface_GradientShape(This,pts)	\
    (This)->lpVtbl -> GradientShape(This,pts)

#define IDADrawingSurface_GradientExtent(This,startx,starty,finishx,finishy)	\
    (This)->lpVtbl -> GradientExtent(This,startx,starty,finishx,finishy)

#define IDADrawingSurface_GradientExtentPoints(This,startColor,stopColor)	\
    (This)->lpVtbl -> GradientExtentPoints(This,startColor,stopColor)

#define IDADrawingSurface_GradientRolloffPower(This,power)	\
    (This)->lpVtbl -> GradientRolloffPower(This,power)

#define IDADrawingSurface_GradientRolloffPowerAnim(This,power)	\
    (This)->lpVtbl -> GradientRolloffPowerAnim(This,power)

#define IDADrawingSurface_FixedFillScale(This)	\
    (This)->lpVtbl -> FixedFillScale(This)

#define IDADrawingSurface_HorizontalFillScale(This)	\
    (This)->lpVtbl -> HorizontalFillScale(This)

#define IDADrawingSurface_VerticalFillScale(This)	\
    (This)->lpVtbl -> VerticalFillScale(This)

#define IDADrawingSurface_AutoSizeFillScale(This)	\
    (This)->lpVtbl -> AutoSizeFillScale(This)

#define IDADrawingSurface_PolylineEx(This,numPts,pts)	\
    (This)->lpVtbl -> PolylineEx(This,numPts,pts)

#define IDADrawingSurface_Polyline(This,v)	\
    (This)->lpVtbl -> Polyline(This,v)

#define IDADrawingSurface_PolygonEx(This,numPts,pts)	\
    (This)->lpVtbl -> PolygonEx(This,numPts,pts)

#define IDADrawingSurface_Polygon(This,v)	\
    (This)->lpVtbl -> Polygon(This,v)

#define IDADrawingSurface_LinePoints(This,p1,p2)	\
    (This)->lpVtbl -> LinePoints(This,p1,p2)

#define IDADrawingSurface_Line(This,startX,startY,endX,endY)	\
    (This)->lpVtbl -> Line(This,startX,startY,endX,endY)

#define IDADrawingSurface_ArcRadians(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)	\
    (This)->lpVtbl -> ArcRadians(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)

#define IDADrawingSurface_ArcDegrees(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)	\
    (This)->lpVtbl -> ArcDegrees(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)

#define IDADrawingSurface_Oval(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> Oval(This,xPos,yPos,w,h)

#define IDADrawingSurface_Rect(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> Rect(This,xPos,yPos,w,h)

#define IDADrawingSurface_RoundRect(This,xPos,yPos,w,h,arcWidth,arcHeight)	\
    (This)->lpVtbl -> RoundRect(This,xPos,yPos,w,h,arcWidth,arcHeight)

#define IDADrawingSurface_PieRadians(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)	\
    (This)->lpVtbl -> PieRadians(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)

#define IDADrawingSurface_PieDegrees(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)	\
    (This)->lpVtbl -> PieDegrees(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)

#define IDADrawingSurface_Text(This,str,xPos,yPos)	\
    (This)->lpVtbl -> Text(This,str,xPos,yPos)

#define IDADrawingSurface_TextPoint(This,str,point)	\
    (This)->lpVtbl -> TextPoint(This,str,point)

#define IDADrawingSurface_FillPath(This,path)	\
    (This)->lpVtbl -> FillPath(This,path)

#define IDADrawingSurface_DrawPath(This,path)	\
    (This)->lpVtbl -> DrawPath(This,path)

#define IDADrawingSurface_OverlayImage(This,img)	\
    (This)->lpVtbl -> OverlayImage(This,img)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_get_Image_Proxy( 
    IDADrawingSurface * This,
    /* [retval][out] */ IDAImage **img);


void __RPC_STUB IDADrawingSurface_get_Image_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_put_LineStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDALineStyle *ls);


void __RPC_STUB IDADrawingSurface_put_LineStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_put_BorderStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDALineStyle *bs);


void __RPC_STUB IDADrawingSurface_put_BorderStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_put_FontStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAFontStyle *fs);


void __RPC_STUB IDADrawingSurface_put_FontStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_put_ClipMatte_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAMatte *matte);


void __RPC_STUB IDADrawingSurface_put_ClipMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_put_MouseEventsEnabled_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ VARIANT_BOOL on);


void __RPC_STUB IDADrawingSurface_put_MouseEventsEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_put_HatchFillTransparent_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ VARIANT_BOOL fillOff);


void __RPC_STUB IDADrawingSurface_put_HatchFillTransparent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_get_LocalContextImage_Proxy( 
    IDADrawingSurface * This,
    /* [retval][out] */ IDAImage **img);


void __RPC_STUB IDADrawingSurface_get_LocalContextImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Reset_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Clear_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_Clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_SaveGraphicsState_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_SaveGraphicsState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_RestoreGraphicsState_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_RestoreGraphicsState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Opacity_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double opac);


void __RPC_STUB IDADrawingSurface_Opacity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_OpacityAnim_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDANumber *opac);


void __RPC_STUB IDADrawingSurface_OpacityAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Crop_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double lowerLeftX,
    /* [in] */ double lowerLeftY,
    /* [in] */ double upperRightX,
    /* [in] */ double upperRightY);


void __RPC_STUB IDADrawingSurface_Crop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_CropPoints_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAPoint2 *min,
    /* [in] */ IDAPoint2 *max);


void __RPC_STUB IDADrawingSurface_CropPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Transform_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDATransform2 *xform);


void __RPC_STUB IDADrawingSurface_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_LineColor_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAColor *clr);


void __RPC_STUB IDADrawingSurface_LineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_LineWidth_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double w);


void __RPC_STUB IDADrawingSurface_LineWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_LineDashStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ DA_DASH_STYLE id);


void __RPC_STUB IDADrawingSurface_LineDashStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_LineEndStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ DA_END_STYLE id);


void __RPC_STUB IDADrawingSurface_LineEndStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_LineJoinStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ DA_JOIN_STYLE id);


void __RPC_STUB IDADrawingSurface_LineJoinStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_BorderColor_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAColor *clr);


void __RPC_STUB IDADrawingSurface_BorderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_BorderWidth_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double w);


void __RPC_STUB IDADrawingSurface_BorderWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_BorderDashStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ DA_DASH_STYLE id);


void __RPC_STUB IDADrawingSurface_BorderDashStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_BorderEndStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ DA_END_STYLE obsolete);


void __RPC_STUB IDADrawingSurface_BorderEndStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_BorderJoinStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ DA_JOIN_STYLE id);


void __RPC_STUB IDADrawingSurface_BorderJoinStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Font_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ BSTR FontFace,
    /* [in] */ LONG sizeInPoints,
    /* [in] */ VARIANT_BOOL Bold,
    /* [in] */ VARIANT_BOOL italic,
    /* [in] */ VARIANT_BOOL underline,
    /* [in] */ VARIANT_BOOL strikethrough);


void __RPC_STUB IDADrawingSurface_Font_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_TextureFill_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAImage *obsolete1,
    /* [in] */ double obsolete2,
    /* [in] */ double obsolete3);


void __RPC_STUB IDADrawingSurface_TextureFill_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_ImageFill_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAImage *obsolete1,
    /* [in] */ double obsolete2,
    /* [in] */ double obsolete3);


void __RPC_STUB IDADrawingSurface_ImageFill_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_FillTexture_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAImage *img);


void __RPC_STUB IDADrawingSurface_FillTexture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_FillImage_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAImage *img);


void __RPC_STUB IDADrawingSurface_FillImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_FillStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ int ID);


void __RPC_STUB IDADrawingSurface_FillStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_FillColor_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAColor *foreground);


void __RPC_STUB IDADrawingSurface_FillColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_SecondaryFillColor_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAColor *val);


void __RPC_STUB IDADrawingSurface_SecondaryFillColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_GradientShape_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ VARIANT pts);


void __RPC_STUB IDADrawingSurface_GradientShape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_GradientExtent_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double startx,
    /* [in] */ double starty,
    /* [in] */ double finishx,
    /* [in] */ double finishy);


void __RPC_STUB IDADrawingSurface_GradientExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_GradientExtentPoints_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAPoint2 *startColor,
    /* [in] */ IDAPoint2 *stopColor);


void __RPC_STUB IDADrawingSurface_GradientExtentPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_GradientRolloffPower_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double power);


void __RPC_STUB IDADrawingSurface_GradientRolloffPower_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_GradientRolloffPowerAnim_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDANumber *power);


void __RPC_STUB IDADrawingSurface_GradientRolloffPowerAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_FixedFillScale_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_FixedFillScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_HorizontalFillScale_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_HorizontalFillScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_VerticalFillScale_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_VerticalFillScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_AutoSizeFillScale_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_AutoSizeFillScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_PolylineEx_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDAPoint2 *pts[  ]);


void __RPC_STUB IDADrawingSurface_PolylineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Polyline_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IDADrawingSurface_Polyline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_PolygonEx_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDAPoint2 *pts[  ]);


void __RPC_STUB IDADrawingSurface_PolygonEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Polygon_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IDADrawingSurface_Polygon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_LinePoints_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAPoint2 *p1,
    /* [in] */ IDAPoint2 *p2);


void __RPC_STUB IDADrawingSurface_LinePoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Line_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double startX,
    /* [in] */ double startY,
    /* [in] */ double endX,
    /* [in] */ double endY);


void __RPC_STUB IDADrawingSurface_Line_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_ArcRadians_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double startAngle,
    /* [in] */ double endAngle,
    /* [in] */ double arcWidth,
    /* [in] */ double arcHeight);


void __RPC_STUB IDADrawingSurface_ArcRadians_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_ArcDegrees_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double startAngle,
    /* [in] */ double endAngle,
    /* [in] */ double arcWidth,
    /* [in] */ double arcHeight);


void __RPC_STUB IDADrawingSurface_ArcDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Oval_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double w,
    /* [in] */ double h);


void __RPC_STUB IDADrawingSurface_Oval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Rect_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double w,
    /* [in] */ double h);


void __RPC_STUB IDADrawingSurface_Rect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_RoundRect_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double w,
    /* [in] */ double h,
    /* [in] */ double arcWidth,
    /* [in] */ double arcHeight);


void __RPC_STUB IDADrawingSurface_RoundRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_PieRadians_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double startAngle,
    /* [in] */ double endAngle,
    /* [in] */ double arcWidth,
    /* [in] */ double arcHeight);


void __RPC_STUB IDADrawingSurface_PieRadians_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_PieDegrees_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double startAngle,
    /* [in] */ double endAngle,
    /* [in] */ double arcWidth,
    /* [in] */ double arcHeight);


void __RPC_STUB IDADrawingSurface_PieDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Text_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ BSTR str,
    /* [in] */ double xPos,
    /* [in] */ double yPos);


void __RPC_STUB IDADrawingSurface_Text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_TextPoint_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ BSTR str,
    /* [in] */ IDAPoint2 *point);


void __RPC_STUB IDADrawingSurface_TextPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_FillPath_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAPath2 *path);


void __RPC_STUB IDADrawingSurface_FillPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_DrawPath_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAPath2 *path);


void __RPC_STUB IDADrawingSurface_DrawPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_OverlayImage_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAImage *img);


void __RPC_STUB IDADrawingSurface_OverlayImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDADrawingSurface_INTERFACE_DEFINED__ */


#ifndef __IDAPickableResult_INTERFACE_DEFINED__
#define __IDAPickableResult_INTERFACE_DEFINED__

/* interface IDAPickableResult */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAPickableResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4A933703-E36F-11d0-9B99-00C04FC2F51D")
    IDAPickableResult : public IDispatch
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Geometry( 
            /* [retval][out] */ IDAGeometry **ppGeometry) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_PickEvent( 
            /* [retval][out] */ IDAEvent **ppPickEvent) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAPickableResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAPickableResult * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAPickableResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAPickableResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAPickableResult * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAPickableResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAPickableResult * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAPickableResult * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IDAPickableResult * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Geometry )( 
            IDAPickableResult * This,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PickEvent )( 
            IDAPickableResult * This,
            /* [retval][out] */ IDAEvent **ppPickEvent);
        
        END_INTERFACE
    } IDAPickableResultVtbl;

    interface IDAPickableResult
    {
        CONST_VTBL struct IDAPickableResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAPickableResult_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAPickableResult_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAPickableResult_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAPickableResult_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAPickableResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAPickableResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAPickableResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAPickableResult_get_Image(This,ppImage)	\
    (This)->lpVtbl -> get_Image(This,ppImage)

#define IDAPickableResult_get_Geometry(This,ppGeometry)	\
    (This)->lpVtbl -> get_Geometry(This,ppGeometry)

#define IDAPickableResult_get_PickEvent(This,ppPickEvent)	\
    (This)->lpVtbl -> get_PickEvent(This,ppPickEvent)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAPickableResult_get_Image_Proxy( 
    IDAPickableResult * This,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAPickableResult_get_Image_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAPickableResult_get_Geometry_Proxy( 
    IDAPickableResult * This,
    /* [retval][out] */ IDAGeometry **ppGeometry);


void __RPC_STUB IDAPickableResult_get_Geometry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAPickableResult_get_PickEvent_Proxy( 
    IDAPickableResult * This,
    /* [retval][out] */ IDAEvent **ppPickEvent);


void __RPC_STUB IDAPickableResult_get_PickEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAPickableResult_INTERFACE_DEFINED__ */


#ifndef __IDAEvent_INTERFACE_DEFINED__
#define __IDAEvent_INTERFACE_DEFINED__

/* interface IDAEvent */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("50B4791E-4731-11d0-8912-00C04FC2A0CA")
    IDAEvent : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Notify( 
            /* [in] */ IDAUntilNotifier *notifier_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Snapshot( 
            /* [in] */ IDABehavior *b_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AttachData( 
            /* [in] */ IDABehavior *data_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ScriptCallback( 
            /* [in] */ BSTR scriptlet_0,
            /* [in] */ BSTR language_1,
            /* [retval][out] */ IDAEvent **ret_2) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAEvent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAEvent * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAEvent * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAEvent * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAEvent * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAEvent * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAEvent * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAEvent * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAEvent * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAEvent * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAEvent * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAEvent * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAEvent * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAEvent * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAEvent * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAEvent * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAEvent * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Notify )( 
            IDAEvent * This,
            /* [in] */ IDAUntilNotifier *notifier_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Snapshot )( 
            IDAEvent * This,
            /* [in] */ IDABehavior *b_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AttachData )( 
            IDAEvent * This,
            /* [in] */ IDABehavior *data_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ScriptCallback )( 
            IDAEvent * This,
            /* [in] */ BSTR scriptlet_0,
            /* [in] */ BSTR language_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        END_INTERFACE
    } IDAEventVtbl;

    interface IDAEvent
    {
        CONST_VTBL struct IDAEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAEvent_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAEvent_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAEvent_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAEvent_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAEvent_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAEvent_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAEvent_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAEvent_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAEvent_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAEvent_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAEvent_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAEvent_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAEvent_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAEvent_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAEvent_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAEvent_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAEvent_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAEvent_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAEvent_Notify(This,notifier_0,ret_1)	\
    (This)->lpVtbl -> Notify(This,notifier_0,ret_1)

#define IDAEvent_Snapshot(This,b_0,ret_1)	\
    (This)->lpVtbl -> Snapshot(This,b_0,ret_1)

#define IDAEvent_AttachData(This,data_0,ret_1)	\
    (This)->lpVtbl -> AttachData(This,data_0,ret_1)

#define IDAEvent_ScriptCallback(This,scriptlet_0,language_1,ret_2)	\
    (This)->lpVtbl -> ScriptCallback(This,scriptlet_0,language_1,ret_2)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAEvent_Notify_Proxy( 
    IDAEvent * This,
    /* [in] */ IDAUntilNotifier *notifier_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAEvent_Notify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAEvent_Snapshot_Proxy( 
    IDAEvent * This,
    /* [in] */ IDABehavior *b_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAEvent_Snapshot_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAEvent_AttachData_Proxy( 
    IDAEvent * This,
    /* [in] */ IDABehavior *data_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAEvent_AttachData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAEvent_ScriptCallback_Proxy( 
    IDAEvent * This,
    /* [in] */ BSTR scriptlet_0,
    /* [in] */ BSTR language_1,
    /* [retval][out] */ IDAEvent **ret_2);


void __RPC_STUB IDAEvent_ScriptCallback_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAEvent_INTERFACE_DEFINED__ */


#ifndef __IDA2Behavior_INTERFACE_DEFINED__
#define __IDA2Behavior_INTERFACE_DEFINED__

/* interface IDA2Behavior */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2Behavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9CADDC0C-AD56-11d1-9FF8-00C04FA32195")
    IDA2Behavior : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SwitchToEx( 
            /* [in] */ IDABehavior *newBvr,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ApplyPreference( 
            /* [in] */ BSTR pref,
            /* [in] */ VARIANT val,
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ExtendedAttrib( 
            /* [in] */ BSTR arg1,
            /* [in] */ VARIANT arg2,
            /* [retval][out] */ IDABehavior **ppResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2BehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Behavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Behavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Behavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Behavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Behavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Behavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Behavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2Behavior * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2Behavior * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2Behavior * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2Behavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2Behavior * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2Behavior * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2Behavior * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2Behavior * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2Behavior * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2Behavior * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2Behavior * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2Behavior * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2Behavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2Behavior * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToEx )( 
            IDA2Behavior * This,
            /* [in] */ IDABehavior *newBvr,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyPreference )( 
            IDA2Behavior * This,
            /* [in] */ BSTR pref,
            /* [in] */ VARIANT val,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *ExtendedAttrib )( 
            IDA2Behavior * This,
            /* [in] */ BSTR arg1,
            /* [in] */ VARIANT arg2,
            /* [retval][out] */ IDABehavior **ppResult);
        
        END_INTERFACE
    } IDA2BehaviorVtbl;

    interface IDA2Behavior
    {
        CONST_VTBL struct IDA2BehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Behavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Behavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Behavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Behavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Behavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Behavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Behavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Behavior_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2Behavior_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2Behavior_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2Behavior_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2Behavior_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2Behavior_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2Behavior_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2Behavior_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2Behavior_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2Behavior_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2Behavior_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2Behavior_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2Behavior_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2Behavior_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2Behavior_SwitchToEx(This,newBvr,dwFlags)	\
    (This)->lpVtbl -> SwitchToEx(This,newBvr,dwFlags)

#define IDA2Behavior_ApplyPreference(This,pref,val,bvr)	\
    (This)->lpVtbl -> ApplyPreference(This,pref,val,bvr)

#define IDA2Behavior_ExtendedAttrib(This,arg1,arg2,ppResult)	\
    (This)->lpVtbl -> ExtendedAttrib(This,arg1,arg2,ppResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Behavior_SwitchToEx_Proxy( 
    IDA2Behavior * This,
    /* [in] */ IDABehavior *newBvr,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IDA2Behavior_SwitchToEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Behavior_ApplyPreference_Proxy( 
    IDA2Behavior * This,
    /* [in] */ BSTR pref,
    /* [in] */ VARIANT val,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDA2Behavior_ApplyPreference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Behavior_ExtendedAttrib_Proxy( 
    IDA2Behavior * This,
    /* [in] */ BSTR arg1,
    /* [in] */ VARIANT arg2,
    /* [retval][out] */ IDABehavior **ppResult);


void __RPC_STUB IDA2Behavior_ExtendedAttrib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Behavior_INTERFACE_DEFINED__ */


#ifndef __IDAImport_INTERFACE_DEFINED__
#define __IDAImport_INTERFACE_DEFINED__

/* interface IDAImport */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAImport;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FC54BEAA-5B12-11d1-8E7B-00C04FC29D46")
    IDAImport : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ImportStatus( 
            /* [retval][out] */ LONG *status) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportCancel( void) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_ImportPriority( 
            /* [retval][out] */ float *prio) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ImportPriority( 
            /* [in] */ float prio) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAImportVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAImport * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAImport * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAImport * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAImport * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAImport * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAImport * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAImport * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAImport * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAImport * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAImport * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAImport * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAImport * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAImport * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAImport * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAImport * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAImport * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAImport * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAImport * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAImport * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAImport * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAImport * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *ImportStatus )( 
            IDAImport * This,
            /* [retval][out] */ LONG *status);
        
        HRESULT ( STDMETHODCALLTYPE *ImportCancel )( 
            IDAImport * This);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImportPriority )( 
            IDAImport * This,
            /* [retval][out] */ float *prio);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ImportPriority )( 
            IDAImport * This,
            /* [in] */ float prio);
        
        END_INTERFACE
    } IDAImportVtbl;

    interface IDAImport
    {
        CONST_VTBL struct IDAImportVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAImport_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAImport_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAImport_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAImport_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAImport_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAImport_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAImport_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAImport_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAImport_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAImport_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAImport_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAImport_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAImport_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAImport_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAImport_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAImport_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAImport_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAImport_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAImport_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAImport_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAImport_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAImport_ImportStatus(This,status)	\
    (This)->lpVtbl -> ImportStatus(This,status)

#define IDAImport_ImportCancel(This)	\
    (This)->lpVtbl -> ImportCancel(This)

#define IDAImport_get_ImportPriority(This,prio)	\
    (This)->lpVtbl -> get_ImportPriority(This,prio)

#define IDAImport_put_ImportPriority(This,prio)	\
    (This)->lpVtbl -> put_ImportPriority(This,prio)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAImport_ImportStatus_Proxy( 
    IDAImport * This,
    /* [retval][out] */ LONG *status);


void __RPC_STUB IDAImport_ImportStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImport_ImportCancel_Proxy( 
    IDAImport * This);


void __RPC_STUB IDAImport_ImportCancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImport_get_ImportPriority_Proxy( 
    IDAImport * This,
    /* [retval][out] */ float *prio);


void __RPC_STUB IDAImport_get_ImportPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAImport_put_ImportPriority_Proxy( 
    IDAImport * This,
    /* [in] */ float prio);


void __RPC_STUB IDAImport_put_ImportPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAImport_INTERFACE_DEFINED__ */


#ifndef __IDAModifiableBehavior_INTERFACE_DEFINED__
#define __IDAModifiableBehavior_INTERFACE_DEFINED__

/* interface IDAModifiableBehavior */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAModifiableBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FC54BEAB-5B12-11d1-8E7B-00C04FC29D46")
    IDAModifiableBehavior : public IDABehavior
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentBehavior( 
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CurrentBehavior( 
            /* [in] */ VARIANT val) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SwitchToEx( 
            /* [in] */ IDABehavior *newBvr,
            /* [in] */ DWORD dwFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAModifiableBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAModifiableBehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAModifiableBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAModifiableBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAModifiableBehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAModifiableBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAModifiableBehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAModifiableBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAModifiableBehavior * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAModifiableBehavior * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAModifiableBehavior * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAModifiableBehavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAModifiableBehavior * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAModifiableBehavior * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAModifiableBehavior * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAModifiableBehavior * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAModifiableBehavior * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAModifiableBehavior * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAModifiableBehavior * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAModifiableBehavior * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAModifiableBehavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAModifiableBehavior * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentBehavior )( 
            IDAModifiableBehavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentBehavior )( 
            IDAModifiableBehavior * This,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToEx )( 
            IDAModifiableBehavior * This,
            /* [in] */ IDABehavior *newBvr,
            /* [in] */ DWORD dwFlags);
        
        END_INTERFACE
    } IDAModifiableBehaviorVtbl;

    interface IDAModifiableBehavior
    {
        CONST_VTBL struct IDAModifiableBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAModifiableBehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAModifiableBehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAModifiableBehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAModifiableBehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAModifiableBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAModifiableBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAModifiableBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAModifiableBehavior_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAModifiableBehavior_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAModifiableBehavior_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAModifiableBehavior_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAModifiableBehavior_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAModifiableBehavior_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAModifiableBehavior_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAModifiableBehavior_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAModifiableBehavior_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAModifiableBehavior_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAModifiableBehavior_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAModifiableBehavior_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAModifiableBehavior_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAModifiableBehavior_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAModifiableBehavior_get_CurrentBehavior(This,bvr)	\
    (This)->lpVtbl -> get_CurrentBehavior(This,bvr)

#define IDAModifiableBehavior_put_CurrentBehavior(This,val)	\
    (This)->lpVtbl -> put_CurrentBehavior(This,val)

#define IDAModifiableBehavior_SwitchToEx(This,newBvr,dwFlags)	\
    (This)->lpVtbl -> SwitchToEx(This,newBvr,dwFlags)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAModifiableBehavior_get_CurrentBehavior_Proxy( 
    IDAModifiableBehavior * This,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDAModifiableBehavior_get_CurrentBehavior_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAModifiableBehavior_put_CurrentBehavior_Proxy( 
    IDAModifiableBehavior * This,
    /* [in] */ VARIANT val);


void __RPC_STUB IDAModifiableBehavior_put_CurrentBehavior_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAModifiableBehavior_SwitchToEx_Proxy( 
    IDAModifiableBehavior * This,
    /* [in] */ IDABehavior *newBvr,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IDAModifiableBehavior_SwitchToEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAModifiableBehavior_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DABehavior;

#ifdef __cplusplus

class DECLSPEC_UUID("283807B8-2C60-11d0-A31D-00AA00B92C03")
DABehavior;
#endif

#ifndef __IDAUntilNotifier_INTERFACE_DEFINED__
#define __IDAUntilNotifier_INTERFACE_DEFINED__

/* interface IDAUntilNotifier */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAUntilNotifier;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3F3DA01A-4705-11d0-8710-00C04FC29D46")
    IDAUntilNotifier : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Notify( 
            /* [in] */ IDABehavior *eventData,
            /* [in] */ IDABehavior *curRunningBvr,
            /* [in] */ IDAView *curView,
            /* [retval][out] */ IDABehavior **ppBvr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAUntilNotifierVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAUntilNotifier * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAUntilNotifier * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAUntilNotifier * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAUntilNotifier * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAUntilNotifier * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAUntilNotifier * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAUntilNotifier * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *Notify )( 
            IDAUntilNotifier * This,
            /* [in] */ IDABehavior *eventData,
            /* [in] */ IDABehavior *curRunningBvr,
            /* [in] */ IDAView *curView,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        END_INTERFACE
    } IDAUntilNotifierVtbl;

    interface IDAUntilNotifier
    {
        CONST_VTBL struct IDAUntilNotifierVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAUntilNotifier_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAUntilNotifier_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAUntilNotifier_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAUntilNotifier_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAUntilNotifier_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAUntilNotifier_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAUntilNotifier_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAUntilNotifier_Notify(This,eventData,curRunningBvr,curView,ppBvr)	\
    (This)->lpVtbl -> Notify(This,eventData,curRunningBvr,curView,ppBvr)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAUntilNotifier_Notify_Proxy( 
    IDAUntilNotifier * This,
    /* [in] */ IDABehavior *eventData,
    /* [in] */ IDABehavior *curRunningBvr,
    /* [in] */ IDAView *curView,
    /* [retval][out] */ IDABehavior **ppBvr);


void __RPC_STUB IDAUntilNotifier_Notify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAUntilNotifier_INTERFACE_DEFINED__ */


#ifndef __IDABoolean_INTERFACE_DEFINED__
#define __IDABoolean_INTERFACE_DEFINED__

/* interface IDABoolean */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDABoolean;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BC0-3C52-11d0-9200-848C1D000000")
    IDABoolean : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Extract( 
            /* [retval][out] */ VARIANT_BOOL *ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDABooleanVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDABoolean * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDABoolean * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDABoolean * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDABoolean * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDABoolean * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDABoolean * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDABoolean * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDABoolean * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDABoolean * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDABoolean * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDABoolean * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDABoolean * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDABoolean * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDABoolean * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDABoolean * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDABoolean * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDABoolean * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDABoolean * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDABoolean * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDABoolean * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDABoolean * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Extract )( 
            IDABoolean * This,
            /* [retval][out] */ VARIANT_BOOL *ret_0);
        
        END_INTERFACE
    } IDABooleanVtbl;

    interface IDABoolean
    {
        CONST_VTBL struct IDABooleanVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDABoolean_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDABoolean_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDABoolean_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDABoolean_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDABoolean_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDABoolean_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDABoolean_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDABoolean_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDABoolean_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDABoolean_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDABoolean_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDABoolean_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDABoolean_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDABoolean_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDABoolean_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDABoolean_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDABoolean_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDABoolean_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDABoolean_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDABoolean_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDABoolean_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDABoolean_Extract(This,ret_0)	\
    (This)->lpVtbl -> Extract(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDABoolean_Extract_Proxy( 
    IDABoolean * This,
    /* [retval][out] */ VARIANT_BOOL *ret_0);


void __RPC_STUB IDABoolean_Extract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDABoolean_INTERFACE_DEFINED__ */


#ifndef __IDACamera_INTERFACE_DEFINED__
#define __IDACamera_INTERFACE_DEFINED__

/* interface IDACamera */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDACamera;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BE1-3C52-11d0-9200-848C1D000000")
    IDACamera : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Depth( 
            /* [in] */ double depth_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DepthAnim( 
            /* [in] */ IDANumber *depth_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DepthResolution( 
            /* [in] */ double resolution_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DepthResolutionAnim( 
            /* [in] */ IDANumber *resolution_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDACameraVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDACamera * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDACamera * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDACamera * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDACamera * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDACamera * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDACamera * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDACamera * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDACamera * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDACamera * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDACamera * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDACamera * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDACamera * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDACamera * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDACamera * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDACamera * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDACamera * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDACamera * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDACamera * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDACamera * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDACamera * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDACamera * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDACamera * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Depth )( 
            IDACamera * This,
            /* [in] */ double depth_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DepthAnim )( 
            IDACamera * This,
            /* [in] */ IDANumber *depth_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DepthResolution )( 
            IDACamera * This,
            /* [in] */ double resolution_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DepthResolutionAnim )( 
            IDACamera * This,
            /* [in] */ IDANumber *resolution_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        END_INTERFACE
    } IDACameraVtbl;

    interface IDACamera
    {
        CONST_VTBL struct IDACameraVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDACamera_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDACamera_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDACamera_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDACamera_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDACamera_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDACamera_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDACamera_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDACamera_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDACamera_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDACamera_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDACamera_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDACamera_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDACamera_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDACamera_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDACamera_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDACamera_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDACamera_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDACamera_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDACamera_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDACamera_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDACamera_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDACamera_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDACamera_Depth(This,depth_0,ret_1)	\
    (This)->lpVtbl -> Depth(This,depth_0,ret_1)

#define IDACamera_DepthAnim(This,depth_0,ret_1)	\
    (This)->lpVtbl -> DepthAnim(This,depth_0,ret_1)

#define IDACamera_DepthResolution(This,resolution_0,ret_1)	\
    (This)->lpVtbl -> DepthResolution(This,resolution_0,ret_1)

#define IDACamera_DepthResolutionAnim(This,resolution_0,ret_1)	\
    (This)->lpVtbl -> DepthResolutionAnim(This,resolution_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDACamera_Transform_Proxy( 
    IDACamera * This,
    /* [in] */ IDATransform3 *xf_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDACamera_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDACamera_Depth_Proxy( 
    IDACamera * This,
    /* [in] */ double depth_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDACamera_Depth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDACamera_DepthAnim_Proxy( 
    IDACamera * This,
    /* [in] */ IDANumber *depth_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDACamera_DepthAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDACamera_DepthResolution_Proxy( 
    IDACamera * This,
    /* [in] */ double resolution_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDACamera_DepthResolution_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDACamera_DepthResolutionAnim_Proxy( 
    IDACamera * This,
    /* [in] */ IDANumber *resolution_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDACamera_DepthResolutionAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDACamera_INTERFACE_DEFINED__ */


#ifndef __IDAColor_INTERFACE_DEFINED__
#define __IDAColor_INTERFACE_DEFINED__

/* interface IDAColor */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAColor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BC5-3C52-11d0-9200-848C1D000000")
    IDAColor : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Red( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Green( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Blue( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Hue( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Saturation( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Lightness( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAColorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAColor * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAColor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAColor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAColor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAColor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAColor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAColor * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAColor * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAColor * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAColor * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAColor * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAColor * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAColor * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAColor * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAColor * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAColor * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAColor * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAColor * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAColor * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAColor * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAColor * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Red )( 
            IDAColor * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Green )( 
            IDAColor * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blue )( 
            IDAColor * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Hue )( 
            IDAColor * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Saturation )( 
            IDAColor * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lightness )( 
            IDAColor * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        END_INTERFACE
    } IDAColorVtbl;

    interface IDAColor
    {
        CONST_VTBL struct IDAColorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAColor_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAColor_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAColor_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAColor_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAColor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAColor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAColor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAColor_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAColor_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAColor_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAColor_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAColor_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAColor_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAColor_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAColor_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAColor_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAColor_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAColor_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAColor_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAColor_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAColor_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAColor_get_Red(This,ret_0)	\
    (This)->lpVtbl -> get_Red(This,ret_0)

#define IDAColor_get_Green(This,ret_0)	\
    (This)->lpVtbl -> get_Green(This,ret_0)

#define IDAColor_get_Blue(This,ret_0)	\
    (This)->lpVtbl -> get_Blue(This,ret_0)

#define IDAColor_get_Hue(This,ret_0)	\
    (This)->lpVtbl -> get_Hue(This,ret_0)

#define IDAColor_get_Saturation(This,ret_0)	\
    (This)->lpVtbl -> get_Saturation(This,ret_0)

#define IDAColor_get_Lightness(This,ret_0)	\
    (This)->lpVtbl -> get_Lightness(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDAColor_get_Red_Proxy( 
    IDAColor * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAColor_get_Red_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAColor_get_Green_Proxy( 
    IDAColor * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAColor_get_Green_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAColor_get_Blue_Proxy( 
    IDAColor * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAColor_get_Blue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAColor_get_Hue_Proxy( 
    IDAColor * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAColor_get_Hue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAColor_get_Saturation_Proxy( 
    IDAColor * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAColor_get_Saturation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAColor_get_Lightness_Proxy( 
    IDAColor * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAColor_get_Lightness_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAColor_INTERFACE_DEFINED__ */


#ifndef __IDAGeometry_INTERFACE_DEFINED__
#define __IDAGeometry_INTERFACE_DEFINED__

/* interface IDAGeometry */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAGeometry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BDF-3C52-11d0-9200-848C1D000000")
    IDAGeometry : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RenderSound( 
            /* [in] */ IDAMicrophone *mic_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Pickable( 
            /* [retval][out] */ IDAPickableResult **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PickableOccluded( 
            /* [retval][out] */ IDAPickableResult **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Undetectable( 
            /* [retval][out] */ IDAGeometry **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EmissiveColor( 
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DiffuseColor( 
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SpecularColor( 
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SpecularExponent( 
            /* [in] */ double power_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SpecularExponentAnim( 
            /* [in] */ IDANumber *power_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Texture( 
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Opacity( 
            /* [in] */ double level_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpacityAnim( 
            /* [in] */ IDANumber *level_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BoundingBox( 
            /* [retval][out] */ IDABbox3 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Render( 
            /* [in] */ IDACamera *cam_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LightColor( 
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LightAttenuationAnim( 
            /* [in] */ IDANumber *constant_0,
            /* [in] */ IDANumber *linear_1,
            /* [in] */ IDANumber *quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LightAttenuation( 
            /* [in] */ double constant_0,
            /* [in] */ double linear_1,
            /* [in] */ double quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAGeometryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAGeometry * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAGeometry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAGeometry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAGeometry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAGeometry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAGeometry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAGeometry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAGeometry * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAGeometry * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAGeometry * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAGeometry * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAGeometry * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAGeometry * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAGeometry * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAGeometry * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAGeometry * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAGeometry * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAGeometry * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAGeometry * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAGeometry * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAGeometry * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *RenderSound )( 
            IDAGeometry * This,
            /* [in] */ IDAMicrophone *mic_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Pickable )( 
            IDAGeometry * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *PickableOccluded )( 
            IDAGeometry * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Undetectable )( 
            IDAGeometry * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *EmissiveColor )( 
            IDAGeometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DiffuseColor )( 
            IDAGeometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularColor )( 
            IDAGeometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularExponent )( 
            IDAGeometry * This,
            /* [in] */ double power_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularExponentAnim )( 
            IDAGeometry * This,
            /* [in] */ IDANumber *power_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Texture )( 
            IDAGeometry * This,
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDAGeometry * This,
            /* [in] */ double level_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDAGeometry * This,
            /* [in] */ IDANumber *level_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAGeometry * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundingBox )( 
            IDAGeometry * This,
            /* [retval][out] */ IDABbox3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDAGeometry * This,
            /* [in] */ IDACamera *cam_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightColor )( 
            IDAGeometry * This,
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightAttenuationAnim )( 
            IDAGeometry * This,
            /* [in] */ IDANumber *constant_0,
            /* [in] */ IDANumber *linear_1,
            /* [in] */ IDANumber *quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *LightAttenuation )( 
            IDAGeometry * This,
            /* [in] */ double constant_0,
            /* [in] */ double linear_1,
            /* [in] */ double quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        END_INTERFACE
    } IDAGeometryVtbl;

    interface IDAGeometry
    {
        CONST_VTBL struct IDAGeometryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAGeometry_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAGeometry_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAGeometry_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAGeometry_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAGeometry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAGeometry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAGeometry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAGeometry_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAGeometry_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAGeometry_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAGeometry_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAGeometry_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAGeometry_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAGeometry_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAGeometry_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAGeometry_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAGeometry_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAGeometry_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAGeometry_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAGeometry_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAGeometry_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAGeometry_RenderSound(This,mic_0,ret_1)	\
    (This)->lpVtbl -> RenderSound(This,mic_0,ret_1)

#define IDAGeometry_Pickable(This,ret_0)	\
    (This)->lpVtbl -> Pickable(This,ret_0)

#define IDAGeometry_PickableOccluded(This,ret_0)	\
    (This)->lpVtbl -> PickableOccluded(This,ret_0)

#define IDAGeometry_Undetectable(This,ret_0)	\
    (This)->lpVtbl -> Undetectable(This,ret_0)

#define IDAGeometry_EmissiveColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> EmissiveColor(This,col_0,ret_1)

#define IDAGeometry_DiffuseColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> DiffuseColor(This,col_0,ret_1)

#define IDAGeometry_SpecularColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> SpecularColor(This,col_0,ret_1)

#define IDAGeometry_SpecularExponent(This,power_0,ret_1)	\
    (This)->lpVtbl -> SpecularExponent(This,power_0,ret_1)

#define IDAGeometry_SpecularExponentAnim(This,power_0,ret_1)	\
    (This)->lpVtbl -> SpecularExponentAnim(This,power_0,ret_1)

#define IDAGeometry_Texture(This,texture_0,ret_1)	\
    (This)->lpVtbl -> Texture(This,texture_0,ret_1)

#define IDAGeometry_Opacity(This,level_0,ret_1)	\
    (This)->lpVtbl -> Opacity(This,level_0,ret_1)

#define IDAGeometry_OpacityAnim(This,level_0,ret_1)	\
    (This)->lpVtbl -> OpacityAnim(This,level_0,ret_1)

#define IDAGeometry_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDAGeometry_get_BoundingBox(This,ret_0)	\
    (This)->lpVtbl -> get_BoundingBox(This,ret_0)

#define IDAGeometry_Render(This,cam_0,ret_1)	\
    (This)->lpVtbl -> Render(This,cam_0,ret_1)

#define IDAGeometry_LightColor(This,color_0,ret_1)	\
    (This)->lpVtbl -> LightColor(This,color_0,ret_1)

#define IDAGeometry_LightAttenuationAnim(This,constant_0,linear_1,quadratic_2,ret_3)	\
    (This)->lpVtbl -> LightAttenuationAnim(This,constant_0,linear_1,quadratic_2,ret_3)

#define IDAGeometry_LightAttenuation(This,constant_0,linear_1,quadratic_2,ret_3)	\
    (This)->lpVtbl -> LightAttenuation(This,constant_0,linear_1,quadratic_2,ret_3)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAGeometry_RenderSound_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDAMicrophone *mic_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDAGeometry_RenderSound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_Pickable_Proxy( 
    IDAGeometry * This,
    /* [retval][out] */ IDAPickableResult **ret_0);


void __RPC_STUB IDAGeometry_Pickable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_PickableOccluded_Proxy( 
    IDAGeometry * This,
    /* [retval][out] */ IDAPickableResult **ret_0);


void __RPC_STUB IDAGeometry_PickableOccluded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_Undetectable_Proxy( 
    IDAGeometry * This,
    /* [retval][out] */ IDAGeometry **ret_0);


void __RPC_STUB IDAGeometry_Undetectable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_EmissiveColor_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDAColor *col_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_EmissiveColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_DiffuseColor_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDAColor *col_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_DiffuseColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_SpecularColor_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDAColor *col_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_SpecularColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_SpecularExponent_Proxy( 
    IDAGeometry * This,
    /* [in] */ double power_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_SpecularExponent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_SpecularExponentAnim_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDANumber *power_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_SpecularExponentAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_Texture_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDAImage *texture_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_Texture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_Opacity_Proxy( 
    IDAGeometry * This,
    /* [in] */ double level_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_Opacity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_OpacityAnim_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDANumber *level_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_OpacityAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_Transform_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDATransform3 *xf_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAGeometry_get_BoundingBox_Proxy( 
    IDAGeometry * This,
    /* [retval][out] */ IDABbox3 **ret_0);


void __RPC_STUB IDAGeometry_get_BoundingBox_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_Render_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDACamera *cam_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAGeometry_Render_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_LightColor_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDAColor *color_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_LightColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_LightAttenuationAnim_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDANumber *constant_0,
    /* [in] */ IDANumber *linear_1,
    /* [in] */ IDANumber *quadratic_2,
    /* [retval][out] */ IDAGeometry **ret_3);


void __RPC_STUB IDAGeometry_LightAttenuationAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_LightAttenuation_Proxy( 
    IDAGeometry * This,
    /* [in] */ double constant_0,
    /* [in] */ double linear_1,
    /* [in] */ double quadratic_2,
    /* [retval][out] */ IDAGeometry **ret_3);


void __RPC_STUB IDAGeometry_LightAttenuation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAGeometry_INTERFACE_DEFINED__ */


#ifndef __IDAImage_INTERFACE_DEFINED__
#define __IDAImage_INTERFACE_DEFINED__

/* interface IDAImage */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAImage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BD3-3C52-11d0-9200-848C1D000000")
    IDAImage : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Pickable( 
            /* [retval][out] */ IDAPickableResult **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PickableOccluded( 
            /* [retval][out] */ IDAPickableResult **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ApplyBitmapEffect( 
            /* [in] */ IUnknown *effectToApply_0,
            /* [in] */ IDAEvent *firesWhenChanged_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BoundingBox( 
            /* [retval][out] */ IDABbox2 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Crop( 
            /* [in] */ IDAPoint2 *min_0,
            /* [in] */ IDAPoint2 *max_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpacityAnim( 
            /* [in] */ IDANumber *opacity_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Opacity( 
            /* [in] */ double opacity_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Undetectable( 
            /* [retval][out] */ IDAImage **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Tile( 
            /* [retval][out] */ IDAImage **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clip( 
            /* [in] */ IDAMatte *m_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MapToUnitSquare( 
            /* [retval][out] */ IDAImage **ret_0) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE ClipPolygonImageEx( 
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClipPolygonImage( 
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAImageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAImage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAImage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAImage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAImage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAImage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAImage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAImage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAImage * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAImage * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAImage * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAImage * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAImage * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAImage * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAImage * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAImage * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAImage * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAImage * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAImage * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAImage * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAImage * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAImage * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Pickable )( 
            IDAImage * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *PickableOccluded )( 
            IDAImage * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyBitmapEffect )( 
            IDAImage * This,
            /* [in] */ IUnknown *effectToApply_0,
            /* [in] */ IDAEvent *firesWhenChanged_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundingBox )( 
            IDAImage * This,
            /* [retval][out] */ IDABbox2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Crop )( 
            IDAImage * This,
            /* [in] */ IDAPoint2 *min_0,
            /* [in] */ IDAPoint2 *max_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAImage * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDAImage * This,
            /* [in] */ IDANumber *opacity_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDAImage * This,
            /* [in] */ double opacity_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Undetectable )( 
            IDAImage * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Tile )( 
            IDAImage * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Clip )( 
            IDAImage * This,
            /* [in] */ IDAMatte *m_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MapToUnitSquare )( 
            IDAImage * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ClipPolygonImageEx )( 
            IDAImage * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ClipPolygonImage )( 
            IDAImage * This,
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        END_INTERFACE
    } IDAImageVtbl;

    interface IDAImage
    {
        CONST_VTBL struct IDAImageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAImage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAImage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAImage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAImage_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAImage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAImage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAImage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAImage_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAImage_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAImage_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAImage_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAImage_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAImage_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAImage_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAImage_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAImage_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAImage_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAImage_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAImage_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAImage_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAImage_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAImage_Pickable(This,ret_0)	\
    (This)->lpVtbl -> Pickable(This,ret_0)

#define IDAImage_PickableOccluded(This,ret_0)	\
    (This)->lpVtbl -> PickableOccluded(This,ret_0)

#define IDAImage_ApplyBitmapEffect(This,effectToApply_0,firesWhenChanged_1,ret_2)	\
    (This)->lpVtbl -> ApplyBitmapEffect(This,effectToApply_0,firesWhenChanged_1,ret_2)

#define IDAImage_get_BoundingBox(This,ret_0)	\
    (This)->lpVtbl -> get_BoundingBox(This,ret_0)

#define IDAImage_Crop(This,min_0,max_1,ret_2)	\
    (This)->lpVtbl -> Crop(This,min_0,max_1,ret_2)

#define IDAImage_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDAImage_OpacityAnim(This,opacity_0,ret_1)	\
    (This)->lpVtbl -> OpacityAnim(This,opacity_0,ret_1)

#define IDAImage_Opacity(This,opacity_0,ret_1)	\
    (This)->lpVtbl -> Opacity(This,opacity_0,ret_1)

#define IDAImage_Undetectable(This,ret_0)	\
    (This)->lpVtbl -> Undetectable(This,ret_0)

#define IDAImage_Tile(This,ret_0)	\
    (This)->lpVtbl -> Tile(This,ret_0)

#define IDAImage_Clip(This,m_0,ret_1)	\
    (This)->lpVtbl -> Clip(This,m_0,ret_1)

#define IDAImage_MapToUnitSquare(This,ret_0)	\
    (This)->lpVtbl -> MapToUnitSquare(This,ret_0)

#define IDAImage_ClipPolygonImageEx(This,points_0size,points_0,ret_1)	\
    (This)->lpVtbl -> ClipPolygonImageEx(This,points_0size,points_0,ret_1)

#define IDAImage_ClipPolygonImage(This,points_0,ret_1)	\
    (This)->lpVtbl -> ClipPolygonImage(This,points_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAImage_Pickable_Proxy( 
    IDAImage * This,
    /* [retval][out] */ IDAPickableResult **ret_0);


void __RPC_STUB IDAImage_Pickable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_PickableOccluded_Proxy( 
    IDAImage * This,
    /* [retval][out] */ IDAPickableResult **ret_0);


void __RPC_STUB IDAImage_PickableOccluded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_ApplyBitmapEffect_Proxy( 
    IDAImage * This,
    /* [in] */ IUnknown *effectToApply_0,
    /* [in] */ IDAEvent *firesWhenChanged_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAImage_ApplyBitmapEffect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAImage_get_BoundingBox_Proxy( 
    IDAImage * This,
    /* [retval][out] */ IDABbox2 **ret_0);


void __RPC_STUB IDAImage_get_BoundingBox_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_Crop_Proxy( 
    IDAImage * This,
    /* [in] */ IDAPoint2 *min_0,
    /* [in] */ IDAPoint2 *max_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAImage_Crop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_Transform_Proxy( 
    IDAImage * This,
    /* [in] */ IDATransform2 *xf_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAImage_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_OpacityAnim_Proxy( 
    IDAImage * This,
    /* [in] */ IDANumber *opacity_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAImage_OpacityAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_Opacity_Proxy( 
    IDAImage * This,
    /* [in] */ double opacity_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAImage_Opacity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_Undetectable_Proxy( 
    IDAImage * This,
    /* [retval][out] */ IDAImage **ret_0);


void __RPC_STUB IDAImage_Undetectable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_Tile_Proxy( 
    IDAImage * This,
    /* [retval][out] */ IDAImage **ret_0);


void __RPC_STUB IDAImage_Tile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_Clip_Proxy( 
    IDAImage * This,
    /* [in] */ IDAMatte *m_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAImage_Clip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_MapToUnitSquare_Proxy( 
    IDAImage * This,
    /* [retval][out] */ IDAImage **ret_0);


void __RPC_STUB IDAImage_MapToUnitSquare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAImage_ClipPolygonImageEx_Proxy( 
    IDAImage * This,
    /* [in] */ LONG points_0size,
    /* [size_is][in] */ IDAPoint2 *points_0[  ],
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAImage_ClipPolygonImageEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_ClipPolygonImage_Proxy( 
    IDAImage * This,
    /* [in] */ VARIANT points_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAImage_ClipPolygonImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAImage_INTERFACE_DEFINED__ */


#ifndef __IDAMatte_INTERFACE_DEFINED__
#define __IDAMatte_INTERFACE_DEFINED__

/* interface IDAMatte */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAMatte;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BD1-3C52-11d0-9200-848C1D000000")
    IDAMatte : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAMatte **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAMatteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAMatte * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAMatte * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAMatte * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAMatte * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAMatte * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAMatte * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAMatte * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAMatte * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAMatte * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAMatte * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAMatte * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAMatte * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAMatte * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAMatte * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAMatte * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAMatte * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAMatte * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAMatte * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAMatte * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAMatte * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAMatte * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAMatte * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAMatte **ret_1);
        
        END_INTERFACE
    } IDAMatteVtbl;

    interface IDAMatte
    {
        CONST_VTBL struct IDAMatteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAMatte_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAMatte_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAMatte_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAMatte_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAMatte_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAMatte_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAMatte_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAMatte_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAMatte_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAMatte_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAMatte_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAMatte_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAMatte_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAMatte_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAMatte_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAMatte_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAMatte_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAMatte_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAMatte_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAMatte_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAMatte_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAMatte_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAMatte_Transform_Proxy( 
    IDAMatte * This,
    /* [in] */ IDATransform2 *xf_0,
    /* [retval][out] */ IDAMatte **ret_1);


void __RPC_STUB IDAMatte_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAMatte_INTERFACE_DEFINED__ */


#ifndef __IDAMicrophone_INTERFACE_DEFINED__
#define __IDAMicrophone_INTERFACE_DEFINED__

/* interface IDAMicrophone */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAMicrophone;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BE5-3C52-11d0-9200-848C1D000000")
    IDAMicrophone : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAMicrophone **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAMicrophoneVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAMicrophone * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAMicrophone * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAMicrophone * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAMicrophone * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAMicrophone * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAMicrophone * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAMicrophone * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAMicrophone * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAMicrophone * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAMicrophone * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAMicrophone * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAMicrophone * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAMicrophone * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAMicrophone * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAMicrophone * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAMicrophone * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAMicrophone * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAMicrophone * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAMicrophone * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAMicrophone * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAMicrophone * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAMicrophone * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAMicrophone **ret_1);
        
        END_INTERFACE
    } IDAMicrophoneVtbl;

    interface IDAMicrophone
    {
        CONST_VTBL struct IDAMicrophoneVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAMicrophone_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAMicrophone_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAMicrophone_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAMicrophone_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAMicrophone_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAMicrophone_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAMicrophone_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAMicrophone_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAMicrophone_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAMicrophone_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAMicrophone_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAMicrophone_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAMicrophone_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAMicrophone_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAMicrophone_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAMicrophone_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAMicrophone_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAMicrophone_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAMicrophone_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAMicrophone_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAMicrophone_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAMicrophone_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAMicrophone_Transform_Proxy( 
    IDAMicrophone * This,
    /* [in] */ IDATransform3 *xf_0,
    /* [retval][out] */ IDAMicrophone **ret_1);


void __RPC_STUB IDAMicrophone_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAMicrophone_INTERFACE_DEFINED__ */


#ifndef __IDAMontage_INTERFACE_DEFINED__
#define __IDAMontage_INTERFACE_DEFINED__

/* interface IDAMontage */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAMontage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BD5-3C52-11d0-9200-848C1D000000")
    IDAMontage : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Render( 
            /* [retval][out] */ IDAImage **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAMontageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAMontage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAMontage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAMontage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAMontage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAMontage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAMontage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAMontage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAMontage * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAMontage * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAMontage * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAMontage * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAMontage * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAMontage * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAMontage * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAMontage * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAMontage * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAMontage * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAMontage * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAMontage * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAMontage * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAMontage * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDAMontage * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        END_INTERFACE
    } IDAMontageVtbl;

    interface IDAMontage
    {
        CONST_VTBL struct IDAMontageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAMontage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAMontage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAMontage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAMontage_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAMontage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAMontage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAMontage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAMontage_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAMontage_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAMontage_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAMontage_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAMontage_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAMontage_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAMontage_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAMontage_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAMontage_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAMontage_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAMontage_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAMontage_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAMontage_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAMontage_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAMontage_Render(This,ret_0)	\
    (This)->lpVtbl -> Render(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAMontage_Render_Proxy( 
    IDAMontage * This,
    /* [retval][out] */ IDAImage **ret_0);


void __RPC_STUB IDAMontage_Render_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAMontage_INTERFACE_DEFINED__ */


#ifndef __IDAPath2_INTERFACE_DEFINED__
#define __IDAPath2_INTERFACE_DEFINED__

/* interface IDAPath2 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAPath2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BCF-3C52-11d0-9200-848C1D000000")
    IDAPath2 : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAPath2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BoundingBox( 
            /* [in] */ IDALineStyle *style_0,
            /* [retval][out] */ IDABbox2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Fill( 
            /* [in] */ IDALineStyle *border_0,
            /* [in] */ IDAImage *fill_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Draw( 
            /* [in] */ IDALineStyle *border_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( 
            /* [retval][out] */ IDAPath2 **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAPath2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAPath2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAPath2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAPath2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAPath2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAPath2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAPath2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAPath2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAPath2 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAPath2 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAPath2 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAPath2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAPath2 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAPath2 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAPath2 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAPath2 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAPath2 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAPath2 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAPath2 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAPath2 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAPath2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAPath2 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAPath2 * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *BoundingBox )( 
            IDAPath2 * This,
            /* [in] */ IDALineStyle *style_0,
            /* [retval][out] */ IDABbox2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Fill )( 
            IDAPath2 * This,
            /* [in] */ IDALineStyle *border_0,
            /* [in] */ IDAImage *fill_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Draw )( 
            IDAPath2 * This,
            /* [in] */ IDALineStyle *border_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IDAPath2 * This,
            /* [retval][out] */ IDAPath2 **ret_0);
        
        END_INTERFACE
    } IDAPath2Vtbl;

    interface IDAPath2
    {
        CONST_VTBL struct IDAPath2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAPath2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAPath2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAPath2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAPath2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAPath2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAPath2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAPath2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAPath2_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAPath2_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAPath2_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAPath2_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAPath2_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAPath2_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAPath2_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAPath2_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAPath2_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAPath2_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAPath2_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAPath2_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAPath2_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAPath2_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAPath2_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDAPath2_BoundingBox(This,style_0,ret_1)	\
    (This)->lpVtbl -> BoundingBox(This,style_0,ret_1)

#define IDAPath2_Fill(This,border_0,fill_1,ret_2)	\
    (This)->lpVtbl -> Fill(This,border_0,fill_1,ret_2)

#define IDAPath2_Draw(This,border_0,ret_1)	\
    (This)->lpVtbl -> Draw(This,border_0,ret_1)

#define IDAPath2_Close(This,ret_0)	\
    (This)->lpVtbl -> Close(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAPath2_Transform_Proxy( 
    IDAPath2 * This,
    /* [in] */ IDATransform2 *xf_0,
    /* [retval][out] */ IDAPath2 **ret_1);


void __RPC_STUB IDAPath2_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPath2_BoundingBox_Proxy( 
    IDAPath2 * This,
    /* [in] */ IDALineStyle *style_0,
    /* [retval][out] */ IDABbox2 **ret_1);


void __RPC_STUB IDAPath2_BoundingBox_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPath2_Fill_Proxy( 
    IDAPath2 * This,
    /* [in] */ IDALineStyle *border_0,
    /* [in] */ IDAImage *fill_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAPath2_Fill_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPath2_Draw_Proxy( 
    IDAPath2 * This,
    /* [in] */ IDALineStyle *border_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAPath2_Draw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPath2_Close_Proxy( 
    IDAPath2 * This,
    /* [retval][out] */ IDAPath2 **ret_0);


void __RPC_STUB IDAPath2_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAPath2_INTERFACE_DEFINED__ */


#ifndef __IDAPoint2_INTERFACE_DEFINED__
#define __IDAPoint2_INTERFACE_DEFINED__

/* interface IDAPoint2 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAPoint2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BC7-3C52-11d0-9200-848C1D000000")
    IDAPoint2 : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AnimateControlPosition( 
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDAPoint2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AnimateControlPositionPixel( 
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDAPoint2 **ret_4) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_X( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PolarCoordAngle( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PolarCoordLength( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAPoint2 **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAPoint2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAPoint2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAPoint2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAPoint2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAPoint2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAPoint2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAPoint2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAPoint2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAPoint2 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAPoint2 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAPoint2 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAPoint2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAPoint2 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAPoint2 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAPoint2 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAPoint2 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAPoint2 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAPoint2 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAPoint2 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAPoint2 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAPoint2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAPoint2 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *AnimateControlPosition )( 
            IDAPoint2 * This,
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDAPoint2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *AnimateControlPositionPixel )( 
            IDAPoint2 * This,
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDAPoint2 **ret_4);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            IDAPoint2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            IDAPoint2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PolarCoordAngle )( 
            IDAPoint2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PolarCoordLength )( 
            IDAPoint2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAPoint2 * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAPoint2 **ret_1);
        
        END_INTERFACE
    } IDAPoint2Vtbl;

    interface IDAPoint2
    {
        CONST_VTBL struct IDAPoint2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAPoint2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAPoint2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAPoint2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAPoint2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAPoint2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAPoint2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAPoint2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAPoint2_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAPoint2_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAPoint2_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAPoint2_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAPoint2_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAPoint2_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAPoint2_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAPoint2_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAPoint2_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAPoint2_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAPoint2_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAPoint2_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAPoint2_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAPoint2_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAPoint2_AnimateControlPosition(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)	\
    (This)->lpVtbl -> AnimateControlPosition(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)

#define IDAPoint2_AnimateControlPositionPixel(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)	\
    (This)->lpVtbl -> AnimateControlPositionPixel(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)

#define IDAPoint2_get_X(This,ret_0)	\
    (This)->lpVtbl -> get_X(This,ret_0)

#define IDAPoint2_get_Y(This,ret_0)	\
    (This)->lpVtbl -> get_Y(This,ret_0)

#define IDAPoint2_get_PolarCoordAngle(This,ret_0)	\
    (This)->lpVtbl -> get_PolarCoordAngle(This,ret_0)

#define IDAPoint2_get_PolarCoordLength(This,ret_0)	\
    (This)->lpVtbl -> get_PolarCoordLength(This,ret_0)

#define IDAPoint2_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAPoint2_AnimateControlPosition_Proxy( 
    IDAPoint2 * This,
    /* [in] */ BSTR propertyPath_0,
    /* [in] */ BSTR scriptingLanguage_1,
    /* [in] */ VARIANT_BOOL invokeAsMethod_2,
    /* [in] */ double minUpdateInterval_3,
    /* [retval][out] */ IDAPoint2 **ret_4);


void __RPC_STUB IDAPoint2_AnimateControlPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPoint2_AnimateControlPositionPixel_Proxy( 
    IDAPoint2 * This,
    /* [in] */ BSTR propertyPath_0,
    /* [in] */ BSTR scriptingLanguage_1,
    /* [in] */ VARIANT_BOOL invokeAsMethod_2,
    /* [in] */ double minUpdateInterval_3,
    /* [retval][out] */ IDAPoint2 **ret_4);


void __RPC_STUB IDAPoint2_AnimateControlPositionPixel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint2_get_X_Proxy( 
    IDAPoint2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint2_get_X_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint2_get_Y_Proxy( 
    IDAPoint2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint2_get_Y_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint2_get_PolarCoordAngle_Proxy( 
    IDAPoint2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint2_get_PolarCoordAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint2_get_PolarCoordLength_Proxy( 
    IDAPoint2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint2_get_PolarCoordLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPoint2_Transform_Proxy( 
    IDAPoint2 * This,
    /* [in] */ IDATransform2 *xf_0,
    /* [retval][out] */ IDAPoint2 **ret_1);


void __RPC_STUB IDAPoint2_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAPoint2_INTERFACE_DEFINED__ */


#ifndef __IDAPoint3_INTERFACE_DEFINED__
#define __IDAPoint3_INTERFACE_DEFINED__

/* interface IDAPoint3 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAPoint3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BD7-3C52-11d0-9200-848C1D000000")
    IDAPoint3 : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Project( 
            /* [in] */ IDACamera *cam_0,
            /* [retval][out] */ IDAPoint2 **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_X( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Z( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SphericalCoordXYAngle( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SphericalCoordYZAngle( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SphericalCoordLength( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAPoint3 **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAPoint3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAPoint3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAPoint3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAPoint3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAPoint3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAPoint3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAPoint3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAPoint3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAPoint3 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAPoint3 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAPoint3 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAPoint3 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAPoint3 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAPoint3 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAPoint3 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAPoint3 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAPoint3 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAPoint3 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAPoint3 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAPoint3 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Project )( 
            IDAPoint3 * This,
            /* [in] */ IDACamera *cam_0,
            /* [retval][out] */ IDAPoint2 **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Z )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SphericalCoordXYAngle )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SphericalCoordYZAngle )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SphericalCoordLength )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAPoint3 * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAPoint3 **ret_1);
        
        END_INTERFACE
    } IDAPoint3Vtbl;

    interface IDAPoint3
    {
        CONST_VTBL struct IDAPoint3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAPoint3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAPoint3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAPoint3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAPoint3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAPoint3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAPoint3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAPoint3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAPoint3_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAPoint3_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAPoint3_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAPoint3_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAPoint3_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAPoint3_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAPoint3_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAPoint3_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAPoint3_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAPoint3_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAPoint3_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAPoint3_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAPoint3_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAPoint3_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAPoint3_Project(This,cam_0,ret_1)	\
    (This)->lpVtbl -> Project(This,cam_0,ret_1)

#define IDAPoint3_get_X(This,ret_0)	\
    (This)->lpVtbl -> get_X(This,ret_0)

#define IDAPoint3_get_Y(This,ret_0)	\
    (This)->lpVtbl -> get_Y(This,ret_0)

#define IDAPoint3_get_Z(This,ret_0)	\
    (This)->lpVtbl -> get_Z(This,ret_0)

#define IDAPoint3_get_SphericalCoordXYAngle(This,ret_0)	\
    (This)->lpVtbl -> get_SphericalCoordXYAngle(This,ret_0)

#define IDAPoint3_get_SphericalCoordYZAngle(This,ret_0)	\
    (This)->lpVtbl -> get_SphericalCoordYZAngle(This,ret_0)

#define IDAPoint3_get_SphericalCoordLength(This,ret_0)	\
    (This)->lpVtbl -> get_SphericalCoordLength(This,ret_0)

#define IDAPoint3_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAPoint3_Project_Proxy( 
    IDAPoint3 * This,
    /* [in] */ IDACamera *cam_0,
    /* [retval][out] */ IDAPoint2 **ret_1);


void __RPC_STUB IDAPoint3_Project_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint3_get_X_Proxy( 
    IDAPoint3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint3_get_X_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint3_get_Y_Proxy( 
    IDAPoint3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint3_get_Y_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint3_get_Z_Proxy( 
    IDAPoint3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint3_get_Z_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint3_get_SphericalCoordXYAngle_Proxy( 
    IDAPoint3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint3_get_SphericalCoordXYAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint3_get_SphericalCoordYZAngle_Proxy( 
    IDAPoint3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint3_get_SphericalCoordYZAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint3_get_SphericalCoordLength_Proxy( 
    IDAPoint3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint3_get_SphericalCoordLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPoint3_Transform_Proxy( 
    IDAPoint3 * This,
    /* [in] */ IDATransform3 *xf_0,
    /* [retval][out] */ IDAPoint3 **ret_1);


void __RPC_STUB IDAPoint3_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAPoint3_INTERFACE_DEFINED__ */


#ifndef __IDASound_INTERFACE_DEFINED__
#define __IDASound_INTERFACE_DEFINED__

/* interface IDASound */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDASound;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BE3-3C52-11d0-9200-848C1D000000")
    IDASound : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE PhaseAnim( 
            /* [in] */ IDANumber *phaseAmt_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Phase( 
            /* [in] */ double phaseAmt_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RateAnim( 
            /* [in] */ IDANumber *pitchShift_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rate( 
            /* [in] */ double pitchShift_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PanAnim( 
            /* [in] */ IDANumber *panAmt_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Pan( 
            /* [in] */ double panAmt_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GainAnim( 
            /* [in] */ IDANumber *gainAmt_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Gain( 
            /* [in] */ double gainAmt_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Loop( 
            /* [retval][out] */ IDASound **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDASoundVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDASound * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDASound * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDASound * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDASound * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDASound * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDASound * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDASound * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDASound * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDASound * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDASound * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDASound * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDASound * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDASound * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDASound * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDASound * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDASound * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDASound * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDASound * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDASound * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDASound * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDASound * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *PhaseAnim )( 
            IDASound * This,
            /* [in] */ IDANumber *phaseAmt_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Phase )( 
            IDASound * This,
            /* [in] */ double phaseAmt_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *RateAnim )( 
            IDASound * This,
            /* [in] */ IDANumber *pitchShift_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rate )( 
            IDASound * This,
            /* [in] */ double pitchShift_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *PanAnim )( 
            IDASound * This,
            /* [in] */ IDANumber *panAmt_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Pan )( 
            IDASound * This,
            /* [in] */ double panAmt_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *GainAnim )( 
            IDASound * This,
            /* [in] */ IDANumber *gainAmt_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Gain )( 
            IDASound * This,
            /* [in] */ double gainAmt_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Loop )( 
            IDASound * This,
            /* [retval][out] */ IDASound **ret_0);
        
        END_INTERFACE
    } IDASoundVtbl;

    interface IDASound
    {
        CONST_VTBL struct IDASoundVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDASound_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDASound_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDASound_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDASound_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDASound_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDASound_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDASound_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDASound_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDASound_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDASound_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDASound_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDASound_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDASound_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDASound_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDASound_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDASound_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDASound_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDASound_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDASound_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDASound_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDASound_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDASound_PhaseAnim(This,phaseAmt_0,ret_1)	\
    (This)->lpVtbl -> PhaseAnim(This,phaseAmt_0,ret_1)

#define IDASound_Phase(This,phaseAmt_0,ret_1)	\
    (This)->lpVtbl -> Phase(This,phaseAmt_0,ret_1)

#define IDASound_RateAnim(This,pitchShift_0,ret_1)	\
    (This)->lpVtbl -> RateAnim(This,pitchShift_0,ret_1)

#define IDASound_Rate(This,pitchShift_0,ret_1)	\
    (This)->lpVtbl -> Rate(This,pitchShift_0,ret_1)

#define IDASound_PanAnim(This,panAmt_0,ret_1)	\
    (This)->lpVtbl -> PanAnim(This,panAmt_0,ret_1)

#define IDASound_Pan(This,panAmt_0,ret_1)	\
    (This)->lpVtbl -> Pan(This,panAmt_0,ret_1)

#define IDASound_GainAnim(This,gainAmt_0,ret_1)	\
    (This)->lpVtbl -> GainAnim(This,gainAmt_0,ret_1)

#define IDASound_Gain(This,gainAmt_0,ret_1)	\
    (This)->lpVtbl -> Gain(This,gainAmt_0,ret_1)

#define IDASound_Loop(This,ret_0)	\
    (This)->lpVtbl -> Loop(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDASound_PhaseAnim_Proxy( 
    IDASound * This,
    /* [in] */ IDANumber *phaseAmt_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_PhaseAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_Phase_Proxy( 
    IDASound * This,
    /* [in] */ double phaseAmt_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_Phase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_RateAnim_Proxy( 
    IDASound * This,
    /* [in] */ IDANumber *pitchShift_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_RateAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_Rate_Proxy( 
    IDASound * This,
    /* [in] */ double pitchShift_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_PanAnim_Proxy( 
    IDASound * This,
    /* [in] */ IDANumber *panAmt_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_PanAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_Pan_Proxy( 
    IDASound * This,
    /* [in] */ double panAmt_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_Pan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_GainAnim_Proxy( 
    IDASound * This,
    /* [in] */ IDANumber *gainAmt_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_GainAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_Gain_Proxy( 
    IDASound * This,
    /* [in] */ double gainAmt_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_Gain_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_Loop_Proxy( 
    IDASound * This,
    /* [retval][out] */ IDASound **ret_0);


void __RPC_STUB IDASound_Loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDASound_INTERFACE_DEFINED__ */


#ifndef __IDAString_INTERFACE_DEFINED__
#define __IDAString_INTERFACE_DEFINED__

/* interface IDAString */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAString;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BC3-3C52-11d0-9200-848C1D000000")
    IDAString : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Extract( 
            /* [retval][out] */ BSTR *ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AnimateProperty( 
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDAString **ret_4) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAStringVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAString * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAString * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAString * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAString * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAString * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAString * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAString * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAString * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAString * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAString * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAString * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAString * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAString * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAString * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAString * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAString * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAString * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAString * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAString * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAString * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAString * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Extract )( 
            IDAString * This,
            /* [retval][out] */ BSTR *ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AnimateProperty )( 
            IDAString * This,
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDAString **ret_4);
        
        END_INTERFACE
    } IDAStringVtbl;

    interface IDAString
    {
        CONST_VTBL struct IDAStringVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAString_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAString_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAString_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAString_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAString_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAString_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAString_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAString_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAString_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAString_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAString_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAString_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAString_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAString_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAString_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAString_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAString_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAString_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAString_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAString_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAString_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAString_Extract(This,ret_0)	\
    (This)->lpVtbl -> Extract(This,ret_0)

#define IDAString_AnimateProperty(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)	\
    (This)->lpVtbl -> AnimateProperty(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAString_Extract_Proxy( 
    IDAString * This,
    /* [retval][out] */ BSTR *ret_0);


void __RPC_STUB IDAString_Extract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAString_AnimateProperty_Proxy( 
    IDAString * This,
    /* [in] */ BSTR propertyPath_0,
    /* [in] */ BSTR scriptingLanguage_1,
    /* [in] */ VARIANT_BOOL invokeAsMethod_2,
    /* [in] */ double minUpdateInterval_3,
    /* [retval][out] */ IDAString **ret_4);


void __RPC_STUB IDAString_AnimateProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAString_INTERFACE_DEFINED__ */


#ifndef __IDATransform2_INTERFACE_DEFINED__
#define __IDATransform2_INTERFACE_DEFINED__

/* interface IDATransform2 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDATransform2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BCB-3C52-11d0-9200-848C1D000000")
    IDATransform2 : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Inverse( 
            /* [retval][out] */ IDATransform2 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsSingular( 
            /* [retval][out] */ IDABoolean **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDATransform2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDATransform2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDATransform2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDATransform2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDATransform2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDATransform2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDATransform2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDATransform2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDATransform2 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDATransform2 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDATransform2 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDATransform2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDATransform2 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDATransform2 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDATransform2 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDATransform2 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDATransform2 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDATransform2 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDATransform2 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDATransform2 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDATransform2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDATransform2 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Inverse )( 
            IDATransform2 * This,
            /* [retval][out] */ IDATransform2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSingular )( 
            IDATransform2 * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        END_INTERFACE
    } IDATransform2Vtbl;

    interface IDATransform2
    {
        CONST_VTBL struct IDATransform2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDATransform2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDATransform2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDATransform2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDATransform2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDATransform2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDATransform2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDATransform2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDATransform2_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDATransform2_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDATransform2_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDATransform2_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDATransform2_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDATransform2_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDATransform2_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDATransform2_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDATransform2_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDATransform2_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDATransform2_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDATransform2_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDATransform2_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDATransform2_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDATransform2_Inverse(This,ret_0)	\
    (This)->lpVtbl -> Inverse(This,ret_0)

#define IDATransform2_get_IsSingular(This,ret_0)	\
    (This)->lpVtbl -> get_IsSingular(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDATransform2_Inverse_Proxy( 
    IDATransform2 * This,
    /* [retval][out] */ IDATransform2 **ret_0);


void __RPC_STUB IDATransform2_Inverse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDATransform2_get_IsSingular_Proxy( 
    IDATransform2 * This,
    /* [retval][out] */ IDABoolean **ret_0);


void __RPC_STUB IDATransform2_get_IsSingular_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDATransform2_INTERFACE_DEFINED__ */


#ifndef __IDATransform3_INTERFACE_DEFINED__
#define __IDATransform3_INTERFACE_DEFINED__

/* interface IDATransform3 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDATransform3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BDB-3C52-11d0-9200-848C1D000000")
    IDATransform3 : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Inverse( 
            /* [retval][out] */ IDATransform3 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsSingular( 
            /* [retval][out] */ IDABoolean **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ParallelTransform2( 
            /* [retval][out] */ IDATransform2 **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDATransform3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDATransform3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDATransform3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDATransform3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDATransform3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDATransform3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDATransform3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDATransform3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDATransform3 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDATransform3 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDATransform3 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDATransform3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDATransform3 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDATransform3 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDATransform3 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDATransform3 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDATransform3 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDATransform3 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDATransform3 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDATransform3 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDATransform3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDATransform3 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Inverse )( 
            IDATransform3 * This,
            /* [retval][out] */ IDATransform3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSingular )( 
            IDATransform3 * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelTransform2 )( 
            IDATransform3 * This,
            /* [retval][out] */ IDATransform2 **ret_0);
        
        END_INTERFACE
    } IDATransform3Vtbl;

    interface IDATransform3
    {
        CONST_VTBL struct IDATransform3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDATransform3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDATransform3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDATransform3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDATransform3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDATransform3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDATransform3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDATransform3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDATransform3_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDATransform3_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDATransform3_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDATransform3_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDATransform3_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDATransform3_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDATransform3_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDATransform3_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDATransform3_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDATransform3_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDATransform3_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDATransform3_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDATransform3_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDATransform3_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDATransform3_Inverse(This,ret_0)	\
    (This)->lpVtbl -> Inverse(This,ret_0)

#define IDATransform3_get_IsSingular(This,ret_0)	\
    (This)->lpVtbl -> get_IsSingular(This,ret_0)

#define IDATransform3_ParallelTransform2(This,ret_0)	\
    (This)->lpVtbl -> ParallelTransform2(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDATransform3_Inverse_Proxy( 
    IDATransform3 * This,
    /* [retval][out] */ IDATransform3 **ret_0);


void __RPC_STUB IDATransform3_Inverse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDATransform3_get_IsSingular_Proxy( 
    IDATransform3 * This,
    /* [retval][out] */ IDABoolean **ret_0);


void __RPC_STUB IDATransform3_get_IsSingular_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDATransform3_ParallelTransform2_Proxy( 
    IDATransform3 * This,
    /* [retval][out] */ IDATransform2 **ret_0);


void __RPC_STUB IDATransform3_ParallelTransform2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDATransform3_INTERFACE_DEFINED__ */


#ifndef __IDAVector2_INTERFACE_DEFINED__
#define __IDAVector2_INTERFACE_DEFINED__

/* interface IDAVector2 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAVector2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BC9-3C52-11d0-9200-848C1D000000")
    IDAVector2 : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LengthSquared( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Normalize( 
            /* [retval][out] */ IDAVector2 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MulAnim( 
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Mul( 
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DivAnim( 
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Div( 
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_X( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PolarCoordAngle( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PolarCoordLength( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAVector2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAVector2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAVector2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAVector2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAVector2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAVector2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAVector2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAVector2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAVector2 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAVector2 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAVector2 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAVector2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAVector2 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAVector2 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAVector2 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAVector2 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAVector2 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAVector2 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAVector2 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAVector2 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAVector2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAVector2 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IDAVector2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LengthSquared )( 
            IDAVector2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Normalize )( 
            IDAVector2 * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *MulAnim )( 
            IDAVector2 * This,
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mul )( 
            IDAVector2 * This,
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DivAnim )( 
            IDAVector2 * This,
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Div )( 
            IDAVector2 * This,
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            IDAVector2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            IDAVector2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PolarCoordAngle )( 
            IDAVector2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PolarCoordLength )( 
            IDAVector2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAVector2 * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        END_INTERFACE
    } IDAVector2Vtbl;

    interface IDAVector2
    {
        CONST_VTBL struct IDAVector2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAVector2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAVector2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAVector2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAVector2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAVector2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAVector2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAVector2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAVector2_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAVector2_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAVector2_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAVector2_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAVector2_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAVector2_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAVector2_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAVector2_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAVector2_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAVector2_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAVector2_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAVector2_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAVector2_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAVector2_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAVector2_get_Length(This,ret_0)	\
    (This)->lpVtbl -> get_Length(This,ret_0)

#define IDAVector2_get_LengthSquared(This,ret_0)	\
    (This)->lpVtbl -> get_LengthSquared(This,ret_0)

#define IDAVector2_Normalize(This,ret_0)	\
    (This)->lpVtbl -> Normalize(This,ret_0)

#define IDAVector2_MulAnim(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> MulAnim(This,scalar_0,ret_1)

#define IDAVector2_Mul(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> Mul(This,scalar_0,ret_1)

#define IDAVector2_DivAnim(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> DivAnim(This,scalar_0,ret_1)

#define IDAVector2_Div(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> Div(This,scalar_0,ret_1)

#define IDAVector2_get_X(This,ret_0)	\
    (This)->lpVtbl -> get_X(This,ret_0)

#define IDAVector2_get_Y(This,ret_0)	\
    (This)->lpVtbl -> get_Y(This,ret_0)

#define IDAVector2_get_PolarCoordAngle(This,ret_0)	\
    (This)->lpVtbl -> get_PolarCoordAngle(This,ret_0)

#define IDAVector2_get_PolarCoordLength(This,ret_0)	\
    (This)->lpVtbl -> get_PolarCoordLength(This,ret_0)

#define IDAVector2_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector2_get_Length_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector2_get_Length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector2_get_LengthSquared_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector2_get_LengthSquared_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector2_Normalize_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDAVector2 **ret_0);


void __RPC_STUB IDAVector2_Normalize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector2_MulAnim_Proxy( 
    IDAVector2 * This,
    /* [in] */ IDANumber *scalar_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAVector2_MulAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector2_Mul_Proxy( 
    IDAVector2 * This,
    /* [in] */ double scalar_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAVector2_Mul_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector2_DivAnim_Proxy( 
    IDAVector2 * This,
    /* [in] */ IDANumber *scalar_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAVector2_DivAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector2_Div_Proxy( 
    IDAVector2 * This,
    /* [in] */ double scalar_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAVector2_Div_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector2_get_X_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector2_get_X_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector2_get_Y_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector2_get_Y_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector2_get_PolarCoordAngle_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector2_get_PolarCoordAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector2_get_PolarCoordLength_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector2_get_PolarCoordLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector2_Transform_Proxy( 
    IDAVector2 * This,
    /* [in] */ IDATransform2 *xf_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAVector2_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAVector2_INTERFACE_DEFINED__ */


#ifndef __IDAVector3_INTERFACE_DEFINED__
#define __IDAVector3_INTERFACE_DEFINED__

/* interface IDAVector3 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAVector3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BD9-3C52-11d0-9200-848C1D000000")
    IDAVector3 : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LengthSquared( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Normalize( 
            /* [retval][out] */ IDAVector3 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MulAnim( 
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Mul( 
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DivAnim( 
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Div( 
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_X( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Z( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SphericalCoordXYAngle( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SphericalCoordYZAngle( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SphericalCoordLength( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAVector3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAVector3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAVector3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAVector3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAVector3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAVector3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAVector3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAVector3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAVector3 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAVector3 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAVector3 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAVector3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAVector3 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAVector3 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAVector3 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAVector3 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAVector3 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAVector3 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAVector3 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAVector3 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAVector3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAVector3 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LengthSquared )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Normalize )( 
            IDAVector3 * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *MulAnim )( 
            IDAVector3 * This,
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mul )( 
            IDAVector3 * This,
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DivAnim )( 
            IDAVector3 * This,
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Div )( 
            IDAVector3 * This,
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Z )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SphericalCoordXYAngle )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SphericalCoordYZAngle )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SphericalCoordLength )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAVector3 * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        END_INTERFACE
    } IDAVector3Vtbl;

    interface IDAVector3
    {
        CONST_VTBL struct IDAVector3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAVector3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAVector3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAVector3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAVector3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAVector3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAVector3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAVector3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAVector3_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAVector3_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAVector3_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAVector3_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAVector3_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAVector3_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAVector3_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAVector3_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAVector3_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAVector3_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAVector3_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAVector3_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAVector3_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAVector3_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAVector3_get_Length(This,ret_0)	\
    (This)->lpVtbl -> get_Length(This,ret_0)

#define IDAVector3_get_LengthSquared(This,ret_0)	\
    (This)->lpVtbl -> get_LengthSquared(This,ret_0)

#define IDAVector3_Normalize(This,ret_0)	\
    (This)->lpVtbl -> Normalize(This,ret_0)

#define IDAVector3_MulAnim(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> MulAnim(This,scalar_0,ret_1)

#define IDAVector3_Mul(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> Mul(This,scalar_0,ret_1)

#define IDAVector3_DivAnim(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> DivAnim(This,scalar_0,ret_1)

#define IDAVector3_Div(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> Div(This,scalar_0,ret_1)

#define IDAVector3_get_X(This,ret_0)	\
    (This)->lpVtbl -> get_X(This,ret_0)

#define IDAVector3_get_Y(This,ret_0)	\
    (This)->lpVtbl -> get_Y(This,ret_0)

#define IDAVector3_get_Z(This,ret_0)	\
    (This)->lpVtbl -> get_Z(This,ret_0)

#define IDAVector3_get_SphericalCoordXYAngle(This,ret_0)	\
    (This)->lpVtbl -> get_SphericalCoordXYAngle(This,ret_0)

#define IDAVector3_get_SphericalCoordYZAngle(This,ret_0)	\
    (This)->lpVtbl -> get_SphericalCoordYZAngle(This,ret_0)

#define IDAVector3_get_SphericalCoordLength(This,ret_0)	\
    (This)->lpVtbl -> get_SphericalCoordLength(This,ret_0)

#define IDAVector3_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_Length_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_Length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_LengthSquared_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_LengthSquared_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector3_Normalize_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDAVector3 **ret_0);


void __RPC_STUB IDAVector3_Normalize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector3_MulAnim_Proxy( 
    IDAVector3 * This,
    /* [in] */ IDANumber *scalar_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAVector3_MulAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector3_Mul_Proxy( 
    IDAVector3 * This,
    /* [in] */ double scalar_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAVector3_Mul_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector3_DivAnim_Proxy( 
    IDAVector3 * This,
    /* [in] */ IDANumber *scalar_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAVector3_DivAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector3_Div_Proxy( 
    IDAVector3 * This,
    /* [in] */ double scalar_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAVector3_Div_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_X_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_X_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_Y_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_Y_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_Z_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_Z_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_SphericalCoordXYAngle_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_SphericalCoordXYAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_SphericalCoordYZAngle_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_SphericalCoordYZAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_SphericalCoordLength_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_SphericalCoordLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector3_Transform_Proxy( 
    IDAVector3 * This,
    /* [in] */ IDATransform3 *xf_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAVector3_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAVector3_INTERFACE_DEFINED__ */


#ifndef __IDAFontStyle_INTERFACE_DEFINED__
#define __IDAFontStyle_INTERFACE_DEFINED__

/* interface IDAFontStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAFontStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("25B0F91D-D23D-11d0-9B85-00C04FC2F51D")
    IDAFontStyle : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Bold( 
            /* [retval][out] */ IDAFontStyle **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Italic( 
            /* [retval][out] */ IDAFontStyle **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Underline( 
            /* [retval][out] */ IDAFontStyle **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Strikethrough( 
            /* [retval][out] */ IDAFontStyle **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AntiAliasing( 
            /* [in] */ double aaStyle_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Color( 
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FamilyAnim( 
            /* [in] */ IDAString *face_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Family( 
            /* [in] */ BSTR face_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SizeAnim( 
            /* [in] */ IDANumber *size_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Size( 
            /* [in] */ double size_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Weight( 
            /* [in] */ double weight_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WeightAnim( 
            /* [in] */ IDANumber *weight_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAFontStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAFontStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAFontStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAFontStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAFontStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAFontStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAFontStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAFontStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAFontStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAFontStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAFontStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAFontStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAFontStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAFontStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAFontStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAFontStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAFontStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAFontStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAFontStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAFontStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAFontStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAFontStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Bold )( 
            IDAFontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Italic )( 
            IDAFontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Underline )( 
            IDAFontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Strikethrough )( 
            IDAFontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AntiAliasing )( 
            IDAFontStyle * This,
            /* [in] */ double aaStyle_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Color )( 
            IDAFontStyle * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *FamilyAnim )( 
            IDAFontStyle * This,
            /* [in] */ IDAString *face_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Family )( 
            IDAFontStyle * This,
            /* [in] */ BSTR face_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SizeAnim )( 
            IDAFontStyle * This,
            /* [in] */ IDANumber *size_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Size )( 
            IDAFontStyle * This,
            /* [in] */ double size_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Weight )( 
            IDAFontStyle * This,
            /* [in] */ double weight_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *WeightAnim )( 
            IDAFontStyle * This,
            /* [in] */ IDANumber *weight_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        END_INTERFACE
    } IDAFontStyleVtbl;

    interface IDAFontStyle
    {
        CONST_VTBL struct IDAFontStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAFontStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAFontStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAFontStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAFontStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAFontStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAFontStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAFontStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAFontStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAFontStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAFontStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAFontStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAFontStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAFontStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAFontStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAFontStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAFontStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAFontStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAFontStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAFontStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAFontStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAFontStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAFontStyle_Bold(This,ret_0)	\
    (This)->lpVtbl -> Bold(This,ret_0)

#define IDAFontStyle_Italic(This,ret_0)	\
    (This)->lpVtbl -> Italic(This,ret_0)

#define IDAFontStyle_Underline(This,ret_0)	\
    (This)->lpVtbl -> Underline(This,ret_0)

#define IDAFontStyle_Strikethrough(This,ret_0)	\
    (This)->lpVtbl -> Strikethrough(This,ret_0)

#define IDAFontStyle_AntiAliasing(This,aaStyle_0,ret_1)	\
    (This)->lpVtbl -> AntiAliasing(This,aaStyle_0,ret_1)

#define IDAFontStyle_Color(This,col_0,ret_1)	\
    (This)->lpVtbl -> Color(This,col_0,ret_1)

#define IDAFontStyle_FamilyAnim(This,face_0,ret_1)	\
    (This)->lpVtbl -> FamilyAnim(This,face_0,ret_1)

#define IDAFontStyle_Family(This,face_0,ret_1)	\
    (This)->lpVtbl -> Family(This,face_0,ret_1)

#define IDAFontStyle_SizeAnim(This,size_0,ret_1)	\
    (This)->lpVtbl -> SizeAnim(This,size_0,ret_1)

#define IDAFontStyle_Size(This,size_0,ret_1)	\
    (This)->lpVtbl -> Size(This,size_0,ret_1)

#define IDAFontStyle_Weight(This,weight_0,ret_1)	\
    (This)->lpVtbl -> Weight(This,weight_0,ret_1)

#define IDAFontStyle_WeightAnim(This,weight_0,ret_1)	\
    (This)->lpVtbl -> WeightAnim(This,weight_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAFontStyle_Bold_Proxy( 
    IDAFontStyle * This,
    /* [retval][out] */ IDAFontStyle **ret_0);


void __RPC_STUB IDAFontStyle_Bold_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Italic_Proxy( 
    IDAFontStyle * This,
    /* [retval][out] */ IDAFontStyle **ret_0);


void __RPC_STUB IDAFontStyle_Italic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Underline_Proxy( 
    IDAFontStyle * This,
    /* [retval][out] */ IDAFontStyle **ret_0);


void __RPC_STUB IDAFontStyle_Underline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Strikethrough_Proxy( 
    IDAFontStyle * This,
    /* [retval][out] */ IDAFontStyle **ret_0);


void __RPC_STUB IDAFontStyle_Strikethrough_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_AntiAliasing_Proxy( 
    IDAFontStyle * This,
    /* [in] */ double aaStyle_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_AntiAliasing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Color_Proxy( 
    IDAFontStyle * This,
    /* [in] */ IDAColor *col_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_Color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_FamilyAnim_Proxy( 
    IDAFontStyle * This,
    /* [in] */ IDAString *face_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_FamilyAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Family_Proxy( 
    IDAFontStyle * This,
    /* [in] */ BSTR face_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_Family_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_SizeAnim_Proxy( 
    IDAFontStyle * This,
    /* [in] */ IDANumber *size_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_SizeAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Size_Proxy( 
    IDAFontStyle * This,
    /* [in] */ double size_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Weight_Proxy( 
    IDAFontStyle * This,
    /* [in] */ double weight_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_Weight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_WeightAnim_Proxy( 
    IDAFontStyle * This,
    /* [in] */ IDANumber *weight_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_WeightAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAFontStyle_INTERFACE_DEFINED__ */


#ifndef __IDALineStyle_INTERFACE_DEFINED__
#define __IDALineStyle_INTERFACE_DEFINED__

/* interface IDALineStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDALineStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BF1-3C52-11d0-9200-848C1D000000")
    IDALineStyle : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE End( 
            /* [in] */ IDAEndStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Join( 
            /* [in] */ IDAJoinStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Dash( 
            /* [in] */ IDADashStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WidthAnim( 
            /* [in] */ IDANumber *sty_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE width( 
            /* [in] */ double sty_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AntiAliasing( 
            /* [in] */ double aaStyle_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Detail( 
            /* [retval][out] */ IDALineStyle **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Color( 
            /* [in] */ IDAColor *clr_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDALineStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDALineStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDALineStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDALineStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDALineStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDALineStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDALineStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDALineStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDALineStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDALineStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDALineStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDALineStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDALineStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDALineStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDALineStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDALineStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDALineStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDALineStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDALineStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDALineStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDALineStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDALineStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *End )( 
            IDALineStyle * This,
            /* [in] */ IDAEndStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1);
        
        HRESULT ( STDMETHODCALLTYPE *Join )( 
            IDALineStyle * This,
            /* [in] */ IDAJoinStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1);
        
        HRESULT ( STDMETHODCALLTYPE *Dash )( 
            IDALineStyle * This,
            /* [in] */ IDADashStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1);
        
        HRESULT ( STDMETHODCALLTYPE *WidthAnim )( 
            IDALineStyle * This,
            /* [in] */ IDANumber *sty_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *width )( 
            IDALineStyle * This,
            /* [in] */ double sty_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AntiAliasing )( 
            IDALineStyle * This,
            /* [in] */ double aaStyle_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Detail )( 
            IDALineStyle * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Color )( 
            IDALineStyle * This,
            /* [in] */ IDAColor *clr_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        END_INTERFACE
    } IDALineStyleVtbl;

    interface IDALineStyle
    {
        CONST_VTBL struct IDALineStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDALineStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDALineStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDALineStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDALineStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDALineStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDALineStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDALineStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDALineStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDALineStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDALineStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDALineStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDALineStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDALineStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDALineStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDALineStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDALineStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDALineStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDALineStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDALineStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDALineStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDALineStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDALineStyle_End(This,obsolete_0,obsolete_1)	\
    (This)->lpVtbl -> End(This,obsolete_0,obsolete_1)

#define IDALineStyle_Join(This,obsolete_0,obsolete_1)	\
    (This)->lpVtbl -> Join(This,obsolete_0,obsolete_1)

#define IDALineStyle_Dash(This,obsolete_0,obsolete_1)	\
    (This)->lpVtbl -> Dash(This,obsolete_0,obsolete_1)

#define IDALineStyle_WidthAnim(This,sty_0,ret_1)	\
    (This)->lpVtbl -> WidthAnim(This,sty_0,ret_1)

#define IDALineStyle_width(This,sty_0,ret_1)	\
    (This)->lpVtbl -> width(This,sty_0,ret_1)

#define IDALineStyle_AntiAliasing(This,aaStyle_0,ret_1)	\
    (This)->lpVtbl -> AntiAliasing(This,aaStyle_0,ret_1)

#define IDALineStyle_Detail(This,ret_0)	\
    (This)->lpVtbl -> Detail(This,ret_0)

#define IDALineStyle_Color(This,clr_0,ret_1)	\
    (This)->lpVtbl -> Color(This,clr_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDALineStyle_End_Proxy( 
    IDALineStyle * This,
    /* [in] */ IDAEndStyle *obsolete_0,
    /* [retval][out] */ IDALineStyle **obsolete_1);


void __RPC_STUB IDALineStyle_End_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_Join_Proxy( 
    IDALineStyle * This,
    /* [in] */ IDAJoinStyle *obsolete_0,
    /* [retval][out] */ IDALineStyle **obsolete_1);


void __RPC_STUB IDALineStyle_Join_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_Dash_Proxy( 
    IDALineStyle * This,
    /* [in] */ IDADashStyle *obsolete_0,
    /* [retval][out] */ IDALineStyle **obsolete_1);


void __RPC_STUB IDALineStyle_Dash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_WidthAnim_Proxy( 
    IDALineStyle * This,
    /* [in] */ IDANumber *sty_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDALineStyle_WidthAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_width_Proxy( 
    IDALineStyle * This,
    /* [in] */ double sty_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDALineStyle_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_AntiAliasing_Proxy( 
    IDALineStyle * This,
    /* [in] */ double aaStyle_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDALineStyle_AntiAliasing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_Detail_Proxy( 
    IDALineStyle * This,
    /* [retval][out] */ IDALineStyle **ret_0);


void __RPC_STUB IDALineStyle_Detail_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_Color_Proxy( 
    IDALineStyle * This,
    /* [in] */ IDAColor *clr_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDALineStyle_Color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDALineStyle_INTERFACE_DEFINED__ */


#ifndef __IDAEndStyle_INTERFACE_DEFINED__
#define __IDAEndStyle_INTERFACE_DEFINED__

/* interface IDAEndStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAEndStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BEB-3C52-11d0-9200-848C1D000000")
    IDAEndStyle : public IDABehavior
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDAEndStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAEndStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAEndStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAEndStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAEndStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAEndStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAEndStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAEndStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAEndStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAEndStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAEndStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAEndStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAEndStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAEndStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAEndStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAEndStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAEndStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAEndStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAEndStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAEndStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAEndStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAEndStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        END_INTERFACE
    } IDAEndStyleVtbl;

    interface IDAEndStyle
    {
        CONST_VTBL struct IDAEndStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAEndStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAEndStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAEndStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAEndStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAEndStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAEndStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAEndStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAEndStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAEndStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAEndStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAEndStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAEndStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAEndStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAEndStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAEndStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAEndStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAEndStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAEndStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAEndStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAEndStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAEndStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDAEndStyle_INTERFACE_DEFINED__ */


#ifndef __IDAJoinStyle_INTERFACE_DEFINED__
#define __IDAJoinStyle_INTERFACE_DEFINED__

/* interface IDAJoinStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAJoinStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BED-3C52-11d0-9200-848C1D000000")
    IDAJoinStyle : public IDABehavior
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDAJoinStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAJoinStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAJoinStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAJoinStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAJoinStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAJoinStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAJoinStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAJoinStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAJoinStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAJoinStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAJoinStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAJoinStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAJoinStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAJoinStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAJoinStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAJoinStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAJoinStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAJoinStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAJoinStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAJoinStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAJoinStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAJoinStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        END_INTERFACE
    } IDAJoinStyleVtbl;

    interface IDAJoinStyle
    {
        CONST_VTBL struct IDAJoinStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAJoinStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAJoinStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAJoinStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAJoinStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAJoinStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAJoinStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAJoinStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAJoinStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAJoinStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAJoinStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAJoinStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAJoinStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAJoinStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAJoinStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAJoinStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAJoinStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAJoinStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAJoinStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAJoinStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAJoinStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAJoinStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDAJoinStyle_INTERFACE_DEFINED__ */


#ifndef __IDADashStyle_INTERFACE_DEFINED__
#define __IDADashStyle_INTERFACE_DEFINED__

/* interface IDADashStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDADashStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BEF-3C52-11d0-9200-848C1D000000")
    IDADashStyle : public IDABehavior
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDADashStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDADashStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDADashStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDADashStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDADashStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDADashStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDADashStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDADashStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDADashStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDADashStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDADashStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDADashStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDADashStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDADashStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDADashStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDADashStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDADashStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDADashStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDADashStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDADashStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDADashStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDADashStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        END_INTERFACE
    } IDADashStyleVtbl;

    interface IDADashStyle
    {
        CONST_VTBL struct IDADashStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDADashStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDADashStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDADashStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDADashStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDADashStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDADashStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDADashStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDADashStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDADashStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDADashStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDADashStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDADashStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDADashStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDADashStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDADashStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDADashStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDADashStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDADashStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDADashStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDADashStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDADashStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDADashStyle_INTERFACE_DEFINED__ */


#ifndef __IDABbox2_INTERFACE_DEFINED__
#define __IDABbox2_INTERFACE_DEFINED__

/* interface IDABbox2 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDABbox2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BCD-3C52-11d0-9200-848C1D000000")
    IDABbox2 : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Min( 
            /* [retval][out] */ IDAPoint2 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Max( 
            /* [retval][out] */ IDAPoint2 **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDABbox2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDABbox2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDABbox2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDABbox2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDABbox2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDABbox2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDABbox2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDABbox2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDABbox2 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDABbox2 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDABbox2 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDABbox2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDABbox2 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDABbox2 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDABbox2 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDABbox2 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDABbox2 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDABbox2 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDABbox2 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDABbox2 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDABbox2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDABbox2 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Min )( 
            IDABbox2 * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Max )( 
            IDABbox2 * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        END_INTERFACE
    } IDABbox2Vtbl;

    interface IDABbox2
    {
        CONST_VTBL struct IDABbox2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDABbox2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDABbox2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDABbox2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDABbox2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDABbox2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDABbox2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDABbox2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDABbox2_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDABbox2_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDABbox2_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDABbox2_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDABbox2_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDABbox2_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDABbox2_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDABbox2_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDABbox2_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDABbox2_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDABbox2_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDABbox2_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDABbox2_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDABbox2_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDABbox2_get_Min(This,ret_0)	\
    (This)->lpVtbl -> get_Min(This,ret_0)

#define IDABbox2_get_Max(This,ret_0)	\
    (This)->lpVtbl -> get_Max(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDABbox2_get_Min_Proxy( 
    IDABbox2 * This,
    /* [retval][out] */ IDAPoint2 **ret_0);


void __RPC_STUB IDABbox2_get_Min_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDABbox2_get_Max_Proxy( 
    IDABbox2 * This,
    /* [retval][out] */ IDAPoint2 **ret_0);


void __RPC_STUB IDABbox2_get_Max_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDABbox2_INTERFACE_DEFINED__ */


#ifndef __IDABbox3_INTERFACE_DEFINED__
#define __IDABbox3_INTERFACE_DEFINED__

/* interface IDABbox3 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDABbox3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BDD-3C52-11d0-9200-848C1D000000")
    IDABbox3 : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Min( 
            /* [retval][out] */ IDAPoint3 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Max( 
            /* [retval][out] */ IDAPoint3 **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDABbox3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDABbox3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDABbox3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDABbox3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDABbox3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDABbox3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDABbox3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDABbox3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDABbox3 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDABbox3 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDABbox3 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDABbox3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDABbox3 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDABbox3 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDABbox3 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDABbox3 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDABbox3 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDABbox3 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDABbox3 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDABbox3 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDABbox3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDABbox3 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Min )( 
            IDABbox3 * This,
            /* [retval][out] */ IDAPoint3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Max )( 
            IDABbox3 * This,
            /* [retval][out] */ IDAPoint3 **ret_0);
        
        END_INTERFACE
    } IDABbox3Vtbl;

    interface IDABbox3
    {
        CONST_VTBL struct IDABbox3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDABbox3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDABbox3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDABbox3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDABbox3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDABbox3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDABbox3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDABbox3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDABbox3_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDABbox3_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDABbox3_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDABbox3_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDABbox3_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDABbox3_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDABbox3_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDABbox3_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDABbox3_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDABbox3_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDABbox3_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDABbox3_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDABbox3_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDABbox3_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDABbox3_get_Min(This,ret_0)	\
    (This)->lpVtbl -> get_Min(This,ret_0)

#define IDABbox3_get_Max(This,ret_0)	\
    (This)->lpVtbl -> get_Max(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDABbox3_get_Min_Proxy( 
    IDABbox3 * This,
    /* [retval][out] */ IDAPoint3 **ret_0);


void __RPC_STUB IDABbox3_get_Min_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDABbox3_get_Max_Proxy( 
    IDABbox3 * This,
    /* [retval][out] */ IDAPoint3 **ret_0);


void __RPC_STUB IDABbox3_get_Max_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDABbox3_INTERFACE_DEFINED__ */


#ifndef __IDAPair_INTERFACE_DEFINED__
#define __IDAPair_INTERFACE_DEFINED__

/* interface IDAPair */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAPair;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BF3-3C52-11d0-9200-848C1D000000")
    IDAPair : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_First( 
            /* [retval][out] */ IDABehavior **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Second( 
            /* [retval][out] */ IDABehavior **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAPairVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAPair * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAPair * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAPair * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAPair * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAPair * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAPair * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAPair * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAPair * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAPair * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAPair * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAPair * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAPair * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAPair * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAPair * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAPair * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAPair * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAPair * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAPair * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAPair * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAPair * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAPair * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_First )( 
            IDAPair * This,
            /* [retval][out] */ IDABehavior **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Second )( 
            IDAPair * This,
            /* [retval][out] */ IDABehavior **ret_0);
        
        END_INTERFACE
    } IDAPairVtbl;

    interface IDAPair
    {
        CONST_VTBL struct IDAPairVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAPair_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAPair_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAPair_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAPair_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAPair_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAPair_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAPair_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAPair_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAPair_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAPair_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAPair_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAPair_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAPair_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAPair_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAPair_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAPair_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAPair_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAPair_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAPair_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAPair_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAPair_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAPair_get_First(This,ret_0)	\
    (This)->lpVtbl -> get_First(This,ret_0)

#define IDAPair_get_Second(This,ret_0)	\
    (This)->lpVtbl -> get_Second(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPair_get_First_Proxy( 
    IDAPair * This,
    /* [retval][out] */ IDABehavior **ret_0);


void __RPC_STUB IDAPair_get_First_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPair_get_Second_Proxy( 
    IDAPair * This,
    /* [retval][out] */ IDABehavior **ret_0);


void __RPC_STUB IDAPair_get_Second_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAPair_INTERFACE_DEFINED__ */


#ifndef __IDAArray_INTERFACE_DEFINED__
#define __IDAArray_INTERFACE_DEFINED__

/* interface IDAArray */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAArray;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D17506C2-6B26-11d0-8914-00C04FC2A0CA")
    IDAArray : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE NthAnim( 
            /* [in] */ IDANumber *index_0,
            /* [retval][out] */ IDABehavior **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Length( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAArrayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAArray * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAArray * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAArray * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAArray * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAArray * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAArray * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAArray * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAArray * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAArray * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAArray * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAArray * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAArray * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAArray * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAArray * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAArray * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAArray * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAArray * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAArray * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAArray * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAArray * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAArray * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *NthAnim )( 
            IDAArray * This,
            /* [in] */ IDANumber *index_0,
            /* [retval][out] */ IDABehavior **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Length )( 
            IDAArray * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        END_INTERFACE
    } IDAArrayVtbl;

    interface IDAArray
    {
        CONST_VTBL struct IDAArrayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAArray_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAArray_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAArray_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAArray_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAArray_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAArray_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAArray_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAArray_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAArray_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAArray_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAArray_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAArray_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAArray_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAArray_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAArray_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAArray_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAArray_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAArray_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAArray_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAArray_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAArray_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAArray_NthAnim(This,index_0,ret_1)	\
    (This)->lpVtbl -> NthAnim(This,index_0,ret_1)

#define IDAArray_Length(This,ret_0)	\
    (This)->lpVtbl -> Length(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAArray_NthAnim_Proxy( 
    IDAArray * This,
    /* [in] */ IDANumber *index_0,
    /* [retval][out] */ IDABehavior **ret_1);


void __RPC_STUB IDAArray_NthAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAArray_Length_Proxy( 
    IDAArray * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAArray_Length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAArray_INTERFACE_DEFINED__ */


#ifndef __IDATuple_INTERFACE_DEFINED__
#define __IDATuple_INTERFACE_DEFINED__

/* interface IDATuple */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDATuple;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5DFB2650-9668-11d0-B17B-00C04FC2A0CA")
    IDATuple : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Nth( 
            /* [in] */ long index_0,
            /* [retval][out] */ IDABehavior **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ long *ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDATupleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDATuple * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDATuple * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDATuple * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDATuple * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDATuple * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDATuple * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDATuple * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDATuple * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDATuple * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDATuple * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDATuple * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDATuple * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDATuple * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDATuple * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDATuple * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDATuple * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDATuple * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDATuple * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDATuple * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDATuple * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDATuple * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Nth )( 
            IDATuple * This,
            /* [in] */ long index_0,
            /* [retval][out] */ IDABehavior **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IDATuple * This,
            /* [retval][out] */ long *ret_0);
        
        END_INTERFACE
    } IDATupleVtbl;

    interface IDATuple
    {
        CONST_VTBL struct IDATupleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDATuple_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDATuple_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDATuple_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDATuple_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDATuple_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDATuple_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDATuple_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDATuple_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDATuple_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDATuple_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDATuple_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDATuple_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDATuple_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDATuple_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDATuple_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDATuple_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDATuple_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDATuple_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDATuple_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDATuple_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDATuple_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDATuple_Nth(This,index_0,ret_1)	\
    (This)->lpVtbl -> Nth(This,index_0,ret_1)

#define IDATuple_get_Length(This,ret_0)	\
    (This)->lpVtbl -> get_Length(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDATuple_Nth_Proxy( 
    IDATuple * This,
    /* [in] */ long index_0,
    /* [retval][out] */ IDABehavior **ret_1);


void __RPC_STUB IDATuple_Nth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDATuple_get_Length_Proxy( 
    IDATuple * This,
    /* [retval][out] */ long *ret_0);


void __RPC_STUB IDATuple_get_Length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDATuple_INTERFACE_DEFINED__ */


#ifndef __IDAUserData_INTERFACE_DEFINED__
#define __IDAUserData_INTERFACE_DEFINED__

/* interface IDAUserData */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAUserData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AF868305-AB0B-11d0-876A-00C04FC29D46")
    IDAUserData : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Data( 
            /* [retval][out] */ IUnknown **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAUserDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAUserData * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAUserData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAUserData * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAUserData * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAUserData * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAUserData * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAUserData * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAUserData * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAUserData * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAUserData * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAUserData * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAUserData * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAUserData * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAUserData * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAUserData * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAUserData * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAUserData * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAUserData * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAUserData * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAUserData * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAUserData * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Data )( 
            IDAUserData * This,
            /* [retval][out] */ IUnknown **ret_0);
        
        END_INTERFACE
    } IDAUserDataVtbl;

    interface IDAUserData
    {
        CONST_VTBL struct IDAUserDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAUserData_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAUserData_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAUserData_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAUserData_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAUserData_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAUserData_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAUserData_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAUserData_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAUserData_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAUserData_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAUserData_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAUserData_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAUserData_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAUserData_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAUserData_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAUserData_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAUserData_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAUserData_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAUserData_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAUserData_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAUserData_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAUserData_get_Data(This,ret_0)	\
    (This)->lpVtbl -> get_Data(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDAUserData_get_Data_Proxy( 
    IDAUserData * This,
    /* [retval][out] */ IUnknown **ret_0);


void __RPC_STUB IDAUserData_get_Data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAUserData_INTERFACE_DEFINED__ */


#ifndef __IDA2Geometry_INTERFACE_DEFINED__
#define __IDA2Geometry_INTERFACE_DEFINED__

/* interface IDA2Geometry */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2Geometry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B90E5258-574A-11d1-8E7B-00C04FC29D46")
    IDA2Geometry : public IDAGeometry
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddPickData( 
            /* [in] */ IUnknown *id_0,
            /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
            /* [retval][out] */ IDAGeometry **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Shadow( 
            /* [in] */ IDAGeometry *geoContainingLights_0,
            /* [in] */ IDAPoint3 *planePoint_1,
            /* [in] */ IDAVector3 *planeNormal_2,
            /* [retval][out] */ IDAGeometry **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LightRangeAnim( 
            /* [in] */ IDANumber *range_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LightRange( 
            /* [in] */ double range_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BlendTextureDiffuse( 
            /* [in] */ IDABoolean *blended_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AmbientColor( 
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE D3DRMTexture( 
            /* [in] */ IUnknown *rmTex_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ModelClip( 
            /* [in] */ IDAPoint3 *planePt_0,
            /* [in] */ IDAVector3 *planeVec_1,
            /* [retval][out] */ IDAGeometry **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Lighting( 
            /* [in] */ IDABoolean *lighting_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextureImage( 
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2GeometryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Geometry * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Geometry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Geometry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Geometry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Geometry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Geometry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Geometry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2Geometry * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2Geometry * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2Geometry * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2Geometry * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2Geometry * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2Geometry * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2Geometry * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2Geometry * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2Geometry * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2Geometry * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2Geometry * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2Geometry * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2Geometry * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2Geometry * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *RenderSound )( 
            IDA2Geometry * This,
            /* [in] */ IDAMicrophone *mic_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Pickable )( 
            IDA2Geometry * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *PickableOccluded )( 
            IDA2Geometry * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Undetectable )( 
            IDA2Geometry * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *EmissiveColor )( 
            IDA2Geometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DiffuseColor )( 
            IDA2Geometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularColor )( 
            IDA2Geometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularExponent )( 
            IDA2Geometry * This,
            /* [in] */ double power_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularExponentAnim )( 
            IDA2Geometry * This,
            /* [in] */ IDANumber *power_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Texture )( 
            IDA2Geometry * This,
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDA2Geometry * This,
            /* [in] */ double level_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDA2Geometry * This,
            /* [in] */ IDANumber *level_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDA2Geometry * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundingBox )( 
            IDA2Geometry * This,
            /* [retval][out] */ IDABbox3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDA2Geometry * This,
            /* [in] */ IDACamera *cam_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightColor )( 
            IDA2Geometry * This,
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightAttenuationAnim )( 
            IDA2Geometry * This,
            /* [in] */ IDANumber *constant_0,
            /* [in] */ IDANumber *linear_1,
            /* [in] */ IDANumber *quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *LightAttenuation )( 
            IDA2Geometry * This,
            /* [in] */ double constant_0,
            /* [in] */ double linear_1,
            /* [in] */ double quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *AddPickData )( 
            IDA2Geometry * This,
            /* [in] */ IUnknown *id_0,
            /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Shadow )( 
            IDA2Geometry * This,
            /* [in] */ IDAGeometry *geoContainingLights_0,
            /* [in] */ IDAPoint3 *planePoint_1,
            /* [in] */ IDAVector3 *planeNormal_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *LightRangeAnim )( 
            IDA2Geometry * This,
            /* [in] */ IDANumber *range_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightRange )( 
            IDA2Geometry * This,
            /* [in] */ double range_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *BlendTextureDiffuse )( 
            IDA2Geometry * This,
            /* [in] */ IDABoolean *blended_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AmbientColor )( 
            IDA2Geometry * This,
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *D3DRMTexture )( 
            IDA2Geometry * This,
            /* [in] */ IUnknown *rmTex_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ModelClip )( 
            IDA2Geometry * This,
            /* [in] */ IDAPoint3 *planePt_0,
            /* [in] */ IDAVector3 *planeVec_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Lighting )( 
            IDA2Geometry * This,
            /* [in] */ IDABoolean *lighting_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TextureImage )( 
            IDA2Geometry * This,
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        END_INTERFACE
    } IDA2GeometryVtbl;

    interface IDA2Geometry
    {
        CONST_VTBL struct IDA2GeometryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Geometry_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Geometry_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Geometry_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Geometry_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Geometry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Geometry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Geometry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Geometry_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2Geometry_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2Geometry_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2Geometry_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2Geometry_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2Geometry_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2Geometry_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2Geometry_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2Geometry_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2Geometry_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2Geometry_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2Geometry_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2Geometry_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2Geometry_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2Geometry_RenderSound(This,mic_0,ret_1)	\
    (This)->lpVtbl -> RenderSound(This,mic_0,ret_1)

#define IDA2Geometry_Pickable(This,ret_0)	\
    (This)->lpVtbl -> Pickable(This,ret_0)

#define IDA2Geometry_PickableOccluded(This,ret_0)	\
    (This)->lpVtbl -> PickableOccluded(This,ret_0)

#define IDA2Geometry_Undetectable(This,ret_0)	\
    (This)->lpVtbl -> Undetectable(This,ret_0)

#define IDA2Geometry_EmissiveColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> EmissiveColor(This,col_0,ret_1)

#define IDA2Geometry_DiffuseColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> DiffuseColor(This,col_0,ret_1)

#define IDA2Geometry_SpecularColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> SpecularColor(This,col_0,ret_1)

#define IDA2Geometry_SpecularExponent(This,power_0,ret_1)	\
    (This)->lpVtbl -> SpecularExponent(This,power_0,ret_1)

#define IDA2Geometry_SpecularExponentAnim(This,power_0,ret_1)	\
    (This)->lpVtbl -> SpecularExponentAnim(This,power_0,ret_1)

#define IDA2Geometry_Texture(This,texture_0,ret_1)	\
    (This)->lpVtbl -> Texture(This,texture_0,ret_1)

#define IDA2Geometry_Opacity(This,level_0,ret_1)	\
    (This)->lpVtbl -> Opacity(This,level_0,ret_1)

#define IDA2Geometry_OpacityAnim(This,level_0,ret_1)	\
    (This)->lpVtbl -> OpacityAnim(This,level_0,ret_1)

#define IDA2Geometry_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDA2Geometry_get_BoundingBox(This,ret_0)	\
    (This)->lpVtbl -> get_BoundingBox(This,ret_0)

#define IDA2Geometry_Render(This,cam_0,ret_1)	\
    (This)->lpVtbl -> Render(This,cam_0,ret_1)

#define IDA2Geometry_LightColor(This,color_0,ret_1)	\
    (This)->lpVtbl -> LightColor(This,color_0,ret_1)

#define IDA2Geometry_LightAttenuationAnim(This,constant_0,linear_1,quadratic_2,ret_3)	\
    (This)->lpVtbl -> LightAttenuationAnim(This,constant_0,linear_1,quadratic_2,ret_3)

#define IDA2Geometry_LightAttenuation(This,constant_0,linear_1,quadratic_2,ret_3)	\
    (This)->lpVtbl -> LightAttenuation(This,constant_0,linear_1,quadratic_2,ret_3)


#define IDA2Geometry_AddPickData(This,id_0,ignoresOcclusion_1,ret_2)	\
    (This)->lpVtbl -> AddPickData(This,id_0,ignoresOcclusion_1,ret_2)

#define IDA2Geometry_Shadow(This,geoContainingLights_0,planePoint_1,planeNormal_2,ret_3)	\
    (This)->lpVtbl -> Shadow(This,geoContainingLights_0,planePoint_1,planeNormal_2,ret_3)

#define IDA2Geometry_LightRangeAnim(This,range_0,ret_1)	\
    (This)->lpVtbl -> LightRangeAnim(This,range_0,ret_1)

#define IDA2Geometry_LightRange(This,range_0,ret_1)	\
    (This)->lpVtbl -> LightRange(This,range_0,ret_1)

#define IDA2Geometry_BlendTextureDiffuse(This,blended_0,ret_1)	\
    (This)->lpVtbl -> BlendTextureDiffuse(This,blended_0,ret_1)

#define IDA2Geometry_AmbientColor(This,color_0,ret_1)	\
    (This)->lpVtbl -> AmbientColor(This,color_0,ret_1)

#define IDA2Geometry_D3DRMTexture(This,rmTex_0,ret_1)	\
    (This)->lpVtbl -> D3DRMTexture(This,rmTex_0,ret_1)

#define IDA2Geometry_ModelClip(This,planePt_0,planeVec_1,ret_2)	\
    (This)->lpVtbl -> ModelClip(This,planePt_0,planeVec_1,ret_2)

#define IDA2Geometry_Lighting(This,lighting_0,ret_1)	\
    (This)->lpVtbl -> Lighting(This,lighting_0,ret_1)

#define IDA2Geometry_TextureImage(This,texture_0,ret_1)	\
    (This)->lpVtbl -> TextureImage(This,texture_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Geometry_AddPickData_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IUnknown *id_0,
    /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
    /* [retval][out] */ IDAGeometry **ret_2);


void __RPC_STUB IDA2Geometry_AddPickData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_Shadow_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDAGeometry *geoContainingLights_0,
    /* [in] */ IDAPoint3 *planePoint_1,
    /* [in] */ IDAVector3 *planeNormal_2,
    /* [retval][out] */ IDAGeometry **ret_3);


void __RPC_STUB IDA2Geometry_Shadow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_LightRangeAnim_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDANumber *range_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_LightRangeAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_LightRange_Proxy( 
    IDA2Geometry * This,
    /* [in] */ double range_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_LightRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_BlendTextureDiffuse_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDABoolean *blended_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_BlendTextureDiffuse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_AmbientColor_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDAColor *color_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_AmbientColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_D3DRMTexture_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IUnknown *rmTex_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_D3DRMTexture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_ModelClip_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDAPoint3 *planePt_0,
    /* [in] */ IDAVector3 *planeVec_1,
    /* [retval][out] */ IDAGeometry **ret_2);


void __RPC_STUB IDA2Geometry_ModelClip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_Lighting_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDABoolean *lighting_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_Lighting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_TextureImage_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDAImage *texture_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_TextureImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Geometry_INTERFACE_DEFINED__ */


#ifndef __IDA2Image_INTERFACE_DEFINED__
#define __IDA2Image_INTERFACE_DEFINED__

/* interface IDA2Image */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2Image;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B90E5259-574A-11d1-8E7B-00C04FC29D46")
    IDA2Image : public IDAImage
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddPickData( 
            /* [in] */ IUnknown *id_0,
            /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RenderResolution( 
            /* [in] */ long width_0,
            /* [in] */ long height_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImageQuality( 
            /* [in] */ DWORD dwQualityFlags_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ColorKey( 
            /* [in] */ IDAColor *colorKey_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2ImageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Image * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Image * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Image * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Image * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Image * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Image * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Image * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2Image * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2Image * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2Image * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2Image * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2Image * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2Image * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2Image * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2Image * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2Image * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2Image * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2Image * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2Image * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2Image * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2Image * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Pickable )( 
            IDA2Image * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *PickableOccluded )( 
            IDA2Image * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyBitmapEffect )( 
            IDA2Image * This,
            /* [in] */ IUnknown *effectToApply_0,
            /* [in] */ IDAEvent *firesWhenChanged_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundingBox )( 
            IDA2Image * This,
            /* [retval][out] */ IDABbox2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Crop )( 
            IDA2Image * This,
            /* [in] */ IDAPoint2 *min_0,
            /* [in] */ IDAPoint2 *max_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDA2Image * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDA2Image * This,
            /* [in] */ IDANumber *opacity_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDA2Image * This,
            /* [in] */ double opacity_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Undetectable )( 
            IDA2Image * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Tile )( 
            IDA2Image * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Clip )( 
            IDA2Image * This,
            /* [in] */ IDAMatte *m_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MapToUnitSquare )( 
            IDA2Image * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ClipPolygonImageEx )( 
            IDA2Image * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ClipPolygonImage )( 
            IDA2Image * This,
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AddPickData )( 
            IDA2Image * This,
            /* [in] */ IUnknown *id_0,
            /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RenderResolution )( 
            IDA2Image * This,
            /* [in] */ long width_0,
            /* [in] */ long height_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ImageQuality )( 
            IDA2Image * This,
            /* [in] */ DWORD dwQualityFlags_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ColorKey )( 
            IDA2Image * This,
            /* [in] */ IDAColor *colorKey_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        END_INTERFACE
    } IDA2ImageVtbl;

    interface IDA2Image
    {
        CONST_VTBL struct IDA2ImageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Image_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Image_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Image_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Image_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Image_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Image_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Image_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Image_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2Image_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2Image_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2Image_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2Image_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2Image_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2Image_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2Image_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2Image_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2Image_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2Image_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2Image_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2Image_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2Image_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2Image_Pickable(This,ret_0)	\
    (This)->lpVtbl -> Pickable(This,ret_0)

#define IDA2Image_PickableOccluded(This,ret_0)	\
    (This)->lpVtbl -> PickableOccluded(This,ret_0)

#define IDA2Image_ApplyBitmapEffect(This,effectToApply_0,firesWhenChanged_1,ret_2)	\
    (This)->lpVtbl -> ApplyBitmapEffect(This,effectToApply_0,firesWhenChanged_1,ret_2)

#define IDA2Image_get_BoundingBox(This,ret_0)	\
    (This)->lpVtbl -> get_BoundingBox(This,ret_0)

#define IDA2Image_Crop(This,min_0,max_1,ret_2)	\
    (This)->lpVtbl -> Crop(This,min_0,max_1,ret_2)

#define IDA2Image_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDA2Image_OpacityAnim(This,opacity_0,ret_1)	\
    (This)->lpVtbl -> OpacityAnim(This,opacity_0,ret_1)

#define IDA2Image_Opacity(This,opacity_0,ret_1)	\
    (This)->lpVtbl -> Opacity(This,opacity_0,ret_1)

#define IDA2Image_Undetectable(This,ret_0)	\
    (This)->lpVtbl -> Undetectable(This,ret_0)

#define IDA2Image_Tile(This,ret_0)	\
    (This)->lpVtbl -> Tile(This,ret_0)

#define IDA2Image_Clip(This,m_0,ret_1)	\
    (This)->lpVtbl -> Clip(This,m_0,ret_1)

#define IDA2Image_MapToUnitSquare(This,ret_0)	\
    (This)->lpVtbl -> MapToUnitSquare(This,ret_0)

#define IDA2Image_ClipPolygonImageEx(This,points_0size,points_0,ret_1)	\
    (This)->lpVtbl -> ClipPolygonImageEx(This,points_0size,points_0,ret_1)

#define IDA2Image_ClipPolygonImage(This,points_0,ret_1)	\
    (This)->lpVtbl -> ClipPolygonImage(This,points_0,ret_1)


#define IDA2Image_AddPickData(This,id_0,ignoresOcclusion_1,ret_2)	\
    (This)->lpVtbl -> AddPickData(This,id_0,ignoresOcclusion_1,ret_2)

#define IDA2Image_RenderResolution(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> RenderResolution(This,width_0,height_1,ret_2)

#define IDA2Image_ImageQuality(This,dwQualityFlags_0,ret_1)	\
    (This)->lpVtbl -> ImageQuality(This,dwQualityFlags_0,ret_1)

#define IDA2Image_ColorKey(This,colorKey_0,ret_1)	\
    (This)->lpVtbl -> ColorKey(This,colorKey_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Image_AddPickData_Proxy( 
    IDA2Image * This,
    /* [in] */ IUnknown *id_0,
    /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDA2Image_AddPickData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Image_RenderResolution_Proxy( 
    IDA2Image * This,
    /* [in] */ long width_0,
    /* [in] */ long height_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDA2Image_RenderResolution_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Image_ImageQuality_Proxy( 
    IDA2Image * This,
    /* [in] */ DWORD dwQualityFlags_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDA2Image_ImageQuality_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Image_ColorKey_Proxy( 
    IDA2Image * This,
    /* [in] */ IDAColor *colorKey_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDA2Image_ColorKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Image_INTERFACE_DEFINED__ */


#ifndef __IDA2FontStyle_INTERFACE_DEFINED__
#define __IDA2FontStyle_INTERFACE_DEFINED__

/* interface IDA2FontStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2FontStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("960D8EFF-E494-11d1-AB75-00C04FD92B6B")
    IDA2FontStyle : public IDAFontStyle
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE TransformCharacters( 
            /* [in] */ IDATransform2 *transform_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2FontStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2FontStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2FontStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2FontStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2FontStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2FontStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2FontStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2FontStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2FontStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2FontStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2FontStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2FontStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2FontStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2FontStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2FontStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2FontStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2FontStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2FontStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2FontStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2FontStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2FontStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2FontStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Bold )( 
            IDA2FontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Italic )( 
            IDA2FontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Underline )( 
            IDA2FontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Strikethrough )( 
            IDA2FontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AntiAliasing )( 
            IDA2FontStyle * This,
            /* [in] */ double aaStyle_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Color )( 
            IDA2FontStyle * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *FamilyAnim )( 
            IDA2FontStyle * This,
            /* [in] */ IDAString *face_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Family )( 
            IDA2FontStyle * This,
            /* [in] */ BSTR face_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SizeAnim )( 
            IDA2FontStyle * This,
            /* [in] */ IDANumber *size_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Size )( 
            IDA2FontStyle * This,
            /* [in] */ double size_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Weight )( 
            IDA2FontStyle * This,
            /* [in] */ double weight_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *WeightAnim )( 
            IDA2FontStyle * This,
            /* [in] */ IDANumber *weight_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TransformCharacters )( 
            IDA2FontStyle * This,
            /* [in] */ IDATransform2 *transform_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        END_INTERFACE
    } IDA2FontStyleVtbl;

    interface IDA2FontStyle
    {
        CONST_VTBL struct IDA2FontStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2FontStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2FontStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2FontStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2FontStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2FontStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2FontStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2FontStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2FontStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2FontStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2FontStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2FontStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2FontStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2FontStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2FontStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2FontStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2FontStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2FontStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2FontStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2FontStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2FontStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2FontStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2FontStyle_Bold(This,ret_0)	\
    (This)->lpVtbl -> Bold(This,ret_0)

#define IDA2FontStyle_Italic(This,ret_0)	\
    (This)->lpVtbl -> Italic(This,ret_0)

#define IDA2FontStyle_Underline(This,ret_0)	\
    (This)->lpVtbl -> Underline(This,ret_0)

#define IDA2FontStyle_Strikethrough(This,ret_0)	\
    (This)->lpVtbl -> Strikethrough(This,ret_0)

#define IDA2FontStyle_AntiAliasing(This,aaStyle_0,ret_1)	\
    (This)->lpVtbl -> AntiAliasing(This,aaStyle_0,ret_1)

#define IDA2FontStyle_Color(This,col_0,ret_1)	\
    (This)->lpVtbl -> Color(This,col_0,ret_1)

#define IDA2FontStyle_FamilyAnim(This,face_0,ret_1)	\
    (This)->lpVtbl -> FamilyAnim(This,face_0,ret_1)

#define IDA2FontStyle_Family(This,face_0,ret_1)	\
    (This)->lpVtbl -> Family(This,face_0,ret_1)

#define IDA2FontStyle_SizeAnim(This,size_0,ret_1)	\
    (This)->lpVtbl -> SizeAnim(This,size_0,ret_1)

#define IDA2FontStyle_Size(This,size_0,ret_1)	\
    (This)->lpVtbl -> Size(This,size_0,ret_1)

#define IDA2FontStyle_Weight(This,weight_0,ret_1)	\
    (This)->lpVtbl -> Weight(This,weight_0,ret_1)

#define IDA2FontStyle_WeightAnim(This,weight_0,ret_1)	\
    (This)->lpVtbl -> WeightAnim(This,weight_0,ret_1)


#define IDA2FontStyle_TransformCharacters(This,transform_0,ret_1)	\
    (This)->lpVtbl -> TransformCharacters(This,transform_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2FontStyle_TransformCharacters_Proxy( 
    IDA2FontStyle * This,
    /* [in] */ IDATransform2 *transform_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDA2FontStyle_TransformCharacters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2FontStyle_INTERFACE_DEFINED__ */


#ifndef __IDA2LineStyle_INTERFACE_DEFINED__
#define __IDA2LineStyle_INTERFACE_DEFINED__

/* interface IDA2LineStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2LineStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5F00F545-DF18-11d1-AB6F-00C04FD92B6B")
    IDA2LineStyle : public IDALineStyle
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE DashStyle( 
            /* [in] */ DWORD ds_enum_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MiterLimit( 
            /* [in] */ double mtrlim_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MiterLimitAnim( 
            /* [in] */ IDANumber *mtrlim_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE JoinStyle( 
            /* [in] */ DWORD js_enum_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndStyle( 
            /* [in] */ DWORD es_enum_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2LineStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2LineStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2LineStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2LineStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2LineStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2LineStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2LineStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2LineStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2LineStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2LineStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2LineStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2LineStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2LineStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2LineStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2LineStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2LineStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2LineStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2LineStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2LineStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2LineStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2LineStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2LineStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *End )( 
            IDA2LineStyle * This,
            /* [in] */ IDAEndStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1);
        
        HRESULT ( STDMETHODCALLTYPE *Join )( 
            IDA2LineStyle * This,
            /* [in] */ IDAJoinStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1);
        
        HRESULT ( STDMETHODCALLTYPE *Dash )( 
            IDA2LineStyle * This,
            /* [in] */ IDADashStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1);
        
        HRESULT ( STDMETHODCALLTYPE *WidthAnim )( 
            IDA2LineStyle * This,
            /* [in] */ IDANumber *sty_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *width )( 
            IDA2LineStyle * This,
            /* [in] */ double sty_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AntiAliasing )( 
            IDA2LineStyle * This,
            /* [in] */ double aaStyle_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Detail )( 
            IDA2LineStyle * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Color )( 
            IDA2LineStyle * This,
            /* [in] */ IDAColor *clr_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DashStyle )( 
            IDA2LineStyle * This,
            /* [in] */ DWORD ds_enum_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MiterLimit )( 
            IDA2LineStyle * This,
            /* [in] */ double mtrlim_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MiterLimitAnim )( 
            IDA2LineStyle * This,
            /* [in] */ IDANumber *mtrlim_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *JoinStyle )( 
            IDA2LineStyle * This,
            /* [in] */ DWORD js_enum_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *EndStyle )( 
            IDA2LineStyle * This,
            /* [in] */ DWORD es_enum_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        END_INTERFACE
    } IDA2LineStyleVtbl;

    interface IDA2LineStyle
    {
        CONST_VTBL struct IDA2LineStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2LineStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2LineStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2LineStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2LineStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2LineStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2LineStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2LineStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2LineStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2LineStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2LineStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2LineStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2LineStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2LineStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2LineStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2LineStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2LineStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2LineStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2LineStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2LineStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2LineStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2LineStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2LineStyle_End(This,obsolete_0,obsolete_1)	\
    (This)->lpVtbl -> End(This,obsolete_0,obsolete_1)

#define IDA2LineStyle_Join(This,obsolete_0,obsolete_1)	\
    (This)->lpVtbl -> Join(This,obsolete_0,obsolete_1)

#define IDA2LineStyle_Dash(This,obsolete_0,obsolete_1)	\
    (This)->lpVtbl -> Dash(This,obsolete_0,obsolete_1)

#define IDA2LineStyle_WidthAnim(This,sty_0,ret_1)	\
    (This)->lpVtbl -> WidthAnim(This,sty_0,ret_1)

#define IDA2LineStyle_width(This,sty_0,ret_1)	\
    (This)->lpVtbl -> width(This,sty_0,ret_1)

#define IDA2LineStyle_AntiAliasing(This,aaStyle_0,ret_1)	\
    (This)->lpVtbl -> AntiAliasing(This,aaStyle_0,ret_1)

#define IDA2LineStyle_Detail(This,ret_0)	\
    (This)->lpVtbl -> Detail(This,ret_0)

#define IDA2LineStyle_Color(This,clr_0,ret_1)	\
    (This)->lpVtbl -> Color(This,clr_0,ret_1)


#define IDA2LineStyle_DashStyle(This,ds_enum_0,ret_1)	\
    (This)->lpVtbl -> DashStyle(This,ds_enum_0,ret_1)

#define IDA2LineStyle_MiterLimit(This,mtrlim_0,ret_1)	\
    (This)->lpVtbl -> MiterLimit(This,mtrlim_0,ret_1)

#define IDA2LineStyle_MiterLimitAnim(This,mtrlim_0,ret_1)	\
    (This)->lpVtbl -> MiterLimitAnim(This,mtrlim_0,ret_1)

#define IDA2LineStyle_JoinStyle(This,js_enum_0,ret_1)	\
    (This)->lpVtbl -> JoinStyle(This,js_enum_0,ret_1)

#define IDA2LineStyle_EndStyle(This,es_enum_0,ret_1)	\
    (This)->lpVtbl -> EndStyle(This,es_enum_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2LineStyle_DashStyle_Proxy( 
    IDA2LineStyle * This,
    /* [in] */ DWORD ds_enum_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDA2LineStyle_DashStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2LineStyle_MiterLimit_Proxy( 
    IDA2LineStyle * This,
    /* [in] */ double mtrlim_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDA2LineStyle_MiterLimit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2LineStyle_MiterLimitAnim_Proxy( 
    IDA2LineStyle * This,
    /* [in] */ IDANumber *mtrlim_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDA2LineStyle_MiterLimitAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2LineStyle_JoinStyle_Proxy( 
    IDA2LineStyle * This,
    /* [in] */ DWORD js_enum_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDA2LineStyle_JoinStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2LineStyle_EndStyle_Proxy( 
    IDA2LineStyle * This,
    /* [in] */ DWORD es_enum_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDA2LineStyle_EndStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2LineStyle_INTERFACE_DEFINED__ */


#ifndef __IDA2Event_INTERFACE_DEFINED__
#define __IDA2Event_INTERFACE_DEFINED__

/* interface IDA2Event */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2Event;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B90E525A-574A-11d1-8E7B-00C04FC29D46")
    IDA2Event : public IDAEvent
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE NotifyScript( 
            /* [in] */ BSTR scriptlet_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2EventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Event * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Event * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Event * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Event * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Event * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Event * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Event * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2Event * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2Event * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2Event * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2Event * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2Event * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2Event * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2Event * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2Event * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2Event * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2Event * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2Event * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2Event * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2Event * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2Event * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Notify )( 
            IDA2Event * This,
            /* [in] */ IDAUntilNotifier *notifier_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Snapshot )( 
            IDA2Event * This,
            /* [in] */ IDABehavior *b_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AttachData )( 
            IDA2Event * This,
            /* [in] */ IDABehavior *data_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ScriptCallback )( 
            IDA2Event * This,
            /* [in] */ BSTR scriptlet_0,
            /* [in] */ BSTR language_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyScript )( 
            IDA2Event * This,
            /* [in] */ BSTR scriptlet_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        END_INTERFACE
    } IDA2EventVtbl;

    interface IDA2Event
    {
        CONST_VTBL struct IDA2EventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Event_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Event_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Event_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Event_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Event_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Event_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Event_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Event_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2Event_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2Event_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2Event_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2Event_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2Event_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2Event_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2Event_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2Event_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2Event_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2Event_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2Event_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2Event_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2Event_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2Event_Notify(This,notifier_0,ret_1)	\
    (This)->lpVtbl -> Notify(This,notifier_0,ret_1)

#define IDA2Event_Snapshot(This,b_0,ret_1)	\
    (This)->lpVtbl -> Snapshot(This,b_0,ret_1)

#define IDA2Event_AttachData(This,data_0,ret_1)	\
    (This)->lpVtbl -> AttachData(This,data_0,ret_1)

#define IDA2Event_ScriptCallback(This,scriptlet_0,language_1,ret_2)	\
    (This)->lpVtbl -> ScriptCallback(This,scriptlet_0,language_1,ret_2)


#define IDA2Event_NotifyScript(This,scriptlet_0,ret_1)	\
    (This)->lpVtbl -> NotifyScript(This,scriptlet_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Event_NotifyScript_Proxy( 
    IDA2Event * This,
    /* [in] */ BSTR scriptlet_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDA2Event_NotifyScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Event_INTERFACE_DEFINED__ */


#ifndef __IDA2Array_INTERFACE_DEFINED__
#define __IDA2Array_INTERFACE_DEFINED__

/* interface IDA2Array */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2Array;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2A8F0B06-BE2B-11d1-B219-00C04FC2A0CA")
    IDA2Array : public IDAArray
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddElement( 
            /* [in] */ IDABehavior *b_0,
            /* [in] */ DWORD flag_1,
            /* [retval][out] */ long *ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveElement( 
            /* [in] */ long i_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2ArrayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Array * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Array * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Array * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Array * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Array * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Array * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Array * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2Array * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2Array * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2Array * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2Array * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2Array * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2Array * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2Array * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2Array * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2Array * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2Array * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2Array * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2Array * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2Array * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2Array * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *NthAnim )( 
            IDA2Array * This,
            /* [in] */ IDANumber *index_0,
            /* [retval][out] */ IDABehavior **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Length )( 
            IDA2Array * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AddElement )( 
            IDA2Array * This,
            /* [in] */ IDABehavior *b_0,
            /* [in] */ DWORD flag_1,
            /* [retval][out] */ long *ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveElement )( 
            IDA2Array * This,
            /* [in] */ long i_0);
        
        END_INTERFACE
    } IDA2ArrayVtbl;

    interface IDA2Array
    {
        CONST_VTBL struct IDA2ArrayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Array_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Array_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Array_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Array_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Array_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Array_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Array_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Array_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2Array_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2Array_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2Array_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2Array_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2Array_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2Array_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2Array_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2Array_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2Array_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2Array_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2Array_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2Array_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2Array_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2Array_NthAnim(This,index_0,ret_1)	\
    (This)->lpVtbl -> NthAnim(This,index_0,ret_1)

#define IDA2Array_Length(This,ret_0)	\
    (This)->lpVtbl -> Length(This,ret_0)


#define IDA2Array_AddElement(This,b_0,flag_1,ret_2)	\
    (This)->lpVtbl -> AddElement(This,b_0,flag_1,ret_2)

#define IDA2Array_RemoveElement(This,i_0)	\
    (This)->lpVtbl -> RemoveElement(This,i_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Array_AddElement_Proxy( 
    IDA2Array * This,
    /* [in] */ IDABehavior *b_0,
    /* [in] */ DWORD flag_1,
    /* [retval][out] */ long *ret_2);


void __RPC_STUB IDA2Array_AddElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Array_RemoveElement_Proxy( 
    IDA2Array * This,
    /* [in] */ long i_0);


void __RPC_STUB IDA2Array_RemoveElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Array_INTERFACE_DEFINED__ */


#ifndef __IDA2Color_INTERFACE_DEFINED__
#define __IDA2Color_INTERFACE_DEFINED__

/* interface IDA2Color */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2Color;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("28A4B924-61FE-11d2-A740-00C04F79754C")
    IDA2Color : public IDAColor
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AnimateProperty( 
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDA2Color **ret_4) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2ColorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Color * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Color * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Color * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Color * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Color * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Color * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Color * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2Color * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2Color * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2Color * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2Color * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2Color * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2Color * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2Color * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2Color * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2Color * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2Color * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2Color * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2Color * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2Color * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2Color * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Red )( 
            IDA2Color * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Green )( 
            IDA2Color * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blue )( 
            IDA2Color * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Hue )( 
            IDA2Color * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Saturation )( 
            IDA2Color * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lightness )( 
            IDA2Color * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AnimateProperty )( 
            IDA2Color * This,
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDA2Color **ret_4);
        
        END_INTERFACE
    } IDA2ColorVtbl;

    interface IDA2Color
    {
        CONST_VTBL struct IDA2ColorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Color_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Color_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Color_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Color_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Color_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Color_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Color_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Color_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2Color_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2Color_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2Color_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2Color_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2Color_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2Color_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2Color_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2Color_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2Color_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2Color_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2Color_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2Color_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2Color_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2Color_get_Red(This,ret_0)	\
    (This)->lpVtbl -> get_Red(This,ret_0)

#define IDA2Color_get_Green(This,ret_0)	\
    (This)->lpVtbl -> get_Green(This,ret_0)

#define IDA2Color_get_Blue(This,ret_0)	\
    (This)->lpVtbl -> get_Blue(This,ret_0)

#define IDA2Color_get_Hue(This,ret_0)	\
    (This)->lpVtbl -> get_Hue(This,ret_0)

#define IDA2Color_get_Saturation(This,ret_0)	\
    (This)->lpVtbl -> get_Saturation(This,ret_0)

#define IDA2Color_get_Lightness(This,ret_0)	\
    (This)->lpVtbl -> get_Lightness(This,ret_0)


#define IDA2Color_AnimateProperty(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)	\
    (This)->lpVtbl -> AnimateProperty(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Color_AnimateProperty_Proxy( 
    IDA2Color * This,
    /* [in] */ BSTR propertyPath_0,
    /* [in] */ BSTR scriptingLanguage_1,
    /* [in] */ VARIANT_BOOL invokeAsMethod_2,
    /* [in] */ double minUpdateInterval_3,
    /* [retval][out] */ IDA2Color **ret_4);


void __RPC_STUB IDA2Color_AnimateProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Color_INTERFACE_DEFINED__ */


#ifndef __IDA3Geometry_INTERFACE_DEFINED__
#define __IDA3Geometry_INTERFACE_DEFINED__

/* interface IDA3Geometry */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA3Geometry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EB5093C7-56F9-11d2-88CE-00C04FA35859")
    IDA3Geometry : public IDA2Geometry
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Billboard( 
            /* [in] */ IDAVector3 *axis_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA3GeometryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA3Geometry * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA3Geometry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA3Geometry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA3Geometry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA3Geometry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA3Geometry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA3Geometry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA3Geometry * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA3Geometry * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA3Geometry * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA3Geometry * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA3Geometry * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA3Geometry * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA3Geometry * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA3Geometry * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA3Geometry * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA3Geometry * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA3Geometry * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA3Geometry * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA3Geometry * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA3Geometry * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *RenderSound )( 
            IDA3Geometry * This,
            /* [in] */ IDAMicrophone *mic_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Pickable )( 
            IDA3Geometry * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *PickableOccluded )( 
            IDA3Geometry * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Undetectable )( 
            IDA3Geometry * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *EmissiveColor )( 
            IDA3Geometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DiffuseColor )( 
            IDA3Geometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularColor )( 
            IDA3Geometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularExponent )( 
            IDA3Geometry * This,
            /* [in] */ double power_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularExponentAnim )( 
            IDA3Geometry * This,
            /* [in] */ IDANumber *power_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Texture )( 
            IDA3Geometry * This,
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDA3Geometry * This,
            /* [in] */ double level_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDA3Geometry * This,
            /* [in] */ IDANumber *level_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDA3Geometry * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundingBox )( 
            IDA3Geometry * This,
            /* [retval][out] */ IDABbox3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDA3Geometry * This,
            /* [in] */ IDACamera *cam_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightColor )( 
            IDA3Geometry * This,
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightAttenuationAnim )( 
            IDA3Geometry * This,
            /* [in] */ IDANumber *constant_0,
            /* [in] */ IDANumber *linear_1,
            /* [in] */ IDANumber *quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *LightAttenuation )( 
            IDA3Geometry * This,
            /* [in] */ double constant_0,
            /* [in] */ double linear_1,
            /* [in] */ double quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *AddPickData )( 
            IDA3Geometry * This,
            /* [in] */ IUnknown *id_0,
            /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Shadow )( 
            IDA3Geometry * This,
            /* [in] */ IDAGeometry *geoContainingLights_0,
            /* [in] */ IDAPoint3 *planePoint_1,
            /* [in] */ IDAVector3 *planeNormal_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *LightRangeAnim )( 
            IDA3Geometry * This,
            /* [in] */ IDANumber *range_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightRange )( 
            IDA3Geometry * This,
            /* [in] */ double range_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *BlendTextureDiffuse )( 
            IDA3Geometry * This,
            /* [in] */ IDABoolean *blended_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AmbientColor )( 
            IDA3Geometry * This,
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *D3DRMTexture )( 
            IDA3Geometry * This,
            /* [in] */ IUnknown *rmTex_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ModelClip )( 
            IDA3Geometry * This,
            /* [in] */ IDAPoint3 *planePt_0,
            /* [in] */ IDAVector3 *planeVec_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Lighting )( 
            IDA3Geometry * This,
            /* [in] */ IDABoolean *lighting_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TextureImage )( 
            IDA3Geometry * This,
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Billboard )( 
            IDA3Geometry * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        END_INTERFACE
    } IDA3GeometryVtbl;

    interface IDA3Geometry
    {
        CONST_VTBL struct IDA3GeometryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA3Geometry_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA3Geometry_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA3Geometry_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA3Geometry_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA3Geometry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA3Geometry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA3Geometry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA3Geometry_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA3Geometry_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA3Geometry_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA3Geometry_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA3Geometry_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA3Geometry_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA3Geometry_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA3Geometry_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA3Geometry_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA3Geometry_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA3Geometry_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA3Geometry_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA3Geometry_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA3Geometry_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA3Geometry_RenderSound(This,mic_0,ret_1)	\
    (This)->lpVtbl -> RenderSound(This,mic_0,ret_1)

#define IDA3Geometry_Pickable(This,ret_0)	\
    (This)->lpVtbl -> Pickable(This,ret_0)

#define IDA3Geometry_PickableOccluded(This,ret_0)	\
    (This)->lpVtbl -> PickableOccluded(This,ret_0)

#define IDA3Geometry_Undetectable(This,ret_0)	\
    (This)->lpVtbl -> Undetectable(This,ret_0)

#define IDA3Geometry_EmissiveColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> EmissiveColor(This,col_0,ret_1)

#define IDA3Geometry_DiffuseColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> DiffuseColor(This,col_0,ret_1)

#define IDA3Geometry_SpecularColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> SpecularColor(This,col_0,ret_1)

#define IDA3Geometry_SpecularExponent(This,power_0,ret_1)	\
    (This)->lpVtbl -> SpecularExponent(This,power_0,ret_1)

#define IDA3Geometry_SpecularExponentAnim(This,power_0,ret_1)	\
    (This)->lpVtbl -> SpecularExponentAnim(This,power_0,ret_1)

#define IDA3Geometry_Texture(This,texture_0,ret_1)	\
    (This)->lpVtbl -> Texture(This,texture_0,ret_1)

#define IDA3Geometry_Opacity(This,level_0,ret_1)	\
    (This)->lpVtbl -> Opacity(This,level_0,ret_1)

#define IDA3Geometry_OpacityAnim(This,level_0,ret_1)	\
    (This)->lpVtbl -> OpacityAnim(This,level_0,ret_1)

#define IDA3Geometry_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDA3Geometry_get_BoundingBox(This,ret_0)	\
    (This)->lpVtbl -> get_BoundingBox(This,ret_0)

#define IDA3Geometry_Render(This,cam_0,ret_1)	\
    (This)->lpVtbl -> Render(This,cam_0,ret_1)

#define IDA3Geometry_LightColor(This,color_0,ret_1)	\
    (This)->lpVtbl -> LightColor(This,color_0,ret_1)

#define IDA3Geometry_LightAttenuationAnim(This,constant_0,linear_1,quadratic_2,ret_3)	\
    (This)->lpVtbl -> LightAttenuationAnim(This,constant_0,linear_1,quadratic_2,ret_3)

#define IDA3Geometry_LightAttenuation(This,constant_0,linear_1,quadratic_2,ret_3)	\
    (This)->lpVtbl -> LightAttenuation(This,constant_0,linear_1,quadratic_2,ret_3)


#define IDA3Geometry_AddPickData(This,id_0,ignoresOcclusion_1,ret_2)	\
    (This)->lpVtbl -> AddPickData(This,id_0,ignoresOcclusion_1,ret_2)

#define IDA3Geometry_Shadow(This,geoContainingLights_0,planePoint_1,planeNormal_2,ret_3)	\
    (This)->lpVtbl -> Shadow(This,geoContainingLights_0,planePoint_1,planeNormal_2,ret_3)

#define IDA3Geometry_LightRangeAnim(This,range_0,ret_1)	\
    (This)->lpVtbl -> LightRangeAnim(This,range_0,ret_1)

#define IDA3Geometry_LightRange(This,range_0,ret_1)	\
    (This)->lpVtbl -> LightRange(This,range_0,ret_1)

#define IDA3Geometry_BlendTextureDiffuse(This,blended_0,ret_1)	\
    (This)->lpVtbl -> BlendTextureDiffuse(This,blended_0,ret_1)

#define IDA3Geometry_AmbientColor(This,color_0,ret_1)	\
    (This)->lpVtbl -> AmbientColor(This,color_0,ret_1)

#define IDA3Geometry_D3DRMTexture(This,rmTex_0,ret_1)	\
    (This)->lpVtbl -> D3DRMTexture(This,rmTex_0,ret_1)

#define IDA3Geometry_ModelClip(This,planePt_0,planeVec_1,ret_2)	\
    (This)->lpVtbl -> ModelClip(This,planePt_0,planeVec_1,ret_2)

#define IDA3Geometry_Lighting(This,lighting_0,ret_1)	\
    (This)->lpVtbl -> Lighting(This,lighting_0,ret_1)

#define IDA3Geometry_TextureImage(This,texture_0,ret_1)	\
    (This)->lpVtbl -> TextureImage(This,texture_0,ret_1)


#define IDA3Geometry_Billboard(This,axis_0,ret_1)	\
    (This)->lpVtbl -> Billboard(This,axis_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA3Geometry_Billboard_Proxy( 
    IDA3Geometry * This,
    /* [in] */ IDAVector3 *axis_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA3Geometry_Billboard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA3Geometry_INTERFACE_DEFINED__ */


#ifndef __IDA3Image_INTERFACE_DEFINED__
#define __IDA3Image_INTERFACE_DEFINED__

/* interface IDA3Image */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA3Image;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AD083DBB-5817-11d2-ABA1-00C04FD92B6B")
    IDA3Image : public IDA2Image
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE TransformColorRGB( 
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA3ImageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA3Image * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA3Image * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA3Image * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA3Image * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA3Image * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA3Image * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA3Image * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA3Image * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA3Image * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA3Image * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA3Image * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA3Image * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA3Image * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA3Image * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA3Image * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA3Image * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA3Image * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA3Image * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA3Image * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA3Image * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA3Image * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Pickable )( 
            IDA3Image * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *PickableOccluded )( 
            IDA3Image * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyBitmapEffect )( 
            IDA3Image * This,
            /* [in] */ IUnknown *effectToApply_0,
            /* [in] */ IDAEvent *firesWhenChanged_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundingBox )( 
            IDA3Image * This,
            /* [retval][out] */ IDABbox2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Crop )( 
            IDA3Image * This,
            /* [in] */ IDAPoint2 *min_0,
            /* [in] */ IDAPoint2 *max_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDA3Image * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDA3Image * This,
            /* [in] */ IDANumber *opacity_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDA3Image * This,
            /* [in] */ double opacity_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Undetectable )( 
            IDA3Image * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Tile )( 
            IDA3Image * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Clip )( 
            IDA3Image * This,
            /* [in] */ IDAMatte *m_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MapToUnitSquare )( 
            IDA3Image * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ClipPolygonImageEx )( 
            IDA3Image * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ClipPolygonImage )( 
            IDA3Image * This,
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AddPickData )( 
            IDA3Image * This,
            /* [in] */ IUnknown *id_0,
            /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RenderResolution )( 
            IDA3Image * This,
            /* [in] */ long width_0,
            /* [in] */ long height_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ImageQuality )( 
            IDA3Image * This,
            /* [in] */ DWORD dwQualityFlags_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ColorKey )( 
            IDA3Image * This,
            /* [in] */ IDAColor *colorKey_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TransformColorRGB )( 
            IDA3Image * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        END_INTERFACE
    } IDA3ImageVtbl;

    interface IDA3Image
    {
        CONST_VTBL struct IDA3ImageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA3Image_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA3Image_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA3Image_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA3Image_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA3Image_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA3Image_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA3Image_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA3Image_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA3Image_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA3Image_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA3Image_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA3Image_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA3Image_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA3Image_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA3Image_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA3Image_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA3Image_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA3Image_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA3Image_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA3Image_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA3Image_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA3Image_Pickable(This,ret_0)	\
    (This)->lpVtbl -> Pickable(This,ret_0)

#define IDA3Image_PickableOccluded(This,ret_0)	\
    (This)->lpVtbl -> PickableOccluded(This,ret_0)

#define IDA3Image_ApplyBitmapEffect(This,effectToApply_0,firesWhenChanged_1,ret_2)	\
    (This)->lpVtbl -> ApplyBitmapEffect(This,effectToApply_0,firesWhenChanged_1,ret_2)

#define IDA3Image_get_BoundingBox(This,ret_0)	\
    (This)->lpVtbl -> get_BoundingBox(This,ret_0)

#define IDA3Image_Crop(This,min_0,max_1,ret_2)	\
    (This)->lpVtbl -> Crop(This,min_0,max_1,ret_2)

#define IDA3Image_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDA3Image_OpacityAnim(This,opacity_0,ret_1)	\
    (This)->lpVtbl -> OpacityAnim(This,opacity_0,ret_1)

#define IDA3Image_Opacity(This,opacity_0,ret_1)	\
    (This)->lpVtbl -> Opacity(This,opacity_0,ret_1)

#define IDA3Image_Undetectable(This,ret_0)	\
    (This)->lpVtbl -> Undetectable(This,ret_0)

#define IDA3Image_Tile(This,ret_0)	\
    (This)->lpVtbl -> Tile(This,ret_0)

#define IDA3Image_Clip(This,m_0,ret_1)	\
    (This)->lpVtbl -> Clip(This,m_0,ret_1)

#define IDA3Image_MapToUnitSquare(This,ret_0)	\
    (This)->lpVtbl -> MapToUnitSquare(This,ret_0)

#define IDA3Image_ClipPolygonImageEx(This,points_0size,points_0,ret_1)	\
    (This)->lpVtbl -> ClipPolygonImageEx(This,points_0size,points_0,ret_1)

#define IDA3Image_ClipPolygonImage(This,points_0,ret_1)	\
    (This)->lpVtbl -> ClipPolygonImage(This,points_0,ret_1)


#define IDA3Image_AddPickData(This,id_0,ignoresOcclusion_1,ret_2)	\
    (This)->lpVtbl -> AddPickData(This,id_0,ignoresOcclusion_1,ret_2)

#define IDA3Image_RenderResolution(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> RenderResolution(This,width_0,height_1,ret_2)

#define IDA3Image_ImageQuality(This,dwQualityFlags_0,ret_1)	\
    (This)->lpVtbl -> ImageQuality(This,dwQualityFlags_0,ret_1)

#define IDA3Image_ColorKey(This,colorKey_0,ret_1)	\
    (This)->lpVtbl -> ColorKey(This,colorKey_0,ret_1)


#define IDA3Image_TransformColorRGB(This,xf_0,ret_1)	\
    (This)->lpVtbl -> TransformColorRGB(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA3Image_TransformColorRGB_Proxy( 
    IDA3Image * This,
    /* [in] */ IDATransform3 *xf_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDA3Image_TransformColorRGB_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA3Image_INTERFACE_DEFINED__ */


#ifndef __IDA3Array_INTERFACE_DEFINED__
#define __IDA3Array_INTERFACE_DEFINED__

/* interface IDA3Array */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA3Array;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3089d9a0-4ce1-11d2-933e-00a0c9b72d4d")
    IDA3Array : public IDA2Array
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetElement( 
            /* [in] */ LONG index,
            /* [in] */ IDABehavior *b,
            /* [in] */ LONG flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetElement( 
            /* [in] */ LONG index,
            /* [retval][out] */ IDABehavior **ret) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA3ArrayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA3Array * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA3Array * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA3Array * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA3Array * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA3Array * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA3Array * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA3Array * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA3Array * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA3Array * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA3Array * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA3Array * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA3Array * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA3Array * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA3Array * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA3Array * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA3Array * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA3Array * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA3Array * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA3Array * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA3Array * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA3Array * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *NthAnim )( 
            IDA3Array * This,
            /* [in] */ IDANumber *index_0,
            /* [retval][out] */ IDABehavior **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Length )( 
            IDA3Array * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AddElement )( 
            IDA3Array * This,
            /* [in] */ IDABehavior *b_0,
            /* [in] */ DWORD flag_1,
            /* [retval][out] */ long *ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveElement )( 
            IDA3Array * This,
            /* [in] */ long i_0);
        
        HRESULT ( STDMETHODCALLTYPE *SetElement )( 
            IDA3Array * This,
            /* [in] */ LONG index,
            /* [in] */ IDABehavior *b,
            /* [in] */ LONG flag);
        
        HRESULT ( STDMETHODCALLTYPE *GetElement )( 
            IDA3Array * This,
            /* [in] */ LONG index,
            /* [retval][out] */ IDABehavior **ret);
        
        END_INTERFACE
    } IDA3ArrayVtbl;

    interface IDA3Array
    {
        CONST_VTBL struct IDA3ArrayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA3Array_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA3Array_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA3Array_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA3Array_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA3Array_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA3Array_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA3Array_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA3Array_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA3Array_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA3Array_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA3Array_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA3Array_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA3Array_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA3Array_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA3Array_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA3Array_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA3Array_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA3Array_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA3Array_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA3Array_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA3Array_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA3Array_NthAnim(This,index_0,ret_1)	\
    (This)->lpVtbl -> NthAnim(This,index_0,ret_1)

#define IDA3Array_Length(This,ret_0)	\
    (This)->lpVtbl -> Length(This,ret_0)


#define IDA3Array_AddElement(This,b_0,flag_1,ret_2)	\
    (This)->lpVtbl -> AddElement(This,b_0,flag_1,ret_2)

#define IDA3Array_RemoveElement(This,i_0)	\
    (This)->lpVtbl -> RemoveElement(This,i_0)


#define IDA3Array_SetElement(This,index,b,flag)	\
    (This)->lpVtbl -> SetElement(This,index,b,flag)

#define IDA3Array_GetElement(This,index,ret)	\
    (This)->lpVtbl -> GetElement(This,index,ret)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA3Array_SetElement_Proxy( 
    IDA3Array * This,
    /* [in] */ LONG index,
    /* [in] */ IDABehavior *b,
    /* [in] */ LONG flag);


void __RPC_STUB IDA3Array_SetElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3Array_GetElement_Proxy( 
    IDA3Array * This,
    /* [in] */ LONG index,
    /* [retval][out] */ IDABehavior **ret);


void __RPC_STUB IDA3Array_GetElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA3Array_INTERFACE_DEFINED__ */


#ifndef __IDAPreferences_INTERFACE_DEFINED__
#define __IDAPreferences_INTERFACE_DEFINED__

/* interface IDAPreferences */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAPreferences;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("69B5BC70-9B19-11d0-9B60-00C04FC2F51D")
    IDAPreferences : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE PutPreference( 
            /* [in] */ BSTR preferenceName,
            /* [in] */ VARIANT value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPreference( 
            /* [in] */ BSTR preferenceName,
            /* [retval][out] */ VARIANT *value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Propagate( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAPreferencesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAPreferences * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAPreferences * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAPreferences * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAPreferences * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAPreferences * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAPreferences * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAPreferences * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *PutPreference )( 
            IDAPreferences * This,
            /* [in] */ BSTR preferenceName,
            /* [in] */ VARIANT value);
        
        HRESULT ( STDMETHODCALLTYPE *GetPreference )( 
            IDAPreferences * This,
            /* [in] */ BSTR preferenceName,
            /* [retval][out] */ VARIANT *value);
        
        HRESULT ( STDMETHODCALLTYPE *Propagate )( 
            IDAPreferences * This);
        
        END_INTERFACE
    } IDAPreferencesVtbl;

    interface IDAPreferences
    {
        CONST_VTBL struct IDAPreferencesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAPreferences_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAPreferences_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAPreferences_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAPreferences_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAPreferences_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAPreferences_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAPreferences_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAPreferences_PutPreference(This,preferenceName,value)	\
    (This)->lpVtbl -> PutPreference(This,preferenceName,value)

#define IDAPreferences_GetPreference(This,preferenceName,value)	\
    (This)->lpVtbl -> GetPreference(This,preferenceName,value)

#define IDAPreferences_Propagate(This)	\
    (This)->lpVtbl -> Propagate(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAPreferences_PutPreference_Proxy( 
    IDAPreferences * This,
    /* [in] */ BSTR preferenceName,
    /* [in] */ VARIANT value);


void __RPC_STUB IDAPreferences_PutPreference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPreferences_GetPreference_Proxy( 
    IDAPreferences * This,
    /* [in] */ BSTR preferenceName,
    /* [retval][out] */ VARIANT *value);


void __RPC_STUB IDAPreferences_GetPreference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPreferences_Propagate_Proxy( 
    IDAPreferences * This);


void __RPC_STUB IDAPreferences_Propagate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAPreferences_INTERFACE_DEFINED__ */


#ifndef __IDA2View_INTERFACE_DEFINED__
#define __IDA2View_INTERFACE_DEFINED__

/* interface IDA2View */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2View;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2AE71568-4B34-11d1-B1E3-00C04FC2A0CA")
    IDA2View : public IDAView
    {
    public:
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE QueryHitPointEx( 
            /* [in] */ LONG s,
            /* [size_is] */ DWORD_PTR *cookies,
            /* [size_is] */ double *points,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [retval][out] */ LONG *hits) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StartModelEx( 
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDDD3DRM( 
            /* [out] */ IUnknown **directDraw,
            /* [out] */ IUnknown **d3drm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRMDevice( 
            /* [out] */ IUnknown **d3drmDevice,
            /* [out] */ DWORD *sequenceNumber) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE GetInvalidatedRects( 
            /* [in] */ DWORD flags,
            /* [in] */ LONG s,
            /* [size_is] */ RECT *pRects,
            /* [retval][out] */ LONG *pNumRects) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2ViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2View * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2View * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2View * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2View * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2View * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2View * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2View * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SimulationTime )( 
            IDA2View * This,
            /* [retval][out] */ double *simTime);
        
        HRESULT ( STDMETHODCALLTYPE *Tick )( 
            IDA2View * This,
            /* [in] */ double simTime,
            /* [retval][out] */ VARIANT_BOOL *needToRender);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDA2View * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddBvrToRun )( 
            IDA2View * This,
            /* [in] */ IDABehavior *bvr,
            /* [retval][out] */ LONG *pId);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveRunningBvr )( 
            IDA2View * This,
            /* [in] */ LONG id);
        
        HRESULT ( STDMETHODCALLTYPE *StartModel )( 
            IDA2View * This,
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime);
        
        HRESULT ( STDMETHODCALLTYPE *StopModel )( 
            IDA2View * This);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            IDA2View * This,
            /* [retval][out] */ long *hwnd);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Window )( 
            IDA2View * This,
            /* [in] */ long hwnd);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IDirectDrawSurface )( 
            IDA2View * This,
            /* [retval][out] */ IUnknown **ddsurf);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IDirectDrawSurface )( 
            IDA2View * This,
            /* [in] */ IUnknown *ddsurf);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DC )( 
            IDA2View * This,
            /* [retval][out] */ HDC *dc);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DC )( 
            IDA2View * This,
            /* [in] */ HDC dc);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompositeDirectlyToTarget )( 
            IDA2View * This,
            /* [retval][out] */ VARIANT_BOOL *composeToTarget);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CompositeDirectlyToTarget )( 
            IDA2View * This,
            /* [in] */ VARIANT_BOOL composeToTarget);
        
        HRESULT ( STDMETHODCALLTYPE *SetViewport )( 
            IDA2View * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *SetClipRect )( 
            IDA2View * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *RePaint )( 
            IDA2View * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *PaletteChanged )( 
            IDA2View * This,
            /* [in] */ VARIANT_BOOL bNew);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Site )( 
            IDA2View * This,
            /* [retval][out] */ IDAViewSite **pViewSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Site )( 
            IDA2View * This,
            /* [in] */ IDAViewSite *pViewSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientSite )( 
            IDA2View * This,
            /* [in] */ IOleClientSite *pClientSite);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientSite )( 
            IDA2View * This,
            /* [retval][out] */ IOleClientSite **pClientSite);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseMove )( 
            IDA2View * This,
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseButton )( 
            IDA2View * This,
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE button,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnKey )( 
            IDA2View * This,
            /* [in] */ double when,
            /* [in] */ LONG key,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnFocus )( 
            IDA2View * This,
            /* [in] */ VARIANT_BOOL bHasFocus);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Preferences )( 
            IDA2View * This,
            /* [retval][out] */ IDAPreferences **prefs);
        
        HRESULT ( STDMETHODCALLTYPE *QueryHitPoint )( 
            IDA2View * This,
            /* [in] */ DWORD dwAspect,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [in] */ LONG lCloseHint,
            /* [retval][out] */ DWORD *pHitResult);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *QueryHitPointEx )( 
            IDA2View * This,
            /* [in] */ LONG s,
            /* [size_is] */ DWORD_PTR *cookies,
            /* [size_is] */ double *points,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [retval][out] */ LONG *hits);
        
        HRESULT ( STDMETHODCALLTYPE *StartModelEx )( 
            IDA2View * This,
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetDDD3DRM )( 
            IDA2View * This,
            /* [out] */ IUnknown **directDraw,
            /* [out] */ IUnknown **d3drm);
        
        HRESULT ( STDMETHODCALLTYPE *GetRMDevice )( 
            IDA2View * This,
            /* [out] */ IUnknown **d3drmDevice,
            /* [out] */ DWORD *sequenceNumber);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *GetInvalidatedRects )( 
            IDA2View * This,
            /* [in] */ DWORD flags,
            /* [in] */ LONG s,
            /* [size_is] */ RECT *pRects,
            /* [retval][out] */ LONG *pNumRects);
        
        END_INTERFACE
    } IDA2ViewVtbl;

    interface IDA2View
    {
        CONST_VTBL struct IDA2ViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2View_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2View_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2View_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2View_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2View_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2View_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2View_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2View_get_SimulationTime(This,simTime)	\
    (This)->lpVtbl -> get_SimulationTime(This,simTime)

#define IDA2View_Tick(This,simTime,needToRender)	\
    (This)->lpVtbl -> Tick(This,simTime,needToRender)

#define IDA2View_Render(This)	\
    (This)->lpVtbl -> Render(This)

#define IDA2View_AddBvrToRun(This,bvr,pId)	\
    (This)->lpVtbl -> AddBvrToRun(This,bvr,pId)

#define IDA2View_RemoveRunningBvr(This,id)	\
    (This)->lpVtbl -> RemoveRunningBvr(This,id)

#define IDA2View_StartModel(This,pImage,pSound,startTime)	\
    (This)->lpVtbl -> StartModel(This,pImage,pSound,startTime)

#define IDA2View_StopModel(This)	\
    (This)->lpVtbl -> StopModel(This)

#define IDA2View_get_Window(This,hwnd)	\
    (This)->lpVtbl -> get_Window(This,hwnd)

#define IDA2View_put_Window(This,hwnd)	\
    (This)->lpVtbl -> put_Window(This,hwnd)

#define IDA2View_get_IDirectDrawSurface(This,ddsurf)	\
    (This)->lpVtbl -> get_IDirectDrawSurface(This,ddsurf)

#define IDA2View_put_IDirectDrawSurface(This,ddsurf)	\
    (This)->lpVtbl -> put_IDirectDrawSurface(This,ddsurf)

#define IDA2View_get_DC(This,dc)	\
    (This)->lpVtbl -> get_DC(This,dc)

#define IDA2View_put_DC(This,dc)	\
    (This)->lpVtbl -> put_DC(This,dc)

#define IDA2View_get_CompositeDirectlyToTarget(This,composeToTarget)	\
    (This)->lpVtbl -> get_CompositeDirectlyToTarget(This,composeToTarget)

#define IDA2View_put_CompositeDirectlyToTarget(This,composeToTarget)	\
    (This)->lpVtbl -> put_CompositeDirectlyToTarget(This,composeToTarget)

#define IDA2View_SetViewport(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> SetViewport(This,xPos,yPos,w,h)

#define IDA2View_SetClipRect(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> SetClipRect(This,xPos,yPos,w,h)

#define IDA2View_RePaint(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> RePaint(This,xPos,yPos,w,h)

#define IDA2View_PaletteChanged(This,bNew)	\
    (This)->lpVtbl -> PaletteChanged(This,bNew)

#define IDA2View_get_Site(This,pViewSite)	\
    (This)->lpVtbl -> get_Site(This,pViewSite)

#define IDA2View_put_Site(This,pViewSite)	\
    (This)->lpVtbl -> put_Site(This,pViewSite)

#define IDA2View_put_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> put_ClientSite(This,pClientSite)

#define IDA2View_get_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> get_ClientSite(This,pClientSite)

#define IDA2View_OnMouseMove(This,when,xPos,yPos,modifiers)	\
    (This)->lpVtbl -> OnMouseMove(This,when,xPos,yPos,modifiers)

#define IDA2View_OnMouseButton(This,when,xPos,yPos,button,bPressed,modifiers)	\
    (This)->lpVtbl -> OnMouseButton(This,when,xPos,yPos,button,bPressed,modifiers)

#define IDA2View_OnKey(This,when,key,bPressed,modifiers)	\
    (This)->lpVtbl -> OnKey(This,when,key,bPressed,modifiers)

#define IDA2View_OnFocus(This,bHasFocus)	\
    (This)->lpVtbl -> OnFocus(This,bHasFocus)

#define IDA2View_get_Preferences(This,prefs)	\
    (This)->lpVtbl -> get_Preferences(This,prefs)

#define IDA2View_QueryHitPoint(This,dwAspect,prcBounds,ptLoc,lCloseHint,pHitResult)	\
    (This)->lpVtbl -> QueryHitPoint(This,dwAspect,prcBounds,ptLoc,lCloseHint,pHitResult)


#define IDA2View_QueryHitPointEx(This,s,cookies,points,prcBounds,ptLoc,hits)	\
    (This)->lpVtbl -> QueryHitPointEx(This,s,cookies,points,prcBounds,ptLoc,hits)

#define IDA2View_StartModelEx(This,pImage,pSound,startTime,dwFlags)	\
    (This)->lpVtbl -> StartModelEx(This,pImage,pSound,startTime,dwFlags)

#define IDA2View_GetDDD3DRM(This,directDraw,d3drm)	\
    (This)->lpVtbl -> GetDDD3DRM(This,directDraw,d3drm)

#define IDA2View_GetRMDevice(This,d3drmDevice,sequenceNumber)	\
    (This)->lpVtbl -> GetRMDevice(This,d3drmDevice,sequenceNumber)

#define IDA2View_GetInvalidatedRects(This,flags,s,pRects,pNumRects)	\
    (This)->lpVtbl -> GetInvalidatedRects(This,flags,s,pRects,pNumRects)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA2View_QueryHitPointEx_Proxy( 
    IDA2View * This,
    /* [in] */ LONG s,
    /* [size_is] */ DWORD_PTR *cookies,
    /* [size_is] */ double *points,
    /* [in] */ LPCRECT prcBounds,
    /* [in] */ POINT ptLoc,
    /* [retval][out] */ LONG *hits);


void __RPC_STUB IDA2View_QueryHitPointEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2View_StartModelEx_Proxy( 
    IDA2View * This,
    /* [in] */ IDAImage *pImage,
    /* [in] */ IDASound *pSound,
    /* [in] */ double startTime,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IDA2View_StartModelEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2View_GetDDD3DRM_Proxy( 
    IDA2View * This,
    /* [out] */ IUnknown **directDraw,
    /* [out] */ IUnknown **d3drm);


void __RPC_STUB IDA2View_GetDDD3DRM_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2View_GetRMDevice_Proxy( 
    IDA2View * This,
    /* [out] */ IUnknown **d3drmDevice,
    /* [out] */ DWORD *sequenceNumber);


void __RPC_STUB IDA2View_GetRMDevice_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA2View_GetInvalidatedRects_Proxy( 
    IDA2View * This,
    /* [in] */ DWORD flags,
    /* [in] */ LONG s,
    /* [size_is] */ RECT *pRects,
    /* [retval][out] */ LONG *pNumRects);


void __RPC_STUB IDA2View_GetInvalidatedRects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2View_INTERFACE_DEFINED__ */


#ifndef __IDA3View_INTERFACE_DEFINED__
#define __IDA3View_INTERFACE_DEFINED__

/* interface IDA3View */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA3View;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d5570790-57e2-11d2-933f-00a0c9b72d4d")
    IDA3View : public IDA2View
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnMouseLeave( 
            /* [in] */ double when) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Window2( 
            /* [retval][out] */ HWND *hwnd) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Window2( 
            /* [in] */ HWND hwnd) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA3ViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA3View * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA3View * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA3View * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA3View * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA3View * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA3View * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA3View * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SimulationTime )( 
            IDA3View * This,
            /* [retval][out] */ double *simTime);
        
        HRESULT ( STDMETHODCALLTYPE *Tick )( 
            IDA3View * This,
            /* [in] */ double simTime,
            /* [retval][out] */ VARIANT_BOOL *needToRender);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDA3View * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddBvrToRun )( 
            IDA3View * This,
            /* [in] */ IDABehavior *bvr,
            /* [retval][out] */ LONG *pId);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveRunningBvr )( 
            IDA3View * This,
            /* [in] */ LONG id);
        
        HRESULT ( STDMETHODCALLTYPE *StartModel )( 
            IDA3View * This,
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime);
        
        HRESULT ( STDMETHODCALLTYPE *StopModel )( 
            IDA3View * This);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            IDA3View * This,
            /* [retval][out] */ long *hwnd);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Window )( 
            IDA3View * This,
            /* [in] */ long hwnd);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IDirectDrawSurface )( 
            IDA3View * This,
            /* [retval][out] */ IUnknown **ddsurf);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IDirectDrawSurface )( 
            IDA3View * This,
            /* [in] */ IUnknown *ddsurf);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DC )( 
            IDA3View * This,
            /* [retval][out] */ HDC *dc);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DC )( 
            IDA3View * This,
            /* [in] */ HDC dc);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompositeDirectlyToTarget )( 
            IDA3View * This,
            /* [retval][out] */ VARIANT_BOOL *composeToTarget);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CompositeDirectlyToTarget )( 
            IDA3View * This,
            /* [in] */ VARIANT_BOOL composeToTarget);
        
        HRESULT ( STDMETHODCALLTYPE *SetViewport )( 
            IDA3View * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *SetClipRect )( 
            IDA3View * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *RePaint )( 
            IDA3View * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *PaletteChanged )( 
            IDA3View * This,
            /* [in] */ VARIANT_BOOL bNew);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Site )( 
            IDA3View * This,
            /* [retval][out] */ IDAViewSite **pViewSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Site )( 
            IDA3View * This,
            /* [in] */ IDAViewSite *pViewSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientSite )( 
            IDA3View * This,
            /* [in] */ IOleClientSite *pClientSite);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientSite )( 
            IDA3View * This,
            /* [retval][out] */ IOleClientSite **pClientSite);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseMove )( 
            IDA3View * This,
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseButton )( 
            IDA3View * This,
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE button,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnKey )( 
            IDA3View * This,
            /* [in] */ double when,
            /* [in] */ LONG key,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnFocus )( 
            IDA3View * This,
            /* [in] */ VARIANT_BOOL bHasFocus);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Preferences )( 
            IDA3View * This,
            /* [retval][out] */ IDAPreferences **prefs);
        
        HRESULT ( STDMETHODCALLTYPE *QueryHitPoint )( 
            IDA3View * This,
            /* [in] */ DWORD dwAspect,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [in] */ LONG lCloseHint,
            /* [retval][out] */ DWORD *pHitResult);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *QueryHitPointEx )( 
            IDA3View * This,
            /* [in] */ LONG s,
            /* [size_is] */ DWORD_PTR *cookies,
            /* [size_is] */ double *points,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [retval][out] */ LONG *hits);
        
        HRESULT ( STDMETHODCALLTYPE *StartModelEx )( 
            IDA3View * This,
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetDDD3DRM )( 
            IDA3View * This,
            /* [out] */ IUnknown **directDraw,
            /* [out] */ IUnknown **d3drm);
        
        HRESULT ( STDMETHODCALLTYPE *GetRMDevice )( 
            IDA3View * This,
            /* [out] */ IUnknown **d3drmDevice,
            /* [out] */ DWORD *sequenceNumber);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *GetInvalidatedRects )( 
            IDA3View * This,
            /* [in] */ DWORD flags,
            /* [in] */ LONG s,
            /* [size_is] */ RECT *pRects,
            /* [retval][out] */ LONG *pNumRects);
        
        HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IDA3View * This);
        
        HRESULT ( STDMETHODCALLTYPE *Resume )( 
            IDA3View * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseLeave )( 
            IDA3View * This,
            /* [in] */ double when);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window2 )( 
            IDA3View * This,
            /* [retval][out] */ HWND *hwnd);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Window2 )( 
            IDA3View * This,
            /* [in] */ HWND hwnd);
        
        END_INTERFACE
    } IDA3ViewVtbl;

    interface IDA3View
    {
        CONST_VTBL struct IDA3ViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA3View_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA3View_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA3View_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA3View_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA3View_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA3View_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA3View_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA3View_get_SimulationTime(This,simTime)	\
    (This)->lpVtbl -> get_SimulationTime(This,simTime)

#define IDA3View_Tick(This,simTime,needToRender)	\
    (This)->lpVtbl -> Tick(This,simTime,needToRender)

#define IDA3View_Render(This)	\
    (This)->lpVtbl -> Render(This)

#define IDA3View_AddBvrToRun(This,bvr,pId)	\
    (This)->lpVtbl -> AddBvrToRun(This,bvr,pId)

#define IDA3View_RemoveRunningBvr(This,id)	\
    (This)->lpVtbl -> RemoveRunningBvr(This,id)

#define IDA3View_StartModel(This,pImage,pSound,startTime)	\
    (This)->lpVtbl -> StartModel(This,pImage,pSound,startTime)

#define IDA3View_StopModel(This)	\
    (This)->lpVtbl -> StopModel(This)

#define IDA3View_get_Window(This,hwnd)	\
    (This)->lpVtbl -> get_Window(This,hwnd)

#define IDA3View_put_Window(This,hwnd)	\
    (This)->lpVtbl -> put_Window(This,hwnd)

#define IDA3View_get_IDirectDrawSurface(This,ddsurf)	\
    (This)->lpVtbl -> get_IDirectDrawSurface(This,ddsurf)

#define IDA3View_put_IDirectDrawSurface(This,ddsurf)	\
    (This)->lpVtbl -> put_IDirectDrawSurface(This,ddsurf)

#define IDA3View_get_DC(This,dc)	\
    (This)->lpVtbl -> get_DC(This,dc)

#define IDA3View_put_DC(This,dc)	\
    (This)->lpVtbl -> put_DC(This,dc)

#define IDA3View_get_CompositeDirectlyToTarget(This,composeToTarget)	\
    (This)->lpVtbl -> get_CompositeDirectlyToTarget(This,composeToTarget)

#define IDA3View_put_CompositeDirectlyToTarget(This,composeToTarget)	\
    (This)->lpVtbl -> put_CompositeDirectlyToTarget(This,composeToTarget)

#define IDA3View_SetViewport(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> SetViewport(This,xPos,yPos,w,h)

#define IDA3View_SetClipRect(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> SetClipRect(This,xPos,yPos,w,h)

#define IDA3View_RePaint(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> RePaint(This,xPos,yPos,w,h)

#define IDA3View_PaletteChanged(This,bNew)	\
    (This)->lpVtbl -> PaletteChanged(This,bNew)

#define IDA3View_get_Site(This,pViewSite)	\
    (This)->lpVtbl -> get_Site(This,pViewSite)

#define IDA3View_put_Site(This,pViewSite)	\
    (This)->lpVtbl -> put_Site(This,pViewSite)

#define IDA3View_put_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> put_ClientSite(This,pClientSite)

#define IDA3View_get_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> get_ClientSite(This,pClientSite)

#define IDA3View_OnMouseMove(This,when,xPos,yPos,modifiers)	\
    (This)->lpVtbl -> OnMouseMove(This,when,xPos,yPos,modifiers)

#define IDA3View_OnMouseButton(This,when,xPos,yPos,button,bPressed,modifiers)	\
    (This)->lpVtbl -> OnMouseButton(This,when,xPos,yPos,button,bPressed,modifiers)

#define IDA3View_OnKey(This,when,key,bPressed,modifiers)	\
    (This)->lpVtbl -> OnKey(This,when,key,bPressed,modifiers)

#define IDA3View_OnFocus(This,bHasFocus)	\
    (This)->lpVtbl -> OnFocus(This,bHasFocus)

#define IDA3View_get_Preferences(This,prefs)	\
    (This)->lpVtbl -> get_Preferences(This,prefs)

#define IDA3View_QueryHitPoint(This,dwAspect,prcBounds,ptLoc,lCloseHint,pHitResult)	\
    (This)->lpVtbl -> QueryHitPoint(This,dwAspect,prcBounds,ptLoc,lCloseHint,pHitResult)


#define IDA3View_QueryHitPointEx(This,s,cookies,points,prcBounds,ptLoc,hits)	\
    (This)->lpVtbl -> QueryHitPointEx(This,s,cookies,points,prcBounds,ptLoc,hits)

#define IDA3View_StartModelEx(This,pImage,pSound,startTime,dwFlags)	\
    (This)->lpVtbl -> StartModelEx(This,pImage,pSound,startTime,dwFlags)

#define IDA3View_GetDDD3DRM(This,directDraw,d3drm)	\
    (This)->lpVtbl -> GetDDD3DRM(This,directDraw,d3drm)

#define IDA3View_GetRMDevice(This,d3drmDevice,sequenceNumber)	\
    (This)->lpVtbl -> GetRMDevice(This,d3drmDevice,sequenceNumber)

#define IDA3View_GetInvalidatedRects(This,flags,s,pRects,pNumRects)	\
    (This)->lpVtbl -> GetInvalidatedRects(This,flags,s,pRects,pNumRects)


#define IDA3View_Pause(This)	\
    (This)->lpVtbl -> Pause(This)

#define IDA3View_Resume(This)	\
    (This)->lpVtbl -> Resume(This)

#define IDA3View_OnMouseLeave(This,when)	\
    (This)->lpVtbl -> OnMouseLeave(This,when)

#define IDA3View_get_Window2(This,hwnd)	\
    (This)->lpVtbl -> get_Window2(This,hwnd)

#define IDA3View_put_Window2(This,hwnd)	\
    (This)->lpVtbl -> put_Window2(This,hwnd)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA3View_Pause_Proxy( 
    IDA3View * This);


void __RPC_STUB IDA3View_Pause_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3View_Resume_Proxy( 
    IDA3View * This);


void __RPC_STUB IDA3View_Resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3View_OnMouseLeave_Proxy( 
    IDA3View * This,
    /* [in] */ double when);


void __RPC_STUB IDA3View_OnMouseLeave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDA3View_get_Window2_Proxy( 
    IDA3View * This,
    /* [retval][out] */ HWND *hwnd);


void __RPC_STUB IDA3View_get_Window2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDA3View_put_Window2_Proxy( 
    IDA3View * This,
    /* [in] */ HWND hwnd);


void __RPC_STUB IDA3View_put_Window2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA3View_INTERFACE_DEFINED__ */


#ifndef ___IDAViewEvents_DISPINTERFACE_DEFINED__
#define ___IDAViewEvents_DISPINTERFACE_DEFINED__

/* dispinterface _IDAViewEvents */
/* [helpstring][uuid] */ 


EXTERN_C const IID DIID__IDAViewEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("89131312-7806-11d2-8BEE-00C04FC2F51D")
    _IDAViewEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IDAViewEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IDAViewEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IDAViewEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IDAViewEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IDAViewEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IDAViewEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IDAViewEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IDAViewEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _IDAViewEventsVtbl;

    interface _IDAViewEvents
    {
        CONST_VTBL struct _IDAViewEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IDAViewEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _IDAViewEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _IDAViewEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _IDAViewEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _IDAViewEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _IDAViewEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _IDAViewEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IDAViewEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DAView;

#ifdef __cplusplus

class DECLSPEC_UUID("283807B5-2C60-11d0-A31D-00AA00B92C03")
DAView;
#endif

#ifndef __IDASite_INTERFACE_DEFINED__
#define __IDASite_INTERFACE_DEFINED__

/* interface IDASite */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDASite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("45393DF0-54B9-11cf-92A2-00AA00B8A733")
    IDASite : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetStatusText( 
            /* [in] */ BSTR StatusText) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReportError( 
            /* [in] */ HRESULT hr,
            /* [in] */ BSTR ErrorText) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReportGC( 
            /* [in] */ VARIANT_BOOL bStarting) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDASiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDASite * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDASite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDASite * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDASite * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDASite * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDASite * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDASite * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *SetStatusText )( 
            IDASite * This,
            /* [in] */ BSTR StatusText);
        
        HRESULT ( STDMETHODCALLTYPE *ReportError )( 
            IDASite * This,
            /* [in] */ HRESULT hr,
            /* [in] */ BSTR ErrorText);
        
        HRESULT ( STDMETHODCALLTYPE *ReportGC )( 
            IDASite * This,
            /* [in] */ VARIANT_BOOL bStarting);
        
        END_INTERFACE
    } IDASiteVtbl;

    interface IDASite
    {
        CONST_VTBL struct IDASiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDASite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDASite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDASite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDASite_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDASite_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDASite_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDASite_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDASite_SetStatusText(This,StatusText)	\
    (This)->lpVtbl -> SetStatusText(This,StatusText)

#define IDASite_ReportError(This,hr,ErrorText)	\
    (This)->lpVtbl -> ReportError(This,hr,ErrorText)

#define IDASite_ReportGC(This,bStarting)	\
    (This)->lpVtbl -> ReportGC(This,bStarting)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDASite_SetStatusText_Proxy( 
    IDASite * This,
    /* [in] */ BSTR StatusText);


void __RPC_STUB IDASite_SetStatusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASite_ReportError_Proxy( 
    IDASite * This,
    /* [in] */ HRESULT hr,
    /* [in] */ BSTR ErrorText);


void __RPC_STUB IDASite_ReportError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASite_ReportGC_Proxy( 
    IDASite * This,
    /* [in] */ VARIANT_BOOL bStarting);


void __RPC_STUB IDASite_ReportGC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDASite_INTERFACE_DEFINED__ */


#ifndef __IDAImportationResult_INTERFACE_DEFINED__
#define __IDAImportationResult_INTERFACE_DEFINED__

/* interface IDAImportationResult */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAImportationResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4A933702-E36F-11d0-9B99-00C04FC2F51D")
    IDAImportationResult : public IDispatch
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Sound( 
            /* [retval][out] */ IDASound **ppSound) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Geometry( 
            /* [retval][out] */ IDAGeometry **ppGeometry) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Duration( 
            /* [retval][out] */ IDANumber **ppDuration) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_CompletionEvent( 
            /* [retval][out] */ IDAEvent **ppCompletionEvent) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Progress( 
            /* [retval][out] */ IDANumber **ppProgress) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ IDANumber **ppSizeInBytes) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAImportationResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAImportationResult * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAImportationResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAImportationResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAImportationResult * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAImportationResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAImportationResult * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAImportationResult * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sound )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDASound **ppSound);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Geometry )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDANumber **ppDuration);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompletionEvent )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDAEvent **ppCompletionEvent);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Progress )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDANumber **ppProgress);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDANumber **ppSizeInBytes);
        
        END_INTERFACE
    } IDAImportationResultVtbl;

    interface IDAImportationResult
    {
        CONST_VTBL struct IDAImportationResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAImportationResult_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAImportationResult_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAImportationResult_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAImportationResult_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAImportationResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAImportationResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAImportationResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAImportationResult_get_Image(This,ppImage)	\
    (This)->lpVtbl -> get_Image(This,ppImage)

#define IDAImportationResult_get_Sound(This,ppSound)	\
    (This)->lpVtbl -> get_Sound(This,ppSound)

#define IDAImportationResult_get_Geometry(This,ppGeometry)	\
    (This)->lpVtbl -> get_Geometry(This,ppGeometry)

#define IDAImportationResult_get_Duration(This,ppDuration)	\
    (This)->lpVtbl -> get_Duration(This,ppDuration)

#define IDAImportationResult_get_CompletionEvent(This,ppCompletionEvent)	\
    (This)->lpVtbl -> get_CompletionEvent(This,ppCompletionEvent)

#define IDAImportationResult_get_Progress(This,ppProgress)	\
    (This)->lpVtbl -> get_Progress(This,ppProgress)

#define IDAImportationResult_get_Size(This,ppSizeInBytes)	\
    (This)->lpVtbl -> get_Size(This,ppSizeInBytes)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_Image_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAImportationResult_get_Image_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_Sound_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDASound **ppSound);


void __RPC_STUB IDAImportationResult_get_Sound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_Geometry_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDAGeometry **ppGeometry);


void __RPC_STUB IDAImportationResult_get_Geometry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_Duration_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDANumber **ppDuration);


void __RPC_STUB IDAImportationResult_get_Duration_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_CompletionEvent_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDAEvent **ppCompletionEvent);


void __RPC_STUB IDAImportationResult_get_CompletionEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_Progress_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDANumber **ppProgress);


void __RPC_STUB IDAImportationResult_get_Progress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_Size_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDANumber **ppSizeInBytes);


void __RPC_STUB IDAImportationResult_get_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAImportationResult_INTERFACE_DEFINED__ */


#ifndef __IDADXTransformResult_INTERFACE_DEFINED__
#define __IDADXTransformResult_INTERFACE_DEFINED__

/* interface IDADXTransformResult */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDADXTransformResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BACD4D86-4A4F-11d1-9BC8-00C04FC2F51D")
    IDADXTransformResult : public IDispatch
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_OutputBvr( 
            /* [retval][out] */ IDABehavior **ppOutputBvr) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_TheTransform( 
            /* [retval][out] */ IDispatch **ppTheTransform) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE PutBvrAsProperty( 
            /* [in] */ BSTR property,
            /* [in] */ IDABehavior *bvr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDADXTransformResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDADXTransformResult * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDADXTransformResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDADXTransformResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDADXTransformResult * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDADXTransformResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDADXTransformResult * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDADXTransformResult * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputBvr )( 
            IDADXTransformResult * This,
            /* [retval][out] */ IDABehavior **ppOutputBvr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TheTransform )( 
            IDADXTransformResult * This,
            /* [retval][out] */ IDispatch **ppTheTransform);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *PutBvrAsProperty )( 
            IDADXTransformResult * This,
            /* [in] */ BSTR property,
            /* [in] */ IDABehavior *bvr);
        
        END_INTERFACE
    } IDADXTransformResultVtbl;

    interface IDADXTransformResult
    {
        CONST_VTBL struct IDADXTransformResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDADXTransformResult_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDADXTransformResult_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDADXTransformResult_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDADXTransformResult_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDADXTransformResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDADXTransformResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDADXTransformResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDADXTransformResult_get_OutputBvr(This,ppOutputBvr)	\
    (This)->lpVtbl -> get_OutputBvr(This,ppOutputBvr)

#define IDADXTransformResult_get_TheTransform(This,ppTheTransform)	\
    (This)->lpVtbl -> get_TheTransform(This,ppTheTransform)

#define IDADXTransformResult_PutBvrAsProperty(This,property,bvr)	\
    (This)->lpVtbl -> PutBvrAsProperty(This,property,bvr)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDADXTransformResult_get_OutputBvr_Proxy( 
    IDADXTransformResult * This,
    /* [retval][out] */ IDABehavior **ppOutputBvr);


void __RPC_STUB IDADXTransformResult_get_OutputBvr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDADXTransformResult_get_TheTransform_Proxy( 
    IDADXTransformResult * This,
    /* [retval][out] */ IDispatch **ppTheTransform);


void __RPC_STUB IDADXTransformResult_get_TheTransform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IDADXTransformResult_PutBvrAsProperty_Proxy( 
    IDADXTransformResult * This,
    /* [in] */ BSTR property,
    /* [in] */ IDABehavior *bvr);


void __RPC_STUB IDADXTransformResult_PutBvrAsProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDADXTransformResult_INTERFACE_DEFINED__ */


#ifndef __IDAStatics_INTERFACE_DEFINED__
#define __IDAStatics_INTERFACE_DEFINED__

/* interface IDAStatics */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("542FB452-5003-11cf-92A2-00AA00B8A733")
    IDAStatics : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VersionString( 
            /* [retval][out] */ BSTR *str) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Site( 
            /* [retval][out] */ IDASite **pSite) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Site( 
            /* [in] */ IDASite *pSite) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClientSite( 
            /* [in] */ IOleClientSite *pClientSite) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClientSite( 
            /* [retval][out] */ IOleClientSite **pClientSite) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PixelConstructionMode( 
            /* [in] */ VARIANT_BOOL bMode) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PixelConstructionMode( 
            /* [retval][out] */ VARIANT_BOOL *bMode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TriggerEvent( 
            /* [in] */ IDAEvent *event,
            /* [in] */ IDABehavior *data) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NewDrawingSurface( 
            /* [retval][out] */ IDADrawingSurface **pds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportMovie( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportMovieAsync( 
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportImage( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportImageAsync( 
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportImageColorKey( 
            /* [in] */ BSTR url,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportImageAsyncColorKey( 
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportSound( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportSoundAsync( 
            /* [in] */ BSTR url,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportGeometry( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAGeometry **ppGeometry) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportGeometryAsync( 
            /* [in] */ BSTR url,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportDirectDrawSurface( 
            /* [in] */ IUnknown *dds,
            /* [in] */ IDAEvent *updateEvent,
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Cond( 
            /* [in] */ IDABoolean *c,
            /* [in] */ IDABehavior *i,
            /* [in] */ IDABehavior *e,
            /* [retval][out] */ IDABehavior **pCondBvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE DAArrayEx( 
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDAArray **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DAArray( 
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDAArray **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE DATupleEx( 
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDATuple **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DATuple( 
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDATuple **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ModifiableBehavior( 
            /* [in] */ IDABehavior *orig,
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UninitializedArray( 
            /* [in] */ IDAArray *typeTmp,
            /* [retval][out] */ IDAArray **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UninitializedTuple( 
            /* [in] */ IDATuple *typeTmp,
            /* [retval][out] */ IDATuple **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE NumberBSplineEx( 
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDANumber *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NumberBSpline( 
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Point2BSplineEx( 
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point2BSpline( 
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Point3BSplineEx( 
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point3BSpline( 
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Vector2BSplineEx( 
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector2BSpline( 
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Vector3BSplineEx( 
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector3BSpline( 
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Pow( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Abs( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sqrt( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Floor( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Round( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Ceiling( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Asin( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Acos( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Atan( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sin( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Cos( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Tan( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Exp( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Ln( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Log10( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ToDegrees( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ToRadians( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Mod( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Atan2( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sub( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Mul( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Div( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LT( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LTE( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GT( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GTE( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EQ( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NE( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Neg( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InterpolateAnim( 
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [retval][out] */ IDANumber **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Interpolate( 
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [retval][out] */ IDANumber **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SlowInSlowOutAnim( 
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [in] */ IDANumber *sharpness_3,
            /* [retval][out] */ IDANumber **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SlowInSlowOut( 
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [in] */ double sharpness_3,
            /* [retval][out] */ IDANumber **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SoundSource( 
            /* [in] */ IDASound *snd_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Mix( 
            /* [in] */ IDASound *left_0,
            /* [in] */ IDASound *right_1,
            /* [retval][out] */ IDASound **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE And( 
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Or( 
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Not( 
            /* [in] */ IDABoolean *a_0,
            /* [retval][out] */ IDABoolean **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Integral( 
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Derivative( 
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IntegralVector2( 
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IntegralVector3( 
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DerivativeVector2( 
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DerivativeVector3( 
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DerivativePoint2( 
            /* [in] */ IDAPoint2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DerivativePoint3( 
            /* [in] */ IDAPoint3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE KeyState( 
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDABoolean **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE KeyUp( 
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE KeyDown( 
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DANumber( 
            /* [in] */ double num_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DAString( 
            /* [in] */ BSTR str_0,
            /* [retval][out] */ IDAString **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DABoolean( 
            /* [in] */ VARIANT_BOOL num_0,
            /* [retval][out] */ IDABoolean **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SeededRandom( 
            /* [in] */ double arg_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MousePosition( 
            /* [retval][out] */ IDAPoint2 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LeftButtonState( 
            /* [retval][out] */ IDABoolean **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RightButtonState( 
            /* [retval][out] */ IDABoolean **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DATrue( 
            /* [retval][out] */ IDABoolean **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DAFalse( 
            /* [retval][out] */ IDABoolean **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LocalTime( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GlobalTime( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Pixel( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UserData( 
            /* [in] */ IUnknown *data_0,
            /* [retval][out] */ IDAUserData **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UntilNotify( 
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDAUntilNotifier *notifier_2,
            /* [retval][out] */ IDABehavior **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Until( 
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDABehavior *b1_2,
            /* [retval][out] */ IDABehavior **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UntilEx( 
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [retval][out] */ IDABehavior **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sequence( 
            /* [in] */ IDABehavior *s1_0,
            /* [in] */ IDABehavior *s2_1,
            /* [retval][out] */ IDABehavior **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPath( 
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAngle( 
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAngleUpright( 
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathEval( 
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAngleEval( 
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAngleUprightEval( 
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAnim( 
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAngleAnim( 
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAngleUprightAnim( 
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ConcatString( 
            /* [in] */ IDAString *s1_0,
            /* [in] */ IDAString *s2_1,
            /* [retval][out] */ IDAString **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PerspectiveCamera( 
            /* [in] */ double focalDist_0,
            /* [in] */ double nearClip_1,
            /* [retval][out] */ IDACamera **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PerspectiveCameraAnim( 
            /* [in] */ IDANumber *focalDist_0,
            /* [in] */ IDANumber *nearClip_1,
            /* [retval][out] */ IDACamera **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ParallelCamera( 
            /* [in] */ double nearClip_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ParallelCameraAnim( 
            /* [in] */ IDANumber *nearClip_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ColorRgbAnim( 
            /* [in] */ IDANumber *red_0,
            /* [in] */ IDANumber *green_1,
            /* [in] */ IDANumber *blue_2,
            /* [retval][out] */ IDAColor **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ColorRgb( 
            /* [in] */ double red_0,
            /* [in] */ double green_1,
            /* [in] */ double blue_2,
            /* [retval][out] */ IDAColor **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ColorRgb255( 
            /* [in] */ short red_0,
            /* [in] */ short green_1,
            /* [in] */ short blue_2,
            /* [retval][out] */ IDAColor **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ColorHsl( 
            /* [in] */ double hue_0,
            /* [in] */ double saturation_1,
            /* [in] */ double lum_2,
            /* [retval][out] */ IDAColor **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ColorHslAnim( 
            /* [in] */ IDANumber *hue_0,
            /* [in] */ IDANumber *saturation_1,
            /* [in] */ IDANumber *lum_2,
            /* [retval][out] */ IDAColor **ret_3) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Red( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Green( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Blue( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Cyan( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Magenta( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Yellow( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Black( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_White( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Aqua( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Fuchsia( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Gray( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Lime( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Maroon( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Navy( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Olive( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Purple( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Silver( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Teal( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Predicate( 
            /* [in] */ IDABoolean *b_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NotEvent( 
            /* [in] */ IDAEvent *event_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AndEvent( 
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OrEvent( 
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ThenEvent( 
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LeftButtonDown( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LeftButtonUp( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RightButtonDown( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RightButtonUp( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Always( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Never( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TimerAnim( 
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Timer( 
            /* [in] */ double n_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AppTriggeredEvent( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ScriptCallback( 
            /* [in] */ BSTR obsolete1_0,
            /* [in] */ IDAEvent *obsolete2_1,
            /* [in] */ BSTR obsolete3_2,
            /* [retval][out] */ IDAEvent **ret_3) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EmptyGeometry( 
            /* [retval][out] */ IDAGeometry **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnionGeometry( 
            /* [in] */ IDAGeometry *g1_0,
            /* [in] */ IDAGeometry *g2_1,
            /* [retval][out] */ IDAGeometry **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE UnionGeometryArrayEx( 
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAGeometry *imgs_0[  ],
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnionGeometryArray( 
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EmptyImage( 
            /* [retval][out] */ IDAImage **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DetectableEmptyImage( 
            /* [retval][out] */ IDAImage **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SolidColorImage( 
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE GradientPolygonEx( 
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG colors_1size,
            /* [size_is][in] */ IDAColor *colors_1[  ],
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientPolygon( 
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT colors_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE RadialGradientPolygonEx( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientPolygon( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE RadialGradientPolygonAnimEx( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientPolygonAnim( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientSquare( 
            /* [in] */ IDAColor *lowerLeft_0,
            /* [in] */ IDAColor *upperLeft_1,
            /* [in] */ IDAColor *upperRight_2,
            /* [in] */ IDAColor *lowerRight_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientSquare( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientSquareAnim( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientRegularPoly( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double numEdges_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientRegularPolyAnim( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *numEdges_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientHorizontal( 
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientHorizontalAnim( 
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchHorizontal( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchHorizontalAnim( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchVertical( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchVerticalAnim( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchForwardDiagonal( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchForwardDiagonalAnim( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchBackwardDiagonal( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchBackwardDiagonalAnim( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchCross( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchCrossAnim( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchDiagonalCross( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchDiagonalCrossAnim( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Overlay( 
            /* [in] */ IDAImage *top_0,
            /* [in] */ IDAImage *bottom_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE OverlayArrayEx( 
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAImage *imgs_0[  ],
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OverlayArray( 
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AmbientLight( 
            /* [retval][out] */ IDAGeometry **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DirectionalLight( 
            /* [retval][out] */ IDAGeometry **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PointLight( 
            /* [retval][out] */ IDAGeometry **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SpotLightAnim( 
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ IDANumber *cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SpotLight( 
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ double cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultLineStyle( 
            /* [retval][out] */ IDALineStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EmptyLineStyle( 
            /* [retval][out] */ IDALineStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_JoinStyleBevel( 
            /* [retval][out] */ IDAJoinStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_JoinStyleRound( 
            /* [retval][out] */ IDAJoinStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_JoinStyleMiter( 
            /* [retval][out] */ IDAJoinStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EndStyleFlat( 
            /* [retval][out] */ IDAEndStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EndStyleSquare( 
            /* [retval][out] */ IDAEndStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EndStyleRound( 
            /* [retval][out] */ IDAEndStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DashStyleSolid( 
            /* [retval][out] */ IDADashStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DashStyleDashed( 
            /* [retval][out] */ IDADashStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultMicrophone( 
            /* [retval][out] */ IDAMicrophone **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OpaqueMatte( 
            /* [retval][out] */ IDAMatte **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClearMatte( 
            /* [retval][out] */ IDAMatte **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnionMatte( 
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IntersectMatte( 
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DifferenceMatte( 
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FillMatte( 
            /* [in] */ IDAPath2 *p_0,
            /* [retval][out] */ IDAMatte **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextMatte( 
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAMatte **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EmptyMontage( 
            /* [retval][out] */ IDAMontage **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImageMontage( 
            /* [in] */ IDAImage *im_0,
            /* [in] */ double depth_1,
            /* [retval][out] */ IDAMontage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImageMontageAnim( 
            /* [in] */ IDAImage *im_0,
            /* [in] */ IDANumber *depth_1,
            /* [retval][out] */ IDAMontage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnionMontage( 
            /* [in] */ IDAMontage *m1_0,
            /* [in] */ IDAMontage *m2_1,
            /* [retval][out] */ IDAMontage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Concat( 
            /* [in] */ IDAPath2 *p1_0,
            /* [in] */ IDAPath2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE ConcatArrayEx( 
            /* [in] */ LONG paths_0size,
            /* [size_is][in] */ IDAPath2 *paths_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ConcatArray( 
            /* [in] */ VARIANT paths_0,
            /* [retval][out] */ IDAPath2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Line( 
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Ray( 
            /* [in] */ IDAPoint2 *pt_0,
            /* [retval][out] */ IDAPath2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StringPathAnim( 
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StringPath( 
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE PolylineEx( 
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Polyline( 
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAPath2 **ret_1) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE PolydrawPathEx( 
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG codes_1size,
            /* [size_is][in] */ IDANumber *codes_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PolydrawPath( 
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT codes_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ArcRadians( 
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ArcRadiansAnim( 
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ArcDegrees( 
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PieRadians( 
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PieRadiansAnim( 
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PieDegrees( 
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Oval( 
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OvalAnim( 
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rect( 
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RectAnim( 
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RoundRect( 
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [in] */ double cornerArcWidth_2,
            /* [in] */ double cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RoundRectAnim( 
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [in] */ IDANumber *cornerArcWidth_2,
            /* [in] */ IDANumber *cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE CubicBSplinePathEx( 
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG knots_1size,
            /* [size_is][in] */ IDANumber *knots_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CubicBSplinePath( 
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT knots_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextPath( 
            /* [in] */ IDAString *obsolete1_0,
            /* [in] */ IDAFontStyle *obsolete2_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Silence( 
            /* [retval][out] */ IDASound **ret_0) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE MixArrayEx( 
            /* [in] */ LONG snds_0size,
            /* [size_is][in] */ IDASound *snds_0[  ],
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MixArray( 
            /* [in] */ VARIANT snds_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SinSynth( 
            /* [retval][out] */ IDASound **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFont( 
            /* [retval][out] */ IDAFontStyle **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FontAnim( 
            /* [in] */ IDAString *str_0,
            /* [in] */ IDANumber *size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Font( 
            /* [in] */ BSTR str_0,
            /* [in] */ double size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StringImageAnim( 
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StringImage( 
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextImageAnim( 
            /* [in] */ IDAString *obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextImage( 
            /* [in] */ BSTR obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_XVector2( 
            /* [retval][out] */ IDAVector2 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YVector2( 
            /* [retval][out] */ IDAVector2 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZeroVector2( 
            /* [retval][out] */ IDAVector2 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Origin2( 
            /* [retval][out] */ IDAPoint2 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector2Anim( 
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector2( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point2Anim( 
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAPoint2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point2( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAPoint2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector2PolarAnim( 
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector2Polar( 
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector2PolarDegrees( 
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point2PolarAnim( 
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point2Polar( 
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DotVector2( 
            /* [in] */ IDAVector2 *v_0,
            /* [in] */ IDAVector2 *u_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NegVector2( 
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubVector2( 
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddVector2( 
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddPoint2Vector( 
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubPoint2Vector( 
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubPoint2( 
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DistancePoint2( 
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DistanceSquaredPoint2( 
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_XVector3( 
            /* [retval][out] */ IDAVector3 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YVector3( 
            /* [retval][out] */ IDAVector3 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZVector3( 
            /* [retval][out] */ IDAVector3 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZeroVector3( 
            /* [retval][out] */ IDAVector3 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Origin3( 
            /* [retval][out] */ IDAPoint3 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector3Anim( 
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAVector3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector3( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAVector3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point3Anim( 
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAPoint3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point3( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAPoint3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector3SphericalAnim( 
            /* [in] */ IDANumber *xyAngle_0,
            /* [in] */ IDANumber *yzAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAVector3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector3Spherical( 
            /* [in] */ double xyAngle_0,
            /* [in] */ double yzAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAVector3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point3SphericalAnim( 
            /* [in] */ IDANumber *zxAngle_0,
            /* [in] */ IDANumber *xyAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point3Spherical( 
            /* [in] */ double zxAngle_0,
            /* [in] */ double xyAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DotVector3( 
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CrossVector3( 
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDAVector3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NegVector3( 
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubVector3( 
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddVector3( 
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddPoint3Vector( 
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubPoint3Vector( 
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubPoint3( 
            /* [in] */ IDAPoint3 *p1_0,
            /* [in] */ IDAPoint3 *p2_1,
            /* [retval][out] */ IDAVector3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DistancePoint3( 
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DistanceSquaredPoint3( 
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IdentityTransform3( 
            /* [retval][out] */ IDATransform3 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate3Anim( 
            /* [in] */ IDANumber *tx_0,
            /* [in] */ IDANumber *ty_1,
            /* [in] */ IDANumber *tz_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate3( 
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate3Rate( 
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate3Vector( 
            /* [in] */ IDAVector3 *delta_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate3Point( 
            /* [in] */ IDAPoint3 *new_origin_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3Anim( 
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3Rate( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3Vector( 
            /* [in] */ IDAVector3 *scale_vec_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3UniformAnim( 
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3Uniform( 
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3UniformRate( 
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate3Anim( 
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ IDANumber *angle_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate3( 
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate3Rate( 
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate3Degrees( 
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate3RateDegrees( 
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE XShear3Anim( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE XShear3( 
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE XShear3Rate( 
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE YShear3Anim( 
            /* [in] */ IDANumber *c_0,
            /* [in] */ IDANumber *d_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE YShear3( 
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE YShear3Rate( 
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ZShear3Anim( 
            /* [in] */ IDANumber *e_0,
            /* [in] */ IDANumber *f_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ZShear3( 
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ZShear3Rate( 
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Transform4x4AnimEx( 
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform4x4Anim( 
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Compose3( 
            /* [in] */ IDATransform3 *a_0,
            /* [in] */ IDATransform3 *b_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Compose3ArrayEx( 
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform3 *xfs_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Compose3Array( 
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LookAtFrom( 
            /* [in] */ IDAPoint3 *to_0,
            /* [in] */ IDAPoint3 *from_1,
            /* [in] */ IDAVector3 *up_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IdentityTransform2( 
            /* [retval][out] */ IDATransform2 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate2Anim( 
            /* [in] */ IDANumber *Tx_0,
            /* [in] */ IDANumber *Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate2( 
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate2Rate( 
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate2Vector( 
            /* [in] */ IDAVector2 *delta_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate2Point( 
            /* [in] */ IDAPoint2 *pos_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2Anim( 
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2Rate( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2Vector2( 
            /* [in] */ IDAVector2 *obsoleteMethod_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2Vector( 
            /* [in] */ IDAVector2 *scale_vec_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2UniformAnim( 
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2Uniform( 
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2UniformRate( 
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate2Anim( 
            /* [in] */ IDANumber *angle_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate2( 
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate2Rate( 
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate2Degrees( 
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate2RateDegrees( 
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE XShear2Anim( 
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE XShear2( 
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE XShear2Rate( 
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE YShear2Anim( 
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE YShear2( 
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE YShear2Rate( 
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Transform3x2AnimEx( 
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform3x2Anim( 
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Compose2( 
            /* [in] */ IDATransform2 *a_0,
            /* [in] */ IDATransform2 *b_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Compose2ArrayEx( 
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform2 *xfs_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Compose2Array( 
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Tuple( 
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDATuple **obsolete2) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Array( 
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDAArray **obsolete2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AreBlockingImportsComplete( 
            /* [retval][out] */ VARIANT_BOOL *bComplete) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAStatics * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAStatics * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAStatics * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAStatics * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAStatics * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VersionString )( 
            IDAStatics * This,
            /* [retval][out] */ BSTR *str);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Site )( 
            IDAStatics * This,
            /* [retval][out] */ IDASite **pSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Site )( 
            IDAStatics * This,
            /* [in] */ IDASite *pSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientSite )( 
            IDAStatics * This,
            /* [in] */ IOleClientSite *pClientSite);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientSite )( 
            IDAStatics * This,
            /* [retval][out] */ IOleClientSite **pClientSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PixelConstructionMode )( 
            IDAStatics * This,
            /* [in] */ VARIANT_BOOL bMode);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelConstructionMode )( 
            IDAStatics * This,
            /* [retval][out] */ VARIANT_BOOL *bMode);
        
        HRESULT ( STDMETHODCALLTYPE *TriggerEvent )( 
            IDAStatics * This,
            /* [in] */ IDAEvent *event,
            /* [in] */ IDABehavior *data);
        
        HRESULT ( STDMETHODCALLTYPE *NewDrawingSurface )( 
            IDAStatics * This,
            /* [retval][out] */ IDADrawingSurface **pds);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovie )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovieAsync )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImage )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageAsync )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageColorKey )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageAsyncColorKey )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSound )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSoundAsync )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometry )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryAsync )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirectDrawSurface )( 
            IDAStatics * This,
            /* [in] */ IUnknown *dds,
            /* [in] */ IDAEvent *updateEvent,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *Cond )( 
            IDAStatics * This,
            /* [in] */ IDABoolean *c,
            /* [in] */ IDABehavior *i,
            /* [in] */ IDABehavior *e,
            /* [retval][out] */ IDABehavior **pCondBvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DAArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DAArray )( 
            IDAStatics * This,
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDAArray **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DATupleEx )( 
            IDAStatics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDATuple **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DATuple )( 
            IDAStatics * This,
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDATuple **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableBehavior )( 
            IDAStatics * This,
            /* [in] */ IDABehavior *orig,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UninitializedArray )( 
            IDAStatics * This,
            /* [in] */ IDAArray *typeTmp,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UninitializedTuple )( 
            IDAStatics * This,
            /* [in] */ IDATuple *typeTmp,
            /* [retval][out] */ IDATuple **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *NumberBSplineEx )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDANumber *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *NumberBSpline )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Point2BSplineEx )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Point2BSpline )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Point3BSplineEx )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Point3BSpline )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Vector2BSplineEx )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2BSpline )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Vector3BSplineEx )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3BSpline )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Pow )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Abs )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Sqrt )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Floor )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Round )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Ceiling )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Asin )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Acos )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Atan )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Sin )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Cos )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Tan )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Exp )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Ln )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Log10 )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToDegrees )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToRadians )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mod )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Atan2 )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Sub )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Mul )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Div )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *LT )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *LTE )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GT )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GTE )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *EQ )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NE )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Neg )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *InterpolateAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [retval][out] */ IDANumber **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Interpolate )( 
            IDAStatics * This,
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [retval][out] */ IDANumber **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *SlowInSlowOutAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [in] */ IDANumber *sharpness_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *SlowInSlowOut )( 
            IDAStatics * This,
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [in] */ double sharpness_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *SoundSource )( 
            IDAStatics * This,
            /* [in] */ IDASound *snd_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mix )( 
            IDAStatics * This,
            /* [in] */ IDASound *left_0,
            /* [in] */ IDASound *right_1,
            /* [retval][out] */ IDASound **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *And )( 
            IDAStatics * This,
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Or )( 
            IDAStatics * This,
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Not )( 
            IDAStatics * This,
            /* [in] */ IDABoolean *a_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Integral )( 
            IDAStatics * This,
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Derivative )( 
            IDAStatics * This,
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *IntegralVector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *IntegralVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativeVector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativeVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativePoint2 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativePoint3 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyState )( 
            IDAStatics * This,
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyUp )( 
            IDAStatics * This,
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyDown )( 
            IDAStatics * This,
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DANumber )( 
            IDAStatics * This,
            /* [in] */ double num_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DAString )( 
            IDAStatics * This,
            /* [in] */ BSTR str_0,
            /* [retval][out] */ IDAString **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DABoolean )( 
            IDAStatics * This,
            /* [in] */ VARIANT_BOOL num_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SeededRandom )( 
            IDAStatics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MousePosition )( 
            IDAStatics * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonState )( 
            IDAStatics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonState )( 
            IDAStatics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DATrue )( 
            IDAStatics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DAFalse )( 
            IDAStatics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalTime )( 
            IDAStatics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GlobalTime )( 
            IDAStatics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pixel )( 
            IDAStatics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UserData )( 
            IDAStatics * This,
            /* [in] */ IUnknown *data_0,
            /* [retval][out] */ IDAUserData **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UntilNotify )( 
            IDAStatics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDAUntilNotifier *notifier_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Until )( 
            IDAStatics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDABehavior *b1_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *UntilEx )( 
            IDAStatics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [retval][out] */ IDABehavior **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Sequence )( 
            IDAStatics * This,
            /* [in] */ IDABehavior *s1_0,
            /* [in] */ IDABehavior *s2_1,
            /* [retval][out] */ IDABehavior **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPath )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngle )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUpright )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathEval )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleEval )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUprightEval )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAnim )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleAnim )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUprightAnim )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ConcatString )( 
            IDAStatics * This,
            /* [in] */ IDAString *s1_0,
            /* [in] */ IDAString *s2_1,
            /* [retval][out] */ IDAString **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PerspectiveCamera )( 
            IDAStatics * This,
            /* [in] */ double focalDist_0,
            /* [in] */ double nearClip_1,
            /* [retval][out] */ IDACamera **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PerspectiveCameraAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *focalDist_0,
            /* [in] */ IDANumber *nearClip_1,
            /* [retval][out] */ IDACamera **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelCamera )( 
            IDAStatics * This,
            /* [in] */ double nearClip_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelCameraAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *nearClip_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgbAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *red_0,
            /* [in] */ IDANumber *green_1,
            /* [in] */ IDANumber *blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgb )( 
            IDAStatics * This,
            /* [in] */ double red_0,
            /* [in] */ double green_1,
            /* [in] */ double blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgb255 )( 
            IDAStatics * This,
            /* [in] */ short red_0,
            /* [in] */ short green_1,
            /* [in] */ short blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorHsl )( 
            IDAStatics * This,
            /* [in] */ double hue_0,
            /* [in] */ double saturation_1,
            /* [in] */ double lum_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorHslAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *hue_0,
            /* [in] */ IDANumber *saturation_1,
            /* [in] */ IDANumber *lum_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Red )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Green )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blue )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cyan )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Magenta )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Yellow )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Black )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_White )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Aqua )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Fuchsia )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Gray )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lime )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Maroon )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Navy )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Olive )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Purple )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Silver )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Teal )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Predicate )( 
            IDAStatics * This,
            /* [in] */ IDABoolean *b_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *NotEvent )( 
            IDAStatics * This,
            /* [in] */ IDAEvent *event_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AndEvent )( 
            IDAStatics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *OrEvent )( 
            IDAStatics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ThenEvent )( 
            IDAStatics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonDown )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonUp )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonDown )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonUp )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Always )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Never )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *TimerAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Timer )( 
            IDAStatics * This,
            /* [in] */ double n_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AppTriggeredEvent )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ScriptCallback )( 
            IDAStatics * This,
            /* [in] */ BSTR obsolete1_0,
            /* [in] */ IDAEvent *obsolete2_1,
            /* [in] */ BSTR obsolete3_2,
            /* [retval][out] */ IDAEvent **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyGeometry )( 
            IDAStatics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UnionGeometry )( 
            IDAStatics * This,
            /* [in] */ IDAGeometry *g1_0,
            /* [in] */ IDAGeometry *g2_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *UnionGeometryArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAGeometry *imgs_0[  ],
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UnionGeometryArray )( 
            IDAStatics * This,
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyImage )( 
            IDAStatics * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectableEmptyImage )( 
            IDAStatics * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *SolidColorImage )( 
            IDAStatics * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *GradientPolygonEx )( 
            IDAStatics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG colors_1size,
            /* [size_is][in] */ IDAColor *colors_1[  ],
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GradientPolygon )( 
            IDAStatics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT colors_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonEx )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygon )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonAnimEx )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *GradientSquare )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lowerLeft_0,
            /* [in] */ IDAColor *upperLeft_1,
            /* [in] */ IDAColor *upperRight_2,
            /* [in] */ IDAColor *lowerRight_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientSquare )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientSquareAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientRegularPoly )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double numEdges_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientRegularPolyAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *numEdges_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *GradientHorizontal )( 
            IDAStatics * This,
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *GradientHorizontalAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *HatchHorizontal )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchHorizontalAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchVertical )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchVerticalAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchForwardDiagonal )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchForwardDiagonalAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchBackwardDiagonal )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchBackwardDiagonalAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchCross )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchCrossAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchDiagonalCross )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchDiagonalCrossAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Overlay )( 
            IDAStatics * This,
            /* [in] */ IDAImage *top_0,
            /* [in] */ IDAImage *bottom_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *OverlayArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAImage *imgs_0[  ],
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OverlayArray )( 
            IDAStatics * This,
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AmbientLight )( 
            IDAStatics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DirectionalLight )( 
            IDAStatics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PointLight )( 
            IDAStatics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *SpotLightAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ IDANumber *cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SpotLight )( 
            IDAStatics * This,
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ double cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultLineStyle )( 
            IDAStatics * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyLineStyle )( 
            IDAStatics * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleBevel )( 
            IDAStatics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleRound )( 
            IDAStatics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleMiter )( 
            IDAStatics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleFlat )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleSquare )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleRound )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyleSolid )( 
            IDAStatics * This,
            /* [retval][out] */ IDADashStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyleDashed )( 
            IDAStatics * This,
            /* [retval][out] */ IDADashStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultMicrophone )( 
            IDAStatics * This,
            /* [retval][out] */ IDAMicrophone **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueMatte )( 
            IDAStatics * This,
            /* [retval][out] */ IDAMatte **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClearMatte )( 
            IDAStatics * This,
            /* [retval][out] */ IDAMatte **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMatte )( 
            IDAStatics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *IntersectMatte )( 
            IDAStatics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DifferenceMatte )( 
            IDAStatics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FillMatte )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *p_0,
            /* [retval][out] */ IDAMatte **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TextMatte )( 
            IDAStatics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyMontage )( 
            IDAStatics * This,
            /* [retval][out] */ IDAMontage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ImageMontage )( 
            IDAStatics * This,
            /* [in] */ IDAImage *im_0,
            /* [in] */ double depth_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ImageMontageAnim )( 
            IDAStatics * This,
            /* [in] */ IDAImage *im_0,
            /* [in] */ IDANumber *depth_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMontage )( 
            IDAStatics * This,
            /* [in] */ IDAMontage *m1_0,
            /* [in] */ IDAMontage *m2_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Concat )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *p1_0,
            /* [in] */ IDAPath2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ConcatArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG paths_0size,
            /* [size_is][in] */ IDAPath2 *paths_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ConcatArray )( 
            IDAStatics * This,
            /* [in] */ VARIANT paths_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Line )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Ray )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *pt_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *StringPathAnim )( 
            IDAStatics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *StringPath )( 
            IDAStatics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolylineEx )( 
            IDAStatics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Polyline )( 
            IDAStatics * This,
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolydrawPathEx )( 
            IDAStatics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG codes_1size,
            /* [size_is][in] */ IDANumber *codes_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PolydrawPath )( 
            IDAStatics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT codes_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadians )( 
            IDAStatics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadiansAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ArcDegrees )( 
            IDAStatics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadians )( 
            IDAStatics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadiansAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieDegrees )( 
            IDAStatics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *Oval )( 
            IDAStatics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *OvalAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rect )( 
            IDAStatics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RectAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRect )( 
            IDAStatics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [in] */ double cornerArcWidth_2,
            /* [in] */ double cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRectAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [in] */ IDANumber *cornerArcWidth_2,
            /* [in] */ IDANumber *cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *CubicBSplinePathEx )( 
            IDAStatics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG knots_1size,
            /* [size_is][in] */ IDANumber *knots_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *CubicBSplinePath )( 
            IDAStatics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT knots_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextPath )( 
            IDAStatics * This,
            /* [in] */ IDAString *obsolete1_0,
            /* [in] */ IDAFontStyle *obsolete2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Silence )( 
            IDAStatics * This,
            /* [retval][out] */ IDASound **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *MixArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG snds_0size,
            /* [size_is][in] */ IDASound *snds_0[  ],
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MixArray )( 
            IDAStatics * This,
            /* [in] */ VARIANT snds_0,
            /* [retval][out] */ IDASound **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SinSynth )( 
            IDAStatics * This,
            /* [retval][out] */ IDASound **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFont )( 
            IDAStatics * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *FontAnim )( 
            IDAStatics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDANumber *size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Font )( 
            IDAStatics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ double size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *StringImageAnim )( 
            IDAStatics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *StringImage )( 
            IDAStatics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextImageAnim )( 
            IDAStatics * This,
            /* [in] */ IDAString *obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextImage )( 
            IDAStatics * This,
            /* [in] */ BSTR obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XVector2 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YVector2 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZeroVector2 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Origin2 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2 )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2 )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2PolarAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2Polar )( 
            IDAStatics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2PolarDegrees )( 
            IDAStatics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2PolarAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2Polar )( 
            IDAStatics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DotVector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [in] */ IDAVector2 *u_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NegVector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SubVector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddVector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddPoint2Vector )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint2Vector )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint2 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistancePoint2 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistanceSquaredPoint2 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XVector3 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YVector3 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZVector3 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZeroVector3 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Origin3 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAPoint3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3 )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3 )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3SphericalAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *xyAngle_0,
            /* [in] */ IDANumber *yzAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3Spherical )( 
            IDAStatics * This,
            /* [in] */ double xyAngle_0,
            /* [in] */ double yzAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3SphericalAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *zxAngle_0,
            /* [in] */ IDANumber *xyAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3Spherical )( 
            IDAStatics * This,
            /* [in] */ double zxAngle_0,
            /* [in] */ double xyAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *DotVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *CrossVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NegVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SubVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddPoint3Vector )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint3Vector )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint3 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *p1_0,
            /* [in] */ IDAPoint3 *p2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistancePoint3 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistanceSquaredPoint3 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentityTransform3 )( 
            IDAStatics * This,
            /* [retval][out] */ IDATransform3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *tx_0,
            /* [in] */ IDANumber *ty_1,
            /* [in] */ IDANumber *tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3 )( 
            IDAStatics * This,
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Rate )( 
            IDAStatics * This,
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Vector )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *delta_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Point )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *new_origin_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3 )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Rate )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Vector )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *scale_vec_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3UniformAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Uniform )( 
            IDAStatics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3UniformRate )( 
            IDAStatics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Anim )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ IDANumber *angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Rate )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Degrees )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3RateDegrees )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3 )( 
            IDAStatics * This,
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3Rate )( 
            IDAStatics * This,
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *c_0,
            /* [in] */ IDANumber *d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3 )( 
            IDAStatics * This,
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3Rate )( 
            IDAStatics * This,
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *e_0,
            /* [in] */ IDANumber *f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3 )( 
            IDAStatics * This,
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3Rate )( 
            IDAStatics * This,
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Transform4x4AnimEx )( 
            IDAStatics * This,
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform4x4Anim )( 
            IDAStatics * This,
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose3 )( 
            IDAStatics * This,
            /* [in] */ IDATransform3 *a_0,
            /* [in] */ IDATransform3 *b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Compose3ArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform3 *xfs_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose3Array )( 
            IDAStatics * This,
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LookAtFrom )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *to_0,
            /* [in] */ IDAPoint3 *from_1,
            /* [in] */ IDAVector3 *up_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentityTransform2 )( 
            IDAStatics * This,
            /* [retval][out] */ IDATransform2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *Tx_0,
            /* [in] */ IDANumber *Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2 )( 
            IDAStatics * This,
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Rate )( 
            IDAStatics * This,
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Vector )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *delta_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Point )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *pos_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2 )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Rate )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Vector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *obsoleteMethod_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Vector )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *scale_vec_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2UniformAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Uniform )( 
            IDAStatics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2UniformRate )( 
            IDAStatics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2 )( 
            IDAStatics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Rate )( 
            IDAStatics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Degrees )( 
            IDAStatics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2RateDegrees )( 
            IDAStatics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2 )( 
            IDAStatics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2Rate )( 
            IDAStatics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2 )( 
            IDAStatics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2Rate )( 
            IDAStatics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Transform3x2AnimEx )( 
            IDAStatics * This,
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform3x2Anim )( 
            IDAStatics * This,
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose2 )( 
            IDAStatics * This,
            /* [in] */ IDATransform2 *a_0,
            /* [in] */ IDATransform2 *b_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Compose2ArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform2 *xfs_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose2Array )( 
            IDAStatics * This,
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Tuple )( 
            IDAStatics * This,
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDATuple **obsolete2);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Array )( 
            IDAStatics * This,
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDAArray **obsolete2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AreBlockingImportsComplete )( 
            IDAStatics * This,
            /* [retval][out] */ VARIANT_BOOL *bComplete);
        
        END_INTERFACE
    } IDAStaticsVtbl;

    interface IDAStatics
    {
        CONST_VTBL struct IDAStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAStatics_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAStatics_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAStatics_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAStatics_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAStatics_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAStatics_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAStatics_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAStatics_get_VersionString(This,str)	\
    (This)->lpVtbl -> get_VersionString(This,str)

#define IDAStatics_get_Site(This,pSite)	\
    (This)->lpVtbl -> get_Site(This,pSite)

#define IDAStatics_put_Site(This,pSite)	\
    (This)->lpVtbl -> put_Site(This,pSite)

#define IDAStatics_put_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> put_ClientSite(This,pClientSite)

#define IDAStatics_get_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> get_ClientSite(This,pClientSite)

#define IDAStatics_put_PixelConstructionMode(This,bMode)	\
    (This)->lpVtbl -> put_PixelConstructionMode(This,bMode)

#define IDAStatics_get_PixelConstructionMode(This,bMode)	\
    (This)->lpVtbl -> get_PixelConstructionMode(This,bMode)

#define IDAStatics_TriggerEvent(This,event,data)	\
    (This)->lpVtbl -> TriggerEvent(This,event,data)

#define IDAStatics_NewDrawingSurface(This,pds)	\
    (This)->lpVtbl -> NewDrawingSurface(This,pds)

#define IDAStatics_ImportMovie(This,url,ppResult)	\
    (This)->lpVtbl -> ImportMovie(This,url,ppResult)

#define IDAStatics_ImportMovieAsync(This,url,pImageStandIn,pSoundStandIn,ppResult)	\
    (This)->lpVtbl -> ImportMovieAsync(This,url,pImageStandIn,pSoundStandIn,ppResult)

#define IDAStatics_ImportImage(This,url,ppImage)	\
    (This)->lpVtbl -> ImportImage(This,url,ppImage)

#define IDAStatics_ImportImageAsync(This,url,pImageStandIn,ppResult)	\
    (This)->lpVtbl -> ImportImageAsync(This,url,pImageStandIn,ppResult)

#define IDAStatics_ImportImageColorKey(This,url,colorKeyRed,colorKeyGreen,colorKeyBlue,ppImage)	\
    (This)->lpVtbl -> ImportImageColorKey(This,url,colorKeyRed,colorKeyGreen,colorKeyBlue,ppImage)

#define IDAStatics_ImportImageAsyncColorKey(This,url,pImageStandIn,colorKeyRed,colorKeyGreen,colorKeyBlue,ppResult)	\
    (This)->lpVtbl -> ImportImageAsyncColorKey(This,url,pImageStandIn,colorKeyRed,colorKeyGreen,colorKeyBlue,ppResult)

#define IDAStatics_ImportSound(This,url,ppResult)	\
    (This)->lpVtbl -> ImportSound(This,url,ppResult)

#define IDAStatics_ImportSoundAsync(This,url,pSoundStandIn,ppResult)	\
    (This)->lpVtbl -> ImportSoundAsync(This,url,pSoundStandIn,ppResult)

#define IDAStatics_ImportGeometry(This,url,ppGeometry)	\
    (This)->lpVtbl -> ImportGeometry(This,url,ppGeometry)

#define IDAStatics_ImportGeometryAsync(This,url,pGeoStandIn,ppResult)	\
    (This)->lpVtbl -> ImportGeometryAsync(This,url,pGeoStandIn,ppResult)

#define IDAStatics_ImportDirectDrawSurface(This,dds,updateEvent,ppImage)	\
    (This)->lpVtbl -> ImportDirectDrawSurface(This,dds,updateEvent,ppImage)

#define IDAStatics_Cond(This,c,i,e,pCondBvr)	\
    (This)->lpVtbl -> Cond(This,c,i,e,pCondBvr)

#define IDAStatics_DAArrayEx(This,s,pBvrs,bvr)	\
    (This)->lpVtbl -> DAArrayEx(This,s,pBvrs,bvr)

#define IDAStatics_DAArray(This,bvrs,bvr)	\
    (This)->lpVtbl -> DAArray(This,bvrs,bvr)

#define IDAStatics_DATupleEx(This,s,pBvrs,bvr)	\
    (This)->lpVtbl -> DATupleEx(This,s,pBvrs,bvr)

#define IDAStatics_DATuple(This,bvrs,bvr)	\
    (This)->lpVtbl -> DATuple(This,bvrs,bvr)

#define IDAStatics_ModifiableBehavior(This,orig,bvr)	\
    (This)->lpVtbl -> ModifiableBehavior(This,orig,bvr)

#define IDAStatics_UninitializedArray(This,typeTmp,bvr)	\
    (This)->lpVtbl -> UninitializedArray(This,typeTmp,bvr)

#define IDAStatics_UninitializedTuple(This,typeTmp,bvr)	\
    (This)->lpVtbl -> UninitializedTuple(This,typeTmp,bvr)

#define IDAStatics_NumberBSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> NumberBSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDAStatics_NumberBSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> NumberBSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDAStatics_Point2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDAStatics_Point2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDAStatics_Point3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDAStatics_Point3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDAStatics_Vector2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDAStatics_Vector2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDAStatics_Vector3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDAStatics_Vector3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDAStatics_Pow(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Pow(This,a_0,b_1,ret_2)

#define IDAStatics_Abs(This,a_0,ret_1)	\
    (This)->lpVtbl -> Abs(This,a_0,ret_1)

#define IDAStatics_Sqrt(This,a_0,ret_1)	\
    (This)->lpVtbl -> Sqrt(This,a_0,ret_1)

#define IDAStatics_Floor(This,a_0,ret_1)	\
    (This)->lpVtbl -> Floor(This,a_0,ret_1)

#define IDAStatics_Round(This,a_0,ret_1)	\
    (This)->lpVtbl -> Round(This,a_0,ret_1)

#define IDAStatics_Ceiling(This,a_0,ret_1)	\
    (This)->lpVtbl -> Ceiling(This,a_0,ret_1)

#define IDAStatics_Asin(This,a_0,ret_1)	\
    (This)->lpVtbl -> Asin(This,a_0,ret_1)

#define IDAStatics_Acos(This,a_0,ret_1)	\
    (This)->lpVtbl -> Acos(This,a_0,ret_1)

#define IDAStatics_Atan(This,a_0,ret_1)	\
    (This)->lpVtbl -> Atan(This,a_0,ret_1)

#define IDAStatics_Sin(This,a_0,ret_1)	\
    (This)->lpVtbl -> Sin(This,a_0,ret_1)

#define IDAStatics_Cos(This,a_0,ret_1)	\
    (This)->lpVtbl -> Cos(This,a_0,ret_1)

#define IDAStatics_Tan(This,a_0,ret_1)	\
    (This)->lpVtbl -> Tan(This,a_0,ret_1)

#define IDAStatics_Exp(This,a_0,ret_1)	\
    (This)->lpVtbl -> Exp(This,a_0,ret_1)

#define IDAStatics_Ln(This,a_0,ret_1)	\
    (This)->lpVtbl -> Ln(This,a_0,ret_1)

#define IDAStatics_Log10(This,a_0,ret_1)	\
    (This)->lpVtbl -> Log10(This,a_0,ret_1)

#define IDAStatics_ToDegrees(This,a_0,ret_1)	\
    (This)->lpVtbl -> ToDegrees(This,a_0,ret_1)

#define IDAStatics_ToRadians(This,a_0,ret_1)	\
    (This)->lpVtbl -> ToRadians(This,a_0,ret_1)

#define IDAStatics_Mod(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Mod(This,a_0,b_1,ret_2)

#define IDAStatics_Atan2(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Atan2(This,a_0,b_1,ret_2)

#define IDAStatics_Add(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Add(This,a_0,b_1,ret_2)

#define IDAStatics_Sub(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Sub(This,a_0,b_1,ret_2)

#define IDAStatics_Mul(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Mul(This,a_0,b_1,ret_2)

#define IDAStatics_Div(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Div(This,a_0,b_1,ret_2)

#define IDAStatics_LT(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> LT(This,a_0,b_1,ret_2)

#define IDAStatics_LTE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> LTE(This,a_0,b_1,ret_2)

#define IDAStatics_GT(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> GT(This,a_0,b_1,ret_2)

#define IDAStatics_GTE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> GTE(This,a_0,b_1,ret_2)

#define IDAStatics_EQ(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> EQ(This,a_0,b_1,ret_2)

#define IDAStatics_NE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> NE(This,a_0,b_1,ret_2)

#define IDAStatics_Neg(This,a_0,ret_1)	\
    (This)->lpVtbl -> Neg(This,a_0,ret_1)

#define IDAStatics_InterpolateAnim(This,from_0,to_1,duration_2,ret_3)	\
    (This)->lpVtbl -> InterpolateAnim(This,from_0,to_1,duration_2,ret_3)

#define IDAStatics_Interpolate(This,from_0,to_1,duration_2,ret_3)	\
    (This)->lpVtbl -> Interpolate(This,from_0,to_1,duration_2,ret_3)

#define IDAStatics_SlowInSlowOutAnim(This,from_0,to_1,duration_2,sharpness_3,ret_4)	\
    (This)->lpVtbl -> SlowInSlowOutAnim(This,from_0,to_1,duration_2,sharpness_3,ret_4)

#define IDAStatics_SlowInSlowOut(This,from_0,to_1,duration_2,sharpness_3,ret_4)	\
    (This)->lpVtbl -> SlowInSlowOut(This,from_0,to_1,duration_2,sharpness_3,ret_4)

#define IDAStatics_SoundSource(This,snd_0,ret_1)	\
    (This)->lpVtbl -> SoundSource(This,snd_0,ret_1)

#define IDAStatics_Mix(This,left_0,right_1,ret_2)	\
    (This)->lpVtbl -> Mix(This,left_0,right_1,ret_2)

#define IDAStatics_And(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> And(This,a_0,b_1,ret_2)

#define IDAStatics_Or(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Or(This,a_0,b_1,ret_2)

#define IDAStatics_Not(This,a_0,ret_1)	\
    (This)->lpVtbl -> Not(This,a_0,ret_1)

#define IDAStatics_Integral(This,b_0,ret_1)	\
    (This)->lpVtbl -> Integral(This,b_0,ret_1)

#define IDAStatics_Derivative(This,b_0,ret_1)	\
    (This)->lpVtbl -> Derivative(This,b_0,ret_1)

#define IDAStatics_IntegralVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> IntegralVector2(This,v_0,ret_1)

#define IDAStatics_IntegralVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> IntegralVector3(This,v_0,ret_1)

#define IDAStatics_DerivativeVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativeVector2(This,v_0,ret_1)

#define IDAStatics_DerivativeVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativeVector3(This,v_0,ret_1)

#define IDAStatics_DerivativePoint2(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativePoint2(This,v_0,ret_1)

#define IDAStatics_DerivativePoint3(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativePoint3(This,v_0,ret_1)

#define IDAStatics_KeyState(This,n_0,ret_1)	\
    (This)->lpVtbl -> KeyState(This,n_0,ret_1)

#define IDAStatics_KeyUp(This,arg_0,ret_1)	\
    (This)->lpVtbl -> KeyUp(This,arg_0,ret_1)

#define IDAStatics_KeyDown(This,arg_0,ret_1)	\
    (This)->lpVtbl -> KeyDown(This,arg_0,ret_1)

#define IDAStatics_DANumber(This,num_0,ret_1)	\
    (This)->lpVtbl -> DANumber(This,num_0,ret_1)

#define IDAStatics_DAString(This,str_0,ret_1)	\
    (This)->lpVtbl -> DAString(This,str_0,ret_1)

#define IDAStatics_DABoolean(This,num_0,ret_1)	\
    (This)->lpVtbl -> DABoolean(This,num_0,ret_1)

#define IDAStatics_SeededRandom(This,arg_0,ret_1)	\
    (This)->lpVtbl -> SeededRandom(This,arg_0,ret_1)

#define IDAStatics_get_MousePosition(This,ret_0)	\
    (This)->lpVtbl -> get_MousePosition(This,ret_0)

#define IDAStatics_get_LeftButtonState(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonState(This,ret_0)

#define IDAStatics_get_RightButtonState(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonState(This,ret_0)

#define IDAStatics_get_DATrue(This,ret_0)	\
    (This)->lpVtbl -> get_DATrue(This,ret_0)

#define IDAStatics_get_DAFalse(This,ret_0)	\
    (This)->lpVtbl -> get_DAFalse(This,ret_0)

#define IDAStatics_get_LocalTime(This,ret_0)	\
    (This)->lpVtbl -> get_LocalTime(This,ret_0)

#define IDAStatics_get_GlobalTime(This,ret_0)	\
    (This)->lpVtbl -> get_GlobalTime(This,ret_0)

#define IDAStatics_get_Pixel(This,ret_0)	\
    (This)->lpVtbl -> get_Pixel(This,ret_0)

#define IDAStatics_UserData(This,data_0,ret_1)	\
    (This)->lpVtbl -> UserData(This,data_0,ret_1)

#define IDAStatics_UntilNotify(This,b0_0,event_1,notifier_2,ret_3)	\
    (This)->lpVtbl -> UntilNotify(This,b0_0,event_1,notifier_2,ret_3)

#define IDAStatics_Until(This,b0_0,event_1,b1_2,ret_3)	\
    (This)->lpVtbl -> Until(This,b0_0,event_1,b1_2,ret_3)

#define IDAStatics_UntilEx(This,b0_0,event_1,ret_2)	\
    (This)->lpVtbl -> UntilEx(This,b0_0,event_1,ret_2)

#define IDAStatics_Sequence(This,s1_0,s2_1,ret_2)	\
    (This)->lpVtbl -> Sequence(This,s1_0,s2_1,ret_2)

#define IDAStatics_FollowPath(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPath(This,path_0,duration_1,ret_2)

#define IDAStatics_FollowPathAngle(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngle(This,path_0,duration_1,ret_2)

#define IDAStatics_FollowPathAngleUpright(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUpright(This,path_0,duration_1,ret_2)

#define IDAStatics_FollowPathEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathEval(This,path_0,eval_1,ret_2)

#define IDAStatics_FollowPathAngleEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleEval(This,path_0,eval_1,ret_2)

#define IDAStatics_FollowPathAngleUprightEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUprightEval(This,path_0,eval_1,ret_2)

#define IDAStatics_FollowPathAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDAStatics_FollowPathAngleAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDAStatics_FollowPathAngleUprightAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUprightAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDAStatics_ConcatString(This,s1_0,s2_1,ret_2)	\
    (This)->lpVtbl -> ConcatString(This,s1_0,s2_1,ret_2)

#define IDAStatics_PerspectiveCamera(This,focalDist_0,nearClip_1,ret_2)	\
    (This)->lpVtbl -> PerspectiveCamera(This,focalDist_0,nearClip_1,ret_2)

#define IDAStatics_PerspectiveCameraAnim(This,focalDist_0,nearClip_1,ret_2)	\
    (This)->lpVtbl -> PerspectiveCameraAnim(This,focalDist_0,nearClip_1,ret_2)

#define IDAStatics_ParallelCamera(This,nearClip_0,ret_1)	\
    (This)->lpVtbl -> ParallelCamera(This,nearClip_0,ret_1)

#define IDAStatics_ParallelCameraAnim(This,nearClip_0,ret_1)	\
    (This)->lpVtbl -> ParallelCameraAnim(This,nearClip_0,ret_1)

#define IDAStatics_ColorRgbAnim(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgbAnim(This,red_0,green_1,blue_2,ret_3)

#define IDAStatics_ColorRgb(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgb(This,red_0,green_1,blue_2,ret_3)

#define IDAStatics_ColorRgb255(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgb255(This,red_0,green_1,blue_2,ret_3)

#define IDAStatics_ColorHsl(This,hue_0,saturation_1,lum_2,ret_3)	\
    (This)->lpVtbl -> ColorHsl(This,hue_0,saturation_1,lum_2,ret_3)

#define IDAStatics_ColorHslAnim(This,hue_0,saturation_1,lum_2,ret_3)	\
    (This)->lpVtbl -> ColorHslAnim(This,hue_0,saturation_1,lum_2,ret_3)

#define IDAStatics_get_Red(This,ret_0)	\
    (This)->lpVtbl -> get_Red(This,ret_0)

#define IDAStatics_get_Green(This,ret_0)	\
    (This)->lpVtbl -> get_Green(This,ret_0)

#define IDAStatics_get_Blue(This,ret_0)	\
    (This)->lpVtbl -> get_Blue(This,ret_0)

#define IDAStatics_get_Cyan(This,ret_0)	\
    (This)->lpVtbl -> get_Cyan(This,ret_0)

#define IDAStatics_get_Magenta(This,ret_0)	\
    (This)->lpVtbl -> get_Magenta(This,ret_0)

#define IDAStatics_get_Yellow(This,ret_0)	\
    (This)->lpVtbl -> get_Yellow(This,ret_0)

#define IDAStatics_get_Black(This,ret_0)	\
    (This)->lpVtbl -> get_Black(This,ret_0)

#define IDAStatics_get_White(This,ret_0)	\
    (This)->lpVtbl -> get_White(This,ret_0)

#define IDAStatics_get_Aqua(This,ret_0)	\
    (This)->lpVtbl -> get_Aqua(This,ret_0)

#define IDAStatics_get_Fuchsia(This,ret_0)	\
    (This)->lpVtbl -> get_Fuchsia(This,ret_0)

#define IDAStatics_get_Gray(This,ret_0)	\
    (This)->lpVtbl -> get_Gray(This,ret_0)

#define IDAStatics_get_Lime(This,ret_0)	\
    (This)->lpVtbl -> get_Lime(This,ret_0)

#define IDAStatics_get_Maroon(This,ret_0)	\
    (This)->lpVtbl -> get_Maroon(This,ret_0)

#define IDAStatics_get_Navy(This,ret_0)	\
    (This)->lpVtbl -> get_Navy(This,ret_0)

#define IDAStatics_get_Olive(This,ret_0)	\
    (This)->lpVtbl -> get_Olive(This,ret_0)

#define IDAStatics_get_Purple(This,ret_0)	\
    (This)->lpVtbl -> get_Purple(This,ret_0)

#define IDAStatics_get_Silver(This,ret_0)	\
    (This)->lpVtbl -> get_Silver(This,ret_0)

#define IDAStatics_get_Teal(This,ret_0)	\
    (This)->lpVtbl -> get_Teal(This,ret_0)

#define IDAStatics_Predicate(This,b_0,ret_1)	\
    (This)->lpVtbl -> Predicate(This,b_0,ret_1)

#define IDAStatics_NotEvent(This,event_0,ret_1)	\
    (This)->lpVtbl -> NotEvent(This,event_0,ret_1)

#define IDAStatics_AndEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> AndEvent(This,e1_0,e2_1,ret_2)

#define IDAStatics_OrEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> OrEvent(This,e1_0,e2_1,ret_2)

#define IDAStatics_ThenEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> ThenEvent(This,e1_0,e2_1,ret_2)

#define IDAStatics_get_LeftButtonDown(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonDown(This,ret_0)

#define IDAStatics_get_LeftButtonUp(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonUp(This,ret_0)

#define IDAStatics_get_RightButtonDown(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonDown(This,ret_0)

#define IDAStatics_get_RightButtonUp(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonUp(This,ret_0)

#define IDAStatics_get_Always(This,ret_0)	\
    (This)->lpVtbl -> get_Always(This,ret_0)

#define IDAStatics_get_Never(This,ret_0)	\
    (This)->lpVtbl -> get_Never(This,ret_0)

#define IDAStatics_TimerAnim(This,n_0,ret_1)	\
    (This)->lpVtbl -> TimerAnim(This,n_0,ret_1)

#define IDAStatics_Timer(This,n_0,ret_1)	\
    (This)->lpVtbl -> Timer(This,n_0,ret_1)

#define IDAStatics_AppTriggeredEvent(This,ret_0)	\
    (This)->lpVtbl -> AppTriggeredEvent(This,ret_0)

#define IDAStatics_ScriptCallback(This,obsolete1_0,obsolete2_1,obsolete3_2,ret_3)	\
    (This)->lpVtbl -> ScriptCallback(This,obsolete1_0,obsolete2_1,obsolete3_2,ret_3)

#define IDAStatics_get_EmptyGeometry(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyGeometry(This,ret_0)

#define IDAStatics_UnionGeometry(This,g1_0,g2_1,ret_2)	\
    (This)->lpVtbl -> UnionGeometry(This,g1_0,g2_1,ret_2)

#define IDAStatics_UnionGeometryArrayEx(This,imgs_0size,imgs_0,ret_1)	\
    (This)->lpVtbl -> UnionGeometryArrayEx(This,imgs_0size,imgs_0,ret_1)

#define IDAStatics_UnionGeometryArray(This,imgs_0,ret_1)	\
    (This)->lpVtbl -> UnionGeometryArray(This,imgs_0,ret_1)

#define IDAStatics_get_EmptyImage(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyImage(This,ret_0)

#define IDAStatics_get_DetectableEmptyImage(This,ret_0)	\
    (This)->lpVtbl -> get_DetectableEmptyImage(This,ret_0)

#define IDAStatics_SolidColorImage(This,col_0,ret_1)	\
    (This)->lpVtbl -> SolidColorImage(This,col_0,ret_1)

#define IDAStatics_GradientPolygonEx(This,points_0size,points_0,colors_1size,colors_1,ret_2)	\
    (This)->lpVtbl -> GradientPolygonEx(This,points_0size,points_0,colors_1size,colors_1,ret_2)

#define IDAStatics_GradientPolygon(This,points_0,colors_1,ret_2)	\
    (This)->lpVtbl -> GradientPolygon(This,points_0,colors_1,ret_2)

#define IDAStatics_RadialGradientPolygonEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)

#define IDAStatics_RadialGradientPolygon(This,inner_0,outer_1,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygon(This,inner_0,outer_1,points_2,fallOff_3,ret_4)

#define IDAStatics_RadialGradientPolygonAnimEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonAnimEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)

#define IDAStatics_RadialGradientPolygonAnim(This,inner_0,outer_1,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonAnim(This,inner_0,outer_1,points_2,fallOff_3,ret_4)

#define IDAStatics_GradientSquare(This,lowerLeft_0,upperLeft_1,upperRight_2,lowerRight_3,ret_4)	\
    (This)->lpVtbl -> GradientSquare(This,lowerLeft_0,upperLeft_1,upperRight_2,lowerRight_3,ret_4)

#define IDAStatics_RadialGradientSquare(This,inner_0,outer_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> RadialGradientSquare(This,inner_0,outer_1,fallOff_2,ret_3)

#define IDAStatics_RadialGradientSquareAnim(This,inner_0,outer_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> RadialGradientSquareAnim(This,inner_0,outer_1,fallOff_2,ret_3)

#define IDAStatics_RadialGradientRegularPoly(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientRegularPoly(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)

#define IDAStatics_RadialGradientRegularPolyAnim(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientRegularPolyAnim(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)

#define IDAStatics_GradientHorizontal(This,start_0,stop_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> GradientHorizontal(This,start_0,stop_1,fallOff_2,ret_3)

#define IDAStatics_GradientHorizontalAnim(This,start_0,stop_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> GradientHorizontalAnim(This,start_0,stop_1,fallOff_2,ret_3)

#define IDAStatics_HatchHorizontal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchHorizontal(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchHorizontalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchHorizontalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchVertical(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchVertical(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchVerticalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchVerticalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchForwardDiagonal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchForwardDiagonal(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchForwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchForwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchBackwardDiagonal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchBackwardDiagonal(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchBackwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchBackwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchCross(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchCross(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchCrossAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchCrossAnim(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchDiagonalCross(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchDiagonalCross(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchDiagonalCrossAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchDiagonalCrossAnim(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_Overlay(This,top_0,bottom_1,ret_2)	\
    (This)->lpVtbl -> Overlay(This,top_0,bottom_1,ret_2)

#define IDAStatics_OverlayArrayEx(This,imgs_0size,imgs_0,ret_1)	\
    (This)->lpVtbl -> OverlayArrayEx(This,imgs_0size,imgs_0,ret_1)

#define IDAStatics_OverlayArray(This,imgs_0,ret_1)	\
    (This)->lpVtbl -> OverlayArray(This,imgs_0,ret_1)

#define IDAStatics_get_AmbientLight(This,ret_0)	\
    (This)->lpVtbl -> get_AmbientLight(This,ret_0)

#define IDAStatics_get_DirectionalLight(This,ret_0)	\
    (This)->lpVtbl -> get_DirectionalLight(This,ret_0)

#define IDAStatics_get_PointLight(This,ret_0)	\
    (This)->lpVtbl -> get_PointLight(This,ret_0)

#define IDAStatics_SpotLightAnim(This,fullcone_0,cutoff_1,ret_2)	\
    (This)->lpVtbl -> SpotLightAnim(This,fullcone_0,cutoff_1,ret_2)

#define IDAStatics_SpotLight(This,fullcone_0,cutoff_1,ret_2)	\
    (This)->lpVtbl -> SpotLight(This,fullcone_0,cutoff_1,ret_2)

#define IDAStatics_get_DefaultLineStyle(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultLineStyle(This,ret_0)

#define IDAStatics_get_EmptyLineStyle(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyLineStyle(This,ret_0)

#define IDAStatics_get_JoinStyleBevel(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleBevel(This,ret_0)

#define IDAStatics_get_JoinStyleRound(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleRound(This,ret_0)

#define IDAStatics_get_JoinStyleMiter(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleMiter(This,ret_0)

#define IDAStatics_get_EndStyleFlat(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleFlat(This,ret_0)

#define IDAStatics_get_EndStyleSquare(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleSquare(This,ret_0)

#define IDAStatics_get_EndStyleRound(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleRound(This,ret_0)

#define IDAStatics_get_DashStyleSolid(This,ret_0)	\
    (This)->lpVtbl -> get_DashStyleSolid(This,ret_0)

#define IDAStatics_get_DashStyleDashed(This,ret_0)	\
    (This)->lpVtbl -> get_DashStyleDashed(This,ret_0)

#define IDAStatics_get_DefaultMicrophone(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultMicrophone(This,ret_0)

#define IDAStatics_get_OpaqueMatte(This,ret_0)	\
    (This)->lpVtbl -> get_OpaqueMatte(This,ret_0)

#define IDAStatics_get_ClearMatte(This,ret_0)	\
    (This)->lpVtbl -> get_ClearMatte(This,ret_0)

#define IDAStatics_UnionMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> UnionMatte(This,m1_0,m2_1,ret_2)

#define IDAStatics_IntersectMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> IntersectMatte(This,m1_0,m2_1,ret_2)

#define IDAStatics_DifferenceMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> DifferenceMatte(This,m1_0,m2_1,ret_2)

#define IDAStatics_FillMatte(This,p_0,ret_1)	\
    (This)->lpVtbl -> FillMatte(This,p_0,ret_1)

#define IDAStatics_TextMatte(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> TextMatte(This,str_0,fs_1,ret_2)

#define IDAStatics_get_EmptyMontage(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyMontage(This,ret_0)

#define IDAStatics_ImageMontage(This,im_0,depth_1,ret_2)	\
    (This)->lpVtbl -> ImageMontage(This,im_0,depth_1,ret_2)

#define IDAStatics_ImageMontageAnim(This,im_0,depth_1,ret_2)	\
    (This)->lpVtbl -> ImageMontageAnim(This,im_0,depth_1,ret_2)

#define IDAStatics_UnionMontage(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> UnionMontage(This,m1_0,m2_1,ret_2)

#define IDAStatics_Concat(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> Concat(This,p1_0,p2_1,ret_2)

#define IDAStatics_ConcatArrayEx(This,paths_0size,paths_0,ret_1)	\
    (This)->lpVtbl -> ConcatArrayEx(This,paths_0size,paths_0,ret_1)

#define IDAStatics_ConcatArray(This,paths_0,ret_1)	\
    (This)->lpVtbl -> ConcatArray(This,paths_0,ret_1)

#define IDAStatics_Line(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> Line(This,p1_0,p2_1,ret_2)

#define IDAStatics_Ray(This,pt_0,ret_1)	\
    (This)->lpVtbl -> Ray(This,pt_0,ret_1)

#define IDAStatics_StringPathAnim(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringPathAnim(This,str_0,fs_1,ret_2)

#define IDAStatics_StringPath(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringPath(This,str_0,fs_1,ret_2)

#define IDAStatics_PolylineEx(This,points_0size,points_0,ret_1)	\
    (This)->lpVtbl -> PolylineEx(This,points_0size,points_0,ret_1)

#define IDAStatics_Polyline(This,points_0,ret_1)	\
    (This)->lpVtbl -> Polyline(This,points_0,ret_1)

#define IDAStatics_PolydrawPathEx(This,points_0size,points_0,codes_1size,codes_1,ret_2)	\
    (This)->lpVtbl -> PolydrawPathEx(This,points_0size,points_0,codes_1size,codes_1,ret_2)

#define IDAStatics_PolydrawPath(This,points_0,codes_1,ret_2)	\
    (This)->lpVtbl -> PolydrawPath(This,points_0,codes_1,ret_2)

#define IDAStatics_ArcRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDAStatics_ArcRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDAStatics_ArcDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDAStatics_PieRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDAStatics_PieRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDAStatics_PieDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDAStatics_Oval(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> Oval(This,width_0,height_1,ret_2)

#define IDAStatics_OvalAnim(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> OvalAnim(This,width_0,height_1,ret_2)

#define IDAStatics_Rect(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> Rect(This,width_0,height_1,ret_2)

#define IDAStatics_RectAnim(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> RectAnim(This,width_0,height_1,ret_2)

#define IDAStatics_RoundRect(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)	\
    (This)->lpVtbl -> RoundRect(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)

#define IDAStatics_RoundRectAnim(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)	\
    (This)->lpVtbl -> RoundRectAnim(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)

#define IDAStatics_CubicBSplinePathEx(This,points_0size,points_0,knots_1size,knots_1,ret_2)	\
    (This)->lpVtbl -> CubicBSplinePathEx(This,points_0size,points_0,knots_1size,knots_1,ret_2)

#define IDAStatics_CubicBSplinePath(This,points_0,knots_1,ret_2)	\
    (This)->lpVtbl -> CubicBSplinePath(This,points_0,knots_1,ret_2)

#define IDAStatics_TextPath(This,obsolete1_0,obsolete2_1,ret_2)	\
    (This)->lpVtbl -> TextPath(This,obsolete1_0,obsolete2_1,ret_2)

#define IDAStatics_get_Silence(This,ret_0)	\
    (This)->lpVtbl -> get_Silence(This,ret_0)

#define IDAStatics_MixArrayEx(This,snds_0size,snds_0,ret_1)	\
    (This)->lpVtbl -> MixArrayEx(This,snds_0size,snds_0,ret_1)

#define IDAStatics_MixArray(This,snds_0,ret_1)	\
    (This)->lpVtbl -> MixArray(This,snds_0,ret_1)

#define IDAStatics_get_SinSynth(This,ret_0)	\
    (This)->lpVtbl -> get_SinSynth(This,ret_0)

#define IDAStatics_get_DefaultFont(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultFont(This,ret_0)

#define IDAStatics_FontAnim(This,str_0,size_1,col_2,ret_3)	\
    (This)->lpVtbl -> FontAnim(This,str_0,size_1,col_2,ret_3)

#define IDAStatics_Font(This,str_0,size_1,col_2,ret_3)	\
    (This)->lpVtbl -> Font(This,str_0,size_1,col_2,ret_3)

#define IDAStatics_StringImageAnim(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringImageAnim(This,str_0,fs_1,ret_2)

#define IDAStatics_StringImage(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringImage(This,str_0,fs_1,ret_2)

#define IDAStatics_TextImageAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> TextImageAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDAStatics_TextImage(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> TextImage(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDAStatics_get_XVector2(This,ret_0)	\
    (This)->lpVtbl -> get_XVector2(This,ret_0)

#define IDAStatics_get_YVector2(This,ret_0)	\
    (This)->lpVtbl -> get_YVector2(This,ret_0)

#define IDAStatics_get_ZeroVector2(This,ret_0)	\
    (This)->lpVtbl -> get_ZeroVector2(This,ret_0)

#define IDAStatics_get_Origin2(This,ret_0)	\
    (This)->lpVtbl -> get_Origin2(This,ret_0)

#define IDAStatics_Vector2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Vector2Anim(This,x_0,y_1,ret_2)

#define IDAStatics_Vector2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Vector2(This,x_0,y_1,ret_2)

#define IDAStatics_Point2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Point2Anim(This,x_0,y_1,ret_2)

#define IDAStatics_Point2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Point2(This,x_0,y_1,ret_2)

#define IDAStatics_Vector2PolarAnim(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2PolarAnim(This,theta_0,radius_1,ret_2)

#define IDAStatics_Vector2Polar(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2Polar(This,theta_0,radius_1,ret_2)

#define IDAStatics_Vector2PolarDegrees(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2PolarDegrees(This,theta_0,radius_1,ret_2)

#define IDAStatics_Point2PolarAnim(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Point2PolarAnim(This,theta_0,radius_1,ret_2)

#define IDAStatics_Point2Polar(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Point2Polar(This,theta_0,radius_1,ret_2)

#define IDAStatics_DotVector2(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> DotVector2(This,v_0,u_1,ret_2)

#define IDAStatics_NegVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> NegVector2(This,v_0,ret_1)

#define IDAStatics_SubVector2(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> SubVector2(This,v1_0,v2_1,ret_2)

#define IDAStatics_AddVector2(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> AddVector2(This,v1_0,v2_1,ret_2)

#define IDAStatics_AddPoint2Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> AddPoint2Vector(This,p_0,v_1,ret_2)

#define IDAStatics_SubPoint2Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> SubPoint2Vector(This,p_0,v_1,ret_2)

#define IDAStatics_SubPoint2(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> SubPoint2(This,p1_0,p2_1,ret_2)

#define IDAStatics_DistancePoint2(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistancePoint2(This,p_0,q_1,ret_2)

#define IDAStatics_DistanceSquaredPoint2(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistanceSquaredPoint2(This,p_0,q_1,ret_2)

#define IDAStatics_get_XVector3(This,ret_0)	\
    (This)->lpVtbl -> get_XVector3(This,ret_0)

#define IDAStatics_get_YVector3(This,ret_0)	\
    (This)->lpVtbl -> get_YVector3(This,ret_0)

#define IDAStatics_get_ZVector3(This,ret_0)	\
    (This)->lpVtbl -> get_ZVector3(This,ret_0)

#define IDAStatics_get_ZeroVector3(This,ret_0)	\
    (This)->lpVtbl -> get_ZeroVector3(This,ret_0)

#define IDAStatics_get_Origin3(This,ret_0)	\
    (This)->lpVtbl -> get_Origin3(This,ret_0)

#define IDAStatics_Vector3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Vector3Anim(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Vector3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Vector3(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Point3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Point3Anim(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Point3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Point3(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Vector3SphericalAnim(This,xyAngle_0,yzAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Vector3SphericalAnim(This,xyAngle_0,yzAngle_1,radius_2,ret_3)

#define IDAStatics_Vector3Spherical(This,xyAngle_0,yzAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Vector3Spherical(This,xyAngle_0,yzAngle_1,radius_2,ret_3)

#define IDAStatics_Point3SphericalAnim(This,zxAngle_0,xyAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Point3SphericalAnim(This,zxAngle_0,xyAngle_1,radius_2,ret_3)

#define IDAStatics_Point3Spherical(This,zxAngle_0,xyAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Point3Spherical(This,zxAngle_0,xyAngle_1,radius_2,ret_3)

#define IDAStatics_DotVector3(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> DotVector3(This,v_0,u_1,ret_2)

#define IDAStatics_CrossVector3(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> CrossVector3(This,v_0,u_1,ret_2)

#define IDAStatics_NegVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> NegVector3(This,v_0,ret_1)

#define IDAStatics_SubVector3(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> SubVector3(This,v1_0,v2_1,ret_2)

#define IDAStatics_AddVector3(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> AddVector3(This,v1_0,v2_1,ret_2)

#define IDAStatics_AddPoint3Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> AddPoint3Vector(This,p_0,v_1,ret_2)

#define IDAStatics_SubPoint3Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> SubPoint3Vector(This,p_0,v_1,ret_2)

#define IDAStatics_SubPoint3(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> SubPoint3(This,p1_0,p2_1,ret_2)

#define IDAStatics_DistancePoint3(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistancePoint3(This,p_0,q_1,ret_2)

#define IDAStatics_DistanceSquaredPoint3(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistanceSquaredPoint3(This,p_0,q_1,ret_2)

#define IDAStatics_get_IdentityTransform3(This,ret_0)	\
    (This)->lpVtbl -> get_IdentityTransform3(This,ret_0)

#define IDAStatics_Translate3Anim(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3Anim(This,tx_0,ty_1,tz_2,ret_3)

#define IDAStatics_Translate3(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3(This,tx_0,ty_1,tz_2,ret_3)

#define IDAStatics_Translate3Rate(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3Rate(This,tx_0,ty_1,tz_2,ret_3)

#define IDAStatics_Translate3Vector(This,delta_0,ret_1)	\
    (This)->lpVtbl -> Translate3Vector(This,delta_0,ret_1)

#define IDAStatics_Translate3Point(This,new_origin_0,ret_1)	\
    (This)->lpVtbl -> Translate3Point(This,new_origin_0,ret_1)

#define IDAStatics_Scale3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3Anim(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Scale3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Scale3Rate(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3Rate(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Scale3Vector(This,scale_vec_0,ret_1)	\
    (This)->lpVtbl -> Scale3Vector(This,scale_vec_0,ret_1)

#define IDAStatics_Scale3UniformAnim(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3UniformAnim(This,uniform_scale_0,ret_1)

#define IDAStatics_Scale3Uniform(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3Uniform(This,uniform_scale_0,ret_1)

#define IDAStatics_Scale3UniformRate(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3UniformRate(This,uniform_scale_0,ret_1)

#define IDAStatics_Rotate3Anim(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Anim(This,axis_0,angle_1,ret_2)

#define IDAStatics_Rotate3(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3(This,axis_0,angle_1,ret_2)

#define IDAStatics_Rotate3Rate(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Rate(This,axis_0,angle_1,ret_2)

#define IDAStatics_Rotate3Degrees(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Degrees(This,axis_0,angle_1,ret_2)

#define IDAStatics_Rotate3RateDegrees(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3RateDegrees(This,axis_0,angle_1,ret_2)

#define IDAStatics_XShear3Anim(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3Anim(This,a_0,b_1,ret_2)

#define IDAStatics_XShear3(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3(This,a_0,b_1,ret_2)

#define IDAStatics_XShear3Rate(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3Rate(This,a_0,b_1,ret_2)

#define IDAStatics_YShear3Anim(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3Anim(This,c_0,d_1,ret_2)

#define IDAStatics_YShear3(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3(This,c_0,d_1,ret_2)

#define IDAStatics_YShear3Rate(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3Rate(This,c_0,d_1,ret_2)

#define IDAStatics_ZShear3Anim(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3Anim(This,e_0,f_1,ret_2)

#define IDAStatics_ZShear3(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3(This,e_0,f_1,ret_2)

#define IDAStatics_ZShear3Rate(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3Rate(This,e_0,f_1,ret_2)

#define IDAStatics_Transform4x4AnimEx(This,m_0size,m_0,ret_1)	\
    (This)->lpVtbl -> Transform4x4AnimEx(This,m_0size,m_0,ret_1)

#define IDAStatics_Transform4x4Anim(This,m_0,ret_1)	\
    (This)->lpVtbl -> Transform4x4Anim(This,m_0,ret_1)

#define IDAStatics_Compose3(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Compose3(This,a_0,b_1,ret_2)

#define IDAStatics_Compose3ArrayEx(This,xfs_0size,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose3ArrayEx(This,xfs_0size,xfs_0,ret_1)

#define IDAStatics_Compose3Array(This,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose3Array(This,xfs_0,ret_1)

#define IDAStatics_LookAtFrom(This,to_0,from_1,up_2,ret_3)	\
    (This)->lpVtbl -> LookAtFrom(This,to_0,from_1,up_2,ret_3)

#define IDAStatics_get_IdentityTransform2(This,ret_0)	\
    (This)->lpVtbl -> get_IdentityTransform2(This,ret_0)

#define IDAStatics_Translate2Anim(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2Anim(This,Tx_0,Ty_1,ret_2)

#define IDAStatics_Translate2(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2(This,Tx_0,Ty_1,ret_2)

#define IDAStatics_Translate2Rate(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2Rate(This,Tx_0,Ty_1,ret_2)

#define IDAStatics_Translate2Vector(This,delta_0,ret_1)	\
    (This)->lpVtbl -> Translate2Vector(This,delta_0,ret_1)

#define IDAStatics_Translate2Point(This,pos_0,ret_1)	\
    (This)->lpVtbl -> Translate2Point(This,pos_0,ret_1)

#define IDAStatics_Scale2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2Anim(This,x_0,y_1,ret_2)

#define IDAStatics_Scale2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2(This,x_0,y_1,ret_2)

#define IDAStatics_Scale2Rate(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2Rate(This,x_0,y_1,ret_2)

#define IDAStatics_Scale2Vector2(This,obsoleteMethod_0,ret_1)	\
    (This)->lpVtbl -> Scale2Vector2(This,obsoleteMethod_0,ret_1)

#define IDAStatics_Scale2Vector(This,scale_vec_0,ret_1)	\
    (This)->lpVtbl -> Scale2Vector(This,scale_vec_0,ret_1)

#define IDAStatics_Scale2UniformAnim(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2UniformAnim(This,uniform_scale_0,ret_1)

#define IDAStatics_Scale2Uniform(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2Uniform(This,uniform_scale_0,ret_1)

#define IDAStatics_Scale2UniformRate(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2UniformRate(This,uniform_scale_0,ret_1)

#define IDAStatics_Rotate2Anim(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Anim(This,angle_0,ret_1)

#define IDAStatics_Rotate2(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2(This,angle_0,ret_1)

#define IDAStatics_Rotate2Rate(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Rate(This,angle_0,ret_1)

#define IDAStatics_Rotate2Degrees(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Degrees(This,angle_0,ret_1)

#define IDAStatics_Rotate2RateDegrees(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2RateDegrees(This,angle_0,ret_1)

#define IDAStatics_XShear2Anim(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2Anim(This,arg_0,ret_1)

#define IDAStatics_XShear2(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2(This,arg_0,ret_1)

#define IDAStatics_XShear2Rate(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2Rate(This,arg_0,ret_1)

#define IDAStatics_YShear2Anim(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2Anim(This,arg_0,ret_1)

#define IDAStatics_YShear2(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2(This,arg_0,ret_1)

#define IDAStatics_YShear2Rate(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2Rate(This,arg_0,ret_1)

#define IDAStatics_Transform3x2AnimEx(This,m_0size,m_0,ret_1)	\
    (This)->lpVtbl -> Transform3x2AnimEx(This,m_0size,m_0,ret_1)

#define IDAStatics_Transform3x2Anim(This,m_0,ret_1)	\
    (This)->lpVtbl -> Transform3x2Anim(This,m_0,ret_1)

#define IDAStatics_Compose2(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Compose2(This,a_0,b_1,ret_2)

#define IDAStatics_Compose2ArrayEx(This,xfs_0size,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose2ArrayEx(This,xfs_0size,xfs_0,ret_1)

#define IDAStatics_Compose2Array(This,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose2Array(This,xfs_0,ret_1)

#define IDAStatics_Tuple(This,obsolete1,obsolete2)	\
    (This)->lpVtbl -> Tuple(This,obsolete1,obsolete2)

#define IDAStatics_Array(This,obsolete1,obsolete2)	\
    (This)->lpVtbl -> Array(This,obsolete1,obsolete2)

#define IDAStatics_get_AreBlockingImportsComplete(This,bComplete)	\
    (This)->lpVtbl -> get_AreBlockingImportsComplete(This,bComplete)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_VersionString_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ BSTR *str);


void __RPC_STUB IDAStatics_get_VersionString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Site_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDASite **pSite);


void __RPC_STUB IDAStatics_get_Site_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAStatics_put_Site_Proxy( 
    IDAStatics * This,
    /* [in] */ IDASite *pSite);


void __RPC_STUB IDAStatics_put_Site_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAStatics_put_ClientSite_Proxy( 
    IDAStatics * This,
    /* [in] */ IOleClientSite *pClientSite);


void __RPC_STUB IDAStatics_put_ClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_ClientSite_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IOleClientSite **pClientSite);


void __RPC_STUB IDAStatics_get_ClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAStatics_put_PixelConstructionMode_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT_BOOL bMode);


void __RPC_STUB IDAStatics_put_PixelConstructionMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_PixelConstructionMode_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ VARIANT_BOOL *bMode);


void __RPC_STUB IDAStatics_get_PixelConstructionMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_TriggerEvent_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAEvent *event,
    /* [in] */ IDABehavior *data);


void __RPC_STUB IDAStatics_TriggerEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_NewDrawingSurface_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDADrawingSurface **pds);


void __RPC_STUB IDAStatics_NewDrawingSurface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportMovie_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportMovie_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportMovieAsync_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [in] */ IDAImage *pImageStandIn,
    /* [in] */ IDASound *pSoundStandIn,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportMovieAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportImage_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAStatics_ImportImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportImageAsync_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [in] */ IDAImage *pImageStandIn,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportImageAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportImageColorKey_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [in] */ BYTE colorKeyRed,
    /* [in] */ BYTE colorKeyGreen,
    /* [in] */ BYTE colorKeyBlue,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAStatics_ImportImageColorKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportImageAsyncColorKey_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [in] */ IDAImage *pImageStandIn,
    /* [in] */ BYTE colorKeyRed,
    /* [in] */ BYTE colorKeyGreen,
    /* [in] */ BYTE colorKeyBlue,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportImageAsyncColorKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportSound_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportSound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportSoundAsync_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [in] */ IDASound *pSoundStandIn,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportSoundAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportGeometry_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [retval][out] */ IDAGeometry **ppGeometry);


void __RPC_STUB IDAStatics_ImportGeometry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportGeometryAsync_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [in] */ IDAGeometry *pGeoStandIn,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportGeometryAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportDirectDrawSurface_Proxy( 
    IDAStatics * This,
    /* [in] */ IUnknown *dds,
    /* [in] */ IDAEvent *updateEvent,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAStatics_ImportDirectDrawSurface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Cond_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABoolean *c,
    /* [in] */ IDABehavior *i,
    /* [in] */ IDABehavior *e,
    /* [retval][out] */ IDABehavior **pCondBvr);


void __RPC_STUB IDAStatics_Cond_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_DAArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG s,
    /* [size_is][in] */ IDABehavior *pBvrs[  ],
    /* [retval][out] */ IDAArray **bvr);


void __RPC_STUB IDAStatics_DAArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DAArray_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT bvrs,
    /* [retval][out] */ IDAArray **bvr);


void __RPC_STUB IDAStatics_DAArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_DATupleEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG s,
    /* [size_is][in] */ IDABehavior *pBvrs[  ],
    /* [retval][out] */ IDATuple **bvr);


void __RPC_STUB IDAStatics_DATupleEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DATuple_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT bvrs,
    /* [retval][out] */ IDATuple **bvr);


void __RPC_STUB IDAStatics_DATuple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ModifiableBehavior_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABehavior *orig,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDAStatics_ModifiableBehavior_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UninitializedArray_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAArray *typeTmp,
    /* [retval][out] */ IDAArray **bvr);


void __RPC_STUB IDAStatics_UninitializedArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UninitializedTuple_Proxy( 
    IDAStatics * This,
    /* [in] */ IDATuple *typeTmp,
    /* [retval][out] */ IDATuple **bvr);


void __RPC_STUB IDAStatics_UninitializedTuple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_NumberBSplineEx_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ LONG numKnots,
    /* [size_is][in] */ IDANumber *knots[  ],
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDANumber *ctrlPts[  ],
    /* [in] */ LONG numWts,
    /* [size_is][in] */ IDANumber *weights[  ],
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDANumber **bvr);


void __RPC_STUB IDAStatics_NumberBSplineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_NumberBSpline_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ VARIANT knots,
    /* [in] */ VARIANT CtrlPts,
    /* [in] */ VARIANT weights,
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDANumber **bvr);


void __RPC_STUB IDAStatics_NumberBSpline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Point2BSplineEx_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ LONG numKnots,
    /* [size_is][in] */ IDANumber *knots[  ],
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDAPoint2 *ctrlPts[  ],
    /* [in] */ LONG numWts,
    /* [size_is][in] */ IDANumber *weights[  ],
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAPoint2 **bvr);


void __RPC_STUB IDAStatics_Point2BSplineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point2BSpline_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ VARIANT knots,
    /* [in] */ VARIANT CtrlPts,
    /* [in] */ VARIANT weights,
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAPoint2 **bvr);


void __RPC_STUB IDAStatics_Point2BSpline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Point3BSplineEx_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ LONG numKnots,
    /* [size_is][in] */ IDANumber *knots[  ],
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDAPoint3 *ctrlPts[  ],
    /* [in] */ LONG numWts,
    /* [size_is][in] */ IDANumber *weights[  ],
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAPoint3 **bvr);


void __RPC_STUB IDAStatics_Point3BSplineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point3BSpline_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ VARIANT knots,
    /* [in] */ VARIANT CtrlPts,
    /* [in] */ VARIANT weights,
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAPoint3 **bvr);


void __RPC_STUB IDAStatics_Point3BSpline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Vector2BSplineEx_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ LONG numKnots,
    /* [size_is][in] */ IDANumber *knots[  ],
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDAVector2 *ctrlPts[  ],
    /* [in] */ LONG numWts,
    /* [size_is][in] */ IDANumber *weights[  ],
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAVector2 **bvr);


void __RPC_STUB IDAStatics_Vector2BSplineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector2BSpline_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ VARIANT knots,
    /* [in] */ VARIANT CtrlPts,
    /* [in] */ VARIANT weights,
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAVector2 **bvr);


void __RPC_STUB IDAStatics_Vector2BSpline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Vector3BSplineEx_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ LONG numKnots,
    /* [size_is][in] */ IDANumber *knots[  ],
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDAVector3 *ctrlPts[  ],
    /* [in] */ LONG numWts,
    /* [size_is][in] */ IDANumber *weights[  ],
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAVector3 **bvr);


void __RPC_STUB IDAStatics_Vector3BSplineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector3BSpline_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ VARIANT knots,
    /* [in] */ VARIANT CtrlPts,
    /* [in] */ VARIANT weights,
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAVector3 **bvr);


void __RPC_STUB IDAStatics_Vector3BSpline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Pow_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Pow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Abs_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Abs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Sqrt_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Sqrt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Floor_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Floor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Round_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Round_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Ceiling_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Ceiling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Asin_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Asin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Acos_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Acos_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Atan_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Atan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Sin_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Sin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Cos_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Cos_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Tan_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Tan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Exp_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Exp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Ln_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Ln_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Log10_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Log10_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ToDegrees_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_ToDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ToRadians_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_ToRadians_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Mod_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Mod_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Atan2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Atan2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Add_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Sub_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Sub_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Mul_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Mul_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Div_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Div_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_LT_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_LT_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_LTE_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_LTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_GT_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_GT_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_GTE_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_GTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_EQ_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_EQ_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_NE_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_NE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Neg_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Neg_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_InterpolateAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *from_0,
    /* [in] */ IDANumber *to_1,
    /* [in] */ IDANumber *duration_2,
    /* [retval][out] */ IDANumber **ret_3);


void __RPC_STUB IDAStatics_InterpolateAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Interpolate_Proxy( 
    IDAStatics * This,
    /* [in] */ double from_0,
    /* [in] */ double to_1,
    /* [in] */ double duration_2,
    /* [retval][out] */ IDANumber **ret_3);


void __RPC_STUB IDAStatics_Interpolate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SlowInSlowOutAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *from_0,
    /* [in] */ IDANumber *to_1,
    /* [in] */ IDANumber *duration_2,
    /* [in] */ IDANumber *sharpness_3,
    /* [retval][out] */ IDANumber **ret_4);


void __RPC_STUB IDAStatics_SlowInSlowOutAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SlowInSlowOut_Proxy( 
    IDAStatics * This,
    /* [in] */ double from_0,
    /* [in] */ double to_1,
    /* [in] */ double duration_2,
    /* [in] */ double sharpness_3,
    /* [retval][out] */ IDANumber **ret_4);


void __RPC_STUB IDAStatics_SlowInSlowOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SoundSource_Proxy( 
    IDAStatics * This,
    /* [in] */ IDASound *snd_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAStatics_SoundSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Mix_Proxy( 
    IDAStatics * This,
    /* [in] */ IDASound *left_0,
    /* [in] */ IDASound *right_1,
    /* [retval][out] */ IDASound **ret_2);


void __RPC_STUB IDAStatics_Mix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_And_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABoolean *a_0,
    /* [in] */ IDABoolean *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_And_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Or_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABoolean *a_0,
    /* [in] */ IDABoolean *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_Or_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Not_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABoolean *a_0,
    /* [retval][out] */ IDABoolean **ret_1);


void __RPC_STUB IDAStatics_Not_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Integral_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *b_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Integral_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Derivative_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *b_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Derivative_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_IntegralVector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *v_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAStatics_IntegralVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_IntegralVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAStatics_IntegralVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DerivativeVector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *v_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAStatics_DerivativeVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DerivativeVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAStatics_DerivativeVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DerivativePoint2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *v_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAStatics_DerivativePoint2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DerivativePoint3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *v_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAStatics_DerivativePoint3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_KeyState_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *n_0,
    /* [retval][out] */ IDABoolean **ret_1);


void __RPC_STUB IDAStatics_KeyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_KeyUp_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG arg_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAStatics_KeyUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_KeyDown_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG arg_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAStatics_KeyDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DANumber_Proxy( 
    IDAStatics * This,
    /* [in] */ double num_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_DANumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DAString_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR str_0,
    /* [retval][out] */ IDAString **ret_1);


void __RPC_STUB IDAStatics_DAString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DABoolean_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT_BOOL num_0,
    /* [retval][out] */ IDABoolean **ret_1);


void __RPC_STUB IDAStatics_DABoolean_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SeededRandom_Proxy( 
    IDAStatics * This,
    /* [in] */ double arg_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_SeededRandom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_MousePosition_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAPoint2 **ret_0);


void __RPC_STUB IDAStatics_get_MousePosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_LeftButtonState_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDABoolean **ret_0);


void __RPC_STUB IDAStatics_get_LeftButtonState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_RightButtonState_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDABoolean **ret_0);


void __RPC_STUB IDAStatics_get_RightButtonState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DATrue_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDABoolean **ret_0);


void __RPC_STUB IDAStatics_get_DATrue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DAFalse_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDABoolean **ret_0);


void __RPC_STUB IDAStatics_get_DAFalse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_LocalTime_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAStatics_get_LocalTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_GlobalTime_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAStatics_get_GlobalTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Pixel_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAStatics_get_Pixel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UserData_Proxy( 
    IDAStatics * This,
    /* [in] */ IUnknown *data_0,
    /* [retval][out] */ IDAUserData **ret_1);


void __RPC_STUB IDAStatics_UserData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UntilNotify_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABehavior *b0_0,
    /* [in] */ IDAEvent *event_1,
    /* [in] */ IDAUntilNotifier *notifier_2,
    /* [retval][out] */ IDABehavior **ret_3);


void __RPC_STUB IDAStatics_UntilNotify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Until_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABehavior *b0_0,
    /* [in] */ IDAEvent *event_1,
    /* [in] */ IDABehavior *b1_2,
    /* [retval][out] */ IDABehavior **ret_3);


void __RPC_STUB IDAStatics_Until_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UntilEx_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABehavior *b0_0,
    /* [in] */ IDAEvent *event_1,
    /* [retval][out] */ IDABehavior **ret_2);


void __RPC_STUB IDAStatics_UntilEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Sequence_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABehavior *s1_0,
    /* [in] */ IDABehavior *s2_1,
    /* [retval][out] */ IDABehavior **ret_2);


void __RPC_STUB IDAStatics_Sequence_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPath_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *path_0,
    /* [in] */ double duration_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAngle_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *path_0,
    /* [in] */ double duration_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAngleUpright_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *path_0,
    /* [in] */ double duration_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAngleUpright_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathEval_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *path_0,
    /* [in] */ IDANumber *eval_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathEval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAngleEval_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *path_0,
    /* [in] */ IDANumber *eval_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAngleEval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAngleUprightEval_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *path_0,
    /* [in] */ IDANumber *eval_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAngleUprightEval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *obsoleted1_0,
    /* [in] */ IDANumber *obsoleted2_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAngleAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *obsoleted1_0,
    /* [in] */ IDANumber *obsoleted2_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAngleAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAngleUprightAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *obsoleted1_0,
    /* [in] */ IDANumber *obsoleted2_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAngleUprightAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ConcatString_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *s1_0,
    /* [in] */ IDAString *s2_1,
    /* [retval][out] */ IDAString **ret_2);


void __RPC_STUB IDAStatics_ConcatString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_PerspectiveCamera_Proxy( 
    IDAStatics * This,
    /* [in] */ double focalDist_0,
    /* [in] */ double nearClip_1,
    /* [retval][out] */ IDACamera **ret_2);


void __RPC_STUB IDAStatics_PerspectiveCamera_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_PerspectiveCameraAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *focalDist_0,
    /* [in] */ IDANumber *nearClip_1,
    /* [retval][out] */ IDACamera **ret_2);


void __RPC_STUB IDAStatics_PerspectiveCameraAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ParallelCamera_Proxy( 
    IDAStatics * This,
    /* [in] */ double nearClip_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDAStatics_ParallelCamera_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ParallelCameraAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *nearClip_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDAStatics_ParallelCameraAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ColorRgbAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *red_0,
    /* [in] */ IDANumber *green_1,
    /* [in] */ IDANumber *blue_2,
    /* [retval][out] */ IDAColor **ret_3);


void __RPC_STUB IDAStatics_ColorRgbAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ColorRgb_Proxy( 
    IDAStatics * This,
    /* [in] */ double red_0,
    /* [in] */ double green_1,
    /* [in] */ double blue_2,
    /* [retval][out] */ IDAColor **ret_3);


void __RPC_STUB IDAStatics_ColorRgb_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ColorRgb255_Proxy( 
    IDAStatics * This,
    /* [in] */ short red_0,
    /* [in] */ short green_1,
    /* [in] */ short blue_2,
    /* [retval][out] */ IDAColor **ret_3);


void __RPC_STUB IDAStatics_ColorRgb255_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ColorHsl_Proxy( 
    IDAStatics * This,
    /* [in] */ double hue_0,
    /* [in] */ double saturation_1,
    /* [in] */ double lum_2,
    /* [retval][out] */ IDAColor **ret_3);


void __RPC_STUB IDAStatics_ColorHsl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ColorHslAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *hue_0,
    /* [in] */ IDANumber *saturation_1,
    /* [in] */ IDANumber *lum_2,
    /* [retval][out] */ IDAColor **ret_3);


void __RPC_STUB IDAStatics_ColorHslAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Red_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Red_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Green_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Green_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Blue_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Blue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Cyan_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Cyan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Magenta_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Magenta_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Yellow_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Yellow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Black_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Black_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_White_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_White_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Aqua_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Aqua_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Fuchsia_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Fuchsia_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Gray_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Gray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Lime_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Lime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Maroon_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Maroon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Navy_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Navy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Olive_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Olive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Purple_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Purple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Silver_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Silver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Teal_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Teal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Predicate_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABoolean *b_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAStatics_Predicate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_NotEvent_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAEvent *event_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAStatics_NotEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_AndEvent_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAEvent *e1_0,
    /* [in] */ IDAEvent *e2_1,
    /* [retval][out] */ IDAEvent **ret_2);


void __RPC_STUB IDAStatics_AndEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_OrEvent_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAEvent *e1_0,
    /* [in] */ IDAEvent *e2_1,
    /* [retval][out] */ IDAEvent **ret_2);


void __RPC_STUB IDAStatics_OrEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ThenEvent_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAEvent *e1_0,
    /* [in] */ IDAEvent *e2_1,
    /* [retval][out] */ IDAEvent **ret_2);


void __RPC_STUB IDAStatics_ThenEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_LeftButtonDown_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_get_LeftButtonDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_LeftButtonUp_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_get_LeftButtonUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_RightButtonDown_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_get_RightButtonDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_RightButtonUp_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_get_RightButtonUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Always_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_get_Always_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Never_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_get_Never_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_TimerAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *n_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAStatics_TimerAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Timer_Proxy( 
    IDAStatics * This,
    /* [in] */ double n_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAStatics_Timer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_AppTriggeredEvent_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_AppTriggeredEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ScriptCallback_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR obsolete1_0,
    /* [in] */ IDAEvent *obsolete2_1,
    /* [in] */ BSTR obsolete3_2,
    /* [retval][out] */ IDAEvent **ret_3);


void __RPC_STUB IDAStatics_ScriptCallback_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EmptyGeometry_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAGeometry **ret_0);


void __RPC_STUB IDAStatics_get_EmptyGeometry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UnionGeometry_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAGeometry *g1_0,
    /* [in] */ IDAGeometry *g2_1,
    /* [retval][out] */ IDAGeometry **ret_2);


void __RPC_STUB IDAStatics_UnionGeometry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_UnionGeometryArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG imgs_0size,
    /* [size_is][in] */ IDAGeometry *imgs_0[  ],
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAStatics_UnionGeometryArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UnionGeometryArray_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT imgs_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAStatics_UnionGeometryArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EmptyImage_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAImage **ret_0);


void __RPC_STUB IDAStatics_get_EmptyImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DetectableEmptyImage_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAImage **ret_0);


void __RPC_STUB IDAStatics_get_DetectableEmptyImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SolidColorImage_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *col_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAStatics_SolidColorImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_GradientPolygonEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG points_0size,
    /* [size_is][in] */ IDAPoint2 *points_0[  ],
    /* [in] */ LONG colors_1size,
    /* [size_is][in] */ IDAColor *colors_1[  ],
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_GradientPolygonEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_GradientPolygon_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT points_0,
    /* [in] */ VARIANT colors_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_GradientPolygon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientPolygonEx_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ LONG points_2size,
    /* [size_is][in] */ IDAPoint2 *points_2[  ],
    /* [in] */ double fallOff_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_RadialGradientPolygonEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientPolygon_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ VARIANT points_2,
    /* [in] */ double fallOff_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_RadialGradientPolygon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientPolygonAnimEx_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ LONG points_2size,
    /* [size_is][in] */ IDAPoint2 *points_2[  ],
    /* [in] */ IDANumber *fallOff_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_RadialGradientPolygonAnimEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientPolygonAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ VARIANT points_2,
    /* [in] */ IDANumber *fallOff_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_RadialGradientPolygonAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_GradientSquare_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lowerLeft_0,
    /* [in] */ IDAColor *upperLeft_1,
    /* [in] */ IDAColor *upperRight_2,
    /* [in] */ IDAColor *lowerRight_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_GradientSquare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientSquare_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ double fallOff_2,
    /* [retval][out] */ IDAImage **ret_3);


void __RPC_STUB IDAStatics_RadialGradientSquare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientSquareAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ IDANumber *fallOff_2,
    /* [retval][out] */ IDAImage **ret_3);


void __RPC_STUB IDAStatics_RadialGradientSquareAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientRegularPoly_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ double numEdges_2,
    /* [in] */ double fallOff_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_RadialGradientRegularPoly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientRegularPolyAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ IDANumber *numEdges_2,
    /* [in] */ IDANumber *fallOff_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_RadialGradientRegularPolyAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_GradientHorizontal_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *start_0,
    /* [in] */ IDAColor *stop_1,
    /* [in] */ double fallOff_2,
    /* [retval][out] */ IDAImage **ret_3);


void __RPC_STUB IDAStatics_GradientHorizontal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_GradientHorizontalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *start_0,
    /* [in] */ IDAColor *stop_1,
    /* [in] */ IDANumber *fallOff_2,
    /* [retval][out] */ IDAImage **ret_3);


void __RPC_STUB IDAStatics_GradientHorizontalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchHorizontal_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ double spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchHorizontal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchHorizontalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ IDANumber *spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchHorizontalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchVertical_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ double spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchVertical_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchVerticalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ IDANumber *spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchVerticalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchForwardDiagonal_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ double spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchForwardDiagonal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchForwardDiagonalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ IDANumber *spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchForwardDiagonalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchBackwardDiagonal_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ double spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchBackwardDiagonal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchBackwardDiagonalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ IDANumber *spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchBackwardDiagonalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchCross_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ double spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchCross_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchCrossAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ IDANumber *spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchCrossAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchDiagonalCross_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ double spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchDiagonalCross_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchDiagonalCrossAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ IDANumber *spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchDiagonalCrossAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Overlay_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAImage *top_0,
    /* [in] */ IDAImage *bottom_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_Overlay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_OverlayArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG imgs_0size,
    /* [size_is][in] */ IDAImage *imgs_0[  ],
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAStatics_OverlayArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_OverlayArray_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT imgs_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAStatics_OverlayArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_AmbientLight_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAGeometry **ret_0);


void __RPC_STUB IDAStatics_get_AmbientLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DirectionalLight_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAGeometry **ret_0);


void __RPC_STUB IDAStatics_get_DirectionalLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_PointLight_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAGeometry **ret_0);


void __RPC_STUB IDAStatics_get_PointLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SpotLightAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *fullcone_0,
    /* [in] */ IDANumber *cutoff_1,
    /* [retval][out] */ IDAGeometry **ret_2);


void __RPC_STUB IDAStatics_SpotLightAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SpotLight_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *fullcone_0,
    /* [in] */ double cutoff_1,
    /* [retval][out] */ IDAGeometry **ret_2);


void __RPC_STUB IDAStatics_SpotLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DefaultLineStyle_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDALineStyle **ret_0);


void __RPC_STUB IDAStatics_get_DefaultLineStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EmptyLineStyle_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDALineStyle **ret_0);


void __RPC_STUB IDAStatics_get_EmptyLineStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_JoinStyleBevel_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAJoinStyle **ret_0);


void __RPC_STUB IDAStatics_get_JoinStyleBevel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_JoinStyleRound_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAJoinStyle **ret_0);


void __RPC_STUB IDAStatics_get_JoinStyleRound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_JoinStyleMiter_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAJoinStyle **ret_0);


void __RPC_STUB IDAStatics_get_JoinStyleMiter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EndStyleFlat_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEndStyle **ret_0);


void __RPC_STUB IDAStatics_get_EndStyleFlat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EndStyleSquare_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEndStyle **ret_0);


void __RPC_STUB IDAStatics_get_EndStyleSquare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EndStyleRound_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEndStyle **ret_0);


void __RPC_STUB IDAStatics_get_EndStyleRound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DashStyleSolid_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDADashStyle **ret_0);


void __RPC_STUB IDAStatics_get_DashStyleSolid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DashStyleDashed_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDADashStyle **ret_0);


void __RPC_STUB IDAStatics_get_DashStyleDashed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DefaultMicrophone_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAMicrophone **ret_0);


void __RPC_STUB IDAStatics_get_DefaultMicrophone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_OpaqueMatte_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAMatte **ret_0);


void __RPC_STUB IDAStatics_get_OpaqueMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_ClearMatte_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAMatte **ret_0);


void __RPC_STUB IDAStatics_get_ClearMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UnionMatte_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAMatte *m1_0,
    /* [in] */ IDAMatte *m2_1,
    /* [retval][out] */ IDAMatte **ret_2);


void __RPC_STUB IDAStatics_UnionMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_IntersectMatte_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAMatte *m1_0,
    /* [in] */ IDAMatte *m2_1,
    /* [retval][out] */ IDAMatte **ret_2);


void __RPC_STUB IDAStatics_IntersectMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DifferenceMatte_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAMatte *m1_0,
    /* [in] */ IDAMatte *m2_1,
    /* [retval][out] */ IDAMatte **ret_2);


void __RPC_STUB IDAStatics_DifferenceMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FillMatte_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *p_0,
    /* [retval][out] */ IDAMatte **ret_1);


void __RPC_STUB IDAStatics_FillMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_TextMatte_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *str_0,
    /* [in] */ IDAFontStyle *fs_1,
    /* [retval][out] */ IDAMatte **ret_2);


void __RPC_STUB IDAStatics_TextMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EmptyMontage_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAMontage **ret_0);


void __RPC_STUB IDAStatics_get_EmptyMontage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImageMontage_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAImage *im_0,
    /* [in] */ double depth_1,
    /* [retval][out] */ IDAMontage **ret_2);


void __RPC_STUB IDAStatics_ImageMontage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImageMontageAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAImage *im_0,
    /* [in] */ IDANumber *depth_1,
    /* [retval][out] */ IDAMontage **ret_2);


void __RPC_STUB IDAStatics_ImageMontageAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UnionMontage_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAMontage *m1_0,
    /* [in] */ IDAMontage *m2_1,
    /* [retval][out] */ IDAMontage **ret_2);


void __RPC_STUB IDAStatics_UnionMontage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Concat_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *p1_0,
    /* [in] */ IDAPath2 *p2_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_Concat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_ConcatArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG paths_0size,
    /* [size_is][in] */ IDAPath2 *paths_0[  ],
    /* [retval][out] */ IDAPath2 **ret_1);


void __RPC_STUB IDAStatics_ConcatArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ConcatArray_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT paths_0,
    /* [retval][out] */ IDAPath2 **ret_1);


void __RPC_STUB IDAStatics_ConcatArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Line_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *p1_0,
    /* [in] */ IDAPoint2 *p2_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_Line_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Ray_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *pt_0,
    /* [retval][out] */ IDAPath2 **ret_1);


void __RPC_STUB IDAStatics_Ray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_StringPathAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *str_0,
    /* [in] */ IDAFontStyle *fs_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_StringPathAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_StringPath_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR str_0,
    /* [in] */ IDAFontStyle *fs_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_StringPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_PolylineEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG points_0size,
    /* [size_is][in] */ IDAPoint2 *points_0[  ],
    /* [retval][out] */ IDAPath2 **ret_1);


void __RPC_STUB IDAStatics_PolylineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Polyline_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT points_0,
    /* [retval][out] */ IDAPath2 **ret_1);


void __RPC_STUB IDAStatics_Polyline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_PolydrawPathEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG points_0size,
    /* [size_is][in] */ IDAPoint2 *points_0[  ],
    /* [in] */ LONG codes_1size,
    /* [size_is][in] */ IDANumber *codes_1[  ],
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_PolydrawPathEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_PolydrawPath_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT points_0,
    /* [in] */ VARIANT codes_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_PolydrawPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ArcRadians_Proxy( 
    IDAStatics * This,
    /* [in] */ double startAngle_0,
    /* [in] */ double endAngle_1,
    /* [in] */ double arcWidth_2,
    /* [in] */ double arcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_ArcRadians_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ArcRadiansAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *startAngle_0,
    /* [in] */ IDANumber *endAngle_1,
    /* [in] */ IDANumber *arcWidth_2,
    /* [in] */ IDANumber *arcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_ArcRadiansAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ArcDegrees_Proxy( 
    IDAStatics * This,
    /* [in] */ double startAngle_0,
    /* [in] */ double endAngle_1,
    /* [in] */ double arcWidth_2,
    /* [in] */ double arcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_ArcDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_PieRadians_Proxy( 
    IDAStatics * This,
    /* [in] */ double startAngle_0,
    /* [in] */ double endAngle_1,
    /* [in] */ double arcWidth_2,
    /* [in] */ double arcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_PieRadians_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_PieRadiansAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *startAngle_0,
    /* [in] */ IDANumber *endAngle_1,
    /* [in] */ IDANumber *arcWidth_2,
    /* [in] */ IDANumber *arcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_PieRadiansAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_PieDegrees_Proxy( 
    IDAStatics * This,
    /* [in] */ double startAngle_0,
    /* [in] */ double endAngle_1,
    /* [in] */ double arcWidth_2,
    /* [in] */ double arcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_PieDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Oval_Proxy( 
    IDAStatics * This,
    /* [in] */ double width_0,
    /* [in] */ double height_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_Oval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_OvalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *width_0,
    /* [in] */ IDANumber *height_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_OvalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rect_Proxy( 
    IDAStatics * This,
    /* [in] */ double width_0,
    /* [in] */ double height_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_Rect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RectAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *width_0,
    /* [in] */ IDANumber *height_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_RectAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RoundRect_Proxy( 
    IDAStatics * This,
    /* [in] */ double width_0,
    /* [in] */ double height_1,
    /* [in] */ double cornerArcWidth_2,
    /* [in] */ double cornerArcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_RoundRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RoundRectAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *width_0,
    /* [in] */ IDANumber *height_1,
    /* [in] */ IDANumber *cornerArcWidth_2,
    /* [in] */ IDANumber *cornerArcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_RoundRectAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_CubicBSplinePathEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG points_0size,
    /* [size_is][in] */ IDAPoint2 *points_0[  ],
    /* [in] */ LONG knots_1size,
    /* [size_is][in] */ IDANumber *knots_1[  ],
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_CubicBSplinePathEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_CubicBSplinePath_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT points_0,
    /* [in] */ VARIANT knots_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_CubicBSplinePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_TextPath_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *obsolete1_0,
    /* [in] */ IDAFontStyle *obsolete2_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_TextPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Silence_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDASound **ret_0);


void __RPC_STUB IDAStatics_get_Silence_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_MixArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG snds_0size,
    /* [size_is][in] */ IDASound *snds_0[  ],
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDAStatics_MixArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_MixArray_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT snds_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDAStatics_MixArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_SinSynth_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDASound **ret_0);


void __RPC_STUB IDAStatics_get_SinSynth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DefaultFont_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAFontStyle **ret_0);


void __RPC_STUB IDAStatics_get_DefaultFont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FontAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *str_0,
    /* [in] */ IDANumber *size_1,
    /* [in] */ IDAColor *col_2,
    /* [retval][out] */ IDAFontStyle **ret_3);


void __RPC_STUB IDAStatics_FontAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Font_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR str_0,
    /* [in] */ double size_1,
    /* [in] */ IDAColor *col_2,
    /* [retval][out] */ IDAFontStyle **ret_3);


void __RPC_STUB IDAStatics_Font_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_StringImageAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *str_0,
    /* [in] */ IDAFontStyle *fs_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_StringImageAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_StringImage_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR str_0,
    /* [in] */ IDAFontStyle *fs_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_StringImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_TextImageAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *obsoleted1_0,
    /* [in] */ IDAFontStyle *obsoleted2_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_TextImageAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_TextImage_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR obsoleted1_0,
    /* [in] */ IDAFontStyle *obsoleted2_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_TextImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_XVector2_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector2 **ret_0);


void __RPC_STUB IDAStatics_get_XVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_YVector2_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector2 **ret_0);


void __RPC_STUB IDAStatics_get_YVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_ZeroVector2_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector2 **ret_0);


void __RPC_STUB IDAStatics_get_ZeroVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Origin2_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAPoint2 **ret_0);


void __RPC_STUB IDAStatics_get_Origin2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *x_0,
    /* [in] */ IDANumber *y_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_Vector2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector2_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_Vector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *x_0,
    /* [in] */ IDANumber *y_1,
    /* [retval][out] */ IDAPoint2 **ret_2);


void __RPC_STUB IDAStatics_Point2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point2_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [retval][out] */ IDAPoint2 **ret_2);


void __RPC_STUB IDAStatics_Point2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector2PolarAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *theta_0,
    /* [in] */ IDANumber *radius_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_Vector2PolarAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector2Polar_Proxy( 
    IDAStatics * This,
    /* [in] */ double theta_0,
    /* [in] */ double radius_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_Vector2Polar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector2PolarDegrees_Proxy( 
    IDAStatics * This,
    /* [in] */ double theta_0,
    /* [in] */ double radius_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_Vector2PolarDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point2PolarAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *theta_0,
    /* [in] */ IDANumber *radius_1,
    /* [retval][out] */ IDAPoint2 **ret_2);


void __RPC_STUB IDAStatics_Point2PolarAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point2Polar_Proxy( 
    IDAStatics * This,
    /* [in] */ double theta_0,
    /* [in] */ double radius_1,
    /* [retval][out] */ IDAPoint2 **ret_2);


void __RPC_STUB IDAStatics_Point2Polar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DotVector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *v_0,
    /* [in] */ IDAVector2 *u_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_DotVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_NegVector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *v_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAStatics_NegVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SubVector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *v1_0,
    /* [in] */ IDAVector2 *v2_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_SubVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_AddVector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *v1_0,
    /* [in] */ IDAVector2 *v2_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_AddVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_AddPoint2Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *p_0,
    /* [in] */ IDAVector2 *v_1,
    /* [retval][out] */ IDAPoint2 **ret_2);


void __RPC_STUB IDAStatics_AddPoint2Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SubPoint2Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *p_0,
    /* [in] */ IDAVector2 *v_1,
    /* [retval][out] */ IDAPoint2 **ret_2);


void __RPC_STUB IDAStatics_SubPoint2Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SubPoint2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *p1_0,
    /* [in] */ IDAPoint2 *p2_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_SubPoint2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DistancePoint2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *p_0,
    /* [in] */ IDAPoint2 *q_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_DistancePoint2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DistanceSquaredPoint2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *p_0,
    /* [in] */ IDAPoint2 *q_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_DistanceSquaredPoint2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_XVector3_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector3 **ret_0);


void __RPC_STUB IDAStatics_get_XVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_YVector3_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector3 **ret_0);


void __RPC_STUB IDAStatics_get_YVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_ZVector3_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector3 **ret_0);


void __RPC_STUB IDAStatics_get_ZVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_ZeroVector3_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector3 **ret_0);


void __RPC_STUB IDAStatics_get_ZeroVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Origin3_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAPoint3 **ret_0);


void __RPC_STUB IDAStatics_get_Origin3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *x_0,
    /* [in] */ IDANumber *y_1,
    /* [in] */ IDANumber *z_2,
    /* [retval][out] */ IDAVector3 **ret_3);


void __RPC_STUB IDAStatics_Vector3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector3_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [in] */ double z_2,
    /* [retval][out] */ IDAVector3 **ret_3);


void __RPC_STUB IDAStatics_Vector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *x_0,
    /* [in] */ IDANumber *y_1,
    /* [in] */ IDANumber *z_2,
    /* [retval][out] */ IDAPoint3 **ret_3);


void __RPC_STUB IDAStatics_Point3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point3_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [in] */ double z_2,
    /* [retval][out] */ IDAPoint3 **ret_3);


void __RPC_STUB IDAStatics_Point3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector3SphericalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *xyAngle_0,
    /* [in] */ IDANumber *yzAngle_1,
    /* [in] */ IDANumber *radius_2,
    /* [retval][out] */ IDAVector3 **ret_3);


void __RPC_STUB IDAStatics_Vector3SphericalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector3Spherical_Proxy( 
    IDAStatics * This,
    /* [in] */ double xyAngle_0,
    /* [in] */ double yzAngle_1,
    /* [in] */ double radius_2,
    /* [retval][out] */ IDAVector3 **ret_3);


void __RPC_STUB IDAStatics_Vector3Spherical_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point3SphericalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *zxAngle_0,
    /* [in] */ IDANumber *xyAngle_1,
    /* [in] */ IDANumber *radius_2,
    /* [retval][out] */ IDAPoint3 **ret_3);


void __RPC_STUB IDAStatics_Point3SphericalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point3Spherical_Proxy( 
    IDAStatics * This,
    /* [in] */ double zxAngle_0,
    /* [in] */ double xyAngle_1,
    /* [in] */ double radius_2,
    /* [retval][out] */ IDAPoint3 **ret_3);


void __RPC_STUB IDAStatics_Point3Spherical_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DotVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v_0,
    /* [in] */ IDAVector3 *u_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_DotVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_CrossVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v_0,
    /* [in] */ IDAVector3 *u_1,
    /* [retval][out] */ IDAVector3 **ret_2);


void __RPC_STUB IDAStatics_CrossVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_NegVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAStatics_NegVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SubVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v1_0,
    /* [in] */ IDAVector3 *v2_1,
    /* [retval][out] */ IDAVector3 **ret_2);


void __RPC_STUB IDAStatics_SubVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_AddVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v1_0,
    /* [in] */ IDAVector3 *v2_1,
    /* [retval][out] */ IDAVector3 **ret_2);


void __RPC_STUB IDAStatics_AddVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_AddPoint3Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *p_0,
    /* [in] */ IDAVector3 *v_1,
    /* [retval][out] */ IDAPoint3 **ret_2);


void __RPC_STUB IDAStatics_AddPoint3Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SubPoint3Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *p_0,
    /* [in] */ IDAVector3 *v_1,
    /* [retval][out] */ IDAPoint3 **ret_2);


void __RPC_STUB IDAStatics_SubPoint3Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SubPoint3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *p1_0,
    /* [in] */ IDAPoint3 *p2_1,
    /* [retval][out] */ IDAVector3 **ret_2);


void __RPC_STUB IDAStatics_SubPoint3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DistancePoint3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *p_0,
    /* [in] */ IDAPoint3 *q_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_DistancePoint3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DistanceSquaredPoint3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *p_0,
    /* [in] */ IDAPoint3 *q_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_DistanceSquaredPoint3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_IdentityTransform3_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDATransform3 **ret_0);


void __RPC_STUB IDAStatics_get_IdentityTransform3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *tx_0,
    /* [in] */ IDANumber *ty_1,
    /* [in] */ IDANumber *tz_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_Translate3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate3_Proxy( 
    IDAStatics * This,
    /* [in] */ double tx_0,
    /* [in] */ double ty_1,
    /* [in] */ double tz_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_Translate3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate3Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double tx_0,
    /* [in] */ double ty_1,
    /* [in] */ double tz_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_Translate3Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate3Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *delta_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Translate3Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate3Point_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *new_origin_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Translate3Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *x_0,
    /* [in] */ IDANumber *y_1,
    /* [in] */ IDANumber *z_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_Scale3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [in] */ double z_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_Scale3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [in] */ double z_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_Scale3Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *scale_vec_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Scale3Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3UniformAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *uniform_scale_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Scale3UniformAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3Uniform_Proxy( 
    IDAStatics * This,
    /* [in] */ double uniform_scale_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Scale3Uniform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3UniformRate_Proxy( 
    IDAStatics * This,
    /* [in] */ double uniform_scale_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Scale3UniformRate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *axis_0,
    /* [in] */ IDANumber *angle_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_Rotate3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *axis_0,
    /* [in] */ double angle_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_Rotate3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate3Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *axis_0,
    /* [in] */ double angle_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_Rotate3Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate3Degrees_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *axis_0,
    /* [in] */ double angle_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_Rotate3Degrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate3RateDegrees_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *axis_0,
    /* [in] */ double angle_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_Rotate3RateDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_XShear3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_XShear3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_XShear3_Proxy( 
    IDAStatics * This,
    /* [in] */ double a_0,
    /* [in] */ double b_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_XShear3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_XShear3Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double a_0,
    /* [in] */ double b_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_XShear3Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_YShear3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *c_0,
    /* [in] */ IDANumber *d_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_YShear3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_YShear3_Proxy( 
    IDAStatics * This,
    /* [in] */ double c_0,
    /* [in] */ double d_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_YShear3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_YShear3Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double c_0,
    /* [in] */ double d_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_YShear3Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ZShear3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *e_0,
    /* [in] */ IDANumber *f_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_ZShear3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ZShear3_Proxy( 
    IDAStatics * This,
    /* [in] */ double e_0,
    /* [in] */ double f_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_ZShear3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ZShear3Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double e_0,
    /* [in] */ double f_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_ZShear3Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Transform4x4AnimEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG m_0size,
    /* [size_is][in] */ IDANumber *m_0[  ],
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Transform4x4AnimEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Transform4x4Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT m_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Transform4x4Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Compose3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDATransform3 *a_0,
    /* [in] */ IDATransform3 *b_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_Compose3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Compose3ArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG xfs_0size,
    /* [size_is][in] */ IDATransform3 *xfs_0[  ],
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Compose3ArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Compose3Array_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT xfs_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Compose3Array_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_LookAtFrom_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *to_0,
    /* [in] */ IDAPoint3 *from_1,
    /* [in] */ IDAVector3 *up_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_LookAtFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_IdentityTransform2_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDATransform2 **ret_0);


void __RPC_STUB IDAStatics_get_IdentityTransform2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *Tx_0,
    /* [in] */ IDANumber *Ty_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Translate2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate2_Proxy( 
    IDAStatics * This,
    /* [in] */ double Tx_0,
    /* [in] */ double Ty_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Translate2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate2Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double Tx_0,
    /* [in] */ double Ty_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Translate2Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate2Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *delta_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Translate2Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate2Point_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *pos_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Translate2Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *x_0,
    /* [in] */ IDANumber *y_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Scale2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Scale2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Scale2Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2Vector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *obsoleteMethod_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Scale2Vector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *scale_vec_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Scale2Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2UniformAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *uniform_scale_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Scale2UniformAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2Uniform_Proxy( 
    IDAStatics * This,
    /* [in] */ double uniform_scale_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Scale2Uniform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2UniformRate_Proxy( 
    IDAStatics * This,
    /* [in] */ double uniform_scale_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Scale2UniformRate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *angle_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Rotate2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate2_Proxy( 
    IDAStatics * This,
    /* [in] */ double angle_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Rotate2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate2Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double angle_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Rotate2Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate2Degrees_Proxy( 
    IDAStatics * This,
    /* [in] */ double angle_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Rotate2Degrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate2RateDegrees_Proxy( 
    IDAStatics * This,
    /* [in] */ double angle_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Rotate2RateDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_XShear2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *arg_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_XShear2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_XShear2_Proxy( 
    IDAStatics * This,
    /* [in] */ double arg_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_XShear2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_XShear2Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double arg_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_XShear2Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_YShear2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *arg_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_YShear2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_YShear2_Proxy( 
    IDAStatics * This,
    /* [in] */ double arg_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_YShear2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_YShear2Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double arg_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_YShear2Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Transform3x2AnimEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG m_0size,
    /* [size_is][in] */ IDANumber *m_0[  ],
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Transform3x2AnimEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Transform3x2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT m_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Transform3x2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Compose2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDATransform2 *a_0,
    /* [in] */ IDATransform2 *b_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Compose2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Compose2ArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG xfs_0size,
    /* [size_is][in] */ IDATransform2 *xfs_0[  ],
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Compose2ArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Compose2Array_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT xfs_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Compose2Array_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IDAStatics_Tuple_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT obsolete1,
    /* [retval][out] */ IDATuple **obsolete2);


void __RPC_STUB IDAStatics_Tuple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IDAStatics_Array_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT obsolete1,
    /* [retval][out] */ IDAArray **obsolete2);


void __RPC_STUB IDAStatics_Array_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_AreBlockingImportsComplete_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ VARIANT_BOOL *bComplete);


void __RPC_STUB IDAStatics_get_AreBlockingImportsComplete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAStatics_INTERFACE_DEFINED__ */


#ifndef __IDA2Statics_INTERFACE_DEFINED__
#define __IDA2Statics_INTERFACE_DEFINED__

/* interface IDA2Statics */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


enum __MIDL_IDA2Statics_0001
    {	DAARRAY_CHANGEABLE	= 0x1
    } ;

EXTERN_C const IID IID_IDA2Statics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FA261CF0-C44E-11d1-9BE4-00C04FC2F51D")
    IDA2Statics : public IDAStatics
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ImportDirect3DRMVisual( 
            /* [in] */ IUnknown *visual,
            /* [retval][out] */ IDAGeometry **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE ApplyDXTransformEx( 
            /* [in] */ IUnknown *theXf,
            /* [in] */ LONG numInputs,
            /* [size_is][in] */ IDABehavior **inputs,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDADXTransformResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ApplyDXTransform( 
            /* [in] */ VARIANT varXf,
            /* [in] */ VARIANT inputs,
            /* [in] */ VARIANT evaluator,
            /* [retval][out] */ IDADXTransformResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ModifiableNumber( 
            /* [in] */ double initVal,
            /* [retval][out] */ IDANumber **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ModifiableString( 
            /* [in] */ BSTR initVal,
            /* [retval][out] */ IDAString **ppResult) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE DAArrayEx2( 
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IDAArray **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DAArray2( 
            /* [in] */ VARIANT bvrs,
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IDAArray **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportGeometryWrapped( 
            /* [in] */ BSTR url,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [retval][out] */ IDAGeometry **ppGeometry) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportGeometryWrappedAsync( 
            /* [in] */ BSTR url,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportDirect3DRMVisualWrapped( 
            /* [in] */ IUnknown *visual,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [retval][out] */ IDAGeometry **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UntilNotifyScript( 
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ BSTR scriptlet_2,
            /* [retval][out] */ IDABehavior **ret_3) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ViewFrameRate( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE UnionMontageArrayEx( 
            /* [in] */ LONG mtgs_0size,
            /* [size_is][in] */ IDAMontage *mtgs_0[  ],
            /* [retval][out] */ IDAMontage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnionMontageArray( 
            /* [in] */ VARIANT mtgs_0,
            /* [retval][out] */ IDAMontage **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ModifiableBehaviorFlags( 
            /* [retval][out] */ DWORD *dwFlags) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ModifiableBehaviorFlags( 
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EmptyColor( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2StaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Statics * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Statics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Statics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Statics * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Statics * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Statics * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Statics * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VersionString )( 
            IDA2Statics * This,
            /* [retval][out] */ BSTR *str);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Site )( 
            IDA2Statics * This,
            /* [retval][out] */ IDASite **pSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Site )( 
            IDA2Statics * This,
            /* [in] */ IDASite *pSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientSite )( 
            IDA2Statics * This,
            /* [in] */ IOleClientSite *pClientSite);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientSite )( 
            IDA2Statics * This,
            /* [retval][out] */ IOleClientSite **pClientSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PixelConstructionMode )( 
            IDA2Statics * This,
            /* [in] */ VARIANT_BOOL bMode);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelConstructionMode )( 
            IDA2Statics * This,
            /* [retval][out] */ VARIANT_BOOL *bMode);
        
        HRESULT ( STDMETHODCALLTYPE *TriggerEvent )( 
            IDA2Statics * This,
            /* [in] */ IDAEvent *event,
            /* [in] */ IDABehavior *data);
        
        HRESULT ( STDMETHODCALLTYPE *NewDrawingSurface )( 
            IDA2Statics * This,
            /* [retval][out] */ IDADrawingSurface **pds);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovie )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovieAsync )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImage )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageAsync )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageColorKey )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageAsyncColorKey )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSound )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSoundAsync )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometry )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryAsync )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirectDrawSurface )( 
            IDA2Statics * This,
            /* [in] */ IUnknown *dds,
            /* [in] */ IDAEvent *updateEvent,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *Cond )( 
            IDA2Statics * This,
            /* [in] */ IDABoolean *c,
            /* [in] */ IDABehavior *i,
            /* [in] */ IDABehavior *e,
            /* [retval][out] */ IDABehavior **pCondBvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DAArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DAArray )( 
            IDA2Statics * This,
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDAArray **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DATupleEx )( 
            IDA2Statics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDATuple **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DATuple )( 
            IDA2Statics * This,
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDATuple **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableBehavior )( 
            IDA2Statics * This,
            /* [in] */ IDABehavior *orig,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UninitializedArray )( 
            IDA2Statics * This,
            /* [in] */ IDAArray *typeTmp,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UninitializedTuple )( 
            IDA2Statics * This,
            /* [in] */ IDATuple *typeTmp,
            /* [retval][out] */ IDATuple **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *NumberBSplineEx )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDANumber *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *NumberBSpline )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Point2BSplineEx )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Point2BSpline )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Point3BSplineEx )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Point3BSpline )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Vector2BSplineEx )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2BSpline )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Vector3BSplineEx )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3BSpline )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Pow )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Abs )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Sqrt )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Floor )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Round )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Ceiling )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Asin )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Acos )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Atan )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Sin )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Cos )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Tan )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Exp )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Ln )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Log10 )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToDegrees )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToRadians )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mod )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Atan2 )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Sub )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Mul )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Div )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *LT )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *LTE )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GT )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GTE )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *EQ )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NE )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Neg )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *InterpolateAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [retval][out] */ IDANumber **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Interpolate )( 
            IDA2Statics * This,
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [retval][out] */ IDANumber **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *SlowInSlowOutAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [in] */ IDANumber *sharpness_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *SlowInSlowOut )( 
            IDA2Statics * This,
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [in] */ double sharpness_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *SoundSource )( 
            IDA2Statics * This,
            /* [in] */ IDASound *snd_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mix )( 
            IDA2Statics * This,
            /* [in] */ IDASound *left_0,
            /* [in] */ IDASound *right_1,
            /* [retval][out] */ IDASound **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *And )( 
            IDA2Statics * This,
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Or )( 
            IDA2Statics * This,
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Not )( 
            IDA2Statics * This,
            /* [in] */ IDABoolean *a_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Integral )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Derivative )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *IntegralVector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *IntegralVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativeVector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativeVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativePoint2 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativePoint3 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyState )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyUp )( 
            IDA2Statics * This,
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyDown )( 
            IDA2Statics * This,
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DANumber )( 
            IDA2Statics * This,
            /* [in] */ double num_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DAString )( 
            IDA2Statics * This,
            /* [in] */ BSTR str_0,
            /* [retval][out] */ IDAString **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DABoolean )( 
            IDA2Statics * This,
            /* [in] */ VARIANT_BOOL num_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SeededRandom )( 
            IDA2Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MousePosition )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonState )( 
            IDA2Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonState )( 
            IDA2Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DATrue )( 
            IDA2Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DAFalse )( 
            IDA2Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalTime )( 
            IDA2Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GlobalTime )( 
            IDA2Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pixel )( 
            IDA2Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UserData )( 
            IDA2Statics * This,
            /* [in] */ IUnknown *data_0,
            /* [retval][out] */ IDAUserData **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UntilNotify )( 
            IDA2Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDAUntilNotifier *notifier_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Until )( 
            IDA2Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDABehavior *b1_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *UntilEx )( 
            IDA2Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [retval][out] */ IDABehavior **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Sequence )( 
            IDA2Statics * This,
            /* [in] */ IDABehavior *s1_0,
            /* [in] */ IDABehavior *s2_1,
            /* [retval][out] */ IDABehavior **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPath )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngle )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUpright )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathEval )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleEval )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUprightEval )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUprightAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ConcatString )( 
            IDA2Statics * This,
            /* [in] */ IDAString *s1_0,
            /* [in] */ IDAString *s2_1,
            /* [retval][out] */ IDAString **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PerspectiveCamera )( 
            IDA2Statics * This,
            /* [in] */ double focalDist_0,
            /* [in] */ double nearClip_1,
            /* [retval][out] */ IDACamera **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PerspectiveCameraAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *focalDist_0,
            /* [in] */ IDANumber *nearClip_1,
            /* [retval][out] */ IDACamera **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelCamera )( 
            IDA2Statics * This,
            /* [in] */ double nearClip_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelCameraAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *nearClip_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgbAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *red_0,
            /* [in] */ IDANumber *green_1,
            /* [in] */ IDANumber *blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgb )( 
            IDA2Statics * This,
            /* [in] */ double red_0,
            /* [in] */ double green_1,
            /* [in] */ double blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgb255 )( 
            IDA2Statics * This,
            /* [in] */ short red_0,
            /* [in] */ short green_1,
            /* [in] */ short blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorHsl )( 
            IDA2Statics * This,
            /* [in] */ double hue_0,
            /* [in] */ double saturation_1,
            /* [in] */ double lum_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorHslAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *hue_0,
            /* [in] */ IDANumber *saturation_1,
            /* [in] */ IDANumber *lum_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Red )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Green )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blue )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cyan )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Magenta )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Yellow )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Black )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_White )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Aqua )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Fuchsia )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Gray )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lime )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Maroon )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Navy )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Olive )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Purple )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Silver )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Teal )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Predicate )( 
            IDA2Statics * This,
            /* [in] */ IDABoolean *b_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *NotEvent )( 
            IDA2Statics * This,
            /* [in] */ IDAEvent *event_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AndEvent )( 
            IDA2Statics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *OrEvent )( 
            IDA2Statics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ThenEvent )( 
            IDA2Statics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonDown )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonUp )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonDown )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonUp )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Always )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Never )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *TimerAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Timer )( 
            IDA2Statics * This,
            /* [in] */ double n_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AppTriggeredEvent )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ScriptCallback )( 
            IDA2Statics * This,
            /* [in] */ BSTR obsolete1_0,
            /* [in] */ IDAEvent *obsolete2_1,
            /* [in] */ BSTR obsolete3_2,
            /* [retval][out] */ IDAEvent **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyGeometry )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UnionGeometry )( 
            IDA2Statics * This,
            /* [in] */ IDAGeometry *g1_0,
            /* [in] */ IDAGeometry *g2_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *UnionGeometryArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAGeometry *imgs_0[  ],
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UnionGeometryArray )( 
            IDA2Statics * This,
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyImage )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectableEmptyImage )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *SolidColorImage )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *GradientPolygonEx )( 
            IDA2Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG colors_1size,
            /* [size_is][in] */ IDAColor *colors_1[  ],
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GradientPolygon )( 
            IDA2Statics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT colors_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonEx )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygon )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonAnimEx )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *GradientSquare )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lowerLeft_0,
            /* [in] */ IDAColor *upperLeft_1,
            /* [in] */ IDAColor *upperRight_2,
            /* [in] */ IDAColor *lowerRight_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientSquare )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientSquareAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientRegularPoly )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double numEdges_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientRegularPolyAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *numEdges_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *GradientHorizontal )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *GradientHorizontalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *HatchHorizontal )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchHorizontalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchVertical )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchVerticalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchForwardDiagonal )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchForwardDiagonalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchBackwardDiagonal )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchBackwardDiagonalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchCross )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchCrossAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchDiagonalCross )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchDiagonalCrossAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Overlay )( 
            IDA2Statics * This,
            /* [in] */ IDAImage *top_0,
            /* [in] */ IDAImage *bottom_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *OverlayArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAImage *imgs_0[  ],
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OverlayArray )( 
            IDA2Statics * This,
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AmbientLight )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DirectionalLight )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PointLight )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *SpotLightAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ IDANumber *cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SpotLight )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ double cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultLineStyle )( 
            IDA2Statics * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyLineStyle )( 
            IDA2Statics * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleBevel )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleRound )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleMiter )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleFlat )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleSquare )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleRound )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyleSolid )( 
            IDA2Statics * This,
            /* [retval][out] */ IDADashStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyleDashed )( 
            IDA2Statics * This,
            /* [retval][out] */ IDADashStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultMicrophone )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAMicrophone **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueMatte )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAMatte **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClearMatte )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAMatte **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMatte )( 
            IDA2Statics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *IntersectMatte )( 
            IDA2Statics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DifferenceMatte )( 
            IDA2Statics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FillMatte )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *p_0,
            /* [retval][out] */ IDAMatte **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TextMatte )( 
            IDA2Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyMontage )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAMontage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ImageMontage )( 
            IDA2Statics * This,
            /* [in] */ IDAImage *im_0,
            /* [in] */ double depth_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ImageMontageAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAImage *im_0,
            /* [in] */ IDANumber *depth_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMontage )( 
            IDA2Statics * This,
            /* [in] */ IDAMontage *m1_0,
            /* [in] */ IDAMontage *m2_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Concat )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *p1_0,
            /* [in] */ IDAPath2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ConcatArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG paths_0size,
            /* [size_is][in] */ IDAPath2 *paths_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ConcatArray )( 
            IDA2Statics * This,
            /* [in] */ VARIANT paths_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Line )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Ray )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *pt_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *StringPathAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *StringPath )( 
            IDA2Statics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolylineEx )( 
            IDA2Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Polyline )( 
            IDA2Statics * This,
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolydrawPathEx )( 
            IDA2Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG codes_1size,
            /* [size_is][in] */ IDANumber *codes_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PolydrawPath )( 
            IDA2Statics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT codes_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadians )( 
            IDA2Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadiansAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ArcDegrees )( 
            IDA2Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadians )( 
            IDA2Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadiansAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieDegrees )( 
            IDA2Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *Oval )( 
            IDA2Statics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *OvalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rect )( 
            IDA2Statics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RectAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRect )( 
            IDA2Statics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [in] */ double cornerArcWidth_2,
            /* [in] */ double cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRectAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [in] */ IDANumber *cornerArcWidth_2,
            /* [in] */ IDANumber *cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *CubicBSplinePathEx )( 
            IDA2Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG knots_1size,
            /* [size_is][in] */ IDANumber *knots_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *CubicBSplinePath )( 
            IDA2Statics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT knots_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextPath )( 
            IDA2Statics * This,
            /* [in] */ IDAString *obsolete1_0,
            /* [in] */ IDAFontStyle *obsolete2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Silence )( 
            IDA2Statics * This,
            /* [retval][out] */ IDASound **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *MixArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG snds_0size,
            /* [size_is][in] */ IDASound *snds_0[  ],
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MixArray )( 
            IDA2Statics * This,
            /* [in] */ VARIANT snds_0,
            /* [retval][out] */ IDASound **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SinSynth )( 
            IDA2Statics * This,
            /* [retval][out] */ IDASound **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFont )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *FontAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDANumber *size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Font )( 
            IDA2Statics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ double size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *StringImageAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *StringImage )( 
            IDA2Statics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextImageAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAString *obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextImage )( 
            IDA2Statics * This,
            /* [in] */ BSTR obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XVector2 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YVector2 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZeroVector2 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Origin2 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2 )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2 )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2PolarAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2Polar )( 
            IDA2Statics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2PolarDegrees )( 
            IDA2Statics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2PolarAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2Polar )( 
            IDA2Statics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DotVector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [in] */ IDAVector2 *u_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NegVector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SubVector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddVector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddPoint2Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint2Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint2 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistancePoint2 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistanceSquaredPoint2 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XVector3 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YVector3 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZVector3 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZeroVector3 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Origin3 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAPoint3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3 )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3 )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3SphericalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *xyAngle_0,
            /* [in] */ IDANumber *yzAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3Spherical )( 
            IDA2Statics * This,
            /* [in] */ double xyAngle_0,
            /* [in] */ double yzAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3SphericalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *zxAngle_0,
            /* [in] */ IDANumber *xyAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3Spherical )( 
            IDA2Statics * This,
            /* [in] */ double zxAngle_0,
            /* [in] */ double xyAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *DotVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *CrossVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NegVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SubVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddPoint3Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint3Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint3 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *p1_0,
            /* [in] */ IDAPoint3 *p2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistancePoint3 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistanceSquaredPoint3 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentityTransform3 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDATransform3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *tx_0,
            /* [in] */ IDANumber *ty_1,
            /* [in] */ IDANumber *tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3 )( 
            IDA2Statics * This,
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Rate )( 
            IDA2Statics * This,
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *delta_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Point )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *new_origin_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3 )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Rate )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *scale_vec_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3UniformAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Uniform )( 
            IDA2Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3UniformRate )( 
            IDA2Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ IDANumber *angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Rate )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Degrees )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3RateDegrees )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3 )( 
            IDA2Statics * This,
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3Rate )( 
            IDA2Statics * This,
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *c_0,
            /* [in] */ IDANumber *d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3 )( 
            IDA2Statics * This,
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3Rate )( 
            IDA2Statics * This,
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *e_0,
            /* [in] */ IDANumber *f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3 )( 
            IDA2Statics * This,
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3Rate )( 
            IDA2Statics * This,
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Transform4x4AnimEx )( 
            IDA2Statics * This,
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform4x4Anim )( 
            IDA2Statics * This,
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose3 )( 
            IDA2Statics * This,
            /* [in] */ IDATransform3 *a_0,
            /* [in] */ IDATransform3 *b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Compose3ArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform3 *xfs_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose3Array )( 
            IDA2Statics * This,
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LookAtFrom )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *to_0,
            /* [in] */ IDAPoint3 *from_1,
            /* [in] */ IDAVector3 *up_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentityTransform2 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDATransform2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *Tx_0,
            /* [in] */ IDANumber *Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2 )( 
            IDA2Statics * This,
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Rate )( 
            IDA2Statics * This,
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *delta_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Point )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *pos_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2 )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Rate )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Vector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *obsoleteMethod_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *scale_vec_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2UniformAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Uniform )( 
            IDA2Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2UniformRate )( 
            IDA2Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2 )( 
            IDA2Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Rate )( 
            IDA2Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Degrees )( 
            IDA2Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2RateDegrees )( 
            IDA2Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2 )( 
            IDA2Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2Rate )( 
            IDA2Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2 )( 
            IDA2Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2Rate )( 
            IDA2Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Transform3x2AnimEx )( 
            IDA2Statics * This,
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform3x2Anim )( 
            IDA2Statics * This,
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose2 )( 
            IDA2Statics * This,
            /* [in] */ IDATransform2 *a_0,
            /* [in] */ IDATransform2 *b_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Compose2ArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform2 *xfs_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose2Array )( 
            IDA2Statics * This,
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Tuple )( 
            IDA2Statics * This,
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDATuple **obsolete2);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Array )( 
            IDA2Statics * This,
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDAArray **obsolete2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AreBlockingImportsComplete )( 
            IDA2Statics * This,
            /* [retval][out] */ VARIANT_BOOL *bComplete);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirect3DRMVisual )( 
            IDA2Statics * This,
            /* [in] */ IUnknown *visual,
            /* [retval][out] */ IDAGeometry **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ApplyDXTransformEx )( 
            IDA2Statics * This,
            /* [in] */ IUnknown *theXf,
            /* [in] */ LONG numInputs,
            /* [size_is][in] */ IDABehavior **inputs,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDADXTransformResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyDXTransform )( 
            IDA2Statics * This,
            /* [in] */ VARIANT varXf,
            /* [in] */ VARIANT inputs,
            /* [in] */ VARIANT evaluator,
            /* [retval][out] */ IDADXTransformResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableNumber )( 
            IDA2Statics * This,
            /* [in] */ double initVal,
            /* [retval][out] */ IDANumber **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableString )( 
            IDA2Statics * This,
            /* [in] */ BSTR initVal,
            /* [retval][out] */ IDAString **ppResult);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DAArrayEx2 )( 
            IDA2Statics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DAArray2 )( 
            IDA2Statics * This,
            /* [in] */ VARIANT bvrs,
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryWrapped )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryWrappedAsync )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirect3DRMVisualWrapped )( 
            IDA2Statics * This,
            /* [in] */ IUnknown *visual,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [retval][out] */ IDAGeometry **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UntilNotifyScript )( 
            IDA2Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ BSTR scriptlet_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ViewFrameRate )( 
            IDA2Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *UnionMontageArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG mtgs_0size,
            /* [size_is][in] */ IDAMontage *mtgs_0[  ],
            /* [retval][out] */ IDAMontage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMontageArray )( 
            IDA2Statics * This,
            /* [in] */ VARIANT mtgs_0,
            /* [retval][out] */ IDAMontage **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ModifiableBehaviorFlags )( 
            IDA2Statics * This,
            /* [retval][out] */ DWORD *dwFlags);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ModifiableBehaviorFlags )( 
            IDA2Statics * This,
            /* [in] */ DWORD dwFlags);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyColor )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        END_INTERFACE
    } IDA2StaticsVtbl;

    interface IDA2Statics
    {
        CONST_VTBL struct IDA2StaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Statics_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Statics_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Statics_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Statics_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Statics_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Statics_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Statics_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Statics_get_VersionString(This,str)	\
    (This)->lpVtbl -> get_VersionString(This,str)

#define IDA2Statics_get_Site(This,pSite)	\
    (This)->lpVtbl -> get_Site(This,pSite)

#define IDA2Statics_put_Site(This,pSite)	\
    (This)->lpVtbl -> put_Site(This,pSite)

#define IDA2Statics_put_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> put_ClientSite(This,pClientSite)

#define IDA2Statics_get_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> get_ClientSite(This,pClientSite)

#define IDA2Statics_put_PixelConstructionMode(This,bMode)	\
    (This)->lpVtbl -> put_PixelConstructionMode(This,bMode)

#define IDA2Statics_get_PixelConstructionMode(This,bMode)	\
    (This)->lpVtbl -> get_PixelConstructionMode(This,bMode)

#define IDA2Statics_TriggerEvent(This,event,data)	\
    (This)->lpVtbl -> TriggerEvent(This,event,data)

#define IDA2Statics_NewDrawingSurface(This,pds)	\
    (This)->lpVtbl -> NewDrawingSurface(This,pds)

#define IDA2Statics_ImportMovie(This,url,ppResult)	\
    (This)->lpVtbl -> ImportMovie(This,url,ppResult)

#define IDA2Statics_ImportMovieAsync(This,url,pImageStandIn,pSoundStandIn,ppResult)	\
    (This)->lpVtbl -> ImportMovieAsync(This,url,pImageStandIn,pSoundStandIn,ppResult)

#define IDA2Statics_ImportImage(This,url,ppImage)	\
    (This)->lpVtbl -> ImportImage(This,url,ppImage)

#define IDA2Statics_ImportImageAsync(This,url,pImageStandIn,ppResult)	\
    (This)->lpVtbl -> ImportImageAsync(This,url,pImageStandIn,ppResult)

#define IDA2Statics_ImportImageColorKey(This,url,colorKeyRed,colorKeyGreen,colorKeyBlue,ppImage)	\
    (This)->lpVtbl -> ImportImageColorKey(This,url,colorKeyRed,colorKeyGreen,colorKeyBlue,ppImage)

#define IDA2Statics_ImportImageAsyncColorKey(This,url,pImageStandIn,colorKeyRed,colorKeyGreen,colorKeyBlue,ppResult)	\
    (This)->lpVtbl -> ImportImageAsyncColorKey(This,url,pImageStandIn,colorKeyRed,colorKeyGreen,colorKeyBlue,ppResult)

#define IDA2Statics_ImportSound(This,url,ppResult)	\
    (This)->lpVtbl -> ImportSound(This,url,ppResult)

#define IDA2Statics_ImportSoundAsync(This,url,pSoundStandIn,ppResult)	\
    (This)->lpVtbl -> ImportSoundAsync(This,url,pSoundStandIn,ppResult)

#define IDA2Statics_ImportGeometry(This,url,ppGeometry)	\
    (This)->lpVtbl -> ImportGeometry(This,url,ppGeometry)

#define IDA2Statics_ImportGeometryAsync(This,url,pGeoStandIn,ppResult)	\
    (This)->lpVtbl -> ImportGeometryAsync(This,url,pGeoStandIn,ppResult)

#define IDA2Statics_ImportDirectDrawSurface(This,dds,updateEvent,ppImage)	\
    (This)->lpVtbl -> ImportDirectDrawSurface(This,dds,updateEvent,ppImage)

#define IDA2Statics_Cond(This,c,i,e,pCondBvr)	\
    (This)->lpVtbl -> Cond(This,c,i,e,pCondBvr)

#define IDA2Statics_DAArrayEx(This,s,pBvrs,bvr)	\
    (This)->lpVtbl -> DAArrayEx(This,s,pBvrs,bvr)

#define IDA2Statics_DAArray(This,bvrs,bvr)	\
    (This)->lpVtbl -> DAArray(This,bvrs,bvr)

#define IDA2Statics_DATupleEx(This,s,pBvrs,bvr)	\
    (This)->lpVtbl -> DATupleEx(This,s,pBvrs,bvr)

#define IDA2Statics_DATuple(This,bvrs,bvr)	\
    (This)->lpVtbl -> DATuple(This,bvrs,bvr)

#define IDA2Statics_ModifiableBehavior(This,orig,bvr)	\
    (This)->lpVtbl -> ModifiableBehavior(This,orig,bvr)

#define IDA2Statics_UninitializedArray(This,typeTmp,bvr)	\
    (This)->lpVtbl -> UninitializedArray(This,typeTmp,bvr)

#define IDA2Statics_UninitializedTuple(This,typeTmp,bvr)	\
    (This)->lpVtbl -> UninitializedTuple(This,typeTmp,bvr)

#define IDA2Statics_NumberBSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> NumberBSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA2Statics_NumberBSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> NumberBSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA2Statics_Point2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA2Statics_Point2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA2Statics_Point3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA2Statics_Point3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA2Statics_Vector2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA2Statics_Vector2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA2Statics_Vector3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA2Statics_Vector3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA2Statics_Pow(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Pow(This,a_0,b_1,ret_2)

#define IDA2Statics_Abs(This,a_0,ret_1)	\
    (This)->lpVtbl -> Abs(This,a_0,ret_1)

#define IDA2Statics_Sqrt(This,a_0,ret_1)	\
    (This)->lpVtbl -> Sqrt(This,a_0,ret_1)

#define IDA2Statics_Floor(This,a_0,ret_1)	\
    (This)->lpVtbl -> Floor(This,a_0,ret_1)

#define IDA2Statics_Round(This,a_0,ret_1)	\
    (This)->lpVtbl -> Round(This,a_0,ret_1)

#define IDA2Statics_Ceiling(This,a_0,ret_1)	\
    (This)->lpVtbl -> Ceiling(This,a_0,ret_1)

#define IDA2Statics_Asin(This,a_0,ret_1)	\
    (This)->lpVtbl -> Asin(This,a_0,ret_1)

#define IDA2Statics_Acos(This,a_0,ret_1)	\
    (This)->lpVtbl -> Acos(This,a_0,ret_1)

#define IDA2Statics_Atan(This,a_0,ret_1)	\
    (This)->lpVtbl -> Atan(This,a_0,ret_1)

#define IDA2Statics_Sin(This,a_0,ret_1)	\
    (This)->lpVtbl -> Sin(This,a_0,ret_1)

#define IDA2Statics_Cos(This,a_0,ret_1)	\
    (This)->lpVtbl -> Cos(This,a_0,ret_1)

#define IDA2Statics_Tan(This,a_0,ret_1)	\
    (This)->lpVtbl -> Tan(This,a_0,ret_1)

#define IDA2Statics_Exp(This,a_0,ret_1)	\
    (This)->lpVtbl -> Exp(This,a_0,ret_1)

#define IDA2Statics_Ln(This,a_0,ret_1)	\
    (This)->lpVtbl -> Ln(This,a_0,ret_1)

#define IDA2Statics_Log10(This,a_0,ret_1)	\
    (This)->lpVtbl -> Log10(This,a_0,ret_1)

#define IDA2Statics_ToDegrees(This,a_0,ret_1)	\
    (This)->lpVtbl -> ToDegrees(This,a_0,ret_1)

#define IDA2Statics_ToRadians(This,a_0,ret_1)	\
    (This)->lpVtbl -> ToRadians(This,a_0,ret_1)

#define IDA2Statics_Mod(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Mod(This,a_0,b_1,ret_2)

#define IDA2Statics_Atan2(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Atan2(This,a_0,b_1,ret_2)

#define IDA2Statics_Add(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Add(This,a_0,b_1,ret_2)

#define IDA2Statics_Sub(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Sub(This,a_0,b_1,ret_2)

#define IDA2Statics_Mul(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Mul(This,a_0,b_1,ret_2)

#define IDA2Statics_Div(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Div(This,a_0,b_1,ret_2)

#define IDA2Statics_LT(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> LT(This,a_0,b_1,ret_2)

#define IDA2Statics_LTE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> LTE(This,a_0,b_1,ret_2)

#define IDA2Statics_GT(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> GT(This,a_0,b_1,ret_2)

#define IDA2Statics_GTE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> GTE(This,a_0,b_1,ret_2)

#define IDA2Statics_EQ(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> EQ(This,a_0,b_1,ret_2)

#define IDA2Statics_NE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> NE(This,a_0,b_1,ret_2)

#define IDA2Statics_Neg(This,a_0,ret_1)	\
    (This)->lpVtbl -> Neg(This,a_0,ret_1)

#define IDA2Statics_InterpolateAnim(This,from_0,to_1,duration_2,ret_3)	\
    (This)->lpVtbl -> InterpolateAnim(This,from_0,to_1,duration_2,ret_3)

#define IDA2Statics_Interpolate(This,from_0,to_1,duration_2,ret_3)	\
    (This)->lpVtbl -> Interpolate(This,from_0,to_1,duration_2,ret_3)

#define IDA2Statics_SlowInSlowOutAnim(This,from_0,to_1,duration_2,sharpness_3,ret_4)	\
    (This)->lpVtbl -> SlowInSlowOutAnim(This,from_0,to_1,duration_2,sharpness_3,ret_4)

#define IDA2Statics_SlowInSlowOut(This,from_0,to_1,duration_2,sharpness_3,ret_4)	\
    (This)->lpVtbl -> SlowInSlowOut(This,from_0,to_1,duration_2,sharpness_3,ret_4)

#define IDA2Statics_SoundSource(This,snd_0,ret_1)	\
    (This)->lpVtbl -> SoundSource(This,snd_0,ret_1)

#define IDA2Statics_Mix(This,left_0,right_1,ret_2)	\
    (This)->lpVtbl -> Mix(This,left_0,right_1,ret_2)

#define IDA2Statics_And(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> And(This,a_0,b_1,ret_2)

#define IDA2Statics_Or(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Or(This,a_0,b_1,ret_2)

#define IDA2Statics_Not(This,a_0,ret_1)	\
    (This)->lpVtbl -> Not(This,a_0,ret_1)

#define IDA2Statics_Integral(This,b_0,ret_1)	\
    (This)->lpVtbl -> Integral(This,b_0,ret_1)

#define IDA2Statics_Derivative(This,b_0,ret_1)	\
    (This)->lpVtbl -> Derivative(This,b_0,ret_1)

#define IDA2Statics_IntegralVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> IntegralVector2(This,v_0,ret_1)

#define IDA2Statics_IntegralVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> IntegralVector3(This,v_0,ret_1)

#define IDA2Statics_DerivativeVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativeVector2(This,v_0,ret_1)

#define IDA2Statics_DerivativeVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativeVector3(This,v_0,ret_1)

#define IDA2Statics_DerivativePoint2(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativePoint2(This,v_0,ret_1)

#define IDA2Statics_DerivativePoint3(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativePoint3(This,v_0,ret_1)

#define IDA2Statics_KeyState(This,n_0,ret_1)	\
    (This)->lpVtbl -> KeyState(This,n_0,ret_1)

#define IDA2Statics_KeyUp(This,arg_0,ret_1)	\
    (This)->lpVtbl -> KeyUp(This,arg_0,ret_1)

#define IDA2Statics_KeyDown(This,arg_0,ret_1)	\
    (This)->lpVtbl -> KeyDown(This,arg_0,ret_1)

#define IDA2Statics_DANumber(This,num_0,ret_1)	\
    (This)->lpVtbl -> DANumber(This,num_0,ret_1)

#define IDA2Statics_DAString(This,str_0,ret_1)	\
    (This)->lpVtbl -> DAString(This,str_0,ret_1)

#define IDA2Statics_DABoolean(This,num_0,ret_1)	\
    (This)->lpVtbl -> DABoolean(This,num_0,ret_1)

#define IDA2Statics_SeededRandom(This,arg_0,ret_1)	\
    (This)->lpVtbl -> SeededRandom(This,arg_0,ret_1)

#define IDA2Statics_get_MousePosition(This,ret_0)	\
    (This)->lpVtbl -> get_MousePosition(This,ret_0)

#define IDA2Statics_get_LeftButtonState(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonState(This,ret_0)

#define IDA2Statics_get_RightButtonState(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonState(This,ret_0)

#define IDA2Statics_get_DATrue(This,ret_0)	\
    (This)->lpVtbl -> get_DATrue(This,ret_0)

#define IDA2Statics_get_DAFalse(This,ret_0)	\
    (This)->lpVtbl -> get_DAFalse(This,ret_0)

#define IDA2Statics_get_LocalTime(This,ret_0)	\
    (This)->lpVtbl -> get_LocalTime(This,ret_0)

#define IDA2Statics_get_GlobalTime(This,ret_0)	\
    (This)->lpVtbl -> get_GlobalTime(This,ret_0)

#define IDA2Statics_get_Pixel(This,ret_0)	\
    (This)->lpVtbl -> get_Pixel(This,ret_0)

#define IDA2Statics_UserData(This,data_0,ret_1)	\
    (This)->lpVtbl -> UserData(This,data_0,ret_1)

#define IDA2Statics_UntilNotify(This,b0_0,event_1,notifier_2,ret_3)	\
    (This)->lpVtbl -> UntilNotify(This,b0_0,event_1,notifier_2,ret_3)

#define IDA2Statics_Until(This,b0_0,event_1,b1_2,ret_3)	\
    (This)->lpVtbl -> Until(This,b0_0,event_1,b1_2,ret_3)

#define IDA2Statics_UntilEx(This,b0_0,event_1,ret_2)	\
    (This)->lpVtbl -> UntilEx(This,b0_0,event_1,ret_2)

#define IDA2Statics_Sequence(This,s1_0,s2_1,ret_2)	\
    (This)->lpVtbl -> Sequence(This,s1_0,s2_1,ret_2)

#define IDA2Statics_FollowPath(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPath(This,path_0,duration_1,ret_2)

#define IDA2Statics_FollowPathAngle(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngle(This,path_0,duration_1,ret_2)

#define IDA2Statics_FollowPathAngleUpright(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUpright(This,path_0,duration_1,ret_2)

#define IDA2Statics_FollowPathEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathEval(This,path_0,eval_1,ret_2)

#define IDA2Statics_FollowPathAngleEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleEval(This,path_0,eval_1,ret_2)

#define IDA2Statics_FollowPathAngleUprightEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUprightEval(This,path_0,eval_1,ret_2)

#define IDA2Statics_FollowPathAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA2Statics_FollowPathAngleAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA2Statics_FollowPathAngleUprightAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUprightAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA2Statics_ConcatString(This,s1_0,s2_1,ret_2)	\
    (This)->lpVtbl -> ConcatString(This,s1_0,s2_1,ret_2)

#define IDA2Statics_PerspectiveCamera(This,focalDist_0,nearClip_1,ret_2)	\
    (This)->lpVtbl -> PerspectiveCamera(This,focalDist_0,nearClip_1,ret_2)

#define IDA2Statics_PerspectiveCameraAnim(This,focalDist_0,nearClip_1,ret_2)	\
    (This)->lpVtbl -> PerspectiveCameraAnim(This,focalDist_0,nearClip_1,ret_2)

#define IDA2Statics_ParallelCamera(This,nearClip_0,ret_1)	\
    (This)->lpVtbl -> ParallelCamera(This,nearClip_0,ret_1)

#define IDA2Statics_ParallelCameraAnim(This,nearClip_0,ret_1)	\
    (This)->lpVtbl -> ParallelCameraAnim(This,nearClip_0,ret_1)

#define IDA2Statics_ColorRgbAnim(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgbAnim(This,red_0,green_1,blue_2,ret_3)

#define IDA2Statics_ColorRgb(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgb(This,red_0,green_1,blue_2,ret_3)

#define IDA2Statics_ColorRgb255(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgb255(This,red_0,green_1,blue_2,ret_3)

#define IDA2Statics_ColorHsl(This,hue_0,saturation_1,lum_2,ret_3)	\
    (This)->lpVtbl -> ColorHsl(This,hue_0,saturation_1,lum_2,ret_3)

#define IDA2Statics_ColorHslAnim(This,hue_0,saturation_1,lum_2,ret_3)	\
    (This)->lpVtbl -> ColorHslAnim(This,hue_0,saturation_1,lum_2,ret_3)

#define IDA2Statics_get_Red(This,ret_0)	\
    (This)->lpVtbl -> get_Red(This,ret_0)

#define IDA2Statics_get_Green(This,ret_0)	\
    (This)->lpVtbl -> get_Green(This,ret_0)

#define IDA2Statics_get_Blue(This,ret_0)	\
    (This)->lpVtbl -> get_Blue(This,ret_0)

#define IDA2Statics_get_Cyan(This,ret_0)	\
    (This)->lpVtbl -> get_Cyan(This,ret_0)

#define IDA2Statics_get_Magenta(This,ret_0)	\
    (This)->lpVtbl -> get_Magenta(This,ret_0)

#define IDA2Statics_get_Yellow(This,ret_0)	\
    (This)->lpVtbl -> get_Yellow(This,ret_0)

#define IDA2Statics_get_Black(This,ret_0)	\
    (This)->lpVtbl -> get_Black(This,ret_0)

#define IDA2Statics_get_White(This,ret_0)	\
    (This)->lpVtbl -> get_White(This,ret_0)

#define IDA2Statics_get_Aqua(This,ret_0)	\
    (This)->lpVtbl -> get_Aqua(This,ret_0)

#define IDA2Statics_get_Fuchsia(This,ret_0)	\
    (This)->lpVtbl -> get_Fuchsia(This,ret_0)

#define IDA2Statics_get_Gray(This,ret_0)	\
    (This)->lpVtbl -> get_Gray(This,ret_0)

#define IDA2Statics_get_Lime(This,ret_0)	\
    (This)->lpVtbl -> get_Lime(This,ret_0)

#define IDA2Statics_get_Maroon(This,ret_0)	\
    (This)->lpVtbl -> get_Maroon(This,ret_0)

#define IDA2Statics_get_Navy(This,ret_0)	\
    (This)->lpVtbl -> get_Navy(This,ret_0)

#define IDA2Statics_get_Olive(This,ret_0)	\
    (This)->lpVtbl -> get_Olive(This,ret_0)

#define IDA2Statics_get_Purple(This,ret_0)	\
    (This)->lpVtbl -> get_Purple(This,ret_0)

#define IDA2Statics_get_Silver(This,ret_0)	\
    (This)->lpVtbl -> get_Silver(This,ret_0)

#define IDA2Statics_get_Teal(This,ret_0)	\
    (This)->lpVtbl -> get_Teal(This,ret_0)

#define IDA2Statics_Predicate(This,b_0,ret_1)	\
    (This)->lpVtbl -> Predicate(This,b_0,ret_1)

#define IDA2Statics_NotEvent(This,event_0,ret_1)	\
    (This)->lpVtbl -> NotEvent(This,event_0,ret_1)

#define IDA2Statics_AndEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> AndEvent(This,e1_0,e2_1,ret_2)

#define IDA2Statics_OrEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> OrEvent(This,e1_0,e2_1,ret_2)

#define IDA2Statics_ThenEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> ThenEvent(This,e1_0,e2_1,ret_2)

#define IDA2Statics_get_LeftButtonDown(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonDown(This,ret_0)

#define IDA2Statics_get_LeftButtonUp(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonUp(This,ret_0)

#define IDA2Statics_get_RightButtonDown(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonDown(This,ret_0)

#define IDA2Statics_get_RightButtonUp(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonUp(This,ret_0)

#define IDA2Statics_get_Always(This,ret_0)	\
    (This)->lpVtbl -> get_Always(This,ret_0)

#define IDA2Statics_get_Never(This,ret_0)	\
    (This)->lpVtbl -> get_Never(This,ret_0)

#define IDA2Statics_TimerAnim(This,n_0,ret_1)	\
    (This)->lpVtbl -> TimerAnim(This,n_0,ret_1)

#define IDA2Statics_Timer(This,n_0,ret_1)	\
    (This)->lpVtbl -> Timer(This,n_0,ret_1)

#define IDA2Statics_AppTriggeredEvent(This,ret_0)	\
    (This)->lpVtbl -> AppTriggeredEvent(This,ret_0)

#define IDA2Statics_ScriptCallback(This,obsolete1_0,obsolete2_1,obsolete3_2,ret_3)	\
    (This)->lpVtbl -> ScriptCallback(This,obsolete1_0,obsolete2_1,obsolete3_2,ret_3)

#define IDA2Statics_get_EmptyGeometry(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyGeometry(This,ret_0)

#define IDA2Statics_UnionGeometry(This,g1_0,g2_1,ret_2)	\
    (This)->lpVtbl -> UnionGeometry(This,g1_0,g2_1,ret_2)

#define IDA2Statics_UnionGeometryArrayEx(This,imgs_0size,imgs_0,ret_1)	\
    (This)->lpVtbl -> UnionGeometryArrayEx(This,imgs_0size,imgs_0,ret_1)

#define IDA2Statics_UnionGeometryArray(This,imgs_0,ret_1)	\
    (This)->lpVtbl -> UnionGeometryArray(This,imgs_0,ret_1)

#define IDA2Statics_get_EmptyImage(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyImage(This,ret_0)

#define IDA2Statics_get_DetectableEmptyImage(This,ret_0)	\
    (This)->lpVtbl -> get_DetectableEmptyImage(This,ret_0)

#define IDA2Statics_SolidColorImage(This,col_0,ret_1)	\
    (This)->lpVtbl -> SolidColorImage(This,col_0,ret_1)

#define IDA2Statics_GradientPolygonEx(This,points_0size,points_0,colors_1size,colors_1,ret_2)	\
    (This)->lpVtbl -> GradientPolygonEx(This,points_0size,points_0,colors_1size,colors_1,ret_2)

#define IDA2Statics_GradientPolygon(This,points_0,colors_1,ret_2)	\
    (This)->lpVtbl -> GradientPolygon(This,points_0,colors_1,ret_2)

#define IDA2Statics_RadialGradientPolygonEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)

#define IDA2Statics_RadialGradientPolygon(This,inner_0,outer_1,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygon(This,inner_0,outer_1,points_2,fallOff_3,ret_4)

#define IDA2Statics_RadialGradientPolygonAnimEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonAnimEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)

#define IDA2Statics_RadialGradientPolygonAnim(This,inner_0,outer_1,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonAnim(This,inner_0,outer_1,points_2,fallOff_3,ret_4)

#define IDA2Statics_GradientSquare(This,lowerLeft_0,upperLeft_1,upperRight_2,lowerRight_3,ret_4)	\
    (This)->lpVtbl -> GradientSquare(This,lowerLeft_0,upperLeft_1,upperRight_2,lowerRight_3,ret_4)

#define IDA2Statics_RadialGradientSquare(This,inner_0,outer_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> RadialGradientSquare(This,inner_0,outer_1,fallOff_2,ret_3)

#define IDA2Statics_RadialGradientSquareAnim(This,inner_0,outer_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> RadialGradientSquareAnim(This,inner_0,outer_1,fallOff_2,ret_3)

#define IDA2Statics_RadialGradientRegularPoly(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientRegularPoly(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)

#define IDA2Statics_RadialGradientRegularPolyAnim(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientRegularPolyAnim(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)

#define IDA2Statics_GradientHorizontal(This,start_0,stop_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> GradientHorizontal(This,start_0,stop_1,fallOff_2,ret_3)

#define IDA2Statics_GradientHorizontalAnim(This,start_0,stop_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> GradientHorizontalAnim(This,start_0,stop_1,fallOff_2,ret_3)

#define IDA2Statics_HatchHorizontal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchHorizontal(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchHorizontalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchHorizontalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchVertical(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchVertical(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchVerticalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchVerticalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchForwardDiagonal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchForwardDiagonal(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchForwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchForwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchBackwardDiagonal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchBackwardDiagonal(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchBackwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchBackwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchCross(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchCross(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchCrossAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchCrossAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchDiagonalCross(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchDiagonalCross(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchDiagonalCrossAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchDiagonalCrossAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_Overlay(This,top_0,bottom_1,ret_2)	\
    (This)->lpVtbl -> Overlay(This,top_0,bottom_1,ret_2)

#define IDA2Statics_OverlayArrayEx(This,imgs_0size,imgs_0,ret_1)	\
    (This)->lpVtbl -> OverlayArrayEx(This,imgs_0size,imgs_0,ret_1)

#define IDA2Statics_OverlayArray(This,imgs_0,ret_1)	\
    (This)->lpVtbl -> OverlayArray(This,imgs_0,ret_1)

#define IDA2Statics_get_AmbientLight(This,ret_0)	\
    (This)->lpVtbl -> get_AmbientLight(This,ret_0)

#define IDA2Statics_get_DirectionalLight(This,ret_0)	\
    (This)->lpVtbl -> get_DirectionalLight(This,ret_0)

#define IDA2Statics_get_PointLight(This,ret_0)	\
    (This)->lpVtbl -> get_PointLight(This,ret_0)

#define IDA2Statics_SpotLightAnim(This,fullcone_0,cutoff_1,ret_2)	\
    (This)->lpVtbl -> SpotLightAnim(This,fullcone_0,cutoff_1,ret_2)

#define IDA2Statics_SpotLight(This,fullcone_0,cutoff_1,ret_2)	\
    (This)->lpVtbl -> SpotLight(This,fullcone_0,cutoff_1,ret_2)

#define IDA2Statics_get_DefaultLineStyle(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultLineStyle(This,ret_0)

#define IDA2Statics_get_EmptyLineStyle(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyLineStyle(This,ret_0)

#define IDA2Statics_get_JoinStyleBevel(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleBevel(This,ret_0)

#define IDA2Statics_get_JoinStyleRound(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleRound(This,ret_0)

#define IDA2Statics_get_JoinStyleMiter(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleMiter(This,ret_0)

#define IDA2Statics_get_EndStyleFlat(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleFlat(This,ret_0)

#define IDA2Statics_get_EndStyleSquare(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleSquare(This,ret_0)

#define IDA2Statics_get_EndStyleRound(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleRound(This,ret_0)

#define IDA2Statics_get_DashStyleSolid(This,ret_0)	\
    (This)->lpVtbl -> get_DashStyleSolid(This,ret_0)

#define IDA2Statics_get_DashStyleDashed(This,ret_0)	\
    (This)->lpVtbl -> get_DashStyleDashed(This,ret_0)

#define IDA2Statics_get_DefaultMicrophone(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultMicrophone(This,ret_0)

#define IDA2Statics_get_OpaqueMatte(This,ret_0)	\
    (This)->lpVtbl -> get_OpaqueMatte(This,ret_0)

#define IDA2Statics_get_ClearMatte(This,ret_0)	\
    (This)->lpVtbl -> get_ClearMatte(This,ret_0)

#define IDA2Statics_UnionMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> UnionMatte(This,m1_0,m2_1,ret_2)

#define IDA2Statics_IntersectMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> IntersectMatte(This,m1_0,m2_1,ret_2)

#define IDA2Statics_DifferenceMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> DifferenceMatte(This,m1_0,m2_1,ret_2)

#define IDA2Statics_FillMatte(This,p_0,ret_1)	\
    (This)->lpVtbl -> FillMatte(This,p_0,ret_1)

#define IDA2Statics_TextMatte(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> TextMatte(This,str_0,fs_1,ret_2)

#define IDA2Statics_get_EmptyMontage(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyMontage(This,ret_0)

#define IDA2Statics_ImageMontage(This,im_0,depth_1,ret_2)	\
    (This)->lpVtbl -> ImageMontage(This,im_0,depth_1,ret_2)

#define IDA2Statics_ImageMontageAnim(This,im_0,depth_1,ret_2)	\
    (This)->lpVtbl -> ImageMontageAnim(This,im_0,depth_1,ret_2)

#define IDA2Statics_UnionMontage(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> UnionMontage(This,m1_0,m2_1,ret_2)

#define IDA2Statics_Concat(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> Concat(This,p1_0,p2_1,ret_2)

#define IDA2Statics_ConcatArrayEx(This,paths_0size,paths_0,ret_1)	\
    (This)->lpVtbl -> ConcatArrayEx(This,paths_0size,paths_0,ret_1)

#define IDA2Statics_ConcatArray(This,paths_0,ret_1)	\
    (This)->lpVtbl -> ConcatArray(This,paths_0,ret_1)

#define IDA2Statics_Line(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> Line(This,p1_0,p2_1,ret_2)

#define IDA2Statics_Ray(This,pt_0,ret_1)	\
    (This)->lpVtbl -> Ray(This,pt_0,ret_1)

#define IDA2Statics_StringPathAnim(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringPathAnim(This,str_0,fs_1,ret_2)

#define IDA2Statics_StringPath(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringPath(This,str_0,fs_1,ret_2)

#define IDA2Statics_PolylineEx(This,points_0size,points_0,ret_1)	\
    (This)->lpVtbl -> PolylineEx(This,points_0size,points_0,ret_1)

#define IDA2Statics_Polyline(This,points_0,ret_1)	\
    (This)->lpVtbl -> Polyline(This,points_0,ret_1)

#define IDA2Statics_PolydrawPathEx(This,points_0size,points_0,codes_1size,codes_1,ret_2)	\
    (This)->lpVtbl -> PolydrawPathEx(This,points_0size,points_0,codes_1size,codes_1,ret_2)

#define IDA2Statics_PolydrawPath(This,points_0,codes_1,ret_2)	\
    (This)->lpVtbl -> PolydrawPath(This,points_0,codes_1,ret_2)

#define IDA2Statics_ArcRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA2Statics_ArcRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA2Statics_ArcDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA2Statics_PieRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA2Statics_PieRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA2Statics_PieDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA2Statics_Oval(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> Oval(This,width_0,height_1,ret_2)

#define IDA2Statics_OvalAnim(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> OvalAnim(This,width_0,height_1,ret_2)

#define IDA2Statics_Rect(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> Rect(This,width_0,height_1,ret_2)

#define IDA2Statics_RectAnim(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> RectAnim(This,width_0,height_1,ret_2)

#define IDA2Statics_RoundRect(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)	\
    (This)->lpVtbl -> RoundRect(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)

#define IDA2Statics_RoundRectAnim(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)	\
    (This)->lpVtbl -> RoundRectAnim(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)

#define IDA2Statics_CubicBSplinePathEx(This,points_0size,points_0,knots_1size,knots_1,ret_2)	\
    (This)->lpVtbl -> CubicBSplinePathEx(This,points_0size,points_0,knots_1size,knots_1,ret_2)

#define IDA2Statics_CubicBSplinePath(This,points_0,knots_1,ret_2)	\
    (This)->lpVtbl -> CubicBSplinePath(This,points_0,knots_1,ret_2)

#define IDA2Statics_TextPath(This,obsolete1_0,obsolete2_1,ret_2)	\
    (This)->lpVtbl -> TextPath(This,obsolete1_0,obsolete2_1,ret_2)

#define IDA2Statics_get_Silence(This,ret_0)	\
    (This)->lpVtbl -> get_Silence(This,ret_0)

#define IDA2Statics_MixArrayEx(This,snds_0size,snds_0,ret_1)	\
    (This)->lpVtbl -> MixArrayEx(This,snds_0size,snds_0,ret_1)

#define IDA2Statics_MixArray(This,snds_0,ret_1)	\
    (This)->lpVtbl -> MixArray(This,snds_0,ret_1)

#define IDA2Statics_get_SinSynth(This,ret_0)	\
    (This)->lpVtbl -> get_SinSynth(This,ret_0)

#define IDA2Statics_get_DefaultFont(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultFont(This,ret_0)

#define IDA2Statics_FontAnim(This,str_0,size_1,col_2,ret_3)	\
    (This)->lpVtbl -> FontAnim(This,str_0,size_1,col_2,ret_3)

#define IDA2Statics_Font(This,str_0,size_1,col_2,ret_3)	\
    (This)->lpVtbl -> Font(This,str_0,size_1,col_2,ret_3)

#define IDA2Statics_StringImageAnim(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringImageAnim(This,str_0,fs_1,ret_2)

#define IDA2Statics_StringImage(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringImage(This,str_0,fs_1,ret_2)

#define IDA2Statics_TextImageAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> TextImageAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA2Statics_TextImage(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> TextImage(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA2Statics_get_XVector2(This,ret_0)	\
    (This)->lpVtbl -> get_XVector2(This,ret_0)

#define IDA2Statics_get_YVector2(This,ret_0)	\
    (This)->lpVtbl -> get_YVector2(This,ret_0)

#define IDA2Statics_get_ZeroVector2(This,ret_0)	\
    (This)->lpVtbl -> get_ZeroVector2(This,ret_0)

#define IDA2Statics_get_Origin2(This,ret_0)	\
    (This)->lpVtbl -> get_Origin2(This,ret_0)

#define IDA2Statics_Vector2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Vector2Anim(This,x_0,y_1,ret_2)

#define IDA2Statics_Vector2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Vector2(This,x_0,y_1,ret_2)

#define IDA2Statics_Point2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Point2Anim(This,x_0,y_1,ret_2)

#define IDA2Statics_Point2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Point2(This,x_0,y_1,ret_2)

#define IDA2Statics_Vector2PolarAnim(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2PolarAnim(This,theta_0,radius_1,ret_2)

#define IDA2Statics_Vector2Polar(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2Polar(This,theta_0,radius_1,ret_2)

#define IDA2Statics_Vector2PolarDegrees(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2PolarDegrees(This,theta_0,radius_1,ret_2)

#define IDA2Statics_Point2PolarAnim(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Point2PolarAnim(This,theta_0,radius_1,ret_2)

#define IDA2Statics_Point2Polar(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Point2Polar(This,theta_0,radius_1,ret_2)

#define IDA2Statics_DotVector2(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> DotVector2(This,v_0,u_1,ret_2)

#define IDA2Statics_NegVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> NegVector2(This,v_0,ret_1)

#define IDA2Statics_SubVector2(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> SubVector2(This,v1_0,v2_1,ret_2)

#define IDA2Statics_AddVector2(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> AddVector2(This,v1_0,v2_1,ret_2)

#define IDA2Statics_AddPoint2Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> AddPoint2Vector(This,p_0,v_1,ret_2)

#define IDA2Statics_SubPoint2Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> SubPoint2Vector(This,p_0,v_1,ret_2)

#define IDA2Statics_SubPoint2(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> SubPoint2(This,p1_0,p2_1,ret_2)

#define IDA2Statics_DistancePoint2(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistancePoint2(This,p_0,q_1,ret_2)

#define IDA2Statics_DistanceSquaredPoint2(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistanceSquaredPoint2(This,p_0,q_1,ret_2)

#define IDA2Statics_get_XVector3(This,ret_0)	\
    (This)->lpVtbl -> get_XVector3(This,ret_0)

#define IDA2Statics_get_YVector3(This,ret_0)	\
    (This)->lpVtbl -> get_YVector3(This,ret_0)

#define IDA2Statics_get_ZVector3(This,ret_0)	\
    (This)->lpVtbl -> get_ZVector3(This,ret_0)

#define IDA2Statics_get_ZeroVector3(This,ret_0)	\
    (This)->lpVtbl -> get_ZeroVector3(This,ret_0)

#define IDA2Statics_get_Origin3(This,ret_0)	\
    (This)->lpVtbl -> get_Origin3(This,ret_0)

#define IDA2Statics_Vector3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Vector3Anim(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Vector3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Vector3(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Point3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Point3Anim(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Point3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Point3(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Vector3SphericalAnim(This,xyAngle_0,yzAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Vector3SphericalAnim(This,xyAngle_0,yzAngle_1,radius_2,ret_3)

#define IDA2Statics_Vector3Spherical(This,xyAngle_0,yzAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Vector3Spherical(This,xyAngle_0,yzAngle_1,radius_2,ret_3)

#define IDA2Statics_Point3SphericalAnim(This,zxAngle_0,xyAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Point3SphericalAnim(This,zxAngle_0,xyAngle_1,radius_2,ret_3)

#define IDA2Statics_Point3Spherical(This,zxAngle_0,xyAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Point3Spherical(This,zxAngle_0,xyAngle_1,radius_2,ret_3)

#define IDA2Statics_DotVector3(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> DotVector3(This,v_0,u_1,ret_2)

#define IDA2Statics_CrossVector3(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> CrossVector3(This,v_0,u_1,ret_2)

#define IDA2Statics_NegVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> NegVector3(This,v_0,ret_1)

#define IDA2Statics_SubVector3(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> SubVector3(This,v1_0,v2_1,ret_2)

#define IDA2Statics_AddVector3(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> AddVector3(This,v1_0,v2_1,ret_2)

#define IDA2Statics_AddPoint3Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> AddPoint3Vector(This,p_0,v_1,ret_2)

#define IDA2Statics_SubPoint3Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> SubPoint3Vector(This,p_0,v_1,ret_2)

#define IDA2Statics_SubPoint3(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> SubPoint3(This,p1_0,p2_1,ret_2)

#define IDA2Statics_DistancePoint3(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistancePoint3(This,p_0,q_1,ret_2)

#define IDA2Statics_DistanceSquaredPoint3(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistanceSquaredPoint3(This,p_0,q_1,ret_2)

#define IDA2Statics_get_IdentityTransform3(This,ret_0)	\
    (This)->lpVtbl -> get_IdentityTransform3(This,ret_0)

#define IDA2Statics_Translate3Anim(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3Anim(This,tx_0,ty_1,tz_2,ret_3)

#define IDA2Statics_Translate3(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3(This,tx_0,ty_1,tz_2,ret_3)

#define IDA2Statics_Translate3Rate(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3Rate(This,tx_0,ty_1,tz_2,ret_3)

#define IDA2Statics_Translate3Vector(This,delta_0,ret_1)	\
    (This)->lpVtbl -> Translate3Vector(This,delta_0,ret_1)

#define IDA2Statics_Translate3Point(This,new_origin_0,ret_1)	\
    (This)->lpVtbl -> Translate3Point(This,new_origin_0,ret_1)

#define IDA2Statics_Scale3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3Anim(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Scale3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Scale3Rate(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3Rate(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Scale3Vector(This,scale_vec_0,ret_1)	\
    (This)->lpVtbl -> Scale3Vector(This,scale_vec_0,ret_1)

#define IDA2Statics_Scale3UniformAnim(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3UniformAnim(This,uniform_scale_0,ret_1)

#define IDA2Statics_Scale3Uniform(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3Uniform(This,uniform_scale_0,ret_1)

#define IDA2Statics_Scale3UniformRate(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3UniformRate(This,uniform_scale_0,ret_1)

#define IDA2Statics_Rotate3Anim(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Anim(This,axis_0,angle_1,ret_2)

#define IDA2Statics_Rotate3(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3(This,axis_0,angle_1,ret_2)

#define IDA2Statics_Rotate3Rate(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Rate(This,axis_0,angle_1,ret_2)

#define IDA2Statics_Rotate3Degrees(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Degrees(This,axis_0,angle_1,ret_2)

#define IDA2Statics_Rotate3RateDegrees(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3RateDegrees(This,axis_0,angle_1,ret_2)

#define IDA2Statics_XShear3Anim(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3Anim(This,a_0,b_1,ret_2)

#define IDA2Statics_XShear3(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3(This,a_0,b_1,ret_2)

#define IDA2Statics_XShear3Rate(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3Rate(This,a_0,b_1,ret_2)

#define IDA2Statics_YShear3Anim(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3Anim(This,c_0,d_1,ret_2)

#define IDA2Statics_YShear3(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3(This,c_0,d_1,ret_2)

#define IDA2Statics_YShear3Rate(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3Rate(This,c_0,d_1,ret_2)

#define IDA2Statics_ZShear3Anim(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3Anim(This,e_0,f_1,ret_2)

#define IDA2Statics_ZShear3(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3(This,e_0,f_1,ret_2)

#define IDA2Statics_ZShear3Rate(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3Rate(This,e_0,f_1,ret_2)

#define IDA2Statics_Transform4x4AnimEx(This,m_0size,m_0,ret_1)	\
    (This)->lpVtbl -> Transform4x4AnimEx(This,m_0size,m_0,ret_1)

#define IDA2Statics_Transform4x4Anim(This,m_0,ret_1)	\
    (This)->lpVtbl -> Transform4x4Anim(This,m_0,ret_1)

#define IDA2Statics_Compose3(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Compose3(This,a_0,b_1,ret_2)

#define IDA2Statics_Compose3ArrayEx(This,xfs_0size,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose3ArrayEx(This,xfs_0size,xfs_0,ret_1)

#define IDA2Statics_Compose3Array(This,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose3Array(This,xfs_0,ret_1)

#define IDA2Statics_LookAtFrom(This,to_0,from_1,up_2,ret_3)	\
    (This)->lpVtbl -> LookAtFrom(This,to_0,from_1,up_2,ret_3)

#define IDA2Statics_get_IdentityTransform2(This,ret_0)	\
    (This)->lpVtbl -> get_IdentityTransform2(This,ret_0)

#define IDA2Statics_Translate2Anim(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2Anim(This,Tx_0,Ty_1,ret_2)

#define IDA2Statics_Translate2(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2(This,Tx_0,Ty_1,ret_2)

#define IDA2Statics_Translate2Rate(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2Rate(This,Tx_0,Ty_1,ret_2)

#define IDA2Statics_Translate2Vector(This,delta_0,ret_1)	\
    (This)->lpVtbl -> Translate2Vector(This,delta_0,ret_1)

#define IDA2Statics_Translate2Point(This,pos_0,ret_1)	\
    (This)->lpVtbl -> Translate2Point(This,pos_0,ret_1)

#define IDA2Statics_Scale2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2Anim(This,x_0,y_1,ret_2)

#define IDA2Statics_Scale2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2(This,x_0,y_1,ret_2)

#define IDA2Statics_Scale2Rate(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2Rate(This,x_0,y_1,ret_2)

#define IDA2Statics_Scale2Vector2(This,obsoleteMethod_0,ret_1)	\
    (This)->lpVtbl -> Scale2Vector2(This,obsoleteMethod_0,ret_1)

#define IDA2Statics_Scale2Vector(This,scale_vec_0,ret_1)	\
    (This)->lpVtbl -> Scale2Vector(This,scale_vec_0,ret_1)

#define IDA2Statics_Scale2UniformAnim(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2UniformAnim(This,uniform_scale_0,ret_1)

#define IDA2Statics_Scale2Uniform(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2Uniform(This,uniform_scale_0,ret_1)

#define IDA2Statics_Scale2UniformRate(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2UniformRate(This,uniform_scale_0,ret_1)

#define IDA2Statics_Rotate2Anim(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Anim(This,angle_0,ret_1)

#define IDA2Statics_Rotate2(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2(This,angle_0,ret_1)

#define IDA2Statics_Rotate2Rate(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Rate(This,angle_0,ret_1)

#define IDA2Statics_Rotate2Degrees(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Degrees(This,angle_0,ret_1)

#define IDA2Statics_Rotate2RateDegrees(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2RateDegrees(This,angle_0,ret_1)

#define IDA2Statics_XShear2Anim(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2Anim(This,arg_0,ret_1)

#define IDA2Statics_XShear2(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2(This,arg_0,ret_1)

#define IDA2Statics_XShear2Rate(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2Rate(This,arg_0,ret_1)

#define IDA2Statics_YShear2Anim(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2Anim(This,arg_0,ret_1)

#define IDA2Statics_YShear2(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2(This,arg_0,ret_1)

#define IDA2Statics_YShear2Rate(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2Rate(This,arg_0,ret_1)

#define IDA2Statics_Transform3x2AnimEx(This,m_0size,m_0,ret_1)	\
    (This)->lpVtbl -> Transform3x2AnimEx(This,m_0size,m_0,ret_1)

#define IDA2Statics_Transform3x2Anim(This,m_0,ret_1)	\
    (This)->lpVtbl -> Transform3x2Anim(This,m_0,ret_1)

#define IDA2Statics_Compose2(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Compose2(This,a_0,b_1,ret_2)

#define IDA2Statics_Compose2ArrayEx(This,xfs_0size,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose2ArrayEx(This,xfs_0size,xfs_0,ret_1)

#define IDA2Statics_Compose2Array(This,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose2Array(This,xfs_0,ret_1)

#define IDA2Statics_Tuple(This,obsolete1,obsolete2)	\
    (This)->lpVtbl -> Tuple(This,obsolete1,obsolete2)

#define IDA2Statics_Array(This,obsolete1,obsolete2)	\
    (This)->lpVtbl -> Array(This,obsolete1,obsolete2)

#define IDA2Statics_get_AreBlockingImportsComplete(This,bComplete)	\
    (This)->lpVtbl -> get_AreBlockingImportsComplete(This,bComplete)


#define IDA2Statics_ImportDirect3DRMVisual(This,visual,bvr)	\
    (This)->lpVtbl -> ImportDirect3DRMVisual(This,visual,bvr)

#define IDA2Statics_ApplyDXTransformEx(This,theXf,numInputs,inputs,evaluator,ppResult)	\
    (This)->lpVtbl -> ApplyDXTransformEx(This,theXf,numInputs,inputs,evaluator,ppResult)

#define IDA2Statics_ApplyDXTransform(This,varXf,inputs,evaluator,ppResult)	\
    (This)->lpVtbl -> ApplyDXTransform(This,varXf,inputs,evaluator,ppResult)

#define IDA2Statics_ModifiableNumber(This,initVal,ppResult)	\
    (This)->lpVtbl -> ModifiableNumber(This,initVal,ppResult)

#define IDA2Statics_ModifiableString(This,initVal,ppResult)	\
    (This)->lpVtbl -> ModifiableString(This,initVal,ppResult)

#define IDA2Statics_DAArrayEx2(This,s,pBvrs,dwFlags,bvr)	\
    (This)->lpVtbl -> DAArrayEx2(This,s,pBvrs,dwFlags,bvr)

#define IDA2Statics_DAArray2(This,bvrs,dwFlags,bvr)	\
    (This)->lpVtbl -> DAArray2(This,bvrs,dwFlags,bvr)

#define IDA2Statics_ImportGeometryWrapped(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,ppGeometry)	\
    (This)->lpVtbl -> ImportGeometryWrapped(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,ppGeometry)

#define IDA2Statics_ImportGeometryWrappedAsync(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,pGeoStandIn,ppResult)	\
    (This)->lpVtbl -> ImportGeometryWrappedAsync(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,pGeoStandIn,ppResult)

#define IDA2Statics_ImportDirect3DRMVisualWrapped(This,visual,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,bvr)	\
    (This)->lpVtbl -> ImportDirect3DRMVisualWrapped(This,visual,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,bvr)

#define IDA2Statics_UntilNotifyScript(This,b0_0,event_1,scriptlet_2,ret_3)	\
    (This)->lpVtbl -> UntilNotifyScript(This,b0_0,event_1,scriptlet_2,ret_3)

#define IDA2Statics_get_ViewFrameRate(This,ret_0)	\
    (This)->lpVtbl -> get_ViewFrameRate(This,ret_0)

#define IDA2Statics_UnionMontageArrayEx(This,mtgs_0size,mtgs_0,ret_1)	\
    (This)->lpVtbl -> UnionMontageArrayEx(This,mtgs_0size,mtgs_0,ret_1)

#define IDA2Statics_UnionMontageArray(This,mtgs_0,ret_1)	\
    (This)->lpVtbl -> UnionMontageArray(This,mtgs_0,ret_1)

#define IDA2Statics_get_ModifiableBehaviorFlags(This,dwFlags)	\
    (This)->lpVtbl -> get_ModifiableBehaviorFlags(This,dwFlags)

#define IDA2Statics_put_ModifiableBehaviorFlags(This,dwFlags)	\
    (This)->lpVtbl -> put_ModifiableBehaviorFlags(This,dwFlags)

#define IDA2Statics_get_EmptyColor(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyColor(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Statics_ImportDirect3DRMVisual_Proxy( 
    IDA2Statics * This,
    /* [in] */ IUnknown *visual,
    /* [retval][out] */ IDAGeometry **bvr);


void __RPC_STUB IDA2Statics_ImportDirect3DRMVisual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA2Statics_ApplyDXTransformEx_Proxy( 
    IDA2Statics * This,
    /* [in] */ IUnknown *theXf,
    /* [in] */ LONG numInputs,
    /* [size_is][in] */ IDABehavior **inputs,
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDADXTransformResult **ppResult);


void __RPC_STUB IDA2Statics_ApplyDXTransformEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_ApplyDXTransform_Proxy( 
    IDA2Statics * This,
    /* [in] */ VARIANT varXf,
    /* [in] */ VARIANT inputs,
    /* [in] */ VARIANT evaluator,
    /* [retval][out] */ IDADXTransformResult **ppResult);


void __RPC_STUB IDA2Statics_ApplyDXTransform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_ModifiableNumber_Proxy( 
    IDA2Statics * This,
    /* [in] */ double initVal,
    /* [retval][out] */ IDANumber **ppResult);


void __RPC_STUB IDA2Statics_ModifiableNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_ModifiableString_Proxy( 
    IDA2Statics * This,
    /* [in] */ BSTR initVal,
    /* [retval][out] */ IDAString **ppResult);


void __RPC_STUB IDA2Statics_ModifiableString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA2Statics_DAArrayEx2_Proxy( 
    IDA2Statics * This,
    /* [in] */ LONG s,
    /* [size_is][in] */ IDABehavior *pBvrs[  ],
    /* [in] */ DWORD dwFlags,
    /* [retval][out] */ IDAArray **bvr);


void __RPC_STUB IDA2Statics_DAArrayEx2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_DAArray2_Proxy( 
    IDA2Statics * This,
    /* [in] */ VARIANT bvrs,
    /* [in] */ DWORD dwFlags,
    /* [retval][out] */ IDAArray **bvr);


void __RPC_STUB IDA2Statics_DAArray2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_ImportGeometryWrapped_Proxy( 
    IDA2Statics * This,
    /* [in] */ BSTR url,
    /* [in] */ LONG wrapType,
    /* [in] */ double originX,
    /* [in] */ double originY,
    /* [in] */ double originZ,
    /* [in] */ double zAxisX,
    /* [in] */ double zAxisY,
    /* [in] */ double zAxisZ,
    /* [in] */ double yAxisX,
    /* [in] */ double yAxisY,
    /* [in] */ double yAxisZ,
    /* [in] */ double texOriginX,
    /* [in] */ double texOriginY,
    /* [in] */ double texScaleX,
    /* [in] */ double texScaleY,
    /* [in] */ DWORD flags,
    /* [retval][out] */ IDAGeometry **ppGeometry);


void __RPC_STUB IDA2Statics_ImportGeometryWrapped_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_ImportGeometryWrappedAsync_Proxy( 
    IDA2Statics * This,
    /* [in] */ BSTR url,
    /* [in] */ LONG wrapType,
    /* [in] */ double originX,
    /* [in] */ double originY,
    /* [in] */ double originZ,
    /* [in] */ double zAxisX,
    /* [in] */ double zAxisY,
    /* [in] */ double zAxisZ,
    /* [in] */ double yAxisX,
    /* [in] */ double yAxisY,
    /* [in] */ double yAxisZ,
    /* [in] */ double texOriginX,
    /* [in] */ double texOriginY,
    /* [in] */ double texScaleX,
    /* [in] */ double texScaleY,
    /* [in] */ DWORD flags,
    /* [in] */ IDAGeometry *pGeoStandIn,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDA2Statics_ImportGeometryWrappedAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_ImportDirect3DRMVisualWrapped_Proxy( 
    IDA2Statics * This,
    /* [in] */ IUnknown *visual,
    /* [in] */ LONG wrapType,
    /* [in] */ double originX,
    /* [in] */ double originY,
    /* [in] */ double originZ,
    /* [in] */ double zAxisX,
    /* [in] */ double zAxisY,
    /* [in] */ double zAxisZ,
    /* [in] */ double yAxisX,
    /* [in] */ double yAxisY,
    /* [in] */ double yAxisZ,
    /* [in] */ double texOriginX,
    /* [in] */ double texOriginY,
    /* [in] */ double texScaleX,
    /* [in] */ double texScaleY,
    /* [in] */ DWORD flags,
    /* [retval][out] */ IDAGeometry **bvr);


void __RPC_STUB IDA2Statics_ImportDirect3DRMVisualWrapped_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_UntilNotifyScript_Proxy( 
    IDA2Statics * This,
    /* [in] */ IDABehavior *b0_0,
    /* [in] */ IDAEvent *event_1,
    /* [in] */ BSTR scriptlet_2,
    /* [retval][out] */ IDABehavior **ret_3);


void __RPC_STUB IDA2Statics_UntilNotifyScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDA2Statics_get_ViewFrameRate_Proxy( 
    IDA2Statics * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDA2Statics_get_ViewFrameRate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA2Statics_UnionMontageArrayEx_Proxy( 
    IDA2Statics * This,
    /* [in] */ LONG mtgs_0size,
    /* [size_is][in] */ IDAMontage *mtgs_0[  ],
    /* [retval][out] */ IDAMontage **ret_1);


void __RPC_STUB IDA2Statics_UnionMontageArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_UnionMontageArray_Proxy( 
    IDA2Statics * This,
    /* [in] */ VARIANT mtgs_0,
    /* [retval][out] */ IDAMontage **ret_1);


void __RPC_STUB IDA2Statics_UnionMontageArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDA2Statics_get_ModifiableBehaviorFlags_Proxy( 
    IDA2Statics * This,
    /* [retval][out] */ DWORD *dwFlags);


void __RPC_STUB IDA2Statics_get_ModifiableBehaviorFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDA2Statics_put_ModifiableBehaviorFlags_Proxy( 
    IDA2Statics * This,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IDA2Statics_put_ModifiableBehaviorFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDA2Statics_get_EmptyColor_Proxy( 
    IDA2Statics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDA2Statics_get_EmptyColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Statics_INTERFACE_DEFINED__ */


#ifndef __IDA3Statics_INTERFACE_DEFINED__
#define __IDA3Statics_INTERFACE_DEFINED__

/* interface IDA3Statics */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA3Statics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6e0b5fc4-4d1e-11d2-aa53-00c04fc2f60f")
    IDA3Statics : public IDA2Statics
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ImportSoundStream( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportMovieStream( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE SequenceArrayEx( 
            /* [in] */ LONG sz,
            /* [size_is][in] */ IDABehavior *bvrs_0[  ],
            /* [retval][out] */ IDABehavior **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SequenceArray( 
            /* [in] */ VARIANT bvrs_0,
            /* [retval][out] */ IDABehavior **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ViewTimeDelta( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TriMesh( 
            /* [in] */ int nTriangles,
            /* [in] */ VARIANT positions,
            /* [in] */ VARIANT normals,
            /* [in] */ VARIANT UVs,
            /* [in] */ VARIANT indices,
            /* [retval][out] */ IDAGeometry **result) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE TriMeshEx( 
            /* [in] */ int nTriangles,
            /* [in] */ int nPositions,
            /* [size_is][in] */ float positions[  ],
            /* [in] */ int nNormals,
            /* [size_is][in] */ float normals[  ],
            /* [in] */ int nUVs,
            /* [size_is][in] */ float UVs[  ],
            /* [in] */ int nIndices,
            /* [size_is][in] */ int indices[  ],
            /* [retval][out] */ IDAGeometry **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientMulticolor( 
            /* [in] */ VARIANT offsets,
            /* [in] */ VARIANT colors,
            /* [retval][out] */ IDAImage **result) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE RadialGradientMulticolorEx( 
            /* [in] */ int nOffsets,
            /* [size_is][in] */ IDANumber *offsets[  ],
            /* [in] */ int nColors,
            /* [size_is][in] */ IDAColor *colors[  ],
            /* [retval][out] */ IDAImage **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LinearGradientMulticolor( 
            /* [in] */ VARIANT offsets,
            /* [in] */ VARIANT colors,
            /* [retval][out] */ IDAImage **result) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE LinearGradientMulticolorEx( 
            /* [in] */ int nOffsets,
            /* [size_is][in] */ IDANumber *offsets[  ],
            /* [in] */ int nColors,
            /* [size_is][in] */ IDAColor *colors[  ],
            /* [retval][out] */ IDAImage **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA3StaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA3Statics * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA3Statics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA3Statics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA3Statics * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA3Statics * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA3Statics * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA3Statics * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VersionString )( 
            IDA3Statics * This,
            /* [retval][out] */ BSTR *str);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Site )( 
            IDA3Statics * This,
            /* [retval][out] */ IDASite **pSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Site )( 
            IDA3Statics * This,
            /* [in] */ IDASite *pSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientSite )( 
            IDA3Statics * This,
            /* [in] */ IOleClientSite *pClientSite);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientSite )( 
            IDA3Statics * This,
            /* [retval][out] */ IOleClientSite **pClientSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PixelConstructionMode )( 
            IDA3Statics * This,
            /* [in] */ VARIANT_BOOL bMode);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelConstructionMode )( 
            IDA3Statics * This,
            /* [retval][out] */ VARIANT_BOOL *bMode);
        
        HRESULT ( STDMETHODCALLTYPE *TriggerEvent )( 
            IDA3Statics * This,
            /* [in] */ IDAEvent *event,
            /* [in] */ IDABehavior *data);
        
        HRESULT ( STDMETHODCALLTYPE *NewDrawingSurface )( 
            IDA3Statics * This,
            /* [retval][out] */ IDADrawingSurface **pds);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovie )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovieAsync )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImage )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageAsync )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageColorKey )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageAsyncColorKey )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSound )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSoundAsync )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometry )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryAsync )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirectDrawSurface )( 
            IDA3Statics * This,
            /* [in] */ IUnknown *dds,
            /* [in] */ IDAEvent *updateEvent,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *Cond )( 
            IDA3Statics * This,
            /* [in] */ IDABoolean *c,
            /* [in] */ IDABehavior *i,
            /* [in] */ IDABehavior *e,
            /* [retval][out] */ IDABehavior **pCondBvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DAArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DAArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDAArray **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DATupleEx )( 
            IDA3Statics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDATuple **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DATuple )( 
            IDA3Statics * This,
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDATuple **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableBehavior )( 
            IDA3Statics * This,
            /* [in] */ IDABehavior *orig,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UninitializedArray )( 
            IDA3Statics * This,
            /* [in] */ IDAArray *typeTmp,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UninitializedTuple )( 
            IDA3Statics * This,
            /* [in] */ IDATuple *typeTmp,
            /* [retval][out] */ IDATuple **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *NumberBSplineEx )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDANumber *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *NumberBSpline )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Point2BSplineEx )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Point2BSpline )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Point3BSplineEx )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Point3BSpline )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Vector2BSplineEx )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2BSpline )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Vector3BSplineEx )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3BSpline )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Pow )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Abs )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Sqrt )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Floor )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Round )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Ceiling )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Asin )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Acos )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Atan )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Sin )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Cos )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Tan )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Exp )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Ln )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Log10 )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToDegrees )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToRadians )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mod )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Atan2 )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Sub )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Mul )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Div )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *LT )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *LTE )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GT )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GTE )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *EQ )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NE )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Neg )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *InterpolateAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [retval][out] */ IDANumber **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Interpolate )( 
            IDA3Statics * This,
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [retval][out] */ IDANumber **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *SlowInSlowOutAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [in] */ IDANumber *sharpness_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *SlowInSlowOut )( 
            IDA3Statics * This,
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [in] */ double sharpness_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *SoundSource )( 
            IDA3Statics * This,
            /* [in] */ IDASound *snd_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mix )( 
            IDA3Statics * This,
            /* [in] */ IDASound *left_0,
            /* [in] */ IDASound *right_1,
            /* [retval][out] */ IDASound **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *And )( 
            IDA3Statics * This,
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Or )( 
            IDA3Statics * This,
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Not )( 
            IDA3Statics * This,
            /* [in] */ IDABoolean *a_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Integral )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Derivative )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *IntegralVector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *IntegralVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativeVector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativeVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativePoint2 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativePoint3 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyState )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyUp )( 
            IDA3Statics * This,
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyDown )( 
            IDA3Statics * This,
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DANumber )( 
            IDA3Statics * This,
            /* [in] */ double num_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DAString )( 
            IDA3Statics * This,
            /* [in] */ BSTR str_0,
            /* [retval][out] */ IDAString **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DABoolean )( 
            IDA3Statics * This,
            /* [in] */ VARIANT_BOOL num_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SeededRandom )( 
            IDA3Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MousePosition )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonState )( 
            IDA3Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonState )( 
            IDA3Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DATrue )( 
            IDA3Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DAFalse )( 
            IDA3Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalTime )( 
            IDA3Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GlobalTime )( 
            IDA3Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pixel )( 
            IDA3Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UserData )( 
            IDA3Statics * This,
            /* [in] */ IUnknown *data_0,
            /* [retval][out] */ IDAUserData **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UntilNotify )( 
            IDA3Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDAUntilNotifier *notifier_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Until )( 
            IDA3Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDABehavior *b1_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *UntilEx )( 
            IDA3Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [retval][out] */ IDABehavior **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Sequence )( 
            IDA3Statics * This,
            /* [in] */ IDABehavior *s1_0,
            /* [in] */ IDABehavior *s2_1,
            /* [retval][out] */ IDABehavior **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPath )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngle )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUpright )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathEval )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleEval )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUprightEval )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUprightAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ConcatString )( 
            IDA3Statics * This,
            /* [in] */ IDAString *s1_0,
            /* [in] */ IDAString *s2_1,
            /* [retval][out] */ IDAString **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PerspectiveCamera )( 
            IDA3Statics * This,
            /* [in] */ double focalDist_0,
            /* [in] */ double nearClip_1,
            /* [retval][out] */ IDACamera **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PerspectiveCameraAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *focalDist_0,
            /* [in] */ IDANumber *nearClip_1,
            /* [retval][out] */ IDACamera **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelCamera )( 
            IDA3Statics * This,
            /* [in] */ double nearClip_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelCameraAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *nearClip_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgbAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *red_0,
            /* [in] */ IDANumber *green_1,
            /* [in] */ IDANumber *blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgb )( 
            IDA3Statics * This,
            /* [in] */ double red_0,
            /* [in] */ double green_1,
            /* [in] */ double blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgb255 )( 
            IDA3Statics * This,
            /* [in] */ short red_0,
            /* [in] */ short green_1,
            /* [in] */ short blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorHsl )( 
            IDA3Statics * This,
            /* [in] */ double hue_0,
            /* [in] */ double saturation_1,
            /* [in] */ double lum_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorHslAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *hue_0,
            /* [in] */ IDANumber *saturation_1,
            /* [in] */ IDANumber *lum_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Red )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Green )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blue )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cyan )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Magenta )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Yellow )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Black )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_White )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Aqua )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Fuchsia )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Gray )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lime )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Maroon )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Navy )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Olive )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Purple )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Silver )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Teal )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Predicate )( 
            IDA3Statics * This,
            /* [in] */ IDABoolean *b_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *NotEvent )( 
            IDA3Statics * This,
            /* [in] */ IDAEvent *event_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AndEvent )( 
            IDA3Statics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *OrEvent )( 
            IDA3Statics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ThenEvent )( 
            IDA3Statics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonDown )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonUp )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonDown )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonUp )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Always )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Never )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *TimerAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Timer )( 
            IDA3Statics * This,
            /* [in] */ double n_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AppTriggeredEvent )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ScriptCallback )( 
            IDA3Statics * This,
            /* [in] */ BSTR obsolete1_0,
            /* [in] */ IDAEvent *obsolete2_1,
            /* [in] */ BSTR obsolete3_2,
            /* [retval][out] */ IDAEvent **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyGeometry )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UnionGeometry )( 
            IDA3Statics * This,
            /* [in] */ IDAGeometry *g1_0,
            /* [in] */ IDAGeometry *g2_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *UnionGeometryArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAGeometry *imgs_0[  ],
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UnionGeometryArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyImage )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectableEmptyImage )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *SolidColorImage )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *GradientPolygonEx )( 
            IDA3Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG colors_1size,
            /* [size_is][in] */ IDAColor *colors_1[  ],
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GradientPolygon )( 
            IDA3Statics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT colors_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonEx )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygon )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonAnimEx )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *GradientSquare )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lowerLeft_0,
            /* [in] */ IDAColor *upperLeft_1,
            /* [in] */ IDAColor *upperRight_2,
            /* [in] */ IDAColor *lowerRight_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientSquare )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientSquareAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientRegularPoly )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double numEdges_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientRegularPolyAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *numEdges_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *GradientHorizontal )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *GradientHorizontalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *HatchHorizontal )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchHorizontalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchVertical )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchVerticalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchForwardDiagonal )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchForwardDiagonalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchBackwardDiagonal )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchBackwardDiagonalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchCross )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchCrossAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchDiagonalCross )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchDiagonalCrossAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Overlay )( 
            IDA3Statics * This,
            /* [in] */ IDAImage *top_0,
            /* [in] */ IDAImage *bottom_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *OverlayArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAImage *imgs_0[  ],
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OverlayArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AmbientLight )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DirectionalLight )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PointLight )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *SpotLightAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ IDANumber *cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SpotLight )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ double cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultLineStyle )( 
            IDA3Statics * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyLineStyle )( 
            IDA3Statics * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleBevel )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleRound )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleMiter )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleFlat )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleSquare )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleRound )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyleSolid )( 
            IDA3Statics * This,
            /* [retval][out] */ IDADashStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyleDashed )( 
            IDA3Statics * This,
            /* [retval][out] */ IDADashStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultMicrophone )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAMicrophone **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueMatte )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAMatte **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClearMatte )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAMatte **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMatte )( 
            IDA3Statics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *IntersectMatte )( 
            IDA3Statics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DifferenceMatte )( 
            IDA3Statics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FillMatte )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *p_0,
            /* [retval][out] */ IDAMatte **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TextMatte )( 
            IDA3Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyMontage )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAMontage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ImageMontage )( 
            IDA3Statics * This,
            /* [in] */ IDAImage *im_0,
            /* [in] */ double depth_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ImageMontageAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAImage *im_0,
            /* [in] */ IDANumber *depth_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMontage )( 
            IDA3Statics * This,
            /* [in] */ IDAMontage *m1_0,
            /* [in] */ IDAMontage *m2_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Concat )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *p1_0,
            /* [in] */ IDAPath2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ConcatArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG paths_0size,
            /* [size_is][in] */ IDAPath2 *paths_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ConcatArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT paths_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Line )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Ray )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *pt_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *StringPathAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *StringPath )( 
            IDA3Statics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolylineEx )( 
            IDA3Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Polyline )( 
            IDA3Statics * This,
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolydrawPathEx )( 
            IDA3Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG codes_1size,
            /* [size_is][in] */ IDANumber *codes_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PolydrawPath )( 
            IDA3Statics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT codes_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadians )( 
            IDA3Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadiansAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ArcDegrees )( 
            IDA3Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadians )( 
            IDA3Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadiansAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieDegrees )( 
            IDA3Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *Oval )( 
            IDA3Statics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *OvalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rect )( 
            IDA3Statics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RectAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRect )( 
            IDA3Statics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [in] */ double cornerArcWidth_2,
            /* [in] */ double cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRectAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [in] */ IDANumber *cornerArcWidth_2,
            /* [in] */ IDANumber *cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *CubicBSplinePathEx )( 
            IDA3Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG knots_1size,
            /* [size_is][in] */ IDANumber *knots_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *CubicBSplinePath )( 
            IDA3Statics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT knots_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextPath )( 
            IDA3Statics * This,
            /* [in] */ IDAString *obsolete1_0,
            /* [in] */ IDAFontStyle *obsolete2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Silence )( 
            IDA3Statics * This,
            /* [retval][out] */ IDASound **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *MixArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG snds_0size,
            /* [size_is][in] */ IDASound *snds_0[  ],
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MixArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT snds_0,
            /* [retval][out] */ IDASound **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SinSynth )( 
            IDA3Statics * This,
            /* [retval][out] */ IDASound **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFont )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *FontAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDANumber *size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Font )( 
            IDA3Statics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ double size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *StringImageAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *StringImage )( 
            IDA3Statics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextImageAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAString *obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextImage )( 
            IDA3Statics * This,
            /* [in] */ BSTR obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XVector2 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YVector2 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZeroVector2 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Origin2 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2 )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2 )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2PolarAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2Polar )( 
            IDA3Statics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2PolarDegrees )( 
            IDA3Statics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2PolarAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2Polar )( 
            IDA3Statics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DotVector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [in] */ IDAVector2 *u_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NegVector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SubVector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddVector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddPoint2Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint2Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint2 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistancePoint2 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistanceSquaredPoint2 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XVector3 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YVector3 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZVector3 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZeroVector3 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Origin3 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAPoint3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3 )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3 )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3SphericalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *xyAngle_0,
            /* [in] */ IDANumber *yzAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3Spherical )( 
            IDA3Statics * This,
            /* [in] */ double xyAngle_0,
            /* [in] */ double yzAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3SphericalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *zxAngle_0,
            /* [in] */ IDANumber *xyAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3Spherical )( 
            IDA3Statics * This,
            /* [in] */ double zxAngle_0,
            /* [in] */ double xyAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *DotVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *CrossVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NegVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SubVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddPoint3Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint3Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint3 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *p1_0,
            /* [in] */ IDAPoint3 *p2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistancePoint3 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistanceSquaredPoint3 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentityTransform3 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDATransform3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *tx_0,
            /* [in] */ IDANumber *ty_1,
            /* [in] */ IDANumber *tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3 )( 
            IDA3Statics * This,
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Rate )( 
            IDA3Statics * This,
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *delta_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Point )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *new_origin_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3 )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Rate )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *scale_vec_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3UniformAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Uniform )( 
            IDA3Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3UniformRate )( 
            IDA3Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ IDANumber *angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Rate )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Degrees )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3RateDegrees )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3 )( 
            IDA3Statics * This,
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3Rate )( 
            IDA3Statics * This,
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *c_0,
            /* [in] */ IDANumber *d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3 )( 
            IDA3Statics * This,
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3Rate )( 
            IDA3Statics * This,
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *e_0,
            /* [in] */ IDANumber *f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3 )( 
            IDA3Statics * This,
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3Rate )( 
            IDA3Statics * This,
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Transform4x4AnimEx )( 
            IDA3Statics * This,
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform4x4Anim )( 
            IDA3Statics * This,
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose3 )( 
            IDA3Statics * This,
            /* [in] */ IDATransform3 *a_0,
            /* [in] */ IDATransform3 *b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Compose3ArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform3 *xfs_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose3Array )( 
            IDA3Statics * This,
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LookAtFrom )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *to_0,
            /* [in] */ IDAPoint3 *from_1,
            /* [in] */ IDAVector3 *up_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentityTransform2 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDATransform2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *Tx_0,
            /* [in] */ IDANumber *Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2 )( 
            IDA3Statics * This,
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Rate )( 
            IDA3Statics * This,
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *delta_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Point )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *pos_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2 )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Rate )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Vector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *obsoleteMethod_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *scale_vec_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2UniformAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Uniform )( 
            IDA3Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2UniformRate )( 
            IDA3Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2 )( 
            IDA3Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Rate )( 
            IDA3Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Degrees )( 
            IDA3Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2RateDegrees )( 
            IDA3Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2 )( 
            IDA3Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2Rate )( 
            IDA3Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2 )( 
            IDA3Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2Rate )( 
            IDA3Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Transform3x2AnimEx )( 
            IDA3Statics * This,
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform3x2Anim )( 
            IDA3Statics * This,
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose2 )( 
            IDA3Statics * This,
            /* [in] */ IDATransform2 *a_0,
            /* [in] */ IDATransform2 *b_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Compose2ArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform2 *xfs_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose2Array )( 
            IDA3Statics * This,
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Tuple )( 
            IDA3Statics * This,
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDATuple **obsolete2);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Array )( 
            IDA3Statics * This,
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDAArray **obsolete2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AreBlockingImportsComplete )( 
            IDA3Statics * This,
            /* [retval][out] */ VARIANT_BOOL *bComplete);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirect3DRMVisual )( 
            IDA3Statics * This,
            /* [in] */ IUnknown *visual,
            /* [retval][out] */ IDAGeometry **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ApplyDXTransformEx )( 
            IDA3Statics * This,
            /* [in] */ IUnknown *theXf,
            /* [in] */ LONG numInputs,
            /* [size_is][in] */ IDABehavior **inputs,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDADXTransformResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyDXTransform )( 
            IDA3Statics * This,
            /* [in] */ VARIANT varXf,
            /* [in] */ VARIANT inputs,
            /* [in] */ VARIANT evaluator,
            /* [retval][out] */ IDADXTransformResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableNumber )( 
            IDA3Statics * This,
            /* [in] */ double initVal,
            /* [retval][out] */ IDANumber **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableString )( 
            IDA3Statics * This,
            /* [in] */ BSTR initVal,
            /* [retval][out] */ IDAString **ppResult);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DAArrayEx2 )( 
            IDA3Statics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DAArray2 )( 
            IDA3Statics * This,
            /* [in] */ VARIANT bvrs,
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryWrapped )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryWrappedAsync )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirect3DRMVisualWrapped )( 
            IDA3Statics * This,
            /* [in] */ IUnknown *visual,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [retval][out] */ IDAGeometry **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UntilNotifyScript )( 
            IDA3Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ BSTR scriptlet_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ViewFrameRate )( 
            IDA3Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *UnionMontageArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG mtgs_0size,
            /* [size_is][in] */ IDAMontage *mtgs_0[  ],
            /* [retval][out] */ IDAMontage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMontageArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT mtgs_0,
            /* [retval][out] */ IDAMontage **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ModifiableBehaviorFlags )( 
            IDA3Statics * This,
            /* [retval][out] */ DWORD *dwFlags);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ModifiableBehaviorFlags )( 
            IDA3Statics * This,
            /* [in] */ DWORD dwFlags);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyColor )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSoundStream )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovieStream )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *SequenceArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG sz,
            /* [size_is][in] */ IDABehavior *bvrs_0[  ],
            /* [retval][out] */ IDABehavior **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SequenceArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT bvrs_0,
            /* [retval][out] */ IDABehavior **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ViewTimeDelta )( 
            IDA3Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *TriMesh )( 
            IDA3Statics * This,
            /* [in] */ int nTriangles,
            /* [in] */ VARIANT positions,
            /* [in] */ VARIANT normals,
            /* [in] */ VARIANT UVs,
            /* [in] */ VARIANT indices,
            /* [retval][out] */ IDAGeometry **result);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *TriMeshEx )( 
            IDA3Statics * This,
            /* [in] */ int nTriangles,
            /* [in] */ int nPositions,
            /* [size_is][in] */ float positions[  ],
            /* [in] */ int nNormals,
            /* [size_is][in] */ float normals[  ],
            /* [in] */ int nUVs,
            /* [size_is][in] */ float UVs[  ],
            /* [in] */ int nIndices,
            /* [size_is][in] */ int indices[  ],
            /* [retval][out] */ IDAGeometry **result);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientMulticolor )( 
            IDA3Statics * This,
            /* [in] */ VARIANT offsets,
            /* [in] */ VARIANT colors,
            /* [retval][out] */ IDAImage **result);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientMulticolorEx )( 
            IDA3Statics * This,
            /* [in] */ int nOffsets,
            /* [size_is][in] */ IDANumber *offsets[  ],
            /* [in] */ int nColors,
            /* [size_is][in] */ IDAColor *colors[  ],
            /* [retval][out] */ IDAImage **result);
        
        HRESULT ( STDMETHODCALLTYPE *LinearGradientMulticolor )( 
            IDA3Statics * This,
            /* [in] */ VARIANT offsets,
            /* [in] */ VARIANT colors,
            /* [retval][out] */ IDAImage **result);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *LinearGradientMulticolorEx )( 
            IDA3Statics * This,
            /* [in] */ int nOffsets,
            /* [size_is][in] */ IDANumber *offsets[  ],
            /* [in] */ int nColors,
            /* [size_is][in] */ IDAColor *colors[  ],
            /* [retval][out] */ IDAImage **result);
        
        END_INTERFACE
    } IDA3StaticsVtbl;

    interface IDA3Statics
    {
        CONST_VTBL struct IDA3StaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA3Statics_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA3Statics_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA3Statics_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA3Statics_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA3Statics_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA3Statics_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA3Statics_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA3Statics_get_VersionString(This,str)	\
    (This)->lpVtbl -> get_VersionString(This,str)

#define IDA3Statics_get_Site(This,pSite)	\
    (This)->lpVtbl -> get_Site(This,pSite)

#define IDA3Statics_put_Site(This,pSite)	\
    (This)->lpVtbl -> put_Site(This,pSite)

#define IDA3Statics_put_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> put_ClientSite(This,pClientSite)

#define IDA3Statics_get_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> get_ClientSite(This,pClientSite)

#define IDA3Statics_put_PixelConstructionMode(This,bMode)	\
    (This)->lpVtbl -> put_PixelConstructionMode(This,bMode)

#define IDA3Statics_get_PixelConstructionMode(This,bMode)	\
    (This)->lpVtbl -> get_PixelConstructionMode(This,bMode)

#define IDA3Statics_TriggerEvent(This,event,data)	\
    (This)->lpVtbl -> TriggerEvent(This,event,data)

#define IDA3Statics_NewDrawingSurface(This,pds)	\
    (This)->lpVtbl -> NewDrawingSurface(This,pds)

#define IDA3Statics_ImportMovie(This,url,ppResult)	\
    (This)->lpVtbl -> ImportMovie(This,url,ppResult)

#define IDA3Statics_ImportMovieAsync(This,url,pImageStandIn,pSoundStandIn,ppResult)	\
    (This)->lpVtbl -> ImportMovieAsync(This,url,pImageStandIn,pSoundStandIn,ppResult)

#define IDA3Statics_ImportImage(This,url,ppImage)	\
    (This)->lpVtbl -> ImportImage(This,url,ppImage)

#define IDA3Statics_ImportImageAsync(This,url,pImageStandIn,ppResult)	\
    (This)->lpVtbl -> ImportImageAsync(This,url,pImageStandIn,ppResult)

#define IDA3Statics_ImportImageColorKey(This,url,colorKeyRed,colorKeyGreen,colorKeyBlue,ppImage)	\
    (This)->lpVtbl -> ImportImageColorKey(This,url,colorKeyRed,colorKeyGreen,colorKeyBlue,ppImage)

#define IDA3Statics_ImportImageAsyncColorKey(This,url,pImageStandIn,colorKeyRed,colorKeyGreen,colorKeyBlue,ppResult)	\
    (This)->lpVtbl -> ImportImageAsyncColorKey(This,url,pImageStandIn,colorKeyRed,colorKeyGreen,colorKeyBlue,ppResult)

#define IDA3Statics_ImportSound(This,url,ppResult)	\
    (This)->lpVtbl -> ImportSound(This,url,ppResult)

#define IDA3Statics_ImportSoundAsync(This,url,pSoundStandIn,ppResult)	\
    (This)->lpVtbl -> ImportSoundAsync(This,url,pSoundStandIn,ppResult)

#define IDA3Statics_ImportGeometry(This,url,ppGeometry)	\
    (This)->lpVtbl -> ImportGeometry(This,url,ppGeometry)

#define IDA3Statics_ImportGeometryAsync(This,url,pGeoStandIn,ppResult)	\
    (This)->lpVtbl -> ImportGeometryAsync(This,url,pGeoStandIn,ppResult)

#define IDA3Statics_ImportDirectDrawSurface(This,dds,updateEvent,ppImage)	\
    (This)->lpVtbl -> ImportDirectDrawSurface(This,dds,updateEvent,ppImage)

#define IDA3Statics_Cond(This,c,i,e,pCondBvr)	\
    (This)->lpVtbl -> Cond(This,c,i,e,pCondBvr)

#define IDA3Statics_DAArrayEx(This,s,pBvrs,bvr)	\
    (This)->lpVtbl -> DAArrayEx(This,s,pBvrs,bvr)

#define IDA3Statics_DAArray(This,bvrs,bvr)	\
    (This)->lpVtbl -> DAArray(This,bvrs,bvr)

#define IDA3Statics_DATupleEx(This,s,pBvrs,bvr)	\
    (This)->lpVtbl -> DATupleEx(This,s,pBvrs,bvr)

#define IDA3Statics_DATuple(This,bvrs,bvr)	\
    (This)->lpVtbl -> DATuple(This,bvrs,bvr)

#define IDA3Statics_ModifiableBehavior(This,orig,bvr)	\
    (This)->lpVtbl -> ModifiableBehavior(This,orig,bvr)

#define IDA3Statics_UninitializedArray(This,typeTmp,bvr)	\
    (This)->lpVtbl -> UninitializedArray(This,typeTmp,bvr)

#define IDA3Statics_UninitializedTuple(This,typeTmp,bvr)	\
    (This)->lpVtbl -> UninitializedTuple(This,typeTmp,bvr)

#define IDA3Statics_NumberBSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> NumberBSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA3Statics_NumberBSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> NumberBSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA3Statics_Point2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA3Statics_Point2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA3Statics_Point3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA3Statics_Point3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA3Statics_Vector2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA3Statics_Vector2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA3Statics_Vector3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA3Statics_Vector3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA3Statics_Pow(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Pow(This,a_0,b_1,ret_2)

#define IDA3Statics_Abs(This,a_0,ret_1)	\
    (This)->lpVtbl -> Abs(This,a_0,ret_1)

#define IDA3Statics_Sqrt(This,a_0,ret_1)	\
    (This)->lpVtbl -> Sqrt(This,a_0,ret_1)

#define IDA3Statics_Floor(This,a_0,ret_1)	\
    (This)->lpVtbl -> Floor(This,a_0,ret_1)

#define IDA3Statics_Round(This,a_0,ret_1)	\
    (This)->lpVtbl -> Round(This,a_0,ret_1)

#define IDA3Statics_Ceiling(This,a_0,ret_1)	\
    (This)->lpVtbl -> Ceiling(This,a_0,ret_1)

#define IDA3Statics_Asin(This,a_0,ret_1)	\
    (This)->lpVtbl -> Asin(This,a_0,ret_1)

#define IDA3Statics_Acos(This,a_0,ret_1)	\
    (This)->lpVtbl -> Acos(This,a_0,ret_1)

#define IDA3Statics_Atan(This,a_0,ret_1)	\
    (This)->lpVtbl -> Atan(This,a_0,ret_1)

#define IDA3Statics_Sin(This,a_0,ret_1)	\
    (This)->lpVtbl -> Sin(This,a_0,ret_1)

#define IDA3Statics_Cos(This,a_0,ret_1)	\
    (This)->lpVtbl -> Cos(This,a_0,ret_1)

#define IDA3Statics_Tan(This,a_0,ret_1)	\
    (This)->lpVtbl -> Tan(This,a_0,ret_1)

#define IDA3Statics_Exp(This,a_0,ret_1)	\
    (This)->lpVtbl -> Exp(This,a_0,ret_1)

#define IDA3Statics_Ln(This,a_0,ret_1)	\
    (This)->lpVtbl -> Ln(This,a_0,ret_1)

#define IDA3Statics_Log10(This,a_0,ret_1)	\
    (This)->lpVtbl -> Log10(This,a_0,ret_1)

#define IDA3Statics_ToDegrees(This,a_0,ret_1)	\
    (This)->lpVtbl -> ToDegrees(This,a_0,ret_1)

#define IDA3Statics_ToRadians(This,a_0,ret_1)	\
    (This)->lpVtbl -> ToRadians(This,a_0,ret_1)

#define IDA3Statics_Mod(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Mod(This,a_0,b_1,ret_2)

#define IDA3Statics_Atan2(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Atan2(This,a_0,b_1,ret_2)

#define IDA3Statics_Add(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Add(This,a_0,b_1,ret_2)

#define IDA3Statics_Sub(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Sub(This,a_0,b_1,ret_2)

#define IDA3Statics_Mul(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Mul(This,a_0,b_1,ret_2)

#define IDA3Statics_Div(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Div(This,a_0,b_1,ret_2)

#define IDA3Statics_LT(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> LT(This,a_0,b_1,ret_2)

#define IDA3Statics_LTE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> LTE(This,a_0,b_1,ret_2)

#define IDA3Statics_GT(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> GT(This,a_0,b_1,ret_2)

#define IDA3Statics_GTE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> GTE(This,a_0,b_1,ret_2)

#define IDA3Statics_EQ(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> EQ(This,a_0,b_1,ret_2)

#define IDA3Statics_NE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> NE(This,a_0,b_1,ret_2)

#define IDA3Statics_Neg(This,a_0,ret_1)	\
    (This)->lpVtbl -> Neg(This,a_0,ret_1)

#define IDA3Statics_InterpolateAnim(This,from_0,to_1,duration_2,ret_3)	\
    (This)->lpVtbl -> InterpolateAnim(This,from_0,to_1,duration_2,ret_3)

#define IDA3Statics_Interpolate(This,from_0,to_1,duration_2,ret_3)	\
    (This)->lpVtbl -> Interpolate(This,from_0,to_1,duration_2,ret_3)

#define IDA3Statics_SlowInSlowOutAnim(This,from_0,to_1,duration_2,sharpness_3,ret_4)	\
    (This)->lpVtbl -> SlowInSlowOutAnim(This,from_0,to_1,duration_2,sharpness_3,ret_4)

#define IDA3Statics_SlowInSlowOut(This,from_0,to_1,duration_2,sharpness_3,ret_4)	\
    (This)->lpVtbl -> SlowInSlowOut(This,from_0,to_1,duration_2,sharpness_3,ret_4)

#define IDA3Statics_SoundSource(This,snd_0,ret_1)	\
    (This)->lpVtbl -> SoundSource(This,snd_0,ret_1)

#define IDA3Statics_Mix(This,left_0,right_1,ret_2)	\
    (This)->lpVtbl -> Mix(This,left_0,right_1,ret_2)

#define IDA3Statics_And(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> And(This,a_0,b_1,ret_2)

#define IDA3Statics_Or(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Or(This,a_0,b_1,ret_2)

#define IDA3Statics_Not(This,a_0,ret_1)	\
    (This)->lpVtbl -> Not(This,a_0,ret_1)

#define IDA3Statics_Integral(This,b_0,ret_1)	\
    (This)->lpVtbl -> Integral(This,b_0,ret_1)

#define IDA3Statics_Derivative(This,b_0,ret_1)	\
    (This)->lpVtbl -> Derivative(This,b_0,ret_1)

#define IDA3Statics_IntegralVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> IntegralVector2(This,v_0,ret_1)

#define IDA3Statics_IntegralVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> IntegralVector3(This,v_0,ret_1)

#define IDA3Statics_DerivativeVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativeVector2(This,v_0,ret_1)

#define IDA3Statics_DerivativeVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativeVector3(This,v_0,ret_1)

#define IDA3Statics_DerivativePoint2(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativePoint2(This,v_0,ret_1)

#define IDA3Statics_DerivativePoint3(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativePoint3(This,v_0,ret_1)

#define IDA3Statics_KeyState(This,n_0,ret_1)	\
    (This)->lpVtbl -> KeyState(This,n_0,ret_1)

#define IDA3Statics_KeyUp(This,arg_0,ret_1)	\
    (This)->lpVtbl -> KeyUp(This,arg_0,ret_1)

#define IDA3Statics_KeyDown(This,arg_0,ret_1)	\
    (This)->lpVtbl -> KeyDown(This,arg_0,ret_1)

#define IDA3Statics_DANumber(This,num_0,ret_1)	\
    (This)->lpVtbl -> DANumber(This,num_0,ret_1)

#define IDA3Statics_DAString(This,str_0,ret_1)	\
    (This)->lpVtbl -> DAString(This,str_0,ret_1)

#define IDA3Statics_DABoolean(This,num_0,ret_1)	\
    (This)->lpVtbl -> DABoolean(This,num_0,ret_1)

#define IDA3Statics_SeededRandom(This,arg_0,ret_1)	\
    (This)->lpVtbl -> SeededRandom(This,arg_0,ret_1)

#define IDA3Statics_get_MousePosition(This,ret_0)	\
    (This)->lpVtbl -> get_MousePosition(This,ret_0)

#define IDA3Statics_get_LeftButtonState(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonState(This,ret_0)

#define IDA3Statics_get_RightButtonState(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonState(This,ret_0)

#define IDA3Statics_get_DATrue(This,ret_0)	\
    (This)->lpVtbl -> get_DATrue(This,ret_0)

#define IDA3Statics_get_DAFalse(This,ret_0)	\
    (This)->lpVtbl -> get_DAFalse(This,ret_0)

#define IDA3Statics_get_LocalTime(This,ret_0)	\
    (This)->lpVtbl -> get_LocalTime(This,ret_0)

#define IDA3Statics_get_GlobalTime(This,ret_0)	\
    (This)->lpVtbl -> get_GlobalTime(This,ret_0)

#define IDA3Statics_get_Pixel(This,ret_0)	\
    (This)->lpVtbl -> get_Pixel(This,ret_0)

#define IDA3Statics_UserData(This,data_0,ret_1)	\
    (This)->lpVtbl -> UserData(This,data_0,ret_1)

#define IDA3Statics_UntilNotify(This,b0_0,event_1,notifier_2,ret_3)	\
    (This)->lpVtbl -> UntilNotify(This,b0_0,event_1,notifier_2,ret_3)

#define IDA3Statics_Until(This,b0_0,event_1,b1_2,ret_3)	\
    (This)->lpVtbl -> Until(This,b0_0,event_1,b1_2,ret_3)

#define IDA3Statics_UntilEx(This,b0_0,event_1,ret_2)	\
    (This)->lpVtbl -> UntilEx(This,b0_0,event_1,ret_2)

#define IDA3Statics_Sequence(This,s1_0,s2_1,ret_2)	\
    (This)->lpVtbl -> Sequence(This,s1_0,s2_1,ret_2)

#define IDA3Statics_FollowPath(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPath(This,path_0,duration_1,ret_2)

#define IDA3Statics_FollowPathAngle(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngle(This,path_0,duration_1,ret_2)

#define IDA3Statics_FollowPathAngleUpright(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUpright(This,path_0,duration_1,ret_2)

#define IDA3Statics_FollowPathEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathEval(This,path_0,eval_1,ret_2)

#define IDA3Statics_FollowPathAngleEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleEval(This,path_0,eval_1,ret_2)

#define IDA3Statics_FollowPathAngleUprightEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUprightEval(This,path_0,eval_1,ret_2)

#define IDA3Statics_FollowPathAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA3Statics_FollowPathAngleAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA3Statics_FollowPathAngleUprightAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUprightAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA3Statics_ConcatString(This,s1_0,s2_1,ret_2)	\
    (This)->lpVtbl -> ConcatString(This,s1_0,s2_1,ret_2)

#define IDA3Statics_PerspectiveCamera(This,focalDist_0,nearClip_1,ret_2)	\
    (This)->lpVtbl -> PerspectiveCamera(This,focalDist_0,nearClip_1,ret_2)

#define IDA3Statics_PerspectiveCameraAnim(This,focalDist_0,nearClip_1,ret_2)	\
    (This)->lpVtbl -> PerspectiveCameraAnim(This,focalDist_0,nearClip_1,ret_2)

#define IDA3Statics_ParallelCamera(This,nearClip_0,ret_1)	\
    (This)->lpVtbl -> ParallelCamera(This,nearClip_0,ret_1)

#define IDA3Statics_ParallelCameraAnim(This,nearClip_0,ret_1)	\
    (This)->lpVtbl -> ParallelCameraAnim(This,nearClip_0,ret_1)

#define IDA3Statics_ColorRgbAnim(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgbAnim(This,red_0,green_1,blue_2,ret_3)

#define IDA3Statics_ColorRgb(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgb(This,red_0,green_1,blue_2,ret_3)

#define IDA3Statics_ColorRgb255(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgb255(This,red_0,green_1,blue_2,ret_3)

#define IDA3Statics_ColorHsl(This,hue_0,saturation_1,lum_2,ret_3)	\
    (This)->lpVtbl -> ColorHsl(This,hue_0,saturation_1,lum_2,ret_3)

#define IDA3Statics_ColorHslAnim(This,hue_0,saturation_1,lum_2,ret_3)	\
    (This)->lpVtbl -> ColorHslAnim(This,hue_0,saturation_1,lum_2,ret_3)

#define IDA3Statics_get_Red(This,ret_0)	\
    (This)->lpVtbl -> get_Red(This,ret_0)

#define IDA3Statics_get_Green(This,ret_0)	\
    (This)->lpVtbl -> get_Green(This,ret_0)

#define IDA3Statics_get_Blue(This,ret_0)	\
    (This)->lpVtbl -> get_Blue(This,ret_0)

#define IDA3Statics_get_Cyan(This,ret_0)	\
    (This)->lpVtbl -> get_Cyan(This,ret_0)

#define IDA3Statics_get_Magenta(This,ret_0)	\
    (This)->lpVtbl -> get_Magenta(This,ret_0)

#define IDA3Statics_get_Yellow(This,ret_0)	\
    (This)->lpVtbl -> get_Yellow(This,ret_0)

#define IDA3Statics_get_Black(This,ret_0)	\
    (This)->lpVtbl -> get_Black(This,ret_0)

#define IDA3Statics_get_White(This,ret_0)	\
    (This)->lpVtbl -> get_White(This,ret_0)

#define IDA3Statics_get_Aqua(This,ret_0)	\
    (This)->lpVtbl -> get_Aqua(This,ret_0)

#define IDA3Statics_get_Fuchsia(This,ret_0)	\
    (This)->lpVtbl -> get_Fuchsia(This,ret_0)

#define IDA3Statics_get_Gray(This,ret_0)	\
    (This)->lpVtbl -> get_Gray(This,ret_0)

#define IDA3Statics_get_Lime(This,ret_0)	\
    (This)->lpVtbl -> get_Lime(This,ret_0)

#define IDA3Statics_get_Maroon(This,ret_0)	\
    (This)->lpVtbl -> get_Maroon(This,ret_0)

#define IDA3Statics_get_Navy(This,ret_0)	\
    (This)->lpVtbl -> get_Navy(This,ret_0)

#define IDA3Statics_get_Olive(This,ret_0)	\
    (This)->lpVtbl -> get_Olive(This,ret_0)

#define IDA3Statics_get_Purple(This,ret_0)	\
    (This)->lpVtbl -> get_Purple(This,ret_0)

#define IDA3Statics_get_Silver(This,ret_0)	\
    (This)->lpVtbl -> get_Silver(This,ret_0)

#define IDA3Statics_get_Teal(This,ret_0)	\
    (This)->lpVtbl -> get_Teal(This,ret_0)

#define IDA3Statics_Predicate(This,b_0,ret_1)	\
    (This)->lpVtbl -> Predicate(This,b_0,ret_1)

#define IDA3Statics_NotEvent(This,event_0,ret_1)	\
    (This)->lpVtbl -> NotEvent(This,event_0,ret_1)

#define IDA3Statics_AndEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> AndEvent(This,e1_0,e2_1,ret_2)

#define IDA3Statics_OrEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> OrEvent(This,e1_0,e2_1,ret_2)

#define IDA3Statics_ThenEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> ThenEvent(This,e1_0,e2_1,ret_2)

#define IDA3Statics_get_LeftButtonDown(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonDown(This,ret_0)

#define IDA3Statics_get_LeftButtonUp(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonUp(This,ret_0)

#define IDA3Statics_get_RightButtonDown(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonDown(This,ret_0)

#define IDA3Statics_get_RightButtonUp(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonUp(This,ret_0)

#define IDA3Statics_get_Always(This,ret_0)	\
    (This)->lpVtbl -> get_Always(This,ret_0)

#define IDA3Statics_get_Never(This,ret_0)	\
    (This)->lpVtbl -> get_Never(This,ret_0)

#define IDA3Statics_TimerAnim(This,n_0,ret_1)	\
    (This)->lpVtbl -> TimerAnim(This,n_0,ret_1)

#define IDA3Statics_Timer(This,n_0,ret_1)	\
    (This)->lpVtbl -> Timer(This,n_0,ret_1)

#define IDA3Statics_AppTriggeredEvent(This,ret_0)	\
    (This)->lpVtbl -> AppTriggeredEvent(This,ret_0)

#define IDA3Statics_ScriptCallback(This,obsolete1_0,obsolete2_1,obsolete3_2,ret_3)	\
    (This)->lpVtbl -> ScriptCallback(This,obsolete1_0,obsolete2_1,obsolete3_2,ret_3)

#define IDA3Statics_get_EmptyGeometry(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyGeometry(This,ret_0)

#define IDA3Statics_UnionGeometry(This,g1_0,g2_1,ret_2)	\
    (This)->lpVtbl -> UnionGeometry(This,g1_0,g2_1,ret_2)

#define IDA3Statics_UnionGeometryArrayEx(This,imgs_0size,imgs_0,ret_1)	\
    (This)->lpVtbl -> UnionGeometryArrayEx(This,imgs_0size,imgs_0,ret_1)

#define IDA3Statics_UnionGeometryArray(This,imgs_0,ret_1)	\
    (This)->lpVtbl -> UnionGeometryArray(This,imgs_0,ret_1)

#define IDA3Statics_get_EmptyImage(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyImage(This,ret_0)

#define IDA3Statics_get_DetectableEmptyImage(This,ret_0)	\
    (This)->lpVtbl -> get_DetectableEmptyImage(This,ret_0)

#define IDA3Statics_SolidColorImage(This,col_0,ret_1)	\
    (This)->lpVtbl -> SolidColorImage(This,col_0,ret_1)

#define IDA3Statics_GradientPolygonEx(This,points_0size,points_0,colors_1size,colors_1,ret_2)	\
    (This)->lpVtbl -> GradientPolygonEx(This,points_0size,points_0,colors_1size,colors_1,ret_2)

#define IDA3Statics_GradientPolygon(This,points_0,colors_1,ret_2)	\
    (This)->lpVtbl -> GradientPolygon(This,points_0,colors_1,ret_2)

#define IDA3Statics_RadialGradientPolygonEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)

#define IDA3Statics_RadialGradientPolygon(This,inner_0,outer_1,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygon(This,inner_0,outer_1,points_2,fallOff_3,ret_4)

#define IDA3Statics_RadialGradientPolygonAnimEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonAnimEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)

#define IDA3Statics_RadialGradientPolygonAnim(This,inner_0,outer_1,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonAnim(This,inner_0,outer_1,points_2,fallOff_3,ret_4)

#define IDA3Statics_GradientSquare(This,lowerLeft_0,upperLeft_1,upperRight_2,lowerRight_3,ret_4)	\
    (This)->lpVtbl -> GradientSquare(This,lowerLeft_0,upperLeft_1,upperRight_2,lowerRight_3,ret_4)

#define IDA3Statics_RadialGradientSquare(This,inner_0,outer_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> RadialGradientSquare(This,inner_0,outer_1,fallOff_2,ret_3)

#define IDA3Statics_RadialGradientSquareAnim(This,inner_0,outer_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> RadialGradientSquareAnim(This,inner_0,outer_1,fallOff_2,ret_3)

#define IDA3Statics_RadialGradientRegularPoly(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientRegularPoly(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)

#define IDA3Statics_RadialGradientRegularPolyAnim(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientRegularPolyAnim(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)

#define IDA3Statics_GradientHorizontal(This,start_0,stop_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> GradientHorizontal(This,start_0,stop_1,fallOff_2,ret_3)

#define IDA3Statics_GradientHorizontalAnim(This,start_0,stop_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> GradientHorizontalAnim(This,start_0,stop_1,fallOff_2,ret_3)

#define IDA3Statics_HatchHorizontal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchHorizontal(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchHorizontalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchHorizontalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchVertical(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchVertical(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchVerticalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchVerticalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchForwardDiagonal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchForwardDiagonal(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchForwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchForwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchBackwardDiagonal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchBackwardDiagonal(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchBackwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchBackwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchCross(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchCross(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchCrossAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchCrossAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchDiagonalCross(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchDiagonalCross(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchDiagonalCrossAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchDiagonalCrossAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_Overlay(This,top_0,bottom_1,ret_2)	\
    (This)->lpVtbl -> Overlay(This,top_0,bottom_1,ret_2)

#define IDA3Statics_OverlayArrayEx(This,imgs_0size,imgs_0,ret_1)	\
    (This)->lpVtbl -> OverlayArrayEx(This,imgs_0size,imgs_0,ret_1)

#define IDA3Statics_OverlayArray(This,imgs_0,ret_1)	\
    (This)->lpVtbl -> OverlayArray(This,imgs_0,ret_1)

#define IDA3Statics_get_AmbientLight(This,ret_0)	\
    (This)->lpVtbl -> get_AmbientLight(This,ret_0)

#define IDA3Statics_get_DirectionalLight(This,ret_0)	\
    (This)->lpVtbl -> get_DirectionalLight(This,ret_0)

#define IDA3Statics_get_PointLight(This,ret_0)	\
    (This)->lpVtbl -> get_PointLight(This,ret_0)

#define IDA3Statics_SpotLightAnim(This,fullcone_0,cutoff_1,ret_2)	\
    (This)->lpVtbl -> SpotLightAnim(This,fullcone_0,cutoff_1,ret_2)

#define IDA3Statics_SpotLight(This,fullcone_0,cutoff_1,ret_2)	\
    (This)->lpVtbl -> SpotLight(This,fullcone_0,cutoff_1,ret_2)

#define IDA3Statics_get_DefaultLineStyle(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultLineStyle(This,ret_0)

#define IDA3Statics_get_EmptyLineStyle(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyLineStyle(This,ret_0)

#define IDA3Statics_get_JoinStyleBevel(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleBevel(This,ret_0)

#define IDA3Statics_get_JoinStyleRound(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleRound(This,ret_0)

#define IDA3Statics_get_JoinStyleMiter(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleMiter(This,ret_0)

#define IDA3Statics_get_EndStyleFlat(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleFlat(This,ret_0)

#define IDA3Statics_get_EndStyleSquare(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleSquare(This,ret_0)

#define IDA3Statics_get_EndStyleRound(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleRound(This,ret_0)

#define IDA3Statics_get_DashStyleSolid(This,ret_0)	\
    (This)->lpVtbl -> get_DashStyleSolid(This,ret_0)

#define IDA3Statics_get_DashStyleDashed(This,ret_0)	\
    (This)->lpVtbl -> get_DashStyleDashed(This,ret_0)

#define IDA3Statics_get_DefaultMicrophone(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultMicrophone(This,ret_0)

#define IDA3Statics_get_OpaqueMatte(This,ret_0)	\
    (This)->lpVtbl -> get_OpaqueMatte(This,ret_0)

#define IDA3Statics_get_ClearMatte(This,ret_0)	\
    (This)->lpVtbl -> get_ClearMatte(This,ret_0)

#define IDA3Statics_UnionMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> UnionMatte(This,m1_0,m2_1,ret_2)

#define IDA3Statics_IntersectMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> IntersectMatte(This,m1_0,m2_1,ret_2)

#define IDA3Statics_DifferenceMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> DifferenceMatte(This,m1_0,m2_1,ret_2)

#define IDA3Statics_FillMatte(This,p_0,ret_1)	\
    (This)->lpVtbl -> FillMatte(This,p_0,ret_1)

#define IDA3Statics_TextMatte(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> TextMatte(This,str_0,fs_1,ret_2)

#define IDA3Statics_get_EmptyMontage(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyMontage(This,ret_0)

#define IDA3Statics_ImageMontage(This,im_0,depth_1,ret_2)	\
    (This)->lpVtbl -> ImageMontage(This,im_0,depth_1,ret_2)

#define IDA3Statics_ImageMontageAnim(This,im_0,depth_1,ret_2)	\
    (This)->lpVtbl -> ImageMontageAnim(This,im_0,depth_1,ret_2)

#define IDA3Statics_UnionMontage(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> UnionMontage(This,m1_0,m2_1,ret_2)

#define IDA3Statics_Concat(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> Concat(This,p1_0,p2_1,ret_2)

#define IDA3Statics_ConcatArrayEx(This,paths_0size,paths_0,ret_1)	\
    (This)->lpVtbl -> ConcatArrayEx(This,paths_0size,paths_0,ret_1)

#define IDA3Statics_ConcatArray(This,paths_0,ret_1)	\
    (This)->lpVtbl -> ConcatArray(This,paths_0,ret_1)

#define IDA3Statics_Line(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> Line(This,p1_0,p2_1,ret_2)

#define IDA3Statics_Ray(This,pt_0,ret_1)	\
    (This)->lpVtbl -> Ray(This,pt_0,ret_1)

#define IDA3Statics_StringPathAnim(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringPathAnim(This,str_0,fs_1,ret_2)

#define IDA3Statics_StringPath(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringPath(This,str_0,fs_1,ret_2)

#define IDA3Statics_PolylineEx(This,points_0size,points_0,ret_1)	\
    (This)->lpVtbl -> PolylineEx(This,points_0size,points_0,ret_1)

#define IDA3Statics_Polyline(This,points_0,ret_1)	\
    (This)->lpVtbl -> Polyline(This,points_0,ret_1)

#define IDA3Statics_PolydrawPathEx(This,points_0size,points_0,codes_1size,codes_1,ret_2)	\
    (This)->lpVtbl -> PolydrawPathEx(This,points_0size,points_0,codes_1size,codes_1,ret_2)

#define IDA3Statics_PolydrawPath(This,points_0,codes_1,ret_2)	\
    (This)->lpVtbl -> PolydrawPath(This,points_0,codes_1,ret_2)

#define IDA3Statics_ArcRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA3Statics_ArcRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA3Statics_ArcDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA3Statics_PieRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA3Statics_PieRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA3Statics_PieDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA3Statics_Oval(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> Oval(This,width_0,height_1,ret_2)

#define IDA3Statics_OvalAnim(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> OvalAnim(This,width_0,height_1,ret_2)

#define IDA3Statics_Rect(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> Rect(This,width_0,height_1,ret_2)

#define IDA3Statics_RectAnim(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> RectAnim(This,width_0,height_1,ret_2)

#define IDA3Statics_RoundRect(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)	\
    (This)->lpVtbl -> RoundRect(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)

#define IDA3Statics_RoundRectAnim(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)	\
    (This)->lpVtbl -> RoundRectAnim(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)

#define IDA3Statics_CubicBSplinePathEx(This,points_0size,points_0,knots_1size,knots_1,ret_2)	\
    (This)->lpVtbl -> CubicBSplinePathEx(This,points_0size,points_0,knots_1size,knots_1,ret_2)

#define IDA3Statics_CubicBSplinePath(This,points_0,knots_1,ret_2)	\
    (This)->lpVtbl -> CubicBSplinePath(This,points_0,knots_1,ret_2)

#define IDA3Statics_TextPath(This,obsolete1_0,obsolete2_1,ret_2)	\
    (This)->lpVtbl -> TextPath(This,obsolete1_0,obsolete2_1,ret_2)

#define IDA3Statics_get_Silence(This,ret_0)	\
    (This)->lpVtbl -> get_Silence(This,ret_0)

#define IDA3Statics_MixArrayEx(This,snds_0size,snds_0,ret_1)	\
    (This)->lpVtbl -> MixArrayEx(This,snds_0size,snds_0,ret_1)

#define IDA3Statics_MixArray(This,snds_0,ret_1)	\
    (This)->lpVtbl -> MixArray(This,snds_0,ret_1)

#define IDA3Statics_get_SinSynth(This,ret_0)	\
    (This)->lpVtbl -> get_SinSynth(This,ret_0)

#define IDA3Statics_get_DefaultFont(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultFont(This,ret_0)

#define IDA3Statics_FontAnim(This,str_0,size_1,col_2,ret_3)	\
    (This)->lpVtbl -> FontAnim(This,str_0,size_1,col_2,ret_3)

#define IDA3Statics_Font(This,str_0,size_1,col_2,ret_3)	\
    (This)->lpVtbl -> Font(This,str_0,size_1,col_2,ret_3)

#define IDA3Statics_StringImageAnim(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringImageAnim(This,str_0,fs_1,ret_2)

#define IDA3Statics_StringImage(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringImage(This,str_0,fs_1,ret_2)

#define IDA3Statics_TextImageAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> TextImageAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA3Statics_TextImage(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> TextImage(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA3Statics_get_XVector2(This,ret_0)	\
    (This)->lpVtbl -> get_XVector2(This,ret_0)

#define IDA3Statics_get_YVector2(This,ret_0)	\
    (This)->lpVtbl -> get_YVector2(This,ret_0)

#define IDA3Statics_get_ZeroVector2(This,ret_0)	\
    (This)->lpVtbl -> get_ZeroVector2(This,ret_0)

#define IDA3Statics_get_Origin2(This,ret_0)	\
    (This)->lpVtbl -> get_Origin2(This,ret_0)

#define IDA3Statics_Vector2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Vector2Anim(This,x_0,y_1,ret_2)

#define IDA3Statics_Vector2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Vector2(This,x_0,y_1,ret_2)

#define IDA3Statics_Point2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Point2Anim(This,x_0,y_1,ret_2)

#define IDA3Statics_Point2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Point2(This,x_0,y_1,ret_2)

#define IDA3Statics_Vector2PolarAnim(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2PolarAnim(This,theta_0,radius_1,ret_2)

#define IDA3Statics_Vector2Polar(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2Polar(This,theta_0,radius_1,ret_2)

#define IDA3Statics_Vector2PolarDegrees(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2PolarDegrees(This,theta_0,radius_1,ret_2)

#define IDA3Statics_Point2PolarAnim(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Point2PolarAnim(This,theta_0,radius_1,ret_2)

#define IDA3Statics_Point2Polar(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Point2Polar(This,theta_0,radius_1,ret_2)

#define IDA3Statics_DotVector2(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> DotVector2(This,v_0,u_1,ret_2)

#define IDA3Statics_NegVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> NegVector2(This,v_0,ret_1)

#define IDA3Statics_SubVector2(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> SubVector2(This,v1_0,v2_1,ret_2)

#define IDA3Statics_AddVector2(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> AddVector2(This,v1_0,v2_1,ret_2)

#define IDA3Statics_AddPoint2Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> AddPoint2Vector(This,p_0,v_1,ret_2)

#define IDA3Statics_SubPoint2Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> SubPoint2Vector(This,p_0,v_1,ret_2)

#define IDA3Statics_SubPoint2(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> SubPoint2(This,p1_0,p2_1,ret_2)

#define IDA3Statics_DistancePoint2(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistancePoint2(This,p_0,q_1,ret_2)

#define IDA3Statics_DistanceSquaredPoint2(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistanceSquaredPoint2(This,p_0,q_1,ret_2)

#define IDA3Statics_get_XVector3(This,ret_0)	\
    (This)->lpVtbl -> get_XVector3(This,ret_0)

#define IDA3Statics_get_YVector3(This,ret_0)	\
    (This)->lpVtbl -> get_YVector3(This,ret_0)

#define IDA3Statics_get_ZVector3(This,ret_0)	\
    (This)->lpVtbl -> get_ZVector3(This,ret_0)

#define IDA3Statics_get_ZeroVector3(This,ret_0)	\
    (This)->lpVtbl -> get_ZeroVector3(This,ret_0)

#define IDA3Statics_get_Origin3(This,ret_0)	\
    (This)->lpVtbl -> get_Origin3(This,ret_0)

#define IDA3Statics_Vector3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Vector3Anim(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Vector3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Vector3(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Point3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Point3Anim(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Point3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Point3(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Vector3SphericalAnim(This,xyAngle_0,yzAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Vector3SphericalAnim(This,xyAngle_0,yzAngle_1,radius_2,ret_3)

#define IDA3Statics_Vector3Spherical(This,xyAngle_0,yzAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Vector3Spherical(This,xyAngle_0,yzAngle_1,radius_2,ret_3)

#define IDA3Statics_Point3SphericalAnim(This,zxAngle_0,xyAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Point3SphericalAnim(This,zxAngle_0,xyAngle_1,radius_2,ret_3)

#define IDA3Statics_Point3Spherical(This,zxAngle_0,xyAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Point3Spherical(This,zxAngle_0,xyAngle_1,radius_2,ret_3)

#define IDA3Statics_DotVector3(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> DotVector3(This,v_0,u_1,ret_2)

#define IDA3Statics_CrossVector3(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> CrossVector3(This,v_0,u_1,ret_2)

#define IDA3Statics_NegVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> NegVector3(This,v_0,ret_1)

#define IDA3Statics_SubVector3(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> SubVector3(This,v1_0,v2_1,ret_2)

#define IDA3Statics_AddVector3(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> AddVector3(This,v1_0,v2_1,ret_2)

#define IDA3Statics_AddPoint3Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> AddPoint3Vector(This,p_0,v_1,ret_2)

#define IDA3Statics_SubPoint3Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> SubPoint3Vector(This,p_0,v_1,ret_2)

#define IDA3Statics_SubPoint3(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> SubPoint3(This,p1_0,p2_1,ret_2)

#define IDA3Statics_DistancePoint3(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistancePoint3(This,p_0,q_1,ret_2)

#define IDA3Statics_DistanceSquaredPoint3(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistanceSquaredPoint3(This,p_0,q_1,ret_2)

#define IDA3Statics_get_IdentityTransform3(This,ret_0)	\
    (This)->lpVtbl -> get_IdentityTransform3(This,ret_0)

#define IDA3Statics_Translate3Anim(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3Anim(This,tx_0,ty_1,tz_2,ret_3)

#define IDA3Statics_Translate3(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3(This,tx_0,ty_1,tz_2,ret_3)

#define IDA3Statics_Translate3Rate(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3Rate(This,tx_0,ty_1,tz_2,ret_3)

#define IDA3Statics_Translate3Vector(This,delta_0,ret_1)	\
    (This)->lpVtbl -> Translate3Vector(This,delta_0,ret_1)

#define IDA3Statics_Translate3Point(This,new_origin_0,ret_1)	\
    (This)->lpVtbl -> Translate3Point(This,new_origin_0,ret_1)

#define IDA3Statics_Scale3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3Anim(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Scale3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Scale3Rate(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3Rate(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Scale3Vector(This,scale_vec_0,ret_1)	\
    (This)->lpVtbl -> Scale3Vector(This,scale_vec_0,ret_1)

#define IDA3Statics_Scale3UniformAnim(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3UniformAnim(This,uniform_scale_0,ret_1)

#define IDA3Statics_Scale3Uniform(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3Uniform(This,uniform_scale_0,ret_1)

#define IDA3Statics_Scale3UniformRate(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3UniformRate(This,uniform_scale_0,ret_1)

#define IDA3Statics_Rotate3Anim(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Anim(This,axis_0,angle_1,ret_2)

#define IDA3Statics_Rotate3(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3(This,axis_0,angle_1,ret_2)

#define IDA3Statics_Rotate3Rate(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Rate(This,axis_0,angle_1,ret_2)

#define IDA3Statics_Rotate3Degrees(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Degrees(This,axis_0,angle_1,ret_2)

#define IDA3Statics_Rotate3RateDegrees(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3RateDegrees(This,axis_0,angle_1,ret_2)

#define IDA3Statics_XShear3Anim(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3Anim(This,a_0,b_1,ret_2)

#define IDA3Statics_XShear3(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3(This,a_0,b_1,ret_2)

#define IDA3Statics_XShear3Rate(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3Rate(This,a_0,b_1,ret_2)

#define IDA3Statics_YShear3Anim(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3Anim(This,c_0,d_1,ret_2)

#define IDA3Statics_YShear3(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3(This,c_0,d_1,ret_2)

#define IDA3Statics_YShear3Rate(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3Rate(This,c_0,d_1,ret_2)

#define IDA3Statics_ZShear3Anim(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3Anim(This,e_0,f_1,ret_2)

#define IDA3Statics_ZShear3(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3(This,e_0,f_1,ret_2)

#define IDA3Statics_ZShear3Rate(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3Rate(This,e_0,f_1,ret_2)

#define IDA3Statics_Transform4x4AnimEx(This,m_0size,m_0,ret_1)	\
    (This)->lpVtbl -> Transform4x4AnimEx(This,m_0size,m_0,ret_1)

#define IDA3Statics_Transform4x4Anim(This,m_0,ret_1)	\
    (This)->lpVtbl -> Transform4x4Anim(This,m_0,ret_1)

#define IDA3Statics_Compose3(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Compose3(This,a_0,b_1,ret_2)

#define IDA3Statics_Compose3ArrayEx(This,xfs_0size,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose3ArrayEx(This,xfs_0size,xfs_0,ret_1)

#define IDA3Statics_Compose3Array(This,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose3Array(This,xfs_0,ret_1)

#define IDA3Statics_LookAtFrom(This,to_0,from_1,up_2,ret_3)	\
    (This)->lpVtbl -> LookAtFrom(This,to_0,from_1,up_2,ret_3)

#define IDA3Statics_get_IdentityTransform2(This,ret_0)	\
    (This)->lpVtbl -> get_IdentityTransform2(This,ret_0)

#define IDA3Statics_Translate2Anim(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2Anim(This,Tx_0,Ty_1,ret_2)

#define IDA3Statics_Translate2(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2(This,Tx_0,Ty_1,ret_2)

#define IDA3Statics_Translate2Rate(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2Rate(This,Tx_0,Ty_1,ret_2)

#define IDA3Statics_Translate2Vector(This,delta_0,ret_1)	\
    (This)->lpVtbl -> Translate2Vector(This,delta_0,ret_1)

#define IDA3Statics_Translate2Point(This,pos_0,ret_1)	\
    (This)->lpVtbl -> Translate2Point(This,pos_0,ret_1)

#define IDA3Statics_Scale2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2Anim(This,x_0,y_1,ret_2)

#define IDA3Statics_Scale2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2(This,x_0,y_1,ret_2)

#define IDA3Statics_Scale2Rate(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2Rate(This,x_0,y_1,ret_2)

#define IDA3Statics_Scale2Vector2(This,obsoleteMethod_0,ret_1)	\
    (This)->lpVtbl -> Scale2Vector2(This,obsoleteMethod_0,ret_1)

#define IDA3Statics_Scale2Vector(This,scale_vec_0,ret_1)	\
    (This)->lpVtbl -> Scale2Vector(This,scale_vec_0,ret_1)

#define IDA3Statics_Scale2UniformAnim(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2UniformAnim(This,uniform_scale_0,ret_1)

#define IDA3Statics_Scale2Uniform(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2Uniform(This,uniform_scale_0,ret_1)

#define IDA3Statics_Scale2UniformRate(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2UniformRate(This,uniform_scale_0,ret_1)

#define IDA3Statics_Rotate2Anim(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Anim(This,angle_0,ret_1)

#define IDA3Statics_Rotate2(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2(This,angle_0,ret_1)

#define IDA3Statics_Rotate2Rate(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Rate(This,angle_0,ret_1)

#define IDA3Statics_Rotate2Degrees(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Degrees(This,angle_0,ret_1)

#define IDA3Statics_Rotate2RateDegrees(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2RateDegrees(This,angle_0,ret_1)

#define IDA3Statics_XShear2Anim(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2Anim(This,arg_0,ret_1)

#define IDA3Statics_XShear2(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2(This,arg_0,ret_1)

#define IDA3Statics_XShear2Rate(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2Rate(This,arg_0,ret_1)

#define IDA3Statics_YShear2Anim(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2Anim(This,arg_0,ret_1)

#define IDA3Statics_YShear2(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2(This,arg_0,ret_1)

#define IDA3Statics_YShear2Rate(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2Rate(This,arg_0,ret_1)

#define IDA3Statics_Transform3x2AnimEx(This,m_0size,m_0,ret_1)	\
    (This)->lpVtbl -> Transform3x2AnimEx(This,m_0size,m_0,ret_1)

#define IDA3Statics_Transform3x2Anim(This,m_0,ret_1)	\
    (This)->lpVtbl -> Transform3x2Anim(This,m_0,ret_1)

#define IDA3Statics_Compose2(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Compose2(This,a_0,b_1,ret_2)

#define IDA3Statics_Compose2ArrayEx(This,xfs_0size,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose2ArrayEx(This,xfs_0size,xfs_0,ret_1)

#define IDA3Statics_Compose2Array(This,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose2Array(This,xfs_0,ret_1)

#define IDA3Statics_Tuple(This,obsolete1,obsolete2)	\
    (This)->lpVtbl -> Tuple(This,obsolete1,obsolete2)

#define IDA3Statics_Array(This,obsolete1,obsolete2)	\
    (This)->lpVtbl -> Array(This,obsolete1,obsolete2)

#define IDA3Statics_get_AreBlockingImportsComplete(This,bComplete)	\
    (This)->lpVtbl -> get_AreBlockingImportsComplete(This,bComplete)


#define IDA3Statics_ImportDirect3DRMVisual(This,visual,bvr)	\
    (This)->lpVtbl -> ImportDirect3DRMVisual(This,visual,bvr)

#define IDA3Statics_ApplyDXTransformEx(This,theXf,numInputs,inputs,evaluator,ppResult)	\
    (This)->lpVtbl -> ApplyDXTransformEx(This,theXf,numInputs,inputs,evaluator,ppResult)

#define IDA3Statics_ApplyDXTransform(This,varXf,inputs,evaluator,ppResult)	\
    (This)->lpVtbl -> ApplyDXTransform(This,varXf,inputs,evaluator,ppResult)

#define IDA3Statics_ModifiableNumber(This,initVal,ppResult)	\
    (This)->lpVtbl -> ModifiableNumber(This,initVal,ppResult)

#define IDA3Statics_ModifiableString(This,initVal,ppResult)	\
    (This)->lpVtbl -> ModifiableString(This,initVal,ppResult)

#define IDA3Statics_DAArrayEx2(This,s,pBvrs,dwFlags,bvr)	\
    (This)->lpVtbl -> DAArrayEx2(This,s,pBvrs,dwFlags,bvr)

#define IDA3Statics_DAArray2(This,bvrs,dwFlags,bvr)	\
    (This)->lpVtbl -> DAArray2(This,bvrs,dwFlags,bvr)

#define IDA3Statics_ImportGeometryWrapped(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,ppGeometry)	\
    (This)->lpVtbl -> ImportGeometryWrapped(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,ppGeometry)

#define IDA3Statics_ImportGeometryWrappedAsync(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,pGeoStandIn,ppResult)	\
    (This)->lpVtbl -> ImportGeometryWrappedAsync(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,pGeoStandIn,ppResult)

#define IDA3Statics_ImportDirect3DRMVisualWrapped(This,visual,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,bvr)	\
    (This)->lpVtbl -> ImportDirect3DRMVisualWrapped(This,visual,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,bvr)

#define IDA3Statics_UntilNotifyScript(This,b0_0,event_1,scriptlet_2,ret_3)	\
    (This)->lpVtbl -> UntilNotifyScript(This,b0_0,event_1,scriptlet_2,ret_3)

#define IDA3Statics_get_ViewFrameRate(This,ret_0)	\
    (This)->lpVtbl -> get_ViewFrameRate(This,ret_0)

#define IDA3Statics_UnionMontageArrayEx(This,mtgs_0size,mtgs_0,ret_1)	\
    (This)->lpVtbl -> UnionMontageArrayEx(This,mtgs_0size,mtgs_0,ret_1)

#define IDA3Statics_UnionMontageArray(This,mtgs_0,ret_1)	\
    (This)->lpVtbl -> UnionMontageArray(This,mtgs_0,ret_1)

#define IDA3Statics_get_ModifiableBehaviorFlags(This,dwFlags)	\
    (This)->lpVtbl -> get_ModifiableBehaviorFlags(This,dwFlags)

#define IDA3Statics_put_ModifiableBehaviorFlags(This,dwFlags)	\
    (This)->lpVtbl -> put_ModifiableBehaviorFlags(This,dwFlags)

#define IDA3Statics_get_EmptyColor(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyColor(This,ret_0)


#define IDA3Statics_ImportSoundStream(This,url,ppResult)	\
    (This)->lpVtbl -> ImportSoundStream(This,url,ppResult)

#define IDA3Statics_ImportMovieStream(This,url,ppResult)	\
    (This)->lpVtbl -> ImportMovieStream(This,url,ppResult)

#define IDA3Statics_SequenceArrayEx(This,sz,bvrs_0,ret_1)	\
    (This)->lpVtbl -> SequenceArrayEx(This,sz,bvrs_0,ret_1)

#define IDA3Statics_SequenceArray(This,bvrs_0,ret_1)	\
    (This)->lpVtbl -> SequenceArray(This,bvrs_0,ret_1)

#define IDA3Statics_get_ViewTimeDelta(This,ret_0)	\
    (This)->lpVtbl -> get_ViewTimeDelta(This,ret_0)

#define IDA3Statics_TriMesh(This,nTriangles,positions,normals,UVs,indices,result)	\
    (This)->lpVtbl -> TriMesh(This,nTriangles,positions,normals,UVs,indices,result)

#define IDA3Statics_TriMeshEx(This,nTriangles,nPositions,positions,nNormals,normals,nUVs,UVs,nIndices,indices,result)	\
    (This)->lpVtbl -> TriMeshEx(This,nTriangles,nPositions,positions,nNormals,normals,nUVs,UVs,nIndices,indices,result)

#define IDA3Statics_RadialGradientMulticolor(This,offsets,colors,result)	\
    (This)->lpVtbl -> RadialGradientMulticolor(This,offsets,colors,result)

#define IDA3Statics_RadialGradientMulticolorEx(This,nOffsets,offsets,nColors,colors,result)	\
    (This)->lpVtbl -> RadialGradientMulticolorEx(This,nOffsets,offsets,nColors,colors,result)

#define IDA3Statics_LinearGradientMulticolor(This,offsets,colors,result)	\
    (This)->lpVtbl -> LinearGradientMulticolor(This,offsets,colors,result)

#define IDA3Statics_LinearGradientMulticolorEx(This,nOffsets,offsets,nColors,colors,result)	\
    (This)->lpVtbl -> LinearGradientMulticolorEx(This,nOffsets,offsets,nColors,colors,result)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA3Statics_ImportSoundStream_Proxy( 
    IDA3Statics * This,
    /* [in] */ BSTR url,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDA3Statics_ImportSoundStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3Statics_ImportMovieStream_Proxy( 
    IDA3Statics * This,
    /* [in] */ BSTR url,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDA3Statics_ImportMovieStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA3Statics_SequenceArrayEx_Proxy( 
    IDA3Statics * This,
    /* [in] */ LONG sz,
    /* [size_is][in] */ IDABehavior *bvrs_0[  ],
    /* [retval][out] */ IDABehavior **ret_1);


void __RPC_STUB IDA3Statics_SequenceArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3Statics_SequenceArray_Proxy( 
    IDA3Statics * This,
    /* [in] */ VARIANT bvrs_0,
    /* [retval][out] */ IDABehavior **ret_1);


void __RPC_STUB IDA3Statics_SequenceArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDA3Statics_get_ViewTimeDelta_Proxy( 
    IDA3Statics * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDA3Statics_get_ViewTimeDelta_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3Statics_TriMesh_Proxy( 
    IDA3Statics * This,
    /* [in] */ int nTriangles,
    /* [in] */ VARIANT positions,
    /* [in] */ VARIANT normals,
    /* [in] */ VARIANT UVs,
    /* [in] */ VARIANT indices,
    /* [retval][out] */ IDAGeometry **result);


void __RPC_STUB IDA3Statics_TriMesh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA3Statics_TriMeshEx_Proxy( 
    IDA3Statics * This,
    /* [in] */ int nTriangles,
    /* [in] */ int nPositions,
    /* [size_is][in] */ float positions[  ],
    /* [in] */ int nNormals,
    /* [size_is][in] */ float normals[  ],
    /* [in] */ int nUVs,
    /* [size_is][in] */ float UVs[  ],
    /* [in] */ int nIndices,
    /* [size_is][in] */ int indices[  ],
    /* [retval][out] */ IDAGeometry **result);


void __RPC_STUB IDA3Statics_TriMeshEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3Statics_RadialGradientMulticolor_Proxy( 
    IDA3Statics * This,
    /* [in] */ VARIANT offsets,
    /* [in] */ VARIANT colors,
    /* [retval][out] */ IDAImage **result);


void __RPC_STUB IDA3Statics_RadialGradientMulticolor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA3Statics_RadialGradientMulticolorEx_Proxy( 
    IDA3Statics * This,
    /* [in] */ int nOffsets,
    /* [size_is][in] */ IDANumber *offsets[  ],
    /* [in] */ int nColors,
    /* [size_is][in] */ IDAColor *colors[  ],
    /* [retval][out] */ IDAImage **result);


void __RPC_STUB IDA3Statics_RadialGradientMulticolorEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3Statics_LinearGradientMulticolor_Proxy( 
    IDA3Statics * This,
    /* [in] */ VARIANT offsets,
    /* [in] */ VARIANT colors,
    /* [retval][out] */ IDAImage **result);


void __RPC_STUB IDA3Statics_LinearGradientMulticolor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA3Statics_LinearGradientMulticolorEx_Proxy( 
    IDA3Statics * This,
    /* [in] */ int nOffsets,
    /* [size_is][in] */ IDANumber *offsets[  ],
    /* [in] */ int nColors,
    /* [size_is][in] */ IDAColor *colors[  ],
    /* [retval][out] */ IDAImage **result);


void __RPC_STUB IDA3Statics_LinearGradientMulticolorEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA3Statics_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DAStatics;

#ifdef __cplusplus

class DECLSPEC_UUID("542FB453-5003-11cf-92A2-00AA00B8A733")
DAStatics;
#endif

#ifndef __IDAViewerControl_INTERFACE_DEFINED__
#define __IDAViewerControl_INTERFACE_DEFINED__

/* interface IDAViewerControl */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IDAViewerControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0E41257B-812D-11D0-9B4A-00C04FC2F51D")
    IDAViewerControl : public IDispatch
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_UpdateInterval( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_UpdateInterval( 
            /* [in] */ double newVal) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_View( 
            /* [retval][out] */ IDAView **ppView) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_View( 
            /* [in] */ IDAView *pView) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Image( 
            /* [in] */ IDAImage *pImage) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundImage( 
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundImage( 
            /* [in] */ IDAImage *pImage) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Sound( 
            /* [retval][out] */ IDASound **ppSound) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Sound( 
            /* [in] */ IDASound *pSound) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_PixelLibrary( 
            /* [retval][out] */ IDAStatics **ppStatics) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_MeterLibrary( 
            /* [retval][out] */ IDAStatics **ppStatics) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE AddBehaviorToRun( 
            /* [in] */ IDABehavior *pBehavior) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Start( void) = 0;
        
        virtual /* [helpstring][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_InputImage( 
            /* [retval][out] */ IDAImage **pVal) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OpaqueForHitDetect( 
            /* [retval][out] */ VARIANT_BOOL *b) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OpaqueForHitDetect( 
            /* [in] */ VARIANT_BOOL b) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TimerSource( 
            /* [retval][out] */ DA_TIMER_SOURCE *ts) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TimerSource( 
            /* [in] */ DA_TIMER_SOURCE ts) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RegisterErrorHandler( 
            /* [in] */ BSTR scriptlet) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAViewerControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAViewerControl * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAViewerControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAViewerControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAViewerControl * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAViewerControl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAViewerControl * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAViewerControl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateInterval )( 
            IDAViewerControl * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateInterval )( 
            IDAViewerControl * This,
            /* [in] */ double newVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDAView **ppView);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_View )( 
            IDAViewerControl * This,
            /* [in] */ IDAView *pView);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Image )( 
            IDAViewerControl * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundImage )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundImage )( 
            IDAViewerControl * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sound )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDASound **ppSound);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sound )( 
            IDAViewerControl * This,
            /* [in] */ IDASound *pSound);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelLibrary )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MeterLibrary )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddBehaviorToRun )( 
            IDAViewerControl * This,
            /* [in] */ IDABehavior *pBehavior);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IDAViewerControl * This);
        
        /* [helpstring][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_InputImage )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDAImage **pVal);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueForHitDetect )( 
            IDAViewerControl * This,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OpaqueForHitDetect )( 
            IDAViewerControl * This,
            /* [in] */ VARIANT_BOOL b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimerSource )( 
            IDAViewerControl * This,
            /* [retval][out] */ DA_TIMER_SOURCE *ts);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimerSource )( 
            IDAViewerControl * This,
            /* [in] */ DA_TIMER_SOURCE ts);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RegisterErrorHandler )( 
            IDAViewerControl * This,
            /* [in] */ BSTR scriptlet);
        
        END_INTERFACE
    } IDAViewerControlVtbl;

    interface IDAViewerControl
    {
        CONST_VTBL struct IDAViewerControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAViewerControl_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAViewerControl_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAViewerControl_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAViewerControl_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAViewerControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAViewerControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAViewerControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAViewerControl_get_UpdateInterval(This,pVal)	\
    (This)->lpVtbl -> get_UpdateInterval(This,pVal)

#define IDAViewerControl_put_UpdateInterval(This,newVal)	\
    (This)->lpVtbl -> put_UpdateInterval(This,newVal)

#define IDAViewerControl_get_View(This,ppView)	\
    (This)->lpVtbl -> get_View(This,ppView)

#define IDAViewerControl_put_View(This,pView)	\
    (This)->lpVtbl -> put_View(This,pView)

#define IDAViewerControl_get_Image(This,ppImage)	\
    (This)->lpVtbl -> get_Image(This,ppImage)

#define IDAViewerControl_put_Image(This,pImage)	\
    (This)->lpVtbl -> put_Image(This,pImage)

#define IDAViewerControl_get_BackgroundImage(This,ppImage)	\
    (This)->lpVtbl -> get_BackgroundImage(This,ppImage)

#define IDAViewerControl_put_BackgroundImage(This,pImage)	\
    (This)->lpVtbl -> put_BackgroundImage(This,pImage)

#define IDAViewerControl_get_Sound(This,ppSound)	\
    (This)->lpVtbl -> get_Sound(This,ppSound)

#define IDAViewerControl_put_Sound(This,pSound)	\
    (This)->lpVtbl -> put_Sound(This,pSound)

#define IDAViewerControl_get_PixelLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_PixelLibrary(This,ppStatics)

#define IDAViewerControl_get_MeterLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_MeterLibrary(This,ppStatics)

#define IDAViewerControl_AddBehaviorToRun(This,pBehavior)	\
    (This)->lpVtbl -> AddBehaviorToRun(This,pBehavior)

#define IDAViewerControl_Start(This)	\
    (This)->lpVtbl -> Start(This)

#define IDAViewerControl_get_InputImage(This,pVal)	\
    (This)->lpVtbl -> get_InputImage(This,pVal)

#define IDAViewerControl_get_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> get_OpaqueForHitDetect(This,b)

#define IDAViewerControl_put_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> put_OpaqueForHitDetect(This,b)

#define IDAViewerControl_get_TimerSource(This,ts)	\
    (This)->lpVtbl -> get_TimerSource(This,ts)

#define IDAViewerControl_put_TimerSource(This,ts)	\
    (This)->lpVtbl -> put_TimerSource(This,ts)

#define IDAViewerControl_RegisterErrorHandler(This,scriptlet)	\
    (This)->lpVtbl -> RegisterErrorHandler(This,scriptlet)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_UpdateInterval_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ double *pVal);


void __RPC_STUB IDAViewerControl_get_UpdateInterval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_UpdateInterval_Proxy( 
    IDAViewerControl * This,
    /* [in] */ double newVal);


void __RPC_STUB IDAViewerControl_put_UpdateInterval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_View_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDAView **ppView);


void __RPC_STUB IDAViewerControl_get_View_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_View_Proxy( 
    IDAViewerControl * This,
    /* [in] */ IDAView *pView);


void __RPC_STUB IDAViewerControl_put_View_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_Image_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAViewerControl_get_Image_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_Image_Proxy( 
    IDAViewerControl * This,
    /* [in] */ IDAImage *pImage);


void __RPC_STUB IDAViewerControl_put_Image_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_BackgroundImage_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAViewerControl_get_BackgroundImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_BackgroundImage_Proxy( 
    IDAViewerControl * This,
    /* [in] */ IDAImage *pImage);


void __RPC_STUB IDAViewerControl_put_BackgroundImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_Sound_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDASound **ppSound);


void __RPC_STUB IDAViewerControl_get_Sound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_Sound_Proxy( 
    IDAViewerControl * This,
    /* [in] */ IDASound *pSound);


void __RPC_STUB IDAViewerControl_put_Sound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_PixelLibrary_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDAStatics **ppStatics);


void __RPC_STUB IDAViewerControl_get_PixelLibrary_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_MeterLibrary_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDAStatics **ppStatics);


void __RPC_STUB IDAViewerControl_get_MeterLibrary_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_AddBehaviorToRun_Proxy( 
    IDAViewerControl * This,
    /* [in] */ IDABehavior *pBehavior);


void __RPC_STUB IDAViewerControl_AddBehaviorToRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_Start_Proxy( 
    IDAViewerControl * This);


void __RPC_STUB IDAViewerControl_Start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][hidden] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_InputImage_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDAImage **pVal);


void __RPC_STUB IDAViewerControl_get_InputImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_OpaqueForHitDetect_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ VARIANT_BOOL *b);


void __RPC_STUB IDAViewerControl_get_OpaqueForHitDetect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_OpaqueForHitDetect_Proxy( 
    IDAViewerControl * This,
    /* [in] */ VARIANT_BOOL b);


void __RPC_STUB IDAViewerControl_put_OpaqueForHitDetect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_TimerSource_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ DA_TIMER_SOURCE *ts);


void __RPC_STUB IDAViewerControl_get_TimerSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_TimerSource_Proxy( 
    IDAViewerControl * This,
    /* [in] */ DA_TIMER_SOURCE ts);


void __RPC_STUB IDAViewerControl_put_TimerSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_RegisterErrorHandler_Proxy( 
    IDAViewerControl * This,
    /* [in] */ BSTR scriptlet);


void __RPC_STUB IDAViewerControl_RegisterErrorHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase)