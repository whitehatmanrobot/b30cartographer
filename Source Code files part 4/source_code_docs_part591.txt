am name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on key equality and groups the results. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set intersection of two sequences by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on matching keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the last element of a sequence.</summary>
      <returns>The value at the last position in the source sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a sequence that satisfies a specified condition.</summary>
      <returns>The last element in the sequence that passes the test in the specified predicate function.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.-or-The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the last element of a sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default(<paramref name="TSource" />) if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
      <returns>default(<paramref name="TSource" />) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</summary>
      <returns>The number of elements in the source sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents how many elements in a sequence satisfy a condition.</summary>
      <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence. </returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence. </returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence. </returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the maximum value in a generic sequence.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.</summary>
      <returns>The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.</summary>
      <returns>The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.</summary>
      <returns>The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.</summary>
      <returns>The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.</summary>
      <returns>The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the minimum value in a generic sequence.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.</summary>
      <returns>The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.</summary>
      <returns>The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.</summary>
      <returns>The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.</summary>
      <returns>The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.</summary>
      <returns>The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>Filters the elements of an <see cref="T:System.Collections.IEnumerable" /> based on a specified type.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence of type <paramref name="TResult" />.</returns>
      <param name="source">The <see cref="T:System.Collections.IEnumerable" /> whose elements to filter.</param>
      <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Sorts the elements of a sequence in ascending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in ascending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Sorts the elements of a sequence in descending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in descending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>Generates a sequence of integral numbers within a specified range.</summary>
      <returns>An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.</returns>
      <param name="start">The value of the first integer in the sequence.</param>
      <param name="count">The number of sequential integers to generate.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.-or-<paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>Generates a sequence that contains one repeated value.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a repeated value.</returns>
      <param name="element">The value to be repeated.</param>
      <param name="count">The number of times to repeat the value in the generated sequence.</param>
      <typeparam name="TResult">The type of the value to be repeated in the result sequence.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Inverts the order of the elements in a sequence.</summary>
      <returns>A sequence whose elements correspond to those of the input sequence in reverse order.</returns>
      <param name="source">A sequence of values to reverse.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Projects each element of a sequence into a new form.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>Projects each element of a sequence into a new form by incorporating the element's index.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer" />; otherwise, false.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> has more than one element.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
      <returns>The single element of the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.-or-The input sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
      <returns>The single element of the input sequence that satisfies a condition.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.-or-More than one element satisfies the condition in <paramref name="predicate" />.-or-The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
      <returns>The single element of the input sequence, or default(<paramref name="TSource" />) if the sequence contains no elements.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
      <returns>The single element of the input sequence that satisfies the condition, or default(<paramref name="TSource" />) if no such element is found.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
      <param name="count">The number of elements to skip before returning the remaining elements.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Returns a specified number of contiguous elements from the start of a sequence.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from the start of the input sequence.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to return.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns elements from a sequence as long as a specified condition is true.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <param name="source">A sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>An array that contains the elements from the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the keys returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer, and an element selector function.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</summary>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</summary>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</summary>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer and an element selector function.</summary>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set union of two sequences by using the default equality comparer.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Filters a sequence of values based on a predicate.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Merges two sequences by using the specified predicate function.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains merged elements of two input sequences.</returns>
      <param name="first">The first sequence to merge.</param>
      <param name="second">The second sequence to merge.</param>
      <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
      <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
      <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>Represents an expression tree and provides functionality to execute the expression tree after rewriting it.</summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableExecutor" /> class.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>Represents an expression tree and provides functionality to execute the expression tree after rewriting it.</summary>
      <typeparam name="T">The data type of the value that results from executing the expression tree.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableExecutor`1" /> class.</summary>
      <param name="expression">An expression tree to associate with the new instance.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>Represents an <see cref="T:System.Collections.IEnumerable" /> as an <see cref="T:System.Linq.EnumerableQuery" /> data source. </summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery" /> class.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>Represents an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection as an <see cref="T:System.Linq.IQueryable`1" /> data source.</summary>
      <typeparam name="T">The type of the data in the collection.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery`1" /> class and associates it with an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</summary>
      <param name="enumerable">A collection to associate with the new instance.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery`1" /> class and associates the instance with an expression tree.</summary>
      <param name="expression">An expression tree to associate with the new instance.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that can iterate through the associated <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an <see cref="T:System.Collections.Generic.IEnumerable`1" /> data source and executing it.</summary>
      <returns>An enumerator that can be used to iterate through the associated data source.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through the associated <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an <see cref="T:System.Collections.Generic.IEnumerable`1" /> data source and executing it.</summary>
      <returns>An enumerator that can be used to iterate through the associated data source.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Gets the type of the data in the collection that this instance represents.</summary>
      <returns>The type of the data in the collection that this instance represents.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>Gets the expression tree that is associated with or that represents this instance.</summary>
      <returns>The expression tree that is associated with or that represents this instance.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>Gets the query provider that is associated with this instance.</summary>
      <returns>The query provider that is associated with this instance.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Constructs a new <see cref="T:System.Linq.EnumerableQuery`1" /> object and associates it with a specified expression tree that represents an <see cref="T:System.Linq.IQueryable`1" /> collection of data.</summary>
      <returns>An EnumerableQuery object that is associated with <paramref name="expression" />.</returns>
      <param name="expression">An expression tree to execute.</param>
      <typeparam name="S">The type of the data in the collection that <paramref name="expression" /> represents.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Constructs a new <see cref="T:System.Linq.EnumerableQuery`1" /> object and associates it with a specified expression tree that represents an <see cref="T:System.Linq.IQueryable" /> collection of data.</summary>
      <returns>An <see cref="T:System.Linq.EnumerableQuery`1" /> object that is associated with <paramref name="expression" />.</returns>
      <param name="expression">An expression tree that represents an <see cref="T:System.Linq.IQueryable" /> collection of data.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>Executes an expression after rewriting it to call <see cref="T:System.Linq.Enumerable" /> methods instead of <see cref="T:System.Linq.Queryable" /> methods on any enumerable data sources that cannot be queried by <see cref="T:System.Linq.Queryable" /> methods.</summary>
      <returns>The value that results from executing <paramref name="expression" />.</returns>
      <param name="expression">An expression tree to execute.</param>
      <typeparam name="S">The type of the data in the collection that <paramref name="expression" /> represents.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>Executes an expression after rewriting it to call <see cref="T:System.Linq.Enumerable" /> methods instead of <see cref="T:System.Linq.Queryable" /> methods on any enumerable data sources that cannot be queried by <see cref="T:System.Linq.Queryable" /> methods.</summary>
      <returns>The value that results from executing <paramref name="expression" />.</returns>
      <param name="expression">An expression tree to execute.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>Returns a textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.</summary>
      <returns>A textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>Represents a collection of objects that have a common key.</summary>
      <typeparam name="TKey">The type of the key of the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TElement">The type of the values in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>Gets the key of the <see cref="T:System.Linq.IGrouping`2" />.</summary>
      <returns>The key of the <see cref="T:System.Linq.IGrouping`2" />.</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>Defines an indexer, size property, and Boolean search method for data structures that map keys to <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequences of values.</summary>
      <typeparam name="TKey">The type of the keys in the <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequences that make up the values in the <see cref="T:System.Linq.ILookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>Determines whether a specified key exists in the <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>true if <paramref name="key" /> is in the <see cref="T:System.Linq.ILookup`2" />; otherwise, false.</returns>
      <param name="key">The key to search for in the <see cref="T:System.Linq.ILookup`2" />.</param>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>Gets the number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>The number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence of values indexed by a specified key.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence of values indexed by the specified key.</returns>
      <param name="key">The key of the desired sequence of values.</param>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>Represents a sorted sequence.</summary>
      <typeparam name="TElement">The type of the elements of the sequence.</typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>Performs a subsequent ordering on the elements of an <see cref="T:System.Linq.IOrderedEnumerable`1" /> according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="keySelector">The <see cref="T:System.Func`2" /> used to extract the key for each element.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> used to compare keys for placement in the returned sequence.</param>
      <param name="descending">true to sort the elements in descending order; false to sort the elements in ascending order.</param>
      <typeparam name="TKey">The type of the key produced by <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>Represents the result of a sorting operation.</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>Represents the result of a sorting operation.</summary>
      <typeparam name="T">The type of the content of the data source.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable" /> is executed.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>Gets the query provider that is associated with this data source.</summary>
      <returns>The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.</summary>
      <typeparam name="T">The type of the data in the data source.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>Defines methods to create and execute queries that are described by an <see cref="T:System.Linq.IQueryable" /> object.</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</returns>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <typeparam name="TElement">The type of the elements of the <see cref="T:System.Linq.IQueryable`1" /> that is returned.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</returns>
      <param name="expression">An expression tree that represents a LINQ query.</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>Executes the strongly-typed query represented by a specified expression tree.</summary>
      <returns>The value that results from executing the specified query.</returns>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <typeparam name="TResult">The type of the value that results from executing the query.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>Executes the query represented by a specified expression tree.</summary>
      <returns>The value that results from executing the specified query.</returns>
      <param name="expression">An expression tree that represents a LINQ query.</param>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>Represents a collection of keys each mapped to one or more values.</summary>
      <typeparam name="TKey">The type of the keys in the <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <typeparam name="TElement">The type of the elements of each <see cref="T:System.Collections.Generic.IEnumerable`1" /> value in the <see cref="T:System.Linq.Lookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>Applies a transform function to each key and its associated values and returns the results.</summary>
      <returns>A collection that contains one value for each key/value collection pair in the <see cref="T:System.Linq.Lookup`2" />.</returns>
      <param name="resultSelector">A function to project a result value from each key and its associated values.</param>
      <typeparam name="TResult">The type of the result values produced by <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>Determines whether a specified key is in the <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>true if <paramref name="key" /> is in the <see cref="T:System.Linq.Lookup`2" />; otherwise, false.</returns>
      <param name="key">The key to find in the <see cref="T:System.Linq.Lookup`2" />.</param>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>Gets the number of key/value collection pairs in the <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>The number of key/value collection pairs in the <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>Returns a generic enumerator that iterates through the <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>An enumerator for the <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>Gets the collection of values indexed by the specified key.</summary>
      <returns>The collection of values indexed by the specified key.</returns>
      <param name="key">The key of the desired collection of values.</param>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Linq.Lookup`2" />. This class cannot be inherited.</summary>
      <returns>An enumerator for the <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>Provides a set of static (Shared in Visual Basic) methods for querying data structures that implement <see cref="T:System.Linq.IQueryable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>Applies an accumulator function over a sequence.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="func">An accumulator function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to invoke on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</summary>
      <returns>The transformed final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to invoke on each element.</param>
      <param name="selector">A function to transform the final accumulator value into the result value.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determines whether all the elements of a sequence satisfy a condition.</summary>
      <returns>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.</returns>
      <param name="source">A sequence whose elements to test for a condition.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>Determines whether a sequence contains any elements.</summary>
      <returns>true if the source sequence contains any elements; otherwise, false.</returns>
      <param name="source">A sequence to check for being empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determines whether any element of a sequence satisfies a condition.</summary>
      <returns>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</returns>
      <param name="source">A sequence whose elements to test for a condition.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Converts a generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> to a generic <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that represents the input sequence.</returns>
      <param name="source">A sequence to convert.</param>
      <typeparam name="TElement">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>Converts an <see cref="T:System.Collections.IEnumerable" /> to an <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable" /> that represents the input sequence.</returns>
      <param name="source">A sequence to convert.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> does not implement <see cref="T:System.Collections.Generic.IEnumerable`1" /> for some <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" />values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>Converts the elements of an <see cref="T:System.Linq.IQueryable" /> to the specified type.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains each element of the source sequence converted to the specified type.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable" /> that contains the elements to be converted.</param>
      <typeparam name="TResult">The type to convert the elements of <paramref name="source" /> to.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidCastException">An element in the sequence cannot be cast to type <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates two sequences.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the concatenated elements of the two input sequences.</returns>
      <param name="source1">The first sequence to concatenate.</param>
      <param name="source2">The sequence to concatenate to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>Determines whether a sequence contains a specified element by using the default equality comparer.</summary>
      <returns>true if the input sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> in which to locate <paramref name="item" />.</param>
      <param name="item">The object to locate in the sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true if the input sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> in which to locate <paramref name="item" />.</param>
      <param name="item">The object to locate in the sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>Returns the number of elements in a sequence.</summary>
      <returns>The number of elements in the input sequence.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the number of elements in the specified sequence that satisfies a condition.</summary>
      <returns>The number of elements in the sequence that satisfies the condition in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return a default value for if empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return the specified value for if empty.</param>
      <param name="defaultValue">The value to return if the sequence is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>Returns distinct elements from a sequence by using the default equality comparer to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains distinct elements from <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to remove duplicates from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains distinct elements from <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to remove duplicates from.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence.</summary>
      <returns>The element at the specified position in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence or a default value if the index is out of range.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="index" /> is outside the bounds of <paramref name="source" />; otherwise, the element at the specified position in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set difference of two sequences by using the default equality comparer to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the set difference of the two sequences.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements that are not also in <paramref name="source2" /> will be returned.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will not appear in the returned sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the set difference of the two sequences.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements that are not also in <paramref name="source2" /> will be returned.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will not appear in the returned sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>Returns the first element of a sequence.</summary>
      <returns>The first element in <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the first element of a sequence that satisfies a specified condition.</summary>
      <returns>The first element in <paramref name="source" /> that passes the test in <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.-or-The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Groups the elements of a sequence according to a specified key selector function.</summary>
      <returns>An IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</summary>
      <returns>An IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects and a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</summary>
      <returns>An IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects of type <paramref name="TElement" /> and a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.</summary>
      <returns>An IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects of type <paramref name="TElement" /> and a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</summary>
      <returns>An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.</summary>
      <returns>An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</summary>
      <returns>An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.</summary>
      <returns>An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements of type <paramref name="TResult" /> obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on key equality and groups the results. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements of type <paramref name="TResult" /> obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <param name="comparer">A comparer to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set intersection of two sequences by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains the set intersection of the two sequences.</returns>
      <param name="source1">A sequence whose distinct elements that also appear in <paramref name="source2" /> are returned.</param>
      <param name="source2">A sequence whose distinct elements that also appear in the first sequence are returned.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the set intersection of the two sequences.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose distinct elements that also appear in <paramref name="source2" /> are returned.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence are returned.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that has elements of type <paramref name="TResult" /> obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on matching keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that has elements of type <paramref name="TResult" /> obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>Returns the last element in a sequence.</summary>
      <returns>The value at the last position in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the last element of a sequence that satisfies a specified condition.</summary>
      <returns>The last element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.-or-The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Returns the last element in a sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the last element in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <paramref name="source" /> that passes the test in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</summary>
      <returns>The number of elements in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence that satisfy a condition.</summary>
      <returns>The number of elements in <paramref name="source" /> that satisfy the condition in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>Returns the maximum value in a generic <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1" /> and returns the maximum resulting value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>Returns the minimum value of a generic <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1" /> and returns the minimum resulting value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>Filters the elements of an <see cref="T:System.Linq.IQueryable" /> based on a specified type.</summary>
      <returns>A collection that contains the elements from <paramref name="source" /> that have type <paramref name="TResult" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable" /> whose elements to filter.</param>
      <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Sorts the elements of a sequence in ascending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in ascending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Sorts the elements of a sequence in descending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in descending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>Inverts the order of the elements in a sequence.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements correspond to those of the input sequence in reverse order.</returns>
      <param name="source">A sequence of values to reverse.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Projects each element of a sequence into a new form.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a projection function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>Projects each element of a sequence into a new form by incorporating the element's index.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a projection function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding <paramref name="source" /> element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A projection function to apply to each element of the input sequence.</param>
      <param name="resultSelector">A projection function to apply to each element of each intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by the function represented by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and combines the resulting sequences into one sequence.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding <paramref name="source" /> element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.</param>
      <param name="resultSelector">A projection function to apply to each element of each intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by the function represented by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element; the second parameter of this function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Determines whether two sequences are equal by using the default equality comparer to compare elements.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, false.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to compare to those of <paramref name="source2" />.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to compare to those of the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether two sequences are equal by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare elements.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, false.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to compare to those of <paramref name="source2" />.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to compare to those of the first sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
      <returns>The single element of the input sequence.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> has more than one element.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
      <returns>The single element of the input sequence that satisfies the condition in <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.-or-More than one element satisfies the condition in <paramref name="predicate" />.-or-The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
      <returns>The single element of the input sequence, or default(<paramref name="TSource" />) if the sequence contains no elements.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
      <returns>The single element of the input sequence that satisfies the condition in <paramref name="predicate" />, or default(<paramref name="TSource" />) if no such element is found.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements that occur after the specified index in the input sequence.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</param>
      <param name="count">The number of elements to skip before returning the remaining elements.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from <paramref name="source" /> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from <paramref name="source" /> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of this function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Returns a specified number of contiguous elements from the start of a sequence.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the specified number of elements from the start of <paramref name="source" />.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to return.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns elements from a sequence as long as a specified condition is true.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate" /> no longer passes.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate" /> no longer passes.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</summary>
      <returns>A collection whose elements are sorted in descending order according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key that is returned by the <paramref name="keySelector" /> function.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set union of two sequences by using the default equality comparer.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="source1">A sequence whose distinct elements form the first set for the union operation.</param>
      <param name="source2">A sequence whose distinct elements form the second set for the union operation.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="source1">A sequence whose distinct elements form the first set for the union operation.</param>
      <param name="source2">A sequence whose distinct elements form the second set for the union operation.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Filters a sequence of values based on a predicate.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to filter.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Merges two sequences by using the specified predicate function.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains merged elements of two input sequences.</returns>
      <param name="source1">The first sequence to merge.</param>
      <param name="source2">The second sequence to merge.</param>
      <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
      <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
      <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" />or <paramref name="source2 " />is null.</exception>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>Represents an expression that has a binary operator.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if the expression tree node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>Gets the type conversion function that is used by a coalescing or compound assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator.</summary>
      <returns>true if the node represents a lifted call; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.</summary>
      <returns>true if the operator's return type is lifted to a nullable type; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>Gets the left operand of the binary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand of the binary operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>Gets the implementing method for the binary operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>Reduces the binary expression node to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>Gets the right operand of the binary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand of the binary operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="left">The <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property of the result. </param>
      <param name="conversion">The <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property of the result.</param>
      <param name="right">The <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property of the result. </param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>Represents a block that contains a sequence of expressions where variables can be defined.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>Gets the expressions in this block.</summary>
      <returns>The read-only collection containing all the expressions in this block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>Gets the last expression in this block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the last expression in this block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.BlockExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children changed, or an expression with the updated children.</returns>
      <param name="variables">The <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> property of the result. </param>
      <param name="expressions">The <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> property of the result. </param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>Gets the variables defined in this block.</summary>
      <returns>The read-only collection containing all the variables defined in this block.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>Represents a catch statement in a try block.</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>Gets the body of the catch block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the catch body.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>Gets the body of the <see cref="T:System.Linq.Expressions.CatchBlock" /> filter.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the body of the <see cref="T:System.Linq.Expressions.CatchBlock" /> filter.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>Gets the type of <see cref="T:System.Exception" /> this handler catches.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of <see cref="T:System.Exception" /> this handler catches.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="variable">The <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> property of the result.</param>
      <param name="filter">The <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> property of the result.</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>Gets a reference to the <see cref="T:System.Exception" /> object caught by this handler.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ParameterExpression" /> object representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>Represents an expression that has a conditional operator.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>Gets the expression to execute if the test evaluates to false.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression to execute if the test is false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>Gets the expression to execute if the test evaluates to true.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression to execute if the test is true.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>Gets the test of the conditional operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the test of the conditional operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression</summary>
      <returns>This expression if no children changed, or an expression with the updated children.</returns>
      <param name="test">The <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property of the result.</param>
      <param name="ifTrue">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property of the result.</param>
      <param name="ifFalse">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>Represents an expression that has a constant value.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ConstantExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>Gets the value of the constant expression.</summary>
      <returns>An <see cref="T:System.Object" /> equal to the value of the represented expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>Emits or clears a sequence point for debug information. This allows the debugger to highlight the correct source code when debugging.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>Gets the <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>Gets the end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the end column of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>Gets the end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the end line of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>Gets the value to indicate if the <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> is for clearing a sequence point.</summary>
      <returns>True if the <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> is for clearing a sequence point, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>Gets the start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the start column of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>Gets the start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the start line of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>Represents the default value of a type or an empty expression.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DefaultExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>Represents a dynamic operation.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>Gets the arguments to the dynamic operation.</summary>
      <returns>The read-only collections containing the arguments to the dynamic operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>Gets the <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, which determines the runtime behavior of the dynamic site.</summary>
      <returns>The <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, which determines the runtime behavior of the dynamic site.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>Gets the type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DynamicExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>Represents an initializer for a single element of an <see cref="T:System.Collections.IEnumerable" /> collection.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>Gets the instance method that is used to add an element to an <see cref="T:System.Collections.IEnumerable" /> collection.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that adds an element to a collection.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>Gets the collection of arguments that are passed to a method that adds an element to an <see cref="T:System.Collections.IEnumerable" /> collection.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments for a method that adds an element to a collection.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>Returns a textual representation of an <see cref="T:System.Linq.Expressions.ElementInit" /> object.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.ElementInit" /> object.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>Provides the base class from which the classes that represent expression tree nodes are derived. It also contains static (Shared in Visual Basic) factory methods to create the various node types. This is an abstract class.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression" /> class.</summary>
      <param name="nodeType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> to set as the node type.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of this <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND operation. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional AND operation that evaluates the second operand only if the first operand evaluates to true.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional AND operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="method" /> is null and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access a multidimensional array.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="array">An expression that represents the multidimensional array.</param>
      <param name="indexes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing expressions used to index the array.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="array">An expression representing the array to index.</param>
      <param name="indexes">An array that contains expressions used to index the array.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to an array of rank more than one.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="array">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to.</param>
      <param name="indexes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="indexes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.-or-The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents applying an array index operator to an array of rank one.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="array">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="index">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="index" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.-or-<paramref name="array" />.Type represents an array type whose rank is not 1.-or-<paramref name="index" />.Type does not represent the <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to a multidimensional array.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="array">An array of <see cref="T:System.Linq.Expressions.Expression" /> instances - indexes for the array index operation.</param>
      <param name="indexes">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="indexes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.-or-The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression for obtaining the length of a one-dimensional array.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to <paramref name="array" />.</returns>
      <param name="array">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> properties set to the specified values.</returns>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The property represented by <paramref name="member" /> does not have a set accessor.-or-<paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member by using a property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property set to <paramref name="expression" />.</returns>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The property accessed by <paramref name="propertyAccessor" /> does not have a set accessor.-or-<paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains two expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains three expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains four expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
      <param name="arg3">The fourth expression in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains five expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
      <param name="arg3">The fourth expression in the block.</param>
      <param name="arg4">The fifth expression in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">The result type of the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">The result type of the block.</param>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">The result type of the block.</param>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">The result type of the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to an instance method that takes no arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.-or-<paramref name="instance" /> is null and <paramref name="method" /> represents an instance method.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.-or-<paramref name="instance" /> is null and <paramref name="method" /> represents an instance method.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.-or-The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.-or-One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes two arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes no arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance fo an instance method call (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.-or-<paramref name="instance" /> is null and <paramref name="method" /> represents an instance method.-or-<paramref name="arguments" /> is not null and one or more of its elements is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.-or-The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.-or-One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to an instance method by calling the appropriate factory method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified instance method, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> set to the specified arguments.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> property value will be searched for a specific method.</param>
      <param name="methodName">The name of the method.</param>
      <param name="typeArguments">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represents the arguments to the method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> or <paramref name="methodName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.-or-More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</param>
      <param name="arguments">A collection of <see cref="T:System.Linq.Expressions.Expression" /> that represents the call arguments.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method that takes one argument.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to an static method that takes two arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes three arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes four arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
      <param name="arg3">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes five arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
      <param name="arg3">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</param>
      <param name="arg4">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fifth argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method that has arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents a static (Shared in Visual Basic) method to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.-or-One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method by calling the appropriate factory method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified static (Shared in Visual Basic) method, and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property set to the specified arguments.</returns>
      <param name="type">The <see cref="T:System.Type" /> that specifies the type that contains the specified static (Shared in Visual Basic) method.</param>
      <param name="methodName">The name of the method.</param>
      <param name="typeArguments">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="methodName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.-or-More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.</summary>
      <returns>True if the node can be reduced, otherwise false.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with a reference to the caught <see cref="T:System.Exception" /> object for use in the handler body.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter and a reference to the caught <see cref="T:System.Exception" /> object.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception" /> filter.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</param>
      <param name="body">The body of the catch statement.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter but no reference to the caught <see cref="T:System.Exception" /> object.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception" /> filter.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearing a sequence point.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearning a sequence point.</returns>
      <param name="document">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation, given a conversion function.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.-or-<paramref name="conversion" /> is not null and <paramref name="conversion" />.Type is a delegate type that does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> represents a type that is not assignable to the parameter type of the delegate type <paramref name="conversion" />.Type.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="right" /> is not equal to the return type of the delegate type <paramref name="conversion" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</returns>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" /> or <paramref name="ifTrue" /> or <paramref name="ifFalse" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type is not <see cref="T:System.Boolean" />.-or-<paramref name="ifTrue" />.Type is not equal to <paramref name="ifFalse" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</returns>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</returns>
      <param name="value">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <param name="value">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not null and <paramref name="type" /> is not assignable from the dynamic type of <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement with the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation for which the implementing method is specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.-or-<paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.-or-The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.-or-<paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method that matches the <paramref name="method" /> description was found.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.-or-<paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.-or-The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.-or-<paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method that matches the <paramref name="method" /> description was found.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> with the specified span.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</returns>
      <param name="document">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</param>
      <param name="startLine">The start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Must be greater than 0.</param>
      <param name="startColumn">The start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Must be greater than 0.</param>
      <param name="endLine">The end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Must be greater or equal than the start line.</param>
      <param name="endColumn">The end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</returns>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an <see cref="T:System.Collections.Generic.IEnumerable`1" /> as the second argument.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</returns>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> or <paramref name="arguments" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The method that <paramref name="addMethod" /> represents is not named "Add" (case insensitive).-or-The method that <paramref name="addMethod" /> represents is not an instance method.-or-<paramref name="arguments" /> does not contain the same number of elements as the number of parameters for the method that <paramref name="addMethod" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an array of values as the second argument.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</returns>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> or <paramref name="arguments" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The method that addMethod represents is not named "Add" (case insensitive).-or-The method that addMethod represents is not an instance method.-or-arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>Creates an empty expression that has <see cref="T:System.Void" /> type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR operation, using op_ExclusiveOr for user-defined types.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The XOR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR operation, using op_ExclusiveOr for user-defined types. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the XOR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to. For static (Shared in Visual Basic), <paramref name="expression" /> must be null.</param>
      <param name="field">The <see cref="T:System.Reflection.FieldInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> is null.-or-The field represented by <paramref name="field" /> is not static (Shared in Visual Basic) and <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the field represented by <paramref name="field" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field given the name of the field.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.FieldInfo" /> that represents the field denoted by <paramref name="fieldName" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a field named <paramref name="fieldName" />. This can be null for static fields.</param>
      <param name="fieldName">The name of a field to be accessed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="fieldName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">No field named <paramref name="fieldName" /> is defined in <paramref name="expression" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
      <param name="expression">The containing object of the field. This can be null for static fields.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the field.</param>
      <param name="fieldName">The field to be accessed.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>Creates a <see cref="T:System.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</summary>
      <returns>The type of a System.Action delegate that has the specified type arguments.</returns>
      <param name="typeArgs">An array of <see cref="T:System.Type" /> objects that specify the type arguments for the System.Action delegate type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> contains more than four elements.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>Gets a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func or System.Action delegate type that has specific type arguments.</summary>
      <returns>The delegate type.</returns>
      <param name="typeArgs">The type arguments of the delegate.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</summary>
      <returns>The type of a System.Func delegate that has the specified type arguments.</returns>
      <param name="typeArgs">An array of one to five <see cref="T:System.Type" /> objects that specify the type arguments for the System.Func delegate type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> contains less than one or more than five elements.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with an if statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, properties set to the specified values. The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property is set to default expression and the type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</returns>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with if and else statements.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values. The type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</returns>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression by 1.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>Returns whether the expression evaluates to false.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns whether the expression evaluates to false.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>Returns whether the expression evaluates to true.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns whether the expression evaluates to true.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and no name.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label without a default value.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LabelExpression" /> without a default value.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label with the given default value.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LabelExpression" /> with the given default value.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</param>
      <param name="defaultValue">The value of this <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and the given name.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
      <param name="name">The name of the label.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
      <param name="type">The type of value that is passed when jumping to the label.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type and name.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
      <param name="type">The type of value that is passed when jumping to the label.</param>
      <param name="name">The name of the label.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> property equal to <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> and the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> and <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> property equal to <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> and the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> and <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <typeparam name="TDelegate">A delegate type.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is null.-or-One or more elements in <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> is not a delegate type.-or-<paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.-or-<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is null.-or-One or more elements of <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> contains more than sixteen elements.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <typeparam name="TDelegate">A delegate type.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is null.-or-One or more elements in <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> is not a delegate type.-or-<paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.-or-<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> property equal to <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> and the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> and <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> property equal to.</param>
      <param name="name">The name of the lambda. Used for generating debugging info.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> property equal to <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> and the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> and <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> property equal to.</param>
      <param name="name">The name of the lambda. Used for generating debugging information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</summary>
      <returns>An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> or <paramref name="body" /> is null.-or-One or more elements in <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> does not represent a delegate type.-or-<paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.-or-<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</summary>
      <returns>An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> or <paramref name="body" /> is null.-or-One or more elements in <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> does not represent a delegate type.-or-<paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.-or-<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to. </param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression. </param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection. </param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than or equal" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</returns>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is null. -or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</returns>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is null. -or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> based on a specified property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</returns>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is null. -or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object based on a specified property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</returns>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is null. -or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.-or-The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.-or-The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.-or-More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.-or-The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.-or-The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.-or-More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.-or-<paramref name="addMethod" /> is not null and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.-or-<paramref name="addMethod" /> is not null and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> is null and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that takes one argument, that adds an element to a collection.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.-or-<paramref name="addMethod" /> is not null and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.-or-<paramref name="addMethod" /> is not null and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> is null and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">The body of the loop.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body and break target.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">The body of the loop.</param>
      <param name="break">The break target used by the loop body.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">The body of the loop.</param>
      <param name="break">The break target used by the loop body.</param>
      <param name="continue">The continue target used by the loop body.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left and right operands, by calling an appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand and implementing method, by calling the appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function. This parameter is used only if <paramref name="binaryType" /> is <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> or compound assignment..</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with the specified elements.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</param>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception" /> filter.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and one argument.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and two arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and three arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and four arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a jump of the specified <see cref="T:System.Linq.Expressions.GotoExpressionKind" />. The value passed to the label upon jumping can also be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to <paramref name="kind" />, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="kind">The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> that represents accessing an indexed property in an object.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">The object to which the property belongs. It should be null if the property is static (shared in Visual Basic).</param>
      <param name="indexer">An <see cref="T:System.Linq.Expressions.Expression" /> representing the property to index.</param>
      <param name="arguments">An IEnumerable&lt;Expression&gt; (IEnumerable (Of Expression) in Visual Basic) that contains the arguments that will be used to index the property.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.MemberExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the object that the member belongs to. This can be null for static members.</param>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> that describes the field or property to be accessed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="member" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with the specified elements.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="type">The result type of the try expression. If null, bodh and all handlers must have identical type.</param>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block. Pass null if the try block has no finally block associated with it.</param>
      <param name="fault">The body of the try block. Pass null if the try block has no fault block associated with it.</param>
      <param name="handlers">A collection of <see cref="T:System.Linq.Expressions.CatchBlock" />s representing the catch statements to be associated with the try block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand, by calling the appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="unaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</param>
      <param name="operand">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</param>
      <param name="type">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass null if not applicable).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> does not correspond to a unary expression node.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand and implementing method, by calling the appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="unaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</param>
      <param name="operand">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</param>
      <param name="type">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass null if not applicable).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> does not correspond to a unary expression node.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Represents an expression that creates a new object and initializes a property of the object.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary minus operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary minus operator is not defined for <paramref name="expression" />.Type.-or-<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary minus operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary minus operator is not defined for <paramref name="expression" />.Type.-or-<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor that takes no arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the specified value.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The constructor that <paramref name="constructor" /> represents has at least one parameter.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.-or-An element of <paramref name="arguments" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <param name="members">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.-or-An element of <paramref name="arguments" /> is null.-or-An element of <paramref name="members" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.-or-The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.-or-An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <param name="members">An array of <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.-or-An element of <paramref name="arguments" /> is null.-or-An element of <paramref name="members" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.-or-The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.-or-An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.-or-An element of <paramref name="arguments" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="arguments" /> does match the number of parameters for the constructor that <paramref name="constructor" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the parameterless constructor of the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the <see cref="T:System.Reflection.ConstructorInfo" /> that represents the constructor without parameters for the specified type.</returns>
      <param name="type">A <see cref="T:System.Type" /> that has a constructor that takes no arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The type that <paramref name="type" /> represents does not have a constructor without parameters.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="bounds">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="bounds" /> is null.-or-An element of <paramref name="bounds" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="bounds">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="bounds" /> is null.-or-An element of <paramref name="bounds" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="initializers" /> is null.-or-An element of <paramref name="initializers" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type that <paramref name="type" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="initializers" /> is null.-or-An element of <paramref name="initializers" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type <paramref name="type" />.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>Gets the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>One of the <see cref="T:System.Linq.Expressions.ExpressionType" /> values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary not operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary not operator is not defined for <paramref name="expression" />.Type.-or-<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>Returns the expression representing the ones complement.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns the expression representing the ones complement.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional OR operation that evaluates the second operand only if the first operand evaluates to false.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional OR operation that evaluates the second operand only if the first operand evaluates to false.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="method" /> is null and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</returns>
      <param name="type">The type of the parameter or variable.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> and <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> properties set to the specified values.</returns>
      <param name="type">The type of the parameter or variable.</param>
      <param name="name">The name of the parameter or variable, used for debugging or printing purpose only.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="method" /> is null and <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property by using a property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to. This can be null for static properties.</param>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is null.-or-The method that <paramref name="propertyAccessor" /> represents is not static (Shared in Visual Basic) and <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor" />.-or-The method that <paramref name="propertyAccessor" /> represents is not a property accessor method.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to. This can be null for static properties.</param>
      <param name="property">The <see cref="T:System.Reflection.PropertyInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.-or-The property that <paramref name="property" /> represents is not static (Shared in Visual Basic) and <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the property that <paramref name="property" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="indexer">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="indexer">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property denoted by <paramref name="propertyName" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property named <paramref name="propertyName" />. This can be null for static properties.</param>
      <param name="propertyName">The name of a property to be accessed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">No property named <paramref name="propertyName" /> is defined in <paramref name="expression" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="propertyName">The name of the indexer.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> accessing a property.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
      <param name="expression">The containing object of the property. This can be null for static properties.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the property.</param>
      <param name="propertyName">The property to be accessed.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property or field.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> that represents the property or field denoted by <paramref name="propertyOrFieldName" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property or field named <paramref name="propertyOrFieldName" />. This can be null for static members.</param>
      <param name="propertyOrFieldName">The name of a property or field to be accessed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="propertyOrFieldName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">No property or field named <paramref name="propertyOrFieldName" /> is defined in <paramref name="expression" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference equality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference inequality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception with a given type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</returns>
      <param name="type">The new <see cref="T:System.Type" /> of the expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</returns>
      <param name="variables">A collection of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</returns>
      <param name="variables">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement without a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="type">The result type of the switch.</param>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case..</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="type">The result type of the switch.</param>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
      <param name="body">The body of the case.</param>
      <param name="testValues">The test values of the case.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> for use in a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
      <param name="body">The body of the case.</param>
      <param name="testValues">The test values of the case.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> property set to the specified value.</returns>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> properties set to the specified value.</returns>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
      <param name="language">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> properties set to the specified value.</returns>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
      <param name="language">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</param>
      <param name="languageVendor">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> properties set to the specified value.</returns>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
      <param name="language">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</param>
      <param name="languageVendor">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</param>
      <param name="documentType">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</returns>
      <param name="value">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception with a given type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</returns>
      <param name="value">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">The new <see cref="T:System.Type" /> of the expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and neither a fault nor finally block.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">The body of the try block.</param>
      <param name="handlers">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and a finally block.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block.</param>
      <param name="handlers">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a fault block and no catch statements.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">The body of the try block.</param>
      <param name="fault">The body of the fault block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a finally block and no catch statements.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</summary>
      <returns>true if generic System.Action delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</returns>
      <param name="typeArgs">An array of Type objects that specify the type arguments for the System.Action delegate type.</param>
      <param name="actionType">When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</summary>
      <returns>true if generic System.Func delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</returns>
      <param name="typeArgs">An array of Type objects that specify the type arguments for the System.Func delegate type.</param>
      <param name="funcType">When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</param>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="T:System.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit reference or boxing conversion where null is supplied if the conversion fails.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> that compares run-time type identity.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> and for which the <see cref="T:System.Linq.Expressions.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="T:System.Linq.Expressions.Expression" /> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> and for which the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary plus operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary plus operator is not defined for <paramref name="expression" />.Type.-or-<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit unboxing.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to unbox.</param>
      <param name="type">The new <see cref="T:System.Type" /> of the expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type</returns>
      <param name="type">The type of the parameter or variable.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</returns>
      <param name="type">The type of the parameter or variable.</param>
      <param name="name">The name of the parameter or variable. This name is used for debugging or printing purpose only.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.</summary>
      <returns>The expression being visited, or an expression which should replace it in the tree.</returns>
      <param name="visitor">An instance of <see cref="T:System.Func`2" />.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>Represents a strongly typed lambda expression as a data structure in the form of an expression tree. This class cannot be inherited.</summary>
      <typeparam name="TDelegate">The type of the delegate that the <see cref="T:System.Linq.Expressions.Expression`1" /> represents.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</summary>
      <returns>A delegate of type <paramref name="TDelegate" /> that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <returns>A delegate containing the compiled version of the lambda.</returns>
      <param name="debugInfoGenerator">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="body">The <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property of the result.</param>
      <param name="parameters">The <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> property of the result. </param>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>Describes the node types for the nodes of an expression tree.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>An addition operation, such as a + b, without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>An addition operation, such as (a + b), with overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>A bitwise or logical AND operation, such as (a &amp; b) in C# and (a And b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>A conditional AND operation that evaluates the second operand only if the first operand evaluates to true. It corresponds to (a &amp;&amp; b) in C# and (a AndAlso b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>An operation that obtains the length of a one-dimensional array, such as array.Length.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>An indexing operation in a one-dimensional array, such as array[index] in C# or array(index) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>A method call, such as in the obj.sampleMethod() expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>A node that represents a null coalescing operation, such as (a ?? b) in C# or If(a, b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>A conditional operation, such as a &gt; b ? a : b in C# or If(a &gt; b, a, b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>A constant value.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>A cast or conversion operation, such as (SampleType)obj in C#or CType(obj, SampleType) in Visual Basic. For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>A cast or conversion operation, such as (SampleType)obj in C#or CType(obj, SampleType) in Visual Basic. For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>A division operation, such as (a / b), for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>A node that represents an equality comparison, such as (a == b) in C# or (a = b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>A bitwise or logical XOR operation, such as (a ^ b) in C# or (a Xor b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>A "greater than" comparison, such as (a &gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>A "greater than or equal to" comparison, such as (a &gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>An operation that invokes a delegate or lambda expression, such as sampleDelegate.Invoke().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>A lambda expression, such as a =&gt; a + a in C# or Function(a) a + a in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>A bitwise left-shift operation, such as (a &lt;&lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>A "less than" comparison, such as (a &lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>A "less than or equal to" comparison, such as (a &lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>An operation that creates a new <see cref="T:System.Collections.IEnumerable" /> object and initializes it from a list of elements, such as new List&lt;SampleType&gt;(){ a, b, c } in C# or Dim sampleList = { a, b, c } in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>An operation that reads from a field or property, such as obj.SampleProperty.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>An operation that creates a new object and initializes one or more of its members, such as new Point { X = 1, Y = 2 } in C# or New Point With {.X = 1, .Y = 2} in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>An arithmetic remainder operation, such as (a % b) in C# or (a Mod b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>A multiplication operation, such as (a * b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>An multiplication operation, such as (a * b), that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>An arithmetic negation operation, such as (-a). The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>A unary plus operation, such as (+a). The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>An arithmetic negation operation, such as (-a), that has overflow checking. The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>An operation that calls a constructor to create a new object, such as new SampleType().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>An operation that creates a new one-dimensional array and initializes it from a list of elements, such as new SampleType[]{a, b, c} in C# or New SampleType(){a, b, c} in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>An operation that creates a new array, in which the bounds for each dimension are specified, such as new SampleType[dim1, dim2] in C# or New SampleType(dim1, dim2) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>A bitwise complement or logical negation operation. In C#, it is equivalent to (~a) for integral types and to (!a) for Boolean values. In Visual Basic, it is equivalent to (Not a). The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>An inequality comparison, such as (a != b) in C# or (a &lt;&gt; b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>A bitwise or logical OR operation, such as (a | b) in C# or (a Or b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>A short-circuiting conditional OR operation, such as (a || b) in C# or (a OrElse b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>A reference to a parameter or variable that is defined in the context of the expression. For more information, see <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>A mathematical operation that raises a number to a power, such as (a ^ b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>An expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />. A <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> node can contain references to parameters that are defined in the context of the expression it represents.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>A bitwise right-shift operation, such as (a &gt;&gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>A subtraction operation, such as (a - b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>An arithmetic subtraction operation, such as (a - b), that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>An explicit reference or boxing conversion in which null is supplied if the conversion fails, such as (obj as SampleType) in C# or TryCast(obj, SampleType) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>A type test, such as obj is SampleType in C# or TypeOf obj is SampleType in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>An assignment operation, such as (a = b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>A block of expressions.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>Debugging information.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>A unary decrement operation, such as (a - 1) in C# and Visual Basic. The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>A dynamic operation.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>A default value.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>An extension expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>A "go to" expression, such as goto Label in C# or GoTo Label in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>A unary increment operation, such as (a + 1) in C# and Visual Basic. The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>An index operation or an operation that accesses a property that takes arguments. </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>A label.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>A list of run-time variables. For more information, see <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>A loop, such as for or while.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>A switch operation, such as switch in C# or Select Case in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>An operation that throws an exception, such as throw new Exception().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>A try-catch expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>An unbox value type operation, such as unbox and unbox.any instructions in MSIL. </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>An addition compound assignment operation, such as (a += b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>A bitwise or logical AND compound assignment operation, such as (a &amp;= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>An division compound assignment operation, such as (a /= b), for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>A bitwise or logical XOR compound assignment operation, such as (a ^= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>A bitwise left-shift compound assignment, such as (a &lt;&lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>An arithmetic remainder compound assignment operation, such as (a %= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>A multiplication compound assignment operation, such as (a *= b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>A bitwise or logical OR compound assignment, such as (a |= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>A compound assignment operation that raises a number to a power, such as (a ^= b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>A bitwise right-shift compound assignment operation, such as (a &gt;&gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>A subtraction compound assignment operation, such as (a -= b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>An addition compound assignment operation, such as (a += b), with overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>A multiplication compound assignment operation, such as (a *= b), that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>A subtraction compound assignment operation, such as (a -= b), that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>A unary prefix increment, such as (++a). The object a should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>A unary prefix decrement, such as (--a). The object a should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>A unary postfix increment, such as (a++). The object a should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>A unary postfix decrement, such as (a--). The object a should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>An exact type test.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>A ones complement operation, such as (~a) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>A true condition value.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>A false condition value.</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>Represents a visitor or rewriter for expression trees.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Linq.Expressions.ExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>Dispatches the list of expressions to one of the more specialized visit methods in this class.</summary>
      <returns>The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.</returns>
      <param name="nodes">The expressions to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>Visits all nodes in the collection using a specified element visitor.</summary>
      <returns>The modified node list, if any of the elements were modified; otherwise, returns the original node list.</returns>
      <param name="nodes">The nodes to visit.</param>
      <param name="elementVisitor">A delegate that visits a single element, optionally replacing it with a new element.</param>
      <typeparam name="T">The type of the nodes.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>Dispatches the expression to one of the more specialized visit methods in this class.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>Visits an expression, casting the result back to the original expression type.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="nodes">The expression to visit.</param>
      <param name="callerName">The name of the calling method; used to report to report a better error message.</param>
      <typeparam name="T">The type of the expression.</typeparam>
      <exception cref="T:System.InvalidOperationException">The visit method for this node returned a different type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>Visits an expression, casting the result back to the original expression type.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
      <param name="callerName">The name of the calling method; used to report to report a better error message.</param>
      <typeparam name="T">The type of the expression.</typeparam>
      <exception cref="T:System.InvalidOperationException">The visit method for this node returned a different type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.BlockExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ConditionalExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.ConstantExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.DefaultExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.DynamicExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>Visits the children of the extension expression.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.IndexExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.InvocationExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.LabelExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.LabelTarget" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.Expression`1" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
      <typeparam name="T">The type of the delegate.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ListInitExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.LoopExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberAssignment" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberListBinding" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.TryExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>Represents an unconditional jump. This includes return statements, break and continue statements, and other jumps.</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>The kind of the "go to" expression. Serves information purposes only.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> object representing the kind of the "go to" expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>The target label where this node jumps to.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> object representing the target label for this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.GotoExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="target">The <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property of the result. </param>
      <param name="value">The <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> property of the result. </param>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>The value passed to the target, or null if the target is of type System.Void.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the value passed to the target or null.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>Specifies what kind of jump this <see cref="T:System.Linq.Expressions.GotoExpression" /> represents.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a jump to some location.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a return statement.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a break statement.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a continue statement.</summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>Represents indexing a property or array.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>Gets the arguments that will be used to index the property or array.</summary>
      <returns>The read-only collection containing the arguments that will be used to index the property or array.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>Gets the <see cref="T:System.Reflection.PropertyInfo" /> for the property if the expression represents an indexed property, returns null otherwise.</summary>
      <returns>The <see cref="T:System.Reflection.PropertyInfo" /> for the property if the expression represents an indexed property, otherwise null.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>An object to index.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the object to index.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.IndexExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="object">The <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>Represents an expression that applies a delegate or lambda expression to a list of argument expressions.</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>Gets the arguments that the delegate or lambda expression is applied to.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent the arguments that the delegate is applied to.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>Gets the delegate or lambda expression to be applied.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate to be applied.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.InvocationExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expression">The <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>Represents a label, which can be put in any <see cref="T:System.Linq.Expressions.Expression" /> context. If it is jumped to, it will get the value provided by the corresponding <see cref="T:System.Linq.Expressions.GotoExpression" />. Otherwise, it receives the value in <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />. If the <see cref="T:System.Type" /> equals System.Void, no value should be provided.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>The value of the <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow (for example, is not jumped to).</summary>
      <returns>The Expression object representing the value of the <see cref="T:System.Linq.Expressions.LabelExpression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this label is associated with.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this label is associated with.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LabelExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="target">The <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> property of the result.</param>
      <param name="defaultValue">The <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> property of the result</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>Used to represent the target of a <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>Gets the name of the label.</summary>
      <returns>The name of the label.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>The type of value that is passed when jumping to the label (or <see cref="T:System.Void" /> if no value should be passed).</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of the value that is passed when jumping to the label or <see cref="T:System.Void" /> if no value should be passed</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>Describes a lambda expression. This captures a block of code that is similar to a .NET method body.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>Gets the body of the lambda expression.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the body of the lambda expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <returns>A <see cref="T:System.Delegate" /> that contains the compiled version of the lambda expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <returns>A delegate containing the compiled version of the lambda.</returns>
      <param name="debugInfoGenerator">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</param>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Compiles the lambda into a method definition.</summary>
      <param name="method">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> which will be used to hold the lambda's IL.</param>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Compiles the lambda into a method definition and custom debug information.</summary>
      <param name="method">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> which will be used to hold the lambda's IL.</param>
      <param name="debugInfoGenerator">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</param>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>Gets the name of the lambda expression.</summary>
      <returns>The name of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>Gets the parameters of the lambda expression.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects that represent the parameters of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>Gets the return type of the lambda expression.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>Gets the value that indicates if the lambda expression will be compiled with the tail call optimization.</summary>
      <returns>True if the lambda expression will be compiled with the tail call optimization, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LambdaExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>Represents a constructor call that has a collection initializer.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if the node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>Gets the element initializers that are used to initialize a collection.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ElementInit" /> objects which represent the elements that are used to initialize the collection.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>Gets the expression that contains a call to the constructor of a collection type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that represents the call to the constructor of a collection type.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>Reduces the binary expression node to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ListInitExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="newExpression">The <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property of the result.</param>
      <param name="initializers">The <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>Represents an infinite loop. It can be exited with "break".</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> that is the body of the loop.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that is the body of the loop.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>Gets the <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a break statement target.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a break statement target.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>Gets the <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a continue statement target.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a continue statement target.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LoopExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="breakLabel">The <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> property of the result.</param>
      <param name="continueLabel">The <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>Represents assignment operation for a field or property of an object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>Gets the expression to assign to the field or property.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that represents the value to assign to the field or property.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expression">The <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>Provides the base class from which the classes that represent bindings that are used to initialize members of a newly created object derive.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.Expressions.MemberBinding" /> class.</summary>
      <param name="type">The <see cref="T:System.Linq.Expressions.MemberBindingType" /> that discriminates the type of binding that is represented.</param>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to be initialized.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>Gets the type of binding that is represented.</summary>
      <returns>One of the <see cref="T:System.Linq.Expressions.MemberBindingType" /> values.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>Gets the field or property to be initialized.</summary>
      <returns>The <see cref="T:System.Reflection.MemberInfo" /> that represents the field or property to be initialized.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>Returns a textual representation of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>Describes the binding types that are used in <see cref="T:System.Linq.Expressions.MemberInitExpression" /> objects.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>A binding that represents initializing a member with the value of an expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>A binding that represents recursively initializing members of a member.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>A binding that represents initializing a member of type <see cref="T:System.Collections.IList" /> or <see cref="T:System.Collections.Generic.ICollection`1" /> from a list of elements.</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>Represents accessing a field or property.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>Gets the containing object of the field or property.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the containing object of the field or property.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>Gets the field or property to be accessed.</summary>
      <returns>The <see cref="T:System.Reflection.MemberInfo" /> that represents the field or property to be accessed.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>Returns the node type of this <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expression">The <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>Represents calling a constructor and initializing one or more members of the new object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>Gets the bindings that describe how to initialize the members of the newly created object.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects which describe how to initialize the members.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if the node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>Gets the expression that represents the constructor call.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that represents the constructor call.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>Reduces the <see cref="T:System.Linq.Expressions.MemberInitExpression" /> to a simpler expression. </summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="newExpression">The <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property of the result.</param>
      <param name="bindings">The <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>Represents initializing the elements of a collection member of a newly created object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>Gets the element initializers for initializing a collection member of a newly created object.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection member with.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="initializers">The <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>Represents initializing members of a member of a newly created object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>Gets the bindings that describe how to initialize the members of a member.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects that describe how to initialize the members of the member.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="bindings">The <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>Represents a call to either static or an instance method.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>Gets a collection of expressions that represent arguments of the called method.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent the arguments to the called method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> for the method to be called.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that represents the called method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> that represents the instance for instance method calls or null for static method calls.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the receiving object of the method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="object">The <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>Represents creating a new array and possibly initializing the elements of the new array.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>Gets the bounds of the array if the value of the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, or the values to initialize the elements of the new array if the value of the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent either the bounds of the array or the initialization values.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expressions">The <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>Represents a constructor call.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>Gets the arguments to the constructor.</summary>
      <returns>A collection of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the constructor.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>Gets the called constructor.</summary>
      <returns>The <see cref="T:System.Reflection.ConstructorInfo" /> that represents the called constructor.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>Gets the members that can retrieve the values of the fields that were initialized with constructor arguments.</summary>
      <returns>A collection of <see cref="T:System.Reflection.MemberInfo" /> objects that represent the members that can retrieve the values of the fields that were initialized with constructor arguments.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.NewExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>Represents a named parameter expression.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>Indicates that this ParameterExpression is to be treated as a ByRef parameter.</summary>
      <returns>True if this ParameterExpression is a ByRef parameter, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>Gets the name of the parameter or variable.</summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the parameter.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ParameterExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>An expression that provides runtime read/write permission for variables.</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="variables">The <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property of the result.</param>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>The variables or parameters to which to provide runtime access.</summary>
      <returns>The read-only collection containing parameters that will be provided the runtime access.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>Represents one case of a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>Gets the body of this case.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object that represents the body of the case block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>Gets the values of this case. This case is selected for execution when the <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> matches any of these values.</summary>
      <returns>The read-only collection of the values for this case block.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="testValues">The <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>Represents a control expression that handles multiple selections by passing control to <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>Gets the collection of <see cref="T:System.Linq.Expressions.SwitchCase" /> objects for the switch.</summary>
      <returns>The collection of <see cref="T:System.Linq.Expressions.SwitchCase" /> objects.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>Gets the equality comparison method, if any.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> object representing the equality comparison method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>Gets the test for the switch.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the test for the switch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>Gets the test for the switch.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the test for the switch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.SwitchExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="switchValue">The <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> property of the result.</param>
      <param name="cases">The <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> property of the result.</param>
      <param name="defaultBody">The <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>Stores information necessary to emit debugging symbol information for a source file, in particular the file name and unique language identifier.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>Returns the document type's unique identifier, if any. Defaults to the GUID for a text file.</summary>
      <returns>The document type's unique identifier.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>The source file name.</summary>
      <returns>The string representing the source file name.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>Returns the language's unique identifier, if any.</summary>
      <returns>The language's unique identifier</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>Returns the language vendor's unique identifier, if any.</summary>
      <returns>The language vendor's unique identifier.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>Represents a try/catch/finally/fault block.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> representing the body of the try block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the body of the try block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> representing the fault block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the fault block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> representing the finally block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the finally block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>Gets the collection of <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions associated with the try block.</summary>
      <returns>The collection of <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions associated with the try block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.TryExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="body">The <see cref="P:System.Linq.Expressions.TryExpression.Body" /> property of the result.</param>
      <param name="handlers">The <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> property of the result.</param>
      <param name="finally">The <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> property of the result.</param>
      <param name="fault">The <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>Represents an operation between an expression and a type.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>Gets the expression operand of a type test operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression operand of a type test operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>Gets the type operand of a type test operation.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type operand of a type test operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expression">The <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>Represents an expression that has a unary operator.</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if a node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator.</summary>
      <returns>true if the node represents a lifted call; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.</summary>
      <returns>true if the operator's return type is lifted to a nullable type; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>Gets the implementing method for the unary operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>Gets the operand of the unary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand of the unary operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>Reduces the expression node to a simpler expression. </summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.UnaryExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="operand">The <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property of the result.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>A dynamic call site base class. This type is used as a parameter type to the dynamic site targets.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>Class responsible for binding dynamic operations on the dynamic site.</summary>
      <returns>The <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> object responsible for binding dynamic operations.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Creates a call site with the given delegate type and binder.</summary>
      <returns>The new call site.</returns>
      <param name="delegateType">The call site delegate type.</param>
      <param name="binder">The call site binder.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>Dynamic site type.</summary>
      <typeparam name="T">The delegate type.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Creates an instance of the dynamic call site, initialized with the binder responsible for the runtime binding of the dynamic operations at this call site.</summary>
      <returns>The new instance of dynamic call site.</returns>
      <param name="binder">The binder responsible for the runtime binding of the dynamic operations at this call site.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>The Level 0 cache - a delegate specialized based on the site history.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>The update delegate. Called when the dynamic site experiences cache miss.</summary>
      <returns>The update delegate.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>Class responsible for runtime binding of the dynamic operations on the dynamic call site.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Performs the runtime binding of the dynamic operation on a set of arguments.</summary>
      <returns>An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new <see cref="T:System.Linq.Expressions.Expression" /> for the new argument types.</returns>
      <param name="args">An array of arguments to the dynamic operation.</param>
      <param name="parameters">The array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> instances that represent the parameters of the call site in the binding process.</param>
      <param name="returnLabel">A LabelTarget used to return the result of the dynamic binding.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Provides low-level runtime binding support. Classes can override this and provide a direct delegate for the implementation of rule. This can enable saving rules to disk, having specialized rules available at runtime, or providing a different caching policy.</summary>
      <returns>A new delegate which replaces the CallSite Target.</returns>
      <param name="site">The CallSite the bind is being performed for.</param>
      <param name="args">The arguments for the binder.</param>
      <typeparam name="T">The target type of the CallSite.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>Adds a target to the cache of known targets. The cached targets will be scanned before calling BindDelegate to produce the new rule.</summary>
      <param name="target">The target delegate to be added to the cache.</param>
      <typeparam name="T">The type of target being added.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>Gets a label that can be used to cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the "version" of a dynamic object has changed.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> object representing a label that can be used to trigger the binding update.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>Class that contains helper methods for DLR CallSites.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>Checks if a <see cref="T:System.Reflection.MethodBase" /> is internally used by DLR and should not be displayed on the language code's stack.</summary>
      <returns>True if the input <see cref="T:System.Reflection.MethodBase" /> is internally used by DLR and should not be displayed on the language code's stack. Otherwise, false.</returns>
      <param name="mb">The input <see cref="T:System.Reflection.MethodBase" /></param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteOps">
      <summary>Creates and caches binding rules.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.AddRule``1(System.Runtime.CompilerServices.CallSite{``0},``0)">
      <summary>Adds a rule to the cache maintained on the dynamic call site.</summary>
      <param name="site">An instance of the dynamic call site.</param>
      <param name="rule">An instance of the call site rule.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.Bind``1(System.Runtime.CompilerServices.CallSiteBinder,System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Updates the call site target with a new rule based on the arguments.</summary>
      <returns>The new call site target.</returns>
      <param name="binder">The call site binder.</param>
      <param name="site">An instance of the dynamic call site.</param>
      <param name="args">Arguments to the call site.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.ClearMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>Clears the match flag on the matchmaker call site.</summary>
      <param name="site">An instance of the dynamic call site.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>Creates an instance of a dynamic call site used for cache lookup.</summary>
      <returns>The new call site.</returns>
      <param name="site">An instance of the dynamic call site.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetCachedRules``1(System.Runtime.CompilerServices.RuleCache{``0})">
      <summary>Searches the dynamic rule cache for rules applicable to the dynamic operation.</summary>
      <returns>The collection of applicable rules.</returns>
      <param name="cache">The cache.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />. </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>Checks whether the executed rule matched</summary>
      <returns>true if rule matched, false otherwise.</returns>
      <param name="site">An instance of the dynamic call site.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRuleCache``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>Retrieves binding rule cache.</summary>
      <returns>The cache.</returns>
      <param name="site">An instance of the dynamic call site.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRules``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>Gets the dynamic binding rules from the call site.</summary>
      <returns>An array of dynamic binding rules.</returns>
      <param name="site">An instance of the dynamic call site.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.MoveRule``1(System.Runtime.CompilerServices.RuleCache{``0},``0,System.Int32)">
      <summary>Moves the binding rule within the cache.</summary>
      <param name="cache">The call site rule cache.</param>
      <param name="rule">An instance of the call site rule.</param>
      <param name="i">An index of the call site rule.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />. </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.SetNotMatched(System.Runtime.CompilerServices.CallSite)">
      <summary>Checks if a dynamic site requires an update.</summary>
      <returns>true if rule does not need updating, false otherwise.</returns>
      <param name="site">An instance of the dynamic call site.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.UpdateRules``1(System.Runtime.CompilerServices.CallSite{``0},System.Int32)">
      <summary>Updates rules in the cache.</summary>
      <param name="this">An instance of the dynamic call site.</param>
      <param name="matched">The matched rule index.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.Closure">
      <summary>Represents the runtime state of a dynamically generated method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Closure.#ctor(System.Object[],System.Object[])">
      <summary>Creates an object to hold state of a dynamically generated method.</summary>
      <param name="constants">The constant values that are used by the method.</param>
      <param name="locals">The hoisted local variables from the parent context.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Constants">
      <summary>Represents the non-trivial constants and locally executable expressions that are referenced by a dynamically generated method.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Locals">
      <summary>Represents the hoisted local variables from the parent context.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>Generates debug information for lambda expressions in an expression tree.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>Creates a program database (PDB) symbol generator.</summary>
      <returns>A PDB symbol generator.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>Marks a sequence point in Microsoft intermediate language (MSIL) code.</summary>
      <param name="method">The lambda expression that is generated.</param>
      <param name="ilOffset">The offset within MSIL code at which to mark the sequence point.</param>
      <param name="sequencePoint">Debug information that corresponds to the sequence point.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>Indicates that the use of <see cref="T:System.Object" /> on a member is meant to be treated as a dynamically dispatched type.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> class.</summary>
      <param name="transformFlags">Specifies, in a prefix traversal of a type's construction, which <see cref="T:System.Object" /> occurrences are meant to be treated as a dynamically dispatched type.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>Specifies, in a prefix traversal of a type's construction, which <see cref="T:System.Object" /> occurrences are meant to be treated as a dynamically dispatched type.</summary>
      <returns>The list of <see cref="T:System.Object" /> occurrences that are meant to be treated as a dynamically dispatched type.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>Represents the runtime state of a dynamically generated method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>Creates a delegate that can be used to execute a dynamically generated method.</summary>
      <returns>A <see cref="T:System.Delegate" /> that can execute a dynamically generated method.</returns>
      <param name="indexLambda">The index of the object that stores information about associated lambda expression of the dynamic method.</param>
      <param name="locals">An array that contains the hoisted local variables from the parent context.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>Creates an array to store the hoisted local variables.</summary>
      <returns>An array to store hoisted local variables.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>Represents the non-trivial constants and locally executable expressions that are referenced by a dynamically generated method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>Frees a specified expression tree of external parameter references by replacing the parameter with its current value.</summary>
      <returns>An expression tree that does not contain external parameter references.</returns>
      <param name="expression">An expression tree to free of external parameter references.</param>
      <param name="locals">An array that contains the hoisted local variables.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>Represents the hoisted local variables from the parent context.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>Represents the execution scope of the calling delegate.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>Indicates that a method is an extension method, or that a class or assembly contains extension methods.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>Represents the values of run-time variables. </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>Gets a count of the run-time variables.</summary>
      <returns>The number of run-time variables.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>Gets the value of the run-time variable at the specified index.</summary>
      <returns>The value of the run-time variable.</returns>
      <param name="index">The zero-based index of the run-time variable whose value is to be returned.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>Defines a property for accessing the value that an object references.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>Gets or sets the value that an object references.</summary>
      <returns>The value that the object references.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>The builder for read only collection.</summary>
      <typeparam name="T">The type of the collection element.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>Constructs a ReadOnlyCollectionBuilder.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Constructs a ReadOnlyCollectionBuilder, copying contents of the given collection.</summary>
      <param name="collection">Collection to copy elements from.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>Constructs a ReadOnlyCollectionBuilder with a given initial capacity. The contents are empty but builder will have reserved room for the given number of elements before any reallocations are required.</summary>
      <param name="capacity">Initial capacity.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>Gets and sets the capacity of this ReadOnlyCollectionBuilder.</summary>
      <returns>The capacity of this ReadOnlyCollectionBuilder.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> contains a specific value</summary>
      <returns>true if item is found in the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; otherwise, false.</returns>
      <param name="item">the object to locate in the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> to an <see cref="T:System.Array" />, starting at particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>Returns number of elements in the ReadOnlyCollectionBuilder.</summary>
      <returns>The number of elements in the ReadOnlyCollectionBuilder.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>Returns the index of the first occurrence of a given value in the builder.</summary>
      <returns>The index of the first occurrence of an item.</returns>
      <param name="item">An item to search for.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <returns>true if item was successfully removed from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>Reverses the order of the elements in the entire <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>Reverses the order of the elements in the specified range.</summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, –1.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="value">The object to insert into the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>Copies the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> to a new array.</summary>
      <returns>An array containing copies of the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>Creates a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> containing all of the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, avoiding copying the elements to the new array if possible. Resets the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> after the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> has been created.</summary>
      <returns>A new instance of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>Represents a cache of runtime binding rules.</summary>
      <typeparam name="T">The delegate type.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeOps">
      <summary>Contains helper methods called from dynamically generated methods.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables">
      <summary>Creates an interface that can be used to modify closed over variables at runtime.</summary>
      <returns>An interface to access variables.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables(System.Object[],System.Int64[])">
      <summary>Creates an interface that can be used to modify closed over variables at runtime.</summary>
      <returns>An interface to access variables.</returns>
      <param name="data">The closure array.</param>
      <param name="indexes">An array of indicies into the closure array where variables are found.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoCheckVersion(System.Dynamic.ExpandoObject,System.Object)">
      <summary>Checks the version of the Expando object.</summary>
      <returns>Returns true if the version is equal; otherwise, false.</returns>
      <param name="expando">The Expando object.</param>
      <param name="version">The version to check.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoPromoteClass(System.Dynamic.ExpandoObject,System.Object,System.Object)">
      <summary>Promotes an Expando object from one class to a new class.</summary>
      <param name="expando">The Expando object.</param>
      <param name="oldClass">The old class of the Expando object.</param>
      <param name="newClass">The new class of the Expando object.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryDeleteValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean)">
      <summary>Deletes the value of an item in an expando object.</summary>
      <returns>true if the item was successfully removed; otherwise, false.</returns>
      <param name="expando">The expando object.</param>
      <param name="indexClass">The class of the expando object.</param>
      <param name="index">The index of the member.</param>
      <param name="name">The name of the member.</param>
      <param name="ignoreCase">true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryGetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean,System.Object@)">
      <summary>Gets the value of an item in an expando object.</summary>
      <returns>True if the member exists in the expando object, otherwise false.</returns>
      <param name="expando">The expando object.</param>
      <param name="indexClass">The class of the expando object.</param>
      <param name="index">The index of the member.</param>
      <param name="name">The name of the member.</param>
      <param name="ignoreCase">true if the name should be matched ignoring case; false otherwise.</param>
      <param name="value">The out parameter containing the value of the member.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTrySetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.Object,System.String,System.Boolean)">
      <summary>Sets the value of an item in an expando object.</summary>
      <returns>Returns the index for the set member.</returns>
      <param name="expando">The expando object.</param>
      <param name="indexClass">The class of the expando object.</param>
      <param name="index">The index of the member.</param>
      <param name="value">The value of the member.</param>
      <param name="name">The name of the member.</param>
      <param name="ignoreCase">true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.MergeRuntimeVariables(System.Runtime.CompilerServices.IRuntimeVariables,System.Runtime.CompilerServices.IRuntimeVariables,System.Int32[])">
      <summary>Combines two runtime variable lists and returns a new list.</summary>
      <returns>The merged runtime variables.</returns>
      <param name="first">The first list.</param>
      <param name="second">The second list.</param>
      <param name="indexes">The index array indicating which list to get variables from.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.Quote(System.Linq.Expressions.Expression,System.Object,System.Object[])">
      <summary>Quotes the provided expression tree.</summary>
      <returns>The quoted expression.</returns>
      <param name="expression">The expression to quote.</param>
      <param name="hoistedLocals">The hoisted local state provided by the compiler.</param>
      <param name="locals">The actual hoisted local values.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>Holds a reference to a value.</summary>
      <typeparam name="T">The type of the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>Initializes a new <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> object that can receive a value when used in a reference call.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> class by using the supplied value. </summary>
      <param name="value">A value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> will reference.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>Gets or sets the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</summary>
      <returns>The value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>Represents the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>Provides a managed implementation of the Advanced Encryption Standard (AES) symmetric algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AesManaged" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>Creates a symmetric decryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric decryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric decryptor object using the specified key and initialization vector (IV).</summary>
      <returns>A symmetric decryptor object.</returns>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The initialization vector<paramref name=" iv " />is an invalid size.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>Creates a symmetric encryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric encryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric encryptor object using the specified key and initialization vector (IV).</summary>
      <returns>A symmetric encryptor object.</returns>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The initialization vector<paramref name=" iv " />is an invalid size.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>Generates a random initialization vector (IV) to use for the symmetric algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>Generates a random key to use for the symmetric algorithm.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>Gets or sets the initialization vector (IV) to use for the symmetric algorithm.</summary>
      <returns>The initialization vector to use for the symmetric algorithm</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>Gets or sets the secret key used for the symmetric algorithm.</summary>
      <returns>The key for the symmetric algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>Gets or sets the size, in bits, of the secret key used for the symmetric algorithm. </summary>
      <returns>The size, in bits, of the key used by the symmetric algorithm.</returns>
    </member>
    <member name="T:System.Threading.LazyThreadSafetyMode">
      <summary>Specifies how a <see cref="T:System.Lazy`1" /> instance synchronizes access among multiple threads.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.None">
      <summary>The <see cref="T:System.Lazy`1" /> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined. Use this mode only when high performance is crucial and the <see cref="T:System.Lazy`1" /> instance is guaranteed never to be initialized from more than one thread. If the initialization method (or the default constructor, if there is no initialization method) throws an exception when the <see cref="T:System.Lazy`1" /> instance is initialized, the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property and the <see cref="M:System.Lazy`1.ToString" /> method. If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
      <summary>When multiple threads try to initialize a <see cref="T:System.Lazy`1" /> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method). The first thread to complete initialization sets the value of the <see cref="T:System.Lazy`1" /> instance. That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads. Any instances of <paramref name="T" /> that were created by the competing threads are discarded. If the initialization method throws an exception on any thread, the exception is propagated out of the <see cref="P:System.Lazy`1.Value" /> property or the <see cref="M:System.Lazy`1.ToString" /> method on that thread. The exception is not cached. The value of the <see cref="P:System.Lazy`1.IsValueCreated" /> property remains false, and subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again. If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, no exception is thrown.</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
      <summary>Locks are used to ensure that only a single thread can initialize a <see cref="T:System.Lazy`1" /> instance in a thread-safe manner. If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur. If the initialization method throws an exception when the <see cref="T:System.Lazy`1" /> is initialized, the exception is cached and thrown again on subsequent calls to the <see cref="P:System.Lazy`1.Value" /> property and the <see cref="M:System.Lazy`1.ToString" /> method. If the initialization method recursively accesses the <see cref="P:System.Lazy`1.Value" /> property of the <see cref="T:System.Lazy`1" /> instance, an <see cref="T:System.InvalidOperationException" /> is thrown. </summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\ReferenceAssemblies\System.ServiceModel.Xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Generic.KeyedByTypeCollection`1">
      <summary>Provides a collection whose items are types that serve as keys.</summary>
      <typeparam name="TItem">The item types contained in the collection that also serve as the keys for the collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> class. </summary>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.Find``1">
      <summary>Returns the first item in the collection of a specified type.</summary>
      <returns>The object of type <paramref name="T" /> if it is a reference type and the value of type <paramref name="T" /> if it is a value type. The default value of the type is returned if no object of type <paramref name="T" /> is contained in the collection; null if it is a reference type and 0 if it is a value type.</returns>
      <typeparam name="T">The type of item in the collection to find.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1">
      <summary>Returns a collection of objects of type <paramref name="T" /> that are contained in the <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <paramref name="T" /> that contains the objects of type <paramref name="T" /> from the original collection.</returns>
      <typeparam name="T">The type of item in the collection to find.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)">
      <summary>Gets the type of an item contained in the collection.</summary>
      <returns>The type of the specified <paramref name="item" /> in the collection.</returns>
      <param name="item">The item in the collection whose type is to be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an element into the collection at a specific location.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.Remove``1">
      <summary>Removes an object of a specified type from the collection.</summary>
      <returns>The object removed from the collection.</returns>
      <typeparam name="T">The type of item in the collection to remove.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1">
      <summary>Removes all of the elements of a specified type from the collection.</summary>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> that contains the objects of type <paramref name="T" /> from the original collection.</returns>
      <typeparam name="T">The type of item in the collection to remove.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)">
      <summary>Replaces the item at the specified index with a new object.</summary>
      <param name="index">The zero-based index of the <paramref name="item" /> to be replaced.</param>
      <param name="item">The object to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1">
      <summary>Provides a thread-safe, read-only collection that contains objects of a type specified by the generic parameter as elements.</summary>
      <typeparam name="T">The type of object contained as items in the thread-safe, read-only collection.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1" /> class from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe, read-only collection.</summary>
      <param name="syncRoot">The object used to synchronize access to the thread-safe, read-only collection.</param>
      <param name="list">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of elements used to initialize the thread-safe, read-only collection.</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)">
      <summary>Determines whether the collection contains an element with a specific value.</summary>
      <returns>true if the element <paramref name="value" /> is found in the collection; otherwise, false.</returns>
      <param name="value">The object to locate in the collection.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an object of the type contained in the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the collection to a specified array, starting at a particular index.</summary>
      <param name="array">The <see cref="T:System.Array" /> that is the destination for the elements copied from the collection.</param>
      <param name="index">The zero-based index in the array at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count">
      <summary>Gets the number of elements contained in the thread-safe, read-only collection.</summary>
      <returns>The number of elements contained in the thread-safe, read-only collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the synchronized, read-only collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for objects of the type stored in the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)">
      <summary>Returns the index of the first occurrence of a value in the collection.</summary>
      <returns>The zero-based index of the first occurrence of the <paramref name="value" /> in the collection.</returns>
      <param name="value">The element whose index is being retrieved.</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)">
      <summary>Gets an element from the thread-safe, read-only collection with a specified index.</summary>
      <returns>The element from read-only collection with the specified index.</returns>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items">
      <summary>Gets the list of elements contained in the thread-safe, read-only collection.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IList`1" /> of elements that are contained in the thread-safe, read-only collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="value">The element to be added to the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be added to a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <exception cref="T:System.NotSupportedException">Items cannot be cleared from a read-only collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Returns true.</summary>
      <returns>true.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The method returns false to indicate that the item was not removed from the read-only collection.</returns>
      <param name="value">The value to be removed from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be removed from a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> is to be inserted.</param>
      <param name="value">The object to insert into the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be inserted into a read-only collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Gets the element at the specified index.</summary>
      <returns>The element of type <paramref name="T" /> at the specified index.</returns>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be set in a read only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be removed from a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the collection to a specified array, starting at a specified index.</summary>
      <param name="array">The <see cref="T:System.Array" /> that is the destination for the elements copied from the collection.</param>
      <param name="index">The zero-based index in the array at which copying begins.</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized.</summary>
      <returns>true.</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the synchronized, read-only collection.</summary>
      <returns>The <see cref="T:System.Collections.IEnumerator" />  that iterates through the synchronized, read-only collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>Throws a <see cref="T:System.NotSupportedException" />.</summary>
      <returns>The <see cref="T:System.NotSupportedException" />.</returns>
      <param name="value">The element to be added to the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be added to a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>Throws a <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Items cannot be cleared from a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the collection contains an element with a specific value.</summary>
      <returns>Returns true if the element <paramref name="value" /> is found in the collection; otherwise, false.</returns>
      <param name="value">The object to locate in the collection.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an object of the type contained in the collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the collection.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The element whose index is being retrieved.</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> is to be inserted.</param>
      <param name="value">The object to insert into the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be inserted into a read-only collection.</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the collection has a fixed size.</summary>
      <returns>true</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets the element at the specified index and throws an exception if an element is set.</summary>
      <returns>The object at the specified location in the collection.</returns>
      <param name="index">The zero-based index of the element in the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be set in a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The zero-based index of the element to be retrieved from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be removed from a read-only collection.</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> if called.</summary>
      <param name="index">The zero-based index of the element to be retrieved from the collection.</param>
      <exception cref="T:System.NotSupportedException">Items cannot be removed from a read-only collection.</exception>
    </member>
    <member name="T:System.ServiceModel.ActionNotSupportedException">
      <summary>This exception is thrown on the client when the action related to the invoked operation does not match the action of any operation available in the service.</summary>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ActionNotSupportedException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ActionNotSupportedException" /> class with a specified error message and a reference to the inner exception that is the cause of the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown. </param>
    </member>
    <member name="T:System.ServiceModel.BasicHttpBinding">
      <summary>Represents a binding that a Silverlight version 4 Release Candidate client can use to configure endpoints that can communicate with ASMX-based Web services and other services that conform to the WS-I Basic Profile 1.1.</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.BasicHttpBinding" /> class with a specified type of security used by the binding.</summary>
      <param name="securityMode">The value of <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> that specifies the type of security that is used with the SOAP message and for the client.</param>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.CreateBindingElements">
      <summary>Returns an ordered collection of binding elements contained in the current binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the ordered stack of binding elements described by the <see cref="T:System.ServiceModel.BasicHttpBinding" />.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.EnableHttpCookieContainer">
      <summary>Gets or sets a value that indicates whether the <see cref="T:P:System.ServiceModel.BasicHttpBinding" /> will include the <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" />.</summary>
      <returns>true if the binding contains the <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" />; false if it does not.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.EnvelopeVersion">
      <summary>Gets the version of SOAP that is used for messages that are processed by this binding.</summary>
      <returns>The value of the <see cref="T:System.ServiceModel.EnvelopeVersion" /> that is used with this binding. The value is always SOAP 1.1.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.MaxBufferSize">
      <summary>Gets or sets the maximum size for a buffer that receives messages from the channel.</summary>
      <returns>The maximum size, in bytes, of a buffer that stores messages while they are processed for an endpoint configured with this binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum size for a message that can be received on a channel configured with this binding.</summary>
      <returns>The maximum size, in bytes, for a message that is processed by the binding. The default value is 65,536 bytes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero.</exception>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.Scheme">
      <summary>Gets the URI transport scheme for the channels and listeners that are configured with this binding.</summary>
      <returns>"https" if the security mode in the transport binding element is set to <see cref="F:System.ServiceModel.BasicHttpSecurityMode.Transport" /> or <see cref="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredentials" />; otherwise, "http".</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.Security">
      <summary>Gets the type of security used with this binding. </summary>
      <returns>The <see cref="T:System.ServiceModel.BasicHttpSecurity" /> that is used with this binding. The default value is <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />. </returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.TextEncoding">
      <summary>Gets or sets the character encoding that is used for the message text.</summary>
      <returns>The <see cref="T:System.Text.Encoding" /> that indicates the character encoding that is used. The default is <see cref="T:System.Text.UTF8Encoding" />.</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.TransferMode">
      <summary>Gets or sets a value that indicates whether messages are sent buffered or streamed.</summary>
      <returns>The <see cref="T:System.ServiceModel.TransferMode" /> that indicates whether messages are sent buffered or streamed.</returns>
    </member>
    <member name="T:System.ServiceModel.BasicHttpMessageCredentialType">
      <summary>Enumerates credential types that the client can authenticate with when security is enabled in the BasicHttpBinding binding.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpMessageCredentialType.UserName">
      <summary>Indicates that the client be authenticated using a username credential.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpMessageCredentialType.Certificate">
      <summary>Present only in Silverlight for Windows Phone, but not supported.</summary>
    </member>
    <member name="T:System.ServiceModel.BasicHttpSecurity">
      <summary>Specifies the security used for a Silverlight client configured with a <see cref="T:System.ServiceModel.BasicHttpBinding" />.</summary>
    </member>
    <member name="P:System.ServiceModel.BasicHttpSecurity.Mode">
      <summary>Gets or sets the mode of security for a client configured with a <see cref="T:System.ServiceModel.BasicHttpBinding" />.</summary>
      <returns>A value in the <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> enumeration. The default value for this property is <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is not a legal value for <see cref="T:System.ServiceModel.BasicHttpSecurityMode" />.</exception>
    </member>
    <member name="T:System.ServiceModel.BasicHttpSecurityMode">
      <summary>Specifies the types of security that can be used with the system-provided <see cref="T:System.ServiceModel.BasicHttpBinding" /> binding.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.None">
      <summary>The SOAP message is not secured during transfer. This is the default behavior.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.Transport">
      <summary>Security is provided using HTTPS. The service must be configured with SSL certificates. The SOAP message is protected as a whole using HTTPS. The service is authenticated by the client using the service’s SSL certificate.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential">
      <summary>This mode provides integrity, confidentiality, and server authentication using HTTPS. The service must be configured with a certificate. Client authentication is provided by SOAP message security.</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly">
      <summary>This mode provides only HTTP-based client authentication. It does not provide message integrity or confidentiality.</summary>
    </member>
    <member name="T:System.ServiceModel.ChannelFactory">
      <summary>Creates and manages the channels that are used by clients to send messages to service endpoints.</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)">
      <summary>Initializes the channel factory with the behaviors provided by a specified configuration file and with those in the service endpoint of the channel factory.</summary>
      <param name="configurationName">The name of the configuration file.</param>
      <exception cref="T:System.InvalidOperationException">The service endpoint of the channel factory is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateDescription">
      <summary>When implemented in a derived class, creates a description of the service endpoint associated with the channel factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> associated with the channel factory.</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateFactory">
      <summary>Builds the channel factory for the current endpoint of the factory.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory" /> for the endpoint of the current factory.</returns>
      <exception cref="T:System.InvalidOperationException">The endpoint of the service that the factory channels connect to is null, or the endpoint's binding is null or is missing the element with the configuration name specified.</exception>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.Credentials">
      <summary>Gets the credentials used by clients to communicate a service endpoint over the channels produced by the factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ClientCredentials" /> used by clients if they are configured for the factory or if the endpoint is not a null reference and is in either the <see cref="F:System.ServiceModel.CommunicationState.Created" />or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> communication state; otherwise, null.</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout">
      <summary>Gets the default interval of time provided for a close operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout">
      <summary>Gets the default interval of time provided for an open operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.Endpoint">
      <summary>Gets the service endpoint to which the channels produced by the factory connect.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to which the channels produced by the factory connect.</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.EnsureOpened">
      <summary>Opens the current channel factory if it is not yet opened.</summary>
      <exception cref="T:System.ObjectDisposedException">The current factory is either closing or closed and so cannot be opened.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.GetProperty``1">
      <summary>Returns the typed object requested, if present, from the appropriate layer in the channel stack, or null if not present.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present, or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes the service endpoint of the channel factory with a specified binding and address.</summary>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> with which to initialize the endpoint for the channel factory.</param>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> with which to initialize the endpoint for the channel factory.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Initializes the service endpoint of the channel factory with a specified service endpoint.</summary>
      <param name="endpoint">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to initialize the channel factory.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endpoint" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)">
      <summary>Initializes the service endpoint of the channel factory with a specified address and configuration.</summary>
      <param name="configurationName">The name of the configuration file with which to initialize the channel factory.</param>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> with which to initialize endpoints for the channel factory.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnAbort">
      <summary>Terminates the inner channel factory of the current channel factory.</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous close operation on the inner channel factory of the current channel factory that has a state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous open operation on the inner channel factory of the current channel factory that has a state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)">
      <summary>Calls close on the inner channel factory with a specified time-out for the completion of the operation.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the operation has to complete before timing out.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous close operation on the inner channel factory of the current channel factory. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous open operation on the inner channel factory of the current channel factory. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)">
      <summary>Calls open on the inner channel factory of the current channel factory with a specified time-out for the completion of the operation.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</param>
      <exception cref="T:System.InvalidOperationException">The inner channel of the current channel is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpened">
      <summary>Initializes a read-only copy of the <see cref="T:System.ServiceModel.Description.ClientCredentials" /> object for the channel factory.</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpening">
      <summary>Builds the inner channel factory for the current channel.</summary>
      <exception cref="T:System.InvalidOperationException">The inner channel factory for the channel factory is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose">
      <summary>Closes the current channel factory.</summary>
    </member>
    <member name="T:System.ServiceModel.ChannelFactory`1">
      <summary>A factory that creates channels of different types that are used by clients to send messages to variously configured service endpoints.</summary>
      <typeparam name="TChannel">The type of channel produced by the channel factory. This type must be either <see cref="T:System.ServiceModel.Channels.IOutputChannel" /> or <see cref="T:System.ServiceModel.Channels.IRequestChannel" />.</typeparam>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory`1" /> class with a specified endpoint address and binding configuration.</summary>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> used to configure the channels created by the factory.</param>
      <param name="remoteAddress">The destination <see cref="T:System.ServiceModel.EndpointAddress" /> for channels created by the factory.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="binding" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory`1" /> class and configures the endpoint.</summary>
      <param name="endpointConfigurationName">The name of the file that contains the service endpoint configuration for the channels created by the factory.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory`1" /> class with a specified endpoint address and endpoint configuration.</summary>
      <param name="endpointConfigurationName">The name of the file that contains the service endpoint configuration for the channels created by the factory.</param>
      <param name="remoteAddress">The destination <see cref="T:System.ServiceModel.EndpointAddress" /> for channels created by the factory.</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ChannelFactory`1" /> class.</summary>
      <param name="channelType">An interface that identifies the type of channel produced by the factory.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="channelType" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="channelType" /> is not an interface.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel">
      <summary>Creates a channel that is used to send messages to a service.</summary>
      <returns>The <paramref name="TChannel" /> of type <see cref="T:System.ServiceModel.Channels.IChannel" /> created by the factory.</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>Creates a channel that is used to send messages to a service at a specific endpoint address.</summary>
      <returns>The <paramref name="TChannel" /> of type <see cref="T:System.ServiceModel.Channels.IChannel" /> created by the factory.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>Creates a channel that is used to send messages to a service at a specific endpoint address through a specified transport address.</summary>
      <returns>The <paramref name="TChannel" /> of type <see cref="T:System.ServiceModel.Channels.IChannel" /> created by the factory.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which the channel sends messages.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.ServiceModel.ChannelFactory" /> has duplex operations it does not support.</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateDescription">
      <summary>Creates a description of the service endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> of the service.</returns>
      <exception cref="T:System.InvalidOperationException">The callback contract is null, but the service endpoint requires one that is not null (Nothing).</exception>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1">
      <summary>Provides the base implementation used to create Silverlight version 4 Release Candidate client objects (proxies) that can call services.</summary>
      <typeparam name="TChannel">The channel used to connect to the service that identifies the type of service contract encapsulated by this proxy.</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class using the default target endpoint from the application configuration file. </summary>
      <exception cref="T:System.InvalidOperationException">Either there is no default endpoint information in the configuration file, more than one endpoint in the file, or no configuration file.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class using a specified binding and target address. </summary>
      <param name="binding">The binding used to configure the way that calls are made to the service.</param>
      <param name="remoteAddress">The address of the service endpoint.</param>
      <exception cref="T:System.ArgumentNullException">The binding is null.</exception>
      <exception cref="T:System.ArgumentNullException">The remote address is null.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class using the configuration information specified in the application configuration file by <paramref name="endpointConfigurationName" />. </summary>
      <param name="endpointConfigurationName">The name of the endpoint in the application configuration file.</param>
      <exception cref="T:System.ArgumentNullException">The specified endpoint information is null.</exception>
      <exception cref="T:System.InvalidOperationException">The endpoint cannot be found or the endpoint contract is not valid.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class using the specified target address and endpoint information. </summary>
      <param name="endpointConfigurationName">The name of the endpoint in the application configuration file.</param>
      <param name="remoteAddress">The address of the service.</param>
      <exception cref="T:System.ArgumentNullException">The endpoint is null.</exception>
      <exception cref="T:System.ArgumentNullException">The remote address is null.</exception>
      <exception cref="T:System.InvalidOperationException">The endpoint cannot be found or the endpoint contract is not valid.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class.</summary>
      <param name="endpointConfigurationName">The name of the endpoint in the application configuration file.</param>
      <param name="remoteAddress">The address of the service.</param>
      <exception cref="T:System.ArgumentNullException">The endpoint is null.</exception>
      <exception cref="T:System.ArgumentNullException">The remote address is null.</exception>
      <exception cref="T:System.InvalidOperationException">The endpoint cannot be found or the endpoint contract is not valid.</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.Abort">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition immediately from its current state into the closed state.</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Channel">
      <summary>Gets the inner channel used to communicate with the service.</summary>
      <returns>An implementation of the target service contract interface passed as the type parameter to the constructor.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelFactory">
      <summary>Gets the underlying <see cref="T:System.ServiceModel.ChannelFactory`1" /> object.</summary>
      <returns>A <see cref="T:System.ServiceModel.ChannelFactory`1" /> object.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ClientCredentials">
      <summary>Gets the client credentials used to call an operation.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.ClientCredentials" /> object that represents the proof of identity presented by the client.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.CreateChannel">
      <summary>Returns a new channel from the client to the service.</summary>
      <returns>A channel of type <paramref name="TChannel" /> that identifies the type of service contract encapsulated by this client object (proxy).</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Endpoint">
      <summary>Gets the target endpoint for the service to which the Silverlight version 4 Release Candidate client can connect.</summary>
      <returns>The target <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> object.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.GetDefaultValueForInitialization``1">
      <summary>Replicates the behavior of the default keyword in C#.</summary>
      <returns>Returns null if T is a reference type and zero if T is a numeric value type.</returns>
      <typeparam name="T">A C# type.</typeparam>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InnerChannel">
      <summary>Gets the underlying <see cref="T:System.ServiceModel.IClientChannel" /> implementation.</summary>
      <returns>The client channel for the Silverlight version 4 Release Candidate client object.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)">
      <summary>Provides support for implementing the event-based asynchronous pattern. 
    For more information about 
   this pattern, see Event-based Asynchronous Pattern Overview.</summary>
      <param name="beginOperationDelegate">A delegate that is used for calling the asynchronous operation.</param>
      <param name="inValues">The input values to the asynchronous call.</param>
      <param name="endOperationDelegate">A delegate that is used to end the asynchronous call after it has completed.</param>
      <param name="operationCompletedCallback">A client-supplied callback that is invoked when the asynchronous method is complete. The callback is passed to the <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" />.</param>
      <param name="userState">The <paramref name="userState" /> object to associate with the asynchronous call.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.State">
      <summary>Gets the current state of the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
      <returns>The value of the <see cref="T:System.ServiceModel.CommunicationState" /> of the object.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close the <see cref="T:System.ServiceModel.ClientBase`1" />.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation.</returns>
      <param name="callback">The method that receives the callback on completion.</param>
      <param name="state">The state data.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close the <see cref="T:System.ServiceModel.ClientBase`1" /> with a specified time-out.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous begin close operation.</returns>
      <param name="timeout">The period within which the call must complete.</param>
      <param name="callback">The callback object invoked when the operation completes.</param>
      <param name="state">The state data.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="callback">The method that receives the callback on completion.</param>
      <param name="state">The state data.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open the <see cref="T:System.ServiceModel.ClientBase`1" /> object within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation.</returns>
      <param name="timeout">The time within which the call must complete.</param>
      <param name="callback">The method that receives the callback on completion.</param>
      <param name="state">The state data.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition from its current state into the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition from its current state into the closed state.</summary>
      <param name="timeout">The time within which the call must complete.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ClientBase`1" /> object has transitioned from its current state to the closed state.</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ClientBase`1" /> object transitions from its current state to the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> used to complete the asynchronous close operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to open the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> used to complete the asynchronous end open operation.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>The event handler that is invoked when a fault occurs while performing an operation on the <see cref="T:System.ServiceModel.ClientBase`1" /> object.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition from the created state into the opened state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>Causes the <see cref="T:System.ServiceModel.ClientBase`1" /> object to transition from the created state into the opened state within a specified interval of time.</summary>
      <param name="timeout">The time period within which the call must complete.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ClientBase`1" /> object has transitioned from the created state to the opened state.</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ClientBase`1" /> object transitions from the created state to the opened state.</summary>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate">
      <summary>A delegate that is used by <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> for calling asynchronous operations on the client. </summary>
      <returns>The result of the asynchronous call.</returns>
      <param name="inValues">The input values to the asynchronous call.</param>
      <param name="asyncCallback">Reference to the method to be called when the corresponding asynchronous operation completes.</param>
      <param name="state">An <see cref="T:System.Object" /> that lets the client distinguish between different asynchronous calls. It is made available to the client in the <paramref name="arguments" /> parameter of the event completion callback.</param>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.ChannelBase`1">
      <summary>This class is used by automatically generated client proxies to call services and should not be used otherwise. 
</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.#ctor(System.ServiceModel.ClientBase{`1})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ClientBase`1" /> class from an existing instance of the class.</summary>
      <param name="client">The <see cref="T:System.ServiceModel.ClientBase`1.ChannelBase`1" /> object used to initialize the new instance of the class.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
      <summary>Starts an asynchronous call of a specified method by name.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous method invoked.</returns>
      <param name="methodName">The name of the method to be called asynchronously.</param>
      <param name="args">An array of arguments for the method invoked.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">The <see cref="T:System.AsyncCallback" /> delegate. </param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.EndInvoke(System.String,System.Object[],System.IAsyncResult)">
      <summary>Completes an asynchronous invocation by name of a specified method. </summary>
      <returns>
The <see cref="T:System.Object" /> output by the method invoked.
</returns>
      <param name="methodName">The name of the method called asynchronously.</param>
      <param name="args">An array of arguments for the method invoked.</param>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#IDisposable#Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources associated with the channel.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IChannel#GetProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <typeparam name="TProperty">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a message to the destination of the output channel.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel. </param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a message to the destination of the output channel within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous send operation.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation send completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#EndSend(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to transmit a message to the destination of the output channel. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IOutputChannel.BeginSend" />  method.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#RemoteAddress">
      <summary>Gets the destination of the service to which messages are sent out on the output channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the service to which the output channel sends messages.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message)">
      <summary>Transmits a message to the destination of the output channel. </summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>Sends a message on the current output channel within a specified interval of time.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Via">
      <summary>Gets the URI that contains the transport address to which messages are sent on the output channel.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the output channel.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a request message to the reply-side of a request-reply message exchange.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a request message to the reply-side of a request-reply message exchange within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received. (On the defaults, see the remarks.)</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#EndRequest(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to return a message-based response to a transmitted request. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#RemoteAddress">
      <summary>Gets the remote address to which the request channel sends messages. </summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> to which the request channel sends messages. </returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message)">
      <summary>Sends a message-based request and returns the correlated message-based response. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>Sends a message-based request and returns the correlated message-based response within a specified interval of time.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Via">
      <summary>Gets the transport address to which the request is sent.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#AllowInitializationUI">
      <summary>The <see cref="T:System.ServiceModel.EndpointAddress" /> serves as both the ultimate destination and the physical address if a <see cref="P:System.ServiceModel.Channels.IOutputChannel.Via" /> is not specified. If the <see cref="P:System.ServiceModel.Channels.IOutputChannel.Via" /> is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>An asynchronous call to begin using a user interface to obtain credential information.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> to use to call back when processing has completed.</returns>
      <param name="callback">The method that is called when this method completes.</param>
      <param name="state">Information about the state of the channel.</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DidInteractiveInitialization">
      <summary>Gets a value that indicates whether a call was done to a user interface to obtain credential information. </summary>
      <returns>true if the <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> method was called (or the <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> and <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" /> methods); otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DisplayInitializationUI">
      <summary>A call to a user interface to obtain credential information.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>Called when the call to <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> has finished.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" />.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#UnknownMessageReceived">
      <summary>This is a reserved event.</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#Via">
      <summary>Gets the URI that contains the transport address to which messages are sent on the client channel.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the channel.</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Abort">
      <summary>Causes a communication object to transition immediately from its current state into the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object with a specified time-out.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open a communication object within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object has transitioned from its current state to the closed state.</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object transitions from its current state to the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to open a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.ICommunicationObject.BeginOpen" /> method.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>The event handler that is invoked when a fault occurs while performing an operation on the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open">
      <summary>Causes a communication object to transition from the created state into the opened state.</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>Causes a communication object to transition from the created state into the opened state within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object has transitioned from the created state to the opened state.</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>The event handler that is invoked when the <see cref="T:System.ServiceModel.ChannelBase`1.ClientBase`1" /> object transitions from the created state to the opened state.</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#State">
      <summary>Gets the current state of the communication-oriented object.</summary>
      <returns>The value of the <see cref="T:System.ServiceModel.CommunicationState" /> of the object.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#AllowOutputBatching">
      <summary>Gets or sets a value that instructs Silverlight version 4 Release Candidate to store a set of messages before giving the messages to the transport.</summary>
      <returns>true if the batching of outgoing messages is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#InputSession">
      <summary>Gets the input session for the channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IInputSession" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#LocalAddress">
      <summary>Gets the local endpoint for the channel.</summary>
      <returns>The local <see cref="T:System.ServiceModel.EndpointAddress" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OperationTimeout">
      <summary>Gets or sets the time period within which an operation must complete or an exception is thrown.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> that specifies the time period within which an operation must complete.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OutputSession">
      <summary>Gets the output session associated with the channel, if any.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.IOutputSession" /> implementation if an input session exists; otherwise, null.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#RemoteAddress">
      <summary>Gets the remote address associated with the channel.</summary>
      <returns>The remote <see cref="T:System.ServiceModel.EndpointAddress" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#SessionId">
      <summary>Returns an identifier for the current session, if any.</summary>
      <returns>The current session identifier, if any.</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IExtensibleObject{T}#Extensions">
      <summary>Gets a collection of extension objects for this extensible object.</summary>
      <returns>A <see cref="T:System.ServiceModel.IExtensionCollection`1" /> of extension objects.</returns>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.EndOperationDelegate">
      <summary>A delegate that is invoked by <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> on successful completion of the call made by <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> to <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" />.</summary>
      <returns>An array of <see cref="T:System.Object" /> that contains the results of the call to the asynchronous method. The operation may have multiple return values, which are all returned in this object array.</returns>
      <param name="result">The result returned by the call made by <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" />to <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" />.</param>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs">
      <summary>Stores the results from an asynchronous call made by the client.</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs.Results">
      <summary>Gets the results from an asynchronous call made by the client.</summary>
      <returns>An array of type<see cref="T:System.Object" /> that contains the results from an asynchronous call made by the client.</returns>
    </member>
    <member name="T:System.ServiceModel.CommunicationException">
      <summary>Represents a communication error in either the service or client application.</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationException" /> class, using the specified message.</summary>
      <param name="message">The description of the error condition.</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationException" /> class, using the specified message and the inner exception.</summary>
      <param name="message">The description of the error condition.</param>
      <param name="innerException">The inner exception to be used.</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectAbortedException">
      <summary>The exception that is thrown when the call is to an <see cref="T:System.ServiceModel.ICommunicationObject" /> object that has aborted.</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> class with the specified message. </summary>
      <param name="message">The message carried in the exception.</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> class using the specified message and inner exception. </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectFaultedException">
      <summary>The exception that is thrown when a call is made to a communication object that has faulted. </summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> class using the specified message.</summary>
      <param name="message">The message that describes the exception.</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> class using the specified message and inner exception.</summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationState">
      <summary>Defines the states in which an <see cref="T:System.ServiceModel.ICommunicationObject" /> can exist. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Created">
      <summary>Indicates that the communication object has been instantiated and is configurable, but not yet open or ready for use.</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opening">
      <summary>Indicates that the communication object is being transitioned from the <see cref="F:System.ServiceModel.CommunicationState.Created" /> state to the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opened">
      <summary>Indicates that the communication object is now open and ready to be used. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closing">
      <summary>Indicates that the communication object is transitioning to the <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closed">
      <summary>Indicates that the communication object has been closed and is no longer usable. </summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Faulted">
      <summary>Indicates that the communication object has encountered an error or fault from which it cannot recover and from which it is no longer usable. </summary>
    </member>
    <member name="T:System.ServiceModel.DataContractFormatAttribute">
      <summary>Instructs the Silverlight version 4 Release Candidate infrastructure to use the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
    </member>
    <member name="M:System.ServiceModel.DataContractFormatAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.DataContractFormatAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.DataContractFormatAttribute.Style">
      <summary>Gets or sets the SOAP style of the serialized data.</summary>
      <returns>One of the <see cref="T:System.ServiceModel.OperationFormatStyle" /> values. The default is <see cref="F:System.ServiceModel.OperationFormatStyle.Document" />.</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointAddress">
      <summary>Provides a unique network address that a client uses to communicate with a service endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointAddress" /> class with a specified URI string.</summary>
      <param name="uri">The URI that identifies the endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.Channels.AddressHeader[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointAddress" /> class with a specified URI and headers.</summary>
      <param name="uri">The <see cref="T:System.Uri" /> that identifies the endpoint location.</param>
      <param name="addressHeaders">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.AddressHeader" /> that contains address information used to interact with the endpoint.</param>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.AnonymousUri">
      <summary>Gets a version-neutral representation of the anonymous URI.</summary>
      <returns>A <see cref="T:System.Uri" /> with the value http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/Anonymous.</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ApplyTo(System.ServiceModel.Channels.Message)">
      <summary>Assigns the URI and properties of the endpoint address to the values of the headers of a specified message.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> whose header values are being assigned.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.Equals(System.Object)">
      <summary>Returns a value that indicates whether a specified object is equivalent to the current endpoint address.</summary>
      <returns>true if the specified object is equivalent to the current address; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to be compared to the current endpoint address.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.GetHashCode">
      <summary>Provides a unique hash code for the current endpoint address. </summary>
      <returns>A unique hash code for the current endpoint address.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Headers">
      <summary>Gets the collection of address headers for the endpoints that the builder can create.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> that contains address information for the endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsAnonymous">
      <summary>Gets a value that indicates whether the endpoint is anonymous.</summary>
      <returns>true if the endpoint is <see cref="P:System.ServiceModel.EndpointAddress.AnonymousUri" />; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsNone">
      <summary>Gets a value that indicates whether the URI for the endpoint is the <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" />.</summary>
      <returns>true if the URI of the endpoint is <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" />; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.NoneUri">
      <summary>Gets a version-neutral URI used for the address of an endpoint to which a message must not be sent.</summary>
      <returns>A <see cref="T:System.Uri" /> with the value http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/None.</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Equality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>Returns a value that indicates whether specified endpoint addresses are not equivalent.</summary>
      <returns>true if the endpoint addresses are equivalent; otherwise, false.</returns>
      <param name="address1">One of the <see cref="T:System.ServiceModel.EndpointAddress" /> objects being compared.</param>
      <param name="address2">One of the <see cref="T:System.ServiceModel.EndpointAddress" /> objects being compared.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Inequality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>Returns a value that indicates whether specified endpoint addresses are not equivalent.</summary>
      <returns>true if the endpoint addresses are not equivalent; otherwise, false.</returns>
      <param name="address1">One of the <see cref="T:System.ServiceModel.EndpointAddress" /> objects being compared.</param>
      <param name="address2">One of the <see cref="T:System.ServiceModel.EndpointAddress" /> objects being compared.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader)">
      <summary>Reads an endpoint address for a specified address version from a specified XML dictionary reader.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the specified version read from the XML reader.</returns>
      <param name="addressingVersion">The <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> of the current endpoint address.</param>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" /> from which the endpoint address is obtained.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ToString">
      <summary>Returns a canonical string representation of the URI that is contained in the endpoint address.</summary>
      <returns>The URI that identifies the endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Uri">
      <summary>Gets the URI for the endpoint.</summary>
      <returns>The <see cref="T:System.Uri" /> for the endpoint.</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)">
      <summary>Saves all the child nodes of the node to the XML dictionary writer specified.</summary>
      <param name="addressingVersion">The <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> of the current endpoint address.</param>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> to which the endpoint address is saved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> or <paramref name="addressingVersion" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.EndpointAddressBuilder">
      <summary>A factory for producing new (immutable) endpoint addresses with specific property values.</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointAddressBuilder" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.#ctor(System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointAddressBuilder" /> class from the values of an existing endpoint address.</summary>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> whose property values are used to initialize the property values of this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Headers">
      <summary>Gets the collection of address headers for the endpoints that the builder can create.</summary>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <see cref="T:System.ServiceModel.Channels.AddressHeader" /> that contains the address headers for the endpoints that the builder can create.</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.ToEndpointAddress">
      <summary>Creates a new endpoint address initialized with the property values of the current endpoint address builder.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> whose property are initialized with the values of the current endpoint address builder.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Uri">
      <summary>Gets or sets the URI for the endpoints that the builder can create.</summary>
      <returns>The <see cref="T:System.Uri" /> that specifies the endpoint address.</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointNotFoundException">
      <summary>The exception that is thrown when a remote endpoint could not be found or reached.</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointNotFoundException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointNotFoundException" /> class with a specified error message and the inner exception that caused the current exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.ServiceModel.EnvelopeVersion">
      <summary>Contains information related to the version of SOAP associated with a message and its exchange.</summary>
    </member>
    <member name="M:System.ServiceModel.EnvelopeVersion.GetUltimateDestinationActorValues">
      <summary>Gets a string that contains the URI name for the SOAP role associated with the current message version for the ultimate destination.</summary>
      <returns>An empty string if SOAP 1.1 is used; a string that contains http://www.w3.org/2003/05/soap-envelope/role/ultimateReceiver if SOAP 1.2 is used.</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.NextDestinationActorValue">
      <summary>Gets a string that contains the URI name for the SOAP role associated with the current message version for the next destination.</summary>
      <returns>A string that contains http://schemas.xmlsoap.org/soap/actor/next if <see cref="P:System.ServiceModel.EnvelopeVersion.Soap11" /> is used; a string that contains http://www.w3.org/2003/05/soap-envelope/role/next if <see cref="P:System.ServiceModel.EnvelopeVersion.Soap12" /> is used; and an empty string if the <see cref="T:System.ServiceModel.EnvelopeVersion" /> is <see cref="P:System.ServiceModel.EnvelopeVersion.None" />.</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.None">
      <summary>Gets the envelope version not using a version of SOAP.</summary>
      <returns>The envelope version not using SOAP formatting.</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.Soap11">
      <summary>Gets the SOAP 1.1 envelope version.</summary>
      <returns>The SOAP 1.1 <see cref="T:System.ServiceModel.EnvelopeVersion" />.</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.Soap12">
      <summary>Gets the SOAP 1.2 envelope version.</summary>
      <returns>The SOAP 1.2 <see cref="T:System.ServiceModel.EnvelopeVersion" />.</returns>
    </member>
    <member name="M:System.ServiceModel.EnvelopeVersion.ToString">
      <summary>Gets a string that represents the current envelope version.</summary>
      <returns>The current envelope version.</returns>
    </member>
    <member name="T:System.ServiceModel.ExceptionDetail">
      <summary>Represents fault detail information.</summary>
    </member>
    <member name="M:System.ServiceModel.ExceptionDetail.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ExceptionDetail" /> class from the exception. </summary>
      <param name="exception">The exception to be serialized as an <see cref="T:System.ServiceModel.ExceptionDetail" /> object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.InnerException">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.ExceptionDetail" /> object that represents the inner exception.</summary>
      <returns>The inner exception information.</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.Message">
      <summary>Gets or sets the message from the exception passed to the constructor.</summary>
      <returns>The exception message.</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.StackTrace">
      <summary>Gets or sets the stack trace information from the exception passed to the constructor.</summary>
      <returns>The stack trace of the exception.</returns>
    </member>
    <member name="M:System.ServiceModel.ExceptionDetail.ToString">
      <summary>Returns the exception detail information for the exception passed to the constructor.</summary>
      <returns>The message and stack trace of the exception.</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.Type">
      <summary>Gets or sets the type string for the exception passed to the constructor.</summary>
      <returns>The type string for the exception passed to the constructor.</returns>
    </member>
    <member name="T:System.ServiceModel.FaultCode">
      <summary>Represents a SOAP fault code. </summary>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultCode" /> class. </summary>
      <param name="name">The name of the fault code.</param>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.ServiceModel.FaultCode)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultCode" /> class.</summary>
      <param name="name">The name of the fault code.</param>
      <param name="subCode">The fault subcode.</param>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultCode" /> class with the specified name and namespace. </summary>
      <param name="name">The local name of the fault code. </param>
      <param name="ns">The namespace name of the fault code. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="ns" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> is an empty string. </exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String,System.ServiceModel.FaultCode)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultCode" /> class with the specified name, namespace, and fault subcode.</summary>
      <param name="name">The local name of the fault code. </param>
      <param name="ns">The namespace name of the fault code. </param>
      <param name="subCode">A <see cref="T:System.ServiceModel.FaultCode" /> object that represents the fault subcode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="ns" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> is an empty string. </exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.ServiceModel.FaultCode)">
      <summary>Creates a sender fault code with the specified subcode. </summary>
      <returns>A <see cref="T:System.ServiceModel.FaultCode" /> object with the created SOAP fault subcode in the <see cref="P:System.ServiceModel.FaultCode.SubCode" /> property. </returns>
      <param name="subCode">A <see cref="T:System.ServiceModel.FaultCode" /> object that represents the fault subcode. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subCode" /> is null. </exception>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsPredefinedFault">
      <summary>Gets a value that indicates whether the fault is a SOAP 1.1 or SOAP 1.2 fault.</summary>
      <returns>true if the fault is a SOAP 1.1 or SOAP 1.2 fault; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsReceiverFault">
      <summary>Gets a value that indicates whether the fault is a SOAP 1.1 server fault or a SOAP 1.2 receiver fault.</summary>
      <returns>true if the fault is a SOAP 1.1 server fault or a SOAP 1.2 receiver fault; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsSenderFault">
      <summary>Gets a value that indicates whether the fault is a SOAP 1.1 client fault or a SOAP 1.2 sender fault.</summary>
      <returns>true if the fault is a SOAP 1.1 client fault or a SOAP 1.2 sender fault; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.Name">
      <summary>Gets the local name of the fault code. </summary>
      <returns>The local name of the fault code. </returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.Namespace">
      <summary>Gets the namespace for the fault code. </summary>
      <returns>A Uniform Resource Identifier (URI) for the namespace name. </returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.SubCode">
      <summary>Gets the fault subcode. </summary>
      <returns>A <see cref="T:System.ServiceModel.FaultCode" /> object that represents the fault subcode. </returns>
    </member>
    <member name="T:System.ServiceModel.FaultContractAttribute">
      <summary>Specifies one or more SOAP faults that are returned when a service operation encounters processing errors.</summary>
    </member>
    <member name="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultContractAttribute" /> class. </summary>
      <param name="detailType">The serializable type that contains error information for the caller.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="detailType" /> argument is null.</exception>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Action">
      <summary>Gets or sets the action of the SOAP fault message that is specified as part of the operation contract.</summary>
      <returns>The value of the action for the SOAP fault message.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.DetailType">
      <summary>Gets the type of a serializable object that contains error information.</summary>
      <returns>The type that represents the serializable error class.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Name">
      <summary>Gets or sets the name of the fault message in Web Services Description Language (WSDL).</summary>
      <returns>The fault message name. The default is the name of the type used as the fault detail.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Namespace">
      <summary>Gets or sets the namespace of the SOAP fault.</summary>
      <returns>The namespace of the SOAP fault.</returns>
    </member>
    <member name="T:System.ServiceModel.FaultException">
      <summary>Represents a SOAP fault.</summary>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.Channels.MessageFault,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultException" /> class using the specified message fault values and the provided action string.</summary>
      <param name="fault">The message fault that contains the default SOAP fault values to use.</param>
      <param name="action">The action of the SOAP fault.</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultException" /> class using the specified reason, fault code, and action value.</summary>
      <param name="reason">The reason for the SOAP fault.</param>
      <param name="code">The fault code for the SOAP fault.</param>
      <param name="action">The action value for the SOAP fault.</param>
    </member>
    <member name="P:System.ServiceModel.FaultException.Action">
      <summary>Gets the value of the SOAP action for the fault message.</summary>
      <returns>The value of the SOAP action for the fault message.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Code">
      <summary>Gets the fault code for the SOAP fault.</summary>
      <returns>The fault code for the SOAP fault.</returns>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.String,System.Type[])">
      <summary>Returns a <see cref="T:System.ServiceModel.Channels.FaultException" /> object from the specified message fault, action, and an array of detail types.</summary>
      <returns>A <see cref="T:System.ServiceModel.FaultException" /> object that you can throw to indicate that a SOAP fault message was received.</returns>
      <param name="messageFault">The message fault that contains default SOAP fault information.</param>
      <param name="action">The fault action value.</param>
      <param name="faultDetailTypes">An array of types that contains fault details.</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.Type[])">
      <summary>Returns a <see cref="T:System.ServiceModel.Channels.FaultException" /> object from the specified message fault and an array of detail types.</summary>
      <returns>A <see cref="T:System.ServiceModel.FaultException" /> object that you can throw to indicate that a SOAP fault message was received.</returns>
      <param name="messageFault">The message fault that contains default SOAP fault information.</param>
      <param name="faultDetailTypes">An array of types that contains fault details.</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateMessageFault">
      <summary>Returns an in-memory <see cref="T:System.ServiceModel.Channels.MessageFault" /> object.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageFault" /> object that is passed to <see cref="Overload:System.ServiceModel.Channels.Message.CreateMessage" /> to create a message that contains a fault.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Message">
      <summary>Gets the message for the exception.</summary>
      <returns>The exception message.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Reason">
      <summary>Gets the <see cref="T:System.ServiceModel.FaultReason" /> for the SOAP fault.</summary>
      <returns>The reason for the SOAP fault.</returns>
    </member>
    <member name="T:System.ServiceModel.FaultException`1">
      <summary>Used in a client application to catch contractually specified SOAP faults.</summary>
      <typeparam name="TDetail">The serializable error detail type.</typeparam>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultException`1" /> class that uses a specified detail object and SOAP fault reason, code and action values. </summary>
      <param name="detail">The object used as the SOAP fault detail.</param>
      <param name="reason">The reason for the SOAP fault.</param>
      <param name="code">The fault code for the SOAP fault.</param>
      <param name="action">The action of the SOAP fault.</param>
    </member>
    <member name="P:System.ServiceModel.FaultException`1.Detail">
      <summary>Gets the object that contains the detail information of the fault condition.</summary>
      <returns>The detail object that is the type parameter of the <see cref="T:System.ServiceModel.FaultException`1" /> object.</returns>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.ToString">
      <summary>Returns a string for the <see cref="T:System.ServiceModel.FaultException`1" /> object.</summary>
      <returns>The string for the SOAP fault.</returns>
    </member>
    <member name="T:System.ServiceModel.FaultReason">
      <summary>Provides a text description of a SOAP fault. </summary>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.FaultReasonText})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultReason" /> class using the specified list of fault translations. </summary>
      <param name="translations">A list of <see cref="T:System.ServiceModel.FaultReasonText" /> objects; each object describes the fault in a specific language. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="translations" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="translations" /> is empty or one or more items is null. </exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.ServiceModel.FaultReasonText)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultReason" /> class using the specified text element that describes the fault in a specific language. </summary>
      <param name="translation">An array of <see cref="T:System.ServiceModel.FaultReasonText" /> objects that correspond to fault descriptions in different languages.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="translation" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultReason" /> class using the specified text.</summary>
      <param name="text">A description of the reason the fault occurred.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.GetMatchingTranslation">
      <summary>Gets the fault description in the language used by the current thread.</summary>
      <returns>The fault text in the specified language.</returns>
    </member>
    <member name="M:System.ServiceModel.FaultReason.GetMatchingTranslation(System.Globalization.CultureInfo)">
      <summary>Gets the fault description in the specified language.</summary>
      <returns>A <see cref="T:System.ServiceModel.FaultReasonText" /> object that contains the translated fault description.</returns>
      <param name="cultureInfo">A <see cref="T:System.Globalization.CultureInfo" /> object that specifies the language of the fault description.</param>
    </member>
    <member name="M:System.ServiceModel.FaultReason.ToString">
      <summary>Returns the fault reason as a string.</summary>
      <returns>The reason for the fault.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultReason.Translations">
      <summary>Gets a collection of fault descriptions in different languages.</summary>
      <returns>A <see cref="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1" /> of <see cref="T:System.ServiceModel.FaultReasonText" /> objects, where each object describes the fault in a different language.</returns>
    </member>
    <member name="T:System.ServiceModel.FaultReasonText">
      <summary>Represents the text of the reason of a SOAP fault.</summary>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultReasonText" /> class that uses a specified fault text.</summary>
      <param name="text">The text that is the SOAP fault reason.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.FaultReasonText" /> class that uses the specified fault text.</summary>
      <param name="text">The text that is the SOAP fault reason.</param>
      <param name="xmlLang">The language of the fault.</param>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.Matches(System.Globalization.CultureInfo)">
      <summary>Returns a value that indicates whether the language of the description matches the provided <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
      <returns>true if the specified <see cref="T:System.Globalization.CultureInfo" /> matches; otherwise, false.</returns>
      <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo" /> object to compare with the language of the description.</param>
    </member>
    <member name="P:System.ServiceModel.FaultReasonText.Text">
      <summary>Gets the text of the SOAP fault reason.</summary>
      <returns>The text of the SOAP fault reason.</returns>
    </member>
    <member name="P:System.ServiceModel.FaultReasonText.XmlLang">
      <summary>Gets the language of the SOAP fault reason.</summary>
      <returns>The language of the SOAP fault reason.</returns>
    </member>
    <member name="T:System.ServiceModel.IClientChannel">
      <summary>Defines the behavior of outbound request and request/reply channels used by client applications.</summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.AllowInitializationUI">
      <summary>Gets or sets a value that indicates whether <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> attempts to call the <see cref="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer" /> objects in the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers" /> property or throws and exception if that collection is not empty. </summary>
      <returns>true if Windows Communication Foundation (WCF) is permitted to invoke interactive channel initializers; otherwise, false. </returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>An asynchronous call to begin using a user interface to obtain credential information.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> to use to call back when processing has completed.</returns>
      <param name="callback">The method that is called when this method completes.</param>
      <param name="state">Information about the state of the channel.</param>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.DidInteractiveInitialization">
      <summary>Gets a value that indicates whether a call was done to a user interface to obtain credential information. </summary>
      <returns>true if the <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> method was called (or the <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> and <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" /> methods); otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.DisplayInitializationUI">
      <summary>A call to a user interface to obtain credential information.</summary>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>Called when the call to <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> has finished.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" />.</param>
    </member>
    <member name="E:System.ServiceModel.IClientChannel.UnknownMessageReceived">
      <summary>This is a reserved event. </summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.Via">
      <summary>Gets the URI that contains the transport address to which messages are sent on the client channel.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the channel.</returns>
    </member>
    <member name="T:System.ServiceModel.ICommunicationObject">
      <summary>Defines the contract for the basic state machine for all communication-oriented objects in the system, including channels, the channel managers, factories, listeners, and dispatchers, and service hosts.</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Abort">
      <summary>Causes a communication object to transition immediately from its current state into the closed state.</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object with a specified time-out.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The specified time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default open time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to open a communication object within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The specified time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.Close" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default close time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.Close" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closed">
      <summary>Occurs when the communication object completes its transition from the closing state into the closed state.</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closing">
      <summary>Occurs when the communication object first enters the closing state.</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> method.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to close gracefully.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to open a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.ICommunicationObject.BeginOpen" /> method.</param>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Faulted">
      <summary>Occurs when the communication object first enters the faulted state.</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open">
      <summary>Causes a communication object to transition from the created state into the opened state.</summary>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default open time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
      <summary>Causes a communication object to transition from the created state into the opened state within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <exception cref="T:System.ServiceModel.CommunicationException">The <see cref="T:System.ServiceModel.ICommunicationObject" /> was unable to be opened and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The specified time-out elapsed before the <see cref="T:System.ServiceModel.ICommunicationObject" /> was able to enter the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state and has entered the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opened">
      <summary>Occurs when the communication object completes its transition from the opening state into the opened state.</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opening">
      <summary>Occurs when the communication object first enters the opening state.</summary>
    </member>
    <member name="P:System.ServiceModel.ICommunicationObject.State">
      <summary>Gets the current state of the communication-oriented object.</summary>
      <returns>The value of the <see cref="T:System.ServiceModel.CommunicationState" /> of the object.</returns>
    </member>
    <member name="T:System.ServiceModel.IContextChannel">
      <summary>Defines the interface for the context control of a channel.</summary>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.AllowOutputBatching">
      <summary>Gets or sets a value that instructs Silverlight version 4 Release Candidate to store a set of messages before giving the messages to the transport.</summary>
      <returns>true if the batching of outgoing messages is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.InputSession">
      <summary>Gets the input session for the channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IInputSession" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.LocalAddress">
      <summary>Gets the local endpoint for the channel.</summary>
      <returns>The local <see cref="T:System.ServiceModel.EndpointAddress" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OperationTimeout">
      <summary>Gets or sets the time period within which an operation must complete or an exception is thrown.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> that specifies the time period within which an operation must complete.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OutputSession">
      <summary>Gets the output session associated with the channel, if any.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IOutputSession" /> implementation if an input session exists; otherwise, null.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.RemoteAddress">
      <summary>Gets the remote address associated with the channel.</summary>
      <returns>The remote <see cref="T:System.ServiceModel.EndpointAddress" /> for the channel.</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.SessionId">
      <summary>Returns an identifier for the current session, if any.</summary>
      <returns>The current session identifier, if any.</returns>
    </member>
    <member name="T:System.ServiceModel.IDefaultCommunicationTimeouts">
      <summary>Defines the interface for specifying the communication time-outs used by channels and channel managers, such as channel factories.</summary>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout">
      <summary>Gets the interval of time after which the close method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the close method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout">
      <summary>Gets the interval of time after which the open method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the open method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout">
      <summary>Gets the interval of time after which the receive method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the receive method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout">
      <summary>Gets the interval of time after which the send method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the send method to time out.</returns>
    </member>
    <member name="T:System.ServiceModel.IExtensibleObject`1">
      <summary>Enables an object to participate in custom behavior, such as registering for events, or watching state transitions.</summary>
      <typeparam name="T">The type of the extension class.</typeparam>
    </member>
    <member name="P:System.ServiceModel.IExtensibleObject`1.Extensions">
      <summary>Gets a collection of extension objects for this extensible object.</summary>
      <returns>A <see cref="T:System.ServiceModel.IExtensionCollection`1" /> of extension objects.</returns>
    </member>
    <member name="T:System.ServiceModel.IExtension`1">
      <summary>Enables an object to extend another object through aggregation.</summary>
      <typeparam name="T">The object that participates in the custom behavior.</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Attach(`0)">
      <summary>Enables an extension object to find out when it has been aggregated. Called when the extension is added to the <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> property.</summary>
      <param name="owner">The extensible object that aggregates this extension.</param>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Detach(`0)">
      <summary>Enables an object to find out when it is no longer aggregated. Called when an extension is removed from the <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> property.</summary>
      <param name="owner">The extensible object that aggregates this extension.</param>
    </member>
    <member name="T:System.ServiceModel.IExtensionCollection`1">
      <summary>A collection of the <see cref="T:System.ServiceModel.IExtension`1" /> objects that allow for retrieving the <see cref="T:System.ServiceModel.IExtension`1" /> objects by their type.</summary>
      <typeparam name="T">The type of the extension objects.</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.Find``1">
      <summary>Finds the specified extension object in the collection.</summary>
      <returns>The extension object that was found.</returns>
      <typeparam name="E">The type of extension object.</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.FindAll``1">
      <summary>Finds all extension objects in the collection specified by <paramref name="E" />.</summary>
      <returns>A collection of all extension objects in the collection that implements the specified type.</returns>
      <typeparam name="E">The type of extension object.</typeparam>
    </member>
    <member name="T:System.ServiceModel.InvalidMessageContractException">
      <summary>Represents a message contract that is not valid.</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.InvalidMessageContractException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.InvalidMessageContractException" /> class using the specified message.</summary>
      <param name="message">The message for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.InvalidMessageContractException" /> class that uses the specified message and inner exception.</summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:System.ServiceModel.MessageBodyMemberAttribute">
      <summary>Specifies that a member is serialized as an element inside the SOAP body.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageBodyMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.MessageBodyMemberAttribute.Order">
      <summary>Gets or sets a value that indicates the position in which the member is serialized into the SOAP body.</summary>
      <returns>The location of the element in the SOAP body.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value passed to the property setter is a negative integer.</exception>
    </member>
    <member name="T:System.ServiceModel.MessageContractAttribute">
      <summary>Defines a strongly typed class that corresponds to a SOAP message.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.IsWrapped">
      <summary>Gets or sets a value that specifies whether the message body has a wrapper element.</summary>
      <returns>true if the message body has a wrapper element; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperName">
      <summary>Gets or sets the name of the wrapper element of the message body.</summary>
      <returns>The name of the wrapper element in the message body.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperNamespace">
      <summary>Gets or sets the namespace of the message body wrapper element.</summary>
      <returns>The wrapper element namespace.</returns>
    </member>
    <member name="T:System.ServiceModel.MessageContractMemberAttribute">
      <summary>Declares the base members for <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> and <see cref="T:System.ServiceModel.MessageHeaderAttribute" />.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageContractMemberAttribute" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Name">
      <summary>Specifies the name of the element that corresponds to this member. </summary>
      <returns>The name of the element that corresponds to this member. This string must be a valid XML element name. </returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Namespace">
      <summary>Specifies the namespace of the element that corresponds to this member. </summary>
      <returns>A namespace URI of the element that corresponds to this member. </returns>
    </member>
    <member name="T:System.ServiceModel.MessageHeaderException">
      <summary>The exception that is thrown when the expectations regarding headers of a SOAP message are not satisfied when the message is processed.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class with the specified message.</summary>
      <param name="message">The message carried in the exception.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message and a value that indicates whether the message header is a duplicate or is missing.</summary>
      <param name="message">The exception message.</param>
      <param name="isDuplicate">true if the multiple message header is a duplicate; false if there are no message headers.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message and the inner exception that caused the exception.</summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that contains the inner exception that caused the exception.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message, header name, and namespace.</summary>
      <param name="message">The exception message.</param>
      <param name="headerName">The name of the message header.</param>
      <param name="ns">The namespace of the message header.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message, header name, and namespace, and a value that indicates whether the message header is a duplicate or is missing.</summary>
      <param name="message">The exception message.</param>
      <param name="headerName">The name of the message header.</param>
      <param name="ns">The namespace of the message header.</param>
      <param name="isDuplicate">true if the multiple message header is a duplicate; false if there are no message headers.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message, header name, and namespace, a value that indicates whether the message header is a duplicate or is missing, and the inner exception that caused the exception.</summary>
      <param name="message">The exception message.</param>
      <param name="headerName">The name of the message header.</param>
      <param name="ns">The namespace of the message header.</param>
      <param name="isDuplicate">true if the multiple message header is a duplicate; false if there are no message headers.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that contains the inner exception that caused the exception.</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class using the specified message, header name, and namespace, and the inner exception that caused the exception.</summary>
      <param name="message">The exception message.</param>
      <param name="headerName">The name of the message header.</param>
      <param name="ns">The namespace of the message header.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that contains the inner exception that caused the exception.</param>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderName">
      <summary>Gets the name of the SOAP header that caused the exception.</summary>
      <returns>The name of the SOAP header.</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderNamespace">
      <summary>Gets the namespace of the SOAP header that caused the exception.</summary>
      <returns>The namespace of the SOAP header.</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.IsDuplicate">
      <summary>Gets a value that indicates whether there are multiple message headers or no message headers.</summary>
      <returns>true if the multiple message header is a duplicate; false if there are no message headers.</returns>
    </member>
    <member name="T:System.ServiceModel.MessageParameterAttribute">
      <summary>Controls the name of the request and response parameter names. Cannot be used with <see cref="T:System.ServiceModel.Channels.Message" /> or message contracts.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageParameterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageParameterAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.MessageParameterAttribute.Name">
      <summary>Obtains or sets the name attribute of the parameter in the XML Schema (XSD).</summary>
      <returns>The name attribute of the parameter in the XSD.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="T:System.ServiceModel.OperationContext">
      <summary>Provides access to the execution context of a service method.</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContext.#ctor(System.ServiceModel.IContextChannel)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContext" /> class that uses the specified <see cref="T:System.ServiceModel.IContextChannel" /> in a client application. </summary>
      <param name="channel">The <see cref="T:System.ServiceModel.IContextChannel" /> used to create a new client <see cref="T:System.ServiceModel.OperationContext" />.</param>
      <exception cref="T:System.ArgumentNullException">The channel is null.</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContext.Current">
      <summary>Gets or sets the execution context for the current thread.</summary>
      <returns>The <see cref="T:System.ServiceModel.OperationContext" /> that represents the messaging and execution context of the current method.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.Extensions">
      <summary>Gets the collection of service extensions from the current message context.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.OperationContext" /> extension objects.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageHeaders">
      <summary>Gets the incoming message headers for the <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> object that contains the incoming message headers.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageProperties">
      <summary>Gets the message properties for the incoming message in the <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageProperties" /> object that contains the message properties on the incoming message.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageVersion">
      <summary>Gets the incoming SOAP message version for the <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>The SOAP version of the incoming message.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IsUserContext">
      <summary>This property is intended for system use and should not be called by users.</summary>
      <returns>true.</returns>
    </member>
    <member name="E:System.ServiceModel.OperationContext.OperationCompleted">
      <summary>Occurs when the operation has completed.</summary>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageHeaders">
      <summary>Gets the outgoing message headers for the active <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> object that contains outbound message headers for the active <see cref="T:System.ServiceModel.OperationContext" />.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageProperties">
      <summary>Gets the message properties for the outbound message in the active <see cref="T:System.ServiceModel.OperationContext" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageProperties" /> object that contains the message properties on the outbound message.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.RequestContext">
      <summary>Gets or sets the request context implementation for this method.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.RequestContext" /> implementation, or null if there is no request context.</returns>
    </member>
    <member name="T:System.ServiceModel.OperationContextScope">
      <summary>Creates a block within which an <see cref="T:System.ServiceModel.OperationContext" /> object is in scope.</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class that uses the specified <see cref="T:System.ServiceModel.IContextChannel" /> to create a new <see cref="T:System.ServiceModel.OperationContext" /> for the scope.</summary>
      <param name="channel">The channel to use when creating the scope for a new <see cref="T:System.ServiceModel.OperationContext" />.</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContextScope" /> class to create a scope for the specified <see cref="T:System.ServiceModel.OperationContext" /> object.</summary>
      <param name="context">The active <see cref="T:System.ServiceModel.OperationContext" /> in the created scope.</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.Dispose">
      <summary>Restores the original <see cref="T:System.ServiceModel.OperationContext" /> to the active context and recycles the <see cref="T:System.ServiceModel.OperationContextScope" /> object.</summary>
    </member>
    <member name="T:System.ServiceModel.OperationContractAttribute">
      <summary>Indicates that a method defines an operation that is part of a service contract in a Silverlight application. </summary>
    </member>
    <member name="M:System.ServiceModel.OperationContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Action">
      <summary>Gets or sets the WS-Addressing action of the request message. </summary>
      <returns>The action to use in generating the WS-Addressing Action header.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.AsyncPattern">
      <summary>Indicates that an operation is implemented asynchronously using a Begin&lt;methodName&gt; and End&lt;methodName&gt; method pair in a service contract. </summary>
      <returns>true if the Begin&lt;methodName&gt;method is matched by an End&lt;methodName&gt; method and can be treated by the infrastructure as an operation that is implemented as an asynchronous method pair on the service interface; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.IsOneWay">
      <summary>Gets or sets a value that indicates whether an operation returns a reply message.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Name">
      <summary>Gets or sets the name of the operation.</summary>
      <returns>The name of the operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.Name" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.ReplyAction">
      <summary>Gets or sets the value of the SOAP action for the reply message of the operation.</summary>
      <returns>The value of the SOAP action for the reply message.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.OperationFormatStyle">
      <summary>Represents the SOAP style that determines how the WSDL metadata for the service is formatted.</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Document">
      <summary>Causes the WSDL representation to contain a single element that represents the document that is exchanged for the operation.</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Rpc">
      <summary>Causes the WSDL representation of messages exchanged for an operation and contains parameters as if it were a remote procedure call.</summary>
    </member>
    <member name="T:System.ServiceModel.ProtocolException">
      <summary>The exception seen on the client that is thrown when communication with the remote party is impossible due to mismatched data transfer protocols.</summary>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ProtocolException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ProtocolException" /> class with a specified error message and a reference to the inner exception that is the cause of the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown. </param>
    </member>
    <member name="T:System.ServiceModel.QuotaExceededException">
      <summary>The exception that is thrown when a message quota has been exceeded.</summary>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.QuotaExceededException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.QuotaExceededException" /> class with a specified error message and a reference to the inner exception that is the cause of the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.ServiceModel.ServerTooBusyException">
      <summary>The exception that is thrown when a server is too busy to accept a message.</summary>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServerTooBusyException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServerTooBusyException" /> class with a specified error message and a reference to the inner exception that is the cause of the exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.ServiceModel.ServiceActivationException">
      <summary>The exception that is thrown when a service fails to activate.</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceActivationException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceActivationException" /> class with a specified error message and the inner exception provided.  </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the current exception to be thrown. </param>
    </member>
    <member name="T:System.ServiceModel.ServiceContractAttribute">
      <summary>Indicates that an interface or a class defines a service contract in a Silverlight client application. </summary>
    </member>
    <member name="M:System.ServiceModel.ServiceContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
      <summary>Gets or sets the type of callback contract when the contract is a duplex contract.</summary>
      <returns>A <see cref="T:System.Type" /> that indicates the callback contract. The default is null.</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
      <summary>Gets or sets the name used to locate the service in an application configuration file.</summary>
      <returns>The name used to locate the service element in an application configuration file. The default is the name of the service implementation class.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Name">
      <summary>Gets or sets the name for the &lt;portType&gt; element in Web Services Description Language (WSDL). </summary>
      <returns>The default value is the name of the class or interface to which the <see cref="T:System.ServiceModel.ServiceContractAttribute" /> is applied. </returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Namespace">
      <summary>Gets or sets the namespace of the &lt;portType&gt; element in Web Services Description Language (WSDL).</summary>
      <returns>The WSDL namespace of the &lt;portType&gt; element. The default value is "http://tempuri.org". </returns>
    </member>
    <member name="T:System.ServiceModel.ServiceKnownTypeAttribute">
      <summary>Specifies known types to be used by a service when serializing or deserializing.</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> class and specifies the name of a method that returns the known types.</summary>
      <param name="methodName">The name of a method that returns the known types.</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> class with the name of a method that returns the known types and the type that contains the method (or methods) that returns the known types.</summary>
      <param name="methodName">The name of a method that returns the known types.</param>
      <param name="declaringType">The type that can use the known types in its object graph.</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> class with the specified known type.</summary>
      <param name="type">Specifies a known type that can be used in a parameter or return value defined by the service.</param>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType">
      <summary>Gets the type that contains the methods that return the known types.</summary>
      <returns>The methods that return the known types.</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.MethodName">
      <summary>Gets the name of a method that returns the collection of known types.</summary>
      <returns>The name of the method that returns the known types.</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.Type">
      <summary>The known type that can be included in an object graph.</summary>
      <returns>The <see cref="T:System.Type" /> of the known type.</returns>
    </member>
    <member name="T:System.ServiceModel.TransferMode">
      <summary>Indicates whether a channel uses streamed or buffered modes for the transfer of request and response messages.</summary>
    </member>
    <member name="F:System.ServiceModel.TransferMode.Buffered">
      <summary>The request and response messages are both buffered.</summary>
    </member>
    <member name="F:System.ServiceModel.TransferMode.StreamedResponse">
      <summary>The request message is buffered and the response message is streamed.</summary>
    </member>
    <member name="T:System.ServiceModel.UnknownMessageReceivedEventArgs">
      <summary>Contains the message received by a channel and cannot be associated with any pending request.</summary>
    </member>
    <member name="P:System.ServiceModel.UnknownMessageReceivedEventArgs.Message">
      <summary>Gets the unknown message that caused the event.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that caused the event.</returns>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointNotFoundException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageHeaderException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ProtocolException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.QuotaExceededException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServerTooBusyException" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.ServiceActivationException" /> class. </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeader">
      <summary>Represents a header that encapsulates an address information item used to identify or interact with an endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeader" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeader" /> class with a specified value, name and namespace.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressHeader" /> with the specified <paramref name="name" /> and <paramref name="ns" /> that contains the information item specified by <paramref name="value" />.</returns>
      <param name="name">The name of the address header.</param>
      <param name="ns">The namespace of the address header.</param>
      <param name="value">The information item for the address header.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> is null or <paramref name="name" />.Length == 0.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeader" /> class with a specified name and namespace that uses a specified formatter to serialize the information item from a specified object.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressHeader" /> with the specified <paramref name="name" /> and <paramref name="ns" /> that contains the information item specified by <paramref name="value" />.</returns>
      <param name="name">The name of the address header.</param>
      <param name="ns">The namespace of the address header.</param>
      <param name="value">The information item for the address header.</param>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> used to serialize the specified object in the <paramref name="value" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="serializer" /> is null or <paramref name="name" />.Length == 0.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.Equals(System.Object)">
      <summary>Determines whether the information item in a specified object is equal to the object contained in the current address header.</summary>
      <returns>true if the information item in a specified <paramref name="obj" /> is equivalent to the information item contained in the current address header; otherwise, false. In particular, returns false if <paramref name="obj" /> is null.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the object contained in the current address header.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetAddressHeaderReader">
      <summary>Returns an XML reader that can serialize the current address header object.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can serialize the current address header object.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetHashCode">
      <summary>Provides a unique hash code for an address header. </summary>
      <returns>A unique hash code for the current address header.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1">
      <summary>Deserializes the information item from the current address header to an object of a specified type.</summary>
      <returns>An instance of a class of type <paramref name="T" /> with its fields and properties set to the values supplied by the current address header object.</returns>
      <typeparam name="T">A class of type <paramref name="T" /> with its fields and properties set to the values supplied by the current address header object.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Deserializes the information item from the current address header to an object of a specified type that uses a specified formatter to serialize this information.</summary>
      <returns>An instance of a class of type <paramref name="T" /> with its fields and properties set to the values supplied by the current address header object.</returns>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> used to deserialize the information item from the current address header object.</param>
      <typeparam name="T">A class of type <paramref name="T" /> with its fields and properties set to the values supplied by the current address header object.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="serializer" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Name">
      <summary>When implemented, gets the name of the address header.</summary>
      <returns>The name of the address header.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Namespace">
      <summary>When implemented, gets the namespace of the address header.</summary>
      <returns>The namespace of the address header.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>When overridden in a derived class, is invoked when the address header contents are written to a stream or file.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header contents to a stream or file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>When overridden in a derived class, is invoked when the address header contents begin to be written to a stream or file.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.ToMessageHeader">
      <summary>Wraps the address header as a message header.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageHeader" /> that wraps the current address header.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the address header to a stream or file using a specified <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlWriter)">
      <summary>Writes the address header to a stream or file using a specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the address header contents to a stream or file.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header contents to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>Starts to write the address header contents to a stream or file.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the address header to a stream or file.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeaderCollection">
      <summary>Represents a thread-safe, read-only collection of address headers.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.AddressHeader})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> class from an enumerable set of address headers.</summary>
      <param name="addressHeaders">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> set of <see cref="T:System.ServiceModel.Channels.AddressHeader" /> objects used to initialize the collection.</param>
      <exception cref="T:System.ArgumentException">One of the address headers in the <paramref name="addressHeaders" /> parameter is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.AddHeadersTo(System.ServiceModel.Channels.Message)">
      <summary>Adds the headers in the collection to the headers of a specified message.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to which the headers are added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindAll(System.String,System.String)">
      <summary>Finds all the address headers in the collection with the specified name and namespace.</summary>
      <returns>The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.AddressHeader" /> that contains all the headers in the collection with the specified name and namespace.</returns>
      <param name="name">The name of the address header to be found.</param>
      <param name="ns">The namespace of the address header to be found.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="ns" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindHeader(System.String,System.String)">
      <summary>Finds the first address header in the collection with a specified name and namespace.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressHeader" /> in the collection with the specified name and namespace.</returns>
      <param name="name">The name of the address header to be found.</param>
      <param name="ns">The namespace of the address header to be found.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="ns" /> is null.</exception>
      <exception cref="T:System.ArgumentException">There is more than one header that has the specified <paramref name="name" /> and <paramref name="ns" />.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressingVersion">
      <summary>The WS-Addressing version associated with a SOAP message or understood by an endpoint.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.None">
      <summary>Gets the addressing version that indicates that no version of WS-Addressing is being used.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> that does not use a version of WS-Addressing.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressingVersion.ToString">
      <summary>A string that represents the current addressing version.</summary>
      <returns>The current addressing version.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.WSAddressing10">
      <summary>Gets an identifier for the address version associated with WS-Addressing 1.0.</summary>
      <returns>A singleton instance that identifies the <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> that is associated with WS-Addressing 1.0.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement">
      <summary>The binding element that specifies the .NET Binary Format for XML used to encode messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Builds the channel factory stack on the client that creates a specified type of channel for a specified context.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> for the specified context.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel.</param>
      <typeparam name="TChannel">The type of channel that the channel factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.Clone">
      <summary>Creates a new <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> object initialized from the current one.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> object with property values equal to those of the current element.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>Creates a factory for binary message encoders that employ the SOAP and WS-Addressing versions and the character encoding specified by the current encoding binding element.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> that this binding element creates.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.MessageVersion">
      <summary>Gets or sets the SOAP message and WS-Addressing versions that are used or expected.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that is used or expected.</returns>
      <exception cref="T:System.ArgumentNullException">The value set is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value set is an unsupported envelope version.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.Binding">
      <summary>Contains the binding elements that specify the protocols, transports, and message encoders used for communication between clients and services.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.Binding" /> class with a default name and namespace. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.Binding" /> class from a specified binding of the service.</summary>
      <param name="name">The <see cref="P:System.ServiceModel.Channels.Binding.Name" /> of the binding.</param>
      <param name="ns">The <see cref="P:System.ServiceModel.Channels.Binding.Namespace" /> of the binding.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is null or an empty string.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ns" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])">
      <summary>Builds the channel factory stack on the client that creates a specified type of channel and that satisfies the features specified by an object array.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> that satisfies the features specified by the collection.</returns>
      <param name="parameters">The object array that specifies requirements for the channel factory that is built.</param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
      <exception cref="T:System.InvalidOperationException">Transport element is missing or out of order or scheme is invalid or the message version is not specified.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Builds the channel factory stack on the client that creates a specified type of channel and that satisfies the features specified by a collection of binding parameters.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> that satisfies the features specified by the collection.</returns>
      <param name="parameters">The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> that specifies requirements for the channel factory built.</param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
      <exception cref="T:System.InvalidOperationException">Transport element is missing or out of order or scheme is invalid or the message version is not specified.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])">
      <summary>Returns a value that indicates whether the current binding can build a channel factory stack on the client that satisfies the requirements specified by an object array.</summary>
      <returns>true if the specified channel factory stack can be build on the client; otherwise, false.</returns>
      <param name="parameters">The object array that specifies requirements for the channel factory that is built.</param>
      <typeparam name="TChannel">The type of channel for which the factory is being tested.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Returns a value that indicates whether the current binding can build a channel factory stack on the client that satisfies the collection of binding parameters specified.</summary>
      <returns>true if the specified channel factory stack can be build on the client; otherwise, false.</returns>
      <param name="parameters">The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> that specifies requirements for the channel factory that is built.</param>
      <typeparam name="TChannel">The type of channel for which the factory is being tested.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.CloseTimeout">
      <summary>Gets or sets the interval of time provided for a connection to close before the transport raises an exception.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out. The default value is 1 minute.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero or too large.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
      <summary>When overridden in a derived class, creates a collection that contains the binding elements that are part of the current binding. </summary>
      <returns>A <see cref="T:System.Collections.Generic.ICollection`1" /> object of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> that contains the binding elements from the current binding object in the correct order.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the binding stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <param name="parameters">The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> that specifies requirements for the channel that is built.</param>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.MessageVersion">
      <summary>Gets the message version used by clients and services configured with the binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> used by clients and services configured with the binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Name">
      <summary>Gets or sets the name of the binding.</summary>
      <returns>The name of the binding. The default name is null.</returns>
      <exception cref="T:System.ArgumentException">The value set cannot be null or an empty string.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Namespace">
      <summary>Gets or sets the XML namespace of the binding.</summary>
      <returns>The XML namespace of the binding. The default value is "http://tempuri.org/".</returns>
      <exception cref="T:System.ArgumentNullException">The value set cannot be null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.OpenTimeout">
      <summary>Gets or sets the interval of time provided for a connection to open before the transport raises an exception.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out. The default value is 1 minute.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero or too large.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.ReceiveTimeout">
      <summary>Gets or sets the interval of time that a connection can remain inactive, during which no application messages are received, before it is dropped.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies how long the application has to receive a message before timing out. The default value is 10 minute.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero or too large.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Scheme">
      <summary>When implemented in a derived class, sets the URI scheme that specifies the transport used by the channel factories that are built by the bindings.</summary>
      <returns>The URI scheme that is used by the channels that are created by the factories built by the current binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.SendTimeout">
      <summary>Gets or sets the interval of time provided for a write operation to complete before the transport raises an exception.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies how long the write operation has to complete before timing out. The default value is 1 minute.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero or too large.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingContext">
      <summary>Provides information about the addresses, bindings, binding elements and binding parameters required to build the channel factories on a Silverlight version 4 Release Candidate client.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.#ctor(System.ServiceModel.Channels.CustomBinding,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingContext" /> class for a specified binding and collection of binding parameters.</summary>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.CustomBinding" /> for the channel.</param>
      <param name="parameters">The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> for the channel.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.Binding">
      <summary>Gets the binding for the channel built in the current context.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.CustomBinding" /> for the channel built in the current context.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.BindingParameters">
      <summary>Gets the collection of binding parameters for the channel built in the current context.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> for the channel built in the current context.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.BuildInnerChannelFactory``1">
      <summary>Builds the inner channel factory for channels of a specified type below the current channel factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <see cref="T:System.ServiceModel.Channels.IChannel" /> that represents the inner channel factory of the current channel factory.</returns>
      <typeparam name="TChannel">The type of <see cref="T:System.ServiceModel.Channels.IChannel" /> object the inner channel factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.CanBuildInnerChannelFactory``1">
      <summary>Returns a value that indicates whether the inner channel factory can produce a specified type of channel.</summary>
      <returns>true if the inner channel factory can produce the specified <paramref name="TChannel" />; otherwise, false.</returns>
      <typeparam name="TChannel">The type of <see cref="T:System.ServiceModel.Channels.IChannel" /> object the inner channel factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.Clone">
      <summary>Returns a copy of the current channel build context.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.BindingContext" /> object that is a copy of the current channel build context.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.GetInnerProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the binding stack.</summary>
      <returns>The typed object <paramref name="T " />requested if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.RemainingBindingElements">
      <summary>Gets the binding elements that are used by other binding elements to construct the channel stack.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the binding elements that are used by other binding elements to construct the channel stack.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElement">
      <summary>The elements of the bindings that build the channel factories for various types of channels that are used to process outgoing messages on a Silverlight client.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor(System.ServiceModel.Channels.BindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElement" /> class from a specified binding element.</summary>
      <param name="elementToBeCloned">The <see cref="T:System.ServiceModel.Channels.BindingElement" /> to be cloned.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Initializes a channel factory for producing channels of a specified type from the binding context.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> initialized from the <paramref name="context" />.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> that provides context for the binding element. </param>
      <typeparam name="TChannel">The type of channel the factory builds.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether the binding element can build a channel factory for a specific type of channel.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> can be built by the binding element; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> that provides context for the binding element. </param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.Clone">
      <summary>When overridden in a derived class, returns a copy of the binding element object.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.BindingElement" /> object that is a deep clone of the original.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>When overridden in a derived class, returns a typed object requested, if present, from the appropriate layer in the binding stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not present.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the binding element.</param>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElementCollection">
      <summary>Represents the collection of binding elements used in a binding.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> class from an enumerable set of binding elements.</summary>
      <param name="elements">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> of generic type <see cref="T:System.ServiceModel.Channels.BindingElement" /> used to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> class from an array of binding elements.</summary>
      <param name="elements">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> used to initialize the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.AddRange(System.ServiceModel.Channels.BindingElement[])">
      <summary>Adds binding elements from an array to the collection of binding elements.</summary>
      <param name="elements">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> to be added to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Clone">
      <summary>Creates a copy of the binding element collection.</summary>
      <returns>A copy of the <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Contains(System.Type)">
      <summary>Returns a value that indicates whether a specified type of binding element belongs to the collection of binding elements.</summary>
      <returns>true if the type of binding element specified is contained in the collection; otherwise, false.</returns>
      <param name="bindingElementType">The type of binding element being tested for inclusion in the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementType" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Find``1">
      <summary>Returns the first item of a specified type from the collection of binding elements.</summary>
      <returns>The item of type <see cref="T:System.Type" /> if found; if not found, 0 if <paramref name="T" /> is a value type and null if <paramref name="T" /> is a reference type.</returns>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to find.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.FindAll``1">
      <summary>Returns all of the items of a specified type from the collection of binding elements.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of all of the items of type <see cref="T:System.Type" /> if found; if none are found, 0 if <paramref name="T" /> is a value type and null if <paramref name="T" /> is a reference type.</returns>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to find.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.InsertItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>Inserts a binding element at a specified location within a collection of binding elements.</summary>
      <param name="index">The location at which to insert the binding element in the collection.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Channels.BindingElement" /> to be inserted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Remove``1">
      <summary>Removes a binding element of a specified type from the collection of binding elements.</summary>
      <returns>The item of type <see cref="T:System.Type" /> removed.</returns>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to find.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.RemoveAll``1">
      <summary>Removes all of the binding elements of a specified type from the collection of binding elements.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> of all of the items of type <see cref="T:System.Type" /> found.</returns>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to find.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.SetItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>Replaces a binding element at the specified index in the collection of binding elements.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the <see cref="T:System.ServiceModel.Channels.BindingElement" /> item at the specified <paramref name="index" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingParameterCollection">
      <summary>Represents a collection of binding parameters that store information used by binding elements to build factories.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingParameterCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> class. </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.BodyWriter">
      <summary>Represents the writer of the message body.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BodyWriter" /> class that explicitly indicates whether to buffer.</summary>
      <param name="isBuffered">true if the body writer can be called multiple times; otherwise false.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.CreateBufferedCopy(System.Int32)">
      <summary>Creates a buffered copy of the body.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.BodyWriter" /> that contains a copy of this object.</returns>
      <param name="maxBufferSize">The maximum size of the buffer for the body.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxBufferSize" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The body has already been written and cannot be written again, or the body writer is not buffered.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BodyWriter.IsBuffered">
      <summary>Gets a value that indicates whether the write method can be called multiple times.</summary>
      <returns>true if the body writer can be called multiple times; otherwise false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.OnCreateBufferedCopy(System.Int32)">
      <summary>Provides an extensibility point when the body contents are written.</summary>
      <returns>A  <see cref="T:System.ServiceModel.Channels.BodyWriter" /> with the specified maximum buffer size.</returns>
      <param name="maxBufferSize">The maximum size of the buffer for the body.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>When implemented, provides an extensibility point when the body contents are written.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write out the message body.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>Writes out the contents of the message body.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write out the message body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BufferManager">
      <summary>When implemented in a derived class, you can use the <see cref="T:System.ServiceModel.Channels.BufferManager" /> class to manage a buffer pool. The pool and its buffers are created when you instantiate this class and destroyed when the buffer pool is reclaimed by garbage collection. Every time you need to use a buffer, you take one from the pool, use it, and return it to the pool when done. This process is much faster and uses fewer resources than creating and destroying a buffer every time you need to use one.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.BufferManager" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.Clear">
      <summary>Releases the buffers currently cached in the manager.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.CreateBufferManager(System.Int64,System.Int32)">
      <summary>Creates a new BufferManager with a specified maximum buffer pool size and a maximum size for each individual buffer in the pool.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.BufferManager" /> object with the specified parameters.</returns>
      <param name="maxBufferPoolSize">The maximum size of the pool.</param>
      <param name="maxBufferSize">The maximum size of an individual buffer.</param>
      <exception cref="T:System.InsufficientMemoryException">There was insufficient memory to create the requested buffer pool.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxBufferPoolSize" /> or <paramref name="maxBufferSize" /> was less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.ReturnBuffer(System.Byte[])">
      <summary>Returns a buffer to the pool.</summary>
      <param name="buffer">A reference to the buffer being returned.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> reference cannot be null.</exception>
      <exception cref="T:System.ArgumentException">Length of <paramref name="buffer" /> does not match the pool's buffer length property.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.TakeBuffer(System.Int32)">
      <summary>Gets a buffer of at least the specified size from the pool. </summary>
      <returns>A byte array that is the requested size of the buffer.</returns>
      <param name="bufferSize">The size, in bytes, of the requested buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> cannot be less than zero.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelBase">
      <summary>Provides the base implementation for custom channels.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.#ctor(System.ServiceModel.Channels.ChannelManagerBase)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelBase" /> class. </summary>
      <param name="channelManager">The <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" /> that provides default timeouts for the channel operations (send, receive, open, and close).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="channelManager" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultCloseTimeout">
      <summary>Gets the default interval of time provided for a close operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultOpenTimeout">
      <summary>Gets the default interval of time provided for an open operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultReceiveTimeout">
      <summary>Gets the default interval of time provided for a receive operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the receive operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout">
      <summary>Gets the default interval of time provided for a send operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.GetProperty``1">
      <summary>Returns the typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested, if it is present, or null, if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.Manager">
      <summary>Gets the channel manager that is associated with the current channel.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" /> that is associated with the current channel.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>Gets the interval of time after which the close method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the close method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>Gets the interval of time after which the open method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the open method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>Gets the interval of time after which the receive method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the receive method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>Gets the interval of time after which the send method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the send method to time out.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase">
      <summary>Provides a common base implementation for all custom channel factories.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> class with specified default communication timeouts.</summary>
      <param name="timeouts">The <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" /> that specifies the default timeouts for open, send, receive, and close operations when exchanging messages. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultCloseTimeout">
      <summary>Gets the default interval of time provided for a close operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultOpenTimeout">
      <summary>Gets the default interval of time provided for an open operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultReceiveTimeout">
      <summary>Gets the default interval of time provided for a receive operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the receive operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultSendTimeout">
      <summary>Gets the default interval of time provided for a send operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.GetProperty``1">
      <summary>Returns the typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnAbort">
      <summary>Inserts processing on a communication object after it transitions to the closing state due to the invocation of a synchronous abort operation.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close each of the channels that were created by the factory.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous on close operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on close operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation on close completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous on close operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnClose(System.TimeSpan)">
      <summary>Inserts processing on a communication object after it transitions into the opening state, which must complete within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on close operation has to complete before timing out.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnEndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close channels that were opened by the factory.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase`1">
      <summary>Provides a common base implementation for channel factories on the client to create channels of a specified type connected to a specified address.</summary>
      <typeparam name="TChannel">The type of channel the factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> class with the default communication timeouts specified.</summary>
      <param name="timeouts">The <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" /> that specifies the default timeouts for open, send, receive, and close operations when exchanging messages.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>Creates a particular type of channel with a specified endpoint address.</summary>
      <returns>A channel of type <paramref name="TChannel" /> with the specified <paramref name="address" />.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> of the remote endpoint to which the channel sends messages.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>Creates a particular type of channel with specified transport and endpoint addresses.</summary>
      <returns>A channel of type <paramref name="TChannel" /> with the specified remote and transport addresses.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> of the remote endpoint to which the channel sends messages.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the output channel.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> or <paramref name="via" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnAbort">
      <summary>Aborts each channel managed by the channel factory.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close all the channels associated with the channel factory within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous on-close operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on-close operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous completion of the on-close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous on-close operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnClose(System.TimeSpan)">
      <summary>Closes all the channels associated with the channel factory within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on-close operation has to complete before timing out.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnCreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>When implemented in a derived class, provides an extensibility point when creating channels.</summary>
      <returns>A channel of type <paramref name="TChannel" /> with the specified addresses.</returns>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> of the remote endpoint to which the channel sends messages.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the output channel.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnEndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close all the channels associated with the channel factory within a specified interval of time.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.ValidateCreateChannel">
      <summary>Confirms that the channel factory is opened and ready to create channels.</summary>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.InvalidOperationException">The current channel factory is not in the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelManagerBase">
      <summary>Provides a base implementation for managing the default timeouts that are associated with channel and listener factories.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelManagerBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultReceiveTimeout">
      <summary>When overridden in a derived class, gets the default interval of time a channel has to complete the reception of a message.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the channel has to complete the reception of a message before timing out once the receive method has been invoked.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultSendTimeout">
      <summary>When overridden in a derived class, gets the default interval of time a channel has to complete the sending of a message.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the channel has to complete the sending of a message before timing out once the send method has been invoked.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>Gets the interval of time after which the close method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the close method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>Gets the interval of time after which the open method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the open method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>Gets the interval of time after which the receive method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the receive method to time out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>Gets the interval of time after which the send method, invoked by a communication object, times out.</summary>
      <returns>The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the send method to time out.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelParameterCollection">
      <summary>Represents a collection of channel parameters.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor(System.ServiceModel.Channels.IChannel)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> class. </summary>
      <param name="channel">The channel whose parameters are in this collection.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelParameterCollection.Channel">
      <summary>Gets the channel whose parameters are in this collection. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IChannel" /> whose parameters are in this collection.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.ClearItems">
      <summary>Clears the collection of parameters.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.InsertItem(System.Int32,System.Object)">
      <summary>Inserts the specified item into the collection using the specified index.</summary>
      <param name="index">The index of the item in the collection.</param>
      <param name="item">The item to add to the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.PropagateChannelParameters(System.ServiceModel.Channels.IChannel)">
      <summary>Adds the parameters in the current collection to a specified channel's <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" />.</summary>
      <param name="innerChannel">The channel that receives the current collection's parameters.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.RemoveItem(System.Int32)">
      <summary>Removes a parameter from the collection.</summary>
      <param name="index">Index of the parameter to remove.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.SetItem(System.Int32,System.Object)">
      <summary>Replaces an item in the collection at a specified index.</summary>
      <param name="index">Index of the item to replace.</param>
      <param name="item">Value of the replacement item.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.CommunicationObject">
      <summary>Provides a common base implementation for the basic state machine common to all communication-oriented objects in the system, including channels and the channel factories.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CommunicationObject" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CommunicationObject" /> class with the mutually exclusive lock to protect the state transitions specified.</summary>
      <param name="mutex">The mutually exclusive lock that protects the class instance during a state transition.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Abort">
      <summary>Causes a communication object to transition immediately from its current state into the closing state.</summary>
      <exception cref="T:System.InvalidOperationException">Either the base class <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" /> method or the base class <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnClosed" /> method is not called.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default interval of time that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object with a specified timeout.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous close operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous close operation.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Opened" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be modified.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
      <exception cref="T:System.TimeoutException">The default interval of time that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close a communication object within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous open operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous open operation.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Opened" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be modified.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close">
      <summary>Causes a communication object to transition from its current state into the closed state.</summary>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.Close" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.TimeoutException">The default interval of time that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)">
      <summary>Causes a communication object to transition from its current state into the closed state within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.Close" /> was called on an object in the <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closed">
      <summary>Occurs when a communication object transitions into the closed state.</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closing">
      <summary>Occurs when a communication object transitions into the closing state.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultCloseTimeout">
      <summary>When overridden in a derived class, gets the default interval of time provided for a close operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the close operation has to complete before timing out.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultOpenTimeout">
      <summary>When overridden in a derived class, gets the default interval of time provided for an open operation to complete.</summary>
      <returns>The default <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to close a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to open a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Fault">
      <summary>Causes a communication object to transition from its current state into the faulted state.</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Faulted">
      <summary>Occurs when a communication object transitions into the faulted state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType">
      <summary>Gets the type of communication object.</summary>
      <returns>The type of communication object.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed">
      <summary>Gets a value that indicates whether the communication object has been disposed.</summary>
      <returns>true if the communication object is in a closed state; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnAbort">
      <summary>When implemented in a derived class, inserts processing on a communication object after it transitions to the closing state due to the invocation of a synchronous abort operation.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, inserts processing after a communication object transitions to the closing state due to the invocation of an asynchronous close operation.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous on close operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on close operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous on close operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous on close operation.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, inserts processing on a communication object after it transitions to the opening state due to the invocation of an asynchronous open operation.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous on open operation. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on open operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives notification of the completion of the asynchronous on open operation.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous on open operation.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClose(System.TimeSpan)">
      <summary>When implemented in a derived class, inserts processing on a communication object after it transitions to the closing state due to the invocation of a synchronous close operation.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on close operation has to complete before timing out.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosed">
      <summary>Invoked during the transition of a communication object into the closing state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosing">
      <summary>Invoked during the transition of a communication object into the closing state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)">
      <summary>When implemented in a derived class, completes an asynchronous operation on the close of a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)" /> method.</param>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)">
      <summary>When implemented in a derived class, completes an asynchronous operation on the open of a communication object.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that is returned by a call to the <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)" /> method.</param>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted">
      <summary>Inserts processing on a communication object after it transitions to the faulted state due to the invocation of a synchronous fault operation.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpen(System.TimeSpan)">
      <summary>When implemented in a derived class, inserts processing on a communication object after it transitions into the opening state which must complete within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the on open operation has to complete before timing out.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpened">
      <summary>Invoked during the transition of a communication object into the opened state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpening">
      <summary>Invoked during the transition of a communication object into the opening state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open">
      <summary>Causes a communication object to transition from the created state into the opened state.</summary>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Opened" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be modified.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
      <exception cref="T:System.TimeoutException">The default interval of time that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)">
      <summary>Causes a communication object to transition from the created state into the opened state within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the open operation has to complete before timing out.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Opened" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be modified.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
      <exception cref="T:System.TimeoutException">The interval of time specified by <paramref name="timeout" /> that was allotted for the operation was exceeded before the operation was completed.</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opened">
      <summary>Occurs when a communication object transitions into the opened state.</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opening">
      <summary>Occurs when a communication object transitions into the opening state.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.State">
      <summary>Gets a value that indicates the current state of the communication object.</summary>
      <returns>A value from the <see cref="T:System.ServiceModel.CommunicationState" /> enumeration that indicates the current state of the object.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.ThisLock">
      <summary>Gets the mutually exclusive lock that protects the class instance during a state transition.</summary>
      <returns>The mutually exclusive lock that protects the class instance during a state transition.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed">
      <summary>Throws an exception if the communication object is disposed.</summary>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable">
      <summary>Throws an exception if the communication object the <see cref="P:System.ServiceModel.Channels.CommunicationObject.State" /> property is not set to the <see cref="F:System.ServiceModel.CommunicationState.Created" /> state.</summary>
      <exception cref="T:System.InvalidOperationException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Opening" /> or <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen">
      <summary>Throws an exception if the communication object is not in the <see cref="F:System.ServiceModel.CommunicationState.Opened" /> state.</summary>
      <exception cref="T:System.InvalidOperationException">The communication object is not in a <see cref="F:System.ServiceModel.CommunicationState.Created" /> or <see cref="F:System.ServiceModel.CommunicationState.Opening" /> state and cannot be used.</exception>
      <exception cref="T:System.ObjectDisposedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Closing" /> or <see cref="F:System.ServiceModel.CommunicationState.Closed" /> state and cannot be modified.</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">The communication object is in a <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> state and cannot be modified.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.CustomBinding">
      <summary>Defines a binding from a list of binding elements. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class with the binding elements from a complete channel stack.</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> that contains the binding elements of the channel stack in top-down order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.Binding)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class from the values of a specified binding.</summary>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> that is used to initialize the custom binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class from an array of binding elements.</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> used to initialize the custom binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.String,System.String,System.ServiceModel.Channels.BindingElement[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.CustomBinding" /> class from an array of binding elements with a specified name and namespace.</summary>
      <param name="name">The name of the binding.</param>
      <param name="ns">The namespace of the binding.</param>
      <param name="bindingElementsInTopDownChannelStackOrder">The <see cref="T:System.Array" /> of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> used to initialize the custom binding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.CreateBindingElements">
      <summary>Returns a generic collection of the binding elements from the custom binding.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> object of type <see cref="T:System.ServiceModel.Channels.BindingElement" /> that contains the binding elements from the custom binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Elements">
      <summary>Gets the binding elements from the custom binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the binding elements from the custom binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Scheme">
      <summary>Gets the URI scheme for transport used by the custom binding.</summary>
      <returns>The URI scheme for transport used by the custom binding; or an empty string if there is no transport (<see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> is null).</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.FaultConverter">
      <summary>Converts exceptions thrown by a channel into SOAP fault messages that conform to the channel's protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.FaultConverter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.GetDefaultFaultConverter(System.ServiceModel.Channels.MessageVersion)">
      <summary>Gets the default fault converter.</summary>
      <returns>An instance of the <see cref="T:System.ServiceModel.Channels.FaultConverter" />.</returns>
      <param name="version">The <see cref="T:System.ServiceModel.Channels.MessageVersion" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)">
      <summary>When implemented in a derived class, tries to create the exception.</summary>
      <returns>true if fault was successfully converted; otherwise, false. The default is false.</returns>
      <param name="message">The fault <see cref="T:System.ServiceModel.Channels.Message" />.</param>
      <param name="fault">The fault.</param>
      <param name="exception">If the conversion is successful, the SOAP <see cref="T:System.Exception" /> returned as an out parameter.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateFaultMessage(System.Exception,System.ServiceModel.Channels.Message@)">
      <summary>When implemented in a derived class, tries to create the fault message after the fault has been converted to a SOAP exception.</summary>
      <returns>true if fault message was successfully created; otherwise, false. The default is false.</returns>
      <param name="exception">The SOAP exception.</param>
      <param name="message">The fault message returned as an out parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> returned true but <paramref name="message" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.TryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)">
      <summary>Wraps <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> with error checking.</summary>
      <returns>true if fault was successfully converted; otherwise, false. The default is false.</returns>
      <param name="message">The fault message.</param>
      <param name="fault">The fault.</param>
      <param name="exception">If conversion is successful, the SOAP exception, returned as an out parameter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> or <paramref name="fault" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> returned true, but <paramref name="exception" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> returned false, but <paramref name="exception" /> is not null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement">
      <summary>Enables management of how HTTP cookies are handled in HTTP requests and responses.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.#ctor(System.ServiceModel.Channels.HttpCookieContainerBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" /> class from a specified binding element.</summary>
      <param name="elementToBeCloned">The <see cref="T:System.ServiceModel.Channels.BindingElement" /> to be cloned.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Initializes a channel factory for producing channels of a specified type from the binding context.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> initialized from the <paramref name="context" />.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> that provides context for the binding element.</param>
      <typeparam name="TChannel">The type of channel that the factory builds.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.Clone">
      <summary>Returns a copy of the current binding element object.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElement" /> object that is a deep clone of the original.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the binding stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present, or null if it is not present.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the binding element.</param>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpRequestMessageProperty">
      <summary>Provides access to the HTTP request to access and respond to the additional information that is made available for requests over the HTTP protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpRequestMessageProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpRequestMessageProperty" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Headers">
      <summary>Gets the HTTP headers from the HTTP request.</summary>
      <returns>A <see cref="T:System.Net.WebHeaderCollection" /> that contains the HTTP headers in the HTTP request.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Method">
      <summary>Gets or sets the HTTP verb for the HTTP request.</summary>
      <returns>The HTTP verb for the HTTP request.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> set is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Name">
      <summary>Gets the name of the message property associated with the <see cref="T:System.ServiceModel.Channels.HttpRequestMessageProperty" /> class.</summary>
      <returns>The value "httpRequest".</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.QueryString">
      <summary>Gets or sets the query string for the HTTP request.</summary>
      <returns>The query string from the HTTP request.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> set is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.SuppressEntityBody">
      <summary>Gets or sets a value that indicates whether the body of the message is ignored and only the headers are sent.</summary>
      <returns>true if the message body is suppressed; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpResponseMessageProperty">
      <summary>Provides access to the HTTP response in order to access and respond to the additional information made available for requests over the HTTP protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpResponseMessageProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpResponseMessageProperty" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.Headers">
      <summary>Gets the HTTP headers from the HTTP response.</summary>
      <returns>Returns a <see cref="T:System.Net.WebHeaderCollection" /> that contains the HTTP headers in the HTTP response.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.Name">
      <summary>Gets the name of the message property associated with the <see cref="T:System.ServiceModel.Channels.HttpResponseMessageProperty" /> class.</summary>
      <returns>Returns “httpResponse”.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusCode">
      <summary>Gets or sets the status code of the current HTTP response to which this property is attached.</summary>
      <returns>The <see cref="T:System.Net.HttpStatusCode" /> to send on the HTTP response.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is set to less than 100 or greater than 599.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusDescription">
      <summary>Gets or sets the description of the status code of the current HTTP response to which this property is attached.</summary>
      <returns>The status description to send for the HTTP response.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpsTransportBindingElement">
      <summary>Represents the binding element used to specify an HTTPS transport for transmitting messages. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.#ctor(System.ServiceModel.Channels.HttpsTransportBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> class.</summary>
      <param name="elementToBeCloned">An instance of the <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> class.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel factory of a specified type that can be used to create a channel.</summary>
      <returns>A channel factory of the specified type that is configured based on the values set in the transport binding element.</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> members that describe bindings, behaviors, contracts and other information required to create the channel factory.</param>
      <typeparam name="TChannel">Type of channel.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> cannot be null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.Clone">
      <summary>Creates a copy of the current binding element.</summary>
      <returns>A copy of the current binding element.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpsTransportBindingElement.Scheme">
      <summary>Returns the URI scheme for the transport.</summary>
      <returns>The URI scheme for the transport, which is "HTTPS".</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpTransportBindingElement">
      <summary>Represents the binding element used to specify an HTTP transport for transmitting messages. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.#ctor(System.ServiceModel.Channels.HttpTransportBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> class. </summary>
      <param name="elementToBeCloned">An instance of the <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> class.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel factory that can be used to create a channel.</summary>
      <returns>A channel factory of the specified type.</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> members that describe bindings, behaviors, contracts and other information required to create the channel factory.</param>
      <typeparam name="TChannel">Type of channel factory.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> cannot be null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Determines whether a channel factory of the specified type can be built.</summary>
      <returns>true if a channel factory can be built; otherwise false.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" />for the channel to be built.</param>
      <typeparam name="TChannel">The type of channel to check.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.Clone">
      <summary>Creates a copy of the current binding element.</summary>
      <returns>A copy of the current binding element.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</summary>
      <returns>The property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</returns>
      <param name="context">A <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="T">The property to get.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.MaxBufferSize">
      <summary>Gets or sets the maximum size of the buffer to use. For buffered messages this value is the same as <see cref="P:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize" />. For streamed messages, this value is the maximum size of the SOAP headers, which must be read in buffered mode.</summary>
      <returns>The maximum size, in bytes, of the buffer. </returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.Scheme">
      <summary>Gets the URI scheme for the transport.</summary>
      <returns>Returns <see cref="F:System.Uri.UriSchemeHttp" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.TransferMode">
      <summary>Gets or sets a value that indicates whether messages are sent buffered or streamed.</summary>
      <returns>One of the following member values of <see cref="P:System.ServiceModel.Channels.HttpTransportBindingElement.TransferMode" />:<see cref="F:System.ServiceModel.TransferMode.Buffered" /><see cref="F:System.ServiceModel.TransferMode.StreamedResponse" /></returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannel">
      <summary>Defines the basic interface that all channel objects must implement. It requires that they implement the state machine interface shared by all communication objects and that they implement a method to retrieve objects from the channel stack. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannel.GetProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory">
      <summary>Defines the interface that must be implemented by a channel factory to produce channels.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory.GetProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested, if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory`1">
      <summary>Defines the interface that must be implemented by channel factories that create type-specific channels.</summary>
      <typeparam name="TChannel">The type of channel that the channel factory creates.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>Creates a channel of a specified type to a specified endpoint address.</summary>
      <returns>A channel of type <paramref name="TChannel" /> to the specified endpoint address.</returns>
      <param name="to">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>Creates a channel of a specified type to a specified endpoint address and transport address to which messages are sent.</summary>
      <returns>A channel of type <paramref name="TChannel" /> to the specified endpoint address and transport address.</returns>
      <param name="to">The <see cref="T:System.ServiceModel.EndpointAddress" /> that provides the location of the service.</param>
      <param name="via">The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexChannel">
      <summary>Defines the interface that a channel must implement to both send and receive messages.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSession">
      <summary>Defines the interface for the session implemented on each side of a bi-directional communication between messaging endpoints.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to terminate the outbound session.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous outbound session termination.</returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">An object that contains state information for this request.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to terminate the outbound session with a specified timeout within which the operation must complete.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous outbound session termination.</returns>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which the operation must complete.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">An object that contains state information for this request. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession">
      <summary>Terminates the outbound session that indicates that no more messages will be sent from this endpoint on the channel associated with the session. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession(System.TimeSpan)">
      <summary>Terminates the outbound session that indicates that no more messages will be sent from this endpoint on the channel associated with the session within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which the operation must complete.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.EndCloseOutputSession(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to terminate the outbound session that indicates that no more messages will be sent from this endpoint on the channel associated with the session. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession" /> methods.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSessionChannel">
      <summary>Defines the interface that associates a duplex channel with a session.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IHttpCookieContainerManager">
      <summary>Defines the interface used to provide access to an optional instance of <see cref="T:System.Net.CookieContainer" /> that can be used to manage a collection of cookies.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.IHttpCookieContainerManager.CookieContainer">
      <summary>Gets or sets the <see cref="T:System.Net.CookieContainer" /> object to be used, if one is to be used.</summary>
      <returns>The <see cref="T:System.Net.CookieContainer" /> to use, if a container is to be used, or null if a container is not to be used.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputChannel">
      <summary>Defines the interface that a channel must implement to receive a message. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message that has a state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message reception. </returns>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for a message to become available.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for a message to become available.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a message to arrive.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for a message to become available.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to receive a message. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received. </returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
      <summary>Completes the specified asynchronous operation to receive a message.</summary>
      <returns>true if a message is received before the specified interval of time elapses; otherwise false.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> received. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
      <summary>Completes the specified asynchronous wait-for-a-message operation.</summary>
      <returns>true if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise false.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
      <summary>Gets the address on which the input channel receives messages. </summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> on which the input channel receives messages. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive">
      <summary>Returns the message received, if one is available. If a message is not available, blocks for a default interval of time.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
      <summary>Returns the message received, if one is available. If a message is not available, blocks for a specified interval of time.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received. </returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the receive operation has to complete before timing out and throwing a <see cref="T:System.TimeoutException" />.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
      <summary>Tries to receive a message within a specified interval of time. </summary>
      <returns>true if a message is received before the <paramref name="timeout" /> has been exceeded; otherwise false.</returns>
      <param name="timeout">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</param>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> received. </param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
      <summary>Returns a value that indicates whether a message has arrived within a specified interval of time.</summary>
      <returns>true if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise false.</returns>
      <param name="timeout">The <see cref="T:System.Timespan" /> specifies the maximum interval of time to wait for a message to arrive before timing out.</param>
      <exception cref="T:System.TimeoutException">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The timeout specified is less than zero.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSession">
      <summary>Defines the interface for the session implemented on the receiving side of a one-way communication between messaging endpoints. </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSessionChannel">
      <summary>Defines the interface that associates an input channel with a session.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IMessageProperty">
      <summary>Defines an interface that you can implement to describe a set of properties for a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IMessageProperty.CreateCopy">
      <summary>Creates a copy of the current instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.IMessageProperty" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputChannel">
      <summary>Defines the interface that a channel must implement to send a message. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a message to the destination of the output channel. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel. </param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate. </param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a message to the destination of the output channel within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous send operation.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation send completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous send operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.EndSend(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to transmit a message to the destination of the output channel. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IOutputChannel.BeginSend" /> method. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.RemoteAddress">
      <summary>Gets the destination of the service to which messages are sent out on the output channel. </summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the service to which the output channel sends messages. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message)">
      <summary>Transmits a message to the destination of the output channel. </summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>Sends a message on the current output channel within a specified interval of time.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> being sent on the output channel.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies how long the send operation has to complete before timing out.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.Via">
      <summary>Gets the URI that contains the transport address to which messages are sent on the output channel.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which messages are sent on the output channel.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSession">
      <summary>Defines the interface for the session implemented on the sending side of a one-way communication between messaging endpoints. </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSessionChannel">
      <summary>Defines the interface that associates an output channel with a session.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestChannel">
      <summary>Defines the contract that a channel must implement to be on the requesting side of a request-reply communication between messaging endpoints. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a request message to the reply-side of a request-reply message exchange. </summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to transmit a request message to the reply-side of a request-reply message exchange within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous message transmission. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received. (On the defaults, see the remarks.)</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the completion of the asynchronous operation transmitting a request message.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous operation transmitting a request message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.EndRequest(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to return a message-based response to a transmitted request. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> method. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.RemoteAddress">
      <summary>Gets the remote address to which the request channel sends messages. </summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> to which the request channel sends messages. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message)">
      <summary>Sends a message-based request and returns the correlated message-based response. </summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>Sends a message-based request and returns the correlated message-based response within a specified interval of time.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> received in response to the request. </returns>
      <param name="message">The request <see cref="T:System.ServiceModel.Channels.Message" /> to be transmitted.</param>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> that specifies the interval of time within which a response must be received.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.Via">
      <summary>Gets the transport address to which the request is send.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the transport address to which the message is sent.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestSessionChannel">
      <summary>Defines the interface to associate a request channel with a session.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.ISession">
      <summary>Defines the interface to establish a shared context among parties that exchange messages by providing an ID for the communication session. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ISession.Id">
      <summary>Gets the ID that uniquely identifies the session. </summary>
      <returns>The ID that uniquely identifies the session. </returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ISessionChannel`1">
      <summary>Defines the interface that associates a channel with a specific type of session.</summary>
      <typeparam name="TSession">The type of <see cref="T:System.ServiceModel.Channels.ISession" /> associated with the channel.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ISessionChannel`1.Session">
      <summary>Gets the type of session associated with the channel.</summary>
      <returns>The generic parameter <paramref name="TSession" /> that defines the session associated with the channel.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.LocalClientSecuritySettings">
      <summary>Specifies local client security settings.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.LocalClientSecuritySettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.LocalClientSecuritySettings.Clone">
      <summary>Creates a new instance of this class that is a copy of the current instance.</summary>
      <returns>A new cloned instance of <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.MaxClockSkew">
      <summary>Gets or sets the maximum allowable time difference between the system clocks of the two parties that are communicating. </summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents the maximum allowable time difference between the system clocks of the two parties that are communicating. The default is 5 minutes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property value is less than 0.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.ReplayWindow">
      <summary>Gets or sets the maximum time that a message nonce is valid.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents the maximum time that a message nonce is valid. The default is five minutes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property value is less than 0.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.TimestampValidityDuration">
      <summary>Gets or sets the maximum duration that the messages are valid when sent by the client. If a message is received by the service after this duration, it should discard the message.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that represents the maximum duration that the messages are valid when sent by the client. The default is five minutes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property value is less than 0.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.Message">
      <summary>Represents the unit of communication between endpoints in a distributed environment. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.Message" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.Close">
      <summary>Closes the <see cref="T:System.ServiceModel.Channels.Message" /> and releases any resources. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String)">
      <summary>Creates a message that contains a version and an action.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message.</param>
      <param name="action">A description of how the message should be processed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> or <paramref name="action" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object)">
      <summary>Creates a message with the specified version, action and body. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">The body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="action" /> or <paramref name="body" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Creates a message using the specified version, action, message body and serializer.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">The body of the message. </param>
      <param name="serializer">A <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="fault" /> or <paramref name="action" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.ServiceModel.Channels.BodyWriter)">
      <summary>Creates a message with a body that consists of an array of bytes. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">A <see cref="T:System.ServiceModel.Channels.BodyWriter" /> of type byte. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="action" /> or <paramref name="body" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlDictionaryReader)">
      <summary>Creates a message with the specified version, action and body. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">The body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="action" /> or <paramref name="body" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlReader)">
      <summary>Creates a message using the specified reader, action and version. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message. </param>
      <param name="action">A description of how the message should be processed. </param>
      <param name="body">The <see cref="T:System.Xml.XmlReader" /> object to be used for reading the SOAP message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />, <paramref name="action" /> or <paramref name="body" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.Xml.XmlDictionaryReader,System.Int32,System.ServiceModel.Channels.MessageVersion)">
      <summary>Creates a message using a specified dictionary reader, size allocation for the message headers, and version.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="envelopeReader">The <see cref="T:System.Xml.XmlDictionaryReader" /> object to be used for reading the SOAP message.</param>
      <param name="maxSizeOfHeaders">The maximum size in bytes of the message headers.</param>
      <param name="version">A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that specifies the SOAP version to use for the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeReader" /> or <paramref name="version" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.Xml.XmlReader,System.Int32,System.ServiceModel.Channels.MessageVersion)">
      <summary>Creates a message using a specified XML reader, size allocation for the message headers, and version.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> object for the message created. </returns>
      <param name="envelopeReader">The <see cref="T:System.Xml.XmlDictionaryReader" /> object to be used for reading the SOAP message.</param>
      <param name="maxSizeOfHeaders">The maximum size in bytes of a header. </param>
      <param name="version">A valid <see cref="T:System.ServiceModel.Channels.MessageVersion" /> value that specifies the SOAP version to use for the message. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeReader" /> or <paramref name="version" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1">
      <summary>Retrieves the body of this <see cref="T:System.ServiceModel.Channels.Message" /> instance.</summary>
      <returns>An object of type <paramref name="T" /> that contains the body of this message.</returns>
      <typeparam name="T">The body of the message.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Retrieves the body of this <see cref="T:System.ServiceModel.Channels.Message" /> using the specified serializer.</summary>
      <returns>An object of type <paramref name="T" /> that contains the body of this message.</returns>
      <param name="serializer">A <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <typeparam name="T">The body of the message.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializer" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBodyAttribute(System.String,System.String)">
      <summary>Retrieves the attributes of the message body.</summary>
      <returns>The attributes of the message body.</returns>
      <param name="localName">The local name of the XML node.The name of the element that corresponds to this member. This string must be a valid XML element name.</param>
      <param name="ns">The namespace to which this XML element belongs.The namespace URI of the element that corresponds to this member. The system does not validate any URIs other than transport addresses.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> or <paramref name="ns" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message has been copied, read or written.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetReaderAtBodyContents">
      <summary>Gets the XML dictionary reader that accesses the body content of this message.</summary>
      <returns>A <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message is empty, or has been copied, read or written.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Headers">
      <summary>When overridden in a derived class, gets the headers of the message. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> object that represents the headers of the message. </returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsDisposed">
      <summary>Returns a value that indicates whether the <see cref="T:System.ServiceModel.Channels.Message" /> is disposed. </summary>
      <returns>true if the message is disposed; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsEmpty">
      <summary>Returns a value that indicates whether the <see cref="T:System.ServiceModel.Channels.Message" /> is empty. </summary>
      <returns>true if the message is empty; otherwise, false. </returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsFault">
      <summary>Gets a value that indicates whether this message generates any SOAP faults.</summary>
      <returns>true if this message generates any SOAP faults; otherwise, false.</returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnBodyToString(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the message body is converted to a string.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to convert the message body to a string. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnClose">
      <summary>Called when the message is closing.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnCreateBufferedCopy(System.Int32)">
      <summary>Called when a message buffer is created to store this message.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageBuffer" />.</returns>
      <param name="maxBufferSize">The maximum size of the buffer to be created.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetBodyAttribute(System.String,System.String)">
      <summary>Called when the attributes of the message body is retrieved.</summary>
      <returns>The attributes of the message body.</returns>
      <param name="localName">The local name of the XML node.The name of the element that corresponds to this member. This string must be a valid XML element name.</param>
      <param name="ns">The namespace to which this XML element belongs.The namespace URI of the element that corresponds to this member. The system does not validate any URIs other than transport addresses.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetReaderAtBodyContents">
      <summary>Called when an XML dictionary reader that can access the body content of this message can be retrieved.</summary>
      <returns>A <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the message body is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write this message body to an XML file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the entire message is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write this message to an XML file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the start body is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write the start body to an XML file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the start envelope is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write the start envelope to an XML file.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartHeaders(System.Xml.XmlDictionaryWriter)">
      <summary>Called when the start header is written to an XML file.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlDictionaryWriter" /> that is used to write the start header to an XML file.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Properties">
      <summary>When overridden in a derived class, gets a set of processing-level annotations to the message. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageProperties" /> that contains a set of processing-level annotations to the message.</returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.State">
      <summary>Gets the current state of this <see cref="T:System.ServiceModel.Channels.Message" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageState" /> that contains the current state of this <see cref="T:System.ServiceModel.Channels.Message" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.System#IDisposable#Dispose">
      <summary>Closes all the resources used by this message. This method cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.ServiceModel.Channels.Message" />. </summary>
      <returns>The current <see cref="T:System.ServiceModel.Channels.Message" />. </returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Version">
      <summary>When overridden in a derived class, gets the SOAP and WS-Addressing versions of the message. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object that represents the SOAP and WS-Addressing versions used by the message. </returns>
      <exception cref="T:System.ObjectDisposedException">The message has been disposed of.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the body element using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the body element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlWriter)">
      <summary>Serializes the message body using the specified <see cref="T:System.Xml.XmlWriter" />. </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to be used to write the body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The message is disposed. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the body content using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the body element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " />is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message has been copied, read or written.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the entire message using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message has been copied, read or written.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlWriter)">
      <summary>Serializes the entire message using the specified <see cref="T:System.Xml.XmlWriter" />. </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> object to be used to write the body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
      <exception cref="T:System.ObjectDisposedException">The message is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The message has been copied, read or written.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the start body using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the start body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlWriter)">
      <summary>Serializes the start body using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the start body of the message.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null. </exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the start envelope using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> object to be used to write the start envelope.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " />is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageBuffer">
      <summary>Represents a memory buffer that stores an entire message for future consumption.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.BufferSize">
      <summary>Gets the approximate number of bytes accessed by this <see cref="T:System.ServiceModel.Channels.MessageBuffer" />. </summary>
      <returns>The approximate number of bytes accessed by this <see cref="T:System.ServiceModel.Channels.MessageBuffer" />. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.Close">
      <summary>Finishes working with the buffer.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.CreateMessage">
      <summary>Returns a copy of the original message.</summary>
      <returns>An identical copy of the original <see cref="T:System.ServiceModel.Channels.Message" /> instance you previously provided to the <see cref="M:System.ServiceModel.Channels.Message.CreateBufferedCopy(System.Int32)" /> method of a <see cref="T:System.ServiceModel.Channels.Message" /> instance. </returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.MessageContentType">
      <summary>Gets the type of message content stored in this buffer.</summary>
      <returns>The type of message content stored in this buffer.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.System#IDisposable#Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> and optionally releases the managed resources. This method cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.WriteMessage(System.IO.Stream)">
      <summary>Writes the entire content of this buffer to the specified I/O stream.</summary>
      <param name="stream">An I/O stream that the entire content of this buffer is written to.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoder">
      <summary>The encoder is the component that is used to write messages to a stream and to read messages from a stream.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
      <summary>When overridden in a derived class, gets the MIME content type used by the encoder.</summary>
      <returns>The content type that is supported by the message encoder.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T " />requested if it is present or null if it is not.</returns>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
      <summary>Returns a value that indicates whether a specified message-level content-type value is supported by the message encoder.</summary>
      <returns>true if the message-level content-type specified is supported; otherwise false.</returns>
      <param name="contentType">The message-level content-type being tested.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MediaType">
      <summary>When overridden in a derived class, gets the media type value that is used by the encoder.</summary>
      <returns>The media type that is supported by the message encoder.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MessageVersion">
      <summary>When overridden in a derived class, gets the message version value that is used by the encoder.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that is used by the encoder.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
      <summary>When overridden in a derived class, reads a message from a specified buffer.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that is read from the buffer specified.</returns>
      <param name="buffer">A <see cref="T:System.ArraySegment`1" /> of type <see cref="T:System.Byte" /> that provides the buffer from which the message is deserialized.</param>
      <param name="bufferManager">The <see cref="T:System.ServiceModel.Channels.BufferManager" /> that manages the buffer from which the message is deserialized.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
      <summary>When overridden in a derived class, reads a message from a specified stream.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that is read from the stream specified.</returns>
      <param name="buffer">A <see cref="T:System.ArraySegment`1" /> of type <see cref="T:System.Byte" /> that provides the buffer from which the message is deserialized.</param>
      <param name="bufferManager">The <see cref="T:System.ServiceModel.Channels.BufferManager" /> that manages the buffer from which the message is deserialized.</param>
      <param name="contentType">The Multipurpose Internet Mail Extensions (MIME) message-level content-type.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32)">
      <summary>When overridden in a derived class, reads a message from a specified stream.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that is read from the stream specified.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object from which the message is read.</param>
      <param name="maxSizeOfHeaders">The maximum size of the headers that can be read from the message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
      <summary>When overridden in a derived class, reads a message from a specified stream.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that is read from the stream specified.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object from which the message is read.</param>
      <param name="maxSizeOfHeaders">The maximum size of the headers that can be read from the message.</param>
      <param name="contentType">The Multipurpose Internet Mail Extensions (MIME) message-level content-type.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ToString">
      <summary>Returns the content type that is used by the message encoder.</summary>
      <returns>The content type that is used by the message encoder.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager)">
      <summary>Writes a message less than a specified size to a byte array buffer.</summary>
      <returns>A <see cref="T:System.ArraySegment`1" /> of type byte that provides the buffer to which the message is serialized.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to write to the message buffer.</param>
      <param name="maxMessageSize">The maximum message size that can be written.</param>
      <param name="bufferManager">The <see cref="T:System.ServiceModel.Channels.BufferManager" /> that manages the buffer to which the message is written.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
      <summary>When overridden in a derived class, writes a message of less than a specified size to a byte array buffer at the specified offset.</summary>
      <returns>A <see cref="T:System.ArraySegment`1" /> of type byte that provides the buffer to which the message is serialized.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to write to the message buffer.</param>
      <param name="maxMessageSize">The maximum message size that can be written.</param>
      <param name="bufferManager">The <see cref="T:System.ServiceModel.Channels.BufferManager" /> that manages the buffer to which the message is written.</param>
      <param name="messageOffset">The offset of the segment that begins from the start of the byte array that provides the buffer.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
      <summary>When overridden in a derived class, writes a message to a specified stream.</summary>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to write to the <paramref name="stream" />.</param>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object to which the <paramref name="message" /> is written.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoderFactory">
      <summary>An abstract base class that represents the factory for producing message encoders that can read messages from a stream and write them to a stream for various types of message encoding.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.CreateSessionEncoder">
      <summary>Returns a message encoder that can be used to correlate messages in session-based exchanges.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> that is used in session-based exchanges of messages.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.Encoder">
      <summary>When overridden in a derived class, gets the message encoder that is produced by the factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> used by the factory.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.MessageVersion">
      <summary>When overridden in a derived class, gets the message version that is used by the encoders produced by the factory to encode messages.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> used by the factory.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncodingBindingElement">
      <summary>The binding element that specifies the message version used to encode messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageEncodingBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> class initialized from an existing element.</summary>
      <param name="elementToBeCloned">The <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> to be cloned.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>When overridden in a derived class, creates a factory for producing message encoders.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> used to produce message encoders.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns the typed object requested, if present, from the appropriate layer in the channel stack.</summary>
      <returns>The typed object <paramref name="T" /> requested if it is present or null if it is not.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the current binding element.</param>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncodingBindingElement.MessageVersion">
      <summary>When overridden in a derived class, gets or sets the message version that can be handled by the message encoders produced by the message encoder factory.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> used by the encoders produced by the message encoder factory.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageFault">
      <summary>Represents an in-memory representation of a SOAP fault that can be passed to <see cref="Overload:System.ServiceModel.Channels.Message.CreateMessage" /> to create a message that contains a fault. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.#ctor">
      <summary>When called in a derived class, initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageFault" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Actor">
      <summary>Gets or sets the value of the actor.</summary>
      <returns>The value of the actor.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Code">
      <summary>Gets the SOAP fault code. </summary>
      <returns>A <see cref="T:System.ServiceModel.FaultCode" /> that contains the SOAP fault code.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.CreateFault(System.ServiceModel.Channels.Message,System.Int32)">
      <summary>Returns a new <see cref="T:System.ServiceModel.Channels.MessageFault" /> object that uses the specified <see cref="T:System.ServiceModel.Channels.Message" /> and the specified maximum buffer size for the message buffer.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageFault" /> object.</returns>
      <param name="message">The specified <see cref="T:System.ServiceModel.Channels.Message" /> to be used to create the <see cref="T:System.ServiceModel.Channels.MessageFault" /> object.</param>
      <param name="maxBufferSize">The specified maximum buffer size for the message buffer.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetDetail``1">
      <summary>Returns the detail object of the message fault.</summary>
      <returns>The detail object of the message fault.</returns>
      <typeparam name="T">Type of the detail object.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetDetail``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Returns the detail object that uses the specified <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</summary>
      <returns>The detail object contained in the <see cref="T:System.ServiceModel.Channels.MessageFault" />.</returns>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use when deserializing the detail object. </param>
      <typeparam name="T">The type of the detail object.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetReaderAtDetailContents">
      <summary>Returns an <see cref="T:System.Xml.XmlDictionaryReader" /> object that is positioned on the detail object of the <see cref="T:System.ServiceModel.Channels.MessageFault" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> object that is positioned on the detail object of the <see cref="T:System.ServiceModel.Channels.MessageFault" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.HasDetail">
      <summary>Gets a value that indicates whether the <see cref="T:System.ServiceModel.Channels.MessageFault" /> has a detail object.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageFault" /> has a detail object; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Node">
      <summary>Gets the SOAP node.</summary>
      <returns>The SOAP node that contains information about which SOAP node on a message path cause the fault.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnGetReaderAtDetailContents">
      <summary>When called in a derived class, returns an <see cref="T:System.Xml.XmlDictionaryReader" /> object that is positioned on the detail object of the <see cref="T:System.ServiceModel.Channels.MessageFault" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> object that is positioned on the detail object of the <see cref="T:System.ServiceModel.Channels.MessageFault" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteDetail(System.Xml.XmlDictionaryWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>Invoked prior to writing the detail contents.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the detail element.</param>
      <param name="version">The version of the SOAP envelope to write.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteDetailContents(System.Xml.XmlDictionaryWriter)">
      <summary>When overridden in a non-abstract derived class, writes the contents of the detail element. </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the detail element.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteStartDetail(System.Xml.XmlDictionaryWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>Writes the start element using the specified <see cref="T:System.Xml.XmlDictionaryWriter" /> and SOAP envelope version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the detail element.</param>
      <param name="version">The version of the SOAP envelope to write.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Reason">
      <summary>Gets a textual description of a SOAP fault. </summary>
      <returns>A <see cref="T:System.ServiceModel.FaultReason" /> that contains a textual description of a SOAP fault.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeader">
      <summary>Represents the content of a SOAP header.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeader" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Actor">
      <summary>Gets or sets the targeted recipient of the message header.</summary>
      <returns>The targeted recipient of the message header. The default is an empty string ("").</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
      <param name="actor">The targeted recipient of the message header.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String,System.Boolean)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
      <param name="actor">The targeted recipient of the message header.</param>
      <param name="relay">A value that indicates whether the header should be relayed.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Creates a header from an object to be serialized using the XmlFormatter. </summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
      <param name="actor">The targeted recipient of the message header.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String,System.Boolean)">
      <summary>Creates a new message header with the specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageHeader" />.</returns>
      <param name="name">The local name of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="value">The content of the header to be created.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <param name="mustUnderstand">A value that indicates whether the header must be understood.</param>
      <param name="actor">The targeted recipient of the message header.</param>
      <param name="relay">A value that indicates whether the header should be relayed.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.IsMessageVersionSupported(System.ServiceModel.Channels.MessageVersion)">
      <summary>Verifies whether the specified message version is supported.</summary>
      <returns>true if the specified message version is supported; otherwise, false.</returns>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.IsReferenceParameter">
      <summary>Gets a value that specifies whether this message header contains reference parameters of an endpoint reference.</summary>
      <returns>true if this message header contains reference parameters of an endpoint reference; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.MustUnderstand">
      <summary>Gets or sets a value that indicates whether the header must be understood, according to SOAP 1.1 or 1.2 specification. </summary>
      <returns>true if the header must be understood; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Called when the header content is serialized using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Called when the start header is serialized using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Relay">
      <summary>Gets a value that indicates whether the header should be relayed.</summary>
      <returns>true if the header should be relayed; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.ToString">
      <summary>Converts this message header to a string.</summary>
      <returns>The message header.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the header using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the header using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderAttributes(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the header contents using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the header contents using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>Serializes the start header using the specified XML writer. </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
      <param name="messageVersion">Contains information related to the version of SOAP associated with a message and its exchange.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaderInfo">
      <summary>Represents system information regarding a SOAP message header.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaderInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Actor">
      <summary>Gets or sets the intended recipient of the message header.</summary>
      <returns>A URI that indicates the intended recipient of the message header.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.IsReferenceParameter">
      <summary>Gets a value that specifies whether the message header represents reference parameters of an endpoint reference.</summary>
      <returns>true if the message header represents reference parameters of an endpoint reference; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.MustUnderstand">
      <summary>Gets or sets a value that indicates whether processing the message header is mandatory or optional.</summary>
      <returns>true if processing the message header is mandatory; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Name">
      <summary>Gets the name of the message header.</summary>
      <returns>The name of the message header.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Namespace">
      <summary>Gets the namespace of the message header.</summary>
      <returns>The namespace of the message header.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Relay">
      <summary>Gets or sets a value that indicates whether the message header can be relayed.</summary>
      <returns>true if the message header can be relayed; otherwise, false.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaders">
      <summary>Represents a collection of message headers for a message. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageHeaders)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> class with the specified collection of message headers.</summary>
      <param name="collection">A collection of message headers.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> class with the specified message version.</summary>
      <param name="version">The SOAP version of the message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> class with the specified message version and size.</summary>
      <param name="version">The SOAP version of the message.</param>
      <param name="initialSize">The size of the header.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Action">
      <summary>Gets or sets a description of how the message should be processed.</summary>
      <returns>A description of how the message should be processed.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Add(System.ServiceModel.Channels.MessageHeader)">
      <summary>Adds the specified message header to the collection.</summary>
      <param name="header">A message header to be added.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Clear">
      <summary>Removes all the headers from the collection.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.Message,System.Int32)">
      <summary>Copies the header content located at the specified index from the specified message to this instance.</summary>
      <param name="message">A message.</param>
      <param name="headerIndex">The location of the original message header, from which the content is copied over.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.MessageHeaders,System.Int32)">
      <summary>Copies the header content located at the specified index from the specified message header collection to this instance.</summary>
      <param name="collection">A <see cref="T:System.ServiceModel.Channels.MessageHeaders" />.</param>
      <param name="headerIndex">The location of the original message header, from which the content is copied over.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.Message)">
      <summary>Copies the content of all the headers from the specified message to this instance.</summary>
      <param name="message">A message.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.MessageHeaders)">
      <summary>Copies the content from the specified header collection to this instance.</summary>
      <param name="collection">A <see cref="T:System.ServiceModel.Channels.MessageHeaders" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyTo(System.ServiceModel.Channels.MessageHeaderInfo[],System.Int32)">
      <summary>Copies the headers from this collection to an array, starting at a particular index of the array. </summary>
      <param name="array">The one-dimensional array that is the destination of the message header objects copied from this instance. The array must have zero-based indexing. </param>
      <param name="index">The zero-based index in the array at which copying begins. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Count">
      <summary>Gets the number of message headers in this collection.</summary>
      <returns>The number of message headers in this collection.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.FaultTo">
      <summary>Gets or sets the address of the node to which faults should be sent.</summary>
      <returns>An <see cref="T:System.ServiceModel.EndpointAddress" /> of the node to which faults should be sent.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String)">
      <summary>Finds a message header in this collection by the specified LocalName and namespace URI of the header element.</summary>
      <returns>The index of the message header in this collection.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String,System.String[])">
      <summary>Finds a message header in this collection by the specified LocalName, namespace URI and actors of the header element.</summary>
      <returns>The index of the message header in this collection.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="actors">The targeted recipient of the message header.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.From">
      <summary>Gets or sets the address of the node that sent the message.</summary>
      <returns>An <see cref="T:System.ServiceModel.EndpointAddress" /> of the node that sent the message.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetEnumerator">
      <summary>Returns an enumerator that can iterate through a collection. This method cannot be inherited.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32)">
      <summary>Retrieves a message header at a specific position in this collection.</summary>
      <returns>A message header.</returns>
      <param name="index">The zero-based index of the header to get.</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Retrieves a message header at a specific position in this collection.</summary>
      <returns>A message header.</returns>
      <param name="index">The zero-based index of the header to get.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String)">
      <summary>Finds a message header in this collection by the specified LocalName and namespace URI of the header element.</summary>
      <returns>A message header.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Retrieves a message header in this collection by the specified LocalName, namespace URI and serializer.</summary>
      <returns>A message header.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="serializer">An <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />,</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.String[])">
      <summary>Retrieves a message header in this collection by the specified LocalName, namespace URI and actors of the header element.</summary>
      <returns>A message header.</returns>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
      <param name="actors">The targeted recipient of the message header.</param>
      <typeparam name="T">The message header.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetReaderAtHeader(System.Int32)">
      <summary>Gets a XML dictionary reader that accesses the message header at the specified location of the collection.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="headerIndex">The zero-based index of the header to get.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood">
      <summary>Verifies whether all the message headers marked with MustUnderstand are properly interpreted and processed. </summary>
      <returns>true if the recipients specified by <paramref name="actors" /> have properly interpreted and processed all the message headers marked with MustUnderstand; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood(System.String[])">
      <summary>Verifies whether the specified recipients have properly interpreted and processed all the message headers marked with MustUnderstand. </summary>
      <returns>true if the recipients specified by <paramref name="actors" /> have properly interpreted and processed all the message headers marked with MustUnderstand; otherwise, false.</returns>
      <param name="actors">The targeted recipient of the message header.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Insert(System.Int32,System.ServiceModel.Channels.MessageHeader)">
      <summary>Inserts a message header into the collection at the specified index.</summary>
      <param name="headerIndex">The zero-based index at which <paramref name="header" /> should be inserted.</param>
      <param name="header">A message header to insert.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Item(System.Int32)">
      <summary>Retrieves a header at the given index.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" /> in the collection. If <paramref name="index" /> is greater than or equal to the number of headers in the list, this returns null.</returns>
      <param name="index">Zero-based index of the list of headers.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.MessageId">
      <summary>Gets or sets the unique ID of the message.</summary>
      <returns>The unique ID of the message.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.MessageVersion">
      <summary>Gets the SOAP version of the message.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageVersion" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.RelatesTo">
      <summary>Gets the IDs of messages that are related to this message.</summary>
      <returns>The IDs of messages that are related to this message.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAll(System.String,System.String)">
      <summary>Removes all headers with the specified name and namespace from the collection.</summary>
      <param name="name">The LocalName of the header XML element.</param>
      <param name="ns">The namespace URI of the header XML element.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAt(System.Int32)">
      <summary>Removes the message header at the specified index from the collection.</summary>
      <param name="headerIndex">The zero-based index of the header to remove.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.ReplyTo">
      <summary>Gets or sets the address of the node to which a reply should be sent for a request.</summary>
      <returns>An <see cref="T:System.ServiceModel.EndpointAddress" /> of the node to which a reply should be sent for a request.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.SetAction(System.Xml.XmlDictionaryString)">
      <summary>Sets the action element of the header.</summary>
      <param name="action">A description of how the message should be processed.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through a collection. This method cannot be inherited.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.To">
      <summary>Gets or sets the destination endpoint of a message.</summary>
      <returns>A URI that contains the destination endpoint of a message.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the header from the specified location using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>Serializes the header from the specified location using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the specified header content using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlWriter)">
      <summary>Serializes the specified header content using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>Serializes the start header using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>Serializes the start header using the specified XML writer. </summary>
      <param name="headerIndex">The zero-based index of the header to be serialized.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" />.</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageProperties">
      <summary>Represents a set of properties for a message. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor(System.ServiceModel.Channels.MessageProperties)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> class with preset properties.</summary>
      <param name="properties">A <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Add(System.String,System.Object)">
      <summary>Adds an element with the specified name and property into the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. This method cannot be inherited.</summary>
      <param name="name">The name of the element to add.</param>
      <param name="property">The value of the element to add. </param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.AllowOutputBatching">
      <summary>Gets or sets a value that specifies whether to store this message before giving it to the transport. </summary>
      <returns>true if the batching of outgoing messages is allowed; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Clear">
      <summary>Removes all elements from the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. This method cannot be inherited.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.ContainsKey(System.String)">
      <summary>Determines whether the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains a specific name. This method cannot be inherited.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains an element with the specified <paramref name="name" />; otherwise, false.</returns>
      <param name="name">The name to locate in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.CopyProperties(System.ServiceModel.Channels.MessageProperties)">
      <summary>Copies the content of the specified <see cref="T:System.ServiceModel.Channels.MessageProperties" /> to this instance.</summary>
      <param name="properties">A <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Count">
      <summary>Gets the total number of properties in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</summary>
      <returns>The total number of properties in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. </summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Encoder">
      <summary>Gets the encoder that is used to write messages to a stream and to read messages from a stream.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> that is used to write messages to a stream and to read messages from a stream.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.IsReadOnly">
      <summary>Gets a value that indicates whether this set of properties is read-only.</summary>
      <returns>true if this set of properties is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Item(System.String)">
      <summary>Retrieves a property at the given index.</summary>
      <returns>The property with the specified <paramref name="name" />, or null if the property does not exist.</returns>
      <param name="name">The name of the property to get from the collection.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Remove(System.String)">
      <summary>Removes the element with the specified name from the <see cref="T:System.ServiceModel.Channels.MessageProperties" />. This method cannot be inherited.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains an element with the specified <paramref name="name" /> and can be removed; otherwise, false.</returns>
      <param name="name">The name of the element to remove.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})"></member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})"></member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)"></member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})"></member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#IEnumerable{T}#GetEnumerator"></member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through a collection. This method cannot be inherited.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.TryGetValue(System.String,System.Object@)">
      <summary>Determines whether the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains a specific name, and retrieves its value. This method cannot be inherited.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.MessageProperties" /> contains an element with the specified <paramref name="name" />; otherwise, false.</returns>
      <param name="name">The name of the element to locate.</param>
      <param name="value">The value of the found element.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Values">
      <summary>Gets the values in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the values in the <see cref="T:System.ServiceModel.Channels.MessageProperties" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Via">
      <summary>Gets or sets the transport address that is used to send messages.</summary>
      <returns>A URI that contains the transport address that is used to send messages.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageState">
      <summary>Specifies the status of a message. </summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Created">
      <summary>The message has been created. </summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Read">
      <summary>The message is being read.</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Written">
      <summary>The message has been written.</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Copied">
      <summary>The message has been copied.</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Closed">
      <summary>The message has been closed and can no longer be accessed.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageVersion">
      <summary>Specifies the versions of SOAP and WS-Addressing associated with a message and its exchange.</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Addressing">
      <summary>Gets the version of WS-Addressing that is associated with the current message version.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> that is associated with the current message version. </returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion)">
      <summary>Creates a message version object by using WS-Addressing 1.0 and with a specified SOAP version.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> with the envelope version specified.</returns>
      <param name="envelopeVersion">The <see cref="T:System.ServiceModel.EnvelopeVersion" /> that indicates the SOAP version.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion,System.ServiceModel.Channels.AddressingVersion)">
      <summary>Creates a message version object with specified WS-Addressing and  SOAP versions.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that uses WS-Addressing and SOAP versions specified..</returns>
      <param name="envelopeVersion">The <see cref="T:System.ServiceModel.EnvelopeVersion" /> that indicates the SOAP version.</param>
      <param name="addressingVersion">The <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> that indicates the WS-Addressing version.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Default">
      <summary>Gets the default message version used by Silverlight.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that uses SOAP 1.2 and WS-Addressing version 1.0.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Envelope">
      <summary>Gets the SOAP version associated with the current message version.</summary>
      <returns>The  <see cref="T:System.ServiceModel.EnvelopeVersion" /> associated with the message version object.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current message version is equal to a specified object.</summary>
      <returns>true if the specified object is equal to the current <see cref="T:System.ServiceModel.Channels.MessageVersion" /> object; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current message version.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.GetHashCode">
      <summary>Gets a hash code for the current message version.</summary>
      <returns>A unique hash code for the current <see cref="T:System.ServiceModel.Channels.MessageVersion" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.None">
      <summary>Gets the message version that does not use SOAP or WS-Addressing.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that does not use SOAP or WS-Addressing.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap11">
      <summary>Gets the message version using SOAP 1.1.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> using SOAP 1.1 but no version of WS-Addressing.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10">
      <summary>Gets the message version using WS-Addressing 1.0 and SOAP 1.2.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> using the version of WS-Addressing 1.0 and SOAP 1.2.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.ToString">
      <summary>The current message version.</summary>
      <returns>The current <see cref="T:System.ServiceModel.Channels.MessageVersion" />. </returns>
    </member>
    <member name="T:System.ServiceModel.Channels.RequestContext">
      <summary>Provides a reply that is correlated to an incoming request.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.RequestContext" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Abort">
      <summary>When overridden in a derived class, aborts processing the request associated with the context. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.BeginReply(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>When overridden in a derived class, begins an asynchronous operation to reply to the request associated with the current context.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous reply operation.</returns>
      <param name="message">The incoming <see cref="T:System.ServiceModel.Channels.Message" /> that contains the request.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous reply operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous reply operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.BeginReply(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When overridden in a derived class, begins an asynchronous operation to reply to the request associated with the current context within a specified interval of time.</summary>
      <returns>The <see cref="T:System.IAsyncResult" /> that references the asynchronous reply operation.</returns>
      <param name="message">The incoming <see cref="T:System.ServiceModel.Channels.Message" /> that contains the request.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the reply to an available request.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous reply operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous reply operation.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Close">
      <summary>When overridden in a derived class, closes the operation that is replying to the request context associated with the current context.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Close(System.TimeSpan)">
      <summary>When overridden in a derived class, closes the operation that is replying to the request context associated with the current context within a specified interval of time.</summary>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time within which the reply operation associated with the current context must close.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Dispose(System.Boolean)">
      <summary>Releases resources associated with the context.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.EndReply(System.IAsyncResult)">
      <summary>When overridden in a derived class, completes an asynchronous operation to reply to a request message.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.RequestContext.BeginReply" /> methods.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Reply(System.ServiceModel.Channels.Message)">
      <summary>When overridden in a derived class, replies to a request message.</summary>
      <param name="message">The incoming <see cref="T:System.ServiceModel.Channels.Message" /> that contains the request.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Reply(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>When overridden in a derived class, replies to a request message within a specified interval of time.</summary>
      <param name="message">The incoming <see cref="T:System.ServiceModel.Channels.Message" /> that contains the request.</param>
      <param name="timeout">The <see cref="T:System.Timespan" /> that specifies the interval of time to wait for the reply to a request.</param>
    </member>
    <member name="P:System.ServiceModel.Channels.RequestContext.RequestMessage">
      <summary>When overridden in a derived class, gets the message that contains the request.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Message" /> that contains the request.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.System#IDisposable#Dispose">
      <summary>Releases both managed and unmanaged resources associated with the context.</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.SecurityBindingElement">
      <summary>An abstract class that, when implemented, represents a binding element that supports channel SOAP message security.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel factory based on the <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> settings and the binding context passed in. The channel factory created is a SOAP message security channel factory, which internally has a reference to the channel factory that corresponds to the binding context (which includes the transport channel factory).</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory" />.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="TChannel">Type of channel factory.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
      <exception cref="T:System.ArgumentException">A channel of type <paramref name="TChannel" /> is not supported.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.BuildChannelFactoryCore``1(System.ServiceModel.Channels.BindingContext)">
      <summary>When implemented in a derived class, creates a channel factory of a specified type.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory" /> that creates channels of type <paramref name="TChannel" />.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel factory.</param>
      <typeparam name="TChannel">Type of channel factory.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
      <exception cref="T:System.ArgumentException">A channel of type <paramref name="TChannel" /> is not supported.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a value that indicates whether a channel factory of the specified type can be built.</summary>
      <returns>true if a channel factory of type <paramref name="TChannel" /> can be built; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel factory.</param>
      <typeparam name="TChannel">The type of channel factory.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameOverTransportBindingElement">
      <summary>Creates a security binding element that is configured for client authentication based on a user name and password sent as part of the SOAP message. The binding element requires the transport to provide server authentication and message protection (for example, HTTPS).</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a specified object using the <see cref="T:System.ServiceModel.Channels.BindingContext" /> specified.</summary>
      <returns>The specified object from the <see cref="T:System.ServiceModel.Channels.BindingContext" />, or null if the object is not found.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="T">The property to get.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.IncludeTimestamp">
      <summary>Gets or sets a value that indicates whether time stamps are included in each message.</summary>
      <returns>true if time stamps are included in each message; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.LocalClientSettings">
      <summary>Gets the binding properties specific to local security settings used by the client.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" /> that contains the settings for local client security.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement">
      <summary>The binding element that specifies the character encoding and message versioning used for text-based SOAP messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageVersion,System.Text.Encoding)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> class with a specified message version and encoding.</summary>
      <param name="messageVersion">The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that is used for the message version.</param>
      <param name="writeEncoding">The <see cref="T:System.Text.Encoding" /> that is used to format the message characters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageVersion" /> or <paramref name="writeEncoding" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> value is not valid.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Builds the channel factory stack on the client that creates a specified type of channel for a specified context.</summary>
      <returns>An <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> of type <paramref name="TChannel" /> for the specified context.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel.</param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.Clone">
      <summary>Creates a new <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> object initialized from the current one.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> object with property values equal to those of the current element.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>Creates a factory for text message encoders that employs the message version and character encoding specified by the current encoding binding element.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> that this factory creates.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.MessageVersion">
      <summary>Gets or sets the SOAP and WS-Addressing versions that are used to format the text message.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.MessageVersion" /> that is used to format messages. The default value is <see cref="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10" />.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.WriteEncoding">
      <summary>Gets or sets the encoding that is used to format the characters in the text message.</summary>
      <returns>The <see cref="T:System.Text.Encoding" /> that is used to format the characters in the text message. The default text encoding is the UTF-8 format.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> value is not valid.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.TransportBindingElement">
      <summary>An abstract base class that represents a transport binding element.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor">
      <summary>Creates a new instance of this class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor(System.ServiceModel.Channels.TransportBindingElement)">
      <summary>Creates a new instance of this class from an existing instance.</summary>
      <param name="elementToBeCloned">The <see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> to be cloned. </param>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</summary>
      <returns>The property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</returns>
      <param name="context">A <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="T">The property to get.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> cannot be null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.ManualAddressing">
      <summary>Gets or sets a value that indicates whether manual addressing of the message is required.</summary>
      <returns>true if manual addressing of the message is required; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize">
      <summary>Gets and sets the maximum allowable message size that can be received.</summary>
      <returns>The maximum allowable message size that can be received. The default is 65,536 bytes.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="value" /> set cannot be negative.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.Scheme">
      <summary>Gets the URI scheme for the transport.</summary>
      <returns>Returns the URI scheme for the transport, which varies depending on which derived class implements this method.</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TransportSecurityBindingElement">
      <summary>Represents a custom binding element that supports mixed-mode security (such as optimized message security over a secure transport).</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportSecurityBindingElement.#ctor">
      <summary>Creates an instance of the <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportSecurityBindingElement.Clone">
      <summary>Creates a new <see cref="T:System.ServiceModel.Channels.BindingElement" /> object initialized from the current class.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.BindingElement" /> object with property values equal to those of the current instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.OnClosed">
      <summary>Invoked during the transition of a communication object into the closing state.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a specified object from the <see cref="T:System.ServiceModel.Channels.BindingContext" />. This method gets the specified object from the base class, or from one of that class's ancestors.</summary>
      <param name="context">A <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a typed object requested, if present, from the appropriate layer in the binding element stack.</summary>
      <returns>The typed object T requested if it is present or a null reference (Nothing in Visual Basic) if it is not.</returns>
      <param name="context">The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the binding element.</param>
      <typeparam name="T">The typed object for which the method is querying.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Description.ClientCredentials">
      <summary>Enables the user to configure client credentials used to authenticate the client against a service.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ClientCredentials" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.#ctor(System.ServiceModel.Description.ClientCredentials)">
      <summary>Creates a copy of an existing <see cref="T:System.ServiceModel.Description.ClientCredentials" />. </summary>
      <param name="other">The <see cref="T:System.ServiceModel.Description.ClientCredentials" /> instance to be copied.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.Clone">
      <summary>Creates a new copy of this <see cref="T:System.ServiceModel.Description.ClientCredentials" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.ClientCredentials" /> instance.</returns>
      <exception cref="T:System.NotImplementedException">The current credentials are null or not correctly typed.</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.CloneCore">
      <summary>Creates a new copy of this <see cref="T:System.ServiceModel.Description.ClientCredentials" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.ClientCredentials" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Adds this instance of this class to a binding parameter collection.</summary>
      <param name="serviceEndpoint">The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to add.</param>
      <param name="bindingParameters">The collection of binding parameters.</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>Applies the specified client behavior to the endpoint.</summary>
      <param name="serviceEndpoint">The endpoint to which the specified client behavior is to be applied.</param>
      <param name="behavior">The client behavior that is to be applied to the specified endpoint.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceEndpoint" /> or<paramref name=" behavior" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>Reserved for future use.</summary>
      <param name="serviceEndpoint">The target <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />.</param>
      <param name="endpointDispatcher">An <see cref="T:System.ServiceModel.Dispatcher.EndpointDispatcher" /> to apply.</param>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Reserved for future use.</summary>
      <param name="serviceEndpoint">The target <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />.</param>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.UserName">
      <summary>Gets a credential object that you can use to set the user name and password that the client uses to authenticate itself to a service. </summary>
      <returns>A <see cref="T:System.ServiceModel.Security.UserNamePasswordClientCredential" /> that represents the current user name and password of the client credential.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ContractDescription">
      <summary>Describes a contract that specifies what an endpoint communicates to the outside world.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ContractDescription" /> class with a specified name.</summary>
      <param name="name">The name of the contract.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> is empty.</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ContractDescription" /> class with a namespace-qualified name specified.</summary>
      <param name="name">The name of the contract.</param>
      <param name="ns">The namespace that contains the name of the contract.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> is empty.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Behaviors">
      <summary>Gets the behaviors associated with the contract description.</summary>
      <returns>The <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> of type <see cref="T:System.ServiceModel.Description.IContractBehavior" /> associated with the contract description.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.CallbackContractType">
      <summary>Gets or sets the type of callback contract that the contract description specifies.</summary>
      <returns>The <see cref="T:System.Type" /> of callback contract that the contract description specifies.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ConfigurationName">
      <summary>Gets or sets the configuration name for the contract description.</summary>
      <returns>The configuration name for the contract.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ContractType">
      <summary>Gets or sets the contract type that the contract description specifies.</summary>
      <returns>The contract <see cref="T:System.Type" /> that the contract description specifies.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Name">
      <summary>Gets or sets the name of the contract.</summary>
      <returns>The name of the contract description.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Namespace">
      <summary>Gets or sets the namespace for the contract.</summary>
      <returns>The namespace of the contract.</returns>
      <exception cref="T:System.ArgumentNullException">The value set is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Operations">
      <summary>Gets the collection of operation descriptions associated with the contract.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.OperationDescriptionCollection" /> that contains the operation descriptions associated with the contract description.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.FaultDescription">
      <summary>Represents a SOAP fault.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.FaultDescription.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.FaultDescription" /> class using the specified action value.</summary>
      <param name="action">The action of the SOAP fault message.</param>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Action">
      <summary>Gets the value of the action in the SOAP fault message.</summary>
      <returns>The action of the SOAP fault.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.DetailType">
      <summary>Gets or sets the type of the SOAP fault detail.</summary>
      <returns>The type of the serializable detail object.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Name">
      <summary>Gets or sets the name of the SOAP fault.</summary>
      <returns>The name of the SOAP fault.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Namespace">
      <summary>Gets or sets the namespace of the SOAP fault.</summary>
      <returns>The namespace of the SOAP fault.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.FaultDescriptionCollection">
      <summary>A collection of <see cref="T:System.ServiceModel.Description.FaultDescription" /> objects that you can use to obtain information about SOAP faults in a contract.</summary>
    </member>
    <member name="T:System.ServiceModel.Description.IContractBehavior">
      <summary>Implements methods that can be used to extend run-time behavior for a contract in a Silverlight application.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Configures any binding elements to support the contract behavior.</summary>
      <param name="contractDescription">The contract description to modify.</param>
      <param name="endpoint">The endpoint to modify.</param>
      <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>Implements a modification or extension of the client across a contract.</summary>
      <param name="contractDescription">The contract description for which the extension is intended.</param>
      <param name="endpoint">The endpoint.</param>
      <param name="clientRuntime">The client runtime.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
      <summary>This method is not used in the current implementation of Silverlight.</summary>
      <param name="contractDescription">The contract description to be modified.</param>
      <param name="endpoint">The endpoint that exposes the contract.</param>
      <param name="dispatchRuntime">The dispatch runtime that controls service execution.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Implement to confirm that the contract and endpoint can support the contract behavior.</summary>
      <param name="contractDescription">The contract to validate.</param>
      <param name="endpoint">The endpoint to validate.</param>
    </member>
    <member name="T:System.ServiceModel.Description.IEndpointBehavior">
      <summary>Implements methods that can be used to extend run-time behavior for an endpoint in a Silverlight application.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Implement to pass data at runtime to bindings to support custom behavior.</summary>
      <param name="endpoint">The endpoint to modify.</param>
      <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>Implements a modification or extension of the client across an endpoint.</summary>
      <param name="endpoint">The endpoint that is to be customized.</param>
      <param name="clientRuntime">The client runtime to be customized.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>This method does not get invoked in Silverlight.</summary>
      <param name="endpoint">The endpoint that exposes the contract.</param>
      <param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Implement to confirm that the endpoint meets some intended criteria.</summary>
      <param name="endpoint">The endpoint to validate.</param>
    </member>
    <member name="T:System.ServiceModel.Description.IOperationBehavior">
      <summary>Implements methods that can be used to extend run-time behavior for an operation in a Silverlight application.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Implement to pass data at runtime to bindings to support custom behavior.</summary>
      <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
      <param name="bindingParameters">The collection of objects that binding elements require to support the behavior.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>Implements a modification or extension of the client across an operation.</summary>
      <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
      <param name="clientOperation">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription" />.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>This method is not used with Silverlight 4 RC applications.</summary>
      <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
      <param name="dispatchOperation">The run-time object that exposes customization properties for the operation described by <paramref name="operationDescription" />.</param>
    </member>
    <member name="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>Implement to confirm that the operation meets some intended criteria.</summary>
      <param name="operationDescription">The operation being examined. Use for examination only. If the operation description is modified, the results are undefined.</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessageBodyDescription">
      <summary>Represents the body of a SOAP message.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageBodyDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.MessageBodyDescription" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.Parts">
      <summary>Gets the parts for the body of the SOAP message.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.MessagePartDescriptionCollection" /> that contains the parts of the body of the SOAP message that you can inspect or modify.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.ReturnValue">
      <summary>Gets or sets the portion of the SOAP message that contains the return value.</summary>
      <returns>The return value, if any.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperName">
      <summary>Gets or sets the name of the wrapper element inside the SOAP body element if there is one.</summary>
      <returns>The name of the wrapper element if there is one; otherwise, null.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperNamespace">
      <summary>Gets or sets the namespace of the wrapper element in the SOAP body if there is one.</summary>
      <returns>The namespace of the wrapper element if there is one.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescription">
      <summary>Represents the description of a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescription.#ctor(System.String,System.ServiceModel.Description.MessageDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.MessageDescription" /> class with a specified action and direction.</summary>
      <param name="action">The action parameter of the SOAP message that identifies the intent of the message.</param>
      <param name="direction">
        <see cref="F:System.ServiceModel.Description.MessageDirection.Input" /> if the message is incoming or <see cref="F:System.ServiceModel.Description.MessageDirection.Output" /> if the message is outgoing.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="direction" /> is neither <see cref="F:System.ServiceModel.Description.MessageDirection.Input" /> or <see cref="F:System.ServiceModel.Description.MessageDirection.Output" />.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Action">
      <summary>Gets the action parameter of the SOAP message that identifies the intent of the message.</summary>
      <returns>The action URI.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Body">
      <summary>Gets the body of the SOAP message.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.MessagePartDescriptionCollection" /> that contains the body of the message.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Direction">
      <summary>Gets the direction that indicates whether the message is incoming or outgoing.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.MessageDirection" /> that indicates whether the message is incoming to or outgoing from the service.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.MessageType">
      <summary>Gets or sets a type that identifies the type of message contract.</summary>
      <returns>The type of the message contract.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescriptionCollection">
      <summary>Provides a collection that is used to store descriptions of the messages that make up an operation that belongs to a contract.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.Find(System.String)">
      <summary>Finds and returns the first message description in a collection for a message with a specified action.</summary>
      <returns>The first <see cref="T:System.ServiceModel.Description.MessageDescription" /> from the collection whose message has the specified <paramref name="action" /> and null if no matching <paramref name="action" /> is found.</returns>
      <param name="action">The action of the message being found.</param>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.FindAll(System.String)">
      <summary>Finds and returns all of the message descriptions in a collection whose messages have a specified action.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" /> that contains the collection message descriptions from the current collection whose messages have the specified <paramref name="action" />. If no matching <see cref="T:System.ServiceModel.Description.MessageDescription" /> objects are found, an empty collection is returned.</returns>
      <param name="action">The action of the messages being found.</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDirection">
      <summary>Specifies the direction of the message.</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Input">
      <summary>The message is incoming.</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Output">
      <summary>The message is outgoing.</summary>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescription">
      <summary>Represents a description of a SOAP message part.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescription.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> class. </summary>
      <param name="name">The XML name of the message part.</param>
      <param name="ns">The XML namespace of the message part.</param>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Index">
      <summary>Gets or sets the index of the message part.</summary>
      <returns>The index of the message part.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.MemberInfo">
      <summary>Gets or sets the member information for the message part.</summary>
      <returns>The member information for this message part.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Name">
      <summary>Gets the name of the message part.</summary>
      <returns>The name of the message part.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Namespace">
      <summary>Gets the namespace of the message part.</summary>
      <returns>The namespace of the message part.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Type">
      <summary>Gets or sets the type of the message part.</summary>
      <returns>The type of the message part.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescriptionCollection">
      <summary>Represents a collection of <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> objects.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescriptionCollection.GetKeyForItem(System.ServiceModel.Description.MessagePartDescription)">
      <summary>When called by a derived class, returns the <see cref="T:System.Xml.XmlQualifiedName" /> of the <see cref="T:System.ServiceModel.Description.MessagePartDescription" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlQualifiedName" /> of the <see cref="T:System.ServiceModel.Description.MessagePartDescription" />.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> to locate.</param>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescription">
      <summary>A contract that characterizes an operation in terms of the messages it exchanges.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescription.#ctor(System.String,System.ServiceModel.Description.ContractDescription)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.OperationDescription" /> class with a specified name and contract description.</summary>
      <param name="name">The name of the operation description.</param>
      <param name="declaringContract">The <see cref="T:System.ServiceModel.Description.ContractDescription" /> used to initialize the operation description.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="declaringContract" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> is empty.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.BeginMethod">
      <summary>Gets or sets the begin method of the operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that provides access to the attributes and metadata of the method.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Behaviors">
      <summary>Gets or sets the operation behaviors associated with the operation.</summary>
      <returns>A <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> that contains the <see cref="T:System.ServiceModel.Description.IOperationBehavior" /> objects associated with the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.DeclaringContract">
      <summary>Gets or sets the contract to which the operation belongs.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ContractDescription" /> for the operation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> set is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.EndMethod">
      <summary>Gets or sets the end method of the operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that provides access to the attributes and metadata of the method.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Faults">
      <summary>Gets a collection of the descriptions of the faults associated with the operation description.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.FaultDescriptionCollection" /> that contains details about the faults associated with the operation description.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.IsOneWay">
      <summary>Gets a value that indicates whether an operation returns a reply message.</summary>
      <returns>true if this method receives a request message and returns no reply message; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.KnownTypes">
      <summary>Gets the known types associated with the operation description.</summary>
      <returns>The collection of known types associated with the operation description.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Messages">
      <summary>Gets or sets the descriptions of the messages that make up the operation.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" /> that contains descriptions of the messages that make up the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Name">
      <summary>Gets or sets the name of the operation description.</summary>
      <returns>The name of the operation description.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.SyncMethod">
      <summary>Gets or sets the service synchronization method of the operation description.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that provides access to the attributes and metadata of the method.</returns>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescriptionCollection">
      <summary>Represents a collection that contains operation descriptions.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.Find(System.String)">
      <summary>Returns the first occurrence of an operation description with a specified name from the collection of operation descriptions.</summary>
      <returns>The first occurrence of an <see cref="T:System.ServiceModel.Description.OperationDescription" /> with the name specified or null if there is no operation with the name specified.</returns>
      <param name="name">The name of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.FindAll(System.String)">
      <summary>Returns a collection of all the operation descriptions from the collection that have the specified name.</summary>
      <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of type <see cref="T:System.ServiceModel.Description.OperationDescription" /> that contains all of the operation descriptions with the specified name.</returns>
      <param name="name">The name of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.InsertItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>Inserts an element into the operation description collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Description.OperationDescription" /> to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.SetItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>Replaces the operation description element in the collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Description.OperationDescription" /> to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceEndpoint">
      <summary>Represents the endpoint for a service that allows clients of the service to find and communicate with the service.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> class for a specified contract.</summary>
      <param name="contract">The <see cref="T:System.ServiceModel.Description.ContractDescription" /> for the service endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> class with a specified contract, binding, and address.</summary>
      <param name="contract">The <see cref="T:System.ServiceModel.Description.ContractDescription" /> for the service endpoint.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> that specifies how the service endpoint communicates with the world.</param>
      <param name="address">The <see cref="T:System.ServiceModel.EndpointAddress" /> for the service endpoint.</param>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Address">
      <summary>Gets or sets the endpoint address for the service endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> that specifies the location of the service endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Behaviors">
      <summary>Gets the behaviors for the service endpoint.</summary>
      <returns>The <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> of type <see cref="T:System.ServiceModel.Description.IEndpointBehavior" /> that contains the behaviors specified for the service endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Binding">
      <summary>Gets or sets the binding for the service endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.Binding" /> for the service endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Contract">
      <summary>Gets the contract for the service endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ContractDescription" /> that specifies the contract for the service endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Name">
      <summary>Gets or sets the name of the service endpoint.</summary>
      <returns>The name of the service endpoint. The default value is the concatenation of the binding name and the contract description name. For example, <see cref="P:System.ServiceModel.Channels.Binding.Name" /> + '_' + <see cref="P:System.ServiceModel.Description.ContractDescription.Name" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientOperation">
      <summary>Used to modify or extend the execution behavior of a specific contract operation in a client object or client channel object. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> class using the specified <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />, name, and action values. </summary>
      <param name="parent">The containing <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> object.</param>
      <param name="name">The name of the operation.</param>
      <param name="action">The action of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> class using the specified <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />, name, action, and reply action values. </summary>
      <param name="parent">The containing <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> object.</param>
      <param name="name">The name of the operation.</param>
      <param name="action">The action of the operation.</param>
      <param name="replyAction">The action of the reply message.</param>
      <exception cref="T:::System.ArgumentNullException">
        <paramref name="Parent" /> or <paramref name="name" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Action">
      <summary>Gets the action of the operation.</summary>
      <returns>The action of the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.BeginMethod">
      <summary>Gets or sets the method associated with an asynchronous operation.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object that represents the method handling the begin portion of an asynchronous method pair, or null if the operation is not part of an asynchronous method pair.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.DeserializeReply">
      <summary>Gets or sets a value that indicates whether the <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> property value is used to deserialize the reply message.</summary>
      <returns>true if the return type is not a <see cref="T:System.ServiceModel.Channels.Message" />; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.EndMethod">
      <summary>Gets or sets the method that implements the asynchronous end method for the operation.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> that represents the end method for the operation, or null if the operation is not asynchronous.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter">
      <summary>Gets or sets the formatter that serializes objects into messages and deserializes messages into objects.</summary>
      <returns>An <see cref="T:System.ServiceModel.Dispatcher.IClientMessageFormatter" /> implementation.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsInitiating">
      <summary>Gets or sets a value that indicates whether a session can be started by a message to this operation.</summary>
      <returns>true if a message to this operation can initiate a session; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsOneWay">
      <summary>Gets or sets a value that indicates whether the operation is a one-way operation.</summary>
      <returns>true if the WCF client should not expect a reply; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsTerminating">
      <summary>Gets or sets a value that indicates whether this operation is the last one in a session.</summary>
      <returns>true if the associated session is closed after the operation is invoked; otherwise, false. </returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Name">
      <summary>Gets the name of the operation.</summary>
      <returns>The name of the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors">
      <summary>Gets a list of <see cref="T:System.ServiceModel.Dispatcher.IParameterInspector" /> objects that can inspect and modify inbound and outbound objects for a particular client method.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.ServiceModel.Dispatcher.IParameterInspector" /> objects.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Parent">
      <summary>Gets the containing <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> object.</summary>
      <returns>The containing <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> object.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.ReplyAction">
      <summary>Gets the action of the reply message for this operation.</summary>
      <returns>The action of the reply.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.SerializeRequest">
      <summary>Gets or sets a value that specifies whether the <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> object serializes an outbound message.</summary>
      <returns>true if the <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> property serializes the return values into a reply message; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.SyncMethod">
      <summary>Gets or sets the method that is associated with this operation.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> that represents the method that implements the operation. If the operation is asynchronous, this value is null and the implementing methods are stored in the <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.BeginMethod" /> and <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.EndMethod" /> properties.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientRuntime">
      <summary>The insertion point for classes that extend the functionality of Silverlight client objects for all messages handled by a client application.</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractClientType">
      <summary>Gets the type of the contract associated with the client.</summary>
      <returns>The <see cref="T:System.Type" /> object that represents the contract associated with this client.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractName">
      <summary>Gets the name of the contract associated with the client.</summary>
      <returns>The contract name used for this client.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractNamespace">
      <summary>Gets the namespace of the contract associated with the client.</summary>
      <returns>The namespace of the contract associated with this client.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ManualAddressing">
      <summary>Gets or sets a value that indicates whether the client adds addressing headers to request-reply messages.</summary>
      <returns>true if the client does not add any addressing headers; otherwise, false. The default value is false. </returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.MaxFaultSize">
      <summary>Gets or sets the maximum fault message size. </summary>
      <returns>The maximum fault size. The default value is 64 KB.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors">
      <summary>Gets a list of message inspector implementations for a client.</summary>
      <returns>An<see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.ServiceModel.Dispatcher.IClientMessageInspector" /> implementations.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageVersionNoneFaultsEnabled">
      <summary>Gets or sets a value that indicates the message version none and faults are enabled.</summary>
      <returns>true if the message version none and faults are enabled; otherwise false.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.Operations">
      <summary>Gets a collection of client operations for a client.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> of <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> objects.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.OperationSelector">
      <summary>Gets or sets a <see cref="T:System.ServiceModel.Dispatcher.IClientOperationSelector" /> implementation that can be used to select a <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" />.</summary>
      <returns>An <see cref="T:System.ServiceModel.Dispatcher.IClientOperationSelector" /> object that selects a <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.UnhandledClientOperation">
      <summary>Gets the client operation for methods that do not have a corresponding <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> in the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.Operations" /> collection.</summary>
      <returns>A <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> that represents the method to which the current message contents are routed when the operation selector cannot find an operation that matches the message.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.Via">
      <summary>Gets or sets the transport address that is used to send messages through the client.</summary>
      <returns>A <see cref="T:System.Uri" /> that is the destination address for the transport. The default value is the <see cref="P:System.ServiceModel.EndpointAddress.Uri" /> value of the client.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.DispatchOperation">
      <summary>Used to modify or extend the execution behavior of a specific operation at an endpoint. In Silverlight this class modifies the execution operations that are part of a duplex callback contract. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.DispatchOperation.#ctor(System.ServiceModel.Dispatcher.DispatchRuntime,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" /> class using the specified dispatch runtime, name, and action values.</summary>
      <param name="parent">The associated <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> object.</param>
      <param name="name">The name of the dispatch operation. This is used as the key to the <see cref="P:System.ServiceModel.Dispatcher.DispatchRuntime.Operations" /> collection.</param>
      <param name="action">The message action for which this dispatch operation is being created.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Action">
      <summary>Gets the value of the action for this operation.</summary>
      <returns>The value of the action for this operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.AutoDisposeParameters">
      <summary>Gets or sets whether parameters are to be automatically disposed.</summary>
      <returns>true if the parameters are to be automatically disposed; otherwise false.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.DeserializeRequest">
      <summary>Gets or sets a value that indicates whether the <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter" /> property value is used to deserialize the request message.</summary>
      <returns>false if the return type is of type <see cref="T:System.ServiceModel.Channels.Message" /> and there are no out parameters; otherwise, true.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter">
      <summary>Gets or sets the formatter maps between objects and messages: it is used to deserialize messages into objects and to serialize objects into messages.</summary>
      <returns>An <see cref="T:System.ServiceModel.Dispatcher.IDispatchMessageFormatter" /> implementation.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.IsOneWay">
      <summary>Gets a value that indicates if the operation is a one-way operation.</summary>
      <returns>true if the operation has only an input; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Name">
      <summary>Gets the name of the operation.</summary>
      <returns>The name of the operation. This is used as the key to the <see cref="P:System.ServiceModel.Dispatcher.DispatchRuntime.Operations" /> collection.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.Parent">
      <summary>Gets the associated <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> object.</summary>
      <returns>The associated <see cref="T:System.ServiceModel.Dispatcher.DispatchRuntime" /> object.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchOperation.SerializeReply">
      <summary>Gets or sets a value that specifies whether the <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter" /> object serializes reply messages.</summary>
      <returns>true if the <see cref="P:System.ServiceModel.Dispatcher.DispatchOperation.Formatter" /> property serializes the return values into a reply message; otherwise, false. </returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.DispatchRuntime">
      <summary>Exposes properties that can be used to modify default behavior as well as attach custom objects that can modify how incoming messages are transformed into objects and dispatched to callback operations, when a Silverlight client is using a duplex contract. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DispatchRuntime.UnhandledDispatchOperation">
      <summary>Gets or sets the operation to which unrecognized messages are dispatched. </summary>
      <returns>The <see cref="T:System.ServiceModel.Dispatcher.DispatchOperation" /> to which unrecognized messages are dispatched.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> set is null.</exception>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.EndpointDispatcher">
      <summary>This class is not supported in the current release of Silverlight. It is present for compatibility reasons.</summary>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.FaultContractInfo">
      <summary>Represents information about a SOAP fault that is specified in a <see cref="T:System.ServiceModel.FaultContractAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.FaultContractInfo.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.FaultContractInfo" /> class that uses the specified action and detail type.</summary>
      <param name="action">The action of the SOAP fault.</param>
      <param name="detail">The detail type that is serialized as the SOAP fault detail.</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.FaultContractInfo.Action">
      <summary>Gets the SOAP fault action value.</summary>
      <returns>The SOAP fault action value.</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.FaultContractInfo.Detail">
      <summary>The type of the object that is serialized as the SOAP fault detail.</summary>
      <returns>The <see cref="T:System.Type" /> that represents the serialized SOAP fault detail.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientMessageFormatter">
      <summary>Defines methods that are used to control the conversion of messages into objects and objects into messages for client applications.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.DeserializeReply(System.ServiceModel.Channels.Message,System.Object[])">
      <summary>Converts a message into a return value and <paramref name="out" /> parameters that are passed back to the calling operation.</summary>
      <returns>The return value of the operation.</returns>
      <param name="message">The inbound message.</param>
      <param name="parameters">Any <paramref name="out" /> values.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.SerializeRequest(System.ServiceModel.Channels.MessageVersion,System.Object[])">
      <summary>Converts an <see cref="T:System.Object" /> array into an outbound <see cref="T:System.ServiceModel.Channels.Message" />. </summary>
      <returns>The SOAP message sent to the service operation.</returns>
      <param name="messageVersion">The version of the SOAP message to use.</param>
      <param name="parameters">The parameters passed to the Silverlight client operation.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
      <summary>Defines a message inspector object that can be added to the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> collection to view or modify messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
      <summary>Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</summary>
      <param name="reply">The message to be transformed into types and handed back to the client application.</param>
      <param name="correlationState">Correlation state data.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
      <summary>Enables inspection or modification of a message before a request message is sent to a service.</summary>
      <returns>The object that is returned as the <paramref name="correlationState " />argument of the <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /> method. This is null if no correlation state is used.The best practice is to make this a <see cref="T:System.Guid" /> to ensure that no two <paramref name="correlationState" /> objects are the same.</returns>
      <param name="request">The message to be sent to the service.</param>
      <param name="channel">The Silverlight client object channel.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientOperationSelector">
      <summary>Defines the contract for an operation selector.</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.IClientOperationSelector.AreParametersRequiredForSelection">
      <summary>Gets a value that indicates whether parameters are required to determine the selection.</summary>
      <returns>true if parameters are required; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientOperationSelector.SelectOperation(System.Reflection.MethodBase,System.Object[])">
      <summary>Returns the selected operation.</summary>
      <returns>The operation selected by the custom operation selector.</returns>
      <param name="method">The method invoked.</param>
      <param name="parameters">The parameters passed to the method.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IDispatchMessageFormatter">
      <summary>Defines methods that deserialize request messages and serialize response messages in an application.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IDispatchMessageFormatter.DeserializeRequest(System.ServiceModel.Channels.Message,System.Object[])">
      <summary>Deserializes a message into an array of parameters.</summary>
      <param name="message">The incoming message.</param>
      <param name="parameters">The array of objects that are passed to the operation as parameters.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IDispatchMessageFormatter.SerializeReply(System.ServiceModel.Channels.MessageVersion,System.Object[],System.Object)">
      <summary>Serializes a reply message from a specified message version, an array of parameters, and a return value.</summary>
      <returns>The serialized reply <see cref="T:System.ServiceModel.Channels.Message" />.</returns>
      <param name="messageVersion">The SOAP message version.</param>
      <param name="parameters">The array of out parameters.</param>
      <param name="result">The return value.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IParameterInspector">
      <summary>Defines the contract implemented by custom parameter inspectors that enables the inspection or modification of information prior to and subsequent to calls on the client.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)">
      <summary>Called after client calls are returned and before service responses are sent.</summary>
      <param name="operationName">The name of the invoked operation.</param>
      <param name="outputs">Any output objects.</param>
      <param name="returnValue">The return value of the operation.</param>
      <param name="correlationState">Any correlation state returned from the <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> method, or null. </param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])">
      <summary>Called before client calls are sent and after service responses are returned.</summary>
      <returns>The correlation state that is returned as the <paramref name="correlationState" /> parameter in <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />. Return null if you do not intend to use correlation state.</returns>
      <param name="operationName">The name of the operation.</param>
      <param name="inputs">The objects passed to the method by the client.</param>
    </member>
    <member name="T:System.ServiceModel.Security.MessageSecurityException">
      <summary>Represents an exception that occurs when there is something wrong with the security that has been applied to a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> class with a specified error message.</summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> class with an error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception reference.</param>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityAccessDeniedException">
      <summary>Represents the security exception that is thrown when a security authorization request fails.</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> class using a specified message.</summary>
      <param name="message">A description of the error condition.</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> class using a specified message and the inner exception.</summary>
      <param name="message">A description of the error condition.</param>
      <param name="innerException">The inner exception to be used.</param>
    </member>
    <member name="T:System.ServiceModel.Security.UserNamePasswordClientCredential">
      <summary>Represents a client credential based on user name and password.</summary>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.Password">
      <summary>Gets or sets the password.</summary>
      <returns>The password.</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.UserName">
      <summary>Gets or sets the user name.</summary>
      <returns>The user name.</returns>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> class.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\NOT_RTW_TOOLKIT.txt ===
These bits are pre-RTW as of 3/31/2010

Taken from: \\jscratch\scratch\EAP\sl_v4_rtw\50331.00\Silverlight4Toolkit
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\ReferenceAssemblies\microsoft.visualbasic.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualBasic</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualBasic.CallType">
      <summary>Indicates the type of procedure being invoked when calling the CallByName function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Method">
      <summary>A method is being invoked.  This member is equivalent to the Visual Basic constant vbMethod.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Get">
      <summary>A property value is being retrieved.  This member is equivalent to the Visual Basic constant vbGet.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Let">
      <summary>An Object property value is being determined. This member is equivalent to the Visual Basic constant vbLet.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Set">
      <summary>A property value is being determined.  This member is equivalent to the Visual Basic constant vbSet.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Collection">
      <summary>A Visual Basic Collection is an ordered set of items that can be referred to as a unit.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.#ctor">
      <summary>Creates and returns a new Visual Basic <see cref="T:Microsoft.VisualBasic.Collection" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
      <summary>Adds an element to a Collection object.</summary>
      <param name="Item">Required. An object of any type that specifies the element to add to the collection.</param>
      <param name="Key">Optional. A unique String expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.</param>
      <param name="Before">Optional. An expression that specifies a relative position in the collection. The element to be added is placed in the collection before the element identified by the <paramref name="Before" /> argument. If <paramref name="Before" /> is a numeric expression, it must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property. If <paramref name="Before" /> is a String expression, it must correspond to the key string specified when the element being referred to was added to the collection. You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</param>
      <param name="After">Optional. An expression that specifies a relative position in the collection. The element to be added is placed in the collection after the element identified by the <paramref name="After" /> argument. If <paramref name="After" /> is a numeric expression, it must be a number from 1 through the value of the collection's Count property. If <paramref name="After" /> is a String expression, it must correspond to the key string specified when the element referred to was added to the collection. You cannot specify both <paramref name="Before" /> and <paramref name="After" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Clear">
      <summary>Deletes all elements of a Visual Basic Collection object.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
      <summary>Returns a Boolean value indicating whether a Visual Basic Collection object contains an element with a specific key.</summary>
      <returns>Returns a Boolean value indicating whether a Visual Basic Collection object contains an element with a specific key.</returns>
      <param name="Key">Required. A String expression that specifies the key for which to search the elements of the collection.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Count">
      <summary>Returns an Integer containing the number of elements in a collection. Read-only.</summary>
      <returns>Returns an Integer containing the number of elements in a collection. Read-only.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.GetEnumerator">
      <summary>Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</summary>
      <returns>Returns a reference to an enumerator object, which is used to iterate over a <see cref="T:Microsoft.VisualBasic.Collection" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:Microsoft.VisualBasic.Collection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index. Implements the <see cref="T:System.Collections.ICollection" /> interface.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Microsoft.VisualBasic.Collection" /> object. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- The number of elements in the source <see cref="T:Microsoft.VisualBasic.Collection" /> object is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
      <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:Microsoft.VisualBasic.Collection" /> object cannot be cast automatically to the type of the destination <paramref name="array" />. </exception>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.System#Collections#ICollection#Count">
      <summary>Gets the number of items in this collection. Implements the <see cref="T:System.Collections.ICollection" /> interface.</summary>
      <returns>The number of items in this collection.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection. Implements the <see cref="T:System.Collections.ICollection" /> interface.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized (thread safe). Implements the <see cref="T:System.Collections.ICollection" /> interface.</summary>
      <returns>Returns True if access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized (thread safe); otherwise, False.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object. Implements the <see cref="T:System.Collections.ICollection" /> interface.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object. Implements the <see cref="T:System.Collections.IList" /> interface.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:Microsoft.VisualBasic.Collection" /> object. </param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.-or- The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size. </exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#Clear">
      <summary>Removes all items from the <see cref="T:Microsoft.VisualBasic.Collection" /> object. Implements the <see cref="T:System.Collections.IList" /> interface.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only. </exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object contains a specific value. Implements the <see cref="T:System.Collections.IList" /> interface.</summary>
      <returns>Returns True if the <see cref="T:System.Object" /> is found in the <see cref="T:Microsoft.VisualBasic.Collection" /> object; otherwise, False.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object. </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:Microsoft.VisualBasic.Collection" /> object. Implements the <see cref="T:System.Collections.IList" /> interface.</summary>
      <returns>The index of <paramref name="value" /> if found in the collection; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object. </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object at the specified index. Implements the <see cref="T:System.Collections.IList" /> interface.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted. </param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:Microsoft.VisualBasic.Collection" /> object. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.-or- The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size. </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is null reference in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size. Implements the <see cref="T:System.Collections.IList" /> interface.</summary>
      <returns>Returns True if the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size; otherwise, False.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only. Implements the <see cref="T:System.Collections.IList" /> interface.</summary>
      <returns>Returns True if the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only; otherwise, False.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index. Implements the <see cref="T:System.Collections.IList" /> interface</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object. </exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only. </exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:Microsoft.VisualBasic.Collection" /> object. Implements the <see cref="T:System.Collections.IList" /> interface.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:Microsoft.VisualBasic.Collection" /> object. </param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.-or- The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size. </exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:Microsoft.VisualBasic.Collection" /> object item at the specified index. Implements the <see cref="T:System.Collections.IList" /> interface.</summary>
      <param name="index">The zero-based index of the item to remove. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.-or- The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size. </exception>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
      <summary>Returns a specific element of a Collection object either by position or by key. Read-only.</summary>
      <returns>Returns a specific element of a Collection object either by position or by key. Read-only.</returns>
      <param name="Index">(A) A numeric expression that specifies the position of an element of the collection. <paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property. Or (B) An Object expression that specifies the position or key string of an element of the collection.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
      <summary>Returns a specific element of a Collection object either by position or by key. Read-only.</summary>
      <returns>Returns a specific element of a Collection object either by position or by key. Read-only.</returns>
      <param name="Index">(A) A numeric expression that specifies the position of an element of the collection. <paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property. Or (B) An Object expression that specifies the position or key string of an element of the collection.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.String)">
      <summary>Returns a specific element of a Collection object either by position or by key. Read-only.</summary>
      <returns>Returns a specific element of a Collection object either by position or by key. Read-only.</returns>
      <param name="Key">A unique String expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection. <paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
      <summary>Removes an element from a Collection object.</summary>
      <param name="Index">A numeric expression that specifies the position of an element of the collection. <paramref name="Index" /> must be a number from 1 through the value of the collection's <see cref="P:Microsoft.VisualBasic.Collection.Count" /> property.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
      <summary>Removes an element from a Collection object.</summary>
      <param name="Key">A unique String expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection. <paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompareMethod">
      <summary>Indicates how to compare strings when calling comparison functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompareMethod.Binary">
      <summary>Performs a binary comparison. This member is equivalent to the Visual Basic constant vbBinaryCompare.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompareMethod.Text">
      <summary>Performs a textual comparison. This member is equivalent to the Visual Basic constant vbTextCompare.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Constants">
      <summary>The Constants module contains miscellaneous constants. These constants can be used anywhere in your code.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbArray">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBack">
      <summary>Represents a backspace character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBinaryCompare">
      <summary>Indicates how to compare strings when calling comparison functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBoolean">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbByte">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCr">
      <summary>Represents a carriage-return character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCrLf">
      <summary>Represents a carriage-return character combined with a linefeed character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCurrency">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDate">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDecimal">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDouble">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbEmpty">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFalse">
      <summary>Indicates a Boolean value or whether the default should be used when calling number-formatting functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstFourDays">
      <summary>Indicates the first week of the year to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstFullWeek">
      <summary>Indicates the first week of the year to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstJan1">
      <summary>Indicates the first week of the year to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFormFeed">
      <summary>Represents a form-feed character for print functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFriday">
      <summary>Indicates the first day of the week to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbGeneralDate">
      <summary>Indicates how to display dates when calling the FormatDateTime function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbGet">
      <summary>Indicates the type of procedure being invoked.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbInteger">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLet">
      <summary>Indicates the type of procedure being invoked.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLf">
      <summary>Represents a linefeed character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLong">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLongDate">
      <summary>Indicates how to display dates when calling the FormatDateTime function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLongTime">
      <summary>Indicates how to display dates when calling the FormatDateTime function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMethod">
      <summary>Indicates the type of procedure being invoked.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMonday">
      <summary>Indicates the first day of the week to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNewLine">
      <summary>Represents a newline character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNull">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNullChar">
      <summary>Represents a null character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNullString">
      <summary>Represents a zero-length string for print and display functions, and for calling external procedures.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbObject">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbObjectError">
      <summary>Represents the object error number. User-defined error numbers should be greater than this value.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSaturday">
      <summary>Indicates the first day of the week to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSet">
      <summary>Indicates the type of procedure being invoked.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbShortDate">
      <summary>Indicates how to display dates when calling the FormatDateTime function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbShortTime">
      <summary>Indicates how to display dates when calling the FormatDateTime function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSingle">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbString">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSunday">
      <summary>Indicates the first day of the week to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTab">
      <summary>Represents a tab character for print and display functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTextCompare">
      <summary>Indicates how to compare strings when calling comparison functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbThursday">
      <summary>Indicates the first day of the week to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTrue">
      <summary>Indicates a Boolean value or whether the default should be used when calling number-formatting functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTuesday">
      <summary>Indicates the first day of the week to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseDefault">
      <summary>Indicates a Boolean value or whether the default should be used when calling number-formatting functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUserDefinedType">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseSystem">
      <summary>Indicates the first week of the year to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseSystemDayOfWeek">
      <summary>Indicates the first day of the week to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVariant">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVerticalTab">
      <summary>Represents a carriage-return character for print functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbWednesday">
      <summary>Indicates the first day of the week to use when calling date-related functions.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.ControlChars">
      <summary>The ControlChars module contains constants used as control characters. These constants can be used anywhere in your code.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ControlChars.#ctor">
      <summary>Initializes a new instance of the T:Microsoft.VisualBasic.ControlChars class. </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Back">
      <summary>When you call print and display functions, you can use the following constants in your code in place of the actual values.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Cr">
      <summary>When you call print and display functions, you can use the following constants in your code in place of the actual values.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.CrLf">
      <summary>When you call print and display functions, you can use the following constants in your code in place of the actual values.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.FormFeed">
      <summary>When you call print and display functions, you can use the following constants in your code in place of the actual values.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Lf">
      <summary>When you call print and display functions, you can use the following constants in your code in place of the actual values.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.NewLine">
      <summary>When you call print and display functions, you can use the following constants in your code in place of the actual values.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.NullChar">
      <summary>When you call print and display functions, you can use the following constants in your code in place of the actual values.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Quote">
      <summary>When you call print and display functions, you can use the following constants in your code in place of the actual values.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Tab">
      <summary>When you call print and display functions, you can use the following constants in your code in place of the actual values.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.VerticalTab">
      <summary>When you call print and display functions, you can use the following constants in your code in place of the actual values.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Conversion">
      <summary>The Conversion module contains the procedures used to perform various conversion operations.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
      <summary>Converts an object to the specified generic type.</summary>
      <returns>An object statically typed as the requested generic type.</returns>
      <param name="Expression">The object to convert.</param>
      <typeparam name="TargetType">The type to which to convert the object.</typeparam>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
      <summary>Converts an object to the specified type.</summary>
      <returns>An object whose type at run time is the requested target type.</returns>
      <param name="Expression">The object to convert.</param>
      <param name="TargetType">The type to which to convert the object.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.ErrorToString">
      <summary>Returns the error message that corresponds to a given error number.</summary>
      <returns>Returns the error message that corresponds to a given error number.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
      <summary>Returns the error message that corresponds to a given error number.</summary>
      <returns>Returns the error message that corresponds to a given error number.</returns>
      <param name="ErrorNumber">Optional. Any valid error number.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <returns>Returns a string representing the hexadecimal value of a number.</returns>
      <param name="Number">Required. Any valid numeric expression or String expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <returns>Returns a string representing the hexadecimal value of a number.</returns>
      <param name="Number">Required. Any valid numeric expression or String expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <returns>Returns a string representing the hexadecimal value of a number.</returns>
      <param name="Number">Required. Any valid numeric expression or String expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <returns>Returns a string representing the hexadecimal value of a number.</returns>
      <param name="Number">Required. Any valid numeric expression or String expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <returns>Returns a string representing the hexadecimal value of a number.</returns>
      <param name="Number">Required. Any valid numeric expression or String expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <returns>Returns a string representing the hexadecimal value of a number.</returns>
      <param name="Number">Required. Any valid numeric expression or String expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <returns>Returns a string representing the hexadecimal value of a number.</returns>
      <param name="Number">Required. Any valid numeric expression or String expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <returns>Returns a string representing the hexadecimal value of a number.</returns>
      <param name="Number">Required. Any valid numeric expression or String expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
      <summary>Returns a string representing the hexadecimal value of a number.</summary>
      <returns>Returns a string representing the hexadecimal value of a number.</returns>
      <param name="Number">Required. Any valid numeric expression or String expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
      <summary>Return the integer portion of a number.</summary>
      <returns>Return the integer portion of a number.</returns>
      <param name="Number">Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
      <summary>Returns a String representation of a number.</summary>
      <returns>Returns a String representation of a number.</returns>
      <param name="Number">Required. An Object containing any valid numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
      <summary>Returns the numbers contained in a string as a numeric value of appropriate type.</summary>
      <returns>Returns the numbers contained in a string as a numeric value of appropriate type.</returns>
      <param name="Expression">Required. Any valid String expression, Object variable, or Char value. If <paramref name="Expression" /> is of type Object, its value must be convertible to String or an <see cref="T:System.ArgumentException" /> error occurs.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
      <summary>Returns the numbers contained in a string as a numeric value of appropriate type.</summary>
      <returns>Returns the numbers contained in a string as a numeric value of appropriate type.</returns>
      <param name="Expression">Required. Any valid String expression, Object variable, or Char value. If <paramref name="Expression" /> is of type Object, its value must be convertible to String or an <see cref="T:System.ArgumentException" /> error occurs.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
      <summary>Returns the numbers contained in a string as a numeric value of appropriate type.</summary>
      <returns>Returns the numbers contained in a string as a numeric value of appropriate type.</returns>
      <param name="InputStr">Required. Any valid String expression, Object variable, or Char value. If <paramref name="Expression" /> is of type Object, its value must be convertible to String or an <see cref="T:System.ArgumentException" /> error occurs.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.DateAndTime">
      <summary>The DateAndTime module contains the procedures and properties used in date and time operations. </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)">
      <summary>Returns a Date value containing a date and time value to which a specified time interval has been added.</summary>
      <returns>Returns a Date value containing a date and time value to which a specified time interval has been added.</returns>
      <param name="Interval">Required. DateInterval enumeration value or String expression representing the time interval you want to add.</param>
      <param name="Number">Required. Double. Floating-point expression representing the number of intervals you want to add. <paramref name="Number" /> can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <paramref name="Interval" /> specifies hours, minutes, or seconds. For other values of <paramref name="Interval" />, any fractional part of <paramref name="Number" /> is ignored.</param>
      <param name="DateValue">Required. Date. An expression representing the date and time to which the interval is to be added. <paramref name="DateValue" /> itself is not changed in the calling program.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)">
      <summary>Returns a Date value containing a date and time value to which a specified time interval has been added.</summary>
      <returns>Returns a Date value containing a date and time value to which a specified time interval has been added.</returns>
      <param name="Interval">Required. DateInterval enumeration value or String expression representing the time interval you want to add.</param>
      <param name="Number">Required. Double. Floating-point expression representing the number of intervals you want to add. <paramref name="Number" /> can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <paramref name="Interval" /> specifies hours, minutes, or seconds. For other values of <paramref name="Interval" />, any fractional part of <paramref name="Number" /> is ignored.</param>
      <param name="DateValue">Required. Date. An expression representing the date and time to which the interval is to be added. <paramref name="DateValue" /> itself is not changed in the calling program.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>Returns a Long value specifying the number of time intervals between two Date values.</summary>
      <returns>Returns a Long value specifying the number of time intervals between two Date values.</returns>
      <param name="Interval">Required. DateInterval enumeration value or String expression representing the time interval you want to use as the unit of difference between <paramref name="Date1" /> and <paramref name="Date2" />.</param>
      <param name="Date1">Required. Date. The first date/time value you want to use in the calculation. </param>
      <param name="Date2">Required. Date. The second date/time value you want to use in the calculation.</param>
      <param name="DayOfWeek">Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.</param>
      <param name="WeekOfYear">Optional. A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. If not specified, FirstWeekOfYear.Jan1 is used.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>Returns a Long value specifying the number of time intervals between two Date values.</summary>
      <returns>Returns a Long value specifying the number of time intervals between two Date values.</returns>
      <param name="Interval">Required. DateInterval enumeration value or String expression representing the time interval you want to use as the unit of difference between <paramref name="Date1" /> and <paramref name="Date2" />.</param>
      <param name="Date1">Required. Date. The first date/time value you want to use in the calculation. </param>
      <param name="Date2">Required. Date. The second date/time value you want to use in the calculation.</param>
      <param name="DayOfWeek">Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.</param>
      <param name="WeekOfYear">Optional. A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. If not specified, FirstWeekOfYear.Jan1 is used.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>Returns an Integer value containing the specified component of a given Date value.</summary>
      <returns>Returns an Integer value containing the specified component of a given Date value.</returns>
      <param name="Interval">Required. DateInterval enumeration value or String expression representing the part of the date/time value you want to return.</param>
      <param name="DateValue">Required. Date value that you want to evaluate.</param>
      <param name="FirstDayOfWeekValue">Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.</param>
      <param name="FirstWeekOfYearValue">Optional. A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. If not specified, FirstWeekOfYear.Jan1 is used.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>Returns an Integer value containing the specified component of a given Date value.</summary>
      <returns>Returns an Integer value containing the specified component of a given Date value.</returns>
      <param name="Interval">Required. DateInterval enumeration value or String expression representing the part of the date/time value you want to return.</param>
      <param name="DateValue">Required. Date value that you want to evaluate.</param>
      <param name="DayOfWeek">Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.</param>
      <param name="WeekOfYear">Optional. A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. If not specified, FirstWeekOfYear.Jan1 is used.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)">
      <summary>Returns a Date value representing a specified year, month, and day, with the time information set to midnight (00:00:00).</summary>
      <returns>Returns a Date value representing a specified year, month, and day, with the time information set to midnight (00:00:00).</returns>
      <param name="Year">Required. Integer expression from 1 through 9999. However, values below this range are also accepted. If <paramref name="Year" /> is 0 through 99, it is interpreted as being between 1930 and 2029, as explained in the "Remarks" section below. If <paramref name="Year" /> is less than 1, it is subtracted from the current year.</param>
      <param name="Month">Required. Integer expression from 1 through 12. However, values outside this range are also accepted. The value of <paramref name="Month" /> is offset by 1 and applied to January of the calculated year. In other words, (<paramref name="Month" /> - 1) is added to January. The year is recalculated if necessary. The following results illustrate this effect:If <paramref name="Month" /> is 1, the result is January of the calculated year.If <paramref name="Month" /> is 0, the result is December of the previous year.If <paramref name="Month" /> is -1, the result is November of the previous year.If <paramref name="Month" /> is 13, the result is January of the following year.</param>
      <param name="Day">Required. Integer expression from 1 through 31. However, values outside this range are also accepted. The value of <paramref name="Day" /> is offset by 1 and applied to the first day of the calculated month. In other words, (<paramref name="Day" /> - 1) is added to the first of the month. The month and year are recalculated if necessary. The following results illustrate this effect:If <paramref name="Day" /> is 1, the result is the first day of the calculated month.If <paramref name="Day" /> is 0, the result is the last day of the previous month.If <paramref name="Day" /> is -1, the result is the penultimate day of the previous month.If <paramref name="Day" /> is past the end of the current month, the result is the appropriate day of the following month. For example, if <paramref name="Month" /> is 4 and <paramref name="Day" /> is 31, the result is May 1.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.DateString">
      <summary>Returns or sets a String value representing the current date according to your system.</summary>
      <returns>Gets a String value representing the current date according to your system.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)">
      <summary>Returns a Date value containing the date information represented by a string, with the time information set to midnight (00:00:00).</summary>
      <returns>Returns a Date value containing the date information represented by a string, with the time information set to midnight (00:00:00).</returns>
      <param name="StringDate">Required. String expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)">
      <summary>Returns an Integer value from 1 through 31 representing the day of the month.</summary>
      <returns>Returns an Integer value from 1 through 31 representing the day of the month.</returns>
      <param name="DateValue">Required. Date value from which you want to extract the day.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)">
      <summary>Returns an Integer value from 0 through 23 representing the hour of the day.</summary>
      <returns>Returns an Integer value from 0 through 23 representing the hour of the day.</returns>
      <param name="TimeValue">Required. Date value from which you want to extract the hour.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)">
      <summary>Returns an Integer value from 0 through 59 representing the minute of the hour.</summary>
      <returns>Returns an Integer value from 0 through 59 representing the minute of the hour.</returns>
      <param name="TimeValue">Required. Date value from which you want to extract the minute.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)">
      <summary>Returns an Integer value from 1 through 12 representing the month of the year.</summary>
      <returns>Returns an Integer value from 1 through 12 representing the month of the year.</returns>
      <param name="DateValue">Required. Date value from which you want to extract the month.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)">
      <summary>Returns a String value containing the name of the specified month.</summary>
      <returns>Returns a String value containing the name of the specified month.</returns>
      <param name="Month">Required. Integer. The numeric designation of the month, from 1 through 13; 1 indicates January and 12 indicates December. You can use the value 13 with a 13-month calendar. If your system is using a 12-month calendar and <paramref name="Month" /> is 13, MonthName returns an empty string.</param>
      <param name="Abbreviate">Optional. Boolean value that indicates if the month name is to be abbreviated. If omitted, the default is False, which means the month name is not abbreviated.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Now">
      <summary>Returns a Date value containing the current date and time according to your system.</summary>
      <returns>Returns a Date value containing the current date and time according to your system.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)">
      <summary>Returns an Integer value from 0 through 59 representing the second of the minute.</summary>
      <returns>Returns an Integer value from 0 through 59 representing the second of the minute.</returns>
      <param name="TimeValue">Required. Date value from which you want to extract the second.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay">
      <summary>Returns or sets a Date value containing the current time of day according to your system.</summary>
      <returns>Gets a Date value containing the current time of day according to your system.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Timer">
      <summary>Returns a Double value representing the number of seconds elapsed since midnight.</summary>
      <returns>Returns a Double value representing the number of seconds elapsed since midnight.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)">
      <summary>Returns a Date value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.</summary>
      <returns>Returns a Date value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.</returns>
      <param name="Hour">Required. Integer expression from 0 through 23. However, values outside this range are also accepted.</param>
      <param name="Minute">Required. Integer expression from 0 through 59. However, values outside this range are also accepted. The value of <paramref name="Minute" /> is added to the calculated hour, so a negative value specifies minutes before that hour.</param>
      <param name="Second">Required. Integer expression from 0 through 59. However, values outside this range are also accepted. The value of <paramref name="Second" /> is added to the calculated minute, so a negative value specifies seconds before that minute.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.TimeString">
      <summary>Returns or sets a String value representing the current time of day according to your system.</summary>
      <returns>Gets a String value representing the current time of day according to your system.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)">
      <summary>Returns a Date value containing the time information represented by a string, with the date information set to January 1 of the year 1.</summary>
      <returns>Returns a Date value containing the time information represented by a string, with the date information set to January 1 of the year 1.</returns>
      <param name="StringTime">Required. String expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Today">
      <summary>Returns or sets a Date value containing the current date according to your system.</summary>
      <returns>Gets a Date value containing the current date according to your system.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)">
      <summary>Returns an Integer value containing a number representing the day of the week.</summary>
      <returns>Returns an Integer value containing a number representing the day of the week.</returns>
      <param name="DateValue">Required. Date value for which you want to determine the day of the week.</param>
      <param name="DayOfWeek">Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)">
      <summary>Returns a String value containing the name of the specified weekday.</summary>
      <returns>Returns a String value containing the name of the specified weekday.</returns>
      <param name="Weekday">Required. Integer. The numeric designation for the weekday, from 1 through 7; 1 indicates the first day of the week and 7 indicates the last day of the week. The identities of the first and last days depend on the setting of <paramref name="FirstDayOfWeekValue" />.</param>
      <param name="Abbreviate">Optional. Boolean value that indicates if the weekday name is to be abbreviated. If omitted, the default is False, which means the weekday name is not abbreviated.</param>
      <param name="FirstDayOfWeekValue">Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.System is used.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)">
      <summary>Returns an Integer value from 1 through 9999 representing the year.</summary>
      <returns>Returns an Integer value from 1 through 9999 representing the year.</returns>
      <param name="DateValue">Required. Date value from which you want to extract the year.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.DateFormat">
      <summary>Indicates how to display dates when calling the FormatDateTime function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.GeneralDate">
      <summary>For real numbers, displays a date and time. If the number has no fractional part, displays only a date. If the number has no integer part, displays time only. Date and time display is determined by your computer's regional settings. This member is equivalent to the Visual Basic constant vbGeneralDate.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.LongDate">
      <summary>Displays a date using the long-date format specified in your computer's regional settings. This member is equivalent to the Visual Basic constant vbLongDate.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.ShortDate">
      <summary>Displays a date using the short-date format specified in your computer's regional settings. This member is equivalent to the Visual Basic constant vbShortDate.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.LongTime">
      <summary>Displays a time using the long-time format specified in your computer's regional settings. This member is equivalent to the Visual Basic constant vbLongTime.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.ShortTime">
      <summary>Displays a time using the short-time format specified in your computer's regional settings. This member is equivalent to the Visual Basic constant vbShortTime.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.DateInterval">
      <summary>Indicates how to determine and format date intervals when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Year">
      <summary>Year</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Quarter">
      <summary>Quarter of year (1 through 4)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Month">
      <summary>Month (1 through 12)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.DayOfYear">
      <summary>Day of year (1 through 366)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Day">
      <summary>Day of month (1 through 31)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.WeekOfYear">
      <summary>Week of year (1 through 53)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Weekday">
      <summary>Day of week (1 through 7)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Hour">
      <summary>Hour (1 through 24)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Minute">
      <summary>Minute (1 through 60)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Second">
      <summary>Second (1 through 60)</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.ErrObject">
      <summary>The ErrObject module contains properties and procedures used to identify and handle run-time errors using the Err object. </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.Clear">
      <summary>Clears all property settings of the Err object.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Description">
      <summary>Returns or sets a String expression containing a descriptive string associated with an error. Read/write.</summary>
      <returns>Returns or sets a String expression containing a descriptive string associated with an error. Read/write.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Erl">
      <summary>Returns an integer indicating the line number of the last executed statement. Read-only.</summary>
      <returns>Returns an integer indicating the line number of the last executed statement. Read-only.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.GetException">
      <summary>Returns the exception representing the error that occurred.</summary>
      <returns>Returns the exception representing the error that occurred.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Number">
      <summary>Returns or sets a numeric value specifying an error. Read/write.</summary>
      <returns>Returns or sets a numeric value specifying an error. Read/write.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object)">
      <summary>Generates a run-time error; can be used instead of the Error statement.</summary>
      <param name="Number">Required. Long integer that identifies the nature of the error. Visual Basic errors are in the range 0–65535; the range 0–512 is reserved for system errors; the range 513–65535 is available for user-defined errors. When setting the Number property to your own error code in a class module, you add your error code number to the vbObjectError constant. For example, to generate the error number 513, assign vbObjectError + 513 to the Number property.</param>
      <param name="Description">Optional. String expression describing the error. If unspecified, the value in the Number property is examined. If it can be mapped to a Visual Basic run-time error code, the string that would be returned by the Error function is used as the Description property. If there is no Visual Basic error corresponding to the Number property, the "Application-defined or object-defined error" message is used.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.FirstDayOfWeek">
      <summary>Indicates the first day of the week to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.System">
      <summary>The first day of the week as specified in your system settings This member is equivalent to the Visual Basic constant vbUseSystemDayOfWeek.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday">
      <summary>Sunday (default) This member is equivalent to the Visual Basic constant vbSunday.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Monday">
      <summary>Monday This member is equivalent to the Visual Basic constant vbMonday.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Tuesday">
      <summary>Tuesday This member is equivalent to the Visual Basic constant vbTuesday.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Wednesday">
      <summary>Wednesday This member is equivalent to the Visual Basic constant vbWednesday.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Thursday">
      <summary>Thursday This member is equivalent to the Visual Basic constant vbThursday.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Friday">
      <summary>Friday This member is equivalent to the Visual Basic constant vbFriday.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Saturday">
      <summary>Saturday This member is equivalent to the Visual Basic constant vbSaturday.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FirstWeekOfYear">
      <summary>Indicates the first week of the year to use when calling date-related functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.System">
      <summary>The day of the week specified in your system settings as the first day of the week This member is equivalent to the Visual Basic constant vbUseSystem.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1">
      <summary>The week in which January 1 occurs (default) This member is equivalent to the Visual Basic constant vbFirstJan1.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.FirstFourDays">
      <summary>The first week that has at least four days in the new year This member is equivalent to the Visual Basic constant vbFirstFourDays.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.FirstFullWeek">
      <summary>The first full week of the year This member is equivalent to the Visual Basic constant vbFirstFullWeek.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Globals">
      <summary>The Globals module contains script engine functions. </summary>
    </member>
    <member name="P:Microsoft.VisualBasic.Globals.ScriptEngine">
      <summary>Returns a String representing the runtime currently in use.</summary>
      <returns>Returns a String representing the runtime currently in use.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Globals.ScriptEngineBuildVersion">
      <summary>Returns an Integer containing the build version number of the runtime currently in use.</summary>
      <returns>Returns an Integer containing the build version number of the runtime currently in use.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Globals.ScriptEngineMajorVersion">
      <summary>Returns an Integer containing the major version number of the runtime currently in use.</summary>
      <returns>Returns an Integer containing the major version number of the runtime currently in use.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Globals.ScriptEngineMinorVersion">
      <summary>Returns an Integer containing the minor version number of the runtime currently in use.</summary>
      <returns>Returns an Integer containing the minor version number of the runtime currently in use.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.HideModuleNameAttribute">
      <summary>The HideModuleNameAttribute attribute, when applied to a module, allows the module members to be accessed using only the qualification needed for the module.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.HideModuleNameAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.HideModuleNameAttribute" /> attribute. </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Information">
      <summary>The Information module contains the procedures used to return, test for, or verify information. </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.Erl">
      <summary>Returns an integer indicating the line number of the last executed statement. Read-only.</summary>
      <returns>Returns an integer indicating the line number of the last executed statement. Read-only.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.Err">
      <summary>Contains information about run-time errors.</summary>
      <returns>Contains information about run-time errors.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
      <summary>Returns a Boolean value indicating whether a variable points to an array.</summary>
      <returns>Returns a Boolean value indicating whether a variable points to an array.</returns>
      <param name="VarName">Required. Object variable.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
      <summary>Returns a Boolean value indicating whether an expression represents a valid Date value.</summary>
      <returns>Returns a Boolean value indicating whether an expression represents a valid Date value.</returns>
      <param name="Expression">Required. Object expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
      <summary>Returns a Boolean value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</summary>
      <returns>Returns a Boolean value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</returns>
      <param name="Expression">Required. Object expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
      <summary>Returns a Boolean value indicating whether an expression is an exception type.</summary>
      <returns>Returns a Boolean value indicating whether an expression is an exception type.</returns>
      <param name="Expression">Required. Object expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
      <summary>Returns a Boolean value indicating whether an expression has no object assigned to it.</summary>
      <returns>Returns a Boolean value indicating whether an expression has no object assigned to it.</returns>
      <param name="Expression">Required. Object expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
      <summary>Returns a Boolean value indicating whether an expression evaluates to a reference type.</summary>
      <returns>Returns a Boolean value indicating whether an expression evaluates to a reference type.</returns>
      <param name="Expression">Required. Object expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
      <summary>Returns the lowest available subscript for the indicated dimension of an array.</summary>
      <returns>Integer. The lowest value the subscript for the specified dimension can contain. LBound always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string. If <paramref name="Array" /> is Nothing, LBound throws an <see cref="T:System.ArgumentNullException" />.</returns>
      <param name="Array">Required. Array of any data type. The array in which you want to find the lowest possible subscript of a dimension.</param>
      <param name="Rank">Optional. Integer. The dimension for which the lowest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <paramref name="Rank" /> is omitted, 1 is assumed.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
      <summary>Returns the highest available subscript for the indicated dimension of an array.</summary>
      <returns>Integer. The highest value the subscript for the specified dimension can contain. If <paramref name="Array" /> has only one element, UBound returns 0. If <paramref name="Array" /> has no elements, for example if it is a zero-length string, UBound returns -1. </returns>
      <param name="Array">Required. Array of any data type. The array in which you want to find the highest possible subscript of a dimension.</param>
      <param name="Rank">Optional. Integer. The dimension for which the highest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <paramref name="Rank" /> is omitted, 1 is assumed.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
      <summary>Returns an Integer value containing the data type classification of a variable.</summary>
      <returns>Returns an Integer value containing the data type classification of a variable.</returns>
      <param name="VarName">Required. Object variable. If Option Strict is Off, you can pass a variable of any data type except a structure.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Interaction">
      <summary>The Interaction module contains procedures used to interact with objects, applications, and systems. </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])">
      <summary>Selects and returns a value from a list of arguments.</summary>
      <returns>Selects and returns a value from a list of arguments.</returns>
      <param name="Index">Required. Double. Numeric expression that results in a value between 1 and the number of elements passed in the <paramref name="Choice" /> argument.</param>
      <param name="Choice">Required. Object parameter array. You can supply either a single variable or an expression that evaluates to the Object data type, to a list of Object variables or expressions separated by commas, or to a single-dimensional array of Object elements.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)">
      <summary>Returns one of two objects, depending on the evaluation of an expression.</summary>
      <returns>Returns one of two objects, depending on the evaluation of an expression.</returns>
      <param name="Expression">Required. Boolean. The expression you want to evaluate.</param>
      <param name="TruePart">Required. Object. Returned if <paramref name="Expression" /> evaluates to True.</param>
      <param name="FalsePart">Required. Object. Returned if <paramref name="Expression" /> evaluates to False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)">
      <summary>Returns a string representing the calculated range that contains a number.</summary>
      <returns>Returns a string representing the calculated range that contains a number.</returns>
      <param name="Number">Required. Long. Whole number that you want to locate within one of the calculated ranges.</param>
      <param name="Start">Required. Long. Whole number that indicates the start of the set of calculated ranges. <paramref name="Start" /> cannot be less than 0.</param>
      <param name="Stop">Required. Long. Whole number that indicates the end of the set of calculated ranges. <paramref name="Stop" /> cannot be less than or equal to <paramref name="Start" />.</param>
      <param name="Interval">Required. Long. Whole number that indicates the size of each range calculated between <paramref name="Start" /> and <paramref name="Stop" />. <paramref name="Interval" /> cannot be less than 1.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])">
      <summary>Evaluates a list of expressions and returns an Object value corresponding to the first expression in the list that is True.</summary>
      <returns>Evaluates a list of expressions and returns an Object value corresponding to the first expression in the list that is True.</returns>
      <param name="VarExpr">Required. Object parameter array. Must have an even number of elements. You can supply a list of Object variables or expressions separated by commas, or a single-dimensional array of Object elements.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.MyGroupCollectionAttribute">
      <summary>Specifies that the class will be modified based on the type identified by the <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.MyGroupName" /> property.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.MyGroupCollectionAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualBasic.MyGroupCollectionAttribute" /> attribute.</summary>
      <param name="typeToCollect">String. Initializes the <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.MyGroupName" /> property. The compiler generates accessor properties for classes that derive from this type.</param>
      <param name="createInstanceMethodName">String. Initializes the <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.CreateMethod" /> property. Specifies the method in the class that creates the type's instances.</param>
      <param name="disposeInstanceMethodName">String. Initializes the <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DisposeMethod" /> property. Specifies the method in the class that disposes of the type's instances.</param>
      <param name="defaultInstanceAlias">String. Initializes the <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DefaultInstanceAlias" /> property. Specifies the name of the property that returns the default instance of the class.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.CreateMethod">
      <summary>Gets the name of the method in the class that creates the type's instances.</summary>
      <returns>The method in the class that creates the type's instances.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DefaultInstanceAlias">
      <summary>Gets the name of the property that returns the default instance of the class.</summary>
      <returns>The name of the property that returns the default instance of the class.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DisposeMethod">
      <summary>Gets the name of the method in the class that disposes of the type's instances.</summary>
      <returns>The method in the class that disposes of the type's instances.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.MyGroupName">
      <summary>Gets the name of the type for which the compiler generates accessor properties</summary>
      <returns>The name of the type for which the compiler generates accessor properties.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Strings">
      <summary>The Strings module contains procedures used to perform string operations. </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
      <summary>Returns an Integer value representing the character code corresponding to a character.</summary>
      <returns>Returns an Integer value representing the character code corresponding to a character.</returns>
      <param name="String">Required. Any valid Char or String expression. If <paramref name="String" /> is a String expression, only the first character of the string is used for input. If <paramref name="String" /> is Nothing or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
      <summary>Returns an Integer value representing the character code corresponding to a character.</summary>
      <returns>Returns an Integer value representing the character code corresponding to a character.</returns>
      <param name="String">Required. Any valid Char or String expression. If <paramref name="String" /> is a String expression, only the first character of the string is used for input. If <paramref name="String" /> is Nothing or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
      <summary>Returns the character associated with the specified character code.</summary>
      <returns>Returns the character associated with the specified character code.</returns>
      <param name="CharCode">Required. An Integer expression representing the code point, or character code, for the character. If <paramref name="CharCode" /> is outside the valid range, an <see cref="T:System.ArgumentException" /> error occurs. The valid range for ChrW is -32768 through 65535.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns a zero-based array containing a subset of a String array based on specified filter criteria.</summary>
      <returns>Returns a zero-based array containing a subset of a String array based on specified filter criteria.</returns>
      <param name="Source">Required. One-dimensional array of strings to be searched.</param>
      <param name="Match">Required. String to search for.</param>
      <param name="Include">Optional. Boolean value indicating whether to return substrings that include or exclude <paramref name="Match" />. If <paramref name="Include" /> is True, the Filter function returns the subset of the array that contains <paramref name="Match" /> as a substring. If <paramref name="Include" /> is False, the Filter function returns the subset of the array that does not contain <paramref name="Match" /> as a substring.</param>
      <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns a zero-based array containing a subset of a String array based on specified filter criteria.</summary>
      <returns>Returns a zero-based array containing a subset of a String array based on specified filter criteria.</returns>
      <param name="Source">Required. One-dimensional array of strings to be searched.</param>
      <param name="Match">Required. String to search for.</param>
      <param name="Include">Optional. Boolean value indicating whether to return substrings that include or exclude <paramref name="Match" />. If <paramref name="Include" /> is True, the Filter function returns the subset of the array that contains <paramref name="Match" /> as a substring. If <paramref name="Include" /> is False, the Filter function returns the subset of the array that does not contain <paramref name="Match" /> as a substring.</param>
      <param name="Compare">Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
      <summary>Returns a string formatted according to instructions contained in a format String expression.</summary>
      <returns>Returns a string formatted according to instructions contained in a format String expression.</returns>
      <param name="Expression">Required. Any valid expression.</param>
      <param name="Style">Optional. A valid named or user-defined format String expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</summary>
      <returns>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.</returns>
      <param name="Expression">Required. Expression to be formatted.</param>
      <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. Default value is –1, which indicates that the computer's regional settings are used.</param>
      <param name="IncludeLeadingDigit">Optional. TriState enumeration that indicates whether or not a leading zero is displayed for fractional values. See "Settings" for values.</param>
      <param name="UseParensForNegativeNumbers">Optional. TriState enumeration that indicates whether or not to place negative values within parentheses. See "Settings" for values.</param>
      <param name="GroupDigits">Optional. TriState enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See "Settings" for values.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
      <summary>Returns a string expression representing a date/time value.</summary>
      <returns>Returns a string expression representing a date/time value.</returns>
      <param name="Expression">Required. Date expression to be formatted.</param>
      <param name="NamedFormat">Optional. Numeric value that indicates the date/time format used. If omitted, DateFormat.GeneralDate is used.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>Returns an expression formatted as a number.</summary>
      <returns>Returns an expression formatted as a number.</returns>
      <param name="Expression">Required. Expression to be formatted.</param>
      <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places are displayed to the right of the decimal. The default value is –1, which indicates that the computer's regional settings are used.</param>
      <param name="IncludeLeadingDigit">Optional. TriState constant that indicates whether a leading 0 is displayed for fractional values. See "Settings" for values.</param>
      <param name="UseParensForNegativeNumbers">Optional. TriState constant that indicates whether to place negative values within parentheses. See "Settings" for values.</param>
      <param name="GroupDigits">Optional. TriState constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</summary>
      <returns>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.</returns>
      <param name="Expression">Required. Expression to be formatted.</param>
      <param name="NumDigitsAfterDecimal">Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1, which indicates that the locale settings are used.</param>
      <param name="IncludeLeadingDigit">Optional. TriState constant that indicates whether or not a leading zero displays for fractional values. See "Settings" for values.</param>
      <param name="UseParensForNegativeNumbers">Optional. TriState constant that indicates whether or not to place negative values within parentheses. See "Settings" for values.</param>
      <param name="GroupDigits">Optional. TriState constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
      <summary>Returns a Char value representing the character from the specified index in the supplied string.</summary>
      <returns>Returns a Char value representing the character from the specified index in the supplied string.</returns>
      <param name="str">Required. Any valid String expression.</param>
      <param name="Index">Required. Integer expression. The (1-based) index of the character in <paramref name="str" /> to be returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
      <returns>If <paramref name="String1" /> is zero length or Nothing, InStr returns 0. If <paramref name="String2" /> is zero length or Nothing, InStr returns <paramref name="start" />. If <paramref name="String2" /> is not found, InStr returns 0. If <paramref name="String2" /> is found within <paramref name="String1" />, InStr returns position where match begins. If <paramref name="Start" /> &gt; <paramref name="String2" />, InStr returns 0. </returns>
      <param name="Start">Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1-based.</param>
      <param name="String1">Required. String expression being searched.</param>
      <param name="String2">Required. String expression sought.</param>
      <param name="Compare">Optional. Specifies the type of string comparison. If <paramref name="Compare" /> is omitted, the Option Compare setting determines the type of comparison. </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns an integer specifying the start position of the first occurrence of one string within another.</summary>
      <returns>If <paramref name="String1" /> is zero length or Nothing, InStr returns 0. If <paramref name="String2" /> is zero length or Nothing, InStr returns <paramref name="start" />. If <paramref name="String2" /> is not found, InStr returns 0. If <paramref name="String2" /> is found within <paramref name="String1" />, InStr returns position where match begins. If <paramref name="Start" /> &gt; <paramref name="String2" />, InStr returns 0. </returns>
      <param name="String1">Required. String expression being searched.</param>
      <param name="String2">Required. String expression sought.</param>
      <param name="Compare">Optional. Specifies the type of string comparison. If <paramref name="Compare" /> is omitted, the Option Compare setting determines the type of comparison. </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns the position of the first occurrence of one string within another, starting from the right side of the string.</summary>
      <returns>If <paramref name="StringCheck" /> is zero-length, InStrRev returns 0. If <paramref name="StringMatch" /> is zero-length, InStrRev returns <paramref name="Start" />. If <paramref name="StringMatch" /> is not found, InStrRev returns 0. If <paramref name="StringMatch" /> is found within <paramref name="StringCheck" />, InStrRev returns position at which the first match is found, starting with the right side of the string. If <paramref name="Start" /> is greater than length of <paramref name="StringMatch" />, InStrRev returns 0. </returns>
      <param name="StringCheck">Required. String expression being searched.</param>
      <param name="StringMatch">Required. String expression being searched for.</param>
      <param name="Start">Optional. Numeric expression setting the one-based starting position for each search, starting from the left side of the string. If <paramref name="Start" /> is omitted then –1 is used, meaning the search begins at the last character position. Search then proceeds from right to left.</param>
      <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
      <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
      <returns>Returns a string created by joining a number of substrings contained in an array.</returns>
      <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
      <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <paramref name="Delimiter" /> is a zero-length string ("") or Nothing, all items in the list are concatenated with no delimiters.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
      <summary>Returns a string created by joining a number of substrings contained in an array.</summary>
      <returns>Returns a string created by joining a number of substrings contained in an array.</returns>
      <param name="SourceArray">Required. One-dimensional array containing substrings to be joined.</param>
      <param name="Delimiter">Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <paramref name="Delimiter" /> is a zero-length string ("") or Nothing, all items in the list are concatenated with no delimiters.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
      <summary>Returns a string or character converted to lowercase.</summary>
      <returns>Returns a string or character converted to lowercase.</returns>
      <param name="Value">Required. Any valid String or Char expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
      <summary>Returns a string or character converted to lowercase.</summary>
      <returns>Returns a string or character converted to lowercase.</returns>
      <param name="Value">Required. Any valid String or Char expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
      <summary>Returns a string containing a specified number of characters from the left side of a string.</summary>
      <returns>Returns a string containing a specified number of characters from the left side of a string.</returns>
      <param name="str">Required. String expression from which the leftmost characters are returned.</param>
      <param name="Length">Required. Integer expression. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <paramref name="str" />, the entire string is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.String)">
      <summary>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</summary>
      <returns>Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</returns>
      <param name="Expression">Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
      <summary>Returns a left-aligned string containing the specified string adjusted to the specified length.</summary>
      <returns>Returns a left-aligned string containing the specified string adjusted to the specified length.</returns>
      <param name="Source">Required. String expression. Name of string variable.</param>
      <param name="Length">Required. Integer expression. Length of returned string.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
      <summary>Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).</summary>
      <returns>Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).</returns>
      <param name="str">Required. Any valid String expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
      <summary>Returns a string containing a specified number of characters from a string.</summary>
      <returns>Returns a string containing a specified number of characters from a string.</returns>
      <param name="str">Required. String expression from which characters are returned.</param>
      <param name="Start">Required. Integer expression. Starting position of the characters to return. If <paramref name="Start" /> is greater than the number of characters in <paramref name="str" />, the Mid function returns a zero-length string (""). <paramref name="Start" /> is one based.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
      <summary>Returns a string containing a specified number of characters from a string.</summary>
      <returns>Returns a string containing a specified number of characters from a string.</returns>
      <param name="str">Required. String expression from which characters are returned.</param>
      <param name="Start">Required. Integer expression. Starting position of the characters to return. If <paramref name="Start" /> is greater than the number of characters in <paramref name="str" />, the Mid function returns a zero-length string (""). <paramref name="Start" /> is one based.</param>
      <param name="Length">Optional. Integer expression. Number of characters to return. If omitted or if there are fewer than <paramref name="Length" /> characters in the text (including the character at position <paramref name="Start" />), all characters from the start position to the end of the string are returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns a string in which a specified substring has been replaced with another substring a specified number of times.</summary>
      <returns>If <paramref name="Find" /> is zero-length or Nothing, Replace returns copy of <paramref name="Expression" />. If <paramref name="Replace" /> is zero-length, Replace returns copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" />. If <paramref name="Expression" /> is zero-length or Nothing, or <paramref name="Start" /> is greater than length of <paramref name="Expression" />, Replace returns Nothing. If <paramref name="Count" /> is 0, Replace returns copy of <paramref name="Expression" />. </returns>
      <param name="Expression">Required. String expression containing substring to replace.</param>
      <param name="Find">Required. Substring being searched for.</param>
      <param name="Replacement">Required. Replacement substring.</param>
      <param name="Start">Optional. Position within <paramref name="Expression" /> where substring search is to begin. If omitted, 1 is assumed.</param>
      <param name="Count">Optional. Number of substring substitutions to perform. If omitted, the default value is –1, which means "make all possible substitutions."</param>
      <param name="Compare">Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
      <summary>Returns a string containing a specified number of characters from the right side of a string.</summary>
      <returns>Returns a string containing a specified number of characters from the right side of a string.</returns>
      <param name="str">Required. String expression from which the rightmost characters are returned.</param>
      <param name="Length">Required. Integer. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <paramref name="str" />, the entire string is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
      <summary>Returns a right-aligned string containing the specified string adjusted to the specified length. </summary>
      <returns>Returns a right-aligned string containing the specified string adjusted to the specified length. </returns>
      <param name="Source">Required. String expression. Name of string variable.</param>
      <param name="Length">Required. Integer expression. Length of returned string.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
      <summary>Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).</summary>
      <returns>Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).</returns>
      <param name="str">Required. Any valid String expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
      <summary>Returns a string consisting of the specified number of spaces.</summary>
      <returns>Returns a string consisting of the specified number of spaces.</returns>
      <param name="Number">Required. Integer expression. The number of spaces you want in the string.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns a zero-based, one-dimensional array containing a specified number of substrings.</summary>
      <returns>String array. If <paramref name="Expression" /> is a zero-length string (""), Split returns a single-element array containing a zero-length string. If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, Split returns a single-element array containing the entire <paramref name="Expression" /> string.</returns>
      <param name="Expression">Required. String expression containing substrings and delimiters.</param>
      <param name="Delimiter">Optional. Any single character used to identify substring limits. If <paramref name="Delimiter" /> is omitted, the space character (" ") is assumed to be the delimiter.</param>
      <param name="Limit">Optional. Maximum number of substrings into which the input string should be split. The default, –1, indicates that the input string should be split at every occurrence of the <paramref name="Delimiter" /> string.</param>
      <param name="Compare">Optional. Numeric value indicating the comparison to use when evaluating substrings. See "Settings" for values.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Returns -1, 0, or 1, based on the result of a string comparison. </summary>
      <returns>If <paramref name="String1" /> sorts ahead of <paramref name="String2" />, StrComp returns -1. If <paramref name="String1" /> is equal to <paramref name="String2" />, StrComp returns  0. If <paramref name="String1" /> sorts after <paramref name="String2" />, StrComp returns  1. </returns>
      <param name="String1">Required. Any valid String expression.</param>
      <param name="String2">Required. Any valid String expression.</param>
      <param name="Compare">Optional. Specifies the type of string comparison. If <paramref name="Compare" /> is omitted, the Option Compare setting determines the type of comparison.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
      <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
      <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
      <param name="Number">Required. Integer expression. The length to the string to be returned.</param>
      <param name="Character">Required. Any valid Char, String, or Object expression. Only the first character of the expression will be used. If Character is of type Object, it must contain either a Char or a String value. </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
      <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
      <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
      <param name="Number">Required. Integer expression. The length to the string to be returned.</param>
      <param name="Character">Required. Any valid Char, String, or Object expression. Only the first character of the expression will be used. If Character is of type Object, it must contain either a Char or a String value. </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
      <summary>Returns a string or object consisting of the specified character repeated the specified number of times.</summary>
      <returns>Returns a string or object consisting of the specified character repeated the specified number of times.</returns>
      <param name="Number">Required. Integer expression. The length to the string to be returned.</param>
      <param name="Character">Required. Any valid Char, String, or Object expression. Only the first character of the expression will be used. If Character is of type Object, it must contain either a Char or a String value. </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)">
      <summary>Returns a string in which the character order of a specified string is reversed.</summary>
      <returns>Returns a string in which the character order of a specified string is reversed.</returns>
      <param name="Expression">Required. String expression whose characters are to be reversed. If <paramref name="Expression" /> is a zero-length string (""), a zero-length string is returned.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
      <summary>Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).</summary>
      <returns>Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).</returns>
      <param name="str">Required. Any valid String expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
      <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
      <returns>Returns a string or character containing the specified string converted to uppercase.</returns>
      <param name="Value">Required. Any valid String or Char expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
      <summary>Returns a string or character containing the specified string converted to uppercase.</summary>
      <returns>Returns a string or character containing the specified string converted to uppercase.</returns>
      <param name="Value">Required. Any valid String or Char expression.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.TriState">
      <summary>Indicates a Boolean value or whether the default should be used when calling number-formatting functions.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.False">
      <summary>False. The numeric value of this member is 0.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.True">
      <summary>True. The numeric value of this member is -1.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.UseDefault">
      <summary>Default setting. The numeric value of this member is -2.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.VariantType">
      <summary>Indicates the type of a variant object, returned by the VarType function.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Empty">
      <summary>Null reference. This member is equivalent to the Visual Basic constant vbEmpty.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Null">
      <summary>Null object. This member is equivalent to the Visual Basic constant vbNull.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Short">
      <summary>Short. (-32,768 through 32,767.)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Integer">
      <summary>Integer. (-2,147,483,648 through 2,147,483,647.) This member is equivalent to the Visual Basic constant vbInteger.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Single">
      <summary>Single. (-3.402823E+38 through -1.401298E-45 for negative values; 1.401298E-45 through 3.402823E+38 for positive values.) This member is equivalent to the Visual Basic constant vbSingle.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Double">
      <summary>Double. (-1.79769313486231E+308 through -4.94065645841247E-324 for negative values; 4.94065645841247E-324 through 1.79769313486231E+308 for positive values.) This member is equivalent to the Visual Basic constant vbDouble.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Currency">
      <summary>Currency. This member is equivalent to the Visual Basic constant vbCurrency.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Date">
      <summary>Date. (0:00:00 on January 1, 0001 through 11:59:59 PM on December 31, 9999.) This member is equivalent to the Visual Basic constant vbDate.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.String">
      <summary>String. (0 to approximately 2 billion Unicode characters.) This member is equivalent to the Visual Basic constant vbString.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Object">
      <summary>Any type can be stored in a variable of type Object. This member is equivalent to the Visual Basic constant vbObject.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Error">
      <summary>
        <see cref="T:System.Exception" />
      </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Boolean">
      <summary>Boolean. (True or False.) This member is equivalent to the Visual Basic constant vbBoolean.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Variant">
      <summary>Variant. This member is equivalent to the Visual Basic constant vbVariant.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.DataObject">
      <summary>DataObject.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Decimal">
      <summary>Decimal. (0 through +/-79,228,162,514,264,337,593,543,950,335 with no decimal point; 0 through +/-7.9228162514264337593543950335 with 28 places to the right of the decimal; smallest non-zero number is +/-0.0000000000000000000000000001.) This member is equivalent to the Visual Basic constant vbDecimal.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Byte">
      <summary>Byte. (0 through 255.) This member is equivalent to the Visual Basic constant vbByte.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Char">
      <summary>Char. (0 through 65535.) This member is equivalent to the Visual Basic constant vbChar.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Long">
      <summary>Long. (-9,223,372,036,854,775,808 through 9,223,372,036,854,775,807.) This member is equivalent to the Visual Basic constant vbLong.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.UserDefinedType">
      <summary>User-defined type. Each member of the structure has a range determined by its data type and independent of the ranges of the other members. This member is equivalent to the Visual Basic constant vbUserDefinedType.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Array">
      <summary>Array. This member is equivalent to the Visual Basic constant vbArray.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.VBMath">
      <summary>The VbMath module contains procedures used to perform mathematical operations. </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Randomize">
      <summary>Initializes the random-number generator.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)">
      <summary>Initializes the random-number generator.</summary>
      <param name="Number">Optional. An Object or any valid numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Rnd">
      <summary>Returns a random number of type Single.</summary>
      <returns>If number is less than zero, Rnd generates the same number every time, using <paramref name="Number" /> as the seed. If number is greater than zero, Rnd generates the next random number in the sequence. If number is equal to zero, Rnd generates the most recently generated number. If number is not supplied, Rnd generates the next random number in the sequence.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)">
      <summary>Returns a random number of type Single.</summary>
      <returns>If number is less than zero, Rnd generates the same number every time, using <paramref name="Number" /> as the seed. If number is greater than zero, Rnd generates the next random number in the sequence. If number is equal to zero, Rnd generates the most recently generated number. If number is not supplied, Rnd generates the next random number in the sequence.</returns>
      <param name="Number">Optional. A Single value or any valid Single expression.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Conversions">
      <summary>Provides methods that perform various type conversions.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ChangeType(System.Object,System.Type)">
      <summary>Converts an object to the specified type.</summary>
      <returns>An object of the specified target type.</returns>
      <param name="Expression">The object to convert.</param>
      <param name="TargetType">The type to which to convert the object.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FallbackUserDefinedConversion(System.Object,System.Type)">
      <summary>Converts an object to the specified type.</summary>
      <returns>An object of the specified target type.</returns>
      <param name="Expression">The object to convert.</param>
      <param name="TargetType">The type to which to convert the object.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharAndCount(System.Char,System.Int32)">
      <summary>Converts a <see cref="T:System.Char" /> value to a string, given a byte count.</summary>
      <returns>The string representation of the specified value.</returns>
      <param name="Value">The Char value to convert.</param>
      <param name="Count">The byte count of the Char value.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharArray(System.Char[])">
      <summary>Converts a <see cref="T:System.Char" /> array to a string.</summary>
      <returns>The string representation of the specified array.</returns>
      <param name="Value">The Char array to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharArraySubset(System.Char[],System.Int32,System.Int32)">
      <summary>Converts a subset of a <see cref="T:System.Char" /> array to a string.</summary>
      <returns>The string representation of the specified array from the start position to the specified length.</returns>
      <param name="Value">The Char array to convert.</param>
      <param name="StartIndex">Zero-based index of the start position.</param>
      <param name="Length">Length of the subset in bytes.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToBoolean(System.Object)">
      <summary>Converts an object to a <see cref="T:System.Boolean" /> value.</summary>
      <returns>A Boolean value. Returns False if the object is null; otherwise, True.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToBoolean(System.String)">
      <summary>Converts a string to a <see cref="T:System.Boolean" /> value.</summary>
      <returns>A Boolean value. Returns False if the string is null; otherwise, True.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToByte(System.Object)">
      <summary>Converts an object to a <see cref="T:System.Byte" /> value.</summary>
      <returns>The Byte value of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToByte(System.String)">
      <summary>Converts a string to a <see cref="T:System.Byte" /> value.</summary>
      <returns>The Byte value of the string.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToChar(System.Object)">
      <summary>Converts an object to a <see cref="T:System.Char" /> value.</summary>
      <returns>The Char value of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToChar(System.String)">
      <summary>Converts a string to a <see cref="T:System.Char" /> value.</summary>
      <returns>The Char value of the string.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToCharArrayRankOne(System.Object)">
      <summary>Converts an object to a one-dimensional <see cref="T:System.Char" /> array.</summary>
      <returns>A one-dimensional Char array.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToCharArrayRankOne(System.String)">
      <summary>Converts a string to a one-dimensional <see cref="T:System.Char" /> array.</summary>
      <returns>A one-dimensional Char array.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDate(System.Object)">
      <summary>Converts an object to a <see cref="T:System.DateTime" /> value.</summary>
      <returns>The DateTime value of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDate(System.String)">
      <summary>Converts a string to a <see cref="T:System.DateTime" /> value.</summary>
      <returns>The DateTime value of the string.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.Boolean)">
      <summary>Converts a <see cref="T:System.Boolean" /> value to a <see cref="T:System.Decimal" /> value.</summary>
      <returns>The Decimal value of the Boolean value.</returns>
      <param name="Value">A Boolean value to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.Object)">
      <summary>Converts an object to a <see cref="T:System.Decimal" /> value.</summary>
      <returns>The Decimal value of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.String)">
      <summary>Converts a string to a <see cref="T:System.Decimal" /> value.</summary>
      <returns>The Decimal value of the string.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDouble(System.Object)">
      <summary>Converts an object to a <see cref="T:System.Double" /> value.</summary>
      <returns>The Double value of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDouble(System.String)">
      <summary>Converts a string to a <see cref="T:System.Double" /> value.</summary>
      <returns>The Double value of the string.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToGenericParameter``1(System.Object)">
      <summary>Converts an object to a generic type <paramref name="T" />.</summary>
      <returns>A structure or object of generic type <paramref name="T" />.</returns>
      <param name="Value">The object to convert.</param>
      <typeparam name="T">The type to convert <paramref name="Value" /> to.</typeparam>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger(System.Object)">
      <summary>Converts an object to an integer value.</summary>
      <returns>The int value of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger(System.String)">
      <summary>Converts a string to an integer value.</summary>
      <returns>The int value of the string.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToLong(System.Object)">
      <summary>Converts an object to a Long value.</summary>
      <returns>The Long value of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToLong(System.String)">
      <summary>Converts a string to a Long value.</summary>
      <returns>The Long value of the string.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSByte(System.Object)">
      <summary>Converts an object to an <see cref="T:System.SByte" /> value.</summary>
      <returns>The SByte value of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSByte(System.String)">
      <summary>Converts a string to an <see cref="T:System.SByte" /> value.</summary>
      <returns>The SByte value of the string.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToShort(System.Object)">
      <summary>Converts an object to a Short value.</summary>
      <returns>The Short value of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToShort(System.String)">
      <summary>Converts a string to a Short value.</summary>
      <returns>The Short value of the string.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSingle(System.Object)">
      <summary>Converts an object to a <see cref="T:System.Single" /> value.</summary>
      <returns>The Single value of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSingle(System.String)">
      <summary>Converts a <see cref="T:System.String" /> to a <see cref="T:System.Single" /> value.</summary>
      <returns>The Single value of the string.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Boolean)">
      <summary>Converts a <see cref="T:System.Boolean" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The String representation of the Boolean value.</returns>
      <param name="Value">The Boolean value to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Byte)">
      <summary>Converts a <see cref="T:System.Byte" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The String representation of the Byte value.</returns>
      <param name="Value">The Byte value to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Char)">
      <summary>Converts a <see cref="T:System.Char" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The String representation of the Char value.</returns>
      <param name="Value">The Char value to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.DateTime)">
      <summary>Converts a <see cref="T:System.DateTime" /> value to a <see cref="T:System.String" /> value.</summary>
      <returns>The String representation of the DateTime value.</returns>
      <param name="Value">The DateTime value to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Decimal)">
      <summary>Converts a <see cref="T:System.Decimal" /> value to a <see cref="T:System.String" /> value.</summary>
      <returns>The String representation of the Decimal value.</returns>
      <param name="Value">The Decimal value to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Decimal,System.Globalization.NumberFormatInfo)">
      <summary>Converts a <see cref="T:System.Decimal" /> value to a <see cref="T:System.String" /> value, using the specified number format.</summary>
      <returns>The String representation of the Decimal value.</returns>
      <param name="Value">The decimal value to convert.</param>
      <param name="NumberFormat">The number format to use, according to <see cref="T:System.Globalization.NumberFormatInfo" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Double)">
      <summary>Converts a <see cref="T:System.Double" /> value to a <see cref="T:System.String" /> value.</summary>
      <returns>The String representation of the Double value.</returns>
      <param name="Value">The Double value to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Double,System.Globalization.NumberFormatInfo)">
      <summary>Converts a <see cref="T:System.Double" /> value to a <see cref="T:System.String" /> value, using the specified number format.</summary>
      <returns>The String representation of the Double value.</returns>
      <param name="Value">The Double value to convert.</param>
      <param name="NumberFormat">The number format to use, according to <see cref="T:System.Globalization.NumberFormatInfo" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int16)">
      <summary>Converts a Short value to a <see cref="T:System.String" /> value.</summary>
      <returns>The String representation of the Short value.</returns>
      <param name="Value">The Short value to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int32)">
      <summary>Converts an integer value to a <see cref="T:System.String" /> value.</summary>
      <returns>The String representation of the int value.</returns>
      <param name="Value">The int value to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int64)">
      <summary>Converts a Long value to a <see cref="T:System.String" /> value.</summary>
      <returns>The String representation of the Long value.</returns>
      <param name="Value">The Long value to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Object)">
      <summary>Converts an object to a <see cref="T:System.String" /> value.</summary>
      <returns>The String representation of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Single)">
      <summary>Converts a <see cref="T:System.Single" /> value (a single-precision floating point number) to a <see cref="T:System.String" /> value.</summary>
      <returns>The String representation of the Single value.</returns>
      <param name="Value">The Single value to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Single,System.Globalization.NumberFormatInfo)">
      <summary>Converts a <see cref="T:System.Single" /> value to a <see cref="T:System.String" /> value, using the specified number format.</summary>
      <returns>The String representation of the Single value.</returns>
      <param name="Value">The Single value to convert.</param>
      <param name="NumberFormat">The number format to use, according to <see cref="T:System.Globalization.NumberFormatInfo" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.UInt32)">
      <summary>Converts a uint value to a <see cref="T:System.String" /> value.</summary>
      <returns>The String representation of the Uint value.</returns>
      <param name="Value">The Uint value to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.UInt64)">
      <summary>Converts a Ulong value to a <see cref="T:System.String" /> value.</summary>
      <returns>The String representation of the Ulong value.</returns>
      <param name="Value">The Ulong value to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUInteger(System.Object)">
      <summary>Converts an object to a Uint value.</summary>
      <returns>The Uint value of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUInteger(System.String)">
      <summary>Converts a string to a Uint value.</summary>
      <returns>The Uint value of the string.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToULong(System.Object)">
      <summary>Converts an object to a Ulong value.</summary>
      <returns>The Ulong value of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToULong(System.String)">
      <summary>Converts a string to a Ulong value.</summary>
      <returns>The Ulong value of the string.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUShort(System.Object)">
      <summary>Converts an object to a Ushort value.</summary>
      <returns>The Ushort value of the object.</returns>
      <param name="Value">The object to convert.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUShort(System.String)">
      <summary>Converts a string to a Ushort value.</summary>
      <returns>The Ushort value of the string.</returns>
      <param name="Value">The string to convert.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute">
      <summary>When applied to a class, the compiler implicitly calls a component-initializing method from the default synthetic constructor.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute" /> attribute.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization">
      <summary>The Visual Basic compiler uses this class during static local initialization; it is not meant to be called directly from your code. An exception of this type is thrown if a static local variable fails to initialize.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization" /> class.</summary>
      <param name="message">A string representing the message to be sent.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization" /> class.</summary>
      <param name="message">A string representing the message to be sent.</param>
      <param name="innerException">An <see cref="T:System.Exception" /> object.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.InternalErrorException">
      <summary>The exception thrown for internal Visual Basic compiler errors. </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.InternalErrorException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.InternalErrorException" /> class. </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.InternalErrorException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.InternalErrorException" /> class, specifying an error message. </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.InternalErrorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.InternalErrorException" /> class, specifying an error message and an inner exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current internal exception.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LikeOperator">
      <summary>This class provides helpers that the Visual Basic compiler uses to do the work for the Like operator. It is not meant to be called directly from your code.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeObject(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)">
      <summary>Performs binary or text string comparison given two objects. This helper method is not meant to be called directly from your code.</summary>
      <returns>A Boolean value indicating whether the strings match. Returns True if the strings match; otherwise False.</returns>
      <param name="Source">The string to compare.</param>
      <param name="Pattern">The string against which <paramref name="Source" /> is being compared.</param>
      <param name="CompareOption">A <see cref="T:Microsoft.VisualBasic.CompareMethod" /> enumeration specifying whether or not to use text comparison. If <see cref="F:Microsoft.VisualBasic.CompareMethod.Text" />, this method uses text comparison; if <see cref="F:Microsoft.VisualBasic.CompareMethod.Binary" />, this method uses binary comparison.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Performs binary or text string comparison given two strings. This helper method is not meant to be called directly from your code.</summary>
      <returns>A Boolean value indicating whether the strings match. Returns True if the strings match; otherwise False.</returns>
      <param name="Source">The string to compare.</param>
      <param name="Pattern">The string against which <paramref name="Source" /> is being compared.</param>
      <param name="CompareOption">A <see cref="T:Microsoft.VisualBasic.CompareMethod" /> enumeration specifying whether or not to use text comparison. If <see cref="F:Microsoft.VisualBasic.CompareMethod.Text" />, this method uses text comparison; if <see cref="F:Microsoft.VisualBasic.CompareMethod.Binary" />, this method uses binary comparison.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.NewLateBinding">
      <summary>This class provides helpers that the Visual Basic compiler uses for late binding calls; it is not meant to be called directly from your code.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackCall(System.Object,System.String,System.Object[],System.String[],System.Boolean)">
      <summary>Executes a late-bound method or function call. This helper method is not meant to be called directly from your code.</summary>
      <returns>An instance of the call object.</returns>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="IgnoreReturn">A Boolean value indicating whether or not the return value can be ignored.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackGet(System.Object,System.String,System.Object[],System.String[])">
      <summary>Executes a late-bound property get or field access call. This helper method is not meant to be called directly from your code.</summary>
      <returns>An instance of the call object.</returns>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackIndexSet(System.Object,System.Object[],System.String[])">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="OptimisticSet">A Boolean value used to determine whether the set operation will work. Set to True when you believe that an intermediate value has been set in the property or field; otherwise False.</param>
      <param name="RValueBase">A Boolean value that specifies when the base reference of the late reference is an RValue. Set to True when the base reference of the late reference is an RValue; this allows you to generate a run-time exception for late assignments to fields of RValues of value types. Otherwise, set to False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackInvokeDefault1(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>Executes a late-bound get of the default property or field, or call to the default method or function. This helper method is not meant to be called directly from your code.</summary>
      <returns>An instance of the call object.</returns>
      <param name="Instance">An instance of the call object exposing the property or method. If <paramref name="Instance" /> is of type <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" />, then bind using the Dynamic Language Runtime; otherwise perform standard late-binding.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="ReportErrors">A Boolean value used to specify whether to throw exceptions when an error is encountered. Set to True to throw exceptions. Set to False to return Nothing when an error is encountered.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackInvokeDefault2(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>Executes a late-bound get of the default property or field, or call to the default method or function. This helper method is not meant to be called directly from your code.</summary>
      <returns>An instance of the call object.</returns>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="ReportErrors">A Boolean value used to specify whether to throw exceptions when an error is encountered. Set to True to throw exceptions. Set to False to return Nothing when an error is encountered.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackSet(System.Object,System.String,System.Object[])">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackSetComplex(System.Object,System.String,System.Object[],System.Boolean,System.Boolean)">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="OptimisticSet">A Boolean value used to determine whether the set operation will work. Set to True when you believe that an intermediate value has been set in the property or field; otherwise False.</param>
      <param name="RValueBase">A Boolean value that specifies when the base reference of the late reference is an RValue. Set to True when the base reference of the late reference is an RValue; this allows you to generate a run-time exception for late assignments to fields of RValues of value types. Otherwise, set to False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateCall(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean[],System.Boolean)">
      <summary>Executes a late-bound method or function call. This helper method is not meant to be called directly from your code.</summary>
      <returns>An instance of the call object.</returns>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Type">The type of the call object.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="TypeArguments">An array of argument types; used only for generic calls to pass argument types.</param>
      <param name="CopyBack">An array of Boolean values that the late binder uses to communicate back to the call site which arguments match ByRef parameters. Each True value indicates that the arguments matched and should be copied out after the call to LateCall is complete.</param>
      <param name="IgnoreReturn">A Boolean value indicating whether or not the return value can be ignored.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateCallInvokeDefault(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>Executes a late-bound call to the default method or function. This helper method is not meant to be called directly from your code.</summary>
      <returns>An instance of the call object.</returns>
      <param name="Instance">An instance of the call object exposing the property or method. </param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="ReportErrors">A Boolean value used to specify whether to throw exceptions when an error is encountered. Set to True to throw exceptions. Set to False to return Nothing when an error is encountered.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateCanEvaluate(System.Object,System.Type,System.String,System.Object[],System.Boolean,System.Boolean)">
      <summary>Indicates whether a call requires late-bound evaluation. This helper method is not meant to be called directly from your code.</summary>
      <returns>A Boolean value that indicates whether the expression requires late-bound evaluation.</returns>
      <param name="instance">An instance of the call object exposing the property or method.</param>
      <param name="type">The type of the call object.</param>
      <param name="memberName">The name of the property or method on the call object.</param>
      <param name="arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="allowFunctionEvaluation">A Boolean value that specifies whether to allow function evaluation.</param>
      <param name="allowPropertyEvaluation">A Boolean value that specifies whether to allow property evaluation.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateGet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean[])">
      <summary>Executes a late-bound property get or field access call. This helper method is not meant to be called directly from your code.</summary>
      <returns>An instance of the call object.</returns>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Type">The type of the call object.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="TypeArguments">An array of argument types; used only for generic calls to pass argument types.</param>
      <param name="CopyBack">An array of Boolean values that the late binder uses to communicate back to the call site which arguments match ByRef parameters. Each True value indicates that the arguments matched and should be copied out after the call to LateCall is complete.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateGetInvokeDefault(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>Executes a late-bound get of the default property or field. This helper method is not meant to be called directly from your code.</summary>
      <returns>An instance of the call object.</returns>
      <param name="Instance">An instance of the call object exposing the property or method. </param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="ReportErrors">A Boolean value used to specify whether to throw exceptions when an error is encountered. Set to True to throw exceptions. Set to False to return Nothing when an error is encountered.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexGet(System.Object,System.Object[],System.String[])">
      <summary>Executes a late-bound property get or field access call. This helper method is not meant to be called directly from your code.</summary>
      <returns>An instance of the call object.</returns>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexSet(System.Object,System.Object[],System.String[])">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="OptimisticSet">A Boolean value used to determine whether the set operation will work. Set to True when you believe that an intermediate value has been set in the property or field; otherwise False.</param>
      <param name="RValueBase">A Boolean value that specifies when the base reference of the late reference is an RValue. Set to True when the base reference of the late reference is an RValue; this allows you to generate a run-time exception for late assignments to fields of RValues of value types. Otherwise, set to False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[])">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Type">The type of the call object.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="TypeArguments">An array of argument types; used only for generic calls to pass argument types.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean,System.Boolean,Microsoft.VisualBasic.CallType)">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Type">The type of the call object.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="TypeArguments">An array of argument types; used only for generic calls to pass argument types.</param>
      <param name="OptimisticSet">A Boolean value used to determine whether the set operation will work. Set to True when you believe that an intermediate value has been set in the property or field; otherwise False.</param>
      <param name="RValueBase">A Boolean value that specifies when the base reference of the late reference is an RValue. Set to True when the base reference of the late reference is an RValue; this allows you to generate a run-time exception for late assignments to fields of RValues of value types. Otherwise, set to False.</param>
      <param name="CallType">An enumeration member of type <see cref="T:Microsoft.VisualBasic.CallType" /> representing the type of procedure being called. The value of CallType can be Method, Get, or Set. Only Set is used.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSetComplex(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean,System.Boolean)">
      <summary>Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.</summary>
      <param name="Instance">An instance of the call object exposing the property or method.</param>
      <param name="Type">The type of the call object.</param>
      <param name="MemberName">The name of the property or method on the call object.</param>
      <param name="Arguments">An array containing the arguments to be passed to the property or method being called.</param>
      <param name="ArgumentNames">An array of argument names.</param>
      <param name="TypeArguments">An array of argument types; used only for generic calls to pass argument types.</param>
      <param name="OptimisticSet">A Boolean value used to determine whether the set operation will work. Set to True when you believe that an intermediate value has been set in the property or field; otherwise False.</param>
      <param name="RValueBase">A Boolean value that specifies when the base reference of the late reference is an RValue. Set to True when the base reference of the late reference is an RValue; this allows you to generate a run-time exception for late assignments to fields of RValues of value types. Otherwise, set to False.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl">
      <summary>The Visual Basic compiler uses this class for object flow control; it is not meant to be called directly from your code.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.CheckForSyncLockOnValueType(System.Object)">
      <summary>Checks for a synchronization lock on the specified type.</summary>
      <param name="Expression">The data type for which to check for synchronization lock.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl">
      <summary>Provides services to the Visual Basic compiler for compiling For...Next loops.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)">
      <summary>Initializes a For...Next loop.</summary>
      <returns>False if the loop has terminated; otherwise, True.</returns>
      <param name="Counter">The loop counter variable.</param>
      <param name="Start">The initial value of the loop counter.</param>
      <param name="Limit">The value of the To option.</param>
      <param name="StepValue">The value of the Step option.</param>
      <param name="LoopForResult">An object that contains verified values for loop values.</param>
      <param name="CounterResult">The counter value for the next loop iteration.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)">
      <summary>Checks for valid values for the loop counter, Step, and To values.</summary>
      <returns>True if <paramref name="StepValue" /> is greater than zero and <paramref name="count" /> is less than or equal to <paramref name="limit" /> or <paramref name="StepValue" /> is less than or equal to zero and <paramref name="count" /> is greater than or equal to <paramref name="limit" />; otherwise, False.</returns>
      <param name="count">Required. A Decimal value that represents the initial value passed for the loop counter variable.</param>
      <param name="limit">Required. A Decimal value that represents the value passed by using the To keyword.</param>
      <param name="StepValue">Required. A Decimal value that represents the value passed by using the Step keyword.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object,System.Object,System.Object@)">
      <summary>Increments a For...Next loop.</summary>
      <returns>False if the loop has terminated; otherwise, True.</returns>
      <param name="Counter">The loop counter variable.</param>
      <param name="LoopObj">An object that contains verified values for loop values.</param>
      <param name="CounterResult">The counter value for the next loop iteration.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single,System.Single,System.Single)">
      <summary>Checks for valid values for the loop counter, Step, and To values.</summary>
      <returns>True if <paramref name="StepValue" /> is greater than zero and <paramref name="count" /> is less than or equal to <paramref name="limit" />, or if <paramref name="StepValue" /> is less than or equal to zero and <paramref name="count" /> is greater than or equal to <paramref name="limit" />; otherwise, False.</returns>
      <param name="count">Required. A Single value that represents the initial value passed for the loop counter variable.</param>
      <param name="limit">Required. A Single value that represents the value passed by using the To keyword.</param>
      <param name="StepValue">Required. A Single value that represents the value passed by using the Step keyword.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double,System.Double,System.Double)">
      <summary>Checks for valid values for the loop counter, Step, and To values.</summary>
      <returns>True if <paramref name="StepValue" /> is greater than zero and <paramref name="count" /> is less than or equal to <paramref name="limit" />, or if <paramref name="StepValue" /> is less than or equal to zero and <paramref name="count" /> is greater than or equal to <paramref name="limit" />; otherwise, False.</returns>
      <param name="count">Required. A Double value that represents the initial value passed for the loop counter variable.</param>
      <param name="limit">Required. A Double value that represents the value passed by using the To keyword.</param>
      <param name="StepValue">Required. A Double value that represents the value passed by using the Step keyword.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Operators">
      <summary>Provides late-bound math operators, such as <see cref="M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)" /> and <see cref="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)" />, which the Visual Basic compiler uses internally. </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic addition (+) operator.</summary>
      <returns>The sum of <paramref name="Left" /> and <paramref name="Right" />.</returns>
      <param name="Left">Required. Any numeric expression.</param>
      <param name="Right">Required. Any numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic And operator.</summary>
      <returns>For Boolean operations, True if both <paramref name="Left" /> and <paramref name="Right" /> evaluate to True; otherwise, False. For bitwise operations, 1 if both <paramref name="Left" /> and <paramref name="Right" /> evaluate to 1; otherwise, 0.</returns>
      <param name="Left">Required. Any Boolean or numeric expression.</param>
      <param name="Right">Required. Any Boolean or numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)">
      <summary>Represents Visual Basic comparison operators.</summary>
      <returns>Value Condition -1 <paramref name="Left" /> is less than <paramref name="Right" />.0 <paramref name="Left" /> and <paramref name="Right" /> are equal.1 <paramref name="Left" /> is greater than <paramref name="Right" />.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the Visual Basic equal (=) operator.</summary>
      <returns>True if <paramref name="Left" /> and <paramref name="Right" /> are equal; otherwise, False.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)">
      <summary>Represents the Visual Basic greater-than (&gt;) operator.</summary>
      <returns>True if <paramref name="Left" /> is greater than <paramref name="Right" />; otherwise, False.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the Visual Basic greater-than or equal-to (&gt;=) operator.</summary>
      <returns>True if <paramref name="Left" /> is greater than or equal to <paramref name="Right" />; otherwise, False.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)">
      <summary>Represents the Visual Basic less-than (&lt;) operator.</summary>
      <returns>True if <paramref name="Left" /> is less than <paramref name="Right" />; otherwise, False.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the Visual Basic less-than or equal-to (&lt;=) operator.</summary>
      <returns>True if <paramref name="Left" /> is less than or equal to <paramref name="Right" />; otherwise, False.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the Visual Basic not-equal (&lt;&gt;) operator.</summary>
      <returns>True if <paramref name="Left" /> is not equal to <paramref name="Right" />; otherwise, False.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)">
      <summary>Performs binary or text string comparison when given two strings.</summary>
      <returns>Value Condition -1 <paramref name="Left" /> is less than <paramref name="Right" />. 0<paramref name="Left" /> is equal to <paramref name="Right" />. 1 <paramref name="Left" /> is greater than <paramref name="Right" />. </returns>
      <param name="Left">Required. Any String expression.</param>
      <param name="Right">Required. Any String expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic concatenation (&amp;) operator.</summary>
      <returns>A string representing the concatenation of <paramref name="Left" /> and <paramref name="Right" />.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the overloaded Visual Basic equals (=) operator.</summary>
      <returns>The result of the overloaded equals operator. False if operator overloading is not supported.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)">
      <summary>Represents the overloaded Visual Basic greater-than (&gt;) operator.</summary>
      <returns>The result of the overloaded greater-than operator. False if operator overloading is not supported.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the overloaded Visual Basic greater-than or equal-to (&gt;=) operator.</summary>
      <returns>The result of the overloaded greater-than or equal-to operator. False if operator overloading is not supported.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)">
      <summary>Represents the overloaded Visual Basic less-than (&lt;) operator.</summary>
      <returns>The result of the overloaded less-than operator. False if operator overloading is not supported.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the overloaded Visual Basic less-than or equal-to (&lt;=) operator.</summary>
      <returns>The result of the overloaded less-than or equal-to operator. False if operator overloading is not supported.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)">
      <summary>Represents the overloaded Visual Basic not-equal (&lt;&gt;) operator.</summary>
      <returns>The result of the overloaded not-equal operator. False if operator overloading is not supported.</returns>
      <param name="Left">Required. Any expression.</param>
      <param name="Right">Required. Any expression.</param>
      <param name="TextCompare">Required. True to perform a case-insensitive string comparison; otherwise, False.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic division (/) operator.</summary>
      <returns>The full quotient of <paramref name="Left" /> divided by <paramref name="Right" />, including any remainder.</returns>
      <param name="Left">Required. Any numeric expression.</param>
      <param name="Right">Required. Any numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic exponent (^) operator.</summary>
      <returns>The result of <paramref name="Left" /> raised to the power of <paramref name="Right" />.</returns>
      <param name="Left">Required. Any numeric expression.</param>
      <param name="Right">Required. Any numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.FallbackInvokeUserDefinedOperator(System.Object,System.Object[])">
      <summary>Executes a late-bound evaluation of a user-defined operator. This helper method is not meant to be called directly from your code.</summary>
      <returns>The result returned from the user-defined operator.</returns>
      <param name="vbOp">The user-defined operator.</param>
      <param name="Arguments">Argument values to pass to the user-defined operator.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic integer division (\) operator.</summary>
      <returns>The integer quotient of <paramref name="Left" /> divided by <paramref name="Right" />, which discards any remainder and retains only the integer portion.</returns>
      <param name="Left">Required. Any numeric expression.</param>
      <param name="Right">Required. Any numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic arithmetic left shift (&lt;&lt;) operator.</summary>
      <returns>An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <paramref name="Operand" />.</returns>
      <param name="Operand">Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (SByte, Byte, Short, UShort, Integer, UInteger, Long, or ULong).</param>
      <param name="Amount">Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be Integer or widen to Integer.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic Mod operator.</summary>
      <returns>The remainder after <paramref name="Left" /> is divided by <paramref name="Right" />. </returns>
      <param name="Left">Required. Any numeric expression.</param>
      <param name="Right">Required. Any numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic multiply (*) operator.</summary>
      <returns>The product of <paramref name="Left" /> and <paramref name="Right" />.</returns>
      <param name="Left">Required. Any numeric expression.</param>
      <param name="Right">Required. Any numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)">
      <summary>Represents the Visual Basic unary minus (–) operator.</summary>
      <returns>The negative value of <paramref name="Operand" />.</returns>
      <param name="Operand">Required. Any numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)">
      <summary>Represents the Visual Basic Not operator.</summary>
      <returns>For Boolean operations, False if <paramref name="Operand" /> is True; otherwise, True. For bitwise operations, 1 if <paramref name="Operand" /> is 0; otherwise, 0.</returns>
      <param name="Operand">Required. Any Boolean or numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic Or operator.</summary>
      <returns>For Boolean operations, False if both <paramref name="Left" /> and <paramref name="Right" /> evaluate to False; otherwise, True. For bitwise operations, 0 if both <paramref name="Left" /> and <paramref name="Right" /> evaluate to 0; otherwise, 1.</returns>
      <param name="Left">Required. Any Boolean or numeric expression.</param>
      <param name="Right">Required. Any Boolean or numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)">
      <summary>Represents the Visual Basic unary plus (+) operator.</summary>
      <returns>The value of <paramref name="Operand" />. (The sign of the <paramref name="Operand" /> is unchanged.)</returns>
      <param name="Operand">Required. Any numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic arithmetic right shift (&gt;&gt;) operator.</summary>
      <returns>An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <paramref name="Operand" />.</returns>
      <param name="Operand">Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (SByte, Byte, Short, UShort, Integer, UInteger, Long, or ULong).</param>
      <param name="Amount">Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be Integer or widen to Integer.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic subtraction (–) operator.</summary>
      <returns>The difference between <paramref name="Left" /> and <paramref name="Right" />.</returns>
      <param name="Left">Required. Any numeric expression. </param>
      <param name="Right">Required. Any numeric expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)">
      <summary>Represents the Visual Basic Xor operator.</summary>
      <returns>A Boolean or numeric value. For a Boolean comparison, the return value is the logical exclusion (exclusive logical disjunction) of two Boolean values. For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. </returns>
      <param name="Left">Required. Any Boolean or numeric expression.</param>
      <param name="Right">Required. Any Boolean or numeric expression.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute">
      <summary>Specifies that the current Option Compare setting should be passed as the default value for an argument. </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute" /> class.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute">
      <summary>The Visual Basic compiler emits this helper class to indicate (for Visual Basic debugging) which comparison option, binary or text, is being used</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute" /> class. This is a helper method.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ProjectData">
      <summary>Provides helpers for the Visual Basic Err object. </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.ClearProjectError">
      <summary>Performs the work for the Clear method of the Err object. A helper method.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.CreateProjectError(System.Int32)">
      <summary>Performs the work for the Raise method of the Err object. A helper method.</summary>
      <returns>An <see cref="T:System.Exception" /> object.</returns>
      <param name="hr">An integer value that identifies the nature of the error. Visual Basic errors are in the range 0–65535; the range 0–512 is reserved for system errors; the range 513–65535 is available for user-defined errors.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.SetProjectError(System.Exception)">
      <summary>The Visual Basic compiler uses this helper method to capture exceptions in the Err object.</summary>
      <param name="ex">The <see cref="T:System.Exception" /> object to be caught.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.SetProjectError(System.Exception,System.Int32)">
      <summary>The Visual Basic compiler uses this helper method to capture exceptions in the Err object.</summary>
      <param name="ex">The <see cref="T:System.Exception" /> object to be caught.</param>
      <param name="lErl">The line number of the exception.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute">
      <summary>This class provides attributes that are applied to the standard module construct when it is emitted to Intermediate Language (IL). It is not intended to be called directly from your code.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute" /> class.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag">
      <summary>The Visual Basic compiler uses this class internally when initializing static local members; it is not meant to be called directly from your code.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag" /> class.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag.State">
      <summary>Returns the state of the static local member's initialization flag (initialized or not).</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Utils">
      <summary>Contains utilities that the Visual Basic compiler uses.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.CopyArray(System.Array,System.Array)">
      <summary>Used by the Visual Basic compiler as a helper for Redim.</summary>
      <returns>The copied array.</returns>
      <param name="arySrc">The array to be copied.</param>
      <param name="aryDest">The destination array.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.GetResourceString(System.String,System.String[])">
      <summary>Retrieves and formats a localized resource string or error message.</summary>
      <returns>A formatted resource string or error message.</returns>
      <param name="ResourceKey">The identifier of the string or error message to retrieve.</param>
      <param name="Args">An array of parameters to replace placeholders in the string or error message.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.MethodToString(System.Reflection.MethodBase)">
      <summary>Returns a Visual Basic method signature.</summary>
      <returns>The Visual Basic method signature for the supplied <see cref="T:System.Reflection.MethodBase" /> object.</returns>
      <param name="Method">A <see cref="T:System.Reflection.MethodBase" /> object to return a Visual Basic method signature for.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.ThrowException(System.Int32)">
      <summary>Throws a localized Visual Basic exception.</summary>
      <param name="hr">The Visual Basic error identifier.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Versioned">
      <summary>The <see cref="T:Microsoft.VisualBasic.CompilerServices.Versioned" /> module contains procedures used to interact with objects, applications, and systems.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])">
      <summary>Executes a method on an object, or sets or returns a property on an object.</summary>
      <returns>Executes a method on an object, or sets or returns a property on an object.</returns>
      <param name="Instance">Required. Object. A pointer to the object exposing the property or method.</param>
      <param name="MethodName">Required. String. A string expression containing the name of the property or method on the object.</param>
      <param name="UseCallType">Required. An enumeration member of type <see cref="T:Microsoft.VisualBasic.CallType" /> enumeration representing the type of procedure being called. The value of CallType can be Method, Get, or Set.</param>
      <param name="Arguments">Optional. ParamArray. A parameter array containing the arguments to be passed to the property or method being called.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.IsNumeric(System.Object)">
      <summary>Returns a Boolean value indicating whether an expression can be evaluated as a number.</summary>
      <returns>Returns a Boolean value indicating whether an expression can be evaluated as a number.</returns>
      <param name="Expression">Required. Object expression.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.SystemTypeName(System.String)">
      <summary>Returns a string value containing the system data type name of a variable.</summary>
      <returns>Returns a string value containing the system data type name of a variable.</returns>
      <param name="VbName">Required. A string variable containing a Visual Basic type name.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.TypeName(System.Object)">
      <summary>Returns a string value containing data type information about a variable.</summary>
      <returns>Returns a string value containing data type information about a variable.</returns>
      <param name="Expression">Required. Object variable. If Option Strict is Off, you can pass a variable of any data type except a structure.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.VbTypeName(System.String)">
      <summary>Returns a string value containing the Visual Basic data type name of a variable.</summary>
      <returns>Returns a string value containing the Visual Basic data type name of a variable.</returns>
      <param name="SystemName">Required. String variable containing a type name used by the common language runtime.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\ReferenceAssemblies\RedistList\FrameworkList.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?> 
<FileList Redist="Microsoft-Windows-CLRCoreComp.Silverlight.4.0" Name="Silverlight 4">
  <File AssemblyName="Microsoft.VisualBasic" Version="2.0.5.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="false" /> 
  <File AssemblyName="mscorlib" Version="2.0.5.0" PublicKeyToken="7cec85d7bea7798e" Culture="neutral" ProcessorArchitecture="MSIL" InGac="false" /> 
  <File AssemblyName="System.Core" Version="2.0.5.0" PublicKeyToken="7cec85d7bea7798e" Culture="neutral" ProcessorArchitecture="MSIL" InGac="false" /> 
  <File AssemblyName="System" Version="2.0.5.0" PublicKeyToken="7cec85d7bea7798e" Culture="neutral" ProcessorArchitecture="MSIL" InGac="false" /> 
  <File AssemblyName="System.Net" Version="2.0.5.0" PublicKeyToken="7cec85d7bea7798e" Culture="neutral" ProcessorArchitecture="MSIL" InGac="false" /> 
  <File AssemblyName="System.Runtime.Serialization" Version="2.0.5.0" PublicKeyToken="7cec85d7bea7798e" Culture="neutral" ProcessorArchitecture="MSIL" InGac="false" /> 
  <File AssemblyName="System.ServiceModel" Version="2.0.5.0" PublicKeyToken="31bf3856ad364e35" Culture="neutral" ProcessorArchitecture="MSIL" InGac="false" /> 
  <File AssemblyName="System.ServiceModel.Web" Version="2.0.5.0" PublicKeyToken="7cec85d7bea7798e" Culture="neutral" ProcessorArchitecture="MSIL" InGac="false" /> 
  <File AssemblyName="System.Windows.Browser" Version="2.0.5.0" PublicKeyToken="7cec85d7bea7798e" Culture="neutral" ProcessorArchitecture="MSIL" InGac="false" /> 
  <File AssemblyName="System.Windows" Version="2.0.5.0" PublicKeyToken="7cec85d7bea7798e" Culture="neutral" ProcessorArchitecture="MSIL" InGac="false" /> 
  <File AssemblyName="System.Xml" Version="2.0.5.0" PublicKeyToken="7cec85d7bea7798e" Culture="neutral" ProcessorArchitecture="MSIL" InGac="false" /> 
</FileList>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Apr10\EULA.rtf ===
{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Arial;}{\f1\fnil\fcharset0 Calibri;}} {\*\generator Msftedit 5.41.21.2509;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\fs36 Microsoft Public License (Ms-PL)\f1\fs22\par \f0 This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software.\par \b\fs28 1. Definitions\b0\fs22\par The terms \ldblquote reproduce,\rdblquote  \ldblquote reproduction,\rdblquote  \ldblquote derivative works,\rdblquote  and \ldblquote distribution\rdblquote  have the same meaning here as under U.S. copyright law. A \ldblquote contribution\rdblquote  is the original software, or any additions or changes to the software. A \ldblquote contributor\rdblquote  is any person that distributes its contribution under this license. \ldblquote Licensed patents\rdblquote  are a contributor\rquote s patent claims that read directly on its contribution. \par \b\fs28 2. Grant of Rights\b0\fs22\par (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.\par (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.\par \b\fs28 3. Conditions and Limitations\b0\fs22\par (A) No Trademark License- This license does not grant you rights to use any contributors\rquote  name, logo, or trademarks.\par (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically.\par (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software.\par (D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license.\par (E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees, or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement.\f1\par
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\ReferenceAssemblies\System.Xml.Xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml</name>
  </assembly>
  <members>
    <member name="T:System.Xml.ConformanceLevel">
      <summary>Specifies the amount of input or output checking that the created <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Xml.XmlWriter" /> objects perform.</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Auto">
      <summary>The <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.Xml.XmlWriter" /> object automatically detects whether document or fragment checking should be performed, and does the appropriate checking. In the case where you are wrapping another <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.Xml.XmlWriter" /> object, the outer object does not do any additional conformance checking. Conformance checking is left up to the underlying object.</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Fragment">
      <summary>The XML data is a well-formed XML fragment.</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Document">
      <summary>The XML data is in conformance to the rules for a well-formed XML 1.0 document.</summary>
    </member>
    <member name="T:System.Xml.DtdProcessing">
      <summary>Specifies the options for processing DTDs. The <see cref="T:System.Xml.DtdProcessing" /> enumeration is used by <see cref="T:System.Xml.XmlReaderSettings" />.  </summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Prohibit">
      <summary>Specifies that when a DTD is encountered, an <see cref="T:System.Xml.XmlException" /> is thrown with a message that states that DTDs are prohibited. This is the default behavior.</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Ignore">
      <summary>Causes the DOCTYPE element to be ignored. No DTD processing occurs. Warning: The DTD/DOCTYPE will be lost on output.</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Parse">
      <summary>Is used for parsing DTDs.</summary>
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary>Provides an interface to enable a class to return line and position information.</summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary>Gets a value indicating whether the class can return line information. </summary>
      <returns>true if <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> and <see cref="P:System.Xml.IXmlLineInfo.LinePosition" /> can be provided; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary>Gets the current line number.</summary>
      <returns>The current line number or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> returns false).</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary>Gets the current line position.</summary>
      <returns>The current line position or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> returns false).</returns>
    </member>
    <member name="T:System.Xml.IXmlNamespaceResolver">
      <summary>Provides read-only access to a set of prefix and namespace mappings. </summary>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>Gets a collection of defined prefix-namespace mappings that are currently in scope.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> that contains the current in-scope namespaces.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</param>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
      <summary>Gets the namespace URI mapped to the specified prefix.</summary>
      <returns>The namespace URI that is mapped to the prefix; null if the prefix is not mapped to a namespace URI.</returns>
      <param name="prefix">The prefix whose namespace URI you wish to find.</param>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
      <summary>Gets the prefix that is mapped to the specified namespace URI.</summary>
      <returns>The prefix that is mapped to the namespace URI; null if the namespace URI is not mapped to a prefix.</returns>
      <param name="namespaceName">The namespace URI whose prefix you wish to find.</param>
    </member>
    <member name="T:System.Xml.NamespaceHandling">
      <summary>Specifies whether to remove duplicate namespace declarations in the <see cref="T:System.Xml.XmlWriter" />.</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.Default">
      <summary>The default behavior does not remove duplicate namespace declarations. </summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.OmitDuplicates">
      <summary>Remove duplicate namespace declarations. For the duplicate namespace to be removed, the prefix and the namespace have to match.</summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary>Implements a single-threaded <see cref="T:System.Xml.XmlNameTable" />.</summary>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary>Initializes a new instance of the NameTable class.</summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>Atomizes the specified string and adds it to the NameTable.</summary>
      <returns>The atomized string or the existing string if one already exists in the NameTable. If <paramref name="len" /> is zero, String.Empty is returned.</returns>
      <param name="key">The character array containing the string to add. </param>
      <param name="start">The zero-based index into the array specifying the first character of the string. </param>
      <param name="len">The number of characters in the string. </param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />-or- <paramref name="start" /> &gt;= <paramref name="key" />.Length -or- <paramref name="len" /> &gt;= <paramref name="key" />.Length The above conditions do not cause an exception to be thrown if <paramref name="len" /> =0. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0. </exception>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary>Atomizes the specified string and adds it to the NameTable.</summary>
      <returns>The atomized string or the existing string if it already exists in the NameTable.</returns>
      <param name="key">The string to add. </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="key" /> is null. </exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>Gets the atomized string containing the same characters as the specified range of characters in the given array.</summary>
      <returns>The atomized string or null if the string has not already been atomized. If <paramref name="len" /> is zero, String.Empty is returned.</returns>
      <param name="key">The character array containing the name to find. </param>
      <param name="start">The zero-based index into the array specifying the first character of the name. </param>
      <param name="len">The number of characters in the name. </param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />-or- <paramref name="start" /> &gt;= <paramref name="key" />.Length -or- <paramref name="len" /> &gt;= <paramref name="key" />.Length The above conditions do not cause an exception to be thrown if <paramref name="len" /> =0. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0. </exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary>Gets the atomized string with the specified value.</summary>
      <returns>The atomized string object or null if the string has not already been atomized.</returns>
      <param name="value">The name to find. </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:System.Xml.NewLineHandling">
      <summary>Specifies how to handle line breaks.</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Replace">
      <summary>New line characters are replaced to match the character specified in the <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> property.</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Entitize">
      <summary>New line characters are entitized. This setting preserves all characters when the output is read by a normalizing <see cref="T:System.Xml.XmlReader" />.</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.None">
      <summary>The new line characters are unchanged. The output is the same as the input.</summary>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary>Specifies the state of the reader.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary>The Read method has not been called.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary>The Read method has been called. Additional methods may be called on the reader.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary>An error occurred that prevents the read operation from continuing.</summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary>The end of the file has been reached successfully.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary>The <see cref="M:System.Xml.XmlReader.Close" /> method has been called.</summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary>Specifies the state of the <see cref="T:System.Xml.XmlWriter" />.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary>A Write method has not been called.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary>The prolog is being written.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary>An element start tag is being written.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary>An attribute value is being written. </summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary>The element content is being written.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary>The <see cref="M:System.Xml.XmlWriter.Close" /> method has been called.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Error">
      <summary>An exception has been thrown, which has left the <see cref="T:System.Xml.XmlWriter" /> in an invalid state. You can call the <see cref="M:System.Xml.XmlWriter.Close" /> method to put the <see cref="T:System.Xml.XmlWriter" /> in the <see cref="F:System.Xml.WriteState.Closed" /> state. Any other <see cref="T:System.Xml.XmlWriter" /> method call will result in an <see cref="T:System.InvalidOperationException" />.</summary>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary>Encodes and decodes XML names and provides methods for converting between common language runtime types. When converting data types the values returned are locale independent.</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlConvert" /> class. </summary>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary>Decodes a name. This method does the reverse of the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> and <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> methods.</summary>
      <returns>The decoded name.</returns>
      <param name="name">The name to be transformed. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary>Converts the name to a valid XML local name.</summary>
      <returns>The encoded name.</returns>
      <param name="name">The name to be encoded. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary>Converts the name to a valid XML name.</summary>
      <returns>Returns the name with any invalid characters replaced by an escape string.</returns>
      <param name="name">A name to be translated. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary>Verifies the name is valid according to the XML specification.</summary>
      <returns>The encoded name.</returns>
      <param name="name">The name to be encoded. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsNCNameChar(System.Char)">
      <summary>Checks if the passed-in character is a valid Name Character type.</summary>
      <returns>true if the character is a valid Name Character type; otherwise, false.</returns>
      <param name="ch">The character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsPublicIdChar(System.Char)">
      <summary>Checks if the passed in character is a valid PUBLIC ID character.</summary>
      <returns>true if the passed in character is a valid PUBLIC ID character; otherwise false.</returns>
      <param name="ch">The character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsStartNCNameChar(System.Char)">
      <summary>Checks if the passed-in character is a valid Start Name Character type.</summary>
      <returns>true if the character is a valid Start Name Character type; otherwise, false.</returns>
      <param name="ch">The character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsWhitespaceChar(System.Char)">
      <summary>Checks if the passed in character is a valid XML whitespace character.</summary>
      <returns>true if the passed in character is a valid XML whitespace character; otherwise false.</returns>
      <param name="ch">The character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlChar(System.Char)">
      <summary>Checks if the passed in character is a valid XML character.</summary>
      <returns>true if the passed in character is a valid XML character; otherwise false.</returns>
      <param name="ch">The character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlSurrogatePair(System.Char,System.Char)">
      <summary>Checks if the passed in surrogate pair of characters is a valid XML character.</summary>
      <returns>true if the passed in surrogate pair of characters is a valid XML character; otherwise false.</returns>
      <param name="lowChar">The surrogate character to validate.</param>
      <param name="highChar">The surrogate character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Boolean" /> equivalent.</summary>
      <returns>A Boolean value, that is, true or false.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a Boolean value. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Byte" /> equivalent.</summary>
      <returns>A Byte equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Char" /> equivalent.</summary>
      <returns>A Char representing the single character.</returns>
      <param name="s">The string containing a single character to convert. </param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter contains more than one character. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</summary>
      <returns>A DateTime equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <param name="format">The format structure to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. The string is validated against this format. </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is String.Empty -or- <paramref name="s" /> does not contain a date and time that corresponds to <paramref name="format" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</summary>
      <returns>A DateTime equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <param name="formats">An array containing the format structures to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or an element of <paramref name="formats" /> is String.Empty -or- <paramref name="s" /> does not contain a date and time that corresponds to any of the elements of <paramref name="formats" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> using the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> specified</summary>
      <returns>A <see cref="T:System.DateTime" /> equivalent of the <see cref="T:System.String" />.</returns>
      <param name="s">The <see cref="T:System.String" /> value to convert.</param>
      <param name="dateTimeOption">One of the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> values that specify whether the date should be converted to local time or preserved as Coordinated Universal Time (UTC), if it is a UTC date.</param>
      <exception cref="T:System.NullReferenceException">The <paramref name="dateTimeOption" /> value is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is an empty string or is not in a valid format.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)">
      <summary>Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      <returns>The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.</returns>
      <param name="s">The string to convert.Note:The string must conform to a subset of the W3C Recommendation for the XML dateTime type. For more information see XML Schema Part 2: Datatypes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The argument passed to this method is outside the range of allowable values. For information about allowable values, see <see cref="T:System.DateTimeOffset" />.</exception>
      <exception cref="T:System.FormatException">The argument passed to this method does not conform to a subset of the W3C Recommendations for the XML dateTime type. For more information see XML Schema Part 2: Datatypes.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)">
      <summary>Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      <returns>The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.</returns>
      <param name="s">The string to convert.</param>
      <param name="format">The format from which <paramref name="s" /> is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. For more information see XML Schema Part 2: Datatypes. The string <paramref name="s" /> is validated against this format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string or is not in the specified format.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])">
      <summary>Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      <returns>The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.</returns>
      <param name="s">The string to convert.</param>
      <param name="formats">An array of formats from which <paramref name="s" /> can be converted. Each format in <paramref name="formats" /> can be any subset of the W3C Recommendation for the XML dateTime type. For more information see XML Schema Part 2: Datatypes. The string <paramref name="s" /> is validated against one of these formats.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Decimal" /> equivalent.</summary>
      <returns>A Decimal equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Double" /> equivalent.</summary>
      <returns>A Double equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Guid" /> equivalent.</summary>
      <returns>A Guid equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int16" /> equivalent.</summary>
      <returns>An Int16 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int32" /> equivalent.</summary>
      <returns>An Int32 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int64" /> equivalent.</summary>
      <returns>An Int64 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.SByte" /> equivalent.</summary>
      <returns>An SByte equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Single" /> equivalent.</summary>
      <returns>A Single equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary>Converts the <see cref="T:System.Boolean" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Boolean, that is, "true" or "false".</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary>Converts the <see cref="T:System.Char" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Char.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)">
      <summary>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" /> using the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> specified.</summary>
      <returns>A <see cref="T:System.String" /> equivalent of the <see cref="T:System.DateTime" />.</returns>
      <param name="value">The <see cref="T:System.DateTime" /> value to convert.</param>
      <param name="dateTimeOption">One of the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> values that specify how to treat the <see cref="T:System.DateTime" /> value.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="dateTimeOption" /> value is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> or <paramref name="dateTimeOption" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)">
      <summary>Converts the supplied <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.DateTimeOffset" />.</returns>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> to be converted.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)">
      <summary>Converts the supplied <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.String" /> in the specified format.</summary>
      <returns>A <see cref="T:System.String" /> representation in the specified format of the supplied <see cref="T:System.DateTimeOffset" />.</returns>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> to be converted.</param>
      <param name="format">The format to which <paramref name="s" /> is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. For more information see XML Schema Part 2: Datatypes.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary>Converts the <see cref="T:System.Decimal" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Decimal.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary>Converts the <see cref="T:System.Double" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Double.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary>Converts the <see cref="T:System.Guid" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Guid.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary>Converts the <see cref="T:System.Int16" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Int16.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary>Converts the <see cref="T:System.Int32" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Int32.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary>Converts the <see cref="T:System.Int64" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Int64.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary>Converts the <see cref="T:System.SByte" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the SByte.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary>Converts the <see cref="T:System.Single" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Single.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary>Converts the <see cref="T:System.TimeSpan" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the TimeSpan.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary>Converts the <see cref="T:System.UInt32" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the UInt32.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary>Converts the <see cref="T:System.UInt64" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the UInt64.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.TimeSpan" /> equivalent.</summary>
      <returns>A TimeSpan equivalent of the string.</returns>
      <param name="s">The string to convert. The string format must conform to the W3C XML Schema Part 2: Datatypes recommendation for duration.</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in correct format to represent a TimeSpan value. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt16" /> equivalent.</summary>
      <returns>A UInt16 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt32" /> equivalent.</summary>
      <returns>A UInt32 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt64" /> equivalent.</summary>
      <returns>A UInt64 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary>Verifies that the name is a valid name according to the W3C Extended Markup Language recommendation.</summary>
      <returns>The name, if it is a valid XML name.</returns>
      <param name="name">The name to verify. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> is not a valid XML name. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary>Verifies that the name is a valid NCName according to the W3C Extended Markup Language recommendation.</summary>
      <returns>The name, if it is a valid NCName.</returns>
      <param name="name">The name to verify. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null or String.Empty. </exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> is not a valid NCName. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)">
      <summary>Verifies that the string is a valid NMTOKEN according to the W3C XML Schema Part2: Datatypes recommendation</summary>
      <returns>The name token, if it is a valid NMTOKEN.</returns>
      <param name="name">The string you wish to verify.</param>
      <exception cref="T:System.Xml.XmlException">The string is not a valid name token.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyPublicId(System.String)">
      <summary>Verifies whether all the character is in the string argument are valid PUBLIC ID characters.</summary>
      <returns>The passed in string instance if all the characters in the string argument are valid PUBLIC ID characters.</returns>
      <param name="publicId">The string to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyWhitespace(System.String)">
      <summary>Verifies whether all the characters in the string argument are valid whitespace characters. </summary>
      <returns>The passed in string instance if all the characters in the string argument are valid whitespace characters.</returns>
      <param name="content">The string to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyXmlChars(System.String)">
      <summary>Verifies if all the characters and surrogate pair characters in the passed in string are valid XML characters.</summary>
      <returns>The passed in string instance if all the characters and surrogate pair characters in the string argument are valid XML characters.</returns>
      <param name="content">The string to validate.</param>
    </member>
    <member name="T:System.Xml.XmlDateTimeSerializationMode">
      <summary>Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Local">
      <summary>Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Utc">
      <summary>Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Unspecified">
      <summary>Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.RoundtripKind">
      <summary>Time zone information should be preserved when converting.</summary>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary>Returns detailed information about the last exception. </summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor">
      <summary>Initializes a new instance of the XmlException class.</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String)">
      <summary>Initializes a new instance of the XmlException class with a specified error message.</summary>
      <param name="message">The error description. </param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the XmlException class.</summary>
      <param name="message">The description of the error condition. </param>
      <param name="innerException">The <see cref="T:System.Exception" /> that threw the XmlException, if any. This value can be null. </param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the XmlException class with the specified message, inner exception, line number, and line position.</summary>
      <param name="message">The error description. </param>
      <param name="innerException">The exception that is the cause of the current exception. This value can be null. </param>
      <param name="lineNumber">The line number indicating where the error occurred. </param>
      <param name="linePosition">The line position indicating where the error occurred. </param>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary>Gets the line number indicating where the error occurred.</summary>
      <returns>The line number indicating where the error occurred.</returns>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary>Gets the line position indicating where the error occurred.</summary>
      <returns>The line position indicating where the error occurred.</returns>
    </member>
    <member name="P:System.Xml.XmlException.Message">
      <summary>Gets a message describing the current exception.</summary>
      <returns>The error message that explains the reason for the exception.</returns>
    </member>
    <member name="P:System.Xml.XmlException.SourceUri">
      <summary>Gets the location of the XML file.</summary>
      <returns>The source URI for the XML data. If there is no source URI, this property returns null.</returns>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary>Resolves, adds, and removes namespaces to a collection and provides scope management for these namespaces. </summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlNamespaceManager" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="nameTable">The <see cref="T:System.Xml.XmlNameTable" /> to use. </param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="nameTable" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary>Adds the given namespace to the collection.</summary>
      <param name="prefix">The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.</param>
      <param name="uri">The namespace to add. </param>
      <exception cref="T:System.ArgumentException">The value for <paramref name="prefix" /> is "xml" or "xmlns". </exception>
      <exception cref="T:System.ArgumentNullException">The value for <paramref name="prefix" /> or <paramref name="uri" /> is null. </exception>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary>Gets the namespace URI for the default namespace.</summary>
      <returns>Returns the namespace URI for the default namespace, or String.Empty if there is no default namespace.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary>Returns an enumerator to use to iterate through the namespaces in the <see cref="T:System.Xml.XmlNamespaceManager" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> containing the prefixes stored by the <see cref="T:System.Xml.XmlNamespaceManager" />.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>Gets a collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.</summary>
      <returns>A collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary>Gets a value indicating whether the supplied prefix has a namespace defined for the current pushed scope.</summary>
      <returns>true if there is a namespace defined; otherwise, false.</returns>
      <param name="prefix">The prefix of the namespace you want to find. </param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary>Gets the namespace URI for the specified prefix.</summary>
      <returns>Returns the namespace URI for <paramref name="prefix" /> or null if there is no mapped namespace. The returned string is atomized.For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />.</returns>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty. </param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary>Finds the prefix declared for the given namespace URI.</summary>
      <returns>The matching prefix. If there is no mapped prefix, the method returns String.Empty. If a null value is supplied, then null is returned.</returns>
      <param name="uri">The namespace to resolve for the prefix. </param>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this object.</summary>
      <returns>The <see cref="T:System.Xml.XmlNameTable" /> used by this object.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary>Pops a namespace scope off the stack.</summary>
      <returns>true if there are namespace scopes left on the stack; false if there are no more namespaces to pop.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary>Pushes a namespace scope onto the stack.</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary>Removes the given namespace for the given prefix.</summary>
      <param name="prefix">The prefix for the namespace </param>
      <param name="uri">The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored. </param>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="prefix" /> or <paramref name="uri" /> is null. </exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceScope">
      <summary>Defines the namespace scope. </summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.All">
      <summary>All namespaces that are defined in the scope of the current node. This includes the xmlns:xml namespace, which is always declared implicitly. The order of the namespaces returned is not defined.</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
      <summary>All namespaces that are defined in the scope of the current node, except for the xmlns:xml namespace, which is always declared implicitly. The order of the namespaces returned is not defined.</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.Local">
      <summary>All namespaces that are defined locally at the current node.</summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary>Table of atomized string objects.</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlNameTable" /> class. </summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, atomizes the specified string and adds it to the XmlNameTable.</summary>
      <returns>The new atomized string or the existing one if it already exists. If length is zero, String.Empty is returned.</returns>
      <param name="array">The character array containing the name to add. </param>
      <param name="offset">Zero-based index into the array specifying the first character of the name. </param>
      <param name="length">The number of characters in the name. </param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />-or- <paramref name="offset" /> &gt;= <paramref name="array" />.Length -or- <paramref name="length" /> &gt; <paramref name="array" />.Length The above conditions do not cause an exception to be thrown if <paramref name="length" /> =0. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary>When overridden in a derived class, atomizes the specified string and adds it to the XmlNameTable.</summary>
      <returns>The new atomized string or the existing one if it already exists.</returns>
      <param name="array">The name to add. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, gets the atomized string containing the same characters as the specified range of characters in the given array.</summary>
      <returns>The atomized string or null if the string has not already been atomized. If <paramref name="length" /> is zero, String.Empty is returned.</returns>
      <param name="array">The character array containing the name to look up. </param>
      <param name="offset">The zero-based index into the array specifying the first character of the name. </param>
      <param name="length">The number of characters in the name. </param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />-or- <paramref name="offset" /> &gt;= <paramref name="array" />.Length -or- <paramref name="length" /> &gt; <paramref name="array" />.Length The above conditions do not cause an exception to be thrown if <paramref name="length" /> =0. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary>When overridden in a derived class, gets the atomized string containing the same value as the specified string.</summary>
      <returns>The atomized string or null if the string has not already been atomized.</returns>
      <param name="array">The name to look up. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary>Specifies the type of node.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary>This is returned by the <see cref="T:System.Xml.XmlReader" /> if a Read method has not been called.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary>An element (for example, &lt;item&gt;).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary>An attribute (for example, id='123').</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary>The text content of a node.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary>A CDATA section (for example, &lt;![CDATA[my escaped text]]&gt;).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary>A reference to an entity (for example, &amp;num;).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary>An entity declaration (for example, &lt;!ENTITY...&gt;).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary>A processing instruction (for example, &lt;?pi test?&gt;).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary>A comment (for example, &lt;!-- my comment --&gt;).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary>A document object that, as the root of the document tree, provides access to the whole XML document.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary>The document type declaration, indicated by the following tag (for example, &lt;!DOCTYPE...&gt;).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary>A document fragment.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary>A notation in the document type declaration (for example, &lt;!NOTATION...&gt;).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary>White space between markup.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary>White space between markup in a mixed content model or white space within the xml:space="preserve" scope.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary>An end element tag (for example, &lt;/item&gt;).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary>Returned when XmlReader reaches the end of the entity replacement as a result of a call to <see cref="M:System.Xml.XmlReader.ResolveEntity" />.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary>The XML declaration (for example, &lt;?xml version='1.0'?&gt;).</summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary>Provides all the context information required by the <see cref="T:System.Xml.XmlReader" /> to parse an XML fragment.</summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, base URI, xml:lang, xml:space, and document type values.</summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. </param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. </param>
      <param name="docTypeName">The name of the document type declaration. </param>
      <param name="pubId">The public identifier. </param>
      <param name="sysId">The system identifier. </param>
      <param name="internalSubset">The internal DTD subset. </param>
      <param name="baseURI">The base URI for the XML fragment (the location from which the fragment was loaded). </param>
      <param name="xmlLang">The xml:lang scope. </param>
      <param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, base URI, xml:lang, xml:space, encoding, and document type values.</summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. </param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. </param>
      <param name="docTypeName">The name of the document type declaration. </param>
      <param name="pubId">The public identifier. </param>
      <param name="sysId">The system identifier. </param>
      <param name="internalSubset">The internal DTD subset. </param>
      <param name="baseURI">The base URI for the XML fragment (the location from which the fragment was loaded). </param>
      <param name="xmlLang">The xml:lang scope. </param>
      <param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. </param>
      <param name="enc">An <see cref="T:System.Text.Encoding" /> object indicating the encoding setting. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, xml:lang, and xml:space values.</summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information about atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. </param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. </param>
      <param name="xmlLang">The xml:lang scope. </param>
      <param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. </exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>Initializes a new instance of the XmlParserContext class with the specified <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, xml:lang, xml:space, and encoding.</summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is null, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />. </param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information, or null. </param>
      <param name="xmlLang">The xml:lang scope. </param>
      <param name="xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope. </param>
      <param name="enc">An <see cref="T:System.Text.Encoding" /> object indicating the encoding setting. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> is not the same XmlNameTable used to construct <paramref name="nsMgr" />. </exception>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary>Gets or sets the base URI.</summary>
      <returns>The base URI to use to resolve the DTD file.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary>Gets or sets the name of the document type declaration.</summary>
      <returns>The name of the document type declaration.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary>Gets or sets the encoding type.</summary>
      <returns>An <see cref="T:System.Text.Encoding" /> object indicating the encoding type.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary>Gets or sets the internal DTD subset.</summary>
      <returns>The internal DTD subset. For example, this property returns everything between the square brackets &lt;!DOCTYPE doc [...]&gt;.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary>Gets or sets the <see cref="T:System.Xml.XmlNamespaceManager" />.</summary>
      <returns>The XmlNamespaceManager.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> used to atomize strings. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <returns>The XmlNameTable.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary>Gets or sets the public identifier.</summary>
      <returns>The public identifier.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary>Gets or sets the system identifier.</summary>
      <returns>The system identifier.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary>Gets or sets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope. If there is no xml:lang in scope, String.Empty is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary>Gets or sets the current xml:space scope.</summary>
      <returns>An <see cref="T:System.Xml.XmlSpace" /> value indicating the xml:space scope.</returns>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary>Represents an XML qualified name.</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class.</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class with the specified name.</summary>
      <param name="name">The local name to use as the name of the <see cref="T:System.Xml.XmlQualifiedName" /> object. </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlQualifiedName" /> class with the specified name and namespace.</summary>
      <param name="name">The local name to use as the name of the <see cref="T:System.Xml.XmlQualifiedName" /> object. </param>
      <param name="ns">The namespace for the <see cref="T:System.Xml.XmlQualifiedName" /> object. </param>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary>Provides an empty <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Xml.XmlQualifiedName" /> object is equal to the current <see cref="T:System.Xml.XmlQualifiedName" /> object. </summary>
      <returns>true if the two are the same instance object; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>A hash code for this object.</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlQualifiedName" /> is empty.</summary>
      <returns>true if name and namespace are empty strings; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary>Gets a string representation of the qualified name of the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>A string representation of the qualified name or String.Empty if a name is not defined for the object.</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary>Gets a string representation of the namespace of the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>A string representation of the namespace or String.Empty if a namespace is not defined for the object.</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Compares two <see cref="T:System.Xml.XmlQualifiedName" /> objects.</summary>
      <returns>true if the two objects have the same name and namespace values; otherwise, false.</returns>
      <param name="a">An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
      <param name="b">An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Compares two <see cref="T:System.Xml.XmlQualifiedName" /> objects.</summary>
      <returns>true if the name and namespace values for the two objects differ; otherwise, false.</returns>
      <param name="a">An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
      <param name="b">An <see cref="T:System.Xml.XmlQualifiedName" /> to compare. </param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary>Returns the string value of the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>The string value of the <see cref="T:System.Xml.XmlQualifiedName" /> in the format of namespace:localname. If the object does not have a namespace defined, this method returns just the local name.</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary>Returns the string value of the <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>The string value of the <see cref="T:System.Xml.XmlQualifiedName" /> in the format of namespace:localname. If the object does not have a namespace defined, this method returns just the local name.</returns>
      <param name="name">The name of the object. </param>
      <param name="ns">The namespace of the object. </param>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary>Represents a reader that provides fast, non-cached, forward-only access to XML data.</summary>
    </member>
    <member name="M:System.Xml.XmlReader.#ctor">
      <summary>Initializes a new instance of the XmlReader class.</summary>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary>When overridden in a derived class, gets the number of attributes on the current node.</summary>
      <returns>The number of attributes on the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary>When overridden in a derived class, gets the base URI of the current node.</summary>
      <returns>The base URI of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadBinaryContent">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlReader" /> implements the binary content read methods.</summary>
      <returns>true if the binary content read methods are implemented; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadValueChunk">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method. </summary>
      <returns>true if the <see cref="T:System.Xml.XmlReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
      <returns>true if the reader can parse and resolve entities; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary>When overridden in a derived class, changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to Closed.</summary>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object used to read the data contained in the stream. </returns>
      <param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
      <exception cref="T:System.NullReferenceException">The <paramref name="input" /> value is null.</exception>
      <exception cref="T:System.Security.SecurityException">The <see cref="T:System.Xml.XmlReader" /> does not have sufficient permissions to access the location of the XML data.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified stream and <see cref="T:System.Xml.XmlReaderSettings" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read the XML data.</returns>
      <param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream, base URI, and <see cref="T:System.Xml.XmlReaderSettings" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="baseUri">The base URI for the entity or document being read. This value can be null.Security Note:The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.</param>
      <exception cref="T:System.NullReferenceException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified stream, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The stream containing the XML data. The <see cref="T:System.Xml.XmlReader" /> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="inputContext">The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. This value can be null.</param>
      <exception cref="T:System.NullReferenceException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified <see cref="T:System.IO.TextReader" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read the XML data.</returns>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.</param>
      <exception cref="T:System.NullReferenceException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlReaderSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" />. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" />, <see cref="T:System.Xml.XmlReaderSettings" />, and base URI.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="baseUri">The base URI for the entity or document being read. This value can be null.Security Note:The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.</param>
      <exception cref="T:System.NullReferenceException">The <paramref name="input" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified <see cref="T:System.IO.TextReader" />, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="input">The <see cref="T:System.IO.TextReader" /> from which to read the XML data. Because a <see cref="T:System.IO.TextReader" /> returns a stream of Unicode characters, the encoding specified in the XML declaration is not used by the <see cref="T:System.Xml.XmlReader" /> to decode the data stream.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="inputContext">The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. This value can be null.</param>
      <exception cref="T:System.NullReferenceException">The <paramref name="input" /> value is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Xml.XmlReaderSettings.NameTable" />  and <see cref="P:System.Xml.XmlParserContext.NameTable" /> properties both contain values. (Only one of these NameTable properties can be set and used).</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with specified URI.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read the XML data. </returns>
      <param name="inputUri">The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlXapResolver" /> class is used to convert the path to a canonical data representation. For more information, see the Remarks section below.</param>
      <exception cref="T:System.NullReferenceException">The <paramref name="inputUri" /> value is null.</exception>
      <exception cref="T:System.Security.SecurityException">The <see cref="T:System.Xml.XmlReader" /> does not have sufficient permissions to access the location of the XML data.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file identified by the URI does not exist.</exception>
      <exception cref="T:System.UriFormatException">The URI format is not correct.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)">
      <summary>Creates a new instance with the specified URI and <see cref="T:System.Xml.XmlReaderSettings" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="inputUri">The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlResolver" /> object on the <see cref="T:System.Xml.XmlReaderSettings" /> object is used to convert the path to a canonical data representation. If <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> is null, a new <see cref="T:System.Xml.XmlXapResolver" /> object is used. For more information, see the Remarks section below.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> value is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by the URI cannot be found.</exception>
      <exception cref="T:System.UriFormatException">The URI format is not correct.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance using the specified URI, <see cref="T:System.Xml.XmlReaderSettings" />, and <see cref="T:System.Xml.XmlParserContext" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object to read XML data.</returns>
      <param name="inputUri">The URI for the file containing the XML data. The <see cref="T:System.Xml.XmlResolver" /> object on the <see cref="T:System.Xml.XmlReaderSettings" /> object is used to convert the path to a canonical data representation. If <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> is null, a new <see cref="T:System.Xml.XmlXapResolver" /> object is used. For more information, see the Remarks section below.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance. This value can be null.</param>
      <param name="inputContext">The <see cref="T:System.Xml.XmlParserContext" /> object that provides the context information required to parse the XML fragment. The context information can include the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current xml:lang and xml:space scope, base URI, and document type definition. This value can be null.</param>
      <exception cref="T:System.NullReferenceException">The inputUri value is null.</exception>
      <exception cref="T:System.Security.SecurityException">The <see cref="T:System.Xml.XmlReader" /> does not have sufficient permissions to access the location of the XML data.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Xml.XmlReaderSettings.NameTable" />  and <see cref="P:System.Xml.XmlParserContext.NameTable" /> properties both contain values. (Only one of these NameTable properties can be set and used).</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified by the URI cannot be found.</exception>
      <exception cref="T:System.UriFormatException">The URI format is not correct.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlReader" /> instance with the specified <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Xml.XmlReaderSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlReader" /> object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> object that you wish to use as the underlying reader.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlReaderSettings" /> object used to configure the new <see cref="T:System.Xml.XmlReader" /> instance.The conformance level of the <see cref="T:System.Xml.XmlReaderSettings" /> object must either match the conformance level of the underlying reader, or it must be set to <see cref="F:System.Xml.ConformanceLevel.Auto" />.</param>
      <exception cref="T:System.NullReferenceException">The <paramref name="reader" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">If the <see cref="T:System.Xml.XmlReaderSettings" /> object specifies a conformance level that is not consistent with conformance level of the underlying reader.-or-The underlying <see cref="T:System.Xml.XmlReader" /> is in an <see cref="F:System.Xml.ReadState.Error" /> or <see cref="F:System.Xml.ReadState.Closed" /> state.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary>When overridden in a derived class, gets the depth of the current node in the XML document.</summary>
      <returns>The depth of the current node in the XML document.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Xml.XmlReader" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary>When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.</summary>
      <returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified index.</summary>
      <returns>The value of the specified attribute. This method does not move the reader.</returns>
      <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> is out of range. Must be non-negative and less than the size of the attribute collection.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.</summary>
      <returns>The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned.</returns>
      <param name="name">The qualified name of the attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.</summary>
      <returns>The value of the specified attribute. If the attribute is not found or the value is String.Empty, null is returned. This method does not move the reader.</returns>
      <param name="name">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary>Gets a value indicating whether the current node has any attributes.</summary>
      <returns>true if the current node has attributes; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary>When overridden in a derived class, gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlReader.Value" />.</summary>
      <returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false. If false, the node has a value of String.Empty.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary>When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD.</summary>
      <returns>true if the current node is an attribute whose value was generated from the default value defined in the DTD; false if the attribute value was explicitly set.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary>When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</summary>
      <returns>true if the current node is an element (<see cref="P:System.Xml.XmlReader.NodeType" /> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary>Gets a value indicating whether the string argument is a valid XML name.</summary>
      <returns>true if the name is valid; otherwise, false.</returns>
      <param name="str">The name to validate. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="str" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary>Gets a value indicating whether or not the string argument is a valid XML name token.</summary>
      <returns>true if it is a valid name token; otherwise false.</returns>
      <param name="str">The name token to validate. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="str" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag.</summary>
      <returns>true if <see cref="M:System.Xml.XmlReader.MoveToContent" /> finds a start tag or empty element tag; false if a node type other than XmlNodeType.Element was found.</returns>
      <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.Name" /> property of the element found matches the given argument.</summary>
      <returns>true if the resulting node is an element and the Name property matches the specified string. false if a node type other than XmlNodeType.Element was found or if the element Name property does not match the specified string.</returns>
      <param name="name">The string matched against the Name property of the element found. </param>
      <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is a start tag or empty element tag and if the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found match the given strings.</summary>
      <returns>true if the resulting node is an element. false if a node type other than XmlNodeType.Element was found or if the LocalName and NamespaceURI properties of the element do not match the specified strings.</returns>
      <param name="localname">The string to match against the LocalName property of the element found. </param>
      <param name="ns">The string to match against the NamespaceURI property of the element found. </param>
      <exception cref="T:System.Xml.XmlException">Incorrect XML is encountered in the input stream. </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified index.</summary>
      <returns>The value of the specified attribute.</returns>
      <param name="i">The index of the attribute. </param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary>When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary>When overridden in a derived class, gets the local name of the current node.</summary>
      <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary>When overridden in a derived class, resolves a namespace prefix in the current element's scope.</summary>
      <returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. </param>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary>When overridden in a derived class, moves to the attribute with the specified index.</summary>
      <param name="i">The index of the attribute. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="i" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" />.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="name">The qualified name of the attribute. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="name" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="name">The local name of the attribute. </param>
      <param name="ns">The namespace URI of the attribute. </param>
      <exception cref="T:System.NullReferenceException">The <paramref name="name" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary>Checks whether the current node is a content (non-white space text, CDATA, Element, EndElement, EntityReference, or EndEntity) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: ProcessingInstruction, DocumentType, Comment, Whitespace, or SignificantWhitespace.</summary>
      <returns>The <see cref="P:System.Xml.XmlReader.NodeType" /> of the current node found by the method or XmlNodeType.None if the reader has reached the end of the input stream.</returns>
      <exception cref="T:System.Xml.XmlException">Incorrect XML encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary>When overridden in a derived class, moves to the element that contains the current attribute node.</summary>
      <returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary>When overridden in a derived class, moves to the first attribute.</summary>
      <returns>true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary>When overridden in a derived class, moves to the next attribute.</summary>
      <returns>true if there is a next attribute; false if there are no more attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary>When overridden in a derived class, gets the qualified name of the current node.</summary>
      <returns>The qualified name of the current node. For example, Name is bk:book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlReader.NodeType" /> of the node. The following node types return the listed values. All other node types return an empty string.Node type Name AttributeThe name of the attribute. DocumentTypeThe document type name. ElementThe tag name. EntityReferenceThe name of the entity referenced. ProcessingInstructionThe target of the processing instruction. XmlDeclarationThe literal string xml. </returns>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary>When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</summary>
      <returns>The namespace URI of the current node; otherwise an empty string.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary>When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</summary>
      <returns>The XmlNameTable enabling you to get the atomized version of a string within the node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary>When overridden in a derived class, gets the type of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary>When overridden in a derived class, gets the namespace prefix associated with the current node.</summary>
      <returns>The namespace prefix associated with the current node.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary>When overridden in a derived class, reads the next node from the stream.</summary>
      <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
      <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary>When overridden in a derived class, parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.</summary>
      <returns>true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Reads the content as an object of the type specified.</summary>
      <returns>The concatenated text content or attribute value converted to the requested type.</returns>
      <param name="returnType">The type of the value to be returned.Note:With the release of the .NET Framework 3.5, the value of the <paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <see cref="T:System.Xml.XmlQualifiedName" /> object to an xs:string.This value can be null.</param>
      <exception cref="T:System.FormatException">The content is not in the correct format for the target type.</exception>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="returnType" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not a supported node type. See the table below for details.</exception>
      <exception cref="T:System.OverflowException">Read Decimal.MaxValue.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />  is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBoolean">
      <summary>Reads the text content at the current position as a Boolean.</summary>
      <returns>The text content as a <see cref="T:System.Boolean" /> object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTime">
      <summary>Reads the text content at the current position as a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The text content as a <see cref="T:System.DateTime" /> object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDecimal">
      <summary>Reads the text content at the current position as a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The text content at the current position as a <see cref="T:System.Decimal" /> object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDouble">
      <summary>Reads the text content at the current position as a double-precision floating-point number.</summary>
      <returns>The text content as a double-precision floating-point number.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsFloat">
      <summary>Reads the text content at the current position as a single-precision floating point number.</summary>
      <returns>The text content at the current position as a single-precision floating point number.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsInt">
      <summary>Reads the text content at the current position as a 32-bit signed integer.</summary>
      <returns>The text content as a 32-bit signed integer.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsLong">
      <summary>Reads the text content at the current position as a 64-bit signed integer.</summary>
      <returns>The text content as a 64-bit signed integer.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObject">
      <summary>Reads the text content at the current position as an <see cref="T:System.Object" />.</summary>
      <returns>The text content as the most appropriate common language runtime (CLR) object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsString">
      <summary>Reads the text content at the current position as a <see cref="T:System.String" /> object.</summary>
      <returns>The text content as a <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
      <exception cref="T:System.FormatException">The string format is not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Reads the element content as the requested type.</summary>
      <returns>The element content converted to the requested typed object.</returns>
      <param name="returnType">The type of the value to be returned.Note:With the release of the .NET Framework 3.5, the value of the <paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.OverflowException">Read Decimal.MaxValue.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.</summary>
      <returns>The element content converted to the requested typed object.</returns>
      <param name="returnType">The type of the value to be returned.Note:With the release of the .NET Framework 3.5, the value of the <paramref name="returnType" /> parameter can now be the <see cref="T:System.DateTimeOffset" /> type.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
      <exception cref="T:System.OverflowException">Read Decimal.MaxValue.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the Base64 content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads the element and decodes the BinHex content.</summary>
      <returns>The number of bytes written to the buffer.</returns>
      <param name="buffer">The buffer into which to copy the resulting text. This value cannot be null.</param>
      <param name="index">The offset into the buffer where to start copying the result.</param>
      <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
      <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean">
      <summary>Reads the current element and returns the contents as a <see cref="T:System.Boolean" /> object.</summary>
      <returns>The element content as a <see cref="T:System.Boolean" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Boolean" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Boolean" /> object.</summary>
      <returns>The element content as a <see cref="T:System.Boolean" /> object.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime">
      <summary>Reads the current element and returns the contents as a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The element content as a <see cref="T:System.DateTime" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.DateTime" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The element contents as a <see cref="T:System.DateTime" /> object.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal">
      <summary>Reads the current element and returns the contents as a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The element content as a <see cref="T:System.Decimal" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The element content as a <see cref="T:System.Decimal" /> object.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble">
      <summary>Reads the current element and returns the contents as a double-precision floating-point number.</summary>
      <returns>The element content as a double-precision floating-point number.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a double-precision floating-point number.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.</summary>
      <returns>The element content as a double-precision floating-point number.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat">
      <summary>Reads the current element and returns the contents as single-precision floating-point number.</summary>
      <returns>The element content as a single-precision floating point number.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a single-precision floating-point number.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.</summary>
      <returns>The element content as a single-precision floating point number.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a single-precision floating-point number.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt">
      <summary>Reads the current element and returns the contents as a 32-bit signed integer.</summary>
      <returns>The element content as a 32-bit signed integer.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 32-bit signed integer.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.</summary>
      <returns>The element content as a 32-bit signed integer.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 32-bit signed integer.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong">
      <summary>Reads the current element and returns the contents as a 64-bit signed integer.</summary>
      <returns>The element content as a 64-bit signed integer.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 64-bit signed integer.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.</summary>
      <returns>The element content as a 64-bit signed integer.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a 64-bit signed integer.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject">
      <summary>Reads the current element and returns the contents as an <see cref="T:System.Object" />.</summary>
      <returns>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an <see cref="T:System.Object" />.</summary>
      <returns>A boxed common language runtime (CLR) object of the most appropriate type. The <see cref="P:System.Xml.XmlReader.ValueType" /> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to the requested type.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString">
      <summary>Reads the current element and returns the contents as a <see cref="T:System.String" /> object.</summary>
      <returns>The element content as a <see cref="T:System.String" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.String" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)">
      <summary>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <see cref="T:System.String" /> object.</summary>
      <returns>The element content as a <see cref="T:System.String" /> object.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on an element.</exception>
      <exception cref="T:System.Xml.XmlException">The current element contains child elements.-or-The element content cannot be converted to a <see cref="T:System.String" /> object.</exception>
      <exception cref="T:System.ArgumentNullException">The method is called with null arguments.</exception>
      <exception cref="T:System.ArgumentException">The specified local name and namespace URI do not match that of the current element being read.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary>Checks that the current content node is an end tag and advances the reader to the next node.</summary>
      <exception cref="T:System.Xml.XmlException">The current node is not an end tag or if incorrect XML is encountered in the input stream. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary>When overridden in a derived class, reads all the content, including markup, as a string.</summary>
      <returns>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.If the current node is neither an element nor attribute, an empty string is returned.</returns>
      <exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary>When overridden in a derived class, reads the content, including markup, representing this node and all its children.</summary>
      <returns>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</returns>
      <exception cref="T:System.Xml.XmlException">The XML was not well-formed, or an error occurred while parsing the XML. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary>Checks that the current node is an element and advances the reader to the next node.</summary>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlReader.IsStartElement" /> returns false. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary>Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.Name" /> and advances the reader to the next node.</summary>
      <param name="name">The qualified name of the element. </param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlReader.IsStartElement" /> returns false or if the <see cref="P:System.Xml.XmlReader.Name" /> of the element does not match the given <paramref name="name" />. </exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary>Checks that the current content node is an element with the given <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> and advances the reader to the next node.</summary>
      <param name="localname">The local name of the element. </param>
      <param name="ns">The namespace URI of the element. </param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlReader.IsStartElement" /> returns false, or the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found do not match the given arguments. </exception>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary>When overridden in a derived class, gets the state of the reader.</summary>
      <returns>One of the <see cref="T:System.Xml.ReadState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadSubtree">
      <summary>Returns a new XmlReader instance that can be used to read the current node, and all its descendants.</summary>
      <returns>A new XmlReader instance set to ReadState.Initial. A call to the <see cref="M:System.Xml.XmlReader.Read" /> method positions the new XmlReader on the node that was current before the call to ReadSubtree method.</returns>
      <exception cref="T:System.InvalidOperationException">The XmlReader is not positioned on an element when this method is called.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String)">
      <summary>Advances the <see cref="T:System.Xml.XmlReader" /> to the next descendant element with the specified qualified name.</summary>
      <returns>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader" /> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the element.If the <see cref="T:System.Xml.XmlReader" /> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" /> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader" /> is not changed.</returns>
      <param name="name">The qualified name of the element you wish to move to.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)">
      <summary>Advances the <see cref="T:System.Xml.XmlReader" /> to the next descendant element with the specified local name and namespace URI.</summary>
      <returns>true if a matching descendant element is found; otherwise false. If a matching child element is not found, the <see cref="T:System.Xml.XmlReader" /> is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the element.If the <see cref="T:System.Xml.XmlReader" /> is not positioned on an element when <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" /> was called, this method returns false and the position of the <see cref="T:System.Xml.XmlReader" /> is not changed.</returns>
      <param name="localName">The local name of the element you wish to move to.</param>
      <param name="namespaceURI">The namespace URI of the element you wish to move to.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String)">
      <summary>Reads until an element with the specified qualified name is found.</summary>
      <returns>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader" /> is in an end of file state.</returns>
      <param name="name">The qualified name of the element.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)">
      <summary>Reads until an element with the specified local name and namespace URI is found.</summary>
      <returns>true if a matching element is found; otherwise false and the <see cref="T:System.Xml.XmlReader" /> is in an end of file state.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String)">
      <summary>Advances the XmlReader to the next sibling element with the specified qualified name.</summary>
      <returns>true if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the parent element.</returns>
      <param name="name">The qualified name of the sibling element you wish to move to.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)">
      <summary>Advances the XmlReader to the next sibling element with the specified local name and namespace URI.</summary>
      <returns>true if a matching sibling element is found; otherwise false. If a matching sibling element is not found, the XmlReader is positioned on the end tag (<see cref="P:System.Xml.XmlReader.NodeType" /> is XmlNodeType.EndElement) of the parent element.</returns>
      <param name="localName">The local name of the sibling element you wish to move to.</param>
      <param name="namespaceURI">The namespace URI of the sibling element you wish to move to</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary>Reads large streams of text embedded in an XML document.</summary>
      <returns>The number of characters read into the buffer. The value zero is returned when there is no more text content.</returns>
      <param name="buffer">The array of characters that serves as the buffer to which the text contents are written. This value cannot be null.</param>
      <param name="index">The offset within the buffer where the <see cref="T:System.Xml.XmlReader" /> can start to copy the results.</param>
      <param name="count">The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</param>
      <exception cref="T:System.InvalidOperationException">The current node does not have a value (<see cref="P:System.Xml.XmlReader.HasValue" /> is false).</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer, or index + count is larger than the allocated buffer size.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</exception>
      <exception cref="T:System.Xml.XmlException">The XML data is not well-formed.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary>When overridden in a derived class, resolves the entity reference for EntityReference nodes.</summary>
      <exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node; this implementation of the reader cannot resolve entities (<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> returns false). </exception>
    </member>
    <member name="P:System.Xml.XmlReader.Settings">
      <summary>Gets the <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <returns>The <see cref="T:System.Xml.XmlReaderSettings" /> object used to create this reader instance. If this reader was not created using the <see cref="Overload:System.Xml.XmlReader.Create" /> method, this property returns null.</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary>Skips the children of the current node.</summary>
    </member>
    <member name="M:System.Xml.XmlReader.System#IDisposable#Dispose">
      <summary>For a description of this member, see <see cref="M:System.IDisposable.Dispose" />.</summary>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary>When overridden in a derived class, gets the text value of the current node.</summary>
      <returns>The value returned depends on the <see cref="P:System.Xml.XmlReader.NodeType" /> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
    </member>
    <member name="P:System.Xml.XmlReader.ValueType">
      <summary>Gets the common language runtime (CLR) type for the current node.</summary>
      <returns>The CLR type that corresponds to the typed value of the node. The default is System.String.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary>When overridden in a derived class, gets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope.</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary>When overridden in a derived class, gets the current xml:space scope.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlSpace" /> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</returns>
    </member>
    <member name="T:System.Xml.XmlReaderSettings">
      <summary>Specifies a set of features to support on the <see cref="T:System.Xml.XmlReader" /> object created by the <see cref="Overload:System.Xml.XmlReader.Create" /> method.</summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlReaderSettings" /> class.</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
      <summary>Gets or sets a value indicating whether to do character checking.</summary>
      <returns>true to do character checking; otherwise false. The default is true.Note:If the <see cref="T:System.Xml.XmlReader" /> is processing text data, it always checks that the XML names and text content are valid, regardless of the property setting. Setting <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> to false turns off character checking for character entity references.</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Clone">
      <summary>Creates a copy of the <see cref="T:System.Xml.XmlReaderSettings" /> instance.</summary>
      <returns>The cloned <see cref="T:System.Xml.XmlReaderSettings" /> object.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CloseInput">
      <summary>Gets or sets a value indicating whether the underlying stream or <see cref="T:System.IO.TextReader" /> should be closed when the reader is closed.</summary>
      <returns>true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when the reader is closed; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
      <summary>Gets or sets the level of conformance which the <see cref="T:System.Xml.XmlReader" /> will comply.</summary>
      <returns>One of the <see cref="T:System.Xml.ConformanceLevel" /> values. The default is ConformanceLevel.Document.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.DtdProcessing">
      <summary>Gets or sets the <see cref="T:System.Xml.DtdProcessing" /> enumeration.</summary>
      <returns>The <see cref="T:System.Xml.DtdProcessing" /> enumeration.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
      <summary>Gets or sets a value indicating whether to ignore comments.</summary>
      <returns>true to ignore comments; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
      <summary>Gets or sets a value indicating whether to ignore processing instructions.</summary>
      <returns>true to ignore processing instructions; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
      <summary>Gets or sets a value indicating whether to ignore insignificant white space.</summary>
      <returns>true to ignore white space; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
      <summary>Gets or sets line number offset of the <see cref="T:System.Xml.XmlReader" /> object.</summary>
      <returns>The line number offset. The default is 0.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
      <summary>Gets or sets line position offset of the <see cref="T:System.Xml.XmlReader" /> object.</summary>
      <returns>The line number offset. The default is 0.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities">
      <summary>Gets or sets a value indicating the maximum allowable number of characters in a document that result from expanding entities.</summary>
      <returns>The maximum allowable number of characters from expanded entities. The default is 0.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument">
      <summary>Gets or sets a value indicating the maximum allowable number of characters XML document. A zero (0) value means no limits on the size of the XML document. A non-zero value specifies the maximum size, in characters.</summary>
      <returns>The maximum allowable number of characters in an XML document. The default is 0.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.NameTable">
      <summary>Gets or sets the <see cref="T:System.Xml.XmlNameTable" /> used for atomized string comparisons.</summary>
      <returns>The <see cref="T:System.Xml.XmlNameTable" /> that stores all the atomized strings used by all <see cref="T:System.Xml.XmlReader" /> instances created using this <see cref="T:System.Xml.XmlReaderSettings" /> object.The default is null. The created <see cref="T:System.Xml.XmlReader" /> instance will use a new empty <see cref="T:System.Xml.NameTable" /> if this value is null.</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Reset">
      <summary>Resets the members of the settings class to their default values.</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> used to access external documents.</summary>
      <returns>An <see cref="T:System.Xml.XmlResolver" /> used to access external documents. If set to null, an <see cref="T:System.Xml.XmlException" /> is thrown when the <see cref="T:System.Xml.XmlReader" /> tries to access an external resource. </returns>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary>Resolves external XML resources named by a Uniform Resource Identifier (URI). </summary>
    </member>
    <member name="M:System.Xml.XmlResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlResolver" /> class.</summary>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>When overridden in a derived class, maps a URI to an object containing the actual resource.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> object or null if a type other than stream is specified.</returns>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />. </param>
      <param name="role">The current version does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios. </param>
      <param name="ofObjectToReturn">The type of object to return. The current version only returns <see cref="T:System.IO.Stream" /> objects. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> is not a Stream type. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> is null. </exception>
      <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary>When overridden in a derived class, resolves the absolute URI from the base and relative URIs.</summary>
      <returns>A <see cref="T:System.Uri" /> representing the absolute URI or null if the relative URI cannot be resolved.</returns>
      <param name="baseUri">The base URI used to resolve the relative URI </param>
      <param name="relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri" /> value. If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> is null</exception>
    </member>
    <member name="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)">
      <summary>This method adds the ability for the resolver to return other types than just <see cref="T:System.IO.Stream" />.</summary>
      <returns>true if the type parameter is a <see cref="T:System.IO.Stream" />, otherwise false.</returns>
      <param name="absoluteUri">The URI.</param>
      <param name="type">The type to return.</param>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary>Specifies the current xml:space scope.</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary>No xml:space scope.</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary>The xml:space scope equals default.</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary>The xml:space scope equals preserve.</summary>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary>Represents the XML type for the string. This allows the string to be read as a particular XML type, for example a CDATA section type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary>CDATA type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary>ID type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary>IDREF type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary>IDREFS type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary>ENTITY type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary>ENTITIES type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary>NMTOKEN type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary>NMTOKENS type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary>NOTATION type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary>ENUMERATION type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary>QName type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary>NCName type.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary>No type.</summary>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary>Represents a writer that provides a fast, non-cached, forward-only means of generating streams or files containing XML data.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlWriter" /> class.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary>When overridden in a derived class, closes this stream and the underlying stream.</summary>
      <exception cref="T:System.InvalidOperationException">A call is made to write more output after Close has been called or the result of this call is an invalid XML document. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified stream.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The stream to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified stream.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stream" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the stream and <see cref="T:System.Xml.XmlWriterSettings" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The stream to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified stream</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="stream" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.IO.TextWriter" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified <see cref="T:System.IO.TextWriter" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="text" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.IO.TextWriter" /> to which you want to write. The <see cref="T:System.Xml.XmlWriter" /> writes XML 1.0 text syntax and appends it to the specified <see cref="T:System.IO.TextWriter" />.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="text" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Text.StringBuilder" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.Text.StringBuilder" /> to which to write to. Content written by the <see cref="T:System.Xml.XmlWriter" /> is appended to the <see cref="T:System.Text.StringBuilder" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="builder" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the <see cref="T:System.Text.StringBuilder" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.Text.StringBuilder" /> to which to write to. Content written by the <see cref="T:System.Xml.XmlWriter" /> is appended to the <see cref="T:System.Text.StringBuilder" />.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="builder" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Xml.XmlWriter" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> object that you want to use as the underlying writer.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)">
      <summary>Creates a new <see cref="T:System.Xml.XmlWriter" /> instance using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Xml.XmlWriterSettings" /> objects.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> object that is wrapped around the specified <see cref="T:System.Xml.XmlWriter" /> object.</returns>
      <param name="output">The <see cref="T:System.Xml.XmlWriter" /> object that you want to use as the underlying writer.</param>
      <param name="settings">The <see cref="T:System.Xml.XmlWriterSettings" /> object used to configure the new <see cref="T:System.Xml.XmlWriter" /> instance. If this is null, a <see cref="T:System.Xml.XmlWriterSettings" /> with default settings is used.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="writer" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Xml.XmlWriter" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary>When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary>When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.</summary>
      <returns>The matching prefix or null if no matching namespace URI is found in the current scope.</returns>
      <param name="ns">The namespace URI whose prefix you want to find. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> is either null or String.Empty. </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.Settings">
      <summary>Gets the <see cref="T:System.Xml.XmlWriterSettings" /> object used to create this <see cref="T:System.Xml.XmlWriter" /> instance.</summary>
      <returns>The <see cref="T:System.Xml.XmlWriterSettings" /> object used to create this writer instance. If this writer was not created using the <see cref="Overload:System.Xml.XmlWriter.Create" /> method, this property returns null.</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.System#IDisposable#Dispose">
      <summary>For a description of this member, see <see cref="M:System.IDisposable.Dispose" />.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary>When overridden in a derived class, writes out all the attributes found at the current position in the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The XmlReader from which to copy the attributes. </param>
      <param name="defattr">true to copy the default attributes from the XmlReader; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
      <exception cref="T:System.Xml.XmlException">The reader is not positioned on an element, attribute or XmlDeclaration node. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary>When overridden in a derived class, writes out the attribute with the specified local name and value.</summary>
      <param name="localName">The local name of the attribute. </param>
      <param name="value">The value of the attribute. </param>
      <exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed. </exception>
      <exception cref="T:System.ArgumentException">The xml:space or xml:lang attribute value is invalid. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and value.</summary>
      <param name="localName">The local name of the attribute. </param>
      <param name="ns">The namespace URI to associate with the attribute. </param>
      <param name="value">The value of the attribute. </param>
      <exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed. </exception>
      <exception cref="T:System.ArgumentException">The xml:space or xml:lang attribute value is invalid. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes out the attribute with the specified prefix, local name, namespace URI, and value.</summary>
      <param name="prefix">The namespace prefix of the attribute. </param>
      <param name="localName">The local name of the attribute. </param>
      <param name="ns">The namespace URI of the attribute. </param>
      <param name="value">The value of the attribute. </param>
      <exception cref="T:System.InvalidOperationException">The state of writer is not WriteState.Element or writer is closed. </exception>
      <exception cref="T:System.ArgumentException">The xml:space or xml:lang attribute value is invalid. </exception>
      <exception cref="T:System.Xml.XmlException">The <paramref name="localName" /> or <paramref name="ns" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.</summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position in the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, encodes the specified binary bytes as BinHex and writes out the resulting text.</summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position in the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The writer is closed or in error state.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary>When overridden in a derived class, writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</summary>
      <param name="text">The text to place inside the CDATA block. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary>When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.</summary>
      <param name="ch">The Unicode character for which to generate a character entity. </param>
      <exception cref="T:System.ArgumentException">The character is in the surrogate pair character range, 0xd800 - 0xdfff. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, writes text one buffer at a time.</summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position in the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="buffer" /> parameter value is not valid.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is outside the bounds of the <paramref name="buffer" />.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary>When overridden in a derived class, writes out a comment &lt;!--...--&gt; containing the specified text.</summary>
      <param name="text">Text to place inside the comment. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.</summary>
      <param name="name">The name of the DOCTYPE. This must be non-empty. </param>
      <param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where <paramref name="pubid" /> and <paramref name="sysid" /> are replaced with the value of the given arguments. </param>
      <param name="sysid">If <paramref name="pubid" /> is null and <paramref name="sysid" /> is non-null it writes SYSTEM "sysid" where <paramref name="sysid" /> is replaced with the value of this argument. </param>
      <param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument. </param>
      <exception cref="T:System.InvalidOperationException">This method was called outside the prolog (after the root element). </exception>
      <exception cref="T:System.ArgumentException">The value for <paramref name="name" /> would result in invalid XML. </exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> is not valid. </exception>
      <exception cref="T:System.NullReferenceException">The<paramref name=" name" />,<paramref name=" pubid" />,<paramref name=" sysid" />, or <paramref name="subset" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary>When overridden in a derived class, writes an element with the specified local name and value.</summary>
      <param name="localName">The local name of the element. </param>
      <param name="value">The value of the element. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="localName" /> value is null or an empty string.-or-The parameter values are not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes an element with the specified local name, namespace URI, and value.</summary>
      <param name="localName">The local name of the element. </param>
      <param name="ns">The namespace URI to associate with the element. </param>
      <param name="value">The value of the element. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="localName" /> value is null or an empty string.-or-The parameter values are not valid. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)">
      <summary>Writes an element with the specified local name, namespace URI, and value.</summary>
      <param name="prefix">The prefix of the element.</param>
      <param name="localName">The local name of the element.</param>
      <param name="ns">The namespace URI of the element.</param>
      <param name="value">The value of the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="localName" /> value is null or an empty string.-or-The parameter values are not valid.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary>When overridden in a derived class, closes the previous <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> call.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary>When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.</summary>
      <exception cref="T:System.ArgumentException">The XML document is invalid. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</summary>
      <exception cref="T:System.InvalidOperationException">This results in an invalid XML document. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary>When overridden in a derived class, writes out an entity reference as &amp;name;.</summary>
      <param name="name">The name of the entity reference. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary>When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
      <param name="name">The name to write. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid XML name; or <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary>When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</summary>
      <param name="name">The name to write. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not a valid NmToken; or <paramref name="name" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>When overridden in a derived class, copies everything from the reader to the writer and moves the reader to the start of the next sibling.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from. </param>
      <param name="defattr">true to copy the default attributes from the XmlReader; otherwise, false. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> contains invalid characters. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</summary>
      <param name="name">The name of the processing instruction. </param>
      <param name="text">The text to include in the processing instruction. </param>
      <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.<paramref name="name" /> is either null or String.Empty.This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> has already been called. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary>When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</summary>
      <param name="localName">The local name to write. </param>
      <param name="ns">The namespace URI for the name. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> is String.Empty or not a valid name. </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="localName" /> or <paramref name="ns" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, writes raw markup manually from a character buffer.</summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position within the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> or <paramref name="count" /> is less than zero. -or-The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary>When overridden in a derived class, writes raw markup manually from a string.</summary>
      <param name="data">String containing the text to write. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> is either null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)">
      <summary>Writes the start of an attribute with the specified local name.</summary>
      <param name="localName">The local name of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary>Writes the start of an attribute with the specified local name and namespace URI.</summary>
      <param name="localName">The local name of the attribute. </param>
      <param name="ns">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.</summary>
      <param name="prefix">The namespace prefix of the attribute. </param>
      <param name="localName">The local name of the attribute. </param>
      <param name="ns">The namespace URI for the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary>When overridden in a derived class, writes the XML declaration with the version "1.0".</summary>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary>When overridden in a derived class, writes the XML declaration with the version "1.0" and the standalone attribute.</summary>
      <param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no". </param>
      <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary>When overridden in a derived class, writes out a start tag with the specified local name.</summary>
      <param name="localName">The local name of the element. </param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary>When overridden in a derived class, writes the specified start tag and associates it with the given namespace.</summary>
      <param name="localName">The local name of the element. </param>
      <param name="ns">The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also. </param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.</summary>
      <param name="prefix">The namespace prefix of the element. </param>
      <param name="localName">The local name of the element. </param>
      <param name="ns">The namespace URI to associate with the element. </param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary>When overridden in a derived class, gets the state of the writer.</summary>
      <returns>One of the <see cref="T:System.Xml.WriteState" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary>When overridden in a derived class, writes the given text content.</summary>
      <param name="text">The text to write. </param>
      <exception cref="T:System.ArgumentException">The text string contains an invalid surrogate pair. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.</summary>
      <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
      <param name="highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF. </param>
      <exception cref="T:System.ArgumentException">An invalid surrogate character pair was passed. </exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Boolean)">
      <summary>Writes a <see cref="T:System.Boolean" /> value.</summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTime)">
      <summary>Writes a <see cref="T:System.DateTime" /> value.</summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Decimal)">
      <summary>Writes a <see cref="T:System.Decimal" /> value.</summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Double)">
      <summary>Writes a <see cref="T:System.Double" /> value.</summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int32)">
      <summary>Writes a <see cref="T:System.Int32" /> value.</summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int64)">
      <summary>Writes a <see cref="T:System.Int64" /> value.</summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Object)">
      <summary>Writes the object value.</summary>
      <param name="value">The object value to write. Note:With the release of the .NET Framework 3.5, this method accepts <see cref="T:System.DateTimeOffset" /> as a parameter.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The writer is closed or in error state.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Single)">
      <summary>Writes a single-precision floating-point number.</summary>
      <param name="value">The single-precision floating-point number to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.String)">
      <summary>Writes a <see cref="T:System.String" /> value.</summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
      <exception cref="T:System.ArgumentException">An invalid value was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary>When overridden in a derived class, writes out the given white space.</summary>
      <param name="ws">The string of white space characters. </param>
      <exception cref="T:System.ArgumentException">The string contains non-white space characters. </exception>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary>When overridden in a derived class, gets the current xml:lang scope.</summary>
      <returns>The current xml:lang scope.</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary>When overridden in a derived class, gets an <see cref="T:System.Xml.XmlSpace" /> representing the current xml:space scope.</summary>
      <returns>An XmlSpace representing the current xml:space scope.Value Meaning NoneThis is the default if no xml:space scope exists. DefaultThe current scope is xml:space="default". PreserveThe current scope is xml:space="preserve". </returns>
    </member>
    <member name="T:System.Xml.XmlWriterSettings">
      <summary>Specifies a set of features to support on the <see cref="T:System.Xml.XmlWriter" /> object created by the <see cref="Overload:System.Xml.XmlWriter.Create" /> method.</summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlWriterSettings" /> class.</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
      <summary>Gets or sets a value indicating whether to do character checking.</summary>
      <returns>true to do character checking; otherwise false. The default is true.</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Clone">
      <summary>Creates a copy of the <see cref="T:System.Xml.XmlWriterSettings" /> instance.</summary>
      <returns>The cloned <see cref="T:System.Xml.XmlWriterSettings" /> object.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CloseOutput">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.Xml.XmlWriter" /> should also close the underlying stream or <see cref="T:System.IO.TextWriter" /> when the <see cref="M:System.Xml.XmlWriter.Close" /> method is called.</summary>
      <returns>true to also close the underlying stream or <see cref="T:System.IO.TextWriter" />; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
      <summary>Gets or sets the level of conformance which the <see cref="T:System.Xml.XmlWriter" /> complies with.</summary>
      <returns>One of the <see cref="T:System.Xml.ConformanceLevel" /> values. The default is ConformanceLevel.Document.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Encoding">
      <summary>Gets or sets the text encoding to use.</summary>
      <returns>The text encoding to use. The default is Encoding.UTF8.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Indent">
      <summary>Gets or sets a value indicating whether to indent elements.</summary>
      <returns>true to write individual elements on new lines and indent; otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.IndentChars">
      <summary>Gets or sets the character string to use when indenting. This setting is used when the <see cref="P:System.Xml.XmlWriterSettings.Indent" /> property is set to true.</summary>
      <returns>The character string to use when indenting. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is two spaces.</returns>
      <exception cref="T:System.ArgumentNullException">The value assigned to the <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> is null. </exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NamespaceHandling">
      <summary>Gets or sets the <see cref="T:System.Xml.NamespaceHandling" /> enumeration used to specify whether to remove duplicate namespace declarations in the <see cref="T:System.Xml.XmlWriter" />. For the duplicate namespace to be removed, the prefix and the namespace have to match. </summary>
      <returns>The <see cref="T:System.Xml.NamespaceHandling" /> enumeration used to specify whether to remove duplicate namespace declarations in the <see cref="T:System.Xml.XmlWriter" />.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineChars">
      <summary>Gets or sets the character string to use for line breaks. </summary>
      <returns>The character string to use for line breaks. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is \r\n (carriage return, new line).</returns>
      <exception cref="T:System.ArgumentNullException">The value assigned to the <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> is null. </exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineHandling">
      <summary>Gets or sets a value indicating whether to normalize line breaks in the output.</summary>
      <returns>One of the <see cref="T:System.Xml.NewLineHandling" /> values. The default is <see cref="F:System.Xml.NewLineHandling.Replace" />.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineOnAttributes">
      <summary>Gets or sets a value indicating whether to write attributes on a new line.</summary>
      <returns>true to write attributes on individual lines; otherwise false. The default is false.Note:This setting has no effect when the <see cref="P:System.Xml.XmlWriterSettings.Indent" /> property value is false.When <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> is set to true, each attribute is pre-pended with a new line and one extra level of indentation.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
      <summary>Gets or sets a value indicating whether to write an XML declaration.</summary>
      <returns>true to omit the XML declaration; otherwise false. The default is false, an XML declaration is written.</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Reset">
      <summary>Resets the members of the settings class to their default values.</summary>
    </member>
    <member name="T:System.Xml.XmlXapResolver">
      <summary>The <see cref="T:System.Xml.XmlXapResolver" /> type is used to resolve resources in the Silverlight application’s XAP package. </summary>
    </member>
    <member name="M:System.Xml.XmlXapResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlXapResolver" /> class. </summary>
    </member>
    <member name="M:System.Xml.XmlXapResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>Maps a URI to an object that contains the actual resource.</summary>
      <returns>A System.IO.Stream object. If the stream is not found, an exception is thrown.</returns>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
      <param name="role">The current version of the .NET Framework for Silverlight does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.</param>
      <param name="ofObjectToReturn">The type of object to return. The current version only returns System.IO.Stream objects. </param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary>This class is provided for interface compatibility. It is not intended to be used from your Silverlight code.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary>Indicates if attributes or elements need to be qualified with a namespace prefix.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary>Element and attribute form is not specified in the schema.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary>Elements and attributes must be qualified with a namespace prefix.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary>Elements and attributes are not required to be qualified with a namespace prefix.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary>This class is provided for interface compatibility. It is not intended to be used from your Silverlight code.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObject.#ctor">
      <summary>This class is provided for interface compatibility. It is not intended to be used from your Silverlight code.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSet">
      <summary>This class is provided for interface compatibility. It is not intended to be used from your Silverlight code.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary>Represents the severity of the validation event.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary>Indicates that a validation error occurred when validating the instance document. This applies to document type definitions (DTDs) and XML Schema definition language (XSD) schemas.  The World Wide Web Consortium (W3C) validity constraints are considered errors. If no validation event handler has been created, errors throw an exception.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary>Indicates that a validation event occurred that is not an error. A warning is typically issued when there is no DTD or XML Schema to validate a particular element or attribute against. Unlike errors, warnings do not throw an exception if there is no validation event handler.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlTypeCode">
      <summary>Represents the W3C XML Schema Definition Language (XSD) schema types.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.None">
      <summary>No type information.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Item">
      <summary>An item such as a node or atomic value.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Node">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Document">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Element">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Attribute">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Namespace">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.ProcessingInstruction">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Comment">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Text">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyAtomicType">
      <summary>Any atomic value of a union.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UntypedAtomic">
      <summary>An untyped atomic value.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.String">
      <summary>A W3C XML Schema xs:string type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Boolean">
      <summary>A W3C XML Schema xs:boolean type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Decimal">
      <summary>A W3C XML Schema xs:decimal type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Float">
      <summary>A W3C XML Schema xs:float type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Double">
      <summary>A W3C XML Schema xs:double type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Duration">
      <summary>A W3C XML Schema xs:Duration type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DateTime">
      <summary>A W3C XML Schema xs:dateTime type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Time">
      <summary>A W3C XML Schema xs:time type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Date">
      <summary>A W3C XML Schema xs:date type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYearMonth">
      <summary>A W3C XML Schema xs:gYearMonth type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYear">
      <summary>A W3C XML Schema xs:gYear type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonthDay">
      <summary>A W3C XML Schema xs:gMonthDay type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GDay">
      <summary>A W3C XML Schema xs:gDay type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonth">
      <summary>A W3C XML Schema xs:gMonth type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.HexBinary">
      <summary>A W3C XML Schema xs:hexBinary type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Base64Binary">
      <summary>A W3C XML Schema xs:base64Binary type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyUri">
      <summary>A W3C XML Schema xs:anyURI type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.QName">
      <summary>A W3C XML Schema xs:QName type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Notation">
      <summary>A W3C XML Schema xs:NOTATION type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NormalizedString">
      <summary>A W3C XML Schema xs:normalizedString type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Token">
      <summary>A W3C XML Schema xs:token type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Language">
      <summary>A W3C XML Schema xs:language type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NmToken">
      <summary>A W3C XML Schema xs:NMTOKEN type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Name">
      <summary>A W3C XML Schema xs:Name type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NCName">
      <summary>A W3C XML Schema xs:NCName type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Id">
      <summary>A W3C XML Schema xs:ID type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Idref">
      <summary>A W3C XML Schema xs:IDREF type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Entity">
      <summary>A W3C XML Schema xs:ENTITY type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Integer">
      <summary>A W3C XML Schema xs:integer type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonPositiveInteger">
      <summary>A W3C XML Schema xs:nonPositiveInteger type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NegativeInteger">
      <summary>A W3C XML Schema xs:negativeInteger type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Long">
      <summary>A W3C XML Schema xs:long type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Int">
      <summary>A W3C XML Schema xs:int type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Short">
      <summary>A W3C XML Schema xs:short type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Byte">
      <summary>A W3C XML Schema xs:byte type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonNegativeInteger">
      <summary>A W3C XML Schema xs:nonNegativeInteger type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedLong">
      <summary>A W3C XML Schema xs:unsignedLong type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedInt">
      <summary>A W3C XML Schema xs:unsignedInt type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedShort">
      <summary>A W3C XML Schema xs:unsignedShort type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedByte">
      <summary>A W3C XML Schema xs:unsignedByte type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.PositiveInteger">
      <summary>A W3C XML Schema xs:positiveInteger type.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.YearMonthDuration">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DayTimeDuration">
      <summary>This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Xml.Serialization.IXmlSerializable">
      <summary>Provides custom formatting for XML serialization and deserialization to control how your object is serialized or deserialized by the <see cref="T:System.Xml.XmlSerializer" />.</summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <summary>This method is reserved and should not be used. When implementing the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface, you should return a null reference (Nothing in Visual Basic) from this method.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml" /> method.</returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary>Generates an object from its XML representation.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary>Converts an object into its XML representation.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary>Specifies that the member (a field that returns an array of <see cref="T:System.Xml.Linq.XElement" /> or <see cref="T:System.Xml.Linq.XNode" /> objects) contains objects that represent an XML element that has no corresponding member in the object being serialized or deserialized.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class and specifies the XML element name generated in the XML document.</summary>
      <param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class and specifies the XML element name generated in the XML document and its XML namespace.</summary>
      <param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
      <param name="ns">The XML namespace of the XML element. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary>Gets or sets the XML element name.</summary>
      <returns>The name of the XML element.</returns>
      <exception cref="T:System.InvalidOperationException">The element name of an array member does not match the element name specified by the <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> property. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary>Gets or sets the XML namespace generated in the XML document.</summary>
      <returns>An XML namespace.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Order">
      <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
      <returns>The order of the code generation.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> set is negative.</exception>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayAttribute">
      <summary>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a particular class member as an array of XML elements.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> class and specifies the XML element name generated in the XML document instance.</summary>
      <param name="elementName">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.ElementName">
      <summary>Gets or sets the XML element name given to the serialized array.</summary>
      <returns>The XML element name of the serialized array. The default is the name of the member to which the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> is assigned.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Form">
      <summary>Gets or sets a value that indicates whether the XML element name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is qualified or unqualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is XmlSchemaForm.None.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member as an empty XML element with the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Namespace">
      <summary>Gets or sets the namespace of the XML element.</summary>
      <returns>The namespace of the XML element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Order">
      <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
      <returns>The order of the code generation.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> set is negative.</exception>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttribute">
      <summary>Specifies the derived types that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> can place in a serialized array.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class and specifies the name of the XML element generated in the XML document.</summary>
      <param name="elementName">The name of the XML element. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class and specifies the name of the XML element generated in the XML document and the <see cref="T:System.Type" /> that can be inserted into the generated XML document.</summary>
      <param name="elementName">The name of the XML element. </param>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class and specifies the <see cref="T:System.Type" /> that can be inserted into the serialized array.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.DataType">
      <summary>Gets or sets the XML data type of the generated XML element.</summary>
      <returns>An XML Schema definition (XSD) data type, as defined by the World Wide Web Consortium (www.w3.org) document, XML Schema Part 2: Datatypes.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.ElementName">
      <summary>Gets or sets the name of the generated XML element.</summary>
      <returns>The name of the generated XML element. The default is the member identifier.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Form">
      <summary>Gets or sets a value that indicates whether the name of the generated XML element is qualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is XmlSchemaForm.None.</returns>
      <exception cref="T:System.Exception">The <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" /> property is set to XmlSchemaForm.Unqualified and a <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" /> value is specified. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member as an empty XML tag with the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false and no instance is generated. The default is true.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace">
      <summary>Gets or sets the namespace of the generated XML element.</summary>
      <returns>The namespace of the generated XML element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel">
      <summary>Gets or sets the level in a hierarchy of XML elements that the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> affects.</summary>
      <returns>The zero-based index of a set of indexes in an array of arrays.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Type">
      <summary>Gets or sets the type allowed in an array.</summary>
      <returns>A <see cref="T:System.Type" /> that is allowed in the array.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize the class member as an XML attribute.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class and specifies the name of the generated XML attribute.</summary>
      <param name="attributeName">The name of the XML attribute that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</summary>
      <param name="attributeName">The name of the XML attribute that is generated. </param>
      <param name="type">The <see cref="T:System.Type" /> used to store the attribute. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> used to store the attribute. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary>Gets or sets the name of the XML attribute.</summary>
      <returns>The name of the XML attribute. The default is the member name.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary>Gets or sets the XSD data type of the XML attribute generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XSD (XML Schema Document) data type, as defined by the World Wide Web Consortium (www.w3.org) document, XML Schema Part 2: Datatypes.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary>Gets or sets a value that indicates whether the XML attribute name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is qualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is XmlForm.None.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary>Gets or sets the XML namespace of the XML attribute.</summary>
      <returns>The XML namespace of the XML attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Type">
      <summary>Gets or sets the complex type of the XML attribute.</summary>
      <returns>The type of the XML attribute.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
      <summary>Specifies that the member can be further detected by using an enumeration.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> class that specifies the name of the member that returns the enumeration used to detect a choice.</summary>
      <param name="name">The member name that returns the enumeration used to detect a choice. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
      <summary>Gets or sets the name of the field that returns the enumeration to use when detecting types.</summary>
      <returns>The name of a field that returns an enumeration.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary>Indicates that a public field or property represents an XML element when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes or deserializes the object that contains it.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and specifies the name of the XML element.</summary>
      <param name="elementName">The XML element name of the serialized member. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> and specifies the name of the XML element and a derived type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied. This member type is used when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes the object that contains it.</summary>
      <param name="elementName">The XML element name of the serialized member. </param>
      <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and specifies a type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied. This type is used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when serializing or deserializing object that contains it.</summary>
      <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary>Gets or sets the XML Schema definition (XSD) data type of the XML element generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XML Schema data type, as defined by the World Wide Web Consortium (www.w3.org) document, XML Schema Part 2: Datatypes.</returns>
      <exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the.NET data type. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary>Gets or sets the name of the generated XML element.</summary>
      <returns>The name of the generated XML element. The default is the member identifier.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary>Gets or sets a value that indicates whether the element is qualified.</summary>
      <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member that is set to null as an empty tag with the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary>Gets or sets the namespace assigned to the XML element that results when the class is serialized.</summary>
      <returns>The namespace of the XML element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Order">
      <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
      <returns>The order of the code generation.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> set is negative.</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary>Gets or sets the object type used to represent the XML element.</summary>
      <returns>The <see cref="T:System.Type" /> of the member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary>Controls how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> class, and specifies the XML value that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates or recognizes (when it serializes or deserializes the enumeration, respectively).</summary>
      <param name="name">The overriding name of the enumeration member. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary>Gets or sets the value generated in an XML-document instance when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration, or the value recognized when it deserializes the enumeration member.</summary>
      <returns>The value generated in an XML-document instance when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes the enumeration, or the value recognized when it deserializes the enumeration member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary>Instructs the <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> method of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class not to serialize the public field or public read/write property value.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> class.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlIncludeAttribute">
      <summary>Allows the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to recognize a type when it serializes or deserializes an object.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIncludeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to include. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlIncludeAttribute.Type">
      <summary>Gets or sets the type of the object to include.</summary>
      <returns>The <see cref="T:System.Type" /> of the object to include.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
      <summary>Specifies that the target property, parameter, return value, or class member contains prefixes associated with namespaces that are used within an XML document.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" /> class.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary>Controls XML serialization of the attribute target as an XML root element.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> class and specifies the name of the XML root element.</summary>
      <param name="elementName">The name of the XML root element. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary>Gets or sets the XSD data type of the XML root element.</summary>
      <returns>An XSD (XML Schema Document) data type, as defined by the World Wide Web Consortium (www.w3.org) document, XML Schema Part 2: Datatypes.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary>Gets or sets the name of the XML element that is generated and recognized by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class's <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> and <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> methods, respectively.</summary>
      <returns>The name of the XML root element that is generated and recognized in an XML-document instance. The default is the name of the serialized class.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member that is set to null into the xsi:nil attribute set to true.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary>Gets or sets the namespace for the XML root element.</summary>
      <returns>The namespace for the XML element.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
      <summary>When applied to a type that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface, stores the name of a static method of the type that returns an XML schema and a <see cref="T:System.Xml.XmlQualifiedName" /> (or <see cref="T:System.Xml.Schema.XmlSchemaType" /> for anonymous types) that controls the serialization of the type.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> class for a specified static method in the target type.</summary>
      <param name="methodName">The name of the static method that must be implemented.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.IsAny">
      <summary>Gets or sets a value that determines whether the target class is a wildcard, or that the schema for the class contains only an xs:any element.</summary>
      <returns>true if the class is a wildcard or if the schema contains only the xs:any element; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
      <summary>Gets the name of the static method that supplies the type's XML schema and the name of its XML Schema data type.</summary>
      <returns>The name of the static method that is invoked by the XML infrastructure to return an XML schema.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary>Indicates to the <see cref="T:System.Xml.Serialization.XmlSerializer" /> that the member must be treated as XML text when the class that contains it is serialized or deserialized.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the member to be serialized. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary>Gets or sets the XML Schema definition (XSD) language data type of the text generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>An XML Schema (XSD) data type, as defined by the World Wide Web Consortium (www.w3.org) document, XML Schema Part 2: Datatypes.</returns>
      <exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the .NET data type. </exception>
      <exception cref="T:System.InvalidOperationException">The XML Schema data type you have specified is invalid for the property and cannot be converted to the member type. </exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary>Gets or sets the type of the member.</summary>
      <returns>The <see cref="T:System.Type" /> of the member.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeAttribute">
      <summary>Controls the XML schema that is generated when the attribute target is serialized by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> class and specifies the name of the XML type.</summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance). </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.AnonymousType">
      <summary>Gets or sets a value that determines whether the resulting schema type is an XSD anonymous type.</summary>
      <returns>true if the resulting schema type is an XSD anonymous type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.IncludeInSchema">
      <summary>Gets or sets a value that indicates whether to include the type in XML schema documents.</summary>
      <returns>true to include the type in XML schema documents; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.Namespace">
      <summary>Gets or sets the namespace of the XML type.</summary>
      <returns>The namespace of the XML type.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.TypeName">
      <summary>Gets or sets the name of the XML type.</summary>
      <returns>The name of the XML type.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Apr10\Bin\Microsoft.VisualStudio.QualityTools.UnitTesting.Silverlight.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>Microsoft.VisualStudio.QualityTools.UnitTesting.Silverlight</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>Microsoft.VisualStudio.QualityTools.UnitTesting.Silverlight.dll</relpath>
    <extension downloadUri="Microsoft.VisualStudio.QualityTools.UnitTesting.Silverlight.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Apr10\Bin\Microsoft.Silverlight.Testing.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>Microsoft.Silverlight.Testing</name>
    <version>2.0.5.0</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>Microsoft.Silverlight.Testing.dll</relpath>
    <extension downloadUri="Microsoft.Silverlight.Testing.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\SDK Help\en-US\License.rtf ===
{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff38\deff0\stshfdbch11\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033\themelang1033\themelangfe1041\themelangcs1025{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;} {\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\fbidi \froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f10\fbidi \fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;} {\f11\fbidi \fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f13\fbidi \fnil\fcharset134\fprq2{\*\panose 02010600030101010101}SimSun{\*\falt \'cb\'ce\'cc\'e5};} {\f34\fbidi \froman\fcharset1\fprq2{\*\panose 02040503050406030204}Cambria Math;}{\f37\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\f38\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;} {\f39\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0603020202020204}Trebuchet MS{\*\falt Arial};}{\f40\fbidi \fnil\fcharset134\fprq2{\*\panose 02010600030101010101}@SimSun;}{\f41\fbidi \fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}@MS Mincho;} {\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbmajor\f31501\fbidi \fmodern\fcharset128\fprq1{\*\panose 020b0609070205080204}MS Gothic{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};} {\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;} {\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbminor\f31505\fbidi \fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};} {\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\fbiminor\f31507\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}{\f42\fbidi \froman\fcharset238\fprq2 Times New Roman CE;} {\f43\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\f45\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f46\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f47\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);} {\f48\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f49\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f50\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f62\fbidi \fmodern\fcharset238\fprq1 Courier New CE;} {\f63\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}{\f65\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f66\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f67\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);} {\f68\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f69\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f70\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);} {\f154\fbidi \fmodern\fcharset0\fprq1 MS Mincho Western{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f152\fbidi \fmodern\fcharset238\fprq1 MS Mincho CE{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};} {\f153\fbidi \fmodern\fcharset204\fprq1 MS Mincho Cyr{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f155\fbidi \fmodern\fcharset161\fprq1 MS Mincho Greek{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};} {\f156\fbidi \fmodern\fcharset162\fprq1 MS Mincho Tur{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f159\fbidi \fmodern\fcharset186\fprq1 MS Mincho Baltic{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f412\fbidi \fswiss\fcharset238\fprq2 Calibri CE;} {\f413\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\f415\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\f416\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}{\f419\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;} {\f422\fbidi \fswiss\fcharset238\fprq2 Tahoma CE;}{\f423\fbidi \fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f425\fbidi \fswiss\fcharset161\fprq2 Tahoma Greek;}{\f426\fbidi \fswiss\fcharset162\fprq2 Tahoma Tur;} {\f427\fbidi \fswiss\fcharset177\fprq2 Tahoma (Hebrew);}{\f428\fbidi \fswiss\fcharset178\fprq2 Tahoma (Arabic);}{\f429\fbidi \fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f430\fbidi \fswiss\fcharset163\fprq2 Tahoma (Vietnamese);} {\f431\fbidi \fswiss\fcharset222\fprq2 Tahoma (Thai);}{\f432\fbidi \fswiss\fcharset238\fprq2 Trebuchet MS CE{\*\falt Arial};}{\f433\fbidi \fswiss\fcharset204\fprq2 Trebuchet MS Cyr{\*\falt Arial};} {\f435\fbidi \fswiss\fcharset161\fprq2 Trebuchet MS Greek{\*\falt Arial};}{\f436\fbidi \fswiss\fcharset162\fprq2 Trebuchet MS Tur{\*\falt Arial};}{\f439\fbidi \fswiss\fcharset186\fprq2 Trebuchet MS Baltic{\*\falt Arial};} {\f444\fbidi \fnil\fcharset0\fprq2 @SimSun Western;}{\f454\fbidi \fmodern\fcharset0\fprq1 @MS Mincho Western;}{\f452\fbidi \fmodern\fcharset238\fprq1 @MS Mincho CE;}{\f453\fbidi \fmodern\fcharset204\fprq1 @MS Mincho Cyr;} {\f455\fbidi \fmodern\fcharset161\fprq1 @MS Mincho Greek;}{\f456\fbidi \fmodern\fcharset162\fprq1 @MS Mincho Tur;}{\f459\fbidi \fmodern\fcharset186\fprq1 @MS Mincho Baltic;}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;} {\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;} {\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;} {\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31520\fbidi \fmodern\fcharset0\fprq1 MS Gothic Western{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};} {\fdbmajor\f31518\fbidi \fmodern\fcharset238\fprq1 MS Gothic CE{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};}{\fdbmajor\f31519\fbidi \fmodern\fcharset204\fprq1 MS Gothic Cyr{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};} {\fdbmajor\f31521\fbidi \fmodern\fcharset161\fprq1 MS Gothic Greek{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};}{\fdbmajor\f31522\fbidi \fmodern\fcharset162\fprq1 MS Gothic Tur{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};} {\fdbmajor\f31525\fbidi \fmodern\fcharset186\fprq1 MS Gothic Baltic{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};}{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;} {\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;} {\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;} {\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);} {\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;} {\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;} {\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;} {\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbminor\f31560\fbidi \fmodern\fcharset0\fprq1 MS Mincho Western{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};} {\fdbminor\f31558\fbidi \fmodern\fcharset238\fprq1 MS Mincho CE{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\fdbminor\f31559\fbidi \fmodern\fcharset204\fprq1 MS Mincho Cyr{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};} {\fdbminor\f31561\fbidi \fmodern\fcharset161\fprq1 MS Mincho Greek{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\fdbminor\f31562\fbidi \fmodern\fcharset162\fprq1 MS Mincho Tur{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};} {\fdbminor\f31565\fbidi \fmodern\fcharset186\fprq1 MS Mincho Baltic{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;} {\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fbiminor\f31578\fbidi \fswiss\fcharset238\fprq2 Arial CE;} {\fbiminor\f31579\fbidi \fswiss\fcharset204\fprq2 Arial Cyr;}{\fbiminor\f31581\fbidi \fswiss\fcharset161\fprq2 Arial Greek;}{\fbiminor\f31582\fbidi \fswiss\fcharset162\fprq2 Arial Tur;}{\fbiminor\f31583\fbidi \fswiss\fcharset177\fprq2 Arial (Hebrew);} {\fbiminor\f31584\fbidi \fswiss\fcharset178\fprq2 Arial (Arabic);}{\fbiminor\f31585\fbidi \fswiss\fcharset186\fprq2 Arial Baltic;}{\fbiminor\f31586\fbidi \fswiss\fcharset163\fprq2 Arial (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255; \red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0; \red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red31\green73\blue125;}{\*\defchp \fs22\dbch\af11 }{\*\defpap \ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 } \noqfpromote {\stylesheet{\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \snext0 \sautoupd \sqformat \spriority0 \styrsid4944216 Normal;}{\s1\ql \fi-357\li357\ri0\sb120\sa120\widctlpar\jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\adjustright\rin0\lin357\itap0 \rtlch\fcs1 \ab\af38\afs19\alang1025  \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext1 \slink15 \sqformat \styrsid4944216 heading 1;}{\s2\ql \fi-363\li720\ri0\sb120\sa120\widctlpar \jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl1\outlinelevel1\adjustright\rin0\lin720\itap0 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext2 \slink16 \sqformat \styrsid4944216 heading 2;}{\s3\ql \fi-357\li1077\ri0\sb120\sa120\widctlpar\tx1077\jclisttab\tx1440\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl2\outlinelevel2\adjustright\rin0\lin1077\itap0 \rtlch\fcs1  \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext3 \slink17 \sqformat \styrsid4944216 heading 3;}{\s4\ql \fi-358\li1435\ri0\sb120\sa120\widctlpar \jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl3\outlinelevel3\adjustright\rin0\lin1435\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext4 \slink18 \sqformat \styrsid4944216 heading 4;}{\s5\ql \fi-357\li1792\ri0\sb120\sa120\widctlpar\tx1792\jclisttab\tx2155\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl4\outlinelevel4\adjustright\rin0\lin1792\itap0 \rtlch\fcs1  \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext5 \slink19 \sqformat \styrsid4944216 heading 5;}{\s6\ql \fi-357\li2149\ri0\sb120\sa120\widctlpar \jclisttab\tx2152\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl5\outlinelevel5\adjustright\rin0\lin2149\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext6 \slink20 \sqformat \styrsid4944216 heading 6;}{\s7\ql \fi-357\li2506\ri0\sb120\sa120\widctlpar\jclisttab\tx2509\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl6\outlinelevel6\adjustright\rin0\lin2506\itap0 \rtlch\fcs1  \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext7 \slink21 \sqformat \styrsid4944216 heading 7;}{\s8\ql \fi-357\li2863\ri0\sb120\sa120\widctlpar \jclisttab\tx2866\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl7\outlinelevel7\adjustright\rin0\lin2863\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext8 \slink22 \sqformat \styrsid4944216 heading 8;}{\s9\ql \fi-358\li3221\ri0\sb120\sa120\widctlpar\jclisttab\tx3223\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl8\outlinelevel8\adjustright\rin0\lin3221\itap0 \rtlch\fcs1  \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext9 \slink23 \sqformat \styrsid4944216 heading 9;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1  Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv  \ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f0\hich\af0\dbch\af11\cgrid\langnp1033\langfenp1033  \snext11 \ssemihidden \sunhideused \sqformat Normal Table;}{\*\cs15 \additive \rtlch\fcs1 \ab\af38\afs19 \ltrch\fcs0 \b\f38\fs19 \sbasedon10 \slink1 \slocked \styrsid4944216 Heading 1 Char;}{\*\cs16 \additive \rtlch\fcs1 \ab\af38\afs19 \ltrch\fcs0  \b\f38\fs19 \sbasedon10 \slink2 \slocked \styrsid4944216 Heading 2 Char;}{\*\cs17 \additive \rtlch\fcs1 \af38\afs19 \ltrch\fcs0 \f38\fs19 \sbasedon10 \slink3 \slocked \styrsid4944216 Heading 3 Char;}{\*\cs18 \additive \rtlch\fcs1 \af38\afs19 \ltrch\fcs0  \f38\fs19 \sbasedon10 \slink4 \slocked \styrsid4944216 Heading 4 Char;}{\*\cs19 \additive \rtlch\fcs1 \af38\afs19 \ltrch\fcs0 \f38\fs19 \sbasedon10 \slink5 \slocked \styrsid4944216 Heading 5 Char;}{\*\cs20 \additive \rtlch\fcs1 \af38\afs19 \ltrch\fcs0  \f38\fs19 \sbasedon10 \slink6 \slocked \styrsid4944216 Heading 6 Char;}{\*\cs21 \additive \rtlch\fcs1 \af38\afs19 \ltrch\fcs0 \f38\fs19 \sbasedon10 \slink7 \slocked \styrsid4944216 Heading 7 Char;}{\*\cs22 \additive \rtlch\fcs1 \af38\afs19 \ltrch\fcs0  \f38\fs19 \sbasedon10 \slink8 \slocked \styrsid4944216 Heading 8 Char;}{\*\cs23 \additive \rtlch\fcs1 \af38\afs19 \ltrch\fcs0 \f38\fs19 \sbasedon10 \slink9 \slocked \styrsid4944216 Heading 9 Char;}{ \s24\ql \li357\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin357\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext24 \styrsid4944216 Body 1;}{\s25\ql \li720\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext25 \styrsid4944216 Body 2;}{\s26\ql \li1077\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin1077\itap0 \rtlch\fcs1  \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext26 \styrsid4944216 Body 3;}{ \s27\ql \li1435\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin1435\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext27 \styrsid4944216 Body 4;}{\s28\ql \li1803\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin1803\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext28 \styrsid4944216 Body 5;}{\s29\ql \li2160\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin2160\itap0 \rtlch\fcs1  \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext29 \styrsid4944216 Body 6;}{ \s30\ql \li2506\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin2506\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext30 \styrsid4944216 Body 7;}{\s31\ql \li2863\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin2863\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext31 \styrsid4944216 Body 8;}{\s32\ql \li3221\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin3221\itap0 \rtlch\fcs1  \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext32 \styrsid4944216 Body 9;}{\s33\ql \fi-357\li357\ri0\sb120\sa120\widctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin357\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext33 \styrsid4944216  Bullet 1;}{\s34\ql \fi-363\li720\ri0\sb120\sa120\widctlpar\jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls2\adjustright\rin0\lin720\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext34 \styrsid4944216 Bullet 2;}{\s35\ql \fi-357\li1077\ri0\sb120\sa120\widctlpar \jclisttab\tx1080\wrapdefault\aspalpha\aspnum\faauto\ls3\adjustright\rin0\lin1077\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext35 \styrsid4944216  Bullet 3;}{\s36\ql \fi-358\li1435\ri0\sb120\sa120\widctlpar\jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls4\adjustright\rin0\lin1435\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext36 \styrsid4944216 Bullet 4;}{\s37\ql \fi-357\li1792\ri0\sb120\sa120\widctlpar \jclisttab\tx1795\wrapdefault\aspalpha\aspnum\faauto\ls5\adjustright\rin0\lin1792\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext37 \styrsid4944216  Bullet 5;}{\s38\ql \fi-357\li2149\ri0\sb120\sa120\widctlpar\jclisttab\tx2152\wrapdefault\aspalpha\aspnum\faauto\ls6\adjustright\rin0\lin2149\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext38 \styrsid4944216 Bullet 6;}{\s39\ql \fi-357\li2506\ri0\sb120\sa120\widctlpar \jclisttab\tx2509\wrapdefault\aspalpha\aspnum\faauto\ls7\adjustright\rin0\lin2506\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext39 \styrsid4944216  Bullet 7;}{\s40\ql \fi-357\li2863\ri0\sb120\sa120\widctlpar\jclisttab\tx2866\wrapdefault\aspalpha\aspnum\faauto\ls8\adjustright\rin0\lin2863\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext40 \styrsid4944216 Bullet 8;}{\s41\ql \fi-358\li3221\ri0\sb120\sa120\widctlpar \jclisttab\tx3223\wrapdefault\aspalpha\aspnum\faauto\ls9\adjustright\rin0\lin3221\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon32 \snext41 \styrsid4944216 Bullet 9;}{\s42\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af38\afs28\alang1025 \ltrch\fcs0  \b\fs28\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \styrsid4944216 Heading EULA;}{\s43\ql \li0\ri0\sb120\sa120\widctlpar\brdrb\brdrs\brdrw10\brsp20  \wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af38\afs28\alang1025 \ltrch\fcs0 \b\fs28\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \styrsid4944216  Heading Software Title;}{\s44\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext44 \styrsid4944216 Preamble;}{\s45\ql \li0\ri0\sb120\sa120\widctlpar\brdrb\brdrs\brdrw10\brsp20  \wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext1 \styrsid4944216 Preamble Border;}{ \s46\qc \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext46 \styrsid4944216 Heading Warranty;}{\s47\ql \fi-360\li360\ri0\sb120\sa120\widctlpar\jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls11\outlinelevel0\adjustright\rin0\lin360\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \styrsid4944216 Heading 1 Warranty;}{\s48\ql \fi-360\li720\ri0\sb120\sa120\widctlpar \jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls11\ilvl1\outlinelevel1\adjustright\rin0\lin720\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext0 \styrsid4944216 Heading 2 Warranty;}{\s49\ql \fi-357\li1077\ri0\sb120\sa120\widctlpar\tx1077\jclisttab\tx1440\wrapdefault\aspalpha\aspnum\faauto\ls10\ilvl2\outlinelevel2\adjustright\rin0\lin1077\itap0 \rtlch\fcs1  \ab\af38\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon3 \snext49 \styrsid4944216 Heading 3 Bold;}{\s50\ql \fi-358\li1435\ri0\sb120\sa120\widctlpar \jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls4\adjustright\rin0\lin1435\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\ul\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon36 \snext50 \styrsid4944216 Bullet 4 Underline;}{\s51\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\ul\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon35 \snext51 \styrsid4944216 Bullet 3 Underline;}{\s52\ql \li720\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0  \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\ul\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon25 \snext52 \styrsid4944216 Body 2 Underline;}{ \s53\ql \li1077\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin1077\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\ul\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon26 \snext53 \styrsid4944216 Body 3 Underline;}{\s54\ql \li0\ri0\sb120\sa120\sl480\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext54 \slink55 \styrsid4944216 Body Text 2;}{\*\cs55 \additive \rtlch\fcs1 \af38\afs19 \ltrch\fcs0 \f38\fs19  \sbasedon10 \slink54 \slocked \ssemihidden \styrsid4944216 Body Text 2 Char;}{\s56\ql \fi-358\li1435\ri0\sb120\sa120\widctlpar\jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls4\adjustright\rin0\lin1435\itap0 \rtlch\fcs1 \ai\af38\afs19\alang1025  \ltrch\fcs0 \i\fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon36 \snext56 \styrsid4944216 Bullet 4 Italics;}{\*\cs57 \additive \rtlch\fcs1 \af38 \ltrch\fcs0 \f38\lang1033\langfe1033\langnp1033\langfenp1033  \sbasedon10 \slocked \styrsid4944216 Body 2 Char;}{\*\cs58 \additive \rtlch\fcs1 \af38 \ltrch\fcs0 \f38\lang1033\langfe1033\langnp1033\langfenp1033 \sbasedon10 \slocked \styrsid4944216 Body 3 Char;}{\*\cs59 \additive \rtlch\fcs1 \af38 \ltrch\fcs0  \f38\lang1033\langfe1033\langnp1033\langfenp1033 \sbasedon10 \slocked \styrsid4944216 Body 4 Char;}{\*\cs60 \additive \rtlch\fcs1 \af38 \ltrch\fcs0 \f38\lang1033\langfe1033\langnp1033\langfenp1033 \sbasedon10 \slocked \styrsid4944216 Body 1 Char;}{ \s61\ql \li0\ri0\sb120\sa120\widctlpar\brdrt\brdrs\brdrw10\brsp20 \wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon44 \snext61 \styrsid4944216 Preamble Border Above;}{\s62\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0  \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext62 \slink63 \ssemihidden \styrsid4944216 footnote text;}{\*\cs63 \additive \rtlch\fcs1 \af38\afs20  \ltrch\fcs0 \f38\fs20 \sbasedon10 \slink62 \slocked \ssemihidden \styrsid4944216 Footnote Text Char;}{\*\cs64 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \super \sbasedon10 \ssemihidden \styrsid4944216 footnote reference;}{ \s65\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext65 \slink66 \ssemihidden \styrsid4944216 endnote text;}{\*\cs66 \additive \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \f38\fs20 \sbasedon10 \slink65 \slocked \ssemihidden \styrsid4944216 Endnote Text Char;}{\*\cs67 \additive \rtlch\fcs1 \af0  \ltrch\fcs0 \super \sbasedon10 \ssemihidden \styrsid4944216 endnote reference;}{\s68\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext68 \slink69 \ssemihidden \styrsid4944216 annotation text;}{\*\cs69 \additive \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \f38\fs20  \sbasedon10 \slink68 \slocked \ssemihidden \styrsid4944216 Comment Text Char;}{\*\cs70 \additive \rtlch\fcs1 \af0\afs16 \ltrch\fcs0 \fs16 \sbasedon10 \ssemihidden \styrsid4944216 annotation reference;}{\s71\ql \li0\ri0\sa160\sl-240\slmult0 \widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext71 \styrsid4944216 Char;}{ \s72\ql \li0\ri0\sa160\sl-240\slmult0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon0 \snext72 \styrsid4944216 Char Char Char Char;}{\*\cs73 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \ul\cf2 \sbasedon10 \styrsid4944216 Hyperlink;}{\s74\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0  \rtlch\fcs1 \af38\afs16\alang1025 \ltrch\fcs0 \fs16\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext74 \slink75 \ssemihidden \styrsid4944216 Balloon Text;}{\*\cs75 \additive \rtlch\fcs1 \af38\afs16  \ltrch\fcs0 \f38\fs16 \sbasedon10 \slink74 \slocked \ssemihidden \styrsid4944216 Balloon Text Char;}{\*\cs76 \additive \rtlch\fcs1 \ab\af39 \ltrch\fcs0 \b\f39\lang1033\langfe1033\langnp1033\langfenp1033 \sbasedon10 \styrsid4944216 Heading 2 Char1;}{\* \cs77 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \sbasedon10 \styrsid4944216 page number;}{\s78\ql \li0\ri0\sa160\sl-240\slmult0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext78 \styrsid4944216 Char Char Char Char1;}{\s79\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1  \ab\af38\afs19\alang1025 \ltrch\fcs0 \b\fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \snext0 \styrsid8999754 Body 0 Bold;}{\s80\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0  \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \snext0 \styrsid8999754 Body 0;}{ \s81\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af38\afs20\alang1025 \ltrch\fcs0 \b\fs20\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033  \sbasedon68 \snext68 \slink82 \ssemihidden \styrsid12090718 annotation subject;}{\*\cs82 \additive \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\f38\fs20 \sbasedon69 \slink81 \slocked \ssemihidden \styrsid12090718 Comment Subject Char;}{\*\cs83 \additive  \rtlch\fcs1 \af0 \ltrch\fcs0 \ul\cf12 \sbasedon10 \ssemihidden \styrsid11033338 FollowedHyperlink;}{\s84\ql \li0\ri0\widctlpar\tqc\tx4680\tqr\tx9360\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025  \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext84 \slink85 \ssemihidden \styrsid5664413 header;}{\*\cs85 \additive \rtlch\fcs1 \af38\afs19 \ltrch\fcs0 \f38\fs19  \sbasedon10 \slink84 \slocked \ssemihidden \styrsid5664413 Header Char;}{\s86\ql \li0\ri0\widctlpar\tqc\tx4680\tqr\tx9360\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\f38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext86 \slink87 \ssemihidden \styrsid5664413 footer;}{\*\cs87 \additive \rtlch\fcs1 \af38\afs19 \ltrch\fcs0 \f38\fs19  \sbasedon10 \slink86 \slocked \ssemihidden \styrsid5664413 Footer Char;}{\s88\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0  \fs22\cf17\lang1033\langfe1033\loch\f37\hich\af37\dbch\af11\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext88 \slink89 \slocked \styrsid1867609 Plain Text;}{\*\cs89 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \f37\cf17  \sbasedon10 \slink88 \slocked \styrsid1867609 Plain Text Char;}}{\*\listtable{\list\listtemplateid176468498\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \leveltemplateid692200086\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \s41\fi-358\li3221\jclisttab\tx3223\lin3221 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693 \'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689 \'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691 \'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693 \'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689 \'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691 \'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693 \'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid196815738}{\list\listtemplateid-1793664660{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af0 \ltrch\fcs0 \b\i0\fbias0\hres0\chhres0 \s47\fi-360\li360\jclisttab\tx360\lin360 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af0 \ltrch\fcs0 \b\i0\fbias0\hres0\chhres0 \s48\fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\'02\'02);}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fbias0\hres0\chhres0 \fi-360\li1080\jclisttab\tx1080\lin1080 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\'03(\'03);}{\levelnumbers\'02;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fbias0\hres0\chhres0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'03(\'04);}{\levelnumbers\'02;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fbias0\hres0\chhres0 \fi-360\li1800\jclisttab\tx1800\lin1800 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'03(\'05);}{\levelnumbers\'02;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fbias0\hres0\chhres0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fbias0\hres0\chhres0 \fi-360\li2520\jclisttab\tx2520\lin2520 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fbias0\hres0\chhres0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \fbias0\hres0\chhres0 \fi-360\li3240\jclisttab\tx3240\lin3240 }{\listname ;}\listid394402059}{\list\listtemplateid1928476992{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af39\afs20 \ltrch\fcs0 \b\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li357\jclisttab\tx360\lin357 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af39\afs20 \ltrch\fcs0 \b\i0\f39\fs20\fbias0\hres0\chhres0 \fi-363\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'02.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af38\afs20 \ltrch\fcs0 \b\i0\f38\fs20\fbias0\hres0\chhres0 \s49\fi-357\li1077\jclisttab\tx1440\lin1077 }{\listlevel\levelnfc3 \levelnfcn3\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'03.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\strike0\f39\fs20\ulnone\fbias0\hres0\chhres0 \fi-358\li1435 \jclisttab\tx1437\lin1435 }{\listlevel\levelnfc1\levelnfcn1\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0  \b0\i0\strike0\f39\fs20\ulnone\fbias0\hres0\chhres0 \fi-357\li1792\jclisttab\tx2155\lin1792 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1  \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li2149\jclisttab\tx2152\lin2149 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;} \rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li2506\jclisttab\tx2509\lin2506 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02i.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li2863\jclisttab\tx2866\lin2863 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\'02A.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-358\li3221\jclisttab\tx3223\lin3221 }{\listname ;}\listid398796681}{\list\listtemplateid789093748\listhybrid{\listlevel\levelnfc23 \levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid-317712510\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \s34\fi-363\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc23\levelnfcn23 \leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1 \levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693 \'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid477573462}{\list\listtemplateid1948578256{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af39\afs20 \ltrch\fcs0 \b\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li357\jclisttab\tx360\lin357 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1 \levelspace0\levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af0\afs20 \ltrch\fcs0 \b\i0\fs20\fbias0\hres0\chhres0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02\'02.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li1077\jclisttab\tx1440\lin1077 }{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'03.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\strike0\f39\fs20\ulnone\fbias0\hres0\chhres0 \fi-358\li1435\jclisttab\tx1437\lin1435 }{\listlevel\levelnfc1 \levelnfcn1\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\strike0\f39\fs20\ulnone\fbias0\hres0\chhres0 \fi-357\li1792 \jclisttab\tx2155\lin1792 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0  \fi-357\li2149\jclisttab\tx2152\lin2149 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0  \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li2506\jclisttab\tx2509\lin2506 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02i.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af39\afs20  \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li2863\jclisttab\tx2866\lin2863 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02A.;}{\levelnumbers;}\rtlch\fcs1  \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-358\li3221\jclisttab\tx3223\lin3221 }{\listname ;}\listid630479929}{\list\listtemplateid67698717{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1 \levelspace0\levelindent0{\leveltext\'02\'00);}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li360\jclisttab\tx360\lin360 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\'02\'01);}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'02);}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li1080\jclisttab\tx1080\lin1080 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'03(\'03);}{\levelnumbers\'02;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'03(\'04);}{\levelnumbers\'02;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li1800\jclisttab\tx1800\lin1800 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'03(\'05);}{\levelnumbers\'02;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li2520\jclisttab\tx2520\lin2520 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'07.;}{\levelnumbers \'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'08.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0  \ltrch\fcs0 \hres0\chhres0 \fi-360\li3240\jclisttab\tx3240\lin3240 }{\listname ;}\listid700712945}{\list\listtemplateid466640452{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af38\afs20 \ltrch\fcs0 \b\i0\f38\fs20\fbias0\hres0\chhres0 \s1\fi-357\li357\jclisttab\tx360\lin357 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af38\afs20 \ltrch\fcs0 \b\i0\f38\fs20\fbias0\hres0\chhres0 \s2\fi-363\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\'02\'02.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af38\afs20 \ltrch\fcs0 \b\i0\f38\fs20\fbias0\hres0\chhres0 \s3\fi-357\li1077\jclisttab\tx1440\lin1077 }{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02\'03.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\strike0\f39\fs20\ulnone\fbias0\hres0\chhres0 \s4\fi-358\li1435\jclisttab\tx1437\lin1435 }{\listlevel\levelnfc1\levelnfcn1 \leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\strike0\f39\fs20\ulnone\fbias0\hres0\chhres0 \s5\fi-357\li1792\jclisttab\tx2155\lin1792 } {\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \s6\fi-357\li2149 \jclisttab\tx2152\lin2149 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0  \s7\fi-357\li2506\jclisttab\tx2509\lin2506 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02i.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0  \b0\i0\f39\fs20\fbias0\hres0\chhres0 \s8\fi-357\li2863\jclisttab\tx2866\lin2863 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02A.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af39\afs20  \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \s9\fi-358\li3221\jclisttab\tx3223\lin3221 }{\listname ;}\listid752163927}{\list\listtemplateid2088029282{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af39\afs20 \ltrch\fcs0 \b\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li357\jclisttab\tx360\lin357 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1 \levelspace0\levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af39\afs20 \ltrch\fcs0 \b\i0\f39\fs20\fbias0\hres0\chhres0 \fi-363\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02\'02.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af38\afs20 \ltrch\fcs0 \b\i0\f38\fs20\fbias0\hres0\chhres0 \fi-357\li1077\jclisttab\tx1440\lin1077 }{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'03.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\strike0\f39\fs20\ulnone\fbias0\hres0\chhres0 \fi-358\li1435\jclisttab\tx1437\lin1435 }{\listlevel\levelnfc1 \levelnfcn1\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\strike0\f39\fs20\ulnone\fbias0\hres0\chhres0 \fi-357\li1792 \jclisttab\tx2155\lin1792 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0  \fi-357\li2149\jclisttab\tx2152\lin2149 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0  \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li2506\jclisttab\tx2509\lin2506 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02i.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af39\afs20  \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li2863\jclisttab\tx2866\lin2863 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02A.;}{\levelnumbers;}\rtlch\fcs1  \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-358\li3221\jclisttab\tx3223\lin3221 }{\listname ;}\listid800729109}{\list\listtemplateid-296591990\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid-48305026\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \s40\fi-357\li2863\jclisttab\tx2866\lin2863 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0 {\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693 \'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689 \'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691 \'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693 \'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid810947713}{\list\listtemplateid1567531878{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af39\afs20 \ltrch\fcs0 \b\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li357\jclisttab\tx360\lin357 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1 \levelspace0\levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af39\afs20 \ltrch\fcs0 \b\i0\f39\fs20\fbias0\hres0\chhres0 \fi-363\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02\'02.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li1077\jclisttab\tx1440\lin1077 }{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'03.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\strike0\f39\fs20\ulnone\fbias0\hres0\chhres0 \fi-358\li1435\jclisttab\tx1437\lin1435 }{\listlevel\levelnfc1 \levelnfcn1\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\strike0\f39\fs20\ulnone\fbias0\hres0\chhres0 \fi-357\li1792 \jclisttab\tx2155\lin1792 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0  \fi-357\li2149\jclisttab\tx2152\lin2149 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0  \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li2506\jclisttab\tx2509\lin2506 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02i.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af39\afs20  \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li2863\jclisttab\tx2866\lin2863 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02A.;}{\levelnumbers;}\rtlch\fcs1  \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-358\li3221\jclisttab\tx3223\lin3221 }{\listname ;}\listid826823576}{\list\listtemplateid-529391892\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid1843529426\'01\u-3913 ?;}{\levelnumbers;}\loch\af3\hich\af3\dbch\af0\fbias0\hres0\chhres0 \fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'02\'02.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'02\'03.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'02\'04.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'02\'07.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'02\'08.;}{\levelnumbers\'01;}\rtlch\fcs1 \af0 \ltrch\fcs0 \hres0\chhres0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid919675952}{\list\listtemplateid2088029282 {\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af39\afs20 \ltrch\fcs0 \b\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li357 \jclisttab\tx360\lin357 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af39\afs20 \ltrch\fcs0 \b\i0\f39\fs20\fbias0\hres0\chhres0  \fi-363\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc2\levelnfcn2\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'02.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab\ai0\af38\afs20 \ltrch\fcs0  \b\i0\f38\fs20\fbias0\hres0\chhres0 \fi-357\li1077\jclisttab\tx1440\lin1077 }{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'03.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20  \ltrch\fcs0 \b0\i0\strike0\f39\fs20\ulnone\fbias0\hres0\chhres0 \fi-358\li1435\jclisttab\tx1437\lin1435 }{\listlevel\levelnfc1\levelnfcn1\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;} \rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\strike0\f39\fs20\ulnone\fbias0\hres0\chhres0 \fi-357\li1792\jclisttab\tx2155\lin1792 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li2149\jclisttab\tx2152\lin2149 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0 \levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li2506\jclisttab\tx2509\lin2506 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0 \levelstartat1\levelspace0\levelindent0{\leveltext\'02i.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-357\li2863\jclisttab\tx2866\lin2863 }{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0 \levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02A.;}{\levelnumbers;}\rtlch\fcs1 \ab0\ai0\af39\afs20 \ltrch\fcs0 \b0\i0\f39\fs20\fbias0\hres0\chhres0 \fi-358\li3221\jclisttab\tx3223\lin3221 }{\listname ;}\listid974869818} {\list\listtemplateid-1813845996\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid2033377338\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \s39 \fi-357\li2506\jclisttab\tx2509\lin2506 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li1440 \jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li2160 \jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li2880 \jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li3600\jclisttab\tx3600\lin3600  }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel \levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23 \levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1219436735} {\list\listtemplateid-41362566\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid-1175557160\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \s36 \fi-358\li1435\jclisttab\tx1437\lin1435 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li1440 \jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li2160 \jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li2880 \jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li3600\jclisttab\tx3600\lin3600  }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel \levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23 \levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1559511898} {\list\listtemplateid-743794326\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid1229593488\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \s35 \fi-357\li1077\jclisttab\tx1080\lin1077 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li1440 \jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li2160 \jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li2880 \jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li3600\jclisttab\tx3600\lin3600  }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel \levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23 \levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1567649130} {\list\listtemplateid1363474438\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid1637229796\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \s37 \fi-357\li1792\jclisttab\tx1795\lin1792 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li1440 \jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li2160 \jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li2880 \jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li3600\jclisttab\tx3600\lin3600  }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel \levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23 \levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1848404271} {\list\listtemplateid-1802592190\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid961321180\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \s38 \fi-357\li2149\jclisttab\tx2152\lin2149 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li1440 \jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li2160 \jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li2880 \jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li3600\jclisttab\tx3600\lin3600  }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel \levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23 \levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1877695764} {\list\listtemplateid1186249844\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid1182702444\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \s33 \fi-357\li357\jclisttab\tx360\lin357 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li1440 \jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li2160 \jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li2880 \jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li3600\jclisttab\tx3600\lin3600  }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel \levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0\hres0\chhres0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23 \levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0\hres0\chhres0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0 \leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0\hres0\chhres0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid2054619191}}{\*\listoverridetable {\listoverride\listid2054619191\listoverridecount0\ls1}{\listoverride\listid477573462\listoverridecount0\ls2}{\listoverride\listid1567649130\listoverridecount0\ls3}{\listoverride\listid1559511898\listoverridecount0\ls4}{\listoverride\listid1848404271 \listoverridecount0\ls5}{\listoverride\listid1877695764\listoverridecount0\ls6}{\listoverride\listid1219436735\listoverridecount0\ls7}{\listoverride\listid810947713\listoverridecount0\ls8}{\listoverride\listid196815738\listoverridecount0\ls9} {\listoverride\listid398796681\listoverridecount0\ls10}{\listoverride\listid394402059\listoverridecount0\ls11}{\listoverride\listid700712945\listoverridecount0\ls12}{\listoverride\listid826823576\listoverridecount0\ls13}{\listoverride\listid630479929 \listoverridecount0\ls14}{\listoverride\listid800729109\listoverridecount0\ls15}{\listoverride\listid974869818\listoverridecount0\ls16}{\listoverride\listid752163927\listoverridecount0\ls17}{\listoverride\listid477573462\listoverridecount0\ls18} {\listoverride\listid919675952\listoverridecount9{\lfolevel\listoverridestartat\levelstartat0}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel \listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}\ls19}{\listoverride\listid398796681 \listoverridecount0\ls20}{\listoverride\listid398796681\listoverridecount0\ls21}}{\*\pgptbl {\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}}{\*\rsidtbl \rsid4949\rsid17701\rsid200055\rsid269534\rsid345491\rsid480810\rsid490471 \rsid535495\rsid555183\rsid686833\rsid750469\rsid787759\rsid803676\rsid986187\rsid997716\rsid997752\rsid1012355\rsid1070219\rsid1122066\rsid1263361\rsid1264931\rsid1391079\rsid1526994\rsid1528414\rsid1574943\rsid1845488\rsid1867609\rsid1901037\rsid1928288 \rsid2177547\rsid2242324\rsid2382561\rsid2491531\rsid2517422\rsid2634016\rsid2648264\rsid2760050\rsid2784514\rsid3042060\rsid3159161\rsid3162620\rsid3361111\rsid3370445\rsid3416253\rsid3549588\rsid3553829\rsid3605935\rsid3611186\rsid3615048\rsid3623337 \rsid3625235\rsid3739474\rsid3760629\rsid3869235\rsid3887918\rsid4022155\rsid4066572\rsid4074524\rsid4543067\rsid4676768\rsid4724299\rsid4739523\rsid4858179\rsid4865423\rsid4872515\rsid4933881\rsid4938624\rsid4944216\rsid4995346\rsid4995972\rsid5177946 \rsid5180462\rsid5185544\rsid5251506\rsid5440694\rsid5459775\rsid5596195\rsid5649096\rsid5664413\rsid5707678\rsid5906922\rsid5918861\rsid5921029\rsid6102415\rsid6184270\rsid6447867\rsid6498245\rsid6758513\rsid6965769\rsid7226971\rsid7237359\rsid7290457 \rsid7345747\rsid7433926\rsid7438204\rsid7559903\rsid7603843\rsid7619174\rsid7692510\rsid7824598\rsid7878867\rsid8066538\rsid8068251\rsid8070290\rsid8070493\rsid8078242\rsid8078293\rsid8324055\rsid8325040\rsid8331822\rsid8391033\rsid8419363\rsid8458805 \rsid8460618\rsid8461019\rsid8535117\rsid8679684\rsid8738620\rsid8799806\rsid8812012\rsid8858237\rsid8999754\rsid9046274\rsid9129020\rsid9321702\rsid9577134\rsid9651656\rsid9766000\rsid9831002\rsid9836815\rsid9857610\rsid9860938\rsid9964378\rsid10050265 \rsid10106136\rsid10124158\rsid10163881\rsid10254862\rsid10707597\rsid10753283\rsid10813938\rsid10832655\rsid10833491\rsid10898191\rsid11033338\rsid11142543\rsid11298745\rsid11347136\rsid11544162\rsid11621510\rsid11754382\rsid11874088\rsid11955386 \rsid12000701\rsid12090718\rsid12276848\rsid12585274\rsid12596065\rsid12664082\rsid12669038\rsid12678880\rsid12858202\rsid12914755\rsid13108781\rsid13173401\rsid13174101\rsid13334496\rsid13393456\rsid13569148\rsid13655640\rsid13657657\rsid13908819 \rsid13922080\rsid14028737\rsid14114191\rsid14167537\rsid14168694\rsid14228190\rsid14235961\rsid14293847\rsid14359779\rsid14363573\rsid14491415\rsid14494636\rsid14498429\rsid14617721\rsid14640689\rsid14705568\rsid14767805\rsid14771509\rsid14826354 \rsid14894057\rsid14897950\rsid14943232\rsid14962117\rsid15366221\rsid15404297\rsid15493712\rsid15601712\rsid15680505\rsid15744953\rsid15754718\rsid15872081\rsid15925451\rsid15939916\rsid16023467\rsid16082277\rsid16141742\rsid16257942\rsid16395859 \rsid16450365\rsid16471711\rsid16596357\rsid16606077\rsid16661796\rsid16666345\rsid16712132\rsid16729739}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info {\creatim\yr2010\mo3\dy17\hr15\min5}{\revtim\yr2010\mo3\dy17\hr15\min5}{\version1}{\edmins0}{\nofpages3}{\nofwords1283}{\nofchars6571}{\nofcharsws7839}{\vern32771}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}} \paperw12240\paperh15840\margl720\margr720\margt720\margb720\gutter0\ltrsect  \widowctrl\ftnbj\aenddoc\trackmoves1\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\noxlattoyen \expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dgmargin\dghspace95\dgvspace180\dghorigin720\dgvorigin720\dghshow2\dgvshow1 \jexpand\viewkind1\viewscale193\viewzk2\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\rempersonalinfo \allowfieldendsel\wrppunct\asianbrkrule\rsidroot10813938\newtblstyruls\nogrowautofit\viewbksp1\remdttm\usenormstyforlist\noindnmbrts\felnbrelev\nocxsptable\indrlsweleven\noafcnsttbl\afelev\utinl\hwelev \spltpgpar\notcvasp\notbrkcnstfrctbl\notvatxbx\krnprsnet\cachedcolbal \nouicompat \fet0{\*\wgrffmtfilter 013f}\nofeaturethrottle1\ilfomacatclnup0 {\*\docvar {db_xml}{<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>\'0d<!DOCTYPE Document SYSTEM "..\'5cDocument.DTD">\'0d<Document><Control NAME="db_base_url" TYPE="string"><Value>http://usetermassembly/dealbuilder_live/DealBuilderNET/dealbuilder.aspx</Value></Control><C ontrol NAME="db_folder_form" TYPE="string"><Value>microsoft</Value></Control><Control NAME="db_folder_stylesheet" TYPE="string"><Value>microsoft</Value></Control><Control NAME="db_folder_image" TYPE="string"><Value>microsoft</Value></Control><Control NAME ="db_charger_dataset_reference" TYPE="numeric"><Value>16646</Value></Control><Control NAME="db_charger_client_name" TYPE="string"><Value>tbc</Value></Control><Control NAME="db_charger_matter_number" TYPE="string"><Value>tbc</Value></Control><Control NAME= "db_master_reference" TYPE="string"><Value>USETERMS_OTHERSUPER_ENGLISH</Value></Control><Control NAME="db_master_publish_build" TYPE="string"><Value>2.6</Value></Control><Control NAME="db_master_name" TYPE="string"><Value>List of Beta, Evaluation or Stand alone Software License Terms Languages</Value></Control><Control NAME="db_master_description" TYPE="string"><Value> </Value></Control><Control NAME="db_master_version" TYPE="string"><Value>20060329</Value></Control><Control NAME="db_master_clock" TYPE="nu meric"><Value>559</Value></Control><Control NAME="db_master_refresh" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_host_create_onload" TYPE="string"><Value></Value></Control><Control NAME="db_host_input_onload" TYPE="string"><Value></Value ></Control><Control NAME="db_host_output_onload" TYPE="string"><Value></Value></Control><Control NAME="db_host_exception_onload" TYPE="string"><Value></Value></Control><Control NAME="db_host_javascript" TYPE="string"><Value></Value></Control><Control NAME ="db_transaction_generator" TYPE="string"><Value>unique</Value></Control><Control NAME="db_transaction_prefix" TYPE="string"><Value></Value></Control><Control NAME="db_transaction_suffix" TYPE="string"><Value></Value></Control><Control NAME="db_evaluate"  TYPE="boolean"><Value>true</Value></Control><Control NAME="db_evaluate_logic" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_evaluate_repeat" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_evaluate_cross_reference" TYPE="bool ean"><Value>true</Value></Control><Control NAME="db_evaluate_calculation" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_evaluate_variable" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_evaluate_include" TYPE="boolean"><Valu e>true</Value></Control><Control NAME="db_codeload_include" TYPE="string"><Value>lazy</Value></Control><Control NAME="db_locale_input_date_sequence" TYPE="string"><Value>day_month_year</Value></Control><Control NAME="db_locale_input_thousands_char" TYPE=" string"><Value>,</Value></Control><Control NAME="db_locale_input_decimalpoint_char" TYPE="string"><Value>.</Value></Control><Control NAME="db_locale_output_date_sequence" TYPE="string"><Value>day_month_year</Value></Control><Control NAME="db_locale_output _thousands_char" TYPE="string"><Value>,</Value></Control><Control NAME="db_locale_output_decimalpoint_char" TYPE="string"><Value>.</Value></Control><Control NAME="db_output_hyperlink_target" TYPE="string"><Value>_blank</Value></Control><Control NAME="db_o utput_document_format" TYPE="string"><Value>rtf</Value></Control><Control NAME="db_output_document_redline" TYPE="boolean"><Value>false</Value></Control><Control NAME="db_output_document_redline_cause" TYPE="string"><Value>drafting</Value></Control><Contr ol NAME="db_output_document_drafting_notes" TYPE="string"><Value>indefinite</Value></Control><Control NAME="db_output_document_properties" TYPE="string"><Value>true</Value></Control><Control NAME="db_output_document_property" TYPE="string"><Value>autosave |text|false</Value><Value>owner|text|REDMOND\'5cirisl</Value></Control><Control NAME="db_output_document_variable_xml" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_output_document_termsheet" TYPE="boolean"><Value>false</Value></Control><Cont rol NAME="db_output_document_answers" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_output_document_answers_column" TYPE="string"><Value>prompt</Value><Value>value</Value></Control><Control NAME="db_output_document_answers_row" TYPE="strin g"><Value>page</Value><Value>group</Value><Value>sure</Value><Value>unsure</Value><Value>unknown</Value><Value>deferred</Value></Control><Control NAME="db_output_document_answers_relaunch_transaction_hyperlink" TYPE="boolean"><Value>false</Value></Control ><Control NAME="db_output_document_answers_relaunch_transaction_url" TYPE="string"><Value></Value></Control><Control NAME="db_output_filter_reference" TYPE="string"><Value></Value></Control><Control NAME="db_output_variable_as" TYPE="string"><Value>alias< /Value></Control><Control NAME="db_output_variable_highlights" TYPE="boolean"><Value>false</Value></Control><Control NAME="db_output_variable_sequence" TYPE="string"><Value>ascending</Value></Control><Control NAME="db_output_white_space" TYPE="boolean"><V alue>false</Value></Control><Control NAME="db_output_line_breaks" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_input_show_column_headings" TYPE="boolean"><Value>false</Value></Control><Control NAME="db_input_heading_repetition_column" TYP E="string"><Value>Repeat</Value></Control><Control NAME="db_input_heading_highlight_column" TYPE="string"><Value>Check</Value></Control><Control NAME="db_input_heading_prompt_column" TYPE="string"><Value>Prompt</Value></Control><Control NAME="db_input_hea ding_question_column" TYPE="string"><Value>Answer</Value></Control><Control NAME="db_input_heading_state_column" TYPE="string"><Value>Deferral</Value></Control><Control NAME="db_input_heading_guidance_column" TYPE="string"><Value>Guidance</Value></Control ><Control NAME="db_input_heading_comment_column" TYPE="string"><Value>Insert your comments below</Value></Control><Control NAME="db_input_heading_variable_name_column" TYPE="string"><Value>Variable</Value></Control><Control NAME="db_input_help_url" TYPE=" string"><Value>/dealbuilder_live/help/dealbuilder/help.html</Value></Control><Control NAME="db_input_data_validation" TYPE="string"><Value>onsubmit</Value></Control><Control NAME="db_input_show_page_title" TYPE="boolean"><Value>true</Value></Control><Cont rol NAME="db_input_show_group_title" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_input_show_repetition_column" TYPE="boolean"><Value>false</Value></Control><Control NAME="db_input_show_state_column" TYPE="boolean"><Value>true</Value></Co ntrol><Control NAME="db_input_show_variable_name_column" TYPE="boolean"><Value>false</Value></Control><Control NAME="db_input_show_committed" TYPE="boolean"><Value>false</Value></Control><Control NAME="db_input_show_group_state" TYPE="boolean"><Value>true </Value></Control><Control NAME="db_input_show_group_state_threshold" TYPE="numeric"><Value>2</Value></Control><Control NAME="db_input_state_display" TYPE="string"><Value>dropdown</Value></Control><Control NAME="db_input_state_preselect" TYPE="string"><Va lue>sure</Value></Control><Control NAME="db_input_unknown_option" TYPE="string"><Value>Unknown</Value></Control><Control NAME="db_input_unknown_position" TYPE="string"><Value>first</Value></Control><Control NAME="db_input_other_option" TYPE="string"><Valu e>Other</Value></Control><Control NAME="db_input_other_position" TYPE="string"><Value>last</Value></Control><Control NAME="db_input_other_width_single" TYPE="numeric"><Value>20</Value></Control><Control NAME="db_input_other_width_multiple" TYPE="numeric"> <Value>20</Value></Control><Control NAME="db_input_other_depth_multiple" TYPE="numeric"><Value>4</Value></Control><Control NAME="db_input_other_prompt_multiple" TYPE="string"><Value>Specify others:</Value></Control><Control NAME="db_input_other_prompt_sin gle" TYPE="string"><Value>Specify other:</Value></Control><Control NAME="db_input_other_prompt_break_before" TYPE="numeric"><Value>1</Value></Control><Control NAME="db_input_other_prompt_break_after" TYPE="numeric"><Value>1</Value></Control><Control NAME= "db_input_active_separator_sure_multiline" TYPE="string"><Value>, </Value></Control><Control NAME="db_input_active_separator_sure_multiple" TYPE="string"><Value> and </Value></Control><Control NAME="db_input_active_separator_unsure_multiple" TYPE="string" ><Value> and/or </Value></Control><Control NAME="db_input_active_separator_unsure_single" TYPE="string"><Value> or </Value></Control><Control NAME="db_input_active_boolean_true" TYPE="string"><Value>Yes</Value></Control><Control NAME="db_input_active_bool ean_false" TYPE="string"><Value>No</Value></Control><Control NAME="db_input_repeat_navigation_prefix" TYPE="string"><Value>(%1 of %2)&amp\'3bnbsp\'3b</Value></Control><Control NAME="db_input_repeat_navigation_postfix" TYPE="string"><Value></Value></Control><Con trol NAME="db_input_repeat_navigation_portrayal" TYPE="string"><Value>visible</Value></Control><Control NAME="db_input_repeat_format" TYPE="string"><Value>digits</Value></Control><Control NAME="db_input_repeat_prev" TYPE="string"><Value>Prev</Value></Cont rol><Control NAME="db_input_repeat_next" TYPE="string"><Value>Next</Value></Control><Control NAME="db_input_repeat_separator" TYPE="string"><Value>&amp\'3bnbsp\'3b|&amp\'3bnbsp\'3b</Value></Control><Control NAME="db_input_prompt_compulsory_symbol" TYPE="string"><Valu e>*</Value></Control><Control NAME="db_input_prompt_compulsory_symbol_location" TYPE="string"><Value>after</Value></Control><Control NAME="db_input_question_compulsory_symbol" TYPE="string"><Value></Value></Control><Control NAME="db_input_question_compuls ory_symbol_location" TYPE="string"><Value>after</Value></Control><Control NAME="db_input_disable_when_unknown_compulsory" TYPE="boolean"><Value>true</Value></Control><Control NAME="db_input_disable_when_unknown_non_compulsory" TYPE="boolean"><Value>false< /Value></Control><Control NAME="db_input_simple_alert" TYPE="string"><Value>client_side</Value></Control><Control NAME="db_input_warning_irrelevant_page" TYPE="string"><Value>&lt\'3bU&gt\'3bWARNING:&lt\'3b/U&gt\'3b That page is no longer relevant because of answers g iven on this page or a previous page!</Value></Control><Control NAME="db_input_last_page_next_button" TYPE="string"><Value>enabled</Value></Control><Control NAME="db_input_page_goto_list_content" TYPE="string"><Value>relevant_pages</Value></Control><Varia ble NAME="ProductVersion" TYPE="string" STATUS="sure"><Value>0</Value></Variable><Variable NAME="MScom" TYPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="Language" TYPE="select" STATUS="sure"><Value>Bulgarian</Value><Value>Chinese (S implified)</Value><Value>Chinese (Traditional)</Value><Value>Croatian</Value><Value>Czech</Value><Value>Danish</Value><Value>Dutch</Value><Value>English</Value><Value>Estonian</Value><Value>Finnish</Value><Value>French</Value><Value>German</Value><Value>G reek</Value><Value>Hungarian</Value><Value>Italian</Value><Value>Japanese</Value><Value>Korean</Value><Value>Latvian</Value><Value>Norwegian (Bokmal)</Value><Value>Polish</Value><Value>Portuguese (Brazil)</Value><Value>Portuguese (Portugal)</Value><Value> Romanian</Value><Value>Russian</Value><Value>Serbian (Latin)</Value><Value>Slovak</Value><Value>Slovenian</Value><Value>Spanish</Value><Value>Swedish</Value><Value>Thai</Value><Value>Turkish</Value><Value>Ukrainian</Value></Variable><Variable NAME="Canada Avail" TYPE="boolean" STATUS="sure"><Value>1</Value></Variable><Variable NAME="CanadaFrench" TYPE="boolean" STATUS="sure"><Value>1</Value></Variable><Variable NAME="FileFormat" TYPE="boolean" STATUS="sure"><Value>1</Value></Variable><Variable NAME="Softwa reType" TYPE="select" STATUS="sure"><Value>Free, Standalone Software</Value></Variable><Variable NAME="ProductName" TYPE="string" STATUS="sure"><Value>Silverlight Software Development Kit 1.0</Value></Variable><Variable NAME="NumberOfCopies" TYPE="select"  STATUS="sure"><Value>Any number of copies</Value></Variable><Variable NAME="StandaloneUseRight" TYPE="select" STATUS="sure"><Value>For one user to use any number of copies to design, develop and test the user&apos\'3bs programs</Value></Variable><Variable N AME="MediaElementsTemplates" TYPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="DistributableCode" TYPE="boolean" STATUS="sure"><Value>1</Value></Variable><Variable NAME="DistributableCodeType" TYPE="select" STATUS="sure"><Value>Sampl e Code</Value></Variable><Variable NAME="Transfer" TYPE="select" STATUS="sure"><Value>No transfer permitted</Value></Variable><Variable NAME="OtherMicrosoftPrograms" TYPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="PrereleaseCode" T YPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="ThirdPartyPrograms" TYPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="Benchmarking" TYPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="MPEG"  TYPE="boolean" STATUS="sure"><Value>0</Value></Variable><Variable NAME="InternetBasedServices" TYPE="boolean" STATUS="sure"><Value>0</Value></Variable></Document>}}{\*\ftnsep \ltrpar \pard\plain \ltrpar \ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0  \ltrch\fcs0 \insrsid3615048 \chftnsep  \par }}{\*\ftnsepc \ltrpar \pard\plain \ltrpar\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3615048 \chftnsepc  \par }}{\*\aftnsep \ltrpar \pard\plain \ltrpar\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3615048 \chftnsep  \par }}{\*\aftnsepc \ltrpar \pard\plain \ltrpar\ql \li0\ri0\sb120\sa120\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3615048 \chftnsepc  \par }}\ltrpar \sectd \ltrsect\psz1\linex0\endnhere\sectlinegrid360\sectdefaultcl\sectrsid16257942\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3 \pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}} {\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar \s42\ql \li0\ri0\sb120\sa120\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\nosnaplinegrid\rin0\lin0\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs28\alang1025 \ltrch\fcs0  \b\fs28\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 MICROSOFT SOFTWARE LICENSE TERMS \par }\pard\plain \ltrpar\s43\ql \li0\ri0\sb120\sa120\nowidctlpar\brdrb\brdrs\brdrw10\brsp20 \wrapdefault\aspalpha\aspnum\faauto\nosnaplinegrid\rin0\lin0\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs28\alang1025 \ltrch\fcs0  \b\fs28\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 MICROSOFT }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid14114191\charrsid13173401 \hich\af38\dbch\af13\loch\f38 SILVERLIGHT }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid2517422\charrsid13173401 \hich\af38\dbch\af13\loch\f38 4}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid986187\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid14114191\charrsid13173401 \hich\af38\dbch\af13\loch\f38 SOFTWARE DEVELOPMENT KIT}{\rtlch\fcs1 \af38\afs20  \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401  \par }\pard\plain \ltrpar\s44\ql \li0\ri0\sb120\sa120\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\nosnaplinegrid\rin0\lin0\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  These license terms are an agreement between Microsoft Corporation (or based on where you live, one of its \hich\af38\dbch\af13\loch\f38 affiliates) and you.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401  \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 Please read them.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  They apply to the software named above, which includes the media on which you received it, if any.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20  \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 The terms also apply to any Microsoft \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s34\ql \fi-363\li360\ri0\sb120\sa120\nowidctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls2\nosnaplinegrid\rin0\lin360\itap0\pararsid13173401 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1  \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 updates, \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38 supplements, \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38 Internet-based services, and \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38 support services \par }\pard\plain \ltrpar\s44\ql \li0\ri0\sb120\sa120\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\nosnaplinegrid\rin0\lin0\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 for this sof\hich\af38\dbch\af13\loch\f38  tware, unless other terms accompany those items.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 If so, those terms apply. \par }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 By using the software, you accept these terms.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401  \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 If you do not accept them, do not use the software.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid14494636\charrsid13173401  \par \hich\af38\dbch\af13\loch\f38 The software is a software development kit designed to work with Microsoft Silverl\hich\af38\dbch\af13\loch\f38 ight.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401  \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid14494636\charrsid13173401 \hich\af38\dbch\af13\loch\f38 This agreement does not give you any rights to install or use Silverlight.}{\rtlch\fcs1 \af38\afs20  \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid14494636\charrsid13173401 \hich\af38\dbch\af13\loch\f38  You must acquire a separate license to acquire such rights. \par }\pard\plain \ltrpar\s61\ql \li0\ri0\sb120\sa120\nowidctlpar\brdrt\brdrs\brdrw10 \wrapdefault\aspalpha\aspnum\faauto\nosnaplinegrid\rin0\lin0\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  If you comply with these license terms, you have the rights below. \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 1.\tab}}\pard\plain \ltrpar\s1\ql \fi-357\li357\ri0\sb120\sa120\nowidctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\nosnaplinegrid\rin0\lin357\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 INSTALLATION AND USE RIGHTS.}{\rtlch\fcs1  \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \cs57\b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 One user may instal \hich\af38\dbch\af13\loch\f38 l and use any number of copies of the software to design, develop and test your programs}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \cs57\b0\fs20\dbch\af13\insrsid3887918\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{ \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid3887918\charrsid13173401 \hich\af38\dbch\af13\loch\f38 for use with Silverlight}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \cs57\b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 .}{\rtlch\fcs1  \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401  \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 2.\tab}}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 ADDITIONAL LICENSING REQUIREMENTS AND/OR USE RIGHTS. \par {\listtext\pard\plain\ltrpar \s2 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 a.\tab}}\pard\plain \ltrpar\s2\ql \fi-363\li720\ri0\sb120\sa120\nowidctlpar \jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl1\outlinelevel1\nosnaplinegrid\rin0\lin720\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 Distributable Code.}{\rtlch\fcs1 \ab0\af38\afs20  \ltrch\fcs0 \cs57\b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \cs57\b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  The software contains code that you are permitted to distribute in programs you develop }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \cs57\b0\fs20\dbch\af13\insrsid5649096\charrsid13173401 \hich\af38\dbch\af13\loch\f38 for use with Silverlight }{\rtlch\fcs1  \ab0\af38\afs20 \ltrch\fcs0 \cs57\b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 if you comply with the terms below.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401  \par {\listtext\pard\plain\ltrpar \s49 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 i.\tab}}\pard\plain \ltrpar\s49\ql \fi-357\li1077\ri0\sb120\sa120\nowidctlpar \jclisttab\tx1080\wrapdefault\aspalpha\aspnum\faauto\ls10\ilvl2\outlinelevel2\nosnaplinegrid\rin0\lin1077\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 Right to Use and Distribute.}{\rtlch\fcs1  \af38\afs20 \ltrch\fcs0 \cs58\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \cs58\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 \hich\f38  The code and text files listed below are \'93\loch\f38 \hich\f38 Distributable Code.\'94}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401  \par {\listtext\pard\plain\ltrpar \s50 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s50\ql \fi-358\li1435\ri0\sb120\sa120\nowidctlpar \jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls4\nosnaplinegrid\rin0\lin1435\itap0\pararsid13173401 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\ul\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 { \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 Sample Code}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\ulnone\dbch\af13\insrsid9964378\charrsid13173401 .}{\rtlch\fcs1 \af38\afs20  \ltrch\fcs0 \fs20\ulnone\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\ulnone\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 \hich\f38  You may modify, copy, and distribute the source and object code form of code marked as \'93\loch\f38 \hich\f38 sample.\'94{\*\bkmkstart _GoBack}{\*\bkmkend _GoBack} \par {\listtext\pard\plain\ltrpar \s50 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid986187\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid986187\charrsid13173401 \hich\af38\dbch\af13\loch\f38 Silverlight Libraries}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\ulnone\dbch\af13\insrsid986187\charrsid13173401 .}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\ulnone\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\ulnone\dbch\af13\insrsid986187\charrsid13173401 \hich\af38\dbch\af13\loch\f38 \hich\f38  You may copy and distribute the object code form of code marked as \'93\loch\f38 \hich\f38 Silverlight Libraries\'94\loch\f38 \hich\f38 , \'93\loch\f38 \hich\f38 Client Libraries\'94\loch\f38 \hich\f38  and \'93\loch\f38 Server Libraries.}{\rtlch\fcs1  \af38\afs20 \ltrch\fcs0 \fs20\ulnone\dbch\af13\insrsid3887918\charrsid13173401 \loch\af38\dbch\af13\hich\f38 \'94}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\ulnone\dbch\af13\insrsid986187\charrsid13173401  \par {\listtext\pard\plain\ltrpar \s50 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 Third Party Distribution}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\ulnone\dbch\af13\insrsid9964378\charrsid13173401 .}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\ulnone\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\ulnone\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  You may permit distributors of your programs to copy and distribute the Distributable Code as part of those programs. \par {\listtext\pard\plain\ltrpar \s49 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 ii.\tab}}\pard\plain \ltrpar\s49\ql \fi-357\li1077\ri0\sb120\sa120\nowidctlpar \jclisttab\tx1077\wrapdefault\aspalpha\aspnum\faauto\ls10\ilvl2\outlinelevel2\nosnaplinegrid\rin0\lin1077\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 Distribution Requirements.}{\rtlch\fcs1 \af38\afs20  \ltrch\fcs0 \cs58\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \cs58\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  For any Distributable Code you distribute, you must}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401  \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s36\ql \fi-358\li1435\ri0\sb120\sa120\nowidctlpar \jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls4\nosnaplinegrid\rin0\lin1435\itap0\pararsid13173401 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1  \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 add significant primary functiona\hich\af38\dbch\af13\loch\f38 lity to it in your programs; \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38  require distributors and external end users to agree to terms that protect it at least as much as this agreement; \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38  display your valid copyright notice on your programs; and \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38  indemnify, defend, and hold harmless Microsoft from any\hich\af38\dbch\af13\loch\f38  claims, including attorneys\hich\f38 \rquote \loch\f38  fees, related to the distribution or use of your programs. \par {\listtext\pard\plain\ltrpar \s49 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 iii.\tab}}\pard\plain \ltrpar\s49\ql \fi-357\li1077\ri0\sb120\sa120\nowidctlpar \jclisttab\tx1077\wrapdefault\aspalpha\aspnum\faauto\ls10\ilvl2\outlinelevel2\nosnaplinegrid\rin0\lin1077\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 Distribution Restrictions.}{\rtlch\fcs1 \af38\afs20  \ltrch\fcs0 \cs58\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \cs58\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 You may not}{\rtlch\fcs1 \af38\afs20  \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401  \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s36\ql \fi-358\li1435\ri0\sb120\sa120\nowidctlpar \jclisttab\tx1437\wrapdefault\aspalpha\aspnum\faauto\ls4\nosnaplinegrid\rin0\lin1435\itap0\pararsid13173401 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1  \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 alter any copyright, trademark or patent notice in the Distributable Code; \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38 use Microsoft\hich\f38 \rquote \loch\f38  s trademarks in your }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid14228190\charrsid13173401 \hich\af38\dbch\af13\loch\f38 programs}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid986187\charrsid13173401  \loch\af38\dbch\af13\hich\f38 \rquote \loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 names or\hich\af38\dbch\af13\loch\f38  in a way that suggests your }{\rtlch\fcs1  \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid14228190\charrsid13173401 \hich\af38\dbch\af13\loch\f38 programs }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  come from or are endorsed by Microsoft; \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38  include Distributable Code in malicious, deceptive or unlawful programs; or \par {\listtext\pard\plain\ltrpar \s36 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38  modify or distribute the source code of any Distributable Code so that any part of it becomes subject \hich\af38\dbch\af13\loch\f38 to an Excluded License.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401  \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 An Excluded License is one that requires, as a condition of use, modification or distribution, that \par {\listtext\pard\plain\ltrpar \s37 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s37\ql \fi-357\li1792\ri0\sb120\sa120\nowidctlpar \jclisttab\tx1795\wrapdefault\aspalpha\aspnum\faauto\ls5\nosnaplinegrid\rin0\lin1792\itap0\pararsid13173401 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1  \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 the code be disclosed or distributed in source code form; or \par {\listtext\pard\plain\ltrpar \s37 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38 others have the right to modify it. \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 3.\tab}}\pard\plain \ltrpar\s1\ql \fi-357\li357\ri0\sb120\sa120\nowidctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\nosnaplinegrid\rin0\lin357\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 SCOPE OF LICENSE}{\rtlch\fcs1 \af38\afs20  \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 .}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 The software is l\hich\af38\dbch\af13\loch\f38 icensed, not sold.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401  \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 This agreement only gives you some rights to use the software.}{\rtlch\fcs1 \ab0\af38\afs20  \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 Microsoft reserves all other rights.} {\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  Unless applicable law gives you more rights despite this limitation, you may use the software only as expressly permitted in this \hich\af38\dbch\af13\loch\f38 agreement.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  In doing so, you must comply with any technical limitations in the software that only allow you to use it in certain ways. You may not \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s34\ql \fi-363\li720\ri0\sb120\sa120\nowidctlpar \jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls2\nosnaplinegrid\rin0\lin720\itap0\pararsid13173401 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1  \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 work around any technical limitations in the software}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid14494636\charrsid13173401  \hich\af38\dbch\af13\loch\f38 ;}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401  \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38  reverse engineer, decompile or disassemble the software\hich\af38\dbch\af13\loch\f38 , except and only to the extent that applicable law expressly permits, despite this limitation}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid14494636\charrsid13173401 \hich\af38\dbch\af13\loch\f38 ;}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401  \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38 publish the software for others to copy}{ \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid14494636\charrsid13173401 \hich\af38\dbch\af13\loch\f38 ;}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401  \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38 rent, lease or lend the software}{\rtlch\fcs1  \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid14494636\charrsid13173401 \hich\af38\dbch\af13\loch\f38 ; or}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401  \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38  transfer the software or this agreement to any third party}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid14494636\charrsid13173401 .}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401  \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 4.\tab}}\pard\plain \ltrpar\s1\ql \fi-357\li357\ri0\sb120\sa120\nowidctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\nosnaplinegrid\rin0\lin357\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 BACKUP COPY.}{\rtlch\fcs1 \ab0\af38\afs20  \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 You may  \hich\af38\dbch\af13\loch\f38 make one backup copy of the software.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 You may use it only to reinstall the software. \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 5.\tab}}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 DOCUMENTATION.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20  \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 Any person that has valid access to your computer or internal network may copy and use the documentation for your internal, reference purposes. \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid5918861\charrsid13173401 \hich\af38\dbch\af13\loch\f38 6.\tab}}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid5918861\charrsid13173401 \hich\af38\dbch\af13\loch\f38 NOTICE ABOUT\hich\af38\dbch\af13\loch\f38  THE H.264/AVC VISUAL STANDARD, AND THE VC-1 VIDEO STANDARD.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid5918861\charrsid13173401 \hich\af38\dbch\af13\loch\f38 This software may include H.264/MPEG-4 AVC and/or VC-1}{ \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid1867609\charrsid13173401 \hich\af38\dbch\af13\loch\f38  decoding technology}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid5918861\charrsid13173401 .}{\rtlch\fcs1 \af38\afs20  \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid5918861\charrsid13173401 \hich\af38\dbch\af13\loch\f38 MPEG LA, L.L.C. requires this notice:}{ \rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid5918861\charrsid13173401  \par }\pard \ltrpar\s1\ql \li357\ri0\sb120\sa120\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel0\nosnaplinegrid\rin0\lin357\itap0\pararsid13173401 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid5918861\charrsid13173401  \hich\af38\dbch\af13\loch\f38 THIS PRODUCT IS LICENSED UNDER THE AVC AND THE VC-1 PATENT PORTFOLIO LICENSES FOR\hich\af38\dbch\af13\loch\f38  THE PERSONAL AND NON-COMMERCIAL USE OF A CONSUMER TO (}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid1867609\charrsid13173401 \hich\af38\dbch\af13\loch\f38 i}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid5918861\charrsid13173401 \hich\af38\dbch\af13\loch\f38 \hich\f38  ) ENCODE VIDEO IN COMPLIANCE WITH THE ABOVE STANDARDS (\'93\loch\f38 \hich\f38 VIDEO STANDARDS\'94\loch\f38 ) AND/OR (}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid1867609\charrsid13173401 \hich\af38\dbch\af13\loch\f38 ii}{\rtlch\fcs1  \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid5918861\charrsid13173401 \hich\af38\dbch\af13\loch\f38 ) DECODE }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid15680505\charrsid13173401 \hich\af38\dbch\af13\loch\f38 AVC}{\rtlch\fcs1  \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid2382561\charrsid13173401 ,}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid5918861\charrsid13173401 \hich\af38\dbch\af13\loch\f38   AND VC-1 VIDEO THAT WAS ENCODED BY A CONSUMER ENGAGED IN A PERSONAL AND NON-COMMERCIAL ACTIVITY AND/OR\hich\af38\dbch\af13\loch\f38  WAS OBTAINED FROM A VIDEO PROVIDER LICENSED TO PROVIDE SUCH VIDEO. }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid1867609\charrsid13173401 \hich\af38\dbch\af13\loch\f38 NONE OF THE LICENSES EXTEND TO ANY OTHER PRODUCT REGARDLESS OF WHETHER SUCH PRODUCT IS INCLUDED WITH THIS SOFTWARE IN A SINGLE ARTICLE.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid5918861\charrsid13173401 \hich\af38\dbch\af13\loch\f38 NO LICENSE IS GRANTED OR SHALL BE IMPLIED FOR ANY OT \hich\af38\dbch\af13\loch\f38 HER USE.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid5918861\charrsid13173401  \hich\af38\dbch\af13\loch\f38 ADDITIONAL INFORMATION MAY BE OBTAINED FROM MPEG LA, L.L.C. SEE WWW.MPEGLA.COM}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid2760050\charrsid13173401 .}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid5918861\charrsid13173401  \par }\pard\plain \ltrpar\s88\ql \li360\ri0\sb120\sa120\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\nosnaplinegrid\rin0\lin360\itap0\pararsid13173401 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0  \fs22\cf17\lang1033\langfe1033\loch\af37\hich\af37\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \fs20\cf0\loch\af38\hich\af38\dbch\af13\insrsid1867609\charrsid13173401 \hich\af38\dbch\af13\loch\f38  For clarification purposes, this notice does not limit or }{\rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \fs20\cf0\loch\af38\hich\af38\dbch\af13\insrsid2242324\charrsid13173401 \hich\af38\dbch\af13\loch\f38 inhibit the use of the software}{\rtlch\fcs1  \ab\af38\afs20 \ltrch\fcs0 \fs20\cf0\loch\af38\hich\af38\dbch\af13\insrsid1867609\charrsid13173401 \hich\af38\dbch\af13\loch\f38  for normal business uses that are personal to that business which do not incl\hich\af38\dbch\af13\loch\f38  ude (i) redistribution of the software to third parties, or (ii) creation of content with the VIDEO STANDARDS }{\rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \fs20\cf0\loch\af38\hich\af38\dbch\af13\insrsid9577134\charrsid13173401 \hich\af38\dbch\af13\loch\f38  compliant technologies }{\rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \fs20\cf0\loch\af38\hich\af38\dbch\af13\insrsid1867609\charrsid13173401 \hich\af38\dbch\af13\loch\f38 for distribution to third parties. \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 7.\tab}}\pard\plain \ltrpar\s1\ql \fi-357\li357\ri0\sb120\sa120\nowidctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\nosnaplinegrid\rin0\lin357\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 EXPORT RESTRICTIONS}{\rtlch\fcs1 \af38\afs20  \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 .}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid9577134\charrsid13173401 \hich\af38\dbch\af13\loch\f38 T}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  he software is subject to United States export laws and \hich\af38\dbch\af13\loch\f38 regulations.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20  \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 You must comply with all domestic and international export laws and regulations that apply to the software.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  These laws include restrictions on destinations, end users and end use.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 For additional information, see }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  www.microsoft.com/exporting.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \cs73\b0\fs20\dbch\af13\insrsid9964378\charrsid13173401  \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 8.\tab}}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 SU\hich\af38\dbch\af13\loch\f38 PPORT SERVICES}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9651656\charrsid13173401 .}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9651656\charrsid13173401 \hich\af38\dbch\af13\loch\f38 \hich\f38 Because this software is \'93\loch\f38  \hich\f38 as is,\'94\loch\f38  we may not provide support services for it. \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 9.\tab}}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 ENTIRE AGREEMENT}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 .}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  This agreement, and the terms for supplements, updates, Internet-based services and support services that you use, are the entire agreement for \hich\af38\dbch\af13\loch\f38 the software and support services. \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 10.\tab}}\pard \ltrpar \s1\ql \fi-360\li360\ri0\sb120\sa120\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\nosnaplinegrid\rin0\lin360\itap0\pararsid13173401 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401  \hich\af38\dbch\af13\loch\f38 APPLICABLE LAW}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 . \par {\listtext\pard\plain\ltrpar \s2 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 a.\tab}}\pard\plain \ltrpar\s2\ql \fi-363\li720\ri0\sb120\sa120\nowidctlpar \jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls17\ilvl1\outlinelevel1\nosnaplinegrid\rin0\lin720\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 United States.}{\rtlch\fcs1 \ab0\af38\afs20  \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  If you acquired the software in the United States, Washington state law governs the interpretation of this agreement and applies to claims for breach of it, regardless of conflict of laws pr\hich\af38\dbch\af13\loch\f38 inciples.}{\rtlch\fcs1  \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  The laws of the state where you live govern all other claims, including claims under state consumer protection laws, unfair competition laws, and in tort. \par {\listtext\pard\plain\ltrpar \s2 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 b.\tab}}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 Outside the United States.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1  \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 If you acquired the software in any other country, the laws of t\hich\af38\dbch\af13\loch\f38 hat country apply. \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 11.\tab}}\pard\plain \ltrpar\s1\ql \fi-357\li357\ri0\sb120\sa120\nowidctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\nosnaplinegrid\rin0\lin357\itap0\pararsid13173401 \rtlch\fcs1 \ab\af38\afs19\alang1025 \ltrch\fcs0  \b\fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 LEGAL EFFECT}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid9964378\charrsid13173401 .}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 This agreement describes certain legal rights.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{ \rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 You may have other rights under the laws of your country.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  You may also have rights with respect to the party from whom you acquired the software.}{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0 \b0\fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \ab0\af38\afs20 \ltrch\fcs0  \b0\fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 This agreement does not change\hich\af38\dbch\af13\loch\f38  your rights under the laws of your country if the laws of your country do not permit it to do so. \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 12.\tab}}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 DISCLAIMER OF WARRANTY}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 .}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 \hich\f38 The software is licensed \'93\loch\f38 \hich\f38  as-is.\'94}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  You bear the risk of using it.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401  \hich\af38\dbch\af13\loch\f38 Microsoft gives no express warranties, guarantees or conditions.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 You\hich\af38\dbch\af13\loch\f38  may have additional consumer rights under your local laws which this agreement cannot change.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  To the extent permitted under your local laws, Microsoft excludes the implied warranties of merchantability, fitness for a particular purpose and non-infringemen\hich\af38\dbch\af13\loch\f38 t. \par {\listtext\pard\plain\ltrpar \s1 \rtlch\fcs1 \ab\af38\afs20 \ltrch\fcs0 \b\fs20\loch\af38\hich\af38\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38 13.\tab}}\pard \ltrpar\s1\ql \fi-360\li360\ri0\sb120\sa120\nowidctlpar \jclisttab\tx360\wrapdefault\aspalpha\aspnum\faauto\ls17\outlinelevel0\nosnaplinegrid\rin0\lin360\itap0\pararsid13173401 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  LIMITATION ON AND EXCLUSION OF REMEDIES AND DAMAGES}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 .}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38   }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 You can recover from Microsoft and its suppliers only direct damages up to U.S. $5.00.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  You cannot recover any other damages, including consequential, lost profits, special, indirect or incidental dama\hich\af38\dbch\af13\loch\f38 ges. \par }\pard\plain \ltrpar\s24\ql \li357\ri0\sb120\sa120\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\nosnaplinegrid\rin0\lin357\itap0\pararsid13173401 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 This limitation applies to \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s34\ql \fi-363\li720\ri0\sb120\sa120\nowidctlpar \jclisttab\tx720\wrapdefault\aspalpha\aspnum\faauto\ls2\nosnaplinegrid\rin0\lin720\itap0\pararsid13173401 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0 \fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1  \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 anything related to the software, services, content (including code) on third party Internet sites, or third party programs; and \par {\listtext\pard\plain\ltrpar \s34 \rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\loch\af3\hich\af3\dbch\af13\insrsid9964378\charrsid13173401 \loch\af3\dbch\af13\hich\f3 \'b7\tab}\hich\af38\dbch\af13\loch\f38  claims for breach of contract, breach of warranty, guarantee or condition, strict liability, \hich\af38\dbch\af13\loch\f38 negligence, or other tort to the extent permitted by applicable law. \par }\pard\plain \ltrpar\ql \li360\ri0\sb120\sa120\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\nosnaplinegrid\rin0\lin360\itap0\pararsid13173401 \rtlch\fcs1 \af38\afs19\alang1025 \ltrch\fcs0  \fs19\lang1033\langfe1033\loch\af38\hich\af38\dbch\af11\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38  It also applies even if Microsoft knew or should have known about the possibility of the damages.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid16257942\charrsid13173401 \hich\af38\dbch\af13\loch\f38  }{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0  \fs20\dbch\af13\insrsid9964378\charrsid13173401 \hich\af38\dbch\af13\loch\f38 The above limitation or exclusion may not apply to you because your country may not allow\hich\af38\dbch\af13\loch\f38   the exclusion or limitation of incidental, consequential or other damages.}{\rtlch\fcs1 \af38\afs20 \ltrch\fcs0 \fs20\dbch\af13\insrsid1928288\charrsid13173401  \par }{\*\themedata 504b030414000600080000002100828abc13fa0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb6ac3301045f785fe83d0b6d8 72ba28a5d8cea249777d2cd20f18e4b12d6a8f843409c9df77ecb850ba082d74231062ce997b55ae8fe3a00e1893f354e9555e6885647de3a8abf4fbee29bbd7 2a3150038327acf409935ed7d757e5ee14302999a654e99e393c18936c8f23a4dc072479697d1c81e51a3b13c07e4087e6b628ee8cf5c4489cf1c4d075f92a0b 44d7a07a83c82f308ac7b0a0f0fbf90c2480980b58abc733615aa2d210c2e02cb04430076a7ee833dfb6ce62e3ed7e14693e8317d8cd0433bf5c60f53fea2fe7 065bd80facb647e9e25c7fc421fd2ddb526b2e9373fed4bb902e182e97b7b461e6bfad3f010000ffff0300504b030414000600080000002100a5d6a7e7c00000 00360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4fc7060abb08 84a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b63095120f88d94fbc 52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462a1a82fe353 bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f7468656d652f7468 656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b4b0d592c9c 070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b4757e8d3f7 29e245eb2b260a0238fd010000ffff0300504b03041400060008000000210096b5ade296060000501b0000160000007468656d652f7468656d652f7468656d65 312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87615b8116d8 a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad79482a9c04 98f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b5d8a314d3c 94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab999fb7b471 7509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9699640f671 9e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd5868b37a088d1 e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d60cf03ac1a5 193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f9e7ef3f2d1 17d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be15c308d3f2 8acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a99793849c26ae6 6252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d32a423279a 668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2af074481847 bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86e877f0034e 16bafb0e258ebb4faf06b769e888340b103d3311da9750aa9d0a1cd3e4efca31a3508f6d0c5c5c398602f8e2ebc71591f5b616e24dd893aa3261fb44f95d843b 5974bb5c04f4edafb95b7892ec1108f3f98de75dc97d5772bdff7cc95d94cf672db4b3da0a6557f70db629362d72bcb0431e53c6066acac80d699a6409fb44d0 8741bdce9c0e4971624a2378cceaba830b05366b90e0ea23aaa241845368b0eb9e2612ca8c742851ca251ceccc70256d8d87265dd96361531f186c3d9058edf2 c00eafe8e1fc5c509031bb4d680e9f39a3154de0accc56ae644441edd76156d7429d995bdd88664a9dc3ad50197c38af1a0c16d684060441db02565e85f3b966 0d0713cc48a0ed6ef7dedc2dc60b17e92219e180643ed27acffba86e9c94c78ab90980d8a9f0913ee49d62b512b79626fb06dccee2a432bbc60276b9f7dec44b 7904cfbca4f3f6443ab2a49c9c2c41476dafd55c6e7ac8c769db1bc399161ee314bc2e75cf8759081743be1236ec4f4d6693e5336fb672c5dc24a8c33585b5fb 9cc24e1d4885545b58463634cc5416022cd19cacfccb4d30eb45296023fd35a458598360f8d7a4003bbaae25e331f155d9d9a5116d3bfb9a95523e51440ca2e0 088dd844ec6370bf0e55d027a012ae264c45d02f708fa6ad6da6dce29c255df9f6cae0ec38666984b372ab5334cf640b37795cc860de4ae2816e95b21be5ceaf 8a49f90b52a51cc6ff3355f47e0237052b81f6800fd7b802239daf6d8f0b1571a8426944fdbe80c6c1d40e8816b88b8569082ab84c36ff0539d4ff6dce591a26 ade1c0a7f669880485fd484582903d284b26fa4e2156cff62e4b9265844c4495c495a9157b440e091bea1ab8aaf7760f4510eaa69a6465c0e04ec69ffb9e65d0 28d44d4e39df9c1a52ecbd3607fee9cec7263328e5d661d3d0e4f62f44acd855ed7ab33cdf7bcb8ae889599bd5c8b3029895b6825696f6af29c239b75a5bb1e6 345e6ee6c28117e73586c1a2214ae1be07e93fb0ff51e133fb65426fa843be0fb515c187064d0cc206a2fa926d3c902e907670048d931db4c1a44959d366ad93 b65abe595f70a75bf03d616c2dd959fc7d4e6317cd99cbcec9c58b34766661c7d6766ca1a9c1b327531486c6f941c638c67cd22a7f75e2a37be0e82db8df9f30 254d30c1372581a1f51c983c80e4b71ccdd28dbf000000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d652f74 68656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d363f24 51eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e3198 720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d9850528 a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100828abc13fa0000001c0200001300000000000000000000000000 000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b000000000000000000000000 002b0100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c00000000000000000000000000140200007468 656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d001400060008000000210096b5ade296060000501b000016000000000000000000 00000000d10200007468656d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b010000270000000000 00000000000000009b0900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000960a00000000} {\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d 617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169 6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363 656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e} {\*\latentstyles\lsdstimax267\lsdlockeddef1\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked1 Normal; \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdlocked1 heading 1;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdlocked1 heading 2;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked1 heading 3; \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked1 heading 4;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked1 heading 5;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked1 heading 6; \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked1 heading 7;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked1 heading 8;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked1 heading 9; \lsdpriority39 \lsdlocked1 toc 1;\lsdpriority39 \lsdlocked1 toc 2;\lsdpriority39 \lsdlocked1 toc 3;\lsdpriority39 \lsdlocked1 toc 4;\lsdpriority39 \lsdlocked1 toc 5;\lsdpriority39 \lsdlocked1 toc 6;\lsdpriority39 \lsdlocked1 toc 7; \lsdpriority39 \lsdlocked1 toc 8;\lsdpriority39 \lsdlocked1 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked1 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked1 Title;\lsdpriority1 \lsdlocked1 Default Paragraph Font; \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked1 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked1 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked1 Emphasis; \lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked1 Table Grid;\lsdunhideused0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 No Spacing;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 Light Shading; \lsdsemihidden0 \lsdunhideused0 \lsdpriority61 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 Light Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 Medium Shading 2; \lsdsemihidden0 \lsdunhideused0 \lsdpriority65 Medium List 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 Medium Grid 2; \lsdsemihidden0 \lsdunhideused0 \lsdpriority69 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 Colorful Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 Colorful List; \lsdsemihidden0 \lsdunhideused0 \lsdpriority73 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 Light Shading Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 Light List Accent 1; \lsdsemihidden0 \lsdunhideused0 \lsdpriority62 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 Medium Shading 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 Medium Shading 2 Accent 1; \lsdsemihidden0 \lsdunhideused0 \lsdpriority65 Medium List 1 Accent 1;\lsdunhideused0 Revision;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 Quote; \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 Intense Quote;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 Medium Grid 1 Accent 1; \lsdsemihidden0 \lsdunhideused0 \lsdpriority68 Medium Grid 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 Dark List Accent 1; \lsdsemihidden0 \lsdunhideused0 \lsdpriority71 Colorful Shading Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 Colorful Grid Accent 1; \lsdsemihidden0 \lsdunhideused0 \lsdpriority60 Light Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 Light Grid Accent 2; \lsdsemihidden0 \lsdunhideused0 \lsdpriority63 Medium Shading 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 Medium List 1 Accent 2; \lsdsemihidden0 \lsdunhideused0 \lsdpriority66 Medium List 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 Medium Grid 2 Accent 2; \lsdsemihidden0 \lsdunhideused0 \lsdpriority69 Medium Grid 3 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 Colorful Shading Accent 2; \lsdsemihidden0 \lsdunhideused0 \lsdpriority72 Colorful List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 Light Shading Accent 3; \lsdsemihidden0 \lsdunhideused0 \lsdpriority61 Light List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 Medium Shading 1 Accent 3; \lsdsemihidden0 \lsdunhideused0 \lsdpriority64 Medium Shading 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 Medium List 2 Accent 3; \lsdsemihidden0 \lsdunhideused0 \lsdpriority67 Medium Grid 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 Medium Grid 3 Accent 3; \lsdsemihidden0 \lsdunhideused0 \lsdpriority70 Dark List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 Colorful List Accent 3; \lsdsemihidden0 \lsdunhideused0 \lsdpriority73 Colorful Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 Light List Accent 4; \lsdsemihidden0 \lsdunhideused0 \lsdpriority62 Light Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 Medium Shading 2 Accent 4; \lsdsemihidden0 \lsdunhideused0 \lsdpriority65 Medium List 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 Medium Grid 1 Accent 4; \lsdsemihidden0 \lsdunhideused0 \lsdpriority68 Medium Grid 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 Dark List Accent 4; \lsdsemihidden0 \lsdunhideused0 \lsdpriority71 Colorful Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 Colorful Grid Accent 4; \lsdsemihidden0 \lsdunhideused0 \lsdpriority60 Light Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 Light Grid Accent 5; \lsdsemihidden0 \lsdunhideused0 \lsdpriority63 Medium Shading 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 Medium List 1 Accent 5; \lsdsemihidden0 \lsdunhideused0 \lsdpriority66 Medium List 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 Medium Grid 2 Accent 5; \lsdsemihidden0 \lsdunhideused0 \lsdpriority69 Medium Grid 3 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 Colorful Shading Accent 5; \lsdsemihidden0 \lsdunhideused0 \lsdpriority72 Colorful List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 Light Shading Accent 6; \lsdsemihidden0 \lsdunhideused0 \lsdpriority61 Light List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 Medium Shading 1 Accent 6; \lsdsemihidden0 \lsdunhideused0 \lsdpriority64 Medium Shading 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 Medium List 2 Accent 6; \lsdsemihidden0 \lsdunhideused0 \lsdpriority67 Medium Grid 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 Medium Grid 3 Accent 6; \lsdsemihidden0 \lsdunhideused0 \lsdpriority70 Dark List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 Colorful List Accent 6; \lsdsemihidden0 \lsdunhideused0 \lsdpriority73 Colorful Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 Intense Emphasis; \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 Intense Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 Book Title;\lsdpriority37 Bibliography; \lsdqformat1 \lsdpriority39 TOC Heading;}}{\*\datastore 0105000002000000180000004d73786d6c322e534158584d4c5265616465722e352e3000000000000000000000060000 d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffffec69d9888b8b3d4c859eaf6cd158be0f0000000000000000000000000068 08ee1dc6ca01feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000 0000000000000000000000000000000000000000000000000105000000000000}}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Apr10\Bin\System.CoreEx.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.CoreEx</name>
    <version>1.0.2.5</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.CoreEx.dll</relpath>
    <extension downloadUri="System.CoreEx.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Apr10\Bin\System.Observable.extmap.xml ===
<?xml version="1.0"?>
<manifest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <assembly>
    <name>System.Observable</name>
    <version>1.0.2.5</version>
    <publickeytoken>31bf3856ad364e35</publickeytoken>
    <relpath>System.Observable.dll</relpath>
    <extension downloadUri="System.Observable.zip" />
  </assembly>

</manifest>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\4.0.50401.0\Toolkit\Apr10\Bin\Microsoft.VisualStudio.QualityTools.UnitTesting.Silverlight.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.QualityTools.UnitTesting.Silverlight</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.UrlToTestAttribute">
            <summary>
            UrlToTest specifies the url that should be requested to give context to the test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.UrlToTestAttribute.#ctor(System.String)">
            <summary>
            An unused attribute.
            </summary>
            <param name="urlToTest"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.UrlToTestAttribute.UrlToTest">
            <summary>
            Gets the URL to test.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute">
            <summary>
            AspNetDevelopmentServer specifies the settings to be used for the
            ASP.NET Development Server for the test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes the AspNetDevelopmentServerAttribute.
            </summary>
            <param name="name">The name.</param>
            <param name="pathToWebApp">The path to web app.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes the AspNetDevelopmentServerAttribute.
            </summary>
            <param name="name">The name.</param>
            <param name="pathToWebApp">The path to web app.</param>
            <param name="webAppRoot">The web app root.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.PathToWebApp">
            <summary>
            Gets the PathToWebApp.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute.WebAppRoot">
            <summary>
            Gets the web app root.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute">
            <summary>
            AspNetDevelopmentServerHost specifies the settings to be used when
            ASP.NET Development Server is the host server for the test.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute.#ctor(System.String)">
            <summary>
            Initializes the AspNetDevelopmentServerHostAttribute.
            </summary>
            <param name="pathToWebApp">The path to the web app.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes the AspNetDevelopmentServerHostAttribute.
            </summary>
            <param name="pathToWebApp">The path to the web app.</param>
            <param name="webAppRoot">The web app root.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute.PathToWebApp">
            <summary>
            Gets the path to the web application.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute.WebAppRoot">
            <summary>
            Gets the WebAppRoot.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute">
            <summary>
            For ASP.NET sites that require basic authentication, specify the
            user name and password using the Credential attribute.
            WARNING: The password is stored in plain text in source code
            and in the compiled assembly. Restrict access to the source code
            and assembly to protect this sensitive information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.#ctor(System.String,System.String)">
            <summary>
            Specify the user name and password needed to access the web site under test.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">
            The password. WARNING: The password is stored in plain text in source code
            and in the compiled assembly. Restrict access to the source code and assembly
            to protect this sensitive information.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Specify the user name, password, and domain needed to access the web site under test.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">
            The password. WARNING: The password is stored in plain text in source code
            and in the compiled assembly. Restrict access to the source code and assembly
            to protect this sensitive information.
            </param>
            <param name="domain">The domain.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.UserName">
            <summary>
            Gets the user name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute.Domain">
            <summary>
            Gets the domain.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException">
            <summary>
            Base class for Framework Exceptions, provides localization trick so that messages are in HA locale.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor">
            <summary>
            Initializes a new UnitTestAssertException.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.#ctor(System.String)">
            <summary>
            Initializes UnitTestAssertException.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException.Message">
            <summary>
            Gets the Message string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            <summary>
            AssertFailedException class. Used to indicate failure for a test case
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.String)">
            <summary>
            Initializes a new AssertFailedException.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException.#ctor(System.String,System.Exception)">
            <summary>
            AssertFailedException
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
            <summary>
            The AssertInconclusiveException class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.String)">
            <summary>
            Initializes a new AssertInconclusiveException.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new AssertInconclusiveException.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException.#ctor">
            <summary>
            Initializes a new AssertInconclusiveException.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException">
            <summary>
            InternalTestFailureException class. Used to indicate internal failure 
            for a test case.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.String)">
            <summary>
            Initializes a new InternalTestFailureException.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new InternalTestFailureException.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException.#ctor">
            <summary>
            Initializes a new InternalTestFailureException.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Assert">
            <summary>
            A collection of helper classes to test various conditions within
            unit tests. If the condition being tested is not met, an exception
            is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.error">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean)">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">The condition the test expects to be true.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">The condition the test expects to be true.</param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is false. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the specified condition is true and throws an exception
            if the condition is false.
            </summary>
            <param name="condition">The condition the test expects to be true.</param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is false. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean)">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">The condition the test expects to be false.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">The condition the test expects to be false.</param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is true. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the specified condition is false and throws an exception
            if the condition is true.
            </summary>
            <param name="condition">The condition the test expects to be false.</param>
            <param name="message">
            The message to include in the exception when <paramref name="condition"/>
            is true. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="condition"/> is true.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object)">
            <summary>
            Tests whether the specified object is null and throws an exception
            if it is not.
            </summary>
            <param name="value">The object the test expects to be null.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String)">
            <summary>
            Tests whether the specified object is null and throws an exception
            if it is not.
            </summary>
            <param name="value">The object the test expects to be null.</param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not null. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is null and throws an exception
            if it is not.
            </summary>
            <param name="value">The object the test expects to be null.</param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not null. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object)">
            <summary>
            Tests whether the specified object is non-null and throws an exception
            if it is null.
            </summary>
            <param name="value">The object the test expects not to be null.</param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object,System.String)">
            <summary>
            Tests whether the specified object is non-null and throws an exception
            if it is null.
            </summary>
            <param name="value">The object the test expects not to be null.</param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is null. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is non-null and throws an exception
            if it is null.
            </summary>
            <param name="value">The object the test expects not to be null.</param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is null. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame(System.Object,System.Object)">
            <summary>
            Tests whether the specified objects both refer to the same object and
            throws an exception if the two inputs do not refer to the same object.
            </summary>
            <param name="expected">
            The first object to compare. This is the value the test expects.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> does not refer to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame(System.Object,System.Object,System.String)">
            <summary>
            Tests whether the specified objects both refer to the same object and
            throws an exception if the two inputs do not refer to the same object.
            </summary>
            <param name="expected">
            The first object to compare. This is the value the test expects.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not the same as <paramref name="expected"/>. The message is shown
            in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> does not refer to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified objects both refer to the same object and
            throws an exception if the two inputs do not refer to the same object.
            </summary>
            <param name="expected">
            The first object to compare. This is the value the test expects.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not the same as <paramref name="expected"/>. The message is shown
            in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> does not refer to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame(System.Object,System.Object)">
            <summary>
            Tests whether the specified objects refer to different objects and
            throws an exception if the two inputs refer to the same object.
            </summary>
            <param name="notExpected">
            The first object to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> refers to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame(System.Object,System.Object,System.String)">
            <summary>
            Tests whether the specified objects refer to different objects and
            throws an exception if the two inputs refer to the same object.
            </summary>
            <param name="notExpected">
            The first object to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is the same as <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> refers to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified objects refer to different objects and
            throws an exception if the two inputs refer to the same object.
            </summary>
            <param name="notExpected">
            The first object to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second object to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is the same as <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> refers to the same object
            as <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0)">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </summary>
            <typeparam name="T">The type of values to compare.</typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </summary>
            <typeparam name="T">The type of values to compare.</typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            Tests whether the specified values are equal and throws an exception
            if the two values are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </summary>
            <typeparam name="T">The type of values to compare.</typeparam>
            <param name="expected">
            The first value to compare. This is the value the tests expects.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0)">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </summary>
            <typeparam name="T">The type of values to compare.</typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </summary>
            <typeparam name="T">The type of values to compare.</typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            Tests whether the specified values are unequal and throws an exception
            if the two values are equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </summary>
            <typeparam name="T">The type of values to compare.</typeparam>
            <param name="notExpected">
            The first value to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second value to compare. This is the value produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Object,System.Object)">
            <summary>
            Tests whether the specified objects are equal and throws an exception
            if the two objects are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </summary>
            <param name="expected">
            The first object to compare. This is the object the tests expects.
            </param>
            <param name="actual">
            The second object to compare. This is the object produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Tests whether the specified objects are equal and throws an exception
            if the two objects are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </summary>
            <param name="expected">
            The first object to compare. This is the object the tests expects.
            </param>
            <param name="actual">
            The second object to compare. This is the object produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified objects are equal and throws an exception
            if the two objects are not equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </summary>
            <param name="expected">
            The first object to compare. This is the object the tests expects.
            </param>
            <param name="actual">
            The second object to compare. This is the object produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Object,System.Object)">
            <summary>
            Tests whether the specified objects are unequal and throws an exception
            if the two objects are equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </summary>
            <param name="notExpected">
            The first object to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second object to compare. This is the object produced by the code under test.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Object,System.Object,System.String)">
            <summary>
            Tests whether the specified objects are unequal and throws an exception
            if the two objects are equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </summary>
            <param name="notExpected">
            The first object to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second object to compare. This is the object produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Tests whether the specified objects are unequal and throws an exception
            if the two objects are equal. Different numeric types are treated
            as unequal even if the logical values are equal. 42L is not equal to 42.
            </summary>
            <param name="notExpected">
            The first object to compare. This is the value the test expects not
            to match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second object to compare. This is the object produced by the code under test.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first float to compare. This is the float the tests expects.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first float to compare. This is the float the tests expects.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Tests whether the specified floats are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first float to compare. This is the float the tests expects.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single)">
            <summary>
            Tests whether the specified floats are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first float to compare. This is the float the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Tests whether the specified floats are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first float to compare. This is the float the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Tests whether the specified floats are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first float to compare. This is the float the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second float to compare. This is the float produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first double to compare. This is the double the tests expects.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first double to compare. This is the double the tests expects.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Tests whether the specified doubles are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first double to compare. This is the double the tests expects.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="expected"/>
            by more than <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is different than <paramref name="expected"/> by more than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double)">
            <summary>
            Tests whether the specified doubles are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first double to compare. This is the double the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Tests whether the specified doubles are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first double to compare. This is the double the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Tests whether the specified doubles are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first double to compare. This is the double the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second double to compare. This is the double produced by the code under test.
            </param>
            <param name="delta">
            The required accuracy. An exception will be thrown only if
            <paramref name="actual"/> is different than <paramref name="notExpected"/>
            by at most <paramref name="delta"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/> or different by less than
            <paramref name="delta"/>. The message is shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean)">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal. The invariant culture is used for the comparison.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Tests whether the specified strings are equal and throws an exception
            if they are not equal.
            </summary>
            <param name="expected">
            The first string to compare. This is the string the tests expects.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is not equal to <paramref name="expected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="expected"/> is not equal to 
            <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean)">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal. The invariant culture is used for the comparison.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal. The invariant culture is used for the comparison.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal. The invariant culture is used for the comparison.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Tests whether the specified strings are unequal and throws an exception
            if they are equal.
            </summary>
            <param name="notExpected">
            The first string to compare. This is the string the test expects not to
            match <paramref name="actual"/>.
            </param>
            <param name="actual">
            The second string to compare. This is the string produced by the code under test.
            </param>
            <param name="ignoreCase">
            A Boolean indicating a case-sensitive or insensitive comparison. (true
            indicates a case-insensitive comparison.)
            </param>
            <param name="culture">
            A CultureInfo object that supplies culture-specific comparison information.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="actual"/>
            is equal to <paramref name="notExpected"/>. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type)">
            <summary>
            Tests whether the specified object is an instance of the expected
            type and throws an exception if the expected type is not in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects to be of the specified type.
            </param>
            <param name="expectedType">
            The expected type of <paramref name="value"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null or
            <paramref name="expectedType"/> is not in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,System.String)">
            <summary>
            Tests whether the specified object is an instance of the expected
            type and throws an exception if the expected type is not in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects to be of the specified type.
            </param>
            <param name="expectedType">
            The expected type of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not an instance of <paramref name="expectedType"/>. The message is
            shown in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null or
            <paramref name="expectedType"/> is not in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is an instance of the expected
            type and throws an exception if the expected type is not in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects to be of the specified type.
            </param>
            <param name="expectedType">
            The expected type of <paramref name="value"/>.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is not an instance of <paramref name="expectedType"/>. The message is
            shown in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is null or
            <paramref name="expectedType"/> is not in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type)">
            <summary>
            Tests whether the specified object is not an instance of the wrong
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects not to be of the specified type.
            </param>
            <param name="wrongType">
            The type that <paramref name="value"/> should not be.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null and
            <paramref name="wrongType"/> is in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String)">
            <summary>
            Tests whether the specified object is not an instance of the wrong
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects not to be of the specified type.
            </param>
            <param name="wrongType">
            The type that <paramref name="value"/> should not be.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is an instance of <paramref name="wrongType"/>. The message is shown
            in test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null and
            <paramref name="wrongType"/> is in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Tests whether the specified object is not an instance of the wrong
            type and throws an exception if the specified type is in the
            inheritance hierarchy of the object.
            </summary>
            <param name="value">
            The object the test expects not to be of the specified type.
            </param>
            <param name="wrongType">
            The type that <paramref name="value"/> should not be.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="value"/>
            is an instance of <paramref name="wrongType"/>. The message is shown
            in test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="value"/> is not null and
            <paramref name="wrongType"/> is in the inheritance hierarchy
            of <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail">
            <summary>
            Throws an AssertFailedException.
            </summary>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail(System.String)">
            <summary>
            Throws an AssertFailedException.
            </summary>
            <param name="message">
            The message to include in the exception. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Fail(System.String,System.Object[])">
            <summary>
            Throws an AssertFailedException.
            </summary>
            <param name="message">
            The message to include in the exception. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive">
            <summary>
            Throws an AssertInconclusiveException.
            </summary>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive(System.String)">
            <summary>
            Throws an AssertInconclusiveException.
            </summary>
            <param name="message">
            The message to include in the exception. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.Inconclusive(System.String,System.Object[])">
            <summary>
            Throws an AssertInconclusiveException.
            </summary>
            <param name="message">
            The message to include in the exception. The message is shown in
            test results.
            </param>
            <param name="parameters">
            An array of parameters to use when formatting <paramref name="message"/>.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException">
            Always thrown.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.HandleFail(System.String,System.String,System.Object[])">
            <summary>
            Helper function that creates and throws an AssertionFailedException.
            </summary>
            <param name="assertionName">name of the assertion throwing an exception.</param>
            <param name="message">message describing conditions for assertion failure.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.CheckParameterNotNull(System.Object,System.String,System.String,System.String,System.Object[])">
            <summary>
            Checks the parameter for valid conditions
            </summary>
            <param name="param">The parameter.</param>
            <param name="assertionName">The assertion name.</param>
            <param name="parameterName">The parameter name.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNulls(System.Object)">
            <summary>
            Safely converts an object to a string, handling null values and null characters.
            Null values are converted to "(null)". Null characters are converted to "\\0".
            </summary>
            <param name="input">The object to convert to a string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.ReplaceNullChars(System.String)">
            <summary>
            Replaces null characters ('\0') with "\\0".
            </summary>
            <param name="input">The string to search.</param>
            <returns>The converted string with null characters replaced by "\\0".</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Helper.ThrowInnerException(System.Reflection.TargetInvocationException)">
            <summary>
            An exception from reflection will always be a TargetInvocationException - however
            the goal of Private Accessors is to be seamless to the original code.
            The only problem with throwing the inner exception is that the stack trace will
            be overwritten.  From here we register the stack trace of the inner exception
            and then throw it.  The Unit Test Adapter will then later rebuild the stack
            from the cached shadow information plus the remaining stack from this throw.
            </summary>
            <param name="outer"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert">
            <summary>
            A collection of helper classes to test various conditions associated
            with collections within unit tests. If the condition being tested is not
            met, an exception is thrown.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object)">
            <summary>
            Tests whether the specified collection contains the specified element
            and throws an exception if the element is not in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected to be in the collection.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="element"/> is not found in
            <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String)">
            <summary>
            Tests whether the specified collection contains the specified element
            and throws an exception if the element is not in the collection.
            </summary>
            <param name="collection">
            The collection in which to search for the element.
            </param>
            <param name="element">
            The element that is expected to be in the collection.
            </param>
            <param name="message">
            The message to include in the exception when <paramref name="element"/>
            is not in <paramref name="collection"/>. The message is shown in
            test results.
            </param>
            <exception cref="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException">
            Thrown if <paramref name="element"/> is not found in
            <paramref name="collection"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Visua