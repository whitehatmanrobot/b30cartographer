summary>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to associate with the <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" />.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.CategoriesDocumentFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.CategoriesDocumentFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> associated with the <see cref="T:System.ServiceModel.Syndication.CategoriesDocumentFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.InlineCategoriesDocument">
      <summary>Represents a &lt;atom:categories&gt; element within a service document.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.InlineCategoriesDocument.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.InlineCategoriesDocument.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationCategory})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> class.</summary>
      <param name="categories">A collection of syndication categories.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.InlineCategoriesDocument.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationCategory},System.Boolean,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> class.</summary>
      <param name="categories">A collection of syndication categories.</param>
      <param name="isFixed">Specifies whether syndication categories can be added to the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</param>
      <param name="scheme">The scheme of the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.InlineCategoriesDocument.Categories">
      <summary>Gets the collection of syndication categories associated with the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</summary>
      <returns>
Returns a collection of syndication categories.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.InlineCategoriesDocument.CreateCategory">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>
Returns a new  <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.InlineCategoriesDocument.IsFixed">
      <summary>Gets and sets a value that specifies whether syndication categories can be added to the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that specifies if new syndication categories can be added.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.InlineCategoriesDocument.Scheme">
      <summary>Gets and sets the scheme of the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</summary>
      <returns>
Returns the scheme of the <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.
</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument">
      <summary>Represents a reference to a categories document.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ReferencedCategoriesDocument.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ReferencedCategoriesDocument.#ctor(System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> class.</summary>
      <param name="link">The URL to the referenced categories document.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ReferencedCategoriesDocument.Link">
      <summary>Gets and sets the URI for the categories document.</summary>
      <returns>
Returns <see cref="T:System.Uri" />.
</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.ResourceCollectionInfo">
      <summary>Represents a collection of resources represented by &lt;atom:collection&gt; element.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor(System.ServiceModel.Syndication.TextSyndicationContent,System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> class.</summary>
      <param name="title">The title of the collection.</param>
      <param name="link">The URI of the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor(System.ServiceModel.Syndication.TextSyndicationContent,System.Uri,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.CategoriesDocument},System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> class.</summary>
      <param name="title">The title of the collection.</param>
      <param name="link">The URI of the collection.</param>
      <param name="categories">A collection of categories documents.</param>
      <param name="allowsNewEntries">A value that specifies whether new &lt;accept&gt; elements can be added to the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor(System.ServiceModel.Syndication.TextSyndicationContent,System.Uri,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.CategoriesDocument},System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> class.</summary>
      <param name="title">The title of the collection.</param>
      <param name="link">The URI of the collection.</param>
      <param name="categories">A collection of categories documents.</param>
      <param name="accepts">A collection of resource types that can be added to the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.#ctor(System.String,System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> class.</summary>
      <param name="title">The title of the collection.</param>
      <param name="link">The URI of the collection.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.Accepts">
      <summary>Gets a collection of resource types that can be added to the collection.</summary>
      <returns>
Returns <see cref="T:System.Collections.ObjectModel.Collection`1" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.AttributeExtensions">
      <summary>Gets a collection of attribute extensions.</summary>
      <returns>
Returns <see cref="T:System.Collections.Generic.Dictionary`2" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.BaseUri">
      <summary>Gets and sets the base URI for the <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> instance.</summary>
      <returns>
Returns <see cref="T:System.Uri" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.Categories">
      <summary>Gets a collection of <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> objects.</summary>
      <returns>
Returns <see cref="T:System.Collections.ObjectModel.Collection`1" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.CreateInlineCategoriesDocument">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> instance.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.CreateReferencedCategoriesDocument">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" /> instance.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.ElementExtensions">
      <summary>Gets the element extensions for the service document.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.Link">
      <summary>Gets and sets the URI for the collection.</summary>
      <returns>
Returns <see cref="T:System.Uri" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ResourceCollectionInfo.Title">
      <summary>The title of the collection.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ResourceCollectionInfo.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20FeedFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to and from RSS 2.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification but not in the RSS 2.0 specification. The default value is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class.</summary>
      <param name="feedTypeToCreate">The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to be serialized.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication feed.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication feed.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.CreateFeedInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.FeedType">
      <summary>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.PreserveAttributeExtensions">
      <summary>Gets and sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.PreserveElementExtensions">
      <summary>Gets and sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an RSS 2.0 syndication feed from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadItem(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Reads a syndication item from <see cref="T:System.Xml.XmlReader" /> instance using the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadItems(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Boolean@)">
      <summary>Reads in a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use to create the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</param>
      <param name="areAllItemsRead">A value that specifies whether all of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances have been read from the <see cref="T:System.Xml.XmlReader" /> instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.SerializeExtensionsAsAtom">
      <summary>Gets and sets a value that specifies whether to serialize extensions within the Atom 1.0 namespace.</summary>
      <returns>A value that specifies whether to serialize extensions within the Atom 1.0 namespace.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.SetFeed(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Sets the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" />.</summary>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to associate with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteItem(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.Uri)">
      <summary>Writes the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteItems(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem},System.Uri)">
      <summary>Writes a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived classes to RSS 2.0 format.</summary>
      <typeparam name="TSyndicationFeed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived type to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived instance.</summary>
      <param name="feedToWrite">The feed to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor(`0,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived instance.</summary>
      <param name="feedToWrite">The feed to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification, but not in the RSS 2.0 specification. The default is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.CreateFeedInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20ItemFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to and from RSS 2.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification but not in the RSS 2.0 specification. The default value is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
      <param name="itemTypeToCreate">The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to associate with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication item.</summary>
      <returns>A value that specifies if the <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication item.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.CreateItemInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.ItemType">
      <summary>Gets the type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</summary>
      <returns>The type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.PreserveAttributeExtensions">
      <summary>Gets or sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.PreserveElementExtensions">
      <summary>Gets or sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an RSS 2.0 syndication item from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.SerializeExtensionsAsAtom">
      <summary>Gets and sets a value that specifies whether to serialize extensions within the Atom 1.0 namespace.</summary>
      <returns>A value that specifies whether to serialize extensions within the Atom 1.0 namespace.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived classes to and from RSS 2.0 format.</summary>
      <typeparam name="TSyndicationItem">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived type to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor(`0,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification but not in the RSS 2.0 specification. The default value is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.CreateItemInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.ServiceDocument">
      <summary>Represents a service document.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.Workspace})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> class, initializing it with the specified collection of <see cref="T:System.ServiceModel.Syndication.Workspace" /> instances.</summary>
      <param name="workspaces">A collection of workspaces.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.AttributeExtensions">
      <summary>Gets a collection of attribute extensions.</summary>
      <returns>
A <see cref="T:System.Collections.Generic.Dictionary`2" /> instance.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.BaseUri">
      <summary>Gets and sets the base URI for the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance.</summary>
      <returns>
The base URI.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.CreateWorkspace">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.Workspace" /> instance.</summary>
      <returns>
A new workspace.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.ElementExtensions">
      <summary>Gets the element extensions for the service document.</summary>
      <returns>
A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> instance containing the element extensions.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.GetFormatter">
      <summary>Gets a <see cref="T:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter" /> instance.</summary>
      <returns>
A <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> instance.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.Language">
      <summary>Gets and sets the language of the service document.</summary>
      <returns>
The language of the service document.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.Load``1(System.Xml.XmlReader)">
      <summary>Loads a service document from the specified <see cref="T:System.Xml.XmlReader" /> into a <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> derived instance.</summary>
      <returns>A<see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read the service document from.</param>
      <typeparam name="TServiceDocument">The type of the service document.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.Load(System.Xml.XmlReader)">
      <summary>Loads a service document from the specified <see cref="T:System.Xml.XmlReader" /> into a <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance.</summary>
      <returns>
A <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read the service document from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.Save(System.Xml.XmlWriter)">
      <summary>Saves the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance to the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to save the service document to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>true if the attribute is successfully parsed; otherwise, false.
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>true if the element is successfully parsed; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocument.Workspaces">
      <summary>Gets a collection of workspaces contained within the service document.</summary>
      <returns>
A collection of workspaces.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocument.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.ServiceDocumentFormatter">
      <summary>An abstract class used as a base class for other formatters, such as <see cref="T:System.ServiceModel.Syndication.AtomPub10ServiceDocumentFormatter" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.#ctor(System.ServiceModel.Syndication.ServiceDocument)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.ServiceDocumentFormatter" /> class.</summary>
      <param name="documentToWrite">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid service document.</summary>
      <returns>true, if the XML reader contains a valid service document, otherwise false.
</returns>
      <param name="reader">An XML reader to check.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateCategory(System.ServiceModel.Syndication.InlineCategoriesDocument)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class.</summary>
      <returns>
Returns a new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.
</returns>
      <param name="inlineCategories">An <see cref="T:System.ServiceModel.Syndication.InlineCategories" /> instance used to create the new categories document.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateCollection(System.ServiceModel.Syndication.Workspace)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> instance.</summary>
      <returns>
Returns a new <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> instance.
</returns>
      <param name="workspace">A <see cref="T:System.ServiceModel.Syndication.Workspace" /> instance used to create the new collection.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateDocumentInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance.</summary>
      <returns>
Returns a new <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> instance.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateInlineCategories(System.ServiceModel.Syndication.ResourceCollectionInfo)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</summary>
      <returns>
Returns a new <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" /> instance.
</returns>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.InlineCategoriesDocument" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateReferencedCategories(System.ServiceModel.Syndication.ResourceCollectionInfo)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />.</summary>
      <returns>
Returns a new <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />.
</returns>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> instance to use to create the new <see cref="T:System.ServiceModel.Syndication.ReferencedCategoriesDocument" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.CreateWorkspace(System.ServiceModel.Syndication.ServiceDocument)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.Workspace" /></summary>
      <returns>
Returns a new <see cref="T:System.ServiceModel.Syndication.Workspace" />.
</returns>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to create the new workspace.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocumentFormatter.Document">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> associated with the formatter.</summary>
      <returns>
Returns the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> associated with the formatter.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.CategoriesDocument,System.Int32)">
      <summary>Loads element extensions.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="categories">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to use to read the element extensions.</param>
      <param name="maxExtensionSize">The maximum size of an element extension to be loaded.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.ResourceCollectionInfo,System.Int32)">
      <summary>Loads element extensions.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to load the element extensions.</param>
      <param name="maxExtensionSize">The maximum size of an extension to load.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.ServiceDocument,System.Int32)">
      <summary>Loads element extensions.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to read the element extensions.</param>
      <param name="maxExtensionSize">The maximum size of an extension to load.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.Workspace,System.Int32)">
      <summary>Loads element extensions.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to load the element extensions.</param>
      <param name="maxExtensionSize">The maximum size of an extension to load.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads a service document from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.SetDocument(System.ServiceModel.Syndication.ServiceDocument)">
      <summary>Sets the <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to write.</summary>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to write.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.CategoriesDocument,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the attribute extension was successfully parsed.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="categories">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to use to parse the attribute extension.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.ResourceCollectionInfo,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the attribute extension was parsed successfully.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to parse the attribute.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.ServiceDocument,System.String)">
      <summary>Attempts to parse an attribute extensions.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the attribute extension was parsed successfully.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute extension to parse.</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to parse the attribute extension.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.Workspace,System.String)">
      <summary>Attempts to parse an attribute extension</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the attribute extension was parsed successfully.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to parse the attribute.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.CategoriesDocument,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the element extension was parsed successfully.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="categories">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to use to parse the element extension.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.ResourceCollectionInfo,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the element extension was parsed successfully.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to parse the element extension.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.ServiceDocument,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the element extension was successfully parsed.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to parse the element extension.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.Workspace,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>
Returns a <see cref="T:System.Boolean" /> that indicates whether the element extension was parsed successfully.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to parse the element extension.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.ServiceDocumentFormatter.Version">
      <summary>Gets the version of the formatter.</summary>
      <returns>
Returns a <see cref="T:System.String" /> that contains the version of the formatter.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.CategoriesDocument,System.String)">
      <summary>Writes attribute extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="categories">The <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to use to write the element extensions.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.ResourceCollectionInfo,System.String)">
      <summary>Writes attribute extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to write the attribute extensions.</param>
      <param name="version">The syndication version to use when writing the attribute extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.ServiceDocument,System.String)">
      <summary>Writes attribute extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to write the attribute extensions.</param>
      <param name="version">The syndication version to use when writing the attribute extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.Workspace,System.String)">
      <summary>Writes attribute extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to write the attribute extensions.</param>
      <param name="version">The syndication version to use when writing the attribute extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.CategoriesDocument,System.String)">
      <summary>Writes element extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="categories">The  <see cref="T:System.ServiceModel.Syndication.CategoriesDocument" /> to use to write the element extensions.</param>
      <param name="version">The syndication version to use when writing the element extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.ResourceCollectionInfo,System.String)">
      <summary>Writes element extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="collection">The <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> to use to write the element extensions.</param>
      <param name="version">The syndication version to use when writing the element extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.ServiceDocument,System.String)">
      <summary>Writes element extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="document">The <see cref="T:System.ServiceModel.Syndication.ServiceDocument" /> to use to write the element extensions.</param>
      <param name="version">The syndication version to use when writing the element extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.Workspace,System.String)">
      <summary>Writes element extensions.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="workspace">The <see cref="T:System.ServiceModel.Syndication.Workspace" /> to use to write the element extensions.</param>
      <param name="version">The syndication version to use when writing the element extensions.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.ServiceDocumentFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes a service document to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationCategory">
      <summary>A class that represents the category of a syndication feed. </summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.ServiceModel.Syndication.SyndicationCategory)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to initialize the new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class with the given name.</summary>
      <param name="name">The name of the category.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class with the specified name, scheme, and label.</summary>
      <param name="name">The name of the category.</param>
      <param name="scheme">A Uniform Resource Identifier (URI) that represents the categorization scheme to which this category belongs.</param>
      <param name="label">A human-readable attribute that describes the category.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.AttributeExtensions">
      <summary>Gets the attribute extensions for this category.</summary>
      <returns>The attribute extensions for this category.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.Clone">
      <summary>Creates a copy of a <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.ElementExtensions">
      <summary>Gets the element extensions for this category.</summary>
      <returns>A collection of element extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Label">
      <summary>Gets and sets the label of the category.</summary>
      <returns>The label of the category.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Name">
      <summary>Gets and sets the name of the category.</summary>
      <returns>The name of the category.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Scheme">
      <summary>Gets and sets the scheme of the category.</summary>
      <returns>The scheme of the category.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension has been parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationContent">
      <summary>A base class that represents syndication content.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.#ctor(System.ServiceModel.Syndication.SyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance to use to initialize the new instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationContent.AttributeExtensions">
      <summary>Gets the attribute extensions for this content.</summary>
      <returns>A dictionary that contains the attribute extensions for this object.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.Clone">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</summary>
      <returns>A copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateHtmlContent(System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance with the specified HTML content.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</returns>
      <param name="content">The text of the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreatePlaintextContent(System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance with the specified plain text content.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</returns>
      <param name="content">The plain text content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateUrlContent(System.Uri,System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance with the specified <see cref="T:System.Uri" /> and media type.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</returns>
      <param name="url">The <see cref="T:System.Uri" /> of the content.</param>
      <param name="mediaType">The media type of the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXhtmlContent(System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance with the specified XHTML content.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</returns>
      <param name="content">The XHTML content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance with the specified data contract object.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</returns>
      <param name="dataContractObject">The data contract object.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance with the specified data contract object and data contract serializer.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</returns>
      <param name="dataContractObject">The data contract object.</param>
      <param name="dataContractSerializer">The data contract serializer.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance with the specified object and XML serializer.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</returns>
      <param name="xmlSerializerObject">The object.</param>
      <param name="serializer">The XML serializer.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Xml.XmlReader)">
      <summary>Creates XML syndication content.</summary>
      <returns>An instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> class that contains the new content.</returns>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationContent.Type">
      <summary>Gets the syndication content type.</summary>
      <returns>The name of the type of syndication content.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Writes the contents of this <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> object to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.WriteTo(System.Xml.XmlWriter,System.String,System.String)">
      <summary>Writes the contents of this object to the specified <see cref="T:System.Xml.XmlWriter" /> within the specified element and element namespace.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="outerElementName">The name of the element.</param>
      <param name="outerElementNamespace">The namespace of the element.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationElementExtension">
      <summary>A class that represents a syndication element extension.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified object.</summary>
      <param name="dataContractExtension">The data contract object used to initialize the extension. </param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified object and data contract serializer.</summary>
      <param name="dataContractExtension">The data contract object used to initialize the extension.</param>
      <param name="dataContractSerializer">The data contract serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified object and XML serializer.</summary>
      <param name="xmlSerializerExtension">The object used to initialize the extension.</param>
      <param name="serializer">The XML serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.String,System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified outer name, outer namespace, and object.</summary>
      <param name="outerName">The name of the enclosing XML element.</param>
      <param name="outerNamespace">The namespace of the enclosing XML element.</param>
      <param name="dataContractExtension">The object used to initialize the extension.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified outer name, outer namespace, object, and data contract serializer.</summary>
      <param name="outerName">The name of the enclosing XML element.</param>
      <param name="outerNamespace">The namespace of the enclosing XML element.</param>
      <param name="dataContractExtension">The object used to initialize the extension.</param>
      <param name="dataContractSerializer">The data contract serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> that contains the content of the new <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1">
      <summary>Gets the object that represents the element extension.</summary>
      <returns>An object of the specified type that contains the element extension.</returns>
      <typeparam name="TExtension">The type of the extension to retrieve.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Gets the object that represents the element extension.</summary>
      <returns>An object of the specified type that contains the element extension.</returns>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to retrieve.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1(System.Xml.Serialization.XmlSerializer)">
      <summary>Gets the object that represents the element extension.</summary>
      <returns>An object of the specified type that contains the element extension.</returns>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to retrieve.</typeparam>
      <exception cref="T:System.InvalidOperationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetReader">
      <summary>Gets the <see cref="T:System.Xml.XmlReader" /> associated with the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlReader" /> associated with the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationElementExtension.OuterName">
      <summary>Gets the outer name of the element extension.</summary>
      <returns>The outer name of the element extension.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationElementExtension.OuterNamespace">
      <summary>Gets the outer namespace of the element extension.</summary>
      <returns>The outer namespace of the element extension.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the current extension to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection">
      <summary>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> objects.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object)">
      <summary>Adds the specified <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> object to the collection.</summary>
      <param name="extension">The <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> object to add.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object,System.Runtime.Serialization.DataContractSerializer)">
      <summary>Adds the specified object to the collection using the specified data contract serializer.</summary>
      <param name="dataContractExtension">The object to add to the collection.</param>
      <param name="serializer">The serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Adds the specified object to the collection using the specified XML serializer.</summary>
      <param name="xmlSerializerExtension">The object to add to the collection.</param>
      <param name="serializer">The XML serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.String,System.String,System.Object)">
      <summary>Adds the specified object to the collection with the specified outer name and outer namespace.</summary>
      <param name="outerName">The outer name.</param>
      <param name="outerNamespace">The outer namespace.</param>
      <param name="dataContractExtension">The object to add to the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Adds the specified object to the collection with the specified outer name and outer namespace using the specified data contract serializer.</summary>
      <param name="outerName">The outer name.</param>
      <param name="outerNamespace">The outer namespace.</param>
      <param name="dataContractExtension">The object to add to the collection.</param>
      <param name="dataContractSerializer">The serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Xml.XmlReader)">
      <summary>Adds a new syndication element extension to the collection.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to read the syndication element extension from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.GetReaderAtElementExtensions">
      <summary>Gets an <see cref="T:System.Xml.XmlReader" /> with the element extensions.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> that contains the element extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String)">
      <summary>Reads the element extensions with the specified name and namespace.</summary>
      <returns>A collection of element extension objects.</returns>
      <param name="extensionName">The name of the element extension.</param>
      <param name="extensionNamespace">The namespace of the element extension.</param>
      <typeparam name="TExtension">The type of the extension to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Reads the element extensions with the specified name and namespace.</summary>
      <returns>A collection of element extension objects.</returns>
      <param name="extensionName">The name of the element extension.</param>
      <param name="extensionNamespace">The namespace of the element extension.</param>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String,System.Xml.Serialization.XmlSerializer)">
      <summary>Reads the element extensions with the specified name and namespace.</summary>
      <returns>A collection of element extension objects.</returns>
      <param name="extensionName">The name of the element extension.</param>
      <param name="extensionNamespace">The namespace of the element extension.</param>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to read.</typeparam>
      <exception cref="T:System.InvalidOperationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationFeed">
      <summary>Represents a top-level feed object, &lt;feed&gt; in Atom 1.0 and &lt;rss&gt; in RSS 2.0.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</summary>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.ServiceModel.Syndication.SyndicationFeed,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified feed.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to initialize the new instance.</param>
      <param name="cloneItems">A value that specifies whether to clone the items in the source instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified title, description, and Uniform Resource Identifier (URI).</summary>
      <param name="title">The title of the feed.</param>
      <param name="description">The description of the feed.</param>
      <param name="feedAlternateLink">The URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified title, description, URI, and collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</summary>
      <param name="title">The title of the feed.</param>
      <param name="description">The description of the feed.</param>
      <param name="feedAlternateLink">The URI for the feed.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
      <param name="title">The syndication feed title.</param>
      <param name="description">The syndication feed description.</param>
      <param name="feedAlternateLink">The alternate URI for the syndication feed.</param>
      <param name="id">The ID of the syndication feed.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication feed was updated.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
      <param name="title">The syndication feed title.</param>
      <param name="description">The syndication feed description.</param>
      <param name="feedAlternateLink">The alternate URI for the syndication feed.</param>
      <param name="id">The ID of the syndication feed.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication feed was updated.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.AttributeExtensions">
      <summary>Gets a collection of attribute extensions.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Authors">
      <summary>Gets a collection of authors of the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represents the authors of the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.BaseUri">
      <summary>Gets and sets the base URI for the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>The base URI for the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Categories">
      <summary>Gets a collection of categories for the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> objects that represent the categories for the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Clone(System.Boolean)">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A duplicate <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> object.</returns>
      <param name="cloneItems">A value that specifies whether the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects are cloned.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Contributors">
      <summary>Gets a collection of the contributors to the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represents the contributors to the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Copyright">
      <summary>Gets and sets copyright information for the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> object that represents copyright information for the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateCategory">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateItem">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateLink">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreatePerson">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Description">
      <summary>Gets and sets a description of the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> object that represents the description of the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.ElementExtensions">
      <summary>Gets the element extensions for the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> instance that contains the element extensions in the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Generator">
      <summary>Gets and sets the generator of the feed.</summary>
      <returns>The name of the tool that generated the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetAtom10Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetRss20Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetRss20Formatter(System.Boolean)">
      <summary>Gets a new <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize element and attribute extensions with an Atom 1.0 namespace.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Id">
      <summary>Gets and sets the ID of the feed.</summary>
      <returns>The ID of the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.ImageUrl">
      <summary>Gets and sets the image URL for the feed.</summary>
      <returns>The URL for the image for the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Items">
      <summary>Gets a collection of the feed items contained in the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Language">
      <summary>Gets and sets the language of the feed.</summary>
      <returns>The name of the language the feed is written in. </returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.LastUpdatedTime">
      <summary>Gets and sets the time the feed was last updated.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> instance set to the time the feed was last updated.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Links">
      <summary>Gets the links associated with the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> objects.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Load(System.Xml.XmlReader)">
      <summary>Loads a syndication feed from the specified XML reader.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that contains the loaded contents.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to load the feed from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Load``1(System.Xml.XmlReader)">
      <summary>Loads a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived instance from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived instance that contains the feed.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <typeparam name="TSyndicationFeed">The syndication feed type.</typeparam>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.SaveAsAtom10(System.Xml.XmlWriter)">
      <summary>Write the syndication feed to the specified <see cref="T:System.Xml.XmlWriter" /> in Atom 1.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.SaveAsRss20(System.Xml.XmlWriter)">
      <summary>Write the syndication feed to the specified <see cref="T:System.Xml.XmlWriter" /> in RSS 2.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Title">
      <summary>Gets and sets the title of the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance that contains the title of the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML Encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationFeedFormatter">
      <summary>An abstract class used as a base class for other formatters, (for example <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" />).</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to write. </param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid syndication feed.</summary>
      <returns>true, if the XML reader contains a valid syndication feed, otherwise false.</returns>
      <param name="reader">An XML reader to check.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> used to create the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateFeedInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateItem(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeedFormatter.Feed">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the formatter.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads in a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.SetFeed(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Associates a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance with the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" />.</summary>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to associate with the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.ToString">
      <summary>Gets a string representation of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> instance.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseContent(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>Attempts to parse syndication item content using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the content was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="contentType">The content type.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <param name="content">The content to parse.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeedFormatter.Version">
      <summary>Gets the syndication version of the formatter.</summary>
      <returns>The syndication version of the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to the specified <see cref="T:System.Xml.XmlWriter" /> instance.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationItem">
      <summary>Represents a feed item, for example an RSS &lt;item&gt; or an Atom &lt;entry&gt;.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <param name="source">A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance used to initialize the new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.ServiceModel.Syndication.SyndicationContent,System.Uri,System.String,System.DateTimeOffset)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
      <param name="title">The title of the syndication item.</param>
      <param name="content">A <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance containing the content of the syndication item.</param>
      <param name="itemAlternateLink">The alternate URI for the syndication item.</param>
      <param name="id">The ID of the syndication item.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication item was last updated.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.String,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class with the specified title, content, and link.</summary>
      <param name="title">The item title.</param>
      <param name="content">The item content.</param>
      <param name="itemAlternateLink">The item URL.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
      <param name="title">The title of the syndication item.</param>
      <param name="content">The content of the syndication item.</param>
      <param name="itemAlternateLink">The alternate URI for the syndication item.</param>
      <param name="id">The ID of the syndication item.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication item was last updated.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.AddPermalink(System.Uri)">
      <summary>Adds a permalink to the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</summary>
      <param name="permalink">The <see cref="T:System.Uri" /> that points to the content.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.AttributeExtensions">
      <summary>Gets the attribute extensions for the syndication item.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Authors">
      <summary>Gets the authors of the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represent the authors of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.BaseUri">
      <summary>Gets and sets the base Uniform Resource Identifier (URI) for the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>The base URI of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Categories">
      <summary>Gets the syndication categories for the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> objects that represent the categories of the syndication item.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Clone">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Content">
      <summary>Gets and sets the content of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance that contains the content of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Contributors">
      <summary>Gets the contributors of the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represent the contributors of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Copyright">
      <summary>Gets and sets the copyright information for the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance that represents copyright information.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreateCategory">
      <summary>Creates a new category.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> object.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreateLink">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreatePerson">
      <summary>Creates a new person.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> object.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.ElementExtensions">
      <summary>Gets the element extensions contained in the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> that contains the element extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetAtom10Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetRss20Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetRss20Formatter(System.Boolean)">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize element and attribute extensions with an Atom 1.0 namespace.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Id">
      <summary>Gets and sets the ID of the syndication item.</summary>
      <returns>The ID of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.LastUpdatedTime">
      <summary>Gets and sets the last updated time for the syndication item.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> instance that represents the time the syndication item was last updated.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Links">
      <summary>Gets the links contained in the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> objects.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Load``1(System.Xml.XmlReader)">
      <summary>Loads a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived object from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived object that contains the syndication item.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <typeparam name="TSyndicationItem">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived class to load.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Load(System.Xml.XmlReader)">
      <summary>Loads a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from. </param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.PublishDate">
      <summary>Gets and sets the publish date for the syndication item.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object that represents the publish date for the syndication item.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.SaveAsAtom10(System.Xml.XmlWriter)">
      <summary>Write the syndication item to the specified <see cref="T:System.Xml.XmlWriter" /> in Atom 1.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.SaveAsRss20(System.Xml.XmlWriter)">
      <summary>Write the syndication item to the specified <see cref="T:System.Xml.XmlWriter" /> in RSS 2.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.SourceFeed">
      <summary>Gets and sets the source feed of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance where the syndication item is located.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Summary">
      <summary>Gets and sets the summary of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> that contains a summary of the item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Title">
      <summary>Gets and sets the title of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> object that contains the title of the syndication item.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseContent(System.Xml.XmlReader,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>Attempts to parse content.</summary>
      <returns>A value that specifies whether the content was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="contentType">The content type of the content.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <param name="content">The <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance to load the parsed content into.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specific syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationItemFormatter">
      <summary>An abstract class used as a base class for other formatters, (for example, <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" />).</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to write.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid syndication item.</summary>
      <returns>true, if the XML reader contains a valid syndication item, otherwise false.</returns>
      <param name="reader">An XML reader to check.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> used to create the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateItemInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItemFormatter.Item">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the formatter.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> using the specified <see cref="T:System.Xml.XmlReader" /> and maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads in a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.SetItem(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Associates a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance with the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" />.</summary>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to associate with the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.ToString">
      <summary>Gets a string representation of the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> instance.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseContent(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>Attempts to parse syndication item content using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the content was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="contentType">The content type.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <param name="content">The content to parse.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItemFormatter.Version">
      <summary>Gets the syndication version of the formatter.</summary>
      <returns>The syndication version of the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to the specified <see cref="T:System.Xml.XmlWriter" /> instance.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationLink">
      <summary>Represents a link within a syndication feed or item.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.ServiceModel.Syndication.SyndicationLink)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance used to initialize the new instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.Uri" />.</summary>
      <param name="uri">The URI to the linked resource.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.Uri,System.String,System.String,System.String,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.Uri" />, relation type, title, media type, and length.</summary>
      <param name="uri">The URI to the linked resource.</param>
      <param name="relationshipType">The relationship type.</param>
      <param name="title">The title of the link.</param>
      <param name="mediaType">The media type of the link.</param>
      <param name="length">The length of the linked content.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.AttributeExtensions">
      <summary>Gets the attribute extensions of the link.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.BaseUri">
      <summary>Gets and sets the base URI of the syndication link.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the base URI of the syndication link.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.Clone">
      <summary>Creates a copy of the current <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateAlternateLink(System.Uri)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> object with the specified <see cref="T:System.Uri" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI of the linked resource.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateAlternateLink(System.Uri,System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> object with the specified <see cref="T:System.Uri" /> and media type.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI of the linked resource.</param>
      <param name="mediaType">The media type of the link.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateMediaEnclosureLink(System.Uri,System.String,System.Int64)">
      <summary>Creates a media enclosure link with the specified URI, media type, and length.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI of the linked resource.</param>
      <param name="mediaType">The media type of the link.</param>
      <param name="length">The length of the linked content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateSelfLink(System.Uri)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> with the specified URI and relationship type set to self.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI to the linked resource.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateSelfLink(System.Uri,System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> with the specified URI, media type, and relationship type set to self.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI to the linked resource.</param>
      <param name="mediaType">The media type of the link.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.ElementExtensions">
      <summary>Gets the element extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> that contains the element extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.GetAbsoluteUri">
      <summary>Gets the absolute URI for the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the absolute URI of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Length">
      <summary>Gets and sets the length of the linked resource in bytes.</summary>
      <returns>The length of the linked resource.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.MediaType">
      <summary>Gets and sets the media type of the linked resource.</summary>
      <returns>The media type of the linked resource.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.RelationshipType">
      <summary>Gets and sets the relationship type of the linked resource.</summary>
      <returns>The relationship type of the linked resource.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Title">
      <summary>Gets and sets the title of the linked resource.</summary>
      <returns>The title of the linked resource.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Uri">
      <summary>Gets and sets the URI for the linked resource.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the URI for the linked resource.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationPerson">
      <summary>Represents an author or contributor of syndication content.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.ServiceModel.Syndication.SyndicationPerson)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> class with the specified instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to initialize the new instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.String)">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified e-mail address.</summary>
      <param name="email">The e-mail address of the person.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified e-mail address, name, and Uniform Resource Identifier (URI).</summary>
      <param name="email">The e-mail address of the person.</param>
      <param name="name">The name of the person.</param>
      <param name="uri">The URI of the person's Web page.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.AttributeExtensions">
      <summary>Gets the attribute extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.ElementExtensions">
      <summary>Gets the element extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> that contains the element extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Email">
      <summary>Gets and sets the e-mail address of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>The e-mail address of the person.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Name">
      <summary>Gets and sets the name of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>The name of the person.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Uri">
      <summary>Gets and sets the URI of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>The URI of the person's Web site.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationVersions">
      <summary>A class that represents the syndication versions supported by .</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.SyndicationVersions.Atom10">
      <summary>Represents support for the Atom 1.0 specification.</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.SyndicationVersions.Rss20">
      <summary>Represents support for the RSS 2.0 specification.</summary>
    </member>
    <member name="T:System.ServiceModel.Syndication.TextSyndicationContent">
      <summary>Represents any <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> content intended to be displayed to an end user.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.ServiceModel.Syndication.TextSyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> with the specified <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> with the specified text.</summary>
      <param name="text">The text of the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.String,System.ServiceModel.Syndication.TextSyndicationContentKind)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> with the specified text and <see cref="T:System.ServiceModel.Syndication.TextSyndicationContentKind" />.</summary>
      <param name="text">The text of the content.</param>
      <param name="textKind">The <see cref="T:System.ServiceModel.Syndication.TextSyndicationContentKind" /> that describes the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.TextSyndicationContent.Text">
      <summary>Gets the text of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.</summary>
      <returns>The text of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.TextSyndicationContent.Type">
      <summary>Gets the content type of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the kind of Text Syndication Content.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Writes the contents of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.TextSyndicationContentKind">
      <summary>An enumeration that represents the supported types of text syndication content.</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.Plaintext">
      <summary>Plain text</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.Html">
      <summary>HTML (escaped markup)</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.XHtml">
      <summary>XML (not escaped)</summary>
    </member>
    <member name="T:System.ServiceModel.Syndication.UrlSyndicationContent">
      <summary>Represents syndication content that consists of a URL to another resource.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.#ctor(System.ServiceModel.Syndication.UrlSyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> class with the specified <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.#ctor(System.Uri,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> class with the specified <see cref="T:System.Uri" /> and media type.</summary>
      <param name="url">The <see cref="T:System.Uri" />.</param>
      <param name="mediaType">The media type of the resource referenced by the <see cref="T:System.Uri" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance that contains the new copy of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.UrlSyndicationContent.Type">
      <summary>Gets the content type of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</summary>
      <returns>The content type of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.UrlSyndicationContent.Url">
      <summary>Gets the <see cref="T:System.Uri" /> for the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the URI for the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Writes the contents of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Workspace">
      <summary>Represents a workspace within a service document.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Workspace" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.#ctor(System.ServiceModel.Syndication.TextSyndicationContent,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.ResourceCollectionInfo})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Workspace" /> class and initializes it with the specified title and collection.</summary>
      <param name="title">The title of the workspace.</param>
      <param name="collections">The collection the workspace contains.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.#ctor(System.String,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.ResourceCollectionInfo})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Workspace" /> class and initializes it with the specified title and collection.</summary>
      <param name="title">The workspace title.</param>
      <param name="collections">The collection the workspace contains.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.AttributeExtensions">
      <summary>Gets a collection of attribute extensions.</summary>
      <returns>
Returns <see cref="T:System.Collections.Generic.Dictionary`2" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.BaseUri">
      <summary>Gets and sets the base URI for the <see cref="T:System.ServiceModel.Syndication.Workspace" /> instance.</summary>
      <returns>
Returns <see cref="T:System.Uri" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.Collections">
      <summary>Gets the collection associated with the workspace.</summary>
      <returns>
Returns <see cref="T:System.Collections.ObjectModel.Collection`1" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.CreateResourceCollection">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" /> instance.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.ResourceCollectionInfo" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.ElementExtensions">
      <summary>Gets the element extensions contained within the <see cref="T:System.ServiceModel.Syndication.Workspace" /> instance.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" />.
</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Workspace.Title">
      <summary>The title of the <see cref="T:System.ServiceModel.Syndication.Workspace" /> instance.</summary>
      <returns>
Returns <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.
</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Workspace.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.XmlSyndicationContent">
      <summary>Represents XML syndication content that is not intended to be displayed in a browser.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.ServiceModel.Syndication.XmlSyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified type, object, and <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</summary>
      <param name="type">The type of content.</param>
      <param name="dataContractExtension">The data contract extension.</param>
      <param name="dataContractSerializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified type, object and <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <param name="type">The type of content.</param>
      <param name="xmlSerializerExtension">The XML serializer extension.</param>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.ServiceModel.Syndication.SyndicationElementExtension)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified type and <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</summary>
      <param name="type">The type of the content, typically expressed as a MIME content type, for example application/xml or application/xml+customer.</param>
      <param name="extension">The <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> to place in the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> class.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.XmlSyndicationContent.Extension">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.GetReaderAtContent">
      <summary>Gets a reader from the content of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> from the content of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1">
      <summary>Reads the content of the specified type into the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</summary>
      <returns>An object of the specified type.</returns>
      <typeparam name="TContent">The type of content to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Reads the content of the specified type into the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> using the specified serializer.</summary>
      <returns>An object of the specified type.</returns>
      <param name="dataContractSerializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
      <typeparam name="TContent">The type of content to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1(System.Xml.Serialization.XmlSerializer)">
      <summary>Reads the content of the specified type into the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> using the specified serializer.</summary>
      <returns>An object of the specified type.</returns>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
      <typeparam name="TContent">The type of content to read.</typeparam>
      <exception cref="T:System.InvalidOperationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.XmlSyndicationContent.Type">
      <summary>Gets the type of the XML syndication content.</summary>
      <returns>The XML syndication content type.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Write the contents of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension">
      <summary>Provides an extension of the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" /> to contain namespaces when serializing XPath message queries into XAML.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension.#ctor(System.ServiceModel.Dispatcher.XPathMessageContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension" /> class with the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" /> to convert.</summary>
      <param name="context">The XPath message context to convert.</param>
    </member>
    <member name="P:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension.Namespaces">
      <summary>Gets the namespaces contained in this instance.</summary>
      <returns>A collection of namespaces and prefixes.</returns>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary>Provides the namespaces used in the XPath message query.</summary>
      <returns>The namespaces.</returns>
      <param name="serviceProvider">A service provider that is not used in the operation.</param>
    </member>
    <member name="T:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter">
      <summary>Provides a way to convert an <see cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" /> to a format that can be serialized as XAML.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Tests whether a context can be converted from one type to the type of this converter.</summary>
      <returns>true if the type can be converted; otherwise, false.</returns>
      <param name="context">A type that provides the format context.</param>
      <param name="sourceType">The type to convert from.</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Tests whether a type can be converted into a target type.</summary>
      <returns>true if the conversion can be performed; otherwise, false.</returns>
      <param name="context">A type that provides the format context.</param>
      <param name="destinationType">A type that provides the format context.</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the provided context object into the XAML-serializable type of this converter, using the specified context and culture information.</summary>
      <returns>The result of the conversion process.</returns>
      <param name="context">A type that provides the format context.</param>
      <param name="culture">The information about a specific culture, such as calendars, and number formats.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.XPathMessageContextTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the provided context object into the XAML-serializable type of this converter, using the specified context and culture information.</summary>
      <returns>The converted context.</returns>
      <param name="context">A type that provides the format context.</param>
      <param name="culture">The information about a specific culture, such as calendars, and number formats.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the <paramref name="value" /> argument to.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Windows.Presentation.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Presentation</name>
  </assembly>
  <members>
    <member name="T:System.AddIn.Pipeline.FrameworkElementAdapters">
      <summary>
        <see cref="T:System.AddIn.Pipeline.FrameworkElementAdapters" /> is used by Windows Presentation Foundation (WPF) add-ins to convert between a <see cref="T:System.Windows.FrameworkElement" /> and an <see cref="T:System.AddIn.Contract.INativeHandleContract" />.</summary>
    </member>
    <member name="M:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter(System.AddIn.Contract.INativeHandleContract)">
      <summary>Returns a <see cref="T:System.Windows.FrameworkElement" /> that has been converted from an <see cref="T:System.AddIn.Contract.INativeHandleContract" />.</summary>
      <returns>A <see cref="T:System.Windows.FrameworkElement" /> that will be displayed from either the host application or add-in, depending on the direction in which the UI is passed between the two.</returns>
      <param name="nativeHandleContract">The <see cref="T:System.AddIn.Contract.INativeHandleContract" /> that was passed across the isolation boundary between the host application and the add-in.</param>
    </member>
    <member name="M:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter(System.Windows.FrameworkElement)">
      <summary>Returns an <see cref="T:System.AddIn.Contract.INativeHandleContract" /> that has been converted from a <see cref="T:System.Windows.FrameworkElement" />.</summary>
      <returns>An <see cref="T:System.AddIn.Contract.INativeHandleContract" /> that is passed from either the host application or the add-in, depending on the direction in which the UI is passed between the two.</returns>
      <param name="root">The <see cref="T:System.Windows.FrameworkElement" /> to be passed across the isolation boundary between the host application and the add-in.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="root" /> is not the root element of a tree of elements.</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherExtensions">
      <summary>Provides a set of static methods that extend the <see cref="T:System.Windows.Threading.Dispatcher" /> class.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action)">
      <summary>Executes the specified delegate asynchronously with normal priority on the thread that the specified <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the result of the <see cref="M:System.Windows.Threading.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action)" /> operation.</returns>
      <param name="dispatcher">The dispatcher that executes the delegate.</param>
      <param name="action">The delegate to execute, which takes no arguments and does not return a value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>Executes the specified delegate asynchronously with the specified priority on the thread that the specified <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the result of the <see cref="M:System.Windows.Threading.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)" /> operation.</returns>
      <param name="dispatcher">The dispatcher that executes the delegate.</param>
      <param name="action">The delegate to execute, which takes no arguments and does not return a value.</param>
      <param name="priority">The execution priority of the delegate relative to other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null. </exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action)">
      <summary>Executes the specified delegate synchronously with normal priority on the thread that the specified <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <param name="dispatcher">The dispatcher that executes the delegate.</param>
      <param name="action">The delegate to execute, which takes no arguments and does not return a value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null. </exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.TimeSpan)">
      <summary>Executes the specified delegate synchronously on the thread that the specified <see cref="T:System.Windows.Threading.Dispatcher" /> was created on, and stops execution after the specified time-out period. </summary>
      <param name="dispatcher">The dispatcher that executes the delegate.</param>
      <param name="action">The delegate to execute, which takes no arguments and does not return a value.</param>
      <param name="timeout">The maximum time to wait for the operation to finish.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.TimeSpan,System.Windows.Threading.DispatcherPriority)">
      <summary>Executes the specified delegate synchronously with the specified priority on the thread that the specified <see cref="T:System.Windows.Threading.Dispatcher" /> was created on, and stops execution after the specified time-out period.</summary>
      <param name="dispatcher">The dispatcher that executes the delegate.</param>
      <param name="action">The delegate to execute, which takes no arguments and does not return a value.</param>
      <param name="timeout">The maximum time to wait for the operation to finish.</param>
      <param name="priority">The execution priority of the delegate relative to other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>Executes the specified delegate synchronously with the specified priority on the thread that the specified <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</summary>
      <param name="dispatcher">The dispatcher that executes the delegate.</param>
      <param name="action">The delegate to execute, which takes no arguments and does not return a value.</param>
      <param name="priority">The execution priority of the delegate relative to other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Windows.Input.Manipulations.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Input.Manipulations</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D">
      <summary>Describes desired expansion behavior of an inertia processor.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D" /> class.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.DesiredDeceleration">
      <summary>Gets or sets the desired expansion deceleration, in coordinate units per millisecond squared.</summary>
      <returns>The desired expansion deceleration, in coordinate units per millisecond squared.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.DesiredExpansionX">
      <summary>Gets or sets the desired expansion along the x-axis, in coordinate units.</summary>
      <returns>The desired expansion along the x-axis, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.DesiredExpansionY">
      <summary>Gets or sets the desired expansion along the y-axis, in coordinate units.</summary>
      <returns>The desired expansion along the y-axis, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.InitialRadius">
      <summary>Gets or sets the initial average radius, in coordinate units.</summary>
      <returns>The initial average radius, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.InitialVelocityX">
      <summary>Gets or sets the initial expansion velocity along the x-axis, in coordinate units per millisecond.</summary>
      <returns>The initial expansion velocity along the x-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.InitialVelocityY">
      <summary>Gets or sets the initial expansion velocity along the y-axis, in coordinate units per millisecond.</summary>
      <returns>The initial expansion velocity along the y-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.InertiaParameters2D">
      <summary>Base class from which all inertia parameter classes are derived.</summary>
    </member>
    <member name="T:System.Windows.Input.Manipulations.InertiaProcessor2D">
      <summary>Implements the extrapolation of a manipulation's position, orientation, and average radius.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Manipulations.InertiaProcessor2D" /> class.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete(System.Int64)">
      <summary>Completes final extrapolation by using the specified timestamp and raises the <see cref="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" /> event.</summary>
      <param name="timestamp"></param>
      <exception cref="T:System.ArgumentOutOfRangeException">The timestamp parameter is less than the initial or previous timestamp.</exception>
    </member>
    <member name="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed">
      <summary>Occurs when extrapolation has completed.</summary>
    </member>
    <member name="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta">
      <summary>Occurs when the extrapolation origin has changed or when translation, scaling, or rotation have occurred.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior">
      <summary>Gets or sets the expansion behavior of the inertia processor.</summary>
      <returns>The expansion behavior of the inertia processor.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX">
      <summary>Gets or sets the x-coordinate for the initial origin, in coordinate units.</summary>
      <returns>The x-coordinate for the initial origin, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY">
      <summary>Gets or sets the y-coordinate for the initial origin, in coordinate units.</summary>
      <returns>The y-coordinate for the initial origin, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning">
      <summary>Gets whether inertia is currently in progress.</summary>
      <returns>A Boolean value indicating whether inertia is currently in progress.</returns>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Process(System.Int64)">
      <summary>Extrapolates the manipulation's position, orientation, and average radius at the specified time.</summary>
      <returns>The manipulation's position, orientation, and average radius at the specified time. true if extrapolation is in progress; otherwise, false if extrapolation has completed.</returns>
      <param name="timestamp"></param>
      <exception cref="T:System.ArgumentOutOfRangeException">The timestamp parameter is less than the initial or previous timestamp.</exception>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior">
      <summary>Gets or sets the rotation behavior of the inertia processor.</summary>
      <returns>The rotation behavior of the inertia processor.</returns>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(System.Windows.Input.Manipulations.InertiaParameters2D)">
      <summary>Sets parameters on the inertia processor.</summary>
      <param name="parameters"></param>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior">
      <summary>Gets or sets the translation behavior of the inertia processor.</summary>
      <returns>The translation behavior of the inertia processor.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.InertiaRotationBehavior2D">
      <summary>Describes desired rotation behavior of an inertia processor.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Manipulations.InertiaRotationBehavior2D" /> class.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.DesiredDeceleration">
      <summary>Gets or sets the desired angular deceleration, in radians per millisecond squared.</summary>
      <returns>The desired angular deceleration, in radians per millisecond squared.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.DesiredRotation">
      <summary>Gets or sets the desired rotation, in radians.</summary>
      <returns>The desired rotation, in radians.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.InitialVelocity">
      <summary>Gets or sets the initial rotational velocity, in radians per millisecond.</summary>
      <returns>The initial rotational velocity, in radians per millisecond.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D">
      <summary>Describes desired translation behavior of an inertia processor.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D" /> class.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D.DesiredDeceleration">
      <summary>Gets or sets the desired deceleration, in coordinate units per millisecond squared.</summary>
      <returns>The desired deceleration, in coordinate units per millisecond squared.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D.DesiredDisplacement">
      <summary>Gets or sets the absolute distance that the object needs to travel along the velocity vector, in coordinate units.</summary>
      <returns>The absolute distance that the object needs to travel along the velocity vector, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D.InitialVelocityX">
      <summary>Gets or sets the initial velocity along the x-axis, in coordinate units per millisecond.</summary>
      <returns>The initial velocity along the x-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.InertiaTranslationBehavior2D.InitialVelocityY">
      <summary>Gets or sets the initial velocity along the x-axis, in coordinate units per millisecond.</summary>
      <returns>The initial velocity along the x-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs">
      <summary>Represents data that is sent with a ManipulationProcessor2D.Completed event or an InertiaProcessor2D.Completed event.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs.OriginX">
      <summary>Gets the new x-coordinate of the composite position of the manipulation.</summary>
      <returns>The new x-coordinate of the composite position of the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs.OriginY">
      <summary>Gets the new y-coordinate of the composite position of the manipulation.</summary>
      <returns>The new y-coordinate of the composite position of the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs.Total">
      <summary>Gets the total amount of change since the manipulation started.</summary>
      <returns>The total amount of change since the manipulation started.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs.Velocities">
      <summary>Gets the current velocities of the manipulation.</summary>
      <returns>The current velocities of the manipulation.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs">
      <summary>Represents data that is sent with a <see cref="E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta" /> event or an <see cref="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta" /> event.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs.Cumulative">
      <summary>Gets the total amount of change since the manipulation started.</summary>
      <returns>The total amount of change since the manipulation started.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs.Delta">
      <summary>Gets the amount of change since the last event.</summary>
      <returns>The amount of change since the last event.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs.OriginX">
      <summary>Gets the new x-coordinate of the composite position of the manipulation.</summary>
      <returns>The new x-coordinate of the composite position of the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs.OriginY">
      <summary>Gets the new y-coordinate of the composite position of the manipulation.</summary>
      <returns>The new y-coordinate of the composite position of the manipulation.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs.Velocities">
      <summary>Gets the current velocities of the manipulation.</summary>
      <returns>The current velocities of the manipulation.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs">
      <summary>Represents data that is sent with a <see cref="E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started" /> event.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs.OriginX">
      <summary>Gets the x-coordinate of the origin.</summary>
      <returns>The x-coordinate of the origin.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs.OriginY">
      <summary>Gets the y-coordinate of the origin.</summary>
      <returns>The y-coordinate of the origin.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.ManipulationDelta2D">
      <summary>Represents the result of a 2D manipulation.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.ExpansionX">
      <summary>Gets the amount of expansion along the x-axis, in coordinate units.</summary>
      <returns>The amount of expansion along the x-axis, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.ExpansionY">
      <summary>Gets the amount of expansion along the y-axis, in coordinate units.</summary>
      <returns>The amount of expansion along the y-axis, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.Rotation">
      <summary>Gets the amount of rotation, in radians.</summary>
      <returns>The amount of rotation, in radians.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.ScaleX">
      <summary>Gets the scale factor along the x-axis.</summary>
      <returns>The scale factor along the x-axis.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.ScaleY">
      <summary>Gets the scale factor along the y-axis.</summary>
      <returns>The scale factor along the y-axis.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.TranslationX">
      <summary>Gets the translation along the x-axis, in coordinate units.</summary>
      <returns>The translation along the x-axis, in coordinate units.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationDelta2D.TranslationY">
      <summary>Gets the translation along the y-axis, in coordinate units.</summary>
      <returns>The translation along the y-axis, in coordinate units.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.ManipulationParameters2D">
      <summary>Base class from which all manipulation parameter classes are derived.</summary>
    </member>
    <member name="T:System.Windows.Input.Manipulations.ManipulationPivot2D">
      <summary>Represents pivot information used by a manipulation processor for single-manipulator rotations.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.ManipulationPivot2D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Manipulations.ManipulationPivot2D" /> class.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationPivot2D.Radius">
      <summary>Gets or sets the distance from the pivot point to the edge of the manipulatable region.</summary>
      <returns>The distance from the pivot point to the edge of the manipulatable region.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationPivot2D.X">
      <summary>Gets or sets the X position of the pivot.</summary>
      <returns>The X position of the pivot.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationPivot2D.Y">
      <summary>Gets or sets the Y position of the pivot.</summary>
      <returns>The Y position of the pivot.</returns>
    </member>
    <member name="T:System.Windows.Input.Manipulations.ManipulationProcessor2D">
      <summary>Implements a multiple-input, single-output compositor for two-dimensional (2-D) transformations in a shared coordinate space.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor(System.Windows.Input.Manipulations.Manipulations2D)">
      <summary>Creates a new <see cref="T:System.Windows.Input.Manipulations.ManipulationProcessor2D" /> object.</summary>
      <param name="supportedManipulations">The initial set of supported manipulations.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="supportedManipulations" /> parameter is not a valid combination of the <see cref="T:System.Windows.Input.Manipulations.Manipulations2D" /> enumeration values.</exception>
    </member>
    <member name="M:System.Windows.Input.Manipulations.ManipulationProcessor2D.#ctor(System.Windows.Input.Manipulations.Manipulations2D,System.Windows.Input.Manipulations.ManipulationPivot2D)">
      <summary>Creates a new <see cref="T:System.Windows.Input.Manipulations.ManipulationProcessor2D" /> object.</summary>
      <param name="supportedManipulations">The initial set of supported manipulations.</param>
      <param name="pivot">Pivot information for single-manipulator rotations.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="supportedManipulations" /> parameter is not a valid combination of the <see cref="T:System.Windows.Input.Manipulations.Manipulations2D" /> enumeration values.</exception>
    </member>
    <member name="E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed">
      <summary>Occurs when a manipulation has competed.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.ManipulationProcessor2D.CompleteManipulation(System.Int64)">
      <summary>Forces the current manipulation to complete and raises the <see cref="E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed" /> event.</summary>
      <param name="timestamp">The timestamp to complete the manipulation, in 100-nanosecond ticks.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The timestamp is less than the previous timestamp for the current manipulation.</exception>
    </member>
    <member name="E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta">
      <summary>Occurs when the manipulation origin has changed or when translation, scaling, or rotation have occurred.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationProcessor2D.MinimumScaleRotateRadius">
      <summary>Gets or sets the minimum radius, in coordinate units, necessary for a manipulator to participate in scaling and rotation.</summary>
      <returns>The minimum radius, in coordinate units, necessary for a manipulator to participate in scaling and rotation.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationProcessor2D.Pivot">
      <summary>Gets or sets the pivot information for the manipulation processor.</summary>
      <returns>The pivot information for the manipulation processor.</returns>
    </member>
    <member name="M:System.Windows.Input.Manipulations.ManipulationProcessor2D.ProcessManipulators(System.Int64,System.Collections.Generic.IEnumerable{System.Windows.Input.Manipulations.Manipulator2D})">
      <summary>Processes the specified manipulators as a single batch action.</summary>
      <param name="timestamp">The timestamp for the batch, in 100-nanosecond ticks.</param>
      <param name="manipulators">The set of manipulators that are currently in scope.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The timestamp is less than the previous timestamp for the current manipulation.</exception>
    </member>
    <member name="M:System.Windows.Input.Manipulations.ManipulationProcessor2D.SetParameters(System.Windows.Input.Manipulations.ManipulationParameters2D)">
      <summary>Sets parameters on the manipulation processor.</summary>
      <param name="parameters">Parameters to set.</param>
    </member>
    <member name="E:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started">
      <summary>Occurs when a new manipulation has started.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationProcessor2D.SupportedManipulations">
      <summary>Gets or sets the current set of supported manipulations.</summary>
      <returns>The current set of supported manipulations.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property tries to set a value that is not a valid combination of the <see cref="T:System.Windows.Input.Manipulations.Manipulations2D" />enumeration values.</exception>
    </member>
    <member name="T:System.Windows.Input.Manipulations.Manipulations2D">
      <summary>Represents the possible affine two-dimensional (2-D) manipulations.</summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.None">
      <summary>No manipulations. </summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.TranslateX">
      <summary>A translation in the x-axis.</summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.TranslateY">
      <summary>A translation in the y-axis.</summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.Translate">
      <summary>A translation in the x and/or y axes.</summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.Scale">
      <summary>A scale in both directions.</summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.Rotate">
      <summary>A rotation.</summary>
    </member>
    <member name="F:System.Windows.Input.Manipulations.Manipulations2D.All">
      <summary>All available manipulations. </summary>
    </member>
    <member name="T:System.Windows.Input.Manipulations.ManipulationVelocities2D">
      <summary>Represents a set of velocities calculated by the manipulation and inertia processors.</summary>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationVelocities2D.AngularVelocity">
      <summary>Gets the angular velocity, in radians per millisecond.</summary>
      <returns>The angular velocity, in radians per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationVelocities2D.ExpansionVelocityX">
      <summary>Gets the expansion velocity along the x-axis, in coordinate units per millisecond.</summary>
      <returns>The expansion velocity along the x-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationVelocities2D.ExpansionVelocityY">
      <summary>Gets the expansion velocity along the y-axis, in coordinate units per millisecond.</summary>
      <returns>The expansion velocity along the y-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationVelocities2D.LinearVelocityX">
      <summary>Gets the velocity along the x-axis, in coordinate units per millisecond.</summary>
      <returns>The velocity along the x-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.ManipulationVelocities2D.LinearVelocityY">
      <summary>Gets the velocity along the y-axis, in coordinate units per millisecond.</summary>
      <returns>The velocity along the y-axis, in coordinate units per millisecond.</returns>
    </member>
    <member name="F:System.Windows.Input.Manipulations.ManipulationVelocities2D.Zero">
      <summary>Gets a <see cref="T:System.Windows.Input.Manipulations.ManipulationVelocities2D" /> with all velocities set to zero.</summary>
    </member>
    <member name="T:System.Windows.Input.Manipulations.Manipulator2D">
      <summary>Represents a 2D manipulator at an instant in time.</summary>
    </member>
    <member name="M:System.Windows.Input.Manipulations.Manipulator2D.#ctor(System.Int32,System.Single,System.Single)">
      <summary>Creates a new <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object with the specified properties.</summary>
      <param name="id">The unique ID for this manipulator.</param>
      <param name="x">The x-coordinate of the manipulator.</param>
      <param name="y">The y-coordinate of the manipulator.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="x" />-coordinate or <paramref name="y" />-coordinate are float.NaN, float.PositiveInfinity, or float.NegativeInfinity. These values are all invalid.</exception>
    </member>
    <member name="M:System.Windows.Input.Manipulations.Manipulator2D.Equals(System.Object)">
      <summary>Determines whether this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object has the same value as the specified <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</summary>
      <returns>true if the two <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> objects are the same type and represent the same value; otherwise, false.</returns>
      <param name="obj"></param>
    </member>
    <member name="M:System.Windows.Input.Manipulations.Manipulator2D.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulator2D.Id">
      <summary>Gets or sets the unique ID for this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</summary>
      <returns>The unique ID for this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</returns>
    </member>
    <member name="M:System.Windows.Input.Manipulations.Manipulator2D.op_Equality(System.Windows.Input.Manipulations.Manipulator2D,System.Windows.Input.Manipulations.Manipulator2D)">
      <summary>Determines whether two specified <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> objects have the same value.</summary>
      <returns>true if the two <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> objects have the same value; otherwise, false.</returns>
      <param name="manipulator1">The first <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object to compare.</param>
      <param name="manipulator2">The second <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object to compare.</param>
    </member>
    <member name="M:System.Windows.Input.Manipulations.Manipulator2D.op_Inequality(System.Windows.Input.Manipulations.Manipulator2D,System.Windows.Input.Manipulations.Manipulator2D)">
      <summary>Determines whether two specified <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> objects have different values.</summary>
      <returns>true if the two <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> objects have different values; otherwise, false.</returns>
      <param name="manipulator1">The first <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object to compare.</param>
      <param name="manipulator2">The second <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object to compare.</param>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulator2D.X">
      <summary>Gets or sets the x-coordinate of this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</summary>
      <returns>The x-coordinate of this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</returns>
    </member>
    <member name="P:System.Windows.Input.Manipulations.Manipulator2D.Y">
      <summary>Gets or sets the y-coordinate of this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</summary>
      <returns>The y-coordinate of this <see cref="T:System.Windows.Input.Manipulations.Manipulator2D" /> object.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Workflow.Runtime.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Workflow.Runtime</name>
  </assembly>
  <members>
    <member name="T:System.Activities.Statements.Interop">
      <summary>An activity that manages the execution of an <see cref="T:System.Workflow.ComponentModel.Activity" /> within a workflow.</summary>
    </member>
    <member name="M:System.Activities.Statements.Interop.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Statements.Interop" /> class.</summary>
    </member>
    <member name="P:System.Activities.Statements.Interop.ActivityMetaProperties">
      <summary>The collection of name-value pairs that corresponds to the metadata of the <see cref="T:System.Workflow.ComponentModel.Activity" />, such as an activity’s <see cref="P:System.Workflow.ComponentModel.Activity.Name" /> property, or a <see cref="T:System.Workflow.Activities.WhileActivity" /> activity’s <see cref="P:System.Workflow.Activities.While.Condition" /> property.</summary>
      <returns>The collection of metadata.</returns>
    </member>
    <member name="P:System.Activities.Statements.Interop.ActivityProperties">
      <summary>Gets the collection of name-value pairs that corresponds to the input and output properties of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The collection of properties.</returns>
    </member>
    <member name="P:System.Activities.Statements.Interop.ActivityType">
      <summary>Gets or sets the type of the activity contained by the <see cref="T:System.Activities.Statements.Interop" /> activity.</summary>
      <returns>The type of the activity contained by the <see cref="T:System.Activities.Statements.Interop" /> activity.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>Returns the collection of attributes for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The attribute collection.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>Returns the name of the class of the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The class name.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>Returns the name of the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>Returns the associated type converter for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The type converter.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>Returns the default event for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The default event.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>Returns the default property for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The default property.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>Returns the editor for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The editor.</returns>
      <param name="editorBaseType">The type of the requested editor.</param>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>Returns the collection of events for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The collection of events.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>Returns the collection of events for the contained <see cref="T:System.Workflow.ComponentModel.Activity" /> using the specified array of attributes as a filter.</summary>
      <returns>The collection of events.</returns>
      <param name="attributes">The attributes used to filter the returned events.</param>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>Returns the collection of properties for the contained <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>Returns the collection of properties for the contained <see cref="T:System.Workflow.ComponentModel.Activity" /> using a specified array of attributes as a filter.</summary>
      <returns>A collection of properties.</returns>
      <param name="attributes">The array of attributes used to filter the properties.</param>
    </member>
    <member name="M:System.Activities.Statements.Interop.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns the owner of the specified property descriptor or the <see cref="T:System.Activities.Statements.Interop" /> activity itself if the property descriptor has no owner.</summary>
      <returns>The property owner.</returns>
      <param name="pd">The property whose owner is to be retrieved.</param>
    </member>
    <member name="T:System.Activities.Tracking.InteropTrackingRecord">
      <summary>Represents the data sent to tracking participants when tracked records occur in an <see cref="T:System.Activities.Statements.Interop" /> activity within a workflow.</summary>
    </member>
    <member name="M:System.Activities.Tracking.InteropTrackingRecord.#ctor(System.Activities.Tracking.InteropTrackingRecord)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.InteropTrackingRecord" /> class using the specified <see cref="T:System.Activities.Tracking.InteropTrackingRecord" />.</summary>
      <param name="record">The tracking record.</param>
    </member>
    <member name="M:System.Activities.Tracking.InteropTrackingRecord.#ctor(System.String,System.Workflow.Runtime.Tracking.TrackingRecord)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Tracking.InteropTrackingRecord" /> class.</summary>
      <param name="activityDisplayName">The activity name</param>
      <param name="v1TrackingRecord">The tracking record of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="M:System.Activities.Tracking.InteropTrackingRecord.Clone">
      <summary>Creates a copy of the <see cref="T:System.Activities.Tracking.InteropTrackingRecord" />.</summary>
      <returns>A copy of the <see cref="T:System.Activities.Tracking.InteropTrackingRecord" />.</returns>
    </member>
    <member name="P:System.Activities.Tracking.InteropTrackingRecord.TrackingRecord">
      <summary>Returns a tracking record that represents the data sent to tracking participants when tracked events occur.</summary>
      <returns>The data sent to tracking participants when tracked events occur.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.CorrelationProperty">
      <summary>Represents a name and value pair used to correlate messages to specific receiving activities.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> class.</summary>
      <param name="name">The name of the property used in the correlation set.</param>
      <param name="value">The value of the correlation set property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationProperty.Name">
      <summary>Gets the name of the property used in the correlation set.</summary>
      <returns>The name of the property used in the correlation set.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationProperty.Value">
      <summary>Gets the value of the correlation set property.</summary>
      <returns>The value of the correlation set property.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.CorrelationToken">
      <summary>Manages the subscriptions of the <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> to the owner activities. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationToken.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationToken.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> class using the name of the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationToken.Initialize(System.Workflow.ComponentModel.Activity,System.Collections.Generic.ICollection{System.Workflow.Runtime.CorrelationProperty})">
      <summary>Fires correlation initialized events.</summary>
      <param name="activity">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the correlation token.</param>
      <param name="propertyValues">A collection of property values in the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Workflow.Runtime.CorrelationToken" /> was already initialized.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationToken.Initialized">
      <summary>Gets a value indicating whether the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> is initialized.</summary>
      <returns>true if the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> is initialized; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationToken.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationToken.OwnerActivityName">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the correlation token.</summary>
      <returns>The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the correlation token.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationToken.Properties">
      <summary>Gets the collection of <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> objects in the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</summary>
      <returns>A collection of <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationToken.SubscribeForCorrelationTokenInitializedEvent(System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.Runtime.CorrelationTokenEventArgs})">
      <summary>Subscribes the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> to the initialized event.</summary>
      <param name="activity">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the correlation token.</param>
      <param name="dataChangeListener">The <see cref="T:System.Workflow.Runtime.CorrelationTokenEventArgs" /> that is listening for a change in event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> or <paramref name="dataChangeListener" /> are null references (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationToken.UnsubscribeFromCorrelationTokenInitializedEvent(System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.Runtime.CorrelationTokenEventArgs})">
      <summary>Unsubscribes the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> from the initialized event.</summary>
      <param name="activity">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the correlation token.</param>
      <param name="dataChangeListener">The <see cref="T:System.Workflow.Runtime.CorrelationTokenEventArgs" /> that is listening for a change in event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> or <paramref name="dataChangeListener" /> are null references (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.CorrelationTokenCollection">
      <summary>Represents a collection of <see cref="T:System.Workflow.Runtime.CorrelationToken" /> classes. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationTokenCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.CorrelationTokenCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Runtime.CorrelationTokenCollection.CorrelationTokenCollectionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="T:System.Workflow.Runtime.CorrelationTokenCollection" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationTokenCollection.GetCorrelationToken(System.Workflow.ComponentModel.Activity,System.String,System.String)">
      <summary>Gets the specified <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.CorrelationToken" /> with the specified <paramref name="correlationTokenName" />.</returns>
      <param name="activity">The Activity associated with the <see cref="T:System.Workflow.Runtime.CorrelationTokenCollection" />.</param>
      <param name="correlationTokenName">The name of the <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</param>
      <param name="ownerActivityName">The name of the activity associated with the <see cref="T:System.Workflow.Runtime.CorrelationTokenCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" />, <paramref name="correlationTokenName" />, or <paramref name="ownerActivityName" /> are null references (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.CorrelationTokenCollection.GetItem(System.String)">
      <summary>Gets the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> with the specified key.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.CorrelationToken" /> with the specified key.</returns>
      <param name="key">The key for the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> to retrieve. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.CorrelationTokenEventArgs">
      <summary>Contains the event data associated with the <see cref="T:System.Workflow.Runtime.CorrelationToken" />. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationTokenEventArgs.CorrelationToken">
      <summary>Gets the current <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</summary>
      <returns>The current <see cref="T:System.Workflow.Runtime.CorrelationToken" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.CorrelationTokenEventArgs.IsInitializing">
      <summary>Gets a value that indicates whether the <see cref="M:System.Workflow.Runtime.CorrelationToken.Initialize(System.Workflow.ComponentModel.Activity,System.Collections.Generic.ICollection{System.Workflow.Runtime.CorrelationProperty})" /> method has been executed.</summary>
      <returns>true if the <see cref="M:System.Workflow.Runtime.CorrelationToken.Initialize(System.Workflow.ComponentModel.Activity,System.Collections.Generic.ICollection{System.Workflow.Runtime.CorrelationProperty})" /> method has been executed; otherwise, false.  </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.IPendingWork">
      <summary>Provides methods to participate in a work batch.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.IPendingWork.Commit(System.Transactions.Transaction,System.Collections.ICollection)">
      <summary>Commits the list of work items by using the specified <see cref="T:System.Transactions.Transaction" /> object.</summary>
      <param name="transaction">The <see cref="T:System.Transactions.Transaction" /> associated with the pending work.</param>
      <param name="items">The work items to be committed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.IPendingWork.Complete(System.Boolean,System.Collections.ICollection)">
      <summary>Called when the transaction has completed.</summary>
      <param name="succeeded">true if the transaction succeeded; otherwise, false.</param>
      <param name="items">An <see cref="T:System.Collections.ICollection" /> of work items.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.IPendingWork.MustCommit(System.Collections.ICollection)">
      <summary>Allows the items in the work batch to assert whether they must commit immediately.</summary>
      <returns>true if any item in the collection must be committed immediately; otherwise, false.</returns>
      <param name="items">An <see cref="T:System.Collections.ICollection" /> of work items.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.IWorkBatch">
      <summary>Provides methods to add work to a work batch. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.IWorkBatch.Add(System.Workflow.Runtime.IPendingWork,System.Object)">
      <summary>Adds a pending work item to a work batch.</summary>
      <param name="work">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> object associated with the <paramref name="workItem" />.</param>
      <param name="workItem">An object on which work is to be performed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" /> event.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs.Exception">
      <summary>Gets the exception that could not be handled by the service.</summary>
      <returns>A <see cref="T:System.Exception" /> that represents the exception that could not be handled by the service.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs.WorkflowInstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> of the workflow instance associated with the unhandled exception. </summary>
      <returns>The <see cref="T:System.Guid" /> of the workflow instance associated with the unhandled exception.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.TimerEventSubscription">
      <summary>Represents a subscription to a timer event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscription.#ctor(System.Guid,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> class by using the specified <see cref="T:System.Guid" /> of a workflow instance and the specified expiration <see cref="T:System.DateTime" />. </summary>
      <param name="workflowInstanceId">The <see cref="T:System.Guid" /> of the workflow instance associated with this subscription.</param>
      <param name="expiresAt">A <see cref="T:System.DateTime" /> that represents the time in Universal Coordinated Time (UTC) at which the timer associated with this subscription is expected to expire.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscription.#ctor(System.Guid,System.Guid,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> class by using the specified subscription Id, the specified <see cref="T:System.Guid" /> of a workflow instance, and the specified expiration <see cref="T:System.DateTime" />.</summary>
      <param name="timerId">The <see cref="T:System.Guid" /> for this subscription.</param>
      <param name="workflowInstanceId">The <see cref="T:System.Guid" /> of the workflow instance for which this subscription was created.</param>
      <param name="expiresAt">A <see cref="T:System.DateTime" /> that represents the time in Universal Coordinated Time (UTC) at which the timer for this subscription is expected to expire.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt">
      <summary>Gets the expected expiration time of the timer associated with this subscription.</summary>
      <returns>A <see cref="T:System.DateTime" /> that represents the time in Universal Coordinated Time (UTC) at which the timer associated with this subscription is expected to expire.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscription.QueueName">
      <summary>Represents the name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> that the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> sends a message to when the timer subscription expires.</summary>
      <returns>The <see cref="T:System.IComparable" /> interface for a <see cref="T:System.Guid" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscription.SubscriptionId">
      <summary>Unique identifier that represents a timer event</summary>
      <returns>
        <see cref="T:System.Guid" /> representing the unique identifier for a timer event</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscription.WorkflowInstanceId">
      <summary>Identifier of the workflow associated with the timer subscription</summary>
      <returns>
        <see cref="T:System.Guid" /> representing the unique identifier for the workflow associated with the timer subscription.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.TimerEventSubscriptionCollection">
      <summary>Represents an ordered list of <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.Add(System.Workflow.Runtime.TimerEventSubscription)">
      <summary>Adds a <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> to the timer queue.</summary>
      <param name="item">The <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> to add to the timer queue.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" /> elements to an existing one-dimensional <see cref="T:System.Array" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscriptionCollection.Count">
      <summary>Gets the number of <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> objects in the timer queue.</summary>
      <returns>The number of <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> objects in the queue.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscriptionCollection.IsSynchronized">
      <summary>Gets a value that indicates whether the access to the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" /> is synchronized (thread safe).</summary>
      <returns>Always returns true indicating that access to the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" /> is synchronized (thread safe).</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.Peek">
      <summary>Returns the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> at the beginning of the timer queue without removing it.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> at the beginning of the timer queue or a null reference (Nothing in Visual Basic) if the timer queue is empty.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.Remove(System.Guid)">
      <summary>Removes the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> that has the specified subscription id from the timer queue.</summary>
      <param name="timerSubscriptionId">The <see cref="T:System.Guid" /> of the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.TimerEventSubscriptionCollection.Remove(System.Workflow.Runtime.TimerEventSubscription)">
      <summary>Removes the <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> from the timer queue.</summary>
      <param name="item">The <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> to remove from the timer queue.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.TimerEventSubscriptionCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />.</summary>
      <returns>An object used to synchronize access to the <see cref="T:System.Workflow.Runtime.TimerEventSubscriptionCollection" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Runtime.TimerEventSubscriptionCollection.TimerCollectionProperty">
      <summary>Timer queue associated with a workflow instance. This queue contains time ordered <see cref="T:System.Workflow.Runtime.TimerEventSubscription" /> objects for a workflow.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowCompletedEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted" /> event.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowCompletedEventArgs.OutputParameters">
      <summary>Gets the output from the workflow.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> of values keyed by parameter name that contains the output parameters of the workflow.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowCompletedEventArgs.WorkflowDefinition">
      <summary>Gets an <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the workflow definition on completion of the workflow instance.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the workflow definition on completion of the workflow instance.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowEnvironment">
      <summary>Represents the transactional environment of the workflow instance that is running on the current thread.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch">
      <summary>Gets the current work batch.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.IWorkBatch" /> that represents the current work batch. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowEnvironment.WorkflowInstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> of the workflow instance associated with the current thread.</summary>
      <returns>The <see cref="T:System.Guid" /> that identifies the current workflow instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowEventArgs">
      <summary>Provides data for workflow events.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance">
      <summary>Gets the workflow instance associated with the workflow event.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> associated with the workflow event.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowInstance">
      <summary>Represents a workflow instance.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Abort">
      <summary>Aborts the workflow instance.</summary>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)">
      <summary>Applies changes to the workflow instance specified by the <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> object.</summary>
      <param name="workflowChanges">A <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> specifying dynamic updates for the workflow instance.</param>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
      <summary>Posts a message to the specified workflow queue synchronously.</summary>
      <param name="queueName">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
      <param name="item">The object to enqueue.</param>
      <param name="pendingWork">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> that allows the sender to be notified when <paramref name="item" /> is delivered.</param>
      <param name="workItem">An object to be passed to the <see cref="T:System.Workflow.Runtime.IPendingWork" /> methods.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueName" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.-or-The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> does not exist.-or-The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> is not enabled.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
      <summary>Posts a message to the specified workflow queue when the workflow is idle. <see cref="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" /> waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed).</summary>
      <param name="queueName">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
      <param name="item">The object to enqueue.</param>
      <param name="pendingWork">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> that allows the sender to be notified when <paramref name="item" /> is delivered.</param>
      <param name="workItem">An object to be passed to the <see cref="T:System.Workflow.Runtime.IPendingWork" /> methods.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueName" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.-or-The workflow instance is suspended.-or-The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> does not exist.-or-The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> specified by <paramref name="queueName" /> is not enabled.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)">
      <summary>Returns a value that indicates whether the specified object is equal to the <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</summary>
      <returns>true if the specified object is equal to this <see cref="T:System.Workflow.Runtime.WorkflowInstance" />; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.GetHashCode">
      <summary>Returns the hash code for this workflow instance.</summary>
      <returns>The hash code for this <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition">
      <summary>Retrieves the root activity for this workflow instance.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration">
      <summary>Returns the next point in time that this <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> is scheduled to be delivered a timer message.</summary>
      <returns>A DateTime value that represents the next <see cref="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt" /> time this <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> will be delivered a timer message. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
      <summary>Gets a collection of <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> objects that contains the pending items and subscribed activities for the workflow queues associated with this workflow instance.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> objects.</returns>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowInstance.InstanceId">
      <summary>Gets the unique identifier for the workflow instance.</summary>
      <returns>The <see cref="T:System.Guid" /> of the workflow instance.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Load">
      <summary>Loads a previously unloaded workflow instance.</summary>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles">
      <summary>Reload the tracking profiles for this workflow instance.</summary>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Resume">
      <summary>Resumes execution of a previously suspended workflow instance.</summary>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Start">
      <summary>Starts the execution of the workflow instance.</summary>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.-or-The workflow instance has already been started.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)">
      <summary>Suspends the workflow instance.</summary>
      <param name="error">A description of the reason for suspending the workflow instance.</param>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running. </exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)">
      <summary>Terminates the workflow instance in a synchronous manner.</summary>
      <param name="error">A description of the reason for terminating the workflow instance.</param>
      <exception cref="T:System.InvalidOperationException">The workflow runtime engine is not running.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.TryUnload">
      <summary>Unloads the workflow instance from memory to the persistence store when the instance is suspended or idle.</summary>
      <returns>true if the workflow instance was unloaded; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">There is no persistence service registered with the workflow runtime engine.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowInstance.Unload">
      <summary>Unloads the workflow instance from memory to the persistence store. This call blocks until after the currently scheduled work is finished, or the end of a transaction scope.</summary>
      <exception cref="T:System.InvalidOperationException">There is no persistence service registered with the workflow runtime engine.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime">
      <summary>Gets the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> for this workflow instance.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> that represents the execution environment in which this workflow instance is running.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowOwnershipException">
      <summary>The exception that is thrown when the workflow runtime engine attempts to load a workflow instance that is currently loaded by another workflow runtime engine instance. Additionally, this exception is thrown when the workflow runtime engine attempts to save a workflow after the ownership timeout that was specified while loading the workflow has expired. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowOwnershipException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor(System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowOwnershipException" /> class by using a specified workflow instance <see cref="T:System.Guid" />.</summary>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the workflow instance for which this exception occurred.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor(System.Guid,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowOwnershipException" /> class by using a specified workflow instance <see cref="T:System.Guid" /> and a specified error message.</summary>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the workflow instance for which this exception occurred.</param>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor(System.Guid,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowOwnershipException" /> class by using a specified workflow instance <see cref="T:System.Guid" />, a specified error message, and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the workflow instance for which this exception occurred.</param>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the WorkflowOwnershipException class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowOwnershipException" /> class by using a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowOwnershipException" /> class by using a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowOwnershipException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the <see cref="T:System.Guid" /> of the workflow instance associated with this exception, and additional exception information.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowOwnershipException.InstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> of the workflow instance for which this exception was thrown.</summary>
      <returns>
        <see cref="P:System.Workflow.Runtime.WorkflowOwnershipException.InstanceId" /> is equivalent to the <see cref="P:System.Workflow.Runtime.WorkflowInstance.InstanceId" /> property of the workflow instance.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowQueue">
      <summary>Represents a workflow queue.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueue.Count">
      <summary>Gets the number of items contained in the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <returns>The number of items in the workflow queue.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.Dequeue">
      <summary>Removes and returns the object at the beginning of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <returns>The object that is removed from the beginning of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> is empty.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueue.Enabled">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> is enabled.</summary>
      <returns>true if the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> is enabled; otherwise false. </returns>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.Enqueue(System.Object)">
      <summary>Adds an object to the end of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> is not enabled.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.Peek">
      <summary>Returns the object at the beginning of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> without removing it.</summary>
      <returns>The object at the beginning of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> is empty.</exception>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowQueue.QueueItemArrived">
      <summary>Occurs when an item is delivered on this <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable">
      <summary>Occurs when an item is available on this <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueue.QueueName">
      <summary>Gets the name of the workflow queue.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueue.QueuingService">
      <summary>Gets the queuing service associated with this <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowQueuingService" /> that represents the queuing service associated with this <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Registers a subscriber to the <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemArrived" /> event.</summary>
      <param name="eventListener">A subscriber for <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> that implements the <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interface.</param>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Registers a subscriber to the <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> event.</summary>
      <param name="eventListener">A subscriber for <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> that implements the <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventListener" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.RegisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs},System.String)">
      <summary>Registers a subscriber to the <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> event.</summary>
      <param name="eventListener">A subscriber for <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> that implements the <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interface.</param>
      <param name="subscriberQualifiedName">The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity that is subscribing to the <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> event or a null reference (Nothing in Visual Basic).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventListener" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemArrived(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Unregisters a subscriber to the <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemArrived" /> event.</summary>
      <param name="eventListener">A subscriber for <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> that implements the <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventListener" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueue.UnregisterForQueueItemAvailable(System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Unregisters a subscriber to the <see cref="E:System.Workflow.Runtime.WorkflowQueue.QueueItemAvailable" /> event.</summary>
      <param name="eventListener">A subscriber for <see cref="T:System.Workflow.ComponentModel.QueueEventArgs" /> that implements the <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> interface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventListener" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowQueueInfo">
      <summary>Contains information about a <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueueInfo.Items">
      <summary>Gets a collection of the unconsumed items in the workflow queue.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the unconsumed items in the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueueInfo.QueueName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> associated with this <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames">
      <summary>Gets a collection that contains the qualified name each activity subscribed to the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the qualified name of the each activity subscribed to the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowQueuingService">
      <summary>Provides the services for management of <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueuingService.CreateWorkflowQueue(System.IComparable,System.Boolean)">
      <summary>Creates a <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> by using the specified name and transactional scope.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
      <param name="queueName">The name of the queue.</param>
      <param name="transactional">A value that specifies whether the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> is visible outside the scope of the current transaction.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueName" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> with the name specified by <paramref name="queueName" /> already exists.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueuingService.DeleteWorkflowQueue(System.IComparable)">
      <summary>Deletes the specified <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <param name="queueName">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> to delete.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueName" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueuingService.Exists(System.IComparable)">
      <summary>Tests for the existence of the specified <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <returns>true if the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> exists; otherwise, false.</returns>
      <param name="queueName">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueName" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowQueuingService.GetWorkflowQueue(System.IComparable)">
      <summary>Retrieves the specified <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowQueue" />.</returns>
      <param name="queueName">The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueName" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The specified <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> was not found.</exception>
    </member>
    <member name="F:System.Workflow.Runtime.WorkflowQueuingService.PendingMessagesProperty">
      <summary>Contains the unconsumed items in the workflow queues associated with this <see cref="T:System.Workflow.Runtime.WorkflowQueuingService" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowRuntime">
      <summary>Represents the configurable execution environment provided by the workflow run-time engine for workflows.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> class by using the specified section of the application configuration file.</summary>
      <param name="configSectionName">The name of a valid workflowSettings section in the application configuration file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="configSectionName" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">A valid workflowSettings section could not be found in the application configuration file.</exception>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> already exists for this application domain.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.Workflow.Runtime.Configuration.WorkflowRuntimeSection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> class by using the settings in the specified <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</summary>
      <param name="settings">A <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="settings" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> already exists for this application domain.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.AddService(System.Object)">
      <summary>Adds the specified service to the workflow run-time engine.</summary>
      <param name="service">An object that represents the service to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="service" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="service" /> is already registered with the workflow run-time engine.-or-<paramref name="service" /> is a core service and the workflow run-time engine is already running (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> is true).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type)">
      <summary>Creates a new workflow instance by using the specified workflow <see cref="T:System.Type" />.</summary>
      <returns>The created workflow instance.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowType" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>Creates a workflow instance by using the specified workflow <see cref="T:System.Type" /> and the arguments to the workflow contained in the specified <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>The created workflow instance.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow to create.</param>
      <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> of objects keyed by string that represents the arguments to the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowType" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)">
      <summary>Creates a workflow instance by using the specified parameters. </summary>
      <returns>The created workflow instance.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow to create.</param>
      <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> of objects keyed by a string that represents the arguments to the workflow.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the specific <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowType" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader)">
      <summary>Creates a workflow instance by using the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>The created workflow instance.</returns>
      <param name="workflowDefinitionReader">An <see cref="T:System.Xml.XmlReader" /> that contains the workflow definition.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowDefinitionReader" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>Creates a workflow instance by using the specified <see cref="T:System.Xml.XmlReader" /> objects and the arguments contained in the specified <see cref="T:System.Collections.Generic.Dictionary`2" />. </summary>
      <returns>The created workflow instance.</returns>
      <param name="workflowDefinitionReader">An <see cref="T:System.Xml.XmlReader" /> that contains the workflow definition.</param>
      <param name="rulesReader">An <see cref="T:System.Xml.XmlReader" />.</param>
      <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> of objects keyed by a string that represents the arguments to the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowDefinitionReader" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)">
      <summary>Creates a workflow instance by using the specified parameters.</summary>
      <returns>The created workflow instance.</returns>
      <param name="workflowDefinitionReader">An <see cref="T:System.Xml.XmlReader" /> that contains the workflow definition.</param>
      <param name="rulesReader">An <see cref="T:System.Xml.XmlReader" />.</param>
      <param name="namedArgumentValues">A <see cref="T:System.Collections.Generic.Dictionary`2" /> of objects keyed by a string that represents the arguments to the workflow.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the specific <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> to create.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowType" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices``1">
      <summary>Retrieves all the services that are added to the workflow run-time engine that implement or derive from the specified generic type.</summary>
      <returns>Services that implement or derive from the specified generic type. </returns>
      <typeparam name="T">The service type.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices(System.Type)">
      <summary>Retrieves all the services that are added to the workflow run-time engine that implement or derive from the specified <see cref="T:System.Type" />.</summary>
      <returns>Services that implement or derive from the specified <see cref="T:System.Type" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> that services must implement to be returned.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.GetLoadedWorkflows">
      <summary>Gets a collection that contains all the workflow instances currently loaded in memory.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> object for each workflow instance currently loaded in memory.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.GetService``1">
      <summary>Retrieves a service of the specified generic type from the workflow run-time engine.</summary>
      <returns>A single service of the specified generic type.</returns>
      <typeparam name="T">The service type.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> has already been disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">More than one service of the generic type was found.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.GetService(System.Type)">
      <summary>Retrieves a service of the specified <see cref="T:System.Type" /> from the workflow run-time engine.</summary>
      <returns>The service of the specified <see cref="T:System.Type" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of the service to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is already disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">More than one service of type <paramref name="serviceType" /> was found.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow(System.Guid)">
      <summary>Retrieves the workflow instance that has the specified <see cref="T:System.Guid" />.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> that has the specified <see cref="T:System.Guid" />.</returns>
      <param name="instanceId">The <see cref="T:System.Guid" /> of a workflow instance.</param>
      <exception cref="T:System.InvalidOperationException">The workflow runtime is not started.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted">
      <summary>Gets a value that indicates whether the workflow run-time engine has been started.</summary>
      <returns>true if the workflow run-time engine has been started; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowRuntime.Name">
      <summary>Gets or sets the name associated with the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
      <returns>The name associated with this <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</returns>
      <exception cref="T:System.ObjectDisposedException">An attempt to set <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> on a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> that is disposed occurs.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt to set <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> while the workflow run-time engine is running occurs.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.RemoveService(System.Object)">
      <summary>Removes the specified service from the workflow run-time engine.</summary>
      <param name="service">An object that represents the service to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="service" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is already disposed of.</exception>
      <exception cref="T:System.InvalidOperationException">The workflow run-time engine has started (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> is true) and <paramref name="service" /> is a core service. - or -<paramref name="service" /> is not registered with the workflow run-time engine.</exception>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled">
      <summary>Occurs when a service that is derived from the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> class calls <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.Started">
      <summary>Occurs when the workflow run-time engine is started.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.StartRuntime">
      <summary>Starts the workflow run-time engine and the workflow run-time engine services.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is disposed.</exception>
      <exception cref="T:System.InvalidOperationException">There is more than one service workflow CommitWorkBatch service registered with this <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.-or-There is more than one scheduler service registered with this <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.-or- There is more than one persistence service registered with this <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />. </exception>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.Stopped">
      <summary>Occurs when the workflow run-time engine is stopped.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.WorkflowRuntime.StopRuntime">
      <summary>Stops the workflow run-time engine and the run-time services.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> is already disposed of.</exception>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted">
      <summary>Occurs when a workflow instance is aborted.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted">
      <summary>Occurs when a workflow instance has completed. </summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated">
      <summary>Occurs when a workflow instance is created.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled">
      <summary>Occurs when a workflow instance enters the idle state.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded">
      <summary>Occurs when the workflow instance is loaded into memory.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted">
      <summary>Occurs when the state of a workflow instance is persisted.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed">
      <summary>Occurs when execution of a workflow instance is resumed following a suspension.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted">
      <summary>Occurs when a workflow instance has been started.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended">
      <summary>Occurs when a workflow instance is suspended.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated">
      <summary>Occurs when a workflow instance is terminated.</summary>
    </member>
    <member name="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded">
      <summary>Occurs when the workflow instance is unloaded from memory.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowRuntimeEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Started" /> and <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" /> events.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowRuntimeEventArgs.IsStarted">
      <summary>Gets a value that indicates whether the workflow runtime engine is running.</summary>
      <returns>true if the workflow runtime engine is running; otherwise, false.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowStatus">
      <summary>Specifies the status of a workflow instance.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.WorkflowStatus.Running">
      <summary>The workflow instance is running.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.WorkflowStatus.Completed">
      <summary>The workflow instance has completed.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.WorkflowStatus.Suspended">
      <summary>The workflow instance has been suspended by a <see cref="T:System.Workflow.ComponentModel.SuspendActivity" /> activity, by a call to <see cref="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)" />,or by the workflow runtime engine.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.WorkflowStatus.Terminated">
      <summary>The workflow instance has been terminated by a </summary>
    </member>
    <member name="F:System.Workflow.Runtime.WorkflowStatus.Created">
      <summary>The workflow instance has been created by a call to one of the overloaded <see cref="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type)" /> methods.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowSuspendedEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended" /> event.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowSuspendedEventArgs.Error">
      <summary>Gets the description of why the workflow instance was suspended.</summary>
      <returns>The description of why the workflow instance was suspended.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.WorkflowTerminatedEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated" /> event.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.WorkflowTerminatedEventArgs.Exception">
      <summary>Gets the exception that caused the workflow instance to be terminated.</summary>
      <returns>The <see cref="T:System.Exception" /> that caused the workflow instance to be terminated.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection">
      <summary>Represents a section, within a configuration file, that defines settings for the workflow run-time engine.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.CommonParameters">
      <summary>Gets the collection of common parameters used by services.</summary>
      <returns>The common parameters used by services. The default is a null reference (Nothing in Visual Basic).</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.EnablePerformanceCounters">
      <summary>Gets or sets a value that indicates whether performance counters are enabled.</summary>
      <returns>true if performance counters are enabled; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.Name">
      <summary>Gets or sets the name of the workflow run-time engine.</summary>
      <returns>The name of the workflow run-time engine. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.Services">
      <summary>Gets the collection of services that are added to the workflow run-time engine when it is initialized.</summary>
      <returns>The services to be added to the workflow run-time engine.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate">
      <summary>Gets or sets a value that indicates whether validation occurs on the creation of the workflow instance.</summary>
      <returns>true if validation occurs on creation; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.WorkflowDefinitionCacheCapacity">
      <summary>Gets the number of workflow definitions that can be cached by the runtime.</summary>
      <returns>The number of workflows.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement">
      <summary>Represents a configuration element for a service to be added to the workflow runtime engine.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
      <summary>Called when an unknown attribute is encountered while deserializing the <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement" />.</summary>
      <returns>
        <see cref="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)" /> always returns true.</returns>
      <param name="name">The name of the unrecognized attribute.</param>
      <param name="value">The value of the unrecognized attribute.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement.Parameters">
      <summary>Gets the parameters for this service.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that specifies the parameters for the service.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement.Type">
      <summary>Gets or sets the assembly-qualified type name of the service.</summary>
      <returns>The assembly-qualified type name of the service.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set <see cref="P:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement.Type" /> to a null reference is made.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection">
      <summary>Represents the collection of services to be added to the workflow runtime engine.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection.Add(System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement)">
      <summary>Adds a <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement" /> to this <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection" />.</summary>
      <param name="serviceSettings">A <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement" /> that represents a service to be initialized and activated by the workflow runtime engine.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceSettings" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection.CreateNewElement">
      <summary>Creates a new <see cref="T:System.Configuration.ConfigurationElement" />.</summary>
      <returns>An empty <see cref="T:System.Configuration.ConfigurationElement" />.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>Returns a key for the specified <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement" />.</summary>
      <returns>The assembly-qualified type name of the service for the <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement" /> specified by <paramref name="settings" />.</returns>
      <param name="settings">A <see cref="T:System.Configuration.ConfigurationElement" /> for which to return a key.</param>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor">
      <summary>Specifies the code-beside handler information in the <see cref="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.BeforeHandlerInvoked(System.Guid,System.Guid,System.String,System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor)" /> and <see cref="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.UpdateHandlerMethodsForActivity(System.Guid,System.Guid,System.String,System.Collections.Generic.List{System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor})" /> methods.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor.Name">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> representing the name of the handler method.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor.Token">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> representing the CLR metadata token identifier for the handler method.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.DebugController">
      <summary>Relays workflow instance creation, execution and termination events to the debugger process. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.DebugController.AttachToConduit(System.Uri)">
      <summary>Establishes the communication channel between the <see cref="T:System.Workflow.Runtime.DebugEngine.DebugController" /> object running in the workflow host application and the debugger process.</summary>
      <param name="url">A <see cref="T:System.Uri" /> of the remoting object running in the debugger process with which the <see cref="T:System.Workflow.Runtime.DebugEngine.DebugController" /> communicates.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.DebugController.InitializeLifetimeService">
      <summary>Establishes a lifetime lease for the <see cref="T:System.Workflow.Runtime.DebugEngine.DebugController" /> object.</summary>
      <returns>An <see cref="T:System.Object" /> that implements <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> and is used to control the lifetime policy for the <see cref="T:System.Workflow.Runtime.DebugEngine.DebugController" /> object. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.DebugEngineCallback">
      <summary>References a callback method that is invoked by the workflow expression evaluation component. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.IExpressionEvaluationFrame">
      <summary>Defines the interface implemented by the workflow expression evaluation component that provides a context frame for expression evaluation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IExpressionEvaluationFrame.CreateEvaluationFrame(System.Workflow.Runtime.DebugEngine.IInstanceTable,System.Workflow.Runtime.DebugEngine.DebugEngineCallback)">
      <summary>Creates a stack frame for workflow expression evaluation.</summary>
      <param name="instanceTable">An object that implements <see cref="T:System.Workflow.Runtime.DebugEngine.IInstanceTable" />. Not used.</param>
      <param name="callback">The default <see cref="T:System.Workflow.Runtime.DebugEngine.DebugEngineCallback" /> implemented by the workflow runtime.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.IInstanceTable">
      <summary>Reserved for future use.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IInstanceTable.GetActivity(System.String,System.String)">
      <summary>Reserved for future use.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> specified by <paramref name="activityName" /> in the workflow with an id of <paramref name="instanceId" />. </returns>
      <param name="instanceId">Unique identifier of the workflow containing the activity</param>
      <param name="activityName">Name of the <see cref="T:System.Workflow.ComponentModel.Activity" /></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger">
      <summary>Defines the interface that receives workflow instance creation, execution, and termination status information from a <see cref="T:System.Workflow.Runtime.DebugEngine.DebugController" /> object running inside the workflow host application.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.ActivityStatusChanged(System.Guid,System.Guid,System.Guid,System.String,System.String,System.Workflow.ComponentModel.ActivityExecutionStatus,System.Int32)">
      <summary>Called when the <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionStatus" /> of an activity within the workflow changes.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <param name="activityQualifiedName">A <see cref="T:System.String" /> containing the fully qualified name of the current activity.</param>
      <param name="hierarchicalActivityId">A <see cref="T:System.String" /> containing the qualified name of the parent activity.</param>
      <param name="status">The <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionStatus" /> of the current activity.</param>
      <param name="stateReaderId">An <see cref="T:System.Int32" /> containing the activity execution context ID associated with the current activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.AssemblyLoaded(System.Guid,System.String,System.Boolean)">
      <summary>Called when an assembly is loaded in the app domain corresponding to the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> in the workflow host application.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="assemblyPath">A <see cref="T:System.String" /> containing the path on disk from where the assembly is loaded</param>
      <param name="fromGlobalAssemblyCache">A <see cref="T:System.Boolean" /> that indicates whether the assembly is loaded from the global assembly cache.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.BeforeActivityStatusChanged(System.Guid,System.Guid,System.Guid,System.String,System.String,System.Workflow.ComponentModel.ActivityExecutionStatus,System.Int32)">
      <summary>Called before the <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionStatus" /> of an activity within the workflow changes.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <param name="activityQualifiedName">A <see cref="T:System.String" /> containing the fully qualified name of the current activity.</param>
      <param name="hierarchicalActivityId">A <see cref="T:System.String" /> containing the qualified name of the parent activity.</param>
      <param name="status">The <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionStatus" /> of the current activity.</param>
      <param name="stateReaderId">An <see cref="T:System.Int32" /> containing the activity execution context ID associated with the current activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.BeforeHandlerInvoked(System.Guid,System.Guid,System.String,System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor)">
      <summary>Called before a handler in the code-beside is about to be invoked.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <param name="activityQualifiedName">A <see cref="T:System.String" /> containing the fully qualified name of the current activity.</param>
      <param name="handlerMethod">An <see cref="T:System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor" /> that contains the information regarding the code-beside handler method that is about to be invoked.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.HandlerInvoked(System.Guid,System.Guid,System.Int32,System.String)">
      <summary>Called after a handler in the code-beside is invoked.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <param name="threadId">An <see cref="T:System.Int32" /> containing the ID of the thread on which the handler was invoked.</param>
      <param name="activityQualifiedName">A <see cref="T:System.String" /> containing the fully qualified name of the current activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.InstanceCompleted(System.Guid,System.Guid)">
      <summary>Called when a workflow instance completes.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.InstanceCreated(System.Guid,System.Guid,System.Guid)">
      <summary>Called when a workflow instance is created.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.InstanceDynamicallyUpdated(System.Guid,System.Guid,System.Guid)">
      <summary>Called when the workflow instance is dynamically updated with a workflow change.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.ScheduleTypeLoaded(System.Guid,System.Guid,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String)">
      <summary>Called when a new workflow type is loaded by the workflow runtime engine in the workflow host application.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <param name="assemblyFullName">A <see cref="T:System.String" /> containing the assembly name from which the workflow type was loaded.</param>
      <param name="fileName">A <see cref="T:System.String" /> containing the full path of the markup file corresponding to the workflow, or null if the workflow type was a code-only workflow.</param>
      <param name="md5Digest">A <see cref="T:System.String" /> containing the md5 hash code for the workflow markup definition, or null if the workflow type was a code-only workflow.</param>
      <param name="isDynamic">A <see cref="T:System.Boolean" /> that indicates whether the workflow definition was modified dynamically.</param>
      <param name="scheduleNamespace">A <see cref="T:System.String" /> containing the fully qualified name of the workflow type.</param>
      <param name="scheduleName">A <see cref="T:System.String" /> containing the workflow type name.</param>
      <param name="workflowMarkup">A <see cref="T:System.String" /> containing the XAML serialized format of the workflow type.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.SetInitialActivityStatus(System.Guid,System.Guid,System.Guid,System.String,System.String,System.Workflow.ComponentModel.ActivityExecutionStatus,System.Int32)">
      <summary>Called to set the initial status of the activities in a workflow. </summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <param name="instanceId">A <see cref="T:System.Guid" /> associated with the currently running workflow instance.</param>
      <param name="activityQualifiedName">A <see cref="T:System.String" /> containing the fully qualified name of the current activity.</param>
      <param name="hierarchicalActivityId">A <see cref="T:System.String" /> containing the qualified name of the parent activity.</param>
      <param name="status">The <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionStatus" /> of the current activity.</param>
      <param name="stateReaderId">An <see cref="T:System.Int32" /> containing the activity execution context ID associated with the current activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebugger.UpdateHandlerMethodsForActivity(System.Guid,System.Guid,System.String,System.Collections.Generic.List{System.Workflow.Runtime.DebugEngine.ActivityHandlerDescriptor})">
      <summary>Called when an activity enters the Executing state.</summary>
      <param name="programId">An internally generated <see cref="T:System.Guid" /> associated with a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> instance.</param>
      <param name="scheduleTypeId">An internally generated <see cref="T:System.Guid" /> associated with a workflow type. </param>
      <param name="activityQualifiedName">A <see cref="T:System.String" /> containing the fully qualified name of the current activity.</param>
      <param name="handlerMethods">A <see cref="T:System.Collections.Generic.List`1" /> of handlers associated with an activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.IWorkflowDebuggerService">
      <summary>Notifies workflow debugger that code condition evaluation events have occurred.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebuggerService.NotifyHandlerInvoked">
      <summary>Called after a code condition handler is invoked.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.IWorkflowDebuggerService.NotifyHandlerInvoking(System.Delegate)">
      <summary>Called before a code condition handler is invoked.</summary>
      <param name="delegateHandler">The code condition handler that will be invoked.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingAttribute">
      <summary>Specifies the debug stepping behavior for composite activities whose child activities can execute concurrently.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingAttribute.#ctor(System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingAttribute" /> class by using a <see cref="T:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption" /> enumeration value.</summary>
      <param name="steppingOption">A <see cref="T:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption" /> enumeration value specifying the stepping behavior for the concurrently executing child activities.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingAttribute.SteppingOption">
      <summary>Gets the stepping behavior for the composite activity.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption" /> enumeration value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption">
      <summary>Specifies how the workflow debugger will step through concurrently executing child activities of a composite activity.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption.Sequential">
      <summary>The child activities will be debugged sequentially.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.DebugEngine.WorkflowDebuggerSteppingOption.Concurrent">
      <summary>The child activities will be debugged concurrently.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService">
      <summary>Represents the default version of <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService" /> created by the workflow runtime engine if no other WorkflowCommitWorkBatch service is added.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.#ctor">
      <summary>Initializes a <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a SharedConnectionWorkflowCommitWorkBatchService class using a collection of parameters for initialization.</summary>
      <param name="parameters">
        <see cref="T:System.Collections.Specialized.NameValueCollection" />. The constructor is invoked when the workflow runtime engine loads services from an application configuration file. The valid key is <see cref="P:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.EnableRetries" />. This requests the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService" /> to retry in case of a failed database connection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.CommitWorkBatch(System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback)">
      <summary>Creates a work batch if one does not exist.</summary>
      <param name="commitWorkBatchCallback">The <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback" />  delegate to call to commit the work batch.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.EnableRetries">
      <summary>Gets and sets a value specifying whether the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService" /> will retry committing a work batch. </summary>
      <returns>true if the service should retry committing the work batch; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.OnStopped">
      <summary>Represents the method called when the workflow runtime raises the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" /> event.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService.Start">
      <summary>Represents the method called to start the service.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.DefaultWorkflowLoaderService">
      <summary>Represents the default version of <see cref="T:System.Workflow.Runtime.Hosting.WorkflowLoaderService" /> created by the workflow runtime engine if no other workflow loader service is added.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowLoaderService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowLoaderService" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowLoaderService.CreateInstance(System.Type)">
      <summary>Creates a root activity definition tree by using the specified workflow <see cref="T:System.Type" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> object that represents the root activity definition tree. </returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow to create.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowLoaderService.CreateInstance(System.Xml.XmlReader,System.Xml.XmlReader)">
      <summary>Creates a new root activity definition tree by deserializing the .xoml and the .rules files.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> object that represents the root activity definition tree. </returns>
      <param name="workflowDefinitionReader">
        <see cref="T:System.Xml.XmlReader" /> that holds the workflow XOML definition (.xoml file).</param>
      <param name="rulesReader">
        <see cref="T:System.Xml.XmlReader" /> that holds the workflow rules (.rules file).</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService">
      <summary>Creates and manages the threads that run workflow instances on the workflow runtime engine. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" /> class. </summary>
      <param name="parameters">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that holds initialization information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">One of the key values in the <paramref name="parameters" /> collection contains a null reference (Nothing).--or--One of the key values in the <paramref name="parameters" /> collection does not match the default key for <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" />.</exception>
      <exception cref="T:System.FormatException">One of the parameters cannot be converted to a double-precision floating point number that matches <see cref="P:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.MaxSimultaneousWorkflows" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.MaxSimultaneousWorkflows" /> is less than 1.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" /> class by using the specified maximum number of workflow instances that the service can run simultaneously. </summary>
      <param name="maxSimultaneousWorkflows">An integer that determines the maximum number of workflow instances that can be stored in the thread pool queue.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxSimultaneousWorkflows" /> is less than 1.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.Cancel(System.Guid)">
      <summary>Cancels the specified existing workflow instance work item.</summary>
      <param name="timerId">The <see cref="T:System.Guid" /> associated with the existing scheduled work item to cancel.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="timerId" /> is an empty GUID.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.MaxSimultaneousWorkflows">
      <summary>Gets the maximum number of workflow instances that can be stored in the thread pool queue.</summary>
      <returns>An integer that represents the maximum number of workflow instances that can be stored in the thread pool queue.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.OnStarted">
      <summary>Notifies the <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" /> that a workflow instance has started to run.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)">
      <summary>Adds a workflow instance to the pending work items queue using the specified workflow instance using the specified multicast delegate. </summary>
      <param name="callback">A <see cref="T:System.Threading.WaitCallback" /> multicast delegate that represents the method to run.</param>
      <param name="workflowInstanceId">A <see cref="T:System.Guid" /> that represents the workflow instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)">
      <summary>Adds the specified workflow instance to the pending work item queue using the specified multicast delegate, <see cref="T:System.DateTime" /> and GUIDs. </summary>
      <param name="callback">A <see cref="T:System.Threading.WaitCallback" /> multicast delegate that represents the method to run.</param>
      <param name="workflowInstanceId">A <see cref="T:System.Guid" /> that represents the workflow instance.</param>
      <param name="whenUtc">The <see cref="T:System.DateTime" /> that indicates the time to begin running the thread.</param>
      <param name="timerId">A <see cref="T:System.Guid" /> that represents the scheduled thread.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="workflowInstanceId" /> or <paramref name="timerId" /> is an empty GUID.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.Stop">
      <summary>Stops the currently running thread on the workflow instance and any timers that are running. </summary>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService">
      <summary>Provides a threading service that allows the host application creating a workflow instance to donate the <see cref="T:System.Threading.Thread" /> on which the workflow instance is run. Using this threading service, host applications can run a workflow instance on a single <see cref="T:System.Threading.Thread" /> in synchronous mode (although if the workflow contains a delay activity, the work is postponed until after the delay activity is executed on a separate thread spawned by <see cref="System.Threading.Timer" />).This mode blocks the execution of the host application until the workflow instance becomes idle. Subsequently, the workflow instance can only be executed using the <see cref="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)" /> method of this service.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" /> class. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" /> class.</summary>
      <param name="useActiveTimers">Boolean that determines how delay activities are handled. If true, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If false, the host must manually resume the workflow after the delay activities expire.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" /> class.</summary>
      <param name="parameters">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains parameters for <paramref name="useActiveTimers" />. If true, the scheduler service automatically resumes workflows after delay activities expire (by using an in-memory timer). If false, the host must manually resume the workflow after the delay activities expire.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel(System.Guid)">
      <summary>Cancels the specified existing workflow instance work item.</summary>
      <param name="timerId">The <see cref="T:System.Guid" /> associated with the existing scheduled work item to cancel.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted">
      <summary>Overloaded from <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted" />. This method is called whenever <see cref="M:System.Workflow.Runtime.WorkflowRuntime.StartRuntime" /> is called and is used by the <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" /> to do work that is needed when the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> starts.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)">
      <summary>Runs the specified workflow instance.</summary>
      <returns>true if the workflow starts running; otherwise, false.</returns>
      <param name="workflowInstanceId">The <see cref="T:System.Guid" /> for the workflow instance to run.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="workflowInstanceId" /> is an empty GUID.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)">
      <summary>Adds a workflow instance to the pending work items queue using the specified workflow instance using the specified multicast delegate. </summary>
      <param name="callback">A <see cref="T:System.Threading.WaitCallback" /> multicast delegate that represents the method to run.</param>
      <param name="workflowInstanceId">A <see cref="T:System.Guid" /> that represents the workflow instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)">
      <summary>Adds the specified workflow instance to the pending work item queue using the specified multicast delegate, <see cref="T:System.DateTime" /> and GUIDs. </summary>
      <param name="callback">A <see cref="T:System.Threading.WaitCallback" /> multicast delegate that represents the method to run.</param>
      <param name="workflowInstanceId">A <see cref="T:System.Guid" /> that represents the workflow instance.</param>
      <param name="whenUtc">The <see cref="T:System.DateTime" /> that indicates the time to begin running the thread.</param>
      <param name="timerId">A <see cref="T:System.Guid" /> that represents the scheduled thread.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="workflowInstanceId" /> or <paramref name="timerId" /> is an empty GUID.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop">
      <summary>Overloaded from <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop" />. The <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" /> uses this method to do work that is needed when the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> stops.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.PersistenceException">
      <summary>The exception that is thrown when the persistence service cannot fulfill a request. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.PersistenceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.PersistenceException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.PersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.PersistenceException" /> class by using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and the specified <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that holds contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.PersistenceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.PersistenceException" /> class by using the specified message.</summary>
      <param name="message">A description of the cause of the exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.PersistenceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.PersistenceException" /> by using the specified message and <see cref="T:System.Exception" />.</summary>
      <param name="message">A description of the cause of the exception.</param>
      <param name="innerException">The exception that caused the <see cref="T:System.Workflow.Runtime.Hosting.PersistenceException" /> to be thrown.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService">
      <summary>Represents the shared-connection version of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService" /> service used by the runtime. In this context, shared-connection means that the service uses the same SQL connection for both the tracking and persistence services. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a <see cref="T:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService" /> class.</summary>
      <param name="parameters">
        <see cref="T:System.Collections.Specialized.NameValueCollection" />. The constructor is invoked when the workflow runtime engine loads services from an application configuration file. The valid key is <paramref name="EnableRetries" />. This requests that the <see cref="T:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService" /> retry in case of a failed database connection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService.#ctor(System.String)">
      <summary>Initializes a <see cref="T:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService" /> class using a database connection string.</summary>
      <param name="connectionString">Database connection string.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService.CommitWorkBatch(System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback)">
      <summary>Creates a transaction if one does not exist.</summary>
      <param name="commitWorkBatchCallback">The <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback" />  delegate to call to commit the work batch.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService.EnableRetries">
      <summary>Gets and sets a value specifying whether the <see cref="T:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService" /> will retry committing a work batch.</summary>
      <returns>true if the service should retry committing the work batch; otherwise, false. The default is false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService.OnStopped">
      <summary>Represents the method called when the workflow runtime raises the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" /> event.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService.Start">
      <summary>Represents the method called to start the service.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.SqlPersistenceWorkflowInstanceDescription">
      <summary>Describes the workflow instances that are stored in the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlPersistenceWorkflowInstanceDescription.IsBlocked">
      <summary>Gets a value that shows whether the workflow instance is blocked.</summary>
      <returns>true if the workflow instance is blocked; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlPersistenceWorkflowInstanceDescription.NextTimerExpiration">
      <summary>Gets the time in UTC format at which the next timer will expire.</summary>
      <returns>The time in UTC format at which the next timer will expire.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlPersistenceWorkflowInstanceDescription.Status">
      <summary>Gets the status of the workflow instance.</summary>
      <returns>The status of the workflow instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlPersistenceWorkflowInstanceDescription.SuspendOrTerminateDescription">
      <summary>Gets the description for the suspension or termination of the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" />.</summary>
      <returns>The description for the suspension or termination of the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlPersistenceWorkflowInstanceDescription.WorkflowInstanceId">
      <summary>Gets the workflow instance identifier.</summary>
      <returns>The workflow instance identifier.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService">
      <summary>Represents a persistence service that uses a SQL database to store workflow state information.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" /> class by using the specified parameters.</summary>
      <param name="parameters">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains startup parameters.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> contains an invalid database connection string.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters " />is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" /> class by using the database connection string.</summary>
      <param name="connectionString">A valid database connection string.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.#ctor(System.String,System.Boolean,System.TimeSpan,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" /> class using a database connection string and other parameters. </summary>
      <param name="connectionString">A valid database connection string.</param>
      <param name="unloadOnIdle">true to unload the workflow when it is in an idle state.</param>
      <param name="instanceOwnershipDuration">The length of time that locks are maintained on idle workflows.</param>
      <param name="loadingInterval">The frequency at which the persistence service polls the database for workflows with expired timers.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.EnableRetries">
      <summary>Gets and sets a value that specifies whether the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" /> retries committing a work batch. </summary>
      <returns>true if the service should retry committing the work batch; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.GetAllWorkflows">
      <summary>Retrieves instance descriptions of all persisted workflows.</summary>
      <returns>A list of all persisted workflows.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)">
      <summary>Retrieves the specified completed scope from the database.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</returns>
      <param name="id">The <see cref="T:System.Guid" /> of the scope activity.</param>
      <param name="outerActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that encloses the scope activity.</param>
      <exception cref="T:System.InvalidOperationException">A scope that matches <paramref name="id" /> could not be found in the database.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.LoadExpiredTimerWorkflowIds">
      <summary>Retrieves a list of ids for workflows with expired timers.</summary>
      <returns>A list of ids for workflows with expired timers.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.LoadingInterval">
      <summary>Gets the length of the loading interval.</summary>
      <returns>The frequency at which the persistence service polls the database for workflows with expired timers.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)">
      <summary>Retrieves the specified workflow instance state from the database.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance.</returns>
      <param name="id">The <see cref="T:System.Guid" /> of the workflow instance state.</param>
      <exception cref="T:System.InvalidOperationException">A workflow instance state that matches <paramref name="id" /> could not be found in the database.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.OnStarted">
      <summary>Starts a new timer and recovers running workflow instances.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)">
      <summary>Saves the state of the specified completed scope.</summary>
      <param name="completedScopeActivity">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)">
      <summary>Saves the specified workflow instance state.</summary>
      <param name="rootActivity">The root activity of the workflow instance.</param>
      <param name="unlock">true if the workflow instance should not be locked; false if the workflow instance should be locked.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.ServiceInstanceId">
      <summary>Gets the service instance identifier.</summary>
      <returns>The service instance identifier.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.Start">
      <summary>Starts the <see cref="T:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService" />.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.Stop">
      <summary>Stops the service and the timer. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.System#Workflow#Runtime#IPendingWork#Commit(System.Transactions.Transaction,System.Collections.ICollection)">
      <summary>Writes an <see cref="T:System.Collections.ICollection" /> of serialized state objects to the database.</summary>
      <param name="transaction">A <see cref="T:System.Transactions.Transaction" />.</param>
      <param name="items">The <see cref="T:System.Collections.ICollection" /> of work items to be written to the database.</param>
      <exception cref="T:System.Workflow.Runtime.Hosting.PersistenceException">An error occurred while trying to write to the database.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.System#Workflow#Runtime#IPendingWork#Complete(System.Boolean,System.Collections.ICollection)">
      <summary>Completes the work batch and releases any resources.</summary>
      <param name="succeeded">true if the commit succeeded; otherwise, false.</param>
      <param name="items">An <see cref="T:System.Collections.ICollection" /> of serialized state objects.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.System#Workflow#Runtime#IPendingWork#MustCommit(System.Collections.ICollection)">
      <summary>Returns a value that indicates whether the collection of serialized state objects should be written to the database.</summary>
      <returns>true indicates that the batch should be committed; <see cref="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.System.Workflow.Runtime.IPendingWork.MustCommit(System.Collections.ICollection)" /> always returns true. </returns>
      <param name="items">An <see cref="T:System.Collections.ICollection" /> of serialized state objects to be written to the database.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)">
      <summary>Returns a value that indicates whether the workflow is unloaded when it is in an idle state.</summary>
      <returns>true if the workflow is unloaded when it is in an idle state; otherwise, false.</returns>
      <param name="activity">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)">
      <summary>Unlocks access to the specified workflow instance state.</summary>
      <param name="rootActivity">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService">
      <summary>Allows custom logic for the commitment of work batches.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatch(System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback)">
      <summary>Called to commit the work batch.</summary>
      <param name="commitWorkBatchCallback">The <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback" />  delegate to call to commit the work batch.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService.CommitWorkBatchCallback">
      <summary>Commits a <see cref="T:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService" /> work batch.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowLoaderService">
      <summary>The abstract base class from which workflow loader services are derived.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowLoaderService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowLoaderService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowLoaderService.CreateInstance(System.Type)">
      <summary>Creates a new workflow instance by using the specified workflow <see cref="T:System.Type" />.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> object that represents the workflow instance created. </returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow to create.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowLoaderService.CreateInstance(System.Xml.XmlReader,System.Xml.XmlReader)">
      <summary>Creates a workflow instance by using the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> object that represents the workflow instance created.</returns>
      <param name="workflowDefinitionReader">An <see cref="T:System.Xml.XmlReader" /> that contains the workflow definition.</param>
      <param name="rulesReader">An <see cref="T:System.Xml.XmlReader" />.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService">
      <summary>The abstract base class from which all persistence services are derived.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)">
      <summary>Retrieves the serialized default form of the <see cref="T:System.Workflow.ComponentModel.Activity" />. </summary>
      <returns>The serialized default form of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> whose serialized form is requested.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)">
      <summary>Indicates whether the given activity is blocked.</summary>
      <returns>true if the given activity is blocked; otherwise, false. </returns>
      <param name="rootActivity">The root activity of the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)">
      <summary>Retrieves the termination or suspend information of the given activity.</summary>
      <returns>A <see cref="T:System.String" /> that contains the termination or suspend information. </returns>
      <param name="rootActivity">The root activity of the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)">
      <summary>Retrieves the status of the workflow.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> enumeration value that denotes the status of the workflow. </returns>
      <param name="rootActivity">The root activity of the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)">
      <summary>When implemented in a derived class, loads the specified completed scope back into memory.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</returns>
      <param name="scopeId">The <see cref="T:System.Guid" /> of the completed scope.</param>
      <param name="outerActivity">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the activity that encloses the completed scope.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)">
      <summary>When implemented in a derived class, loads the specified state of the workflow instance back into memory.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance.</returns>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the root activity of the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)">
      <summary>Restores the <see cref="T:System.Workflow.ComponentModel.Activity" /> from its serialized form.</summary>
      <returns>The restored <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <param name="activityBytes">The serialized form of <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="outerActivity">The outer <see cref="T:System.Workflow.ComponentModel.Activity" />, containing the <see cref="T:System.Workflow.ComponentModel.Activity" /> to restore.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)">
      <summary>When implemented in a derived class, saves the specified completed scope to a data store.</summary>
      <param name="activity">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)">
      <summary>When implemented in a derived class, saves the workflow instance state to a data store.</summary>
      <param name="rootActivity">The root activity of the workflow instance.</param>
      <param name="unlock">true if the workflow instance should not be locked; false if the workflow instance should be locked.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)">
      <summary>Determines whether a workflow should be unloaded when idle. </summary>
      <returns>If true, the workflow runtime engine unloads the specified workflow when it becomes idle. </returns>
      <param name="activity">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)">
      <summary>When overridden in a derived class, unlocks the workflow instance state.</summary>
      <param name="rootActivity">The root activity of the workflow instance.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService">
      <summary>The abstract base class from which the workflow runtime engine core services are derived.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted">
      <summary>When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Started" /> event.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped">
      <summary>When overridden in a derived class, represents the method that will be called when the workflow runtime engine raises the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" /> event.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)">
      <summary>Raises the <see cref="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" /> event.</summary>
      <param name="exception">The exception that could not be handled.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the workflow instance associated with the unhandled exception.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime">
      <summary>Gets the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> for this service.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start">
      <summary>When overridden in a derived class, starts the service and changes the <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> to <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> is a null reference (Nothing in Visual Basic)-or-The service has already been started.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State">
      <summary>Gets the state of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</summary>
      <returns>One of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" /> values.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop">
      <summary>When overridden in a derived class, stops the service and changes the <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> to <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> is a null reference (Nothing in Visual Basic).-or-The service has not yet been started.</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState">
      <summary>Specifies the state of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped">
      <summary>Indicates that the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> has stopped.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting">
      <summary>Indicates that the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> is starting. <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start" /> changes the state of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> to <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting" />.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started">
      <summary>Indicates that the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> has started. </summary>
    </member>
    <member name="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping">
      <summary>Indicates that the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> is stopping. <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop" /> changes the state of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> to <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping" />.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowSchedulerService">
      <summary>Provides a mechanism to implement your own thread pool to execute the workflow and manage in-memory timer registration and events.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowSchedulerService" /> class. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Cancel(System.Guid)">
      <summary>When overridden in a derived class, cancels the scheduled work item with the given <paramref name="timerId" />.</summary>
      <param name="timerId">The <see cref="T:System.Guid" /> associated with the existing scheduled thread to cancel.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)">
      <summary>When overridden in a derived class, this method is called by the runtime to schedule a work item (callback) for a particular instance ID.</summary>
      <param name="callback">A <see cref="T:System.Threading.WaitCallback" /> multicast delegate that represents the method to run.</param>
      <param name="workflowInstanceId">A <see cref="T:System.Guid" /> that represents the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)">
      <summary>When overridden in a derived class, this method is called by the runtime to schedule a work item (callback) for a particular workflow instance to be done at the given time (<see cref="T:System.DateTime" />).</summary>
      <param name="callback">A <see cref="T:System.Threading.WaitCallback" /> multicast delegate that represents the method to run.</param>
      <param name="workflowInstanceId">A <see cref="T:System.Guid" /> that represents the workflow instance to add.</param>
      <param name="whenUtc">The <see cref="T:System.DateTime" /> to begin running the workflow item.</param>
      <param name="timerId">A <see cref="T:System.Guid" /> that represents the scheduled timer.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.WorkflowWebHostingModule">
      <summary>Provides a mechanism for routing the workflow instance ID to and from a <see cref="T:System.Workflow.Activities.WorkflowWebService" /> to a cookie in the Web client. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowWebHostingModule.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowWebHostingModule" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowWebHostingModule.System#Web#IHttpModule#Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowWebHostingModule" />.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.WorkflowWebHostingModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
      <summary>Initializes the workflow Web hosting module and prepares the module to handle requests.</summary>
      <param name="application">An <see cref="T:System.Web.HttpApplication" /> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract">
      <summary>Specifies a property or a field to be extracted from an activity and sent to the tracking service together with an associated collection of annotations when a track point is matched.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract" /> class by using the specified activity member name.</summary>
      <param name="member">The dot delineated name of the field or the property that should be extracted and sent to the tracking service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract.Annotations">
      <summary>Gets the collection of annotations associated with the extracted data.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> associated with the activity property or field to be extracted. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityDataTrackingExtract.Member">
      <summary>Gets or sets the field or the property to be extracted from the associated activity when a track point is matched.</summary>
      <returns>A dot delineated name that specifies a field or a property of the activity. The default is a null reference (Nothing in Visual Basic). </returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityTrackingCondition">
      <summary>Represents a condition that compares the value of an activity member to a specified value by using a specified comparison operator.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingCondition" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingCondition" /> class by specifying an activity member and a value for comparison.</summary>
      <param name="member">The dot delineated name of an activity member.</param>
      <param name="value">The value to be compared</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Member">
      <summary>Gets or sets the name of the activity member that is to be compared with <see cref="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Value" />.</summary>
      <returns>The dot delineated name of the activity member</returns>
      <exception cref="T:System.ArgumentNullException">The condition was evaluated and <see cref="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Member" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The condition was evaluated and <see cref="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Member" /> is incorrectly formed.</exception>
      <exception cref="T:System.MissingMemberException">The condition was evaluated and <see cref="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Member" /> does not refer to a valid activity member.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Operator">
      <summary>Gets or sets the operator that is used in the comparison.</summary>
      <returns>One of the <see cref="T:System.Workflow.Runtime.Tracking.ComparisonOperator" /> values. The default is Equals.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Value">
      <summary>The value that is to be compared with <see cref="P:System.Workflow.Runtime.Tracking.ActivityTrackingCondition.Member" />.</summary>
      <returns>The value used in the comparison. </returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation">
      <summary>Defines an activity-qualified location that corresponds to an activity status event in the potential execution path of a root workflow instance. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class by using the specified activity name.</summary>
      <param name="activityTypeName">The unqualified name of the common language runtime (CLR) type of an activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityTypeName" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor(System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.ActivityExecutionStatus})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class that has a reference activity type with the specified unqualified name, that specifies whether to match activities derived from the reference activity type, and that matches the specified activity execution status events.</summary>
      <param name="activityTypeName">The unqualified name of the common language runtime (CLR) type of an activity.</param>
      <param name="matchDerivedTypes">true if activities derived from the reference activity type should be matched; otherwise, false.</param>
      <param name="executionStatusEvents">A collection that contains one or more of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityTypeName" /> is a null reference (Nothing in Visual Basic)-or-<paramref name="executionStatusEvents" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.ActivityExecutionStatus})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class that has a reference activity type with the specified unqualified name and that matches the specified activity execution status events.</summary>
      <param name="activityTypeName">The unqualified name of the common language runtime (CLR) type of an activity.</param>
      <param name="executionStatusEvents">A collection that contains one or more of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityTypeName" /> is a null reference (Nothing in Visual Basic)-or-<paramref name="executionStatusEvents" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class by using the specified reference activity type.</summary>
      <param name="activityType">The <see cref="T:System.Type" /> of an activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityType" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor(System.Type,System.Boolean,System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.ActivityExecutionStatus})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class that has the specified reference activity type, that specifies whether to match activities derived from the reference activity type, and that matches the specified activity execution status events.</summary>
      <param name="activityType">The <see cref="T:System.Type" /> of an activity.</param>
      <param name="matchDerivedTypes">true if activities derived from the reference activity type should be matched; otherwise, false.</param>
      <param name="executionStatusEvents">A collection that contains one or more of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityType" /> is a null reference (Nothing in Visual Basic).-or-<paramref name="executionStatusEvents" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.ActivityExecutionStatus})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> class that has the specified reference activity type and matches the specified activity execution status events.</summary>
      <param name="activityType">The <see cref="T:System.Type" /> of an activity.</param>
      <param name="executionStatusEvents">A collection that contains one or more of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityType" /> is a null reference (Nothing in Visual Basic).-or-<paramref name="executionStatusEvents" /> is a null reference (Nothing).</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.ActivityType">
      <summary>Gets or sets the common language runtime (CLR) type of the reference activity to be matched.</summary>
      <returns>The <see cref="T:System.Type" /> of the activity.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.ActivityTypeName">
      <summary>Gets or sets the unqualified name of the reference activity type for the location.</summary>
      <returns>The unqualified name of the reference activity type.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.Conditions">
      <summary>Gets a collection of conditions that are used to qualify interest in the activity.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingConditionCollection" /> that contains conditions that are used to qualify interest in the activity. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.ExecutionStatusEvents">
      <summary>Gets the list of activity status events that can be matched for this location.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IList`1" /> that contains one or more of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values. The default is an empty list.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingLocation.MatchDerivedTypes">
      <summary>Gets or sets a value that indicates whether activities derived from the reference activity type should be matched.</summary>
      <returns>true if activities derived from the reference activity type of the location should be matched; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.ActivityTrackingLocation})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection" /> class by using a list of activity locations.</summary>
      <param name="locations">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="locations" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord">
      <summary>Contains the data sent to a tracking service by the runtime tracking infrastructure when an <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> is matched. It is also used in the return list of the <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.ActivityEvents" /> property.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.#ctor(System.Type,System.String,System.Guid,System.Guid,System.Workflow.ComponentModel.ActivityExecutionStatus,System.DateTime,System.Int32,System.EventArgs)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" /> class by using the specified parameters.</summary>
      <param name="activityType">The <see cref="T:System.Type" /> of the activity associated with the activity status event.</param>
      <param name="qualifiedName">The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity associated with the activity status event.</param>
      <param name="contextGuid">The <see cref="T:System.Guid" /> that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the activity associated with the activity status event.</param>
      <param name="parentContextGuid">The <see cref="T:System.Guid" /> that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the parent activity of the activity associated with the activity status event.</param>
      <param name="executionStatus">One of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</param>
      <param name="eventDateTime">A <see cref="T:System.DateTime" /> that indicates the date and time of the activity status event associated with the tracking record.</param>
      <param name="eventOrder">The relative order in which the activity status event associated with this tracking record occurred in the workflow instance.</param>
      <param name="eventArgs">A null reference (Nothing in Visual Basic). This field is not set for an <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.ActivityType">
      <summary>Gets or sets the common language runtime (CLR) type of the activity associated with this <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />.</summary>
      <returns>The <see cref="T:System.Type" /> of the activity for which this <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" /> was created.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.Annotations">
      <summary>Gets the collection of annotations associated with the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> that was matched.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> that contains the annotations that are associated with the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> that corresponds to this tracking record.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.Body">
      <summary>Gets a list that contains any data extracted from the workflow for the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> that was matched.</summary>
      <returns>A list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItem" /> objects each of which contains a single piece of extracted data and its associated annotations.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.ContextGuid">
      <summary>Context of the activity.</summary>
      <returns>
        <see cref="T:System.Guid" /> that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the activity associated with the activity status event.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.EventArgs">
      <summary>Always null for an <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />.</summary>
      <returns>A null reference (Nothing) for an <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.EventDateTime">
      <summary>Gets or sets the date and time that the activity status event occurred.</summary>
      <returns>A <see cref="T:System.DateTime" /> value.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.EventOrder">
      <summary>Gets or sets a value that indicates the order in the workflow instance of the activity status event that matched the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" />.</summary>
      <returns>A value that indicates the order of the activity status event in the workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.ExecutionStatus">
      <summary>Gets or sets the execution status of the activity associated with this <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />. </summary>
      <returns>One of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.ParentContextGuid">
      <summary>Context of the parent activity.</summary>
      <returns>
        <see cref="T:System.Guid" /> that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the activity associated with the activity status event.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackingRecord.QualifiedName">
      <summary>Gets or sets the identifier of the activity associated with this <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the <see cref="T:System.Workflow.ComponentModel.Activity" /> for which this tracking record was created.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint">
      <summary>Defines a point, associated with an activity execution status change, to be tracked that is in the potential execution path of a workflow instance. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackPoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackPoint.Annotations">
      <summary>Gets the collection of annotations associated with the track point.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" />. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackPoint.ExcludedLocations">
      <summary>Gets the collection of locations that should be excluded from the track point by the runtime tracking infrastructure.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection" /> that specifies locations to be excluded from the track point. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackPoint.Extracts">
      <summary>Gets a collection that specifies data to be extracted from the workflow instance and sent to the tracking service.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.ExtractCollection" /> that specifies the data to be extracted and sent to the tracking service. The default is an empty collection. </returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ActivityTrackPoint.MatchingLocations">
      <summary>Gets the collection of locations that should be included in matching for the track point by the runtime tracking infrastructure.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection" /> that specifies the locations to be matched for the track point. The default is an empty collection. </returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ActivityTrackPointCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackPointCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPointCollection" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ActivityTrackPointCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.ActivityTrackPoint})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPointCollection" /> class by using a list of activity track points.</summary>
      <param name="points">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPoint" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ComparisonOperator">
      <summary>Specifies the operation to perform on the operands of a comparison. </summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.ComparisonOperator.Equals">
      <summary>Test for operand equality.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.ComparisonOperator.NotEquals">
      <summary>Test for operand inequality.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ExtractCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.TrackingExtract" /> objects. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ExtractCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ExtractCollection" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ExtractCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.TrackingExtract})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ExtractCollection" /> class by using a list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingExtract" /> objects.</summary>
      <param name="extracts">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingExtract" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extracts" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.IProfileNotification">
      <summary>Provides a notification mechanism for a tracking service to inform the runtime tracking infrastructure about changes to the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> for a particular workflow <see cref="T:System.Type" />. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Runtime.Tracking.IProfileNotification.ProfileRemoved">
      <summary>Occurs when a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> for a specific workflow Type is removed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Runtime.Tracking.IProfileNotification.ProfileUpdated">
      <summary>Occurs when a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> for a specific workflow <see cref="T:System.Type" /> is updated.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.PreviousTrackingServiceAttribute">
      <summary>Indicates the type of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingService" /> that was used prior to the current version.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.PreviousTrackingServiceAttribute.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.PreviousTrackingServiceAttribute" /> class.</summary>
      <param name="assemblyQualifiedName">A <see cref="T:System.String" /> that contains a fully qualified assembly name that identifies the previous version of the tracking service.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.PreviousTrackingServiceAttribute.AssemblyQualifiedName">
      <summary>Gets the fully qualified assembly name of the previous version tracking service that this version replaces.</summary>
      <returns>A <see cref="T:System.String" /> containing the fully qualified assembly name.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ProfileRemovedEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Runtime.Tracking.IProfileNotification.ProfileRemoved" /> event. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ProfileRemovedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ProfileRemovedEventArgs" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ProfileRemovedEventArgs.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ProfileRemovedEventArgs" /> class that applies to the specified workflow <see cref="T:System.Type" />.</summary>
      <param name="workflowType">The workflow <see cref="T:System.Type" /> for which the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> should be removed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ProfileRemovedEventArgs.WorkflowType">
      <summary>Gets or sets the workflow <see cref="T:System.Type" /> for which the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> should be removed.</summary>
      <returns>The <see cref="T:System.Type" /> of a workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs">
      <summary>Provides the data for the <see cref="E:System.Workflow.Runtime.Tracking.IProfileNotification.ProfileUpdated" /> event. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs.#ctor(System.Type,System.Workflow.Runtime.Tracking.TrackingProfile)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs" /> class that specifies a new <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> for the specified workflow <see cref="T:System.Type" />.</summary>
      <param name="workflowType">The <see cref="T:System.Type" /> of workflow for which the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> has changed.</param>
      <param name="profile">The new <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs.TrackingProfile">
      <summary>Gets or sets the new <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> for the workflow Type.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs.WorkflowType">
      <summary>Gets or sets the <see cref="T:System.Type" /> of the workflow whose <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> should be updated.</summary>
      <returns>The <see cref="T:System.Type" /> of a workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.SqlTrackingQuery">
      <summary>Contains methods and properties that are used to manage queries to the tracking data that is contained in the SQL database used by a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" />.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQuery" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQuery" /> class.</summary>
      <param name="connectionString">The connection string of the SQL database to query.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingQuery.ConnectionString">
      <summary>The connection string of the SQL tracking database to query.</summary>
      <returns>A SQL database connection string.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQuery.ConnectionString" /> to a null reference (Nothing in Visual Basic) was made.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)">
      <summary>Returns tracking data for a set of workflow instances that correspond to a set of query parameters specified by a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions" />.</summary>
      <returns>A list of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects that provide access to tracking data for the set of workflow instances with tracking data that matches the query parameters specified by <paramref name="options" />. </returns>
      <param name="options">A <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions" /> that specifies query parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQuery.ConnectionString" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.TryGetWorkflow(System.Guid,System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance@)">
      <summary>Tries to get query data for a specified workflow instance.</summary>
      <returns>true if tracking data is available for the requested workflow instance; otherwise, false. </returns>
      <param name="workflowInstanceId">The <see cref="T:System.Guid" /> of the workflow instance for which the tracking data is requested.</param>
      <param name="workflowInstance">When this method returns true, contains a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> that provides access to the tracking data associated with the workflow instance. This parameter is passed uninitiailized.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQuery.ConnectionString" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions">
      <summary>Contains properties that are used to constrain the set of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects returned by a call to <see cref="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)" />. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.Clear">
      <summary>Resets the properties of the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions" /> to their default values.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.StatusMaxDateTime">
      <summary>Gets or sets a <see cref="T:System.DateTime" /> that specifies the upper limit of the time period that, together with <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.WorkflowStatus" />, is used to constrain the set of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects returned by a call to <see cref="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)" />.  </summary>
      <returns>A <see cref="T:System.DateTime" /> that specifies the upper limit of the time period used for matching workflow instances with a status specified by <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.WorkflowStatus" />. The default is <see cref="F:System.DateTime.MinValue" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.StatusMinDateTime">
      <summary>Gets or sets a <see cref="T:System.DateTime" /> that, together with <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.WorkflowStatus" />, is used to constrain the set of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects returned by a call to <see cref="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)" />.   </summary>
      <returns>A <see cref="T:System.DateTime" /> that specifies the lower limit of the time period used for matching workflow instances with a status specified by <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.WorkflowStatus" />. The default is <see cref="F:System.DateTime.MinValue" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.TrackingDataItems">
      <summary>Gets or sets a list of data extract values which are used to constrain the set of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects returned by a call to <see cref="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)" />. </summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItemValue" /> objects that contains specified values to be matched for data extracted from the workflow instance or a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.WorkflowStatus">
      <summary>Gets or sets the <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> value that is used to constrain the set of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects returned by a call to <see cref="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)" />. </summary>
      <returns>One of the <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> values or null (Nothing in Visual Basic). The default is null (Nothing).</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.WorkflowType">
      <summary>Gets or sets the workflow instance <see cref="T:System.Type" /> that is used to constrain the set of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects returned by a call to <see cref="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)" />. </summary>
      <returns>A <see cref="T:System.Type" />. The default is a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.SqlTrackingService">
      <summary>Represents a tracking service that uses a SQL database to store tracking information. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> class by using the specified <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
      <param name="parameters">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that specifies properties of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> and their initial values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.FormatException">The string value associated with a Boolean property key in <paramref name="parameters" /> is not represented by either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingService.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> class by using the specified database connection string.</summary>
      <param name="connectionString">A valid database connection string.</param>
      <exception cref="T:System.ArgumentException">The database connection string is not valid.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingService.ConnectionString">
      <summary>Gets the connection string for the tracking database.</summary>
      <returns>The connection string for the tracking database.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingService.EnableRetries">
      <summary>Gets and sets a value specifying whether the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> will retry when performing a database operation.</summary>
      <returns>true if the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> should retry the operation; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingService.IsTransactional">
      <summary>Gets or sets a value that indicates whether <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> participates in workflow transactions.</summary>
      <returns>true if <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> participates in the workflow transaction; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingService.PartitionOnCompletion">
      <summary>Gets or sets a value that specifies whether tracking data for a workflow instance should be moved to the currently active partition in the database when the workflow instance is completed.</summary>
      <returns>true if tracking data should be moved to the currently active partition on workflow completion; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingService.ProfileChangeCheckInterval">
      <summary>Gets or sets a value that specifies the interval at which the database should be checked for changes to one or more of its tracking profiles.</summary>
      <returns>The interval length in milliseconds. The default is 60000.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Runtime.Tracking.SqlTrackingService.ProfileRemoved">
      <summary>Occurs when the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> detects that a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> has been deleted. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Runtime.Tracking.SqlTrackingService.ProfileUpdated">
      <summary>Occurs when the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> detects that a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> has been changed. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingService.UseDefaultProfile">
      <summary>Gets or sets a value specifying whether a default <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> should be used for workflow types that do not have a tracking profile.</summary>
      <returns>true if a default tracking profile should be used; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance">
      <summary>Provides access to tracking data maintained in a SQL database by the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> for a workflow instance.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.ActivityEvents">
      <summary>Gets the list of activity tracking records that have been sent for this workflow instance to a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> database by the run-time tracking infrastructure.</summary>
      <returns>The list of <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" /> objects sent for this workflow instance to the tracking database by the run-time tracking infrastructure.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.AutoRefresh">
      <summary>Gets or sets a value that specifies whether property data for this <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> should be automatically updated when it is accessed.</summary>
      <returns>true if property data should be automatically refreshed when it is accessed; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.Initialized">
      <summary>Gets or sets a <see cref="T:System.DateTime" /> that indicates the time at which the first <see cref="T:System.Workflow.Runtime.Tracking.TrackingChannel" /> for this workflow instance was requested by the workflow run-time engine.</summary>
      <returns>A <see cref="T:System.DateTime" /> that indicates the time at which the first <see cref="T:System.Workflow.Runtime.Tracking.TrackingChannel" /> for this workflow instance was requested by the workflow run-time engine.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.InvokedWorkflows">
      <summary>Gets a list of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects that correspond to workflows that have been invoked by this workflow.</summary>
      <returns>A list of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects that correspond to workflows that have been invoked by this workflow.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.InvokingWorkflowInstanceId">
      <summary>Gets or sets the <see cref="T:System.Guid" /> of the workflow instance that invoked this workflow instance.</summary>
      <returns>The <see cref="T:System.Guid" /> of the workflow instance that invoked this workflow instance or an empty <see cref="T:System.Guid" /> if this workflow instance was not invoked by another workflow instance.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.Refresh">
      <summary>Updates the property data for this <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" />.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.Status">
      <summary>Gets the status of the workflow instance.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> that represents the current status of the workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.UserEvents">
      <summary>Gets the list of user tracking records that have been sent for this workflow instance to a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> database by the run-time tracking infrastructure.</summary>
      <returns>The list of <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" /> objects sent for this workflow instance to the tracking database by the run-time tracking infrastructure.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowDefinition">
      <summary>Gets an <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the current workflow definition for the workflow instance.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the current workflow definition for the workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowDefinitionUpdated">
      <summary>Gets a value that indicates whether the workflow has been updated since the last time <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowDefinition" /> was loaded.</summary>
      <returns>true if the workflow has been updated; otherwise false.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowEvents">
      <summary>Gets the list of workflow tracking records that have been sent for this workflow instance to a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> database by the run-time tracking infrastructure.</summary>
      <returns>The list of <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord" /> objects sent for this workflow instance to the tracking database by the run-time tracking infrastructure.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowInstanceId">
      <summary>The <see cref="T:System.Guid" /> of the workflow instance for which this <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> applies.</summary>
      <returns>The <see cref="T:System.Guid" /> of the workflow instance for which this <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> applies.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowInstanceInternalId">
      <summary>Gets or sets a number that can be used to find related records in separate views for this workflow instance.</summary>
      <returns>A number that can be used to find related records in separate views for this workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowType">
      <summary>Gets and sets the <see cref="T:System.Type" /> of the workflow instance.</summary>
      <returns>The <see cref="T:System.Type" /> of the workflow instance.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection">
      <summary>Contains a collection of annotations.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> class</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> class by using a list of string annotations.</summary>
      <param name="annotations">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of string annotations.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="annotations" /> is a null reference (Nothing in Visual Basic)</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingChannel">
      <summary>The abstract base class that represents a tracking channel.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingChannel.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingChannel" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingChannel.InstanceCompletedOrTerminated">
      <summary>When implemented in a derived class, notifies a receiver of data on the tracking channel that the workflow instance associated with the tracking channel has either completed or terminated.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingChannel.Send(System.Workflow.Runtime.Tracking.TrackingRecord)">
      <summary>When implemented in a derived class, sends a <see cref="T:System.Workflow.Runtime.Tracking.TrackingRecord" /> on the <see cref="T:System.Workflow.Runtime.Tracking.TrackingChannel" />.</summary>
      <param name="record">The <see cref="T:System.Workflow.Runtime.Tracking.TrackingRecord" /> to send.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingCondition">
      <summary>An abstract base class representing a comparison that can be used to constrain an <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> or a <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" />.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingCondition.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingCondition" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingCondition.Member">
      <summary>When overridden in a derived class, gets or sets the name of the member whose value will be compared. </summary>
      <returns>The name of the member to be compared. </returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingCondition.Operator">
      <summary>When overridden in a derived class, gets or sets the operator to use in the comparison.</summary>
      <returns>One of the <see cref="T:System.Workflow.Runtime.Tracking.ComparisonOperator" /> values.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingCondition.Value">
      <summary>When overridden in a derived class, gets or sets the value to compare.</summary>
      <returns>The value to compare.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingConditionCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.TrackingCondition" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingConditionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingConditionCollection" /> class</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingConditionCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.TrackingCondition})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingConditionCollection" /> by using a list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingCondition" /> objects.</summary>
      <param name="conditions">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingCondition" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conditions" /> is a null reference (Nothing in Visual Basic)</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingDataItem">
      <summary>Represents a single item of data extracted from a workflow and all its associated annotations.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingDataItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItem" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingDataItem.Annotations">
      <summary>Gets and sets the list of annotations associated with the extracted data.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> that contains the annotations associated with the extracted data.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingDataItem.Data">
      <summary>Gets or sets the extracted data associated with the <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItem" />.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the extracted data.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingDataItem.FieldName">
      <summary>Gets or sets the name of the property or field associated with the extracted data.</summary>
      <returns>The dot delineated name of the property or field that was extracted.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingDataItemValue">
      <summary>Contains filter criteria for data extracted from a workflow instance in a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions" />. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingDataItemValue.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItemValue" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingDataItemValue.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItemValue" /> class by using the specified qualified name of an activity, data field name, and string representation of a data value.</summary>
      <param name="qualifiedName">The qualified name of the activity from which the data was extracted.</param>
      <param name="fieldName">The name of the member from which the data was extracted.</param>
      <param name="dataValue">A string representation of the value of the data.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingDataItemValue.DataValue">
      <summary>Gets or sets a string representation of the value of the extracted data. </summary>
      <returns>A string representation of the value of the extracted data. The default is a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingDataItemValue.FieldName">
      <summary>Gets or sets the name of the activity member from which the data was extracted.</summary>
      <returns>The name of the activity member from which the data was extracted. The default is a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingDataItemValue.QualifiedName">
      <summary>Gets or sets the qualified name of the activity from which the data was extracted.</summary>
      <returns>The qualified name of the activity from which the data was extracted. The default is a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingExtract">
      <summary>The abstract base class representing a field or a property to be extracted from a workflow instance and its associated annotations. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingExtract.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingExtract" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingExtract.Annotations">
      <summary>When implemented in a derived class, gets the annotations associated with the extracted data.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> associated with the extracted data. </returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingExtract.Member">
      <summary>When implemented in a derived class, gets or sets the name of the field or property to be extracted. </summary>
      <returns>The dot delineated name of a field or a property. </returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingParameters">
      <summary>Contains information about the workflow instance associated with a <see cref="T:System.Workflow.Runtime.Tracking.TrackingChannel" />. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingParameters.#ctor(System.Guid,System.Type,System.Workflow.ComponentModel.Activity,System.Collections.Generic.IList{System.String},System.Guid,System.Guid,System.Guid,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingParameters" /> class.</summary>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the workflow instance associated with the tracking channel.</param>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow instance associated with the tracking channel.</param>
      <param name="rootActivity">The root <see cref="T:System.Workflow.ComponentModel.Activity" /> of the workflow instance associated with the tracking channel.</param>
      <param name="callPath">A list of strings, each of which represents the <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of an activity in the call chain of the workflow instance associated with the tracking channel. Currently, only the <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity that invoked the workflow instance is included in the list.</param>
      <param name="callerInstanceId">The <see cref="T:System.Guid" /> of the workflow that has called the workflow instance associated with the tracking channel.</param>
      <param name="contextGuid">A number that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the root activity of the workflow instance associated with the tracking channel.</param>
      <param name="callerContextGuid">A number that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the activity that invoked the workflow instance associated with the tracking channel.</param>
      <param name="callerParentContextGuid">A number that identifies the parent <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the activity that invoked the workflow instance associated with the tracking channel.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.CallerContextGuid">
      <summary>Gets the context ID of the caller activity.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the context ID of the caller <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.CallerInstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> of the workflow instance that called the workflow instance associated with the tracking channel.</summary>
      <returns>The <see cref="T:System.Guid" /> of the workflow instance that called the workflow instance associated with the tracking channel.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.CallerParentContextGuid">
      <summary>Gets the context ID of the caller's parent activity.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the context ID of the caller's parent <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.CallPath">
      <summary>Gets a list of strings, each of which represents the <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of an activity in the call chain of the workflow instance associated with the tracking channel. </summary>
      <returns>A list of strings, each of which represents the <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of an activity in the call chain of the workflow instance associated with the tracking channel. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.ContextGuid">
      <summary>Gets the context ID of the associated activity.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the context ID of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.InstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> of the workflow instance associated with the tracking channel.</summary>
      <returns>The <see cref="T:System.Guid" /> of the workflow instance associated with the tracking channel.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.RootActivity">
      <summary>Gets the root activity of the workflow instance associated with the tracking channel.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance associated with the tracking channel.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.WorkflowType">
      <summary>Gets the <see cref="T:System.Type" /> of the workflow instance associated with the tracking channel.</summary>
      <returns>The <see cref="T:System.Type" /> of the workflow instance associated with the tracking channel.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingProfile">
      <summary>Defines points of interest in the potential execution path of a root workflow instance about which a tracking service should be notified.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfile.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingProfile.ActivityTrackPoints">
      <summary>Gets the collection of activity track points used by the runtime tracking infrastructure to filter activity status events.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPointCollection" /> that specifies the points in a workflow instance for which the runtime tracking infrastructure should send an <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" /> to the tracking service.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingProfile.UserTrackPoints">
      <summary>Gets the collection of user track points used by the runtime tracking infrastructure to filter user events.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPointCollection" /> that specifies the points in a workflow instance for which the runtime tracking infrastructure should send a <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" /> to the tracking service.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingProfile.Version">
      <summary>Gets or sets the version of the tracking profile.</summary>
      <returns>The <see cref="T:System.Version" /> of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingProfile.WorkflowTrackPoints">
      <summary>Gets the collection of workflow track points used by the runtime tracking infrastructure to filter workflow status events.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection" /> that specifies the points in a workflow instance for which the runtime tracking infrastructure should send a <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord" /> to the tracking service.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingProfileCache">
      <summary>Provides a method that a host application can use to clear the tracking profile cache.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileCache.Clear">
      <summary>Clears the tracking profile cache maintained by the runtime tracking infrastructure of all tracking profiles.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException">
      <summary>The exception that is thrown when an XML document cannot be deserialized into a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> by a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfileSerializer" />.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the collection of <see cref="T:System.Xml.Schema.ValidationEventArgs" /> associated with this exception, and additional exception information.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException.ValidationEventArgs">
      <summary>Gets a list that contains validation warnings and errors associated with this exception.</summary>
      <returns>A <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.Schema.ValidationEventArgs" /> objects that contains validation warnings and errors associated with this exception. The default is an empty list.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingProfileSerializer">
      <summary>Provides methods to serialize and deserialize tracking profiles into and from XML documents by using the tracking profile XML schema definition (XSD).</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfileSerializer" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileSerializer.Deserialize(System.IO.TextReader)">
      <summary>Deserializes the XML document that is contained in the text reader by using the tracking profile XML Schema definition (XSD).</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> that contains the deserialized tracking profile.</returns>
      <param name="reader">A <see cref="T:System.IO.TextReader" /> that contains an XML document.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException">
        <paramref name="reader" /> does not contain a document that conforms to the tracking profile XSD.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingProfileSerializer.Schema">
      <summary>Gets the tracking profile XML schema definition (XSD).</summary>
      <returns>The tracking profile XSD.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileSerializer.Serialize(System.IO.TextWriter,System.Workflow.Runtime.Tracking.TrackingProfile)">
      <summary>Serializes the tracking profile into an XML document by using the tracking profile XML Schema definition (XSD).</summary>
      <param name="writer">A valid <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</param>
      <param name="profile">When this method returns, contains a <see cref="T:System.IO.TextWriter" /> that holds the XML document. The parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="profile" /> is a null reference (Nothing in Visual Basic).- or -<paramref name="writer" /> is a null reference(Nothing).- or -</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="profile" /> is not a valid tracking profile.</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingRecord">
      <summary>The abstract base class from which <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />, <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" />, and <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord" /> are derived.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingRecord.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingRecord" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingRecord.Annotations">
      <summary>When overridden in a derived class, gets the collection of annotations associated with the track point.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> that contains the annotations associated with the track point to which this <see cref="T:System.Workflow.Runtime.Tracking.TrackingRecord" /> corresponds.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingRecord.EventArgs">
      <summary>When overridden in a derived class, gets or sets the event data, if any, that is associated with the tracking event that caused the tracking record to be sent.</summary>
      <returns>An <see cref="T:System.EventArgs" /> that represents the event data, if any, that is associated with the tracking event that caused the tracking record to be sent.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingRecord.EventDateTime">
      <summary>When overridden in a derived class, gets or sets the time and date of the tracking event associated with the tracking record.</summary>
      <returns>A <see cref="T:System.DateTime" /> that indicates the date and time that the tracking event occurred.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingRecord.EventOrder">
      <summary>When overridden in a derived class, gets or sets a value that indicates the order of the tracking event associated with the tracking record relative to the other tracking events emitted by the workflow instance. </summary>
      <returns>A value that indicates the order of the tracking event relative to the other tracking events emitted by the workflow instance.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingService">
      <summary>The abstract base class that provides the basic interface between a tracking service and the run-time tracking infrastructure.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingService.GetProfile(System.Guid)">
      <summary>Must be overridden in the derived class, and when implemented, returns the tracking profile for the specified workflow instance.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</returns>
      <param name="workflowInstanceId">The <see cref="T:System.Guid" /> of the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingService.GetProfile(System.Type,System.Version)">
      <summary>Must be overridden in the derived class, and when implemented, returns the tracking profile, qualified by version, for the specified workflow <see cref="T:System.Type" />. </summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow.</param>
      <param name="profileVersionId">The <see cref="T:System.Version" /> of the tracking profile.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingService.GetTrackingChannel(System.Workflow.Runtime.Tracking.TrackingParameters)">
      <summary>Must be overridden in the derived class, and when implemented, returns the channel that the run-time tracking infrastructure uses to send tracking records to the tracking service.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.Tracking.TrackingChannel" /> that is used to send tracking records to the tracking service.</returns>
      <param name="parameters">The <see cref="T:System.Workflow.Runtime.Tracking.TrackingParameters" /> associated with the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingService.TryGetProfile(System.Type,System.Workflow.Runtime.Tracking.TrackingProfile@)">
      <summary>Must be overridden in the derived class, and when implemented, retrieves the tracking profile for the specified workflow type if one is available.</summary>
      <returns>true if a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> for the specified workflow <see cref="T:System.Type" /> is available; otherwise, false. If true, the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> is returned in <paramref name="profile" />.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow for which to get the tracking profile.</param>
      <param name="profile">When this method returns, contains the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> to load. This parameter is passed un-initialized.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingService.TryReloadProfile(System.Type,System.Guid,System.Workflow.Runtime.Tracking.TrackingProfile@)">
      <summary>Must be overridden in the derived class, and when implemented, retrieves a new tracking profile for the specified workflow instance if the tracking profile has changed since it was last loaded.</summary>
      <returns>true if a new <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> should be loaded; otherwise, false. If true, the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> is returned in <paramref name="profile" />.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow instance.</param>
      <param name="workflowInstanceId">The <see cref="T:System.Guid" /> of the workflow instance.</param>
      <param name="profile">When this method returns, contains the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> to load. This parameter is passed un-initialized.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingWorkflowChangedEventArgs">
      <summary>Contains data associated with a workflow change that occurs during the execution of a workflow instance.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowChangedEventArgs.Changes">
      <summary>Gets the changes that occurred to the workflow instance.</summary>
      <returns>A list of <see cref="T:System.Workflow.ComponentModel.WorkflowChangeAction" /> objects that specify the changes that occurred to the workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowChangedEventArgs.Definition">
      <summary>Gets the workflow definition.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent">
      <summary>Specifies a type of workflow status event.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Created">
      <summary>The workflow instance has been created.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Completed">
      <summary>The workflow instance has completed.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Idle">
      <summary>The workflow instance is idle.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Suspended">
      <summary>The workflow instance has been suspended.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Resumed">
      <summary>A previously suspended workflow instance has resumed running.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Persisted">
      <summary>The workflow instance has been persisted.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Unloaded">
      <summary>The workflow instance has been unloaded from memory.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Loaded">
      <summary>The workflow instance has been loaded into memory.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Exception">
      <summary>An unhandled exception has occurred.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Terminated">
      <summary>The workflow instance has been terminated.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Aborted">
      <summary>The workflow instance has aborted.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Changed">
      <summary>A workflow change has occurred on the workflow instance.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Started">
      <summary>The workflow instance has been started.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs">
      <summary>Contains data associated with an exception that occurs during the execution of a workflow instance.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.ContextGuid">
      <summary>Gets the context ID of the associated activity.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the context ID of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.CurrentActivityPath">
      <summary>Gets the <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity currently throwing the exception.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity currently throwing the exception.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.Exception">
      <summary>Gets the <see cref="T:System.Exception" /> that is being thrown by the workflow instance.</summary>
      <returns>An <see cref="T:System.Exception" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.OriginalActivityPath">
      <summary>Gets the <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity that originally threw the exception.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity that originally threw the exception.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.ParentContextGuid">
      <summary>Gets the context ID of the parent activity.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the context ID of the parent <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingWorkflowSuspendedEventArgs">
      <summary>Contains information about the reason that a workflow instance was suspended.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowSuspendedEventArgs.Error">
      <summary>Contains information about the reason that a workflow instance was suspended. This can come from the <see cref="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)" /> (string error) or the <see cref="P:System.Workflow.ComponentModel.SuspendActivity.Error" /> property that you set on the <see cref="T:System.Workflow.ComponentModel.SuspendActivity" /> activity.</summary>
      <returns>String value that contains the reason that a workflow instance was suspended.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs">
      <summary>Contains data associated with the termination of a workflow instance.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception">
      <summary>Gets the exception that caused the workflow instance to be terminated.</summary>
      <returns>The <see cref="T:System.Exception" /> that caused the workflow instance to be terminated.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.UserTrackingLocation">
      <summary>Defines an activity-qualified location that corresponds to a user event in the potential execution path of a root workflow instance. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class by using the unqualified name of the common language runtime (CLR) type of the user data.</summary>
      <param name="argumentTypeName">The unqualified name of the CLR type of the user data to be matched.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class by using the unqualified name of the common language runtime (CLR) type of the user data and the unqualified name of the CLR type of the activity from which the user data must be emitted.</summary>
      <param name="argumentTypeName">The unqualified name of the CLR type of the user data to be matched.</param>
      <param name="activityTypeName">The unqualified name of the CLR type of the activity from which the user data must be emitted.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class by using the unqualified name of the common language runtime (CLR) type of the user data and the CLR type of the activity from which the user data must be emitted.</summary>
      <param name="argumentTypeName">The unqualified name of the CLR type of the user data to be matched.</param>
      <param name="activityType">The <see cref="T:System.Type" /> of the activity from which the user data must be emitted.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class using the common language runtime (CLR) type of the user data.</summary>
      <param name="argumentType">The <see cref="T:System.Type" /> of the user data to be matched.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class by using the common language runtime (CLR) type of the user data and unqualified name of the CLR type of the activity from which the user data must be emitted.</summary>
      <param name="argumentType">The <see cref="T:System.Type" /> of the user data to be matched.</param>
      <param name="activityTypeName">The unqualified name of the CLR type of the activity from which the user data must be emitted.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class by using the common language runtime (CLR) type of the user data and the CLR type of the activity from which the user data must be emitted.</summary>
      <param name="argumentType">The <see cref="T:System.Type" /> of the user data to be matched.</param>
      <param name="activityType">The <see cref="T:System.Type" /> of the activity from which the user data must be emitted.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ActivityType">
      <summary>Gets or sets the common language runtime (CLR) type of the activity from which the user data must be emitted to be tracked.</summary>
      <returns>The <see cref="T:System.Type" /> of the activity from which the data must be emitted.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ActivityTypeName">
      <summary>Gets or sets the unqualified name of the common language runtime (CLR) type of the activity from which the user data must be emitted to be tracked.</summary>
      <returns>The unqualified name of the <see cref="T:System.Type" /> of the activity from which the data must be emitted.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ArgumentType">
      <summary>Gets or sets the common language runtime (CLR) type of the user data to be tracked.</summary>
      <returns>The <see cref="T:System.Type" /> of the user data to be tracked.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ArgumentTypeName">
      <summary>Gets or sets the unqualified name of the common language runtime (CLR) type of the user data to be tracked.</summary>
      <returns>The unqualified name of the <see cref="T:System.Type" /> of the user data.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.Conditions">
      <summary>Gets a collection of conditions that are used to qualify the activity from which the user data must be emitted to be tracked.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingConditionCollection" /> that is used to qualify the activity from which the user data must be emitted.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.KeyName">
      <summary>Get or sets the name with which the user data must be associated for the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> to be matched.</summary>
      <returns>A string key with which the user data must be associated for the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> to be matched or a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.MatchDerivedActivityTypes">
      <summary>Gets or sets a value that indicates whether the user data should be tracked when it is emitted from activities derived from the activity type specified by <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ActivityType" /> or <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ActivityTypeName" />.</summary>
      <returns>true if the user data should be tracked when it is emitted from activities derived from the type specified by <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ActivityType" /> or <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ActivityTypeName" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.MatchDerivedArgumentTypes">
      <summary>The User tracking location is a way to filter user tracked data. The user can filter by the type of the user tracked data by specifying the <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ArgumentType" /> or <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ArgumentTypeName" />. Setting the MatchDerrivedArgumentTypesBoolean value to true specifies that the user tracked data can be of type ArgumentType/ArgumentTypeName or a type derived from the ArgumentType/ArgumentTypeName.</summary>
      <returns>true if user data derived from the type of the user data specified by <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ArgumentType" /> or <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ArgumentTypeName" /> should be tracked; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.UserTrackingLocation})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection" /> class by using a list of user locations.</summary>
      <param name="locations">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="locations" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.UserTrackingRecord">
      <summary>Contains the data sent to a tracking service by the runtime tracking infrastructure when a <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> is matched.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingRecord.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" /> class</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingRecord.#ctor(System.Type,System.String,System.Guid,System.Guid,System.DateTime,System.Int32,System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" /> class by using the specified parameters.</summary>
      <param name="activityType">The <see cref="T:System.Type" /> of the activity associated with the user event.</param>
      <param name="qualifiedName">The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity associated with the user event.</param>
      <param name="contextGuid">A number that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the activity associated with the user event.</param>
      <param name="parentContextGuid">A number that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the parent activity of the activity associated with the user event.</param>
      <param name="eventDateTime">A <see cref="T:System.DateTime" /> that indicates the date and time of the user event associated with the tracking record.</param>
      <param name="eventOrder">The relative order in which the user event associated with this tracking record occurred in the workflow instance.</param>
      <param name="userDataKey">A key associated with the user data for this tracking record, or a null reference (Nothing in Visual Basic).</param>
      <param name="userData">The user data associated with the user event.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.ActivityType">
      <summary>Gets or sets the common language runtime (CLR) type of the activity that emitted the user data for which this <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" /> was created.</summary>
      <returns>The <see cref="T:System.Type" /> of the activity that emitted the user data.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.Annotations">
      <summary>Gets the collection of annotations associated with the user event.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> that contains the annotations that are associated with the user event by the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> that was matched in the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.Body">
      <summary>Gets a list containing any additional data extracted from the workflow for the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> that was matched.</summary>
      <returns>A list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItem" /> objects each of which contains a single piece of extracted data and its associated annotations.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.ContextGuid">
      <summary>Context of the activity.</summary>
      <returns>A number that identifies the context of the activity.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.EventArgs">
      <summary>Always a null reference (Nothing in Visual Basic) for a <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" />.</summary>
      <returns>A null reference (Nothing) for a <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.EventDateTime">
      <summary>Gets or sets the date and time that the user event occurred.</summary>
      <returns>A <see cref="T:System.DateTime" /> value.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.EventOrder">
      <summary>Gets or sets a value that indicates the order of the user event that matched the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> in the workflow instance.</summary>
      <returns>A value that indicates the order of the user event in the workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.ParentContextGuid">
      <summary>Context of the parent activity.</summary>
      <returns>A number that identifies the context of the parent activity.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.QualifiedName">
      <summary>Gets or sets the qualified name of the activity associated with this <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" />.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the <see cref="T:System.Workflow.ComponentModel.Activity" /> from which the user data for this user event was emitted.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.UserData">
      <summary>Gets and sets the user data for this user event.</summary>
      <returns>The user data for which the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" /> was created.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.UserDataKey">
      <summary>Gets or sets a key associated with the user data for this <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" />.</summary>
      <returns>A string key associated with the user data for this tracking record.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.UserTrackPoint">
      <summary>Defines a point, associated with a user event, to be tracked in the potential execution path of a root workflow instance. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackPoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackPoint.Annotations">
      <summary>Gets the collection of annotations associated with the track point.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" />. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackPoint.ExcludedLocations">
      <summary>Gets the collection of locations that should be excluded from the track point by the runtime tracking infrastructure.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection" /> that specifies locations to be excluded from the track point. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackPoint.Extracts">
      <summary>Gets a collection that specifies data to be extracted from the workflow instance and sent to the tracking service.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.ExtractCollection" /> that specifies data to be extracted and sent to the tracking service. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackPoint.MatchingLocations">
      <summary>Gets the collection of locations that should be included in matching for the track point by the runtime tracking infrastructure.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection" /> that specifies the locations to be matched for the track point. The default is an empty collection.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.UserTrackPointCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackPointCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPointCollection" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackPointCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.UserTrackPoint})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPointCollection" /> class by using a list of user track points.</summary>
      <param name="points">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract">
      <summary>Specifies a property or a field to be extracted from the root activity of the workflow and sent to the tracking service together with and an associated collection of annotations when a track point is matched.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract" /> class by using the specified name of a member of the root activity.</summary>
      <param name="member">The dot delineated name of the field or property of the root activity that should be extracted and sent to the tracking service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract.Annotations">
      <summary>Gets the collection of annotations associated with the extracted data.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> associated with the activity property or field to be extracted. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract.Member">
      <summary>Gets or sets the field or the property to be extracted from the root activity when a track point is matched.</summary>
      <returns>A dot delineated name that specifies a field or a property of the root activity. The default is a null reference (Nothing in Visual Basic). </returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation">
      <summary>Defines an interest in specific workflow status events that occur in a root workflow instance; used for matching by a <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" /> in a tracking profile. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation.#ctor(System.Collections.Generic.IList{System.Workflow.Runtime.Tracking.TrackingWorkflowEvent})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation" /> class that matches the specified tracking workflow events.</summary>
      <param name="events">IList of tracking workflow events to be matched. </param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation.Events">
      <summary>Gets the list of workflow status events that will be matched for this location.</summary>
      <returns>A list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent" /> values that specifies the workflow status events for which the location will be matched. The default is an empty list.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord">
      <summary>Contains the data sent to the tracking service by the runtime tracking infrastructure when it matches a <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" />. It is also used in the return list of the <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowEvents" /> property.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.#ctor(System.Workflow.Runtime.Tracking.TrackingWorkflowEvent,System.DateTime,System.Int32,System.EventArgs)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord" /> class by using the specified <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent" /> value, <see cref="T:System.DateTime" />, number, and <see cref="T:System.EventArgs" />.</summary>
      <param name="trackingWorkflowEvent">One of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent" /> values.</param>
      <param name="eventDateTime">A <see cref="T:System.DateTime" /> that indicates the date and time of the workflow status event associated with the tracking record.</param>
      <param name="eventOrder">The relative order in which the workflow status event associated with this tracking record occurred in the workflow instance.</param>
      <param name="eventArgs">Either a <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowSuspendedEventArgs" />, a <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs" />, a <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs" />, or a null reference (Nothing in Visual Basic).</param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.Annotations">
      <summary>Gets the collection of annotations associated with the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" /> that was matched.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> that contains the annotations that are associated with the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.EventArgs">
      <summary>Gets or sets an <see cref="T:System.EventArgs" /> that contains additional data associated with certain types of workflow status events.</summary>
      <returns>Either a <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowSuspendedEventArgs" />, a <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs" />, a <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs" />, or a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.EventDateTime">
      <summary>Gets or sets the date and time that the workflow tracking event occurred.</summary>
      <returns>A <see cref="T:System.DateTime" /> that indicates the date and time that the workflow status event occurred.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.EventOrder">
      <summary>Gets or sets a value that indicates the order in the workflow instance of the workflow status event that matched the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" />.</summary>
      <returns>A value that indicates the order of the workflow status event in the workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.TrackingWorkflowEvent">
      <summary>Gets or sets the type of workflow status event associated with the tracking record.</summary>
      <returns>One of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent" /> values.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint">
      <summary>Defines a point associated with a set of workflow status events that are tracked in the potential execution path of a root workflow instance. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackPoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackPoint.Annotations">
      <summary>Gets the collection of annotations associated with the track point.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> that contains the annotations associated with the track point. The default is an empty collection; it specifies that no annotations are to be associated with the track point.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackPoint.MatchingLocation">
      <summary>Gets or sets the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation" /> that specifies the workflow status events that should be matched by the runtime tracking infrastructure for the track point.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation" />.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.WorkflowTrackPoint})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection" /> class by using a list of workflow track points.</summary>
      <param name="points">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Workflow.Activities.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Workflow.Activities</name>
  </assembly>
  <members>
    <member name="T:System.Workflow.Activities.ActiveDirectoryRole">
      <summary>Represents an Active Directory role in a Windows Workflow Foundation hosting environment. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetAllReports">
      <summary>Returns an <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains all the roles that report to the current role either directly or indirectly.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains all the roles that either directly or indirectly report to the current role.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetDirectReports">
      <summary>Returns an <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains all the roles that report directly to the current role.</summary>
      <returns>An <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains all the roles that directly report to the current role.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetEntries">
      <summary>Returns the generic collection that contains all <see cref="T:System.DirectoryServices.DirectoryEntry" /> objects associated with the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />. </summary>
      <returns>The generic <see cref="T:System.DirectoryServices.DirectoryEntry" /> collection that is associated with the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetIdentities">
      <summary>Gets a generic list of the Windows NT accounts associated with the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />. </summary>
      <returns>A generic list of values that represent the Windows NT accounts associated with the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />. </returns>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetManager">
      <summary>Returns an Active Directory role that contains information about the manager of the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains information about the manager of the current role.</returns>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetManagerialChain">
      <summary>Returns the Active Directory role that contains information about the managerial chain associated with the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />. </summary>
      <returns>The <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains information about the managerial chain associated with the current role.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetPeers">
      <summary>Returns an Active Directory role that contains information about all the directory operations that are supervised by the manager of the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that contains information about all directory operations that are supervised by the manager of the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.GetSecurityIdentifiers">
      <summary>Returns a generic list of <see cref="T:System.Security.Principal.SecurityIdentifier" /> objects associated with the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />. </summary>
      <returns>A generic list of <see cref="T:System.Security.Principal.SecurityIdentifier" /> objects associated with the current <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.IncludesIdentity(System.String)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> contains the specified identity. </summary>
      <returns>true to indicate that <paramref name="identity" /> is included in the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />; otherwise, false.</returns>
      <param name="identity">The identity for which to search.</param>
    </member>
    <member name="P:System.Workflow.Activities.ActiveDirectoryRole.Name">
      <summary>Gets or sets the Active Directory role name.</summary>
      <returns>The Active Directory role name.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ActiveDirectoryRole.RootEntry">
      <summary>Gets the root Active Directory node associated with the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</summary>
      <returns>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> that represents the root Active Directory node associated with the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />. </summary>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRole.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> destination for this serialization.</param>
    </member>
    <member name="T:System.Workflow.Activities.ActiveDirectoryRoleFactory">
      <summary>A factory class for creating <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> objects from Windows NT aliases, e-mail addresses, and security identifiers (SIDs).</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.ActiveDirectoryRoleFactory.Configuration">
      <summary>Gets the <see cref="T:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration" /> object that is associated with the <see cref="T:System.Workflow.Activities.ActiveDirectoryRoleFactory" />.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration" /> object associated with the <see cref="T:System.Workflow.Activities.ActiveDirectoryRoleFactory" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRoleFactory.CreateFromAlias(System.String)">
      <summary>Creates an instance of <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> using the specified Windows NT alias.</summary>
      <returns>An instance of <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that describes the specified Windows NT alias.</returns>
      <param name="alias">The alias string to create the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRoleFactory.CreateFromEmailAddress(System.String)">
      <summary>Creates an instance of <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> using an e-mail address.</summary>
      <returns>An instance of <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that describes the specified e-mail address.</returns>
      <param name="emailAddress">The e-mail address string from which to create the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.ActiveDirectoryRoleFactory.CreateFromSecurityIdentifier(System.Security.Principal.SecurityIdentifier)">
      <summary>Creates an instance of <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> using a Windows NT <see cref="T:System.Security.Principal.SecurityIdentifier" />.</summary>
      <returns>An instance of <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" /> that describes the specified <see cref="T:System.Security.Principal.SecurityIdentifier" />.</returns>
      <param name="sid">The <see cref="T:System.Security.Principal.SecurityIdentifier" /> to use to create the <see cref="T:System.Workflow.Activities.ActiveDirectoryRole" />.</param>
    </member>
    <member name="T:System.Workflow.Activities.CallExternalMethodActivity">
      <summary>Defines a workflow communication activity that is used to call a method on a local service. This activity is used to send data from the workflow to the host through the local service.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CallExternalMethodActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CallExternalMethodActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity, used to initialize the activity name property.</param>
    </member>
    <member name="P:System.Workflow.Activities.CallExternalMethodActivity.CorrelationToken">
      <summary>Gets or sets the <see cref="T:System.Workflow.Runtime.CorrelationToken" /> for the external method.</summary>
      <returns>The correlation token for the external method.</returns>
    </member>
    <member name="F:System.Workflow.Activities.CallExternalMethodActivity.CorrelationTokenProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.CorrelationToken" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Tries to run the <see cref="T:System.Workflow.Activities.CallExternalMethodActivity" /> with the specified <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</summary>
      <returns>One of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> values.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that contains the execution environment in which to run the <see cref="T:System.Workflow.Activities.CallExternalMethodActivity" />.</param>
      <exception cref="T:System.ArgumentException">This <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.InterfaceType" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The service object for the <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.InitializeProperties">
      <summary>Performs initialization on dependency properties.</summary>
    </member>
    <member name="P:System.Workflow.Activities.CallExternalMethodActivity.InterfaceType">
      <summary>Gets or sets an external method's declaring interface that has the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute" />.</summary>
      <returns>The external method's declaring interface that has the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.CallExternalMethodActivity.InterfaceTypeProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.InterfaceType" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking">
      <summary>Occurs before invoking the method.</summary>
    </member>
    <member name="F:System.Workflow.Activities.CallExternalMethodActivity.MethodInvokingEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.CallExternalMethodActivity.MethodName">
      <summary>Gets or sets the name of the method to be called on the local service registered with the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" />.</summary>
      <returns>The method name of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> interface.</returns>
    </member>
    <member name="F:System.Workflow.Activities.CallExternalMethodActivity.MethodNameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.MethodName" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.OnMethodInvoked(System.EventArgs)">
      <summary>Provides a hook for derived classes to extract out and return values from the <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings" />. This method is called just after the external method is run. </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the data for the <see cref="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking" /> event.</param>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.OnMethodInvoking(System.EventArgs)">
      <summary>Provides a hook for derived classes to set <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings" />. This method is called just before the external method is run.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the data for the <see cref="E:System.Workflow.Activities.CallExternalMethodActivity.MethodInvoking" /> event.</param>
    </member>
    <member name="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings">
      <summary>Gets the collection of bindable parameters as found in the external method's formal parameter list.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> of parameters to bind to.</returns>
    </member>
    <member name="F:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindingsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.CallExternalMethodActivity.ParameterBindings" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denotes the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="T:System.Workflow.Activities.CallExternalMethodActivityValidator">
      <summary>Verifies that the <see cref="T:System.Workflow.Activities.CallExternalMethodActivity" /> class is configured correctly.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivityValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CallExternalMethodActivityValidator" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CallExternalMethodActivityValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the <see cref="T:System.Workflow.Activities.CallExternalMethodActivity" /> class during workflow compilation.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the errors from this operation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> to use for this validation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to validate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Activities.CodeActivity">
      <summary>Runs the code-beside method associated with an activity. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CodeActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CodeActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CodeActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CodeActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="E:System.Workflow.Activities.CodeActivity.ExecuteCode">
      <summary>Occurs when the <see cref="T:System.Workflow.Activities.CodeActivity" /> starts.</summary>
    </member>
    <member name="F:System.Workflow.Activities.CodeActivity.ExecuteCodeEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.CodeActivity.ExecuteCode" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.CodeCondition">
      <summary>Defines a condition that guards/drives the execution of a certain activity within a workflow definition. It has an event of type <see cref="T:System.Workflow.Activities.ConditionalEventArgs" /> to return the result of the condition.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CodeCondition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CodeCondition" /> class.</summary>
    </member>
    <member name="E:System.Workflow.Activities.CodeCondition.Condition">
      <summary>Occurs when the condition is evaluated.</summary>
    </member>
    <member name="F:System.Workflow.Activities.CodeCondition.ConditionEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.CodeCondition.Condition" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.CodeCondition.Evaluate(System.Workflow.ComponentModel.Activity,System.IServiceProvider)">
      <summary>Evaluates the underlying condition. </summary>
      <returns>true if the condition evaluates to true; otherwise, false. The default is false.</returns>
      <param name="ownerActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this condition.</param>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> for this condition evaluation.</param>
    </member>
    <member name="M:System.Workflow.Activities.CodeCondition.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)">
      <summary>Retrieves the <see cref="T:System.Object" /> that is the subject of a <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</summary>
      <returns>The <see cref="T:System.Object" /> bound to the activity by the <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</returns>
      <param name="bind">The <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> of interest.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bind" /> or <paramref name="targetType" /> is null.</exception>
    </member>
    <member name="T:System.Workflow.Activities.CompensatableSequenceActivity">
      <summary>Defines a compensatable version of the <see cref="T:System.Workflow.Activities.SequenceActivity" /> activity. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CompensatableSequenceActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CompensatableSequenceActivity" /> class. </summary>
    </member>
    <member name="M:System.Workflow.Activities.CompensatableSequenceActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CompensatableSequenceActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.CompensatableSequenceActivity.System#Workflow#ComponentModel#ICompensatableActivity#Compensate(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Execute the activity using the <see cref="M:System.Workflow.ComponentModel.ICompensatableActivity.Compensate(System.Workflow.ComponentModel.ActivityExecutionContext)" /> interface.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> after the operation has been tried.</returns>
      <param name="executionContext">The execution context of the activity.</param>
    </member>
    <member name="T:System.Workflow.Activities.ConditionalEventArgs">
      <summary>Returns result information for the <see cref="T:System.Workflow.Activities.CodeCondition" /> class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ConditionalEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ConditionalEventArgs" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ConditionalEventArgs.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ConditionalEventArgs" /> class using the result of the condition.</summary>
      <param name="result">The result of the condition.</param>
    </member>
    <member name="P:System.Workflow.Activities.ConditionalEventArgs.Result">
      <summary>Gets or sets the result of a <see cref="T:System.Workflow.Activities.CodeCondition" /> evaluation.</summary>
      <returns>true if the result of the condition is true; otherwise, false.</returns>
    </member>
    <member name="T:System.Workflow.Activities.ConditionedActivityGroup">
      <summary>Provides the definition of a constraint-based execution context for a set of child activities.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ConditionedActivityGroup" /> class.</summary>
      <exception cref="T:System.InvalidOperationException">No children are executing and the <see cref="P:System.Workflow.Activities.ConditionedActivityGroup.UntilCondition" /> evaluates to false.</exception>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ConditionedActivityGroup" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.GetChildActivityExecutedCount(System.Workflow.ComponentModel.Activity)">
      <summary>Gets the number of times that the specified child activity has been executed.</summary>
      <returns>The number of times that the specified child activity has been executed.</returns>
      <param name="child">The child activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> parameter is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The conditioned activity group state is null.</exception>
      <exception cref="T:System.ArgumentException">The number of times that the child activity has been run cannot be determined.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.GetDynamicActivity(System.String)">
      <summary>Gets the currently executing instance of the child activity.</summary>
      <returns>The currently executing instance of the <see cref="T:System.Workflow.Activities.EventDrivenActivity" />.</returns>
      <param name="childActivityName">The name of the child <see cref="T:System.Workflow.Activities.EventDrivenActivity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="childactivity" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The executable activities do not contain the <paramref name="childactivity" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.GetWhenCondition(System.Object)">
      <summary>Gets the condition associated with the <see cref="F:System.Workflow.Activities.ConditionedActivityGroup.WhenConditionProperty" /> for the specified dependency object.</summary>
      <returns>The when condition.</returns>
      <param name="dependencyObject">The underlying data storage object for the activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The executable activities do not contain the <paramref name="dependencyObject" />.</exception>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.SetWhenCondition(System.Object,System.Object)">
      <summary>Sets the condition associated with the <see cref="F:System.Workflow.Activities.ConditionedActivityGroup.WhenConditionProperty" /> for the specified dependency object.</summary>
      <param name="dependencyObject">The underlying data storage object for the activity.</param>
      <param name="value">The value of the when condition.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The executable activities do not contain the <paramref name="dependencyObject" />.</exception>
    </member>
    <member name="M:System.Workflow.Activities.ConditionedActivityGroup.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously-typed event arguments.</param>
    </member>
    <member name="P:System.Workflow.Activities.ConditionedActivityGroup.UntilCondition">
      <summary>Gets or sets a value that indicates when the <see cref="T:System.Workflow.Activities.ConditionedActivityGroup" /> should complete.</summary>
      <returns>A condition that determines whether the <see cref="T:System.Workflow.Activities.ConditionedActivityGroup" /> should complete.</returns>
    </member>
    <member name="F:System.Workflow.Activities.ConditionedActivityGroup.UntilConditionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.ConditionedActivityGroup.UntilCondition" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.ConditionedActivityGroup.WhenConditionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="F:System.Workflow.Activities.ConditionedActivityGroup.WhenConditionProperty" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.CorrelationAliasAttribute">
      <summary>Overrides the correlation parameter value when the correlation value must be obtained from a parameter other than that indicated by the <see cref="T:System.Workflow.Activities.CorrelationParameterAttribute" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CorrelationAliasAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CorrelationAliasAttribute" /> with the name of the correlation that is being aliased and the path to where the value can be found.</summary>
      <param name="name">The name of the correlation parameter that is being aliased.</param>
      <param name="path">Indicates which argument in the method or event holds the value for the correlation parameter specified by <paramref name="name" />. This parameter can use dot notation, for example, Parameter.Location.</param>
    </member>
    <member name="P:System.Workflow.Activities.CorrelationAliasAttribute.Name">
      <summary>Gets the name of the correlation parameter that is being aliased.</summary>
      <returns>The name of the correlation parameter that is being aliased.</returns>
    </member>
    <member name="P:System.Workflow.Activities.CorrelationAliasAttribute.Path">
      <summary>Gets the path within the parameter that specifies the location of the correlation value.</summary>
      <returns>The path within the parameter that specifies the location of the correlation value.</returns>
    </member>
    <member name="T:System.Workflow.Activities.CorrelationInitializerAttribute">
      <summary>Indicates the method or event on an ExternalDataExchange interface that initializes the correlation value. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CorrelationInitializerAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CorrelationInitializerAttribute" /> attribute.</summary>
    </member>
    <member name="T:System.Workflow.Activities.CorrelationParameterAttribute">
      <summary>Indicates the name of the parameter used for correlation in the methods and events defined on an ExternalDataExchange interface. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.CorrelationParameterAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.CorrelationParameterAttribute" /> where the name of the parameter is used for correlation.</summary>
      <param name="name">The name of the parameter used for correlation.</param>
    </member>
    <member name="P:System.Workflow.Activities.CorrelationParameterAttribute.Name">
      <summary>Gets the name of the parameter used for correlation.</summary>
      <returns>Name of the parameter used for correlation. The default is an empty string.</returns>
    </member>
    <member name="T:System.Workflow.Activities.DelayActivity">
      <summary>Provides the logic to establish a timer and to wait, asynchronously, for timer's expiration.  This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.Activities.DelayActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.DelayActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.DelayActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.DelayActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="E:System.Workflow.Activities.DelayActivity.InitializeTimeoutDuration">
      <summary>Occurs before the time-out duration starts. </summary>
    </member>
    <member name="F:System.Workflow.Activities.DelayActivity.InitializeTimeoutDurationEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.DelayActivity.InitializeTimeoutDuration" /> event. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.DelayActivity.System#Workflow#Activities#IEventActivity#QueueName">
      <summary>Gets the name of the workflow queue that will be delivered when the timer expires.</summary>
      <returns>The name of the workflow queue.</returns>
    </member>
    <member name="M:System.Workflow.Activities.DelayActivity.System#Workflow#Activities#IEventActivity#Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Creates the subscription of the <see cref="T:System.Workflow.Activities.DelayActivity" /> to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentContext" /> or <paramref name="parentEventHandler" /> is null.</exception>
    </member>
    <member name="M:System.Workflow.Activities.DelayActivity.System#Workflow#Activities#IEventActivity#Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Cancels the subscription of the <see cref="T:System.Workflow.Activities.DelayActivity" /> to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentContext" /> or <paramref name="parentEventHandler" /> is null.</exception>
    </member>
    <member name="M:System.Workflow.Activities.DelayActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.QueueEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="P:System.Workflow.Activities.DelayActivity.TimeoutDuration">
      <summary>Gets and sets the duration of the delay in the workflow.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that indicates the length of the delay in the workflow.</returns>
    </member>
    <member name="F:System.Workflow.Activities.DelayActivity.TimeoutDurationProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.DelayActivity.TimeoutDuration" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.EventDeliveryFailedException">
      <summary>The exception that is thrown when an event that is raised from the host cannot be delivered to the workflow instance. Typically the event is raised from an <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> on a workflow instance. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventDeliveryFailedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventDeliveryFailedException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventDeliveryFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventDeliveryFailedException" /> class by using the error message that explains the reason for the exception.</summary>
      <param name="message">An error message that explains the reason for the exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventDeliveryFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventDeliveryFailedException" /> class by using the error message that explains the reason for the exception and the <see cref="T:System.Exception" /> that caused this exception.</summary>
      <param name="message">An error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused this exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.EventDrivenActivity">
      <summary>Wraps an <see cref="T:System.Workflow.ComponentModel.Activity" /> whose execution is initialized by an event. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.Activities.EventDrivenActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventDrivenActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.EventDrivenActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventDrivenActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-identified name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.EventDrivenActivity.EventActivity">
      <summary>Gets the event activity that drives the change.</summary>
      <returns>The event activity that drives the change.</returns>
    </member>
    <member name="T:System.Workflow.Activities.EventHandlersActivity">
      <summary>A composite activity that contains a collection of event handlers. It is typically used where a collection of events must be handled. Each event is handled by one <see cref="T:System.Workflow.Activities.EventDrivenActivity" />, which is part of <see cref="T:System.Workflow.Activities.EventHandlersActivity" />.</summary>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlersActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventHandlersActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlersActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventHandlersActivity" /> class by using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlersActivity.GetDynamicActivity(System.String)">
      <summary>Gets the currently executing instance of the <see cref="T:System.Workflow.Activities.EventDrivenActivity" />.</summary>
      <returns>The currently executing instance of the <see cref="T:System.Workflow.Activities.EventDrivenActivity" />.</returns>
      <param name="childActivityName">The name of the child <see cref="T:System.Workflow.Activities.EventDrivenActivity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="childactivity" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The executable activities do not contain the <paramref name="childactivity" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlersActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.Activities.EventHandlingScopeActivity">
      <summary>Enables event handling with the execution of the child activities. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlingScopeActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventHandlingScopeActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlingScopeActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventHandlingScopeActivity" /> class using the name of the name of the activity.</summary>
      <param name="name">The user defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.EventHandlingScopeActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.Activities.EventQueueName">
      <summary>Represents the name of a queue associated with an event on a <see cref="T:System.Workflow.Runtime.WorkflowInstance" />. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventQueueName" /> class by using the specified <see cref="T:System.Type" /> and operation name. </summary>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface to associate with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
      <param name="operation">A string that contains the name of the operation to associate with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.#ctor(System.Type,System.String,System.Collections.Generic.ICollection{System.Workflow.Runtime.CorrelationProperty})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.EventQueueName" /> class. </summary>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface</param>
      <param name="operation">A string that contains the name of the operation to associate with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
      <param name="propertyValues">A <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> collection that defines the property values to associate with <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.CompareTo(System.Object)">
      <summary>Compares the current <see cref="T:System.Workflow.Activities.EventQueueName" /> to the specified <see cref="T:System.Workflow.Activities.EventQueueName" />. </summary>
      <returns>A 32-bit signed integer that indicates the whether the comprarands match. -1 indicates that the current <see cref="T:System.Workflow.Activities.EventQueueName" /> and the specified object do not match; 0 indicates that the <see cref="T:System.Workflow.Activities.EventQueueName" /> and the specified object match.</returns>
      <param name="toCompare">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.CompareTo(System.Workflow.Activities.EventQueueName)">
      <summary>Compares the current <see cref="T:System.Workflow.Activities.EventQueueName" /> to the specified <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>A 32-bit signed integer that indicates the whether the comprarands match. -1 indicates that the two <see cref="T:System.Workflow.Activities.EventQueueName" /> objects do not match; 0 indicates that the two <see cref="T:System.Workflow.Activities.EventQueueName" /> objects match.</returns>
      <param name="eventQueueName">The <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare with the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>true if the specified The <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Workflow.Activities.EventQueueName" />; otherwise, false. </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.GetCorrelationValues">
      <summary>Returns a <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> array that contains all correlation properties associated with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.CorrelationProperty" /> array that contains all correlation properties associated with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>An integer that represents the hash code generated for the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.EventQueueName.InterfaceType">
      <summary>Gets the <see cref="T:System.Type" /> associated with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>The <see cref="T:System.Type" /> associated with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.EventQueueName.MethodName">
      <summary>Gets the method name associated with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>A string that contains the method name associated with the <see cref="T:System.Workflow.Activities.EventQueueName" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.op_Equality(System.Workflow.Activities.EventQueueName,System.Workflow.Activities.EventQueueName)">
      <summary>Returns a value indicating whether the two specified <see cref="T:System.Workflow.Activities.EventQueueName" /> objects are the equal. </summary>
      <returns>true if <paramref name="queueKey1" /> and <paramref name="queueKey2" /> are equal; otherwise, false. </returns>
      <param name="queueKey1">The first <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <param name="queueKey2">The second <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.op_GreaterThan(System.Workflow.Activities.EventQueueName,System.Workflow.Activities.EventQueueName)">
      <summary>Returns a value indicating whether the first of two specified <see cref="T:System.Workflow.Activities.EventQueueName" /> objects is greater than the second.</summary>
      <returns>true if <paramref name="queueKey1" /> is greater than <paramref name="queueKey2" />; otherwise, false. </returns>
      <param name="queueKey1">The first <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <param name="queueKey2">The second <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueKey1" /> or <paramref name="queueKey2" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.op_Inequality(System.Workflow.Activities.EventQueueName,System.Workflow.Activities.EventQueueName)">
      <summary>Returns a value indicating whether the two specified <see cref="T:System.Workflow.Activities.EventQueueName" /> objects are the not equal. </summary>
      <returns>true if <paramref name="queueKey1" /> and <paramref name="queueKey2" /> are not equal; otherwise, false. </returns>
      <param name="queueKey1">The first <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <param name="queueKey2">The second <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.op_LessThan(System.Workflow.Activities.EventQueueName,System.Workflow.Activities.EventQueueName)">
      <summary>Returns a value indicating whether the first of two specified <see cref="T:System.Workflow.Activities.EventQueueName" /> objects is less than the second.</summary>
      <returns>true if <paramref name="queueKey1" /> is greater than <paramref name="queueKey2" />; otherwise, false. </returns>
      <param name="queueKey1">The first <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <param name="queueKey2">The second <see cref="T:System.Workflow.Activities.EventQueueName" /> to compare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="queueKey1" /> or <paramref name="queueKey2" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.EventQueueName.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the current <see cref="T:System.Workflow.Activities.EventQueueName" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.ExecutionType">
      <summary>Specifies the execution mode for activities.</summary>
    </member>
    <member name="F:System.Workflow.Activities.ExecutionType.Sequence">
      <summary>Executes activities in sequential order. Each activity is executed in turn, after the previous activity has finished running. </summary>
    </member>
    <member name="F:System.Workflow.Activities.ExecutionType.Parallel">
      <summary>Executes activities in parallel.</summary>
    </member>
    <member name="T:System.Workflow.Activities.ExternalDataEventArgs">
      <summary>Represents the data sent when an event is raised using the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> activity. </summary>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataEventArgs" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataEventArgs.#ctor(System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataEventArgs" /> class using the instance identifier of the workflow.</summary>
      <param name="instanceId">The workflow instance identifier for the workflow instance that contains the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> that is expected to handle the event.</param>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataEventArgs.#ctor(System.Guid,System.Workflow.Runtime.IPendingWork,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataEventArgs" /> class.</summary>
      <param name="instanceId">The workflow instance identifier for the workflow instance that contains the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> that is expected to handle the event.</param>
      <param name="workHandler">The <see cref="T:System.Workflow.Runtime.IPendingWork" /> to allow the external code, raising the event, to participate in the batch.</param>
      <param name="workItem">The object that contains the external code that raises the event.</param>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataEventArgs.#ctor(System.Guid,System.Workflow.Runtime.IPendingWork,System.Object,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataEventArgs" /> class.</summary>
      <param name="instanceId">The workflow instance identifier for the workflow instance that contains the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> that is expected to handle the event.</param>
      <param name="workHandler">The <see cref="T:System.Workflow.Runtime.IPendingWork" /> to allow the external code that raises the event to participate in the batch.</param>
      <param name="workItem">The object that contains the external code that raises the event.</param>
      <param name="waitForIdle">A value that indicates whether the workflow should go idle before raising the event; otherwise, false.</param>
    </member>
    <member name="P:System.Workflow.Activities.ExternalDataEventArgs.Identity">
      <summary>Gets or sets the identity of the user that raised the event. </summary>
      <returns>The identity of the user that is raising the event.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ExternalDataEventArgs.InstanceId">
      <summary>Gets or sets the workflow instance identifier for the workflow instance that contains the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> that is expected to handle the event.</summary>
      <returns>The workflow instance identifier for the workflow instance that contains the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> that is expected to handle the event.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ExternalDataEventArgs.WaitForIdle">
      <summary>Gets or sets a value that indicates whether the event should be raised immediately, or if the workflow should go idle before raising the event.</summary>
      <returns>true if the workflow should go idle before raising the event; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ExternalDataEventArgs.WorkHandler">
      <summary>Gets or sets the <see cref="T:System.Workflow.Runtime.IPendingWork" /> to allow the external code, raising the event, to participate in the batch.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.IPendingWork" /> to allow the external code, raising the event, to participate in the batch.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ExternalDataEventArgs.WorkItem">
      <summary>Gets or sets the object that contains the external code that raises the event.</summary>
      <returns>The object that contains the external code that raises the event.</returns>
    </member>
    <member name="T:System.Workflow.Activities.ExternalDataExchangeAttribute">
      <summary>Marks an interface as a local service interface. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute" />.</summary>
    </member>
    <member name="T:System.Workflow.Activities.ExternalDataExchangeService">
      <summary>Represents a service that must be added to the workflow run-time engine for local services communications to be enabled. Local service implementations are required to be added to the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> for these services to be properly initialized and registered.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> class. </summary>
      <param name="parameters">A collection of parameters used to configure the service. The allowed values are an empty collection or a collection that contains only the ConfigurationSection key.</param>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> class.</summary>
      <param name="configSectionName">The name of the configuration section that contains this service's desired configuration.</param>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.#ctor(System.Workflow.Activities.ExternalDataExchangeServiceSection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" /> class. </summary>
      <param name="settings">The configuration section that contains settings for this service.</param>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.AddService(System.Object)">
      <summary>Adds the specified service to the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" />.</summary>
      <param name="service">An object that represents the service to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="service" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The external run-time container was not found.</exception>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.GetService(System.Type)">
      <summary>Gets the service implementation of the specified interface type, if the service is available.</summary>
      <returns>An object that implements the requested service, or null (Nothing in Visual Basic) if the service cannot be resolved.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of the interface implemented by the service to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="service" /> is a null reference (Nothing).</exception>
      <exception cref="T:System.InvalidOperationException">The service is not registered with the runtime.</exception>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.RemoveService(System.Object)">
      <summary>Removes the specified service from the <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" />.</summary>
      <param name="service">An object that represents the service to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="service" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The service is not registered with the runtime.</exception>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeService.Start">
      <summary>Adds local services if a configuration section was specified during construction of the object.</summary>
    </member>
    <member name="T:System.Workflow.Activities.ExternalDataExchangeServiceSection">
      <summary>Represents a configuration section that allows you to specify, in a configuration file, a set of services to be added to an instance of <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" />.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ExternalDataExchangeServiceSection.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Workflow.Activities.ExternalDataExchangeServiceSection" /> class. </summary>
    </member>
    <member name="P:System.Workflow.Activities.ExternalDataExchangeServiceSection.Services">
      <summary>Gets the collection of services to be added to an instance of <see cref="T:System.Workflow.Activities.ExternalDataExchangeService" />.</summary>
      <returns>A collection of service elements.</returns>
    </member>
    <member name="T:System.Workflow.Activities.HandleExternalEventActivity">
      <summary>Defines a workflow communication activity that is used to handle an event that is raised by a local service. </summary>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Cancels the handling of the event. </summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> at the end of the requested operation.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="P:System.Workflow.Activities.HandleExternalEventActivity.CorrelationToken">
      <summary>Gets or sets the binding to a <see cref="T:System.Workflow.Runtime.CorrelationToken" />. </summary>
      <returns>This property is used to correlate an event to the correct <see cref="T:System.Workflow.Activities.IEventActivity" />-inherited activity based on the payload of the event. For example, when a single workflow instance is listening for multiple instances of the same event at the same time, the CorrelationToken property is used to route the event to the proper activity in that workflow instance.This correlation should not be confused with correlating an event to the correct workflow instance. The correlation to the correct workflow instance is done by sending the event to an explicit workflow instance and using the <see cref="P:System.Workflow.Activities.ExternalDataEventArgs.InstanceId" /> property to properly identify the correct workflow instance. correlation, see the Correlated Local Service Sample.</returns>
    </member>
    <member name="F:System.Workflow.Activities.HandleExternalEventActivity.CorrelationTokenProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.HandleExternalEventActivity.CorrelationToken" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.HandleExternalEventActivity.EventName">
      <summary>Gets the name of the raised event. This property must be set before local communication can occur.</summary>
      <returns>The name of the raised event.</returns>
    </member>
    <member name="F:System.Workflow.Activities.HandleExternalEventActivity.EventNameProperty">
      <summary>Corresponds to the name of an event that is defined in an interface that was marked with the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Tries to run the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> associated with the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> at the end of the requested operation.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)">
      <summary>Called when an exception is raised within the context of the execution of this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> that results from an attempt to cancel this instance.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
      <param name="exception">The <see cref="T:System.Exception" /> that caused this fault.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.Initialize(System.IServiceProvider)">
      <summary>Initializes the event with the service provider.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides custom support to the class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> is a null reference (Nothing in Visual Basic), the type of the service provider is a null reference (Nothing), or the proxy for the service provider is a null reference (Nothing). </exception>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.InitializeProperties">
      <summary>Performs initialization on dependency properties.</summary>
    </member>
    <member name="P:System.Workflow.Activities.HandleExternalEventActivity.InterfaceType">
      <summary>Gets or sets the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute" /> attributed interface type of the local service whose event is handled. This property must be set before local communication can occur.</summary>
      <returns>The interface type of the local service whose event is handled.</returns>
    </member>
    <member name="F:System.Workflow.Activities.HandleExternalEventActivity.InterfaceTypeProperty">
      <summary>Corresponds to the name of the interface that was marked with the <see cref="T:System.Workflow.Activities.ExternalDataExchangeAttribute" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.HandleExternalEventActivity.Invoked">
      <summary>Occurs when the external event is received.</summary>
    </member>
    <member name="F:System.Workflow.Activities.HandleExternalEventActivity.InvokedEvent">
      <summary>Defines an event delegate that is executed after the activity receives the expected event from the local service.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.OnClosed(System.IServiceProvider)">
      <summary>Called by the workflow runtime as part of the activity's transition to the Closed state.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides the service.</param>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.OnInvoked(System.EventArgs)">
      <summary>Called just after the external event is received to allow derived classes to process the inbound <see cref="T:System.EventArgs" /> before the activity closes.</summary>
      <param name="e">The <see cref="T:System.EventArgs" /> that are received from the external event that was just received.</param>
    </member>
    <member name="P:System.Workflow.Activities.HandleExternalEventActivity.ParameterBindings">
      <summary>Gets the collection of parameter bindings.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> of parameter bindings.</returns>
    </member>
    <member name="F:System.Workflow.Activities.HandleExternalEventActivity.ParameterBindingsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.HandleExternalEventActivity.ParameterBindings" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.HandleExternalEventActivity.Roles">
      <summary>Gets or sets a reference to a workflow role collection.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.WorkflowRoleCollection" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.HandleExternalEventActivity.RolesProperty">
      <summary>Identifies the valid user roles that are allowed to send messages from the host to this activity. The two types of supported roles are Active Directory and ASP.NET.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.HandleExternalEventActivity.System#Workflow#Activities#IEventActivity#QueueName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive.</summary>
      <returns>The name of the WorkflowQueue on which the activity is waiting for data to arrive. </returns>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.System#Workflow#Activities#IEventActivity#Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Creates the subscription of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> activity to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.System#Workflow#Activities#IEventActivity#Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Cancels the subscription of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> activity to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the activity.</param>
      <param name="parentEventHandler"> The <see cref="T:System.EventHandler" /> for the parent event.</param>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.QueueEventArgs)"></member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denote the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="T:System.Workflow.Activities.HandleExternalEventActivityValidator">
      <summary>Verifies that the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> class is configured correctly.</summary>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivityValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.HandleExternalEventActivityValidator" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.HandleExternalEventActivityValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" /> class during workflow compilation.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the errors from this operation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> to use for this validation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to validate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Activities.IEventActivity">
      <summary>Provides methods and properties that event-driven activities must derive from, to subscribe to events.</summary>
    </member>
    <member name="P:System.Workflow.Activities.IEventActivity.QueueName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive.</returns>
    </member>
    <member name="M:System.Workflow.Activities.IEventActivity.Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Creates the subscription of an <see cref="T:System.Workflow.ComponentModel.Activity" /> to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
    </member>
    <member name="M:System.Workflow.Activities.IEventActivity.Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Cancels the subscription of an <see cref="T:System.Workflow.ComponentModel.Activity" /> to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
    </member>
    <member name="T:System.Workflow.Activities.IfElseActivity">
      <summary>Conditionally runs one of two or more activities of type <see cref="T:System.Workflow.Activities.IfElseBranchActivity" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.IfElseActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.IfElseActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.IfElseActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.IfElseActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity})">
      <summary>Adds a new branch to the <see cref="T:System.Workflow.Activities.IfElseActivity" /> using a collection of new activities to add to the new branch.</summary>
      <returns>The updated <see cref="T:System.Workflow.Activities.IfElseBranchActivity" /> with the new branches.</returns>
      <param name="activities">A collection of activities to add to the new branch.</param>
    </member>
    <member name="M:System.Workflow.Activities.IfElseActivity.AddBranch(System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Workflow.ComponentModel.ActivityCondition)">
      <summary>Adds a new branch to the <see cref="T:System.Workflow.Activities.IfElseActivity" /> using a collection of new activities to add to the new branch.</summary>
      <returns>The updated <see cref="T:System.Workflow.Activities.IfElseBranchActivity" /> with the new branches.</returns>
      <param name="activities">A collection of activities to add to the new branch.</param>
      <param name="branchCondition">An <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> that determines whether the branch should be run.</param>
    </member>
    <member name="M:System.Workflow.Activities.IfElseActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)"></member>
    <member name="T:System.Workflow.Activities.IfElseBranchActivity">
      <summary>Represents a branch of an <see cref="T:System.Workflow.Activities.IfElseActivity" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.IfElseBranchActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.IfElseBranchActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.IfElseBranchActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.IfElseBranchActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.IfElseBranchActivity.Condition">
      <summary>Gets or sets an <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> object reference for the current branch activity. The evaluation of this condition returns a value that indicates whether this branch should be run.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> that returns a value that indicates whether this branch should be run.</returns>
    </member>
    <member name="F:System.Workflow.Activities.IfElseBranchActivity.ConditionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.IfElseBranchActivity.Condition" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.InvokeWebServiceActivity">
      <summary>Invokes a Web service through a proxy class, which passes and receives parameters as specified. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWebServiceActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.InvokeWebServiceActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWebServiceActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.InvokeWebServiceActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="E:System.Workflow.Activities.InvokeWebServiceActivity.Invoked">
      <summary>Occurs when the Web service is invoked.</summary>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWebServiceActivity.InvokedEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.InvokeWebServiceActivity.Invoked" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.InvokeWebServiceActivity.Invoking">
      <summary>Occurs when the Web service is being invoked.</summary>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWebServiceActivity.InvokingEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.InvokeWebServiceActivity.Invoking" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWebServiceActivity.MethodName">
      <summary>Gets or sets the method name of the proxy class that is called on the Web service.</summary>
      <returns>The method name of the proxy class. The default is an empty <see cref="T:System.String" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWebServiceActivity.MethodNameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.MethodName" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWebServiceActivity.ParameterBindings">
      <summary>Gets the collection of parameter bindings for the method specified by the <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.MethodName" /> property.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> for the method, specified by <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.MethodName" /> property. The default is an empty collection of type <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWebServiceActivity.ParameterBindingsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.ParameterBindings" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWebServiceActivity.ProxyClass">
      <summary>Gets or sets the type of the proxy class used to communicate with the Web service.</summary>
      <returns>
        <see cref="T:System.Type" /> of the proxy used to start the Web service. The default is an empty <see cref="T:System.String" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWebServiceActivity.ProxyClassProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.ProxyClass" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWebServiceActivity.SessionId">
      <summary>Gets or sets a session identifier that indicates whether the session is shared across an activity, or if a new session is used.</summary>
      <returns>An identifier that either contains the <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.SessionID" /> of a previous session or an empty <see cref="T:System.String" /> that indicates that a new session will be used. The default is an empty <see cref="T:System.String" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWebServiceActivity.SessionIdProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.InvokeWebServiceActivity.SessionId" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWebServiceActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denotes the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWebServiceActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="T:System.Workflow.Activities.InvokeWebServiceEventArgs">
      <summary>Contains event data used to invoke a Web service. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWebServiceEventArgs.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.InvokeWebServiceEventArgs" /> class.</summary>
      <param name="proxyInstance">The Web service proxy <see cref="T:System.Object" /> to use for outgoing Web service calls.</param>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWebServiceEventArgs.WebServiceProxy">
      <summary>Gets the proxy class that communicates with the Web service.</summary>
      <returns>The proxy <see cref="T:System.Object" /> that communicates with the Web service.</returns>
    </member>
    <member name="T:System.Workflow.Activities.InvokeWorkflowActivity">
      <summary>Asynchronously runs one workflow from another. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWorkflowActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.InvokeWorkflowActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWorkflowActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.InvokeWorkflowActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWorkflowActivity.InstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> that indicates the newly created workflow instance.</summary>
      <returns>The <see cref="T:System.Guid" /> that indicates the newly created workflow instance.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWorkflowActivity.InstanceIdProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.InvokeWorkflowActivity.InstanceId" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.InvokeWorkflowActivity.Invoking">
      <summary>Occurs before the workflow is invoked. </summary>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWorkflowActivity.InvokingEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.InvokeWorkflowActivity.Invoking" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWorkflowActivity.ParameterBindings">
      <summary>Gets the collection of parameters to bind to. </summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> that contains the parameter bindings for the workflow being called. The default is an empty <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWorkflowActivity.ParameterBindingsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="F:System.Workflow.Activities.InvokeWorkflowActivity.ParameterBindingsProperty" />property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.InvokeWorkflowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)">
      <summary>Determines whether the <see cref="T:System.Type" /> can be filtered by the workflow.</summary>
      <returns>true if the specified <see cref="T:System.Type" /> can be filtered; otherwise, false.</returns>
      <param name="type">The type that the workflow must filter.</param>
      <param name="throwOnError">true to throw an error if the specified Type cannot be filtered; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="throwonError" /> is true. This indicates that <paramref name="type" /> is a design time type.</exception>
      <exception cref="T:System.Exception">
        <paramref name="type" /> is not the root activity.</exception>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWorkflowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription">
      <summary>Gets a description of the filter being used by the workflow.</summary>
      <returns>The description of the filter being used by the workflow.</returns>
    </member>
    <member name="P:System.Workflow.Activities.InvokeWorkflowActivity.TargetWorkflow">
      <summary>Gets or sets the <see cref="T:System.Type" /> of the workflow to be invoked.</summary>
      <returns>The fully-qualified name of the workflow to be invoked. The default is null.</returns>
    </member>
    <member name="F:System.Workflow.Activities.InvokeWorkflowActivity.TargetWorkflowProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.InvokeWorkflowActivity.TargetWorkflow" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.ListenActivity">
      <summary>Makes the workflow wait for any one of several possible events before the activity proceeds. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ListenActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ListenActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ListenActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ListenActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.ListenActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)"></member>
    <member name="T:System.Workflow.Activities.MessageEventSubscription">
      <summary>Creates a message event subscription to route messages to the appropriate workflow instance.</summary>
    </member>
    <member name="M:System.Workflow.Activities.MessageEventSubscription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.MessageEventSubscription" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.MessageEventSubscription.#ctor(System.IComparable,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.MessageEventSubscription" /> class using a specified queue name and instance ID.</summary>
      <param name="queueName">The friendly name that identifies the queue.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> that indicates the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Activities.MessageEventSubscription.#ctor(System.IComparable,System.Guid,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.MessageEventSubscription" /> class using a specified queue name, instance ID, and subscription ID.</summary>
      <param name="queueName">The friendly name that identifies the queue.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> that indicates the workflow instance.</param>
      <param name="subscriptionId">The <see cref="T:System.Guid" /> that indicates the subscription identifier.</param>
    </member>
    <member name="M:System.Workflow.Activities.MessageEventSubscription.#ctor(System.IComparable,System.Guid,System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.MessageEventSubscription" /> class using a specified queue name, subscription ID, interface type, and operation name.</summary>
      <param name="queueName">The friendly name that identifies the queue.</param>
      <param name="subscriptionId">The <see cref="T:System.Guid" /> that indicates the subscription identifier.</param>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface.</param>
      <param name="operation">The event name on the interface that represents the messaging operation for which you are creating a subscription.</param>
    </member>
    <member name="M:System.Workflow.Activities.MessageEventSubscription.#ctor(System.IComparable,System.Guid,System.Type,System.String,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.MessageEventSubscription" /> class using a specified queue name, instance ID, interface type, operation, and a subscription ID.</summary>
      <param name="queueName">The friendly name that identifies the queue.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> that indicates the workflow instance.</param>
      <param name="interfaceType">The <see cref="T:System.Type" /> of the interface.</param>
      <param name="operation">The event name on the interface that represents the messaging operation for which you are creating a subscription.</param>
      <param name="subscriptionId">The <see cref="T:System.Guid" /> that indicates the subscription identifier.</param>
    </member>
    <member name="P:System.Workflow.Activities.MessageEventSubscription.CorrelationProperties">
      <summary>Gets the collection of correlation properties for the message that will map the incoming message together with the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" />.</summary>
      <returns>A list of correlation properties for the message that will map the incoming message together with the <see cref="T:System.Workflow.Activities.HandleExternalEventActivity" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.MessageEventSubscription.InterfaceType">
      <summary>Gets or sets the interface type.</summary>
      <returns>The <see cref="T:System.Type" /> of the interface.</returns>
    </member>
    <member name="P:System.Workflow.Activities.MessageEventSubscription.MethodName">
      <summary>Gets or sets the name of the method.</summary>
      <returns>The name of the method.</returns>
    </member>
    <member name="P:System.Workflow.Activities.MessageEventSubscription.QueueName">
      <summary>Gets or sets the name of the queue to which this subscription belongs. </summary>
      <returns>The name that identifies the queue to which this subscription belongs.</returns>
    </member>
    <member name="P:System.Workflow.Activities.MessageEventSubscription.SubscriptionId">
      <summary>Gets or sets the unique identifier for this subscription.</summary>
      <returns>The <see cref="T:System.Guid" /> that indicates the subscription identifier.</returns>
    </member>
    <member name="P:System.Workflow.Activities.MessageEventSubscription.WorkflowInstanceId">
      <summary>Gets or sets the InstanceId of the workflow for which this subscription was created.</summary>
      <returns>The <see cref="T:System.Guid" /> that indicates the workflow instance.</returns>
    </member>
    <member name="T:System.Workflow.Activities.ParallelActivity">
      <summary>Runs a set of child activities at the same time. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ParallelActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ParallelActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ParallelActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ParallelActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.ParallelActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)"></member>
    <member name="T:System.Workflow.Activities.PolicyActivity">
      <summary>Represents a collection of <see cref="T:System.Workflow.Activities.Rules.Rule" /> class instances to be run as part of a workflow's execution as a single step or activity.</summary>
    </member>
    <member name="M:System.Workflow.Activities.PolicyActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.PolicyActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.PolicyActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.PolicyActivity" /> using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.PolicyActivity.RuleSetReference">
      <summary>Gets or sets a reference to a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> in the .rules file.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleSetReference" /> to a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> in the .rules file.</returns>
    </member>
    <member name="F:System.Workflow.Activities.PolicyActivity.RuleSetReferenceProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.PolicyActivity.RuleSetReference" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.ReplicatorActivity">
      <summary>Runs multiple instances of a child activity.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ReplicatorActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ReplicatorActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.AllChildrenComplete">
      <summary>Gets a value that indicates whether all child instances are complete.</summary>
      <returns>true if all child instances are complete; otherwise, false.</returns>
    </member>
    <member name="E:System.Workflow.Activities.ReplicatorActivity.ChildCompleted">
      <summary>Occurs immediately after the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> finishes running a child activity instance.</summary>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.ChildCompletedEvent">
      <summary>Occurs when the child activity instance of the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> has completed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.ReplicatorActivity.ChildInitialized">
      <summary>Occurs immediately after a child activity is initialized.</summary>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.ChildInitializedEvent">
      <summary>Occurs when the child activity instance of the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> has initialized.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.ReplicatorActivity.Completed">
      <summary>Occurs when the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> completes.</summary>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.CompletedEvent">
      <summary>Occurs when the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> has completed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.CurrentChildData">
      <summary>Returns a list of all child activities.</summary>
      <returns>A list of all child activities.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.CurrentIndex">
      <summary>Gets the index position of the current child activity.</summary>
      <returns>The index position of the current child activity.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.DynamicActivities">
      <summary>Gets an array of running child activity instances. </summary>
      <returns>An array of currently running child activity instances.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.ExecutionType">
      <summary>Gets or sets the <see cref="T:System.Workflow.Activities.ExecutionType" /> for the <see cref="T:System.Workflow.Activities.ReplicatorActivity" />.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.ExecutionType" /> for the <see cref="T:System.Workflow.Activities.ReplicatorActivity" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.ExecutionTypeProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.ReplicatorActivity.ExecutionType" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.InitialChildData">
      <summary>Gets or sets a list of child activity data.</summary>
      <returns>A list of child activity data.</returns>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.InitialChildDataProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.ReplicatorActivity.InitialChildData" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.ReplicatorActivity.Initialized">
      <summary>Occurs when the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> begins to execute.</summary>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.InitializedEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.ReplicatorActivity.Initialized" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.ReplicatorActivity.IsExecuting(System.Int32)">
      <summary>Indicates whether the specified child activity is currently executing. </summary>
      <returns>true if the child activity is executing; otherwise, false.</returns>
      <param name="index">The index position of the child activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorActivity.UntilCondition">
      <summary>Gets or sets a completion condition that indicates when the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> should finish.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> that determines whether the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> is finished.</returns>
    </member>
    <member name="F:System.Workflow.Activities.ReplicatorActivity.UntilConditionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.ReplicatorActivity.UntilCondition" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.ReplicatorChildEventArgs">
      <summary>Contains event arguments for the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> activity handlers called at initialization of child <see cref="T:System.Workflow.ComponentModel.Activity" /> instances in addition to when the child <see cref="T:System.Workflow.ComponentModel.Activity" /> instances are finished.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ReplicatorChildEventArgs.#ctor(System.Object,System.Workflow.ComponentModel.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ReplicatorChildEventArgs" /> class.</summary>
      <param name="instanceData">Object instance that represents the data/execution context associated with the current child <see cref="T:System.Workflow.ComponentModel.Activity" /> instance executed through the <see cref="T:System.Workflow.Activities.ReplicatorActivity" />.</param>
      <param name="activity">Child <see cref="T:System.Workflow.ComponentModel.Activity" /> of the current <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> instance that raised the event.</param>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorChildEventArgs.Activity">
      <summary>Gets the child/template <see cref="T:System.Workflow.ComponentModel.Activity" /> of the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> instance that raised the event.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> class instance that represents the child activity of the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> that raised the event.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReplicatorChildEventArgs.InstanceData">
      <summary>Gets the current item in the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> enumerable collection.</summary>
      <returns>The current item in the <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> enumerable collection.</returns>
    </member>
    <member name="T:System.Workflow.Activities.SequenceActivity">
      <summary>Runs a set of child activities according to a single defined ordering.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SequenceActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SequenceActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Cancels the execution of the activity.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of the activity after canceling the execution.</returns>
      <param name="executionContext">The execution context of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Executes the activity.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of the activity after executing the activity.</returns>
      <param name="executionContext">The execution context of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)">
      <summary>Called when an exception is raised within the context of the execution of this instance.</summary>
      <returns>The execution status of the activity.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
      <param name="exception">The <see cref="T:System.Exception" /> which caused this fault.</param>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)">
      <summary>Called when an activity is removed.</summary>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
      <param name="removedActivity">The specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.OnSequenceComplete(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>When overridden in a derived class, determines the action taken by the <see cref="T:System.Workflow.Activities.SequenceActivity" /> when the activity has completed execution.</summary>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Called after changes have been made to the collection <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> of this instance.</summary>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
    </member>
    <member name="M:System.Workflow.Activities.SequenceActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender"></param>
      <param name="e"></param>
    </member>
    <member name="T:System.Workflow.Activities.SequentialWorkflowActivity">
      <summary>Represents a workflow that executes activities sequentially. </summary>
    </member>
    <member name="M:System.Workflow.Activities.SequentialWorkflowActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SequentialWorkflowActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SequentialWorkflowActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SequentialWorkflowActivity" /> class by using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="E:System.Workflow.Activities.SequentialWorkflowActivity.Completed">
      <summary>Occurs when the workflow has finished.</summary>
    </member>
    <member name="F:System.Workflow.Activities.SequentialWorkflowActivity.CompletedEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.SequentialWorkflowActivity.Completed" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.SequentialWorkflowActivity.DynamicUpdateCondition">
      <summary>Gets or sets an <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> in which dynamic updates can be made in the workflow, when overridden in a derived class.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> that identifies when dynamic updates can be made.</returns>
    </member>
    <member name="M:System.Workflow.Activities.SequentialWorkflowActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Runs the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> at the <see cref="T:System.Workflow.Activities.SequentialWorkflowActivity" /> at the end of the requested operation.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="E:System.Workflow.Activities.SequentialWorkflowActivity.Initialized">
      <summary>Occurs when the workflow is initialized.</summary>
    </member>
    <member name="F:System.Workflow.Activities.SequentialWorkflowActivity.InitializedEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.SequentialWorkflowActivity.Initialized" /> event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.SequentialWorkflowActivity.OnSequenceComplete(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Raises the <see cref="F:System.Workflow.Activities.SequentialWorkflowActivity.CompletedEvent" /> for the <see cref="T:System.Workflow.Activities.SequentialWorkflowActivity" />.</summary>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Activities.SetStateActivity">
      <summary>Provides the transition to a <see cref="T:System.Workflow.Activities.StateActivity" /> in a state machine workflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SetStateActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SetStateActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SetStateActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SetStateActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.SetStateActivity.TargetStateName">
      <summary>Gets or sets the name of the target state.</summary>
      <returns>The name of the target stream.</returns>
    </member>
    <member name="F:System.Workflow.Activities.SetStateActivity.TargetStateNameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.SetStateActivity.TargetStateName" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.SetStateEventArgs">
      <summary>Represents a class that is used as an argument to set the state of a <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SetStateEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SetStateEventArgs" /> class.</summary>
      <param name="targetStateName">The state to set the <see cref="T:System.Workflow.Activities.StateActivity" /> to.</param>
    </member>
    <member name="P:System.Workflow.Activities.SetStateEventArgs.TargetStateName">
      <summary>Gets the state to set the <see cref="T:System.Workflow.Activities.StateActivity" /> to.</summary>
      <returns>The state to set the <see cref="T:System.Workflow.Activities.StateActivity" /> to.</returns>
    </member>
    <member name="T:System.Workflow.Activities.StateActivity">
      <summary>Represents a state in a <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Cancels the execution of the <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>The current status of the <see cref="T:System.Workflow.ComponentModel.Activity" /> in the running workflow instance.</returns>
      <param name="executionContext">The execution context for the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Executes the <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>The current status of the <see cref="T:System.Workflow.ComponentModel.Activity" /> in the running workflow instance.</returns>
      <param name="executionContext">The execution context for the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.GetDynamicActivity(System.String)">
      <summary>Gets the executing instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that corresponds to the specified child activity name.</summary>
      <returns>The dynamic child activities. </returns>
      <param name="childActivityName">The child activity.</param>
      <exception cref="T:System.ArgumentException">The executable activities do not contain the <paramref name="childActivityName" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.Initialize(System.IServiceProvider)">
      <summary>Initializes the <see cref="T:System.Workflow.Activities.StateActivity" /> using the service provider.</summary>
      <param name="provider">The service provider from which to obtain services.</param>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)">
      <summary>Determines if the activity being added is an <see cref="T:System.Workflow.Activities.EventDrivenActivity" /> and if so, verifies whether the newly added event driven needs to be subscribed.</summary>
      <param name="executionContext">The execution context for the activity.</param>
      <param name="addedActivity">The activity added to the <see cref="T:System.Workflow.Activities.StateActivity" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.StateActivity.OnClosed(System.IServiceProvider)">
      <summary>Called by the workflow runtime engine as part of the activity's transition to the <see cref="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Closed" /> state.</summary>
      <param name="provider">The service provider from which to obtain services.</param>
    </member>
    <member name="F:System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey">
      <summary>Holds the string value of the change tracking data key; "StateActivity.StateChange". This field is a constant.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.StateActivityValidator">
      <summary>Represents a class that verifies whether a <see cref="T:System.Workflow.Activities.StateActivity" /> class is configured correctly.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateActivityValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateActivityValidator" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateActivityValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the <see cref="T:System.Workflow.Activities.StateActivity" /> class during workflow compilation.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the errors from this operation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> to use for this validation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to validate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.StateActivityValidator.ValidateActivityChange(System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.ActivityChangeAction)">
      <summary>Validates the changes made to <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the errors from this operation.</returns>
      <param name="activity">The name of the <see cref="T:System.Workflow.Activities.StateActivity" /> to validate.</param>
      <param name="action">The action taken on the <see cref="T:System.Workflow.Activities.StateActivity" />.</param>
    </member>
    <member name="T:System.Workflow.Activities.StateFinalizationActivity">
      <summary>Represents an activity that executes contained activities before transitioning to another state in a state machine workflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateFinalizationActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateFinalizationActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateFinalizationActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateFinalizationActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="T:System.Workflow.Activities.StateInitializationActivity">
      <summary>Acts as a container to a group of activities that is executed when the <see cref="T:System.Workflow.Activities.StateActivity" /> starts running. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateInitializationActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateInitializationActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateInitializationActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateInitializationActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="T:System.Workflow.Activities.StateMachineWorkflowActivity">
      <summary>Serves as the root container for state machine workflows. Contains event-driven activities and states.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowActivity.CompletedStateName">
      <summary>Gets or sets the end <see cref="T:System.Workflow.Activities.StateActivity" /> of the workflow.</summary>
      <returns>The end <see cref="T:System.Workflow.Activities.StateActivity" /> of the workflow.</returns>
    </member>
    <member name="F:System.Workflow.Activities.StateMachineWorkflowActivity.CompletedStateNameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> that targets the <see cref="P:System.Workflow.Activities.StateMachineWorkflowActivity.CompletedStateName" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowActivity.CurrentStateName">
      <summary>Gets the name of the currently executing <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>The name of the current <see cref="T:System.Workflow.Activities.StateActivity" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowActivity.DynamicUpdateCondition">
      <summary>Gets or sets an <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> that determines whether dynamic updates can be made in the workflow, when overridden in a derived class.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> that identifies when dynamic updates can be made.</returns>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowActivity.InitialStateName">
      <summary>Gets or sets the <see cref="T:System.Workflow.Activities.StateActivity" /> in which the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> is when an instance of the state machine is created.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.StateActivity" /> in which the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> is when an instance of the state machine is created.</returns>
    </member>
    <member name="F:System.Workflow.Activities.StateMachineWorkflowActivity.InitialStateNameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> that targets the <see cref="P:System.Workflow.Activities.StateMachineWorkflowActivity.InitialStateName" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowActivity.PreviousStateName">
      <summary>Gets the name of the previously executed <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>The name of the previous <see cref="T:System.Workflow.Activities.StateActivity" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.StateMachineWorkflowActivity.SetStateQueueName">
      <summary>The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> that is used to change the state of a <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />. This field is constant.</summary>
    </member>
    <member name="T:System.Workflow.Activities.StateMachineWorkflowInstance">
      <summary>Represents a class that manages the current instance of a <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowInstance.#ctor(System.Workflow.Runtime.WorkflowRuntime,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowInstance" /> class.</summary>
      <param name="runtime">The current workflow runtime.</param>
      <param name="instanceId">The <see cref="T:System.Guid" /> that indicates the instance of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="runtime" /> is a null reference (Nothing in Visual Basic). or<paramref name="instanceId" /> is an empty <see cref="T:System.Guid" />.</exception>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.CurrentState">
      <summary>Gets the currently executing <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>The current <see cref="T:System.Workflow.Activities.StateActivity" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.CurrentStateName">
      <summary>Gets the name of the current <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <returns>The name of the current <see cref="T:System.Workflow.Activities.StateActivity" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowInstance.EnqueueItem(System.IComparable,System.Object)">
      <summary>Posts a message to the <see cref="T:System.Workflow.Activities.StateMachineWorkflowInstance" />.</summary>
      <param name="queueName">The name of the workflow queue.</param>
      <param name="item">The object to queue.</param>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
      <summary>Posts a message to the <see cref="T:System.Workflow.Activities.StateMachineWorkflowInstance" />.</summary>
      <param name="queueName">The name of the workflow queue.</param>
      <param name="item">The object to queue.</param>
      <param name="pendingWork">An <see cref="T:System.Workflow.Runtime.IPendingWork" /> that allows the sender to be notified when the item is delivered.</param>
      <param name="workItem">An object to be passed to the <see cref="T:System.Workflow.Runtime.IPendingWork" /> methods.</param>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.InstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> that indicates the current instance of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</summary>
      <returns>The <see cref="T:System.Guid" /> that indicates the current instance of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.PossibleStateTransitions">
      <summary>Gets a collection of state transitions that the current <see cref="T:System.Workflow.Activities.StateActivity" /> can make.</summary>
      <returns>A collection of state transitions that the current <see cref="T:System.Workflow.Activities.StateActivity" /> can make.</returns>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowInstance.SetState(System.String)">
      <summary>Provides a transition to a specified <see cref="T:System.Workflow.Activities.StateActivity" /> using the name of the <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <param name="targetStateName">The name of the <see cref="T:System.Workflow.Activities.StateActivity" /> to transition to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetStateName" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="T:System.Workflow.Activities.StateActivity" /> specified by <paramref name="targetStateName" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.Activities.StateMachineWorkflowInstance.SetState(System.Workflow.Activities.StateActivity)">
      <summary>Provides a transition to a specified <see cref="T:System.Workflow.Activities.StateActivity" />.</summary>
      <param name="targetState">The <see cref="T:System.Workflow.Activities.StateActivity" /> to transition to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetState" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.StateHistory">
      <summary>Gets a collection of state activities that the state machine workflow instance has transitioned through.</summary>
      <returns>A collection of transitions that the <see cref="T:System.Workflow.Activities.StateActivity" /> has made.</returns>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.StateMachineWorkflow">
      <summary>Gets the latest definition of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</summary>
      <returns>The latest definition of the <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" />.</returns>
      <exception cref="T:System.InvalidOperationException">If the workflow has already completed, the current <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> cannot be retrieved, so the previous definition is retrieved.</exception>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.States">
      <summary>Gets a list of <see cref="T:System.Workflow.Activities.StateActivity" /> classes in the <see cref="P:System.Workflow.Activities.StateMachineWorkflowInstance.StateMachineWorkflow" />.</summary>
      <returns>A list of <see cref="T:System.Workflow.Activities.StateActivity" /> classes in the <see cref="P:System.Workflow.Activities.StateMachineWorkflowInstance.StateMachineWorkflow" />.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Workflow.Activities.StateMachineWorkflowInstance.StateMachineWorkflow" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Activities.StateMachineWorkflowInstance.WorkflowInstance">
      <summary>Gets the current <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</summary>
      <returns>The current <see cref="T:System.Workflow.Runtime.WorkflowInstance" />.</returns>
    </member>
    <member name="T:System.Workflow.Activities.WebServiceFaultActivity">
      <summary>Enables sending a fault to the Web service client from the workflow. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceFaultActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebServiceFaultActivity" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceFaultActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebServiceFaultActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceFaultActivity.Fault">
      <summary>Gets or sets the exception that caused the Web service to stop.</summary>
      <returns>The exception that caused the Web service to stop.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceFaultActivity.FaultProperty">
      <summary>Contains the exception value that is thrown when there is an error in the execution of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> activity.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceFaultActivity.InputActivityName">
      <summary>Gets or sets the name of the previous <see cref="T:System.Workflow.Activities.WebServiceInputActivity" />.</summary>
      <returns>The name of the previous <see cref="T:System.Workflow.Activities.WebServiceInputActivity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceFaultActivity.InputActivityNameProperty">
      <summary>Represents the name of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> that is associated with this fault. The fault is thrown on the method that was associated with the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.WebServiceFaultActivity.SendingFault">
      <summary>Occurs before the fault is sent to the client, which is useful for appending information to the fault.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceFaultActivity.SendingFaultEvent">
      <summary>Defines an event delegate that is executed before the fault is delivered to the method caller. This handler provides a place to set the fault property value.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.WebServiceInputActivity">
      <summary>Enables receiving data from a Web service in a workflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.ActivitySubscribedProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="F:System.Workflow.Activities.WebServiceInputActivity.ActivitySubscribedProperty" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.WebServiceInputActivity.InputReceived">
      <summary>Occurs when the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> has received input.</summary>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.InputReceivedEvent">
      <summary>Defines an event delegate that is executed after the activity receives the expected call from the Web service invocation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceInputActivity.InterfaceType">
      <summary>Gets or sets the interface type that defines the method that this activity listens on.</summary>
      <returns>The interface type.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.InterfaceTypeProperty">
      <summary>Corresponds to the name of the interface that is used as the Web service contract.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceInputActivity.IsActivating">
      <summary>Gets or sets a value that indicates whether receiving data should start the workflow.</summary>
      <returns>true if receiving data should start the workflow; otherwise, false.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.IsActivatingProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.WebServiceInputActivity.IsActivating" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceInputActivity.MethodName">
      <summary>Gets or sets the name of the method on the interface specified by the <see cref="P:System.Workflow.Activities.WebServiceInputActivity.InterfaceType" /> property that this <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> represents.</summary>
      <returns>The name of the method on the interface specified by the <see cref="P:System.Workflow.Activities.WebServiceInputActivity.InterfaceType" /> property that this <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> represents. </returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.MethodNameProperty">
      <summary>Corresponds to a name of one of the methods contained in the interface that is used as the Web service contract.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceInputActivity.ParameterBindings">
      <summary>Gets the collection of bindings associated with the input parameters to the method specified in the <see cref="P:System.Workflow.Activities.WebServiceInputActivity.MethodName" /> property.</summary>
      <returns>The collection of properties used as inbound parameters on the method specified by the <see cref="P:System.Workflow.Activities.WebServiceInputActivity.MethodName" /> property.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.ParameterBindingsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.WebServiceInputActivity.ParameterBindings" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceInputActivity.Roles">
      <summary>Gets or sets a collection of roles that are valid to send data to the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" />.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.WorkflowRoleCollection" /> that contains the Web service roles that are valid to send data to the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" />.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceInputActivity.RolesProperty">
      <summary>Identifies the valid user roles that are allowed to send messages from the Web service client to the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" />. The two types of supported roles are Active Directory and ASP.NET.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceInputActivity.System#Workflow#Activities#IEventActivity#QueueName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive. </returns>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.System#Workflow#Activities#IEventActivity#Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Creates the subscription of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> activity to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> activity.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.System#Workflow#Activities#IEventActivity#Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Cancels the subscription of a <see cref="T:System.Workflow.ComponentModel.Activity" /> to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> activity.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> for the parent event.</param>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.QueueEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denotes the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceInputActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="T:System.Workflow.Activities.WebServiceOutputActivity">
      <summary>Enables sending data to a Web service from within a workflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceOutputActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebServiceOutputActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceOutputActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebServiceOutputActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceOutputActivity.InputActivityName">
      <summary>Gets or sets the name of the preceding <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> class.</summary>
      <returns>The name of the preceding <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> class.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceOutputActivity.InputActivityNameProperty">
      <summary>Defines the name of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> that this <see cref="T:System.Workflow.Activities.WebServiceOutputActivity" /> is matched with.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WebServiceOutputActivity.ParameterBindings">
      <summary>Gets the collection of bindings associated with the out/ref and return value of the corresponding <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> method.</summary>
      <returns>This collection is used to bind the outbound parameters to locations in the workflow. When the <see cref="T:System.Workflow.Activities.WebServiceOutputActivity" /> executes, it extracts the values from the bound locations and delivers these back to the blocked Web service method.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceOutputActivity.ParameterBindingsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> that targets the <see cref="P:System.Workflow.Activities.WebServiceOutputActivity.ParameterBindings" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Activities.WebServiceOutputActivity.SendingOutput">
      <summary>Occurs before the <see cref="T:System.Workflow.Activities.WebServiceOutputActivity" /> sends output to the client.</summary>
    </member>
    <member name="F:System.Workflow.Activities.WebServiceOutputActivity.SendingOutputEvent">
      <summary>Defines an event delegate that is executed before the activity sends the output of the Web service invocation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceOutputActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value denoting the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="M:System.Workflow.Activities.WebServiceOutputActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property. </param>
    </member>
    <member name="T:System.Workflow.Activities.WebWorkflowRole">
      <summary>Represents a Workflow role that is backed by a <see cref="T:System.Web.Security.RoleProvider" />.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WebWorkflowRole.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebWorkflowRole" /> class by using the specified role name. </summary>
      <param name="roleName">A string that defines the name of the role.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="roleName" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.WebWorkflowRole.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WebWorkflowRole" /> class by using the specified role name and role provider. </summary>
      <param name="roleName">A string that defines the name of the role.</param>
      <param name="provider">A string that defines the role provider.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="roleName" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.WebWorkflowRole.GetIdentities">
      <summary>Returns a generic list of ASP.NET accounts associated with the <see cref="T:System.Workflow.Activities.WebWorkflowRole" />.</summary>
      <returns>A generic list of string values that represent the ASP.NET accounts associated with the <see cref="T:System.Workflow.Activities.WebWorkflowRole" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.WebWorkflowRole.IncludesIdentity(System.String)">
      <summary>Returns a value indicating whether the <see cref="T:System.Workflow.Activities.WebWorkflowRole" /> contains the specified identity</summary>
      <returns>true if the <see cref="T:System.Workflow.Activities.WebWorkflowRole" /> contains the specified identity; otherwise, false.</returns>
      <param name="identity">The name of the identity to test for.</param>
    </member>
    <member name="P:System.Workflow.Activities.WebWorkflowRole.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.Activities.WebWorkflowRole" />.</summary>
      <returns>A string that contains the name of the <see cref="T:System.Workflow.Activities.WebWorkflowRole" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Workflow.Activities.WebWorkflowRole.Name" /> was set to a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Activities.WebWorkflowRole.RoleProvider">
      <summary>Gets or sets the role provider for the <see cref="T:System.Workflow.Activities.WebWorkflowRole" />.</summary>
      <returns>A string that contains the role provider for the <see cref="T:System.Workflow.Activities.WebWorkflowRole" />.</returns>
    </member>
    <member name="T:System.Workflow.Activities.WhileActivity">
      <summary>Runs a child activity iteratively as long as a certain condition is true.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WhileActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WhileActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WhileActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WhileActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.WhileActivity.Condition">
      <summary>Gets or sets a condition that determines whether the <see cref="T:System.Workflow.Activities.WhileActivity" /> should run or finish.</summary>
      <returns>When the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> property evaluates to true, the <see cref="T:System.Workflow.Activities.WhileActivity" /> continues to run. When the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> evaluates to false, the <see cref="T:System.Workflow.Activities.WhileActivity" /> finishes.</returns>
    </member>
    <member name="F:System.Workflow.Activities.WhileActivity.ConditionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.WhileActivity.Condition" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.WhileActivity.DynamicActivity">
      <summary>Gets the dynamic child activities in the <see cref="T:System.Workflow.Activities.WhileActivity" />.</summary>
      <returns>The dynamic child activities in the <see cref="T:System.Workflow.Activities.WhileActivity" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.WhileActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowAuthorizationException">
      <summary>The exception that is thrown when role validation fails due to a specified identity that is not contained in the <see cref="T:System.Workflow.Activities.WorkflowRoleCollection" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowAuthorizationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowAuthorizationException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowAuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowAuthorizationException" /> class by using serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />  that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />  that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowAuthorizationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowAuthorizationException" /> class using the specified message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowAuthorizationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowAuthorizationException" /> class by using the specified message and <see cref="T:System.Exception" />.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the <see cref="T:System.Workflow.Activities.WorkflowAuthorizationException" />.  </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowAuthorizationException.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowAuthorizationException" /> class using the name of the activity and the principal.</summary>
      <param name="activityName">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> in which the exception occurred.</param>
      <param name="principalName">The name of the user or entity on whose behalf the workflow authorization exception was thrown.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowRole">
      <summary>The abstract base class from which workflow roles are derived.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowRole.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowRole" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowRole.GetIdentities">
      <summary>When implemented in a derived class gets the identities contained by this <see cref="T:System.Workflow.Activities.WorkflowRole" />.</summary>
      <returns>A list of the names of the identities contained by this <see cref="T:System.Workflow.Activities.WorkflowRole" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowRole.IncludesIdentity(System.String)">
      <summary>When implemented in a derived class, returns a value that indicates whether this role contains the specified identity.</summary>
      <returns>true if <paramref name="identity" /> is included in this <see cref="T:System.Workflow.Activities.WorkflowRole" />; otherwise, false.</returns>
      <param name="identity">The name of the identity for which to test.</param>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowRole.Name">
      <summary>When implemented in a derived class, gets or sets the name of this <see cref="T:System.Workflow.Activities.WorkflowRole" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.WorkflowRole" />.</returns>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowRoleCollection">
      <summary>Represents a collection of <see cref="T:System.Workflow.Activities.WorkflowRole" /> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowRoleCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowRoleCollection" /> class. </summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowRoleCollection.IncludesIdentity(System.String)">
      <summary>Returns a value indicating whether the <see cref="T:System.Workflow.Activities.WorkflowRoleCollection" /> contains the specified identity.</summary>
      <returns>true if the <see cref="T:System.Workflow.Activities.WorkflowRoleCollection" /> contains the identity; otherwise false. </returns>
      <param name="identity">A string that contains the identity for which to search.</param>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowSubscriptionService">
      <summary>Provides methods for a subscription service to manage subscriptions for a workflow runtime.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowSubscriptionService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowSubscriptionService" /> class. </summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowSubscriptionService.CreateSubscription(System.Workflow.Activities.MessageEventSubscription)">
      <summary>When overridden in a derived class, notifies the <see cref="T:System.Workflow.Activities.WorkflowSubscriptionService" /> that the workflow runtime created the specified <see cref="T:System.Workflow.Activities.MessageEventSubscription" />. </summary>
      <param name="subscription">The <see cref="T:System.Workflow.Activities.MessageEventSubscription" /> that the workflow runtime created.</param>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowSubscriptionService.DeleteSubscription(System.Guid)">
      <summary>When overridden in a derived class, notifies the <see cref="T:System.Workflow.Activities.WorkflowSubscriptionService" /> that the workflow runtime deleted the subscription associated with the specified GUID. </summary>
      <param name="subscriptionId">The GUID of the subscription that the workflow runtime deleted.</param>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowWebService">
      <summary>Represents the base class for all workflow Web services.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowWebService.#ctor(System.Type)">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowWebService" /> class.</summary>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow. </param>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowWebService.Invoke(System.Type,System.String,System.Boolean,System.Object[])">
      <summary>Invokes the associated workflow and retrieves the response.</summary>
      <returns>The object returned by the Web service.</returns>
      <param name="interfaceType">The type of the interface.</param>
      <param name="methodName">The name of the method.</param>
      <param name="isActivation">Indicates whether the Web service activates the workflow.</param>
      <param name="parameters">The parameters of the method specified by <paramref name="methodName" />.</param>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowWebService.WorkflowRuntime">
      <summary>Provides access to the current <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />, which executes the workflow.</summary>
      <returns>The current <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration">
      <summary>Represents the section in the configuration file that addresses the role class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.DirectReports">
      <summary>Gets or sets the names of the direct reports.</summary>
      <returns>The names of the direct reports.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.DistinguishedName">
      <summary>Gets or sets the distinguished name for this instance.</summary>
      <returns>The distinguished name for this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.Group">
      <summary>Gets or sets the name of the group for this instance.</summary>
      <returns>The name of the group for this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.Manager">
      <summary>Gets or sets the name of the manager associated with this instance.</summary>
      <returns>The name of the manager associated with this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.Member">
      <summary>Gets or sets the member for this instance.</summary>
      <returns>The member for this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration.RootPath">
      <summary>Gets or sets the root path for this instance.</summary>
      <returns>The root path for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.AddedConditionAction">
      <summary>Represents the addition of a <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to a workflow during dynamic update. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.AddedConditionAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.AddedConditionAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.AddedConditionAction.#ctor(System.Workflow.Activities.Rules.RuleCondition)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.AddedConditionAction" /> class using the definition of the added condition.</summary>
      <param name="addedConditionDefinition">The condition added to the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addedConditionDefinition" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.AddedConditionAction.ConditionDefinition">
      <summary>Gets or sets the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to add to the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to add to the workflow.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Workflow.Activities.Rules.AddedConditionAction.ConditionDefinition" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.AddedConditionAction.ConditionName">
      <summary>Gets a string that contains the name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> that was added to the workflow.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> that was added to the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.AddedRuleSetAction">
      <summary>Represents the addition of a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> during dynamic update. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.AddedRuleSetAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.AddedRuleSetAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.AddedRuleSetAction.#ctor(System.Workflow.Activities.Rules.RuleSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.AddedRuleSetAction" /> class by using the new <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <param name="addedRuleSetDefinition">The new <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.AddedRuleSetAction.RuleSetDefinition">
      <summary>Gets or sets the new <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The new <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.AddedRuleSetAction.RuleSetName">
      <summary>Gets the name of the new <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The name of the new <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.IRuleExpression">
      <summary>Represents the base class from which custom expression writers must derive to write custom expressions.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)">
      <summary>When overridden in a derived class, reports on how the object uses fields and properties in the context type.</summary>
      <param name="analysis">The <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> method to store fields and properties read by a condition or read by an action.</param>
      <param name="isRead">true if the expression is being read from; false if the expression is not being read from.</param>
      <param name="isWritten">true if the expression is being written to; false if the expression is not being written to.</param>
      <param name="qualifier">The path of a field or property.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.IRuleExpression.Clone">
      <summary>When overridden in a derived class, creates a deep copy of the current <see cref="T:System.CodeDom.CodeExpression" />.</summary>
      <returns>A deep copy of the current <see cref="T:System.CodeDom.CodeExpression" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.IRuleExpression.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression)">
      <summary>When overridden in a derived class, decompiles the custom expression into string form.</summary>
      <param name="stringBuilder">A mutable string for the decompiled expression. This method should append the decompiled syntax for this subexpression.</param>
      <param name="parentExpression">The parent code expression. This can be used to determine operator precedence, and whether this subexpression needs to be parenthesized.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.IRuleExpression.Evaluate(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>When overridden in a derived class, evaluates the custom expression.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleExpressionResult" /> that indicates the result of the rule execution.</returns>
      <param name="execution">The <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> to execute the expression.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.IRuleExpression.Match(System.CodeDom.CodeExpression)">
      <summary>Compares the current expression to another expression to determine whether they are equal.</summary>
      <returns>true to show that the expressions are equal; otherwise, false.</returns>
      <param name="expression">The expression to compare the current expression to.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.IRuleExpression.Validate(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)">
      <summary>When overridden in a derived class, verifies that the expression is configured correctly and has no errors.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleExpressionInfo" /> for the expression.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <param name="isWritten">true if the expression is being written to; false if the expression is not being written to.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RemovedConditionAction">
      <summary>Represents the removal of a <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> from a workflow during dynamic update. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RemovedConditionAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RemovedConditionAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RemovedConditionAction.#ctor(System.Workflow.Activities.Rules.RuleCondition)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RemovedConditionAction" /> class by using the definition of the removed condition.</summary>
      <param name="removedConditionDefinition">The condition removed from the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addedConditionDefinition" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RemovedConditionAction.ConditionDefinition">
      <summary>Gets or sets the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to remove from the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to remove from the workflow.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Workflow.Activities.Rules.RemovedConditionAction.ConditionDefinition" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RemovedConditionAction.ConditionName">
      <summary>Gets a string that contains the name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to remove from the workflow.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to remove from the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RemovedRuleSetAction">
      <summary>Represents the removal of a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> during dynamic update. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RemovedRuleSetAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RemovedRuleSetAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RemovedRuleSetAction.#ctor(System.Workflow.Activities.Rules.RuleSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RemovedRuleSetAction" /> class by using the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> removed from the workflow.</summary>
      <param name="removedRuleSetDefinition">The <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> removed from the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="removedRuleSetDefinition" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RemovedRuleSetAction.RuleSetDefinition">
      <summary>Gets or Sets the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> removed from the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> removed from the workflow.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to remove from the workflow is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RemovedRuleSetAction.RuleSetName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> removed from the workflow.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> removed from the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.Rule">
      <summary>Defines a condition with an associated set of actions to perform.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Rule" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Rule" /> class using the name of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.#ctor(System.String,System.Workflow.Activities.Rules.RuleCondition,System.Collections.Generic.IList{System.Workflow.Activities.Rules.RuleAction})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Rule" /> class using the name of the Rule, the rule condition, and a list of THEN actions.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</param>
      <param name="condition">The <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> for the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</param>
      <param name="thenActions">A collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> objects to evaluate whether the condition is true.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.#ctor(System.String,System.Workflow.Activities.Rules.RuleCondition,System.Collections.Generic.IList{System.Workflow.Activities.Rules.RuleAction},System.Collections.Generic.IList{System.Workflow.Activities.Rules.RuleAction})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Rule" /> class using the name of the Rule, the rule condition, a list of THEN actions, and a list of ELSE actions.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</param>
      <param name="condition">The <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> for the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</param>
      <param name="thenActions">A collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> objects to evaluate if the condition is true.</param>
      <param name="elseActions">A collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> objects to evaluate whether the condition is false.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.Active">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Workflow.Activities.Rules.Rule" /> should be evaluated.</summary>
      <returns>true if the Rule should be evaluated; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.Rule" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.Rule" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.Condition">
      <summary>Gets or sets a <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> for the <see cref="T:System.Workflow.Activities.Rules.Rule" /> to evaluate.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> for the <see cref="T:System.Workflow.Activities.Rules.Rule" /> to evaluate.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.Description">
      <summary>Gets or sets a description of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</summary>
      <returns>A description of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.ElseActions">
      <summary>Gets a collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> classes to perform in the ELSE case.</summary>
      <returns>A collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> to perform in the ELSE case.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.Equals(System.Object)">
      <summary>Determines whether this instance of <see cref="T:System.Workflow.Activities.Rules.Rule" /> and the object passed as the parameter have the same value.</summary>
      <returns>true if the current object and <paramref name="obj" /> are the same; otherwise, false.</returns>
      <param name="obj">The object to compare the current object to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Rule.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.Rule" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.Priority">
      <summary>Gets or sets a value that indicates the order in which a <see cref="T:System.Workflow.Activities.Rules.Rule" /> should be run.</summary>
      <returns>A value that indicates the order in which a <see cref="T:System.Workflow.Activities.Rules.Rule" /> should be run.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.ReevaluationBehavior">
      <summary>Gets or sets a value indicating whether a <see cref="T:System.Workflow.Activities.Rules.Rule" /> can be reevaluated.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleReevaluationBehavior" /> indicating whether the <see cref="T:System.Workflow.Activities.Rules.Rule" /> can be reevaluated.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Rule.ThenActions">
      <summary>Gets a collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> classes to perform in the THEN case.</summary>
      <returns>A collection of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> classes to perform in the THEN case.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleAction">
      <summary>Represents an abstract class that defines an action to be executed if the associated <see cref="P:System.Workflow.Activities.Rules.Rule.Condition" /> evaluates to true, for <see cref="P:System.Workflow.Activities.Rules.Rule.ThenActions" />, or false, for <see cref="P:System.Workflow.Activities.Rules.Rule.ElseActions" />. This class must be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAction.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAction.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAction.Execute(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>Executes the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> using the specified <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> instance.</summary>
      <param name="context">The runtime state that the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> is executing in.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAction.GetSideEffects(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Returns the fields and properties updated by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A collection of strings that represent the names of fields and properties that are changed by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> that was used previously in a call to <see cref="M:System.Workflow.Activities.Rules.RuleAction.Validate(System.Workflow.Activities.Rules.RuleValidation)" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAction.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Verifies that the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> is configured correctly and has no errors.</summary>
      <returns>true to show that the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> validated correctly and has no errors; otherwise, false.</returns>
      <param name="validator">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleActionTrackingEvent">
      <summary>Contains the name, instance ID, and condition result of a rule that has been evaluated.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleActionTrackingEvent.ConditionResult">
      <summary>Gets the result of the condition evaluation.</summary>
      <returns>The result of the rule condition: true or false.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleActionTrackingEvent.RuleName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Activities.Rules.Rule" /> that caused the <see cref="T:System.Workflow.Activities.Rules.RuleActionTrackingEvent" /> to be raised.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.Rule" /> that caused one or more actions to execute.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleAnalysis">
      <summary>Stores the fields and properties read by a condition or written to by an action. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAnalysis.#ctor(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> class.</summary>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <param name="forWrites">A Boolean value that indicates whether analysis is being done for writes (in the case of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> objects) or reads (in the case of <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> objects).</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAnalysis.AddSymbol(System.String)">
      <summary>Adds the fields and properties used by an expression as symbols to the <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> instance.</summary>
      <param name="symbol">A string that represents the path to a field or property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleAnalysis.ForWrites">
      <summary>Gets a value that indicates whether analysis is being done for writes or reads. </summary>
      <returns>true if analysis is being done for writes (in the case of <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> objects); otherwise, false if the analysis is being done for reads (in the case of <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> objects).</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAnalysis.GetSymbols">
      <summary>Returns the list of symbols from the <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> instance. </summary>
      <returns>The list of symbols for the <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleAttribute">
      <summary>Represents the base class for custom <see cref="T:System.Workflow.Activities.Rules.Rule" /> attributes. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleAttribute.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleAttribute" /> class.</summary>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleAttributeTarget">
      <summary>Specifies whether the path in a <see cref="T:System.Workflow.Activities.Rules.RuleReadAttribute" /> or <see cref="T:System.Workflow.Activities.Rules.RuleWriteAttribute" /> is for a method parameter, or this.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleAttributeTarget.Parameter">
      <summary>Specifies the path is an absolute path beginning with a parameter name, which optionally can be followed by a path to an inner member.</summary>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleAttributeTarget.This">
      <summary>Specifies the path is a relative or absolute path, beginning with the token this.</summary>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleChainingBehavior">
      <summary>Specifies the forward chaining behavior of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleChainingBehavior.None">
      <summary>Indicates that no chaining is performed. Each rule is executed exactly once.</summary>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleChainingBehavior.UpdateOnly">
      <summary>Indicates that chaining is performed if executed actions explicitly specify it using a <see cref="T:System.Workflow.Activities.Rules.RuleUpdateAction" />.</summary>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleChainingBehavior.Full">
      <summary>Indicates that chaining is performed when fields or properties are modified by actions, <see cref="T:System.Workflow.Activities.Rules.RuleWriteAttribute" /> are specified for methods called by actions, or when a <see cref="T:System.Workflow.Activities.Rules.RuleUpdateAction" /> is performed.</summary>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleCondition">
      <summary>Base type for <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> and any custom conditions created by users.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleCondition.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> class. </summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleCondition.Clone">
      <summary>When overridden in a derived class, creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> that is identical to this instance</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleCondition.Evaluate(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>When overridden in a derived class, evaluates the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />.</summary>
      <returns>true to show that the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> evaluated to true; otherwise, false.</returns>
      <param name="execution">The runtime context the rule is running in. </param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleCondition.GetDependencies(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>When overridden in a derived class, gets the dependencies for the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />.</summary>
      <returns>A list of symbols that represent entities read by the condition.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> that was used previously in a call to <see cref="M:System.Workflow.Activities.Rules.RuleAction.Validate(System.Workflow.Activities.Rules.RuleValidation)" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleCondition.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleCondition.OnRuntimeInitialized">
      <summary>Called when all properties have been given values. After this call, no properties can be modified.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleCondition.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>When overridden in a derived class, verifies that the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> is configured correctly and has no errors.</summary>
      <returns>true to show that the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> has no errors; otherwise, false.</returns>
      <param name="validation">The instance of <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> that is used to manage the validation of rules and rule conditions.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleConditionChangeAction">
      <summary>Represents an abstract base class from which all dynamic update notifications of changes to <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />s must be derived.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionChangeAction.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleConditionChangeAction" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleConditionChangeAction.ConditionName">
      <summary>When overridden in a derived class, gets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to be changed.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to be changed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionChangeAction.ValidateChanges(System.Workflow.ComponentModel.Activity)">
      <summary>When overridden in a derived class, verifies that the <see cref="T:System.Workflow.Activities.Rules.RuleConditionChangeAction" /> is configured correctly and has no errors.</summary>
      <returns>A new <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" />.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> changes are occurring in.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleConditionCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> classes defined on the workflow. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionCollection.#ctor">
      <summary>Initializes a new instance of a <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionCollection.Add(System.Workflow.Activities.Rules.RuleCondition)">
      <summary>Adds a <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to the <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" />.</summary>
      <param name="item">The <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to add to the <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" />.</param>
      <exception cref="T:System.Data.ReadOnlyException">The <see cref="T:System.Workflow.Activities.Rules.Rule" /> is runtime initialized.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionCollection.Diff(System.Object,System.Object)">
      <summary>Determines the difference between two <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" /> classes.</summary>
      <returns>A list of <see cref="T:System.Workflow.ComponentModel.WorkflowChangeAction" /> classes that account for the differences between the <paramref name="originalDefinition" /> and the <paramref name="changedDefinition" />.</returns>
      <param name="originalDefinition">The original <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" />.</param>
      <param name="changedDefinition">The <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" /> with proposed changes.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleConditionReference">
      <summary>Represents a <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> in the conditions collection and enables you to programmatically evaluate the condition.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleConditionReference" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleConditionReference.ConditionName">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to evaluate.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> to evaluate.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionReference.Evaluate(System.Workflow.ComponentModel.Activity,System.IServiceProvider)">
      <summary>Evaluates the underlying <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />.</summary>
      <returns>true if the condition evaluates to true; otherwise, false. </returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this condition.</param>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> for this condition evaluation.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleConditionReference.InitializeProperties">
      <summary>Sets member properties based on the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> that <see cref="T:System.Workflow.Activities.Rules.RuleConditionReference" /> points to.</summary>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleDefinitions">
      <summary>Represents the root of the .rules files and contains all the <see cref="P:System.Workflow.Activities.Rules.RuleDefinitions.RuleSets" /> and <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />s associated with a workflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleDefinitions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleDefinitions" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleDefinitions.Conditions">
      <summary>Gets the collection of rule conditions in the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleConditionCollection" /> that contains all the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" />s in the workflow.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleDefinitions.Diff(System.Object,System.Object)">
      <summary>Determines the difference between <see cref="P:System.Workflow.Activities.Rules.RuleDefinitions.Conditions" /> and the <see cref="P:System.Workflow.Activities.Rules.RuleDefinitions.RuleSets" /> in the original definition and the changed definition.</summary>
      <returns>A list of <see cref="T:System.Workflow.ComponentModel.WorkflowChangeAction" /> classes that differentiate the <paramref name="originalDefinition" /> from the <paramref name="changedDefinition" />.</returns>
      <param name="originalDefinition">The original rule definition.</param>
      <param name="changedDefinition">The new rule definition.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleDefinitions.RuleDefinitionsProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="T:System.Workflow.Activities.Rules.RuleDefinitions" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleDefinitions.RuleSets">
      <summary>Gets the collection of <see cref="P:System.Workflow.Activities.Rules.RuleDefinitions.RuleSets" /> in the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" /> that contains all the <see cref="P:System.Workflow.Activities.Rules.RuleDefinitions.RuleSets" /> in the workflow.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleEngine">
      <summary>Used to perform <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> evaluation.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEngine.#ctor(System.Workflow.Activities.Rules.RuleSet,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEngine" /> class with a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to evaluate and a rule type to create a new instance of <see cref="M:System.Workflow.Activities.Rules.RuleValidation.#ctor(System.Type,System.Workflow.ComponentModel.Compiler.ITypeProvider)" /> to use for rule expression validation.</summary>
      <param name="ruleSet">Specifies the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to evaluate.</param>
      <param name="objectType">Specifies the <see cref="T:System.Type" /> of the <see cref="T:System.Workflow.Activities.Rules.Rule" /> used to create a new instance of <see cref="M:System.Workflow.Activities.Rules.RuleValidation.#ctor(System.Type,System.Workflow.ComponentModel.Compiler.ITypeProvider)" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEngine.#ctor(System.Workflow.Activities.Rules.RuleSet,System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEngine" /> class with a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to evaluate using <see cref="T:System.Workflow.Activities.Rules.RuleValidation" />.</summary>
      <param name="ruleSet">Specifies the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to evaluate.</param>
      <param name="validation">Specifies the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> used to validate rule expressions.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEngine.Execute(System.Object)">
      <summary>Executes the current object using <see cref="M:System.Workflow.Activities.Rules.RuleExecution.#ctor(System.Workflow.Activities.Rules.RuleValidation,System.Object)" />.</summary>
      <param name="thisObject">The current object to be executed.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEngine.Execute(System.Object,System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Executes the current <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> against the object instance (which, in this case, is likely an <see cref="T:System.Workflow.ComponentModel.Activity" />).</summary>
      <param name="thisObject">The current object to be executed.</param>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the current activity. </param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleEvaluationException">
      <summary>Represents the base class for all exceptions caused by rule evaluation issues.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationException" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationException" /> class with serialized data.</summary>
      <param name="serializeInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationException" /> class, with a specified error message and a reference to the inner <see cref="T:System.Exception" /> that is the cause of this <see cref="T:System.Exception" />.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="ex">The <see cref="T:System.Exception" /> that is the cause of the current <see cref="T:System.Exception" /> . If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current <see cref="T:System.Exception" /> is raised in a catch block that handles the inner <see cref="T:System.Exception" /> . </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException">
      <summary>The exception that is thrown when attempting to apply an operator to incompatible operands when you evaluate a rule.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException" /> class with serialized data.</summary>
      <param name="serializeInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializeInfo" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is a null reference (Visual Basic Nothing) or the <see cref="P:System.Exception.HResult" /> is zero.</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException" /> with a specified error message.</summary>
      <param name="message">A string that contains the error message to associate with this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException" /> class with a specified error message and a reference to the inner <see cref="T:System.Exception" /> that is the cause of this <see cref="T:System.Exception" />.</summary>
      <param name="message">A message that describes the current exception.</param>
      <param name="ex">The <see cref="T:System.Exception" /> instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.#ctor(System.String,System.Type,System.CodeDom.CodeBinaryOperatorType,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException" /> class with the details of the compatibility violation.</summary>
      <param name="message">A message that describes the current <see cref="T:System.Exception" /> .</param>
      <param name="left">The <see cref="T:System.Type" /> appearing on the left side of the operator.</param>
      <param name="op">The <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> representing the operator whose compatibility is violated.</param>
      <param name="right">The <see cref="T:System.Type" /> appearing on the right side of the operator.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.#ctor(System.String,System.Type,System.CodeDom.CodeBinaryOperatorType,System.Type,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException" /> class with the details of the compatibility violation. This includes the <see cref="P:System.Exception.InnerException" />.</summary>
      <param name="message">A message that describes the current <see cref="T:System.Exception" /> .</param>
      <param name="left">The <see cref="T:System.Type" /> appearing on the left side of the operator.</param>
      <param name="op">The <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> representing the operator whose compatibility is violated.</param>
      <param name="right">The <see cref="T:System.Type" /> appearing on the right side of the operator.</param>
      <param name="ex">The <see cref="T:System.Exception" /> instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.Left">
      <summary>Gets or sets the <see cref="T:System.Type" /> of the left argument of the expression causing the exception.</summary>
      <returns>The <see cref="T:System.Type" /> of the left argument of the expression causing the exception.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.Operator">
      <summary>Gets or sets the <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> representing the operator which caused the exception. </summary>
      <returns>The <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> representing the operator which caused the exception. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException.Right">
      <summary>Gets or sets the <see cref="T:System.Type" /> of the right argument of the expression causing the exception.</summary>
      <returns>The <see cref="T:System.Type" /> of the right argument of the expression causing the exception.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleException">
      <summary>Represents the base class for all exceptions caused by evaluation or validation of rules.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleException" /> class with serialized data.</summary>
      <param name="serializeInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleException" /> class, with a specified error message and a reference to the inner <see cref="T:System.Exception" /> that is the cause of this <see cref="T:System.Exception" />.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="ex">The <see cref="T:System.Exception" /> that is the cause of the current <see cref="T:System.Exception" /> . If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current <see cref="T:System.Exception" /> is raised in a catch block that handles the inner <see cref="T:System.Exception" /> . </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleExecution">
      <summary>Stores state information while executing <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> or <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> classes.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExecution.#ctor(System.Workflow.Activities.Rules.RuleValidation,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> class by using the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> and the object to be executed.</summary>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> that guarantees that the expression is configured correctly.</param>
      <param name="thisObject">The current object to be executed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validation" /> or <paramref name="thisObject" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExecution.#ctor(System.Workflow.Activities.Rules.RuleValidation,System.Object,System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> class by using the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" />, the object to be executed, and the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the current activity.</summary>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> that guarantees that the expression is configured correctly.</param>
      <param name="thisObject">The current object to be executed.</param>
      <param name="activityExecutionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the current Activity.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExecution.Activity">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Activity" /> in which the rule is being executed.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> in which the rule is being executed.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExecution.ActivityExecutionContext">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the current Activity.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the current Activity.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExecution.Halted">
      <summary>Gets or sets a value that indicates whether the rule execution was stopped.</summary>
      <returns>true if the rule execution was stopped; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExecution.ThisObject">
      <summary>Gets the current object to be executed.</summary>
      <returns>The object to be executed.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExecution.Validation">
      <summary>Gets or sets the validation instance for the expression to execute.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> for the expression to execute.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleExpressionCondition">
      <summary>Defines the condition definition behind a <see cref="T:System.Workflow.Activities.Rules.RuleConditionReference" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> class by using a specified code expression.</summary>
      <param name="expression">The <see cref="T:System.CodeDom.CodeExpression" /> to initialize the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> with.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> class by using a specified name.</summary>
      <param name="conditionName">The name of the condition to evaluate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conditionName" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> class by using a specified name and code expression.</summary>
      <param name="conditionName">The name of the condition to evaluate.</param>
      <param name="expression">The <see cref="T:System.CodeDom.CodeExpression" /> to initialize the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> with.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.Equals(System.Object)">
      <summary>Determines whether two object instances are equal.</summary>
      <returns>true if the object instances are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.Evaluate(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>Evaluates the expression.</summary>
      <returns>true if the expression evaluates to true; otherwise, false.</returns>
      <param name="execution">Instance of the runtime context that <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" /> is running in.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExpressionCondition.Expression">
      <summary>Gets or sets the expression condition to evaluate. </summary>
      <returns>The expression condition to evaluate.</returns>
      <exception cref="T:System.Data.ReadOnlyException">The activity running the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is runtime initialized.</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.GetDependencies(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Gets the dependencies for the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionCondition" />.</summary>
      <returns>A list of dependencies.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExpressionCondition.Name">
      <summary>Gets or sets the name of the condition to evaluate.</summary>
      <returns>The name of the condition to evaluate.</returns>
      <exception cref="T:System.Data.ReadOnlyException">The activity running the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is runtime initialized.</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.OnRuntimeInitialized">
      <summary>Called when all properties have been given values. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.ToString">
      <summary>Returns the string value of the expression condition. </summary>
      <returns>The string value of the expression condition. An empty string if the expression condition is null.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionCondition.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Verifies that the expression is configured correctly and has no errors.</summary>
      <returns>true if the expression has no errors; otherwise, false.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validator" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleExpressionInfo">
      <summary>An instance of this class is returned by the <see cref="M:System.Workflow.Activities.Rules.IRuleExpression.Validate(System.Workflow.Activities.Rules.RuleValidation,System.Boolean)" /> method of an <see cref="T:System.Workflow.Activities.Rules.IRuleExpression" /> expression.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionInfo.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionInfo" /> class.</summary>
      <param name="expressionType">The <see cref="T:System.Type" /> of the expression.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExpressionInfo.ExpressionType">
      <summary>Gets the type of the expression.</summary>
      <returns>The <see cref="T:System.Type" /> of the expression.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleExpressionResult">
      <summary>Abstract class that is the base for classes representing the result of custom expressions based on the <see cref="T:System.Workflow.Activities.Rules.IRuleExpression" /> interface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionResult.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleExpressionResult" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleExpressionResult.Value">
      <summary>When overridden in a derived class, gets or sets the result of the expression.</summary>
      <returns>The result of the expression.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleExpressionWalker">
      <summary>Propagates the current behavior in the expression to child nodes. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionWalker.AnalyzeUsage(System.Workflow.Activities.Rules.RuleAnalysis,System.CodeDom.CodeExpression,System.Boolean,System.Boolean,System.Workflow.Activities.Rules.RulePathQualifier)">
      <summary>Identifies the fields and properties used by an expression and adds these as symbols to the <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> instance.</summary>
      <param name="analysis">The <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" /> instance that stores symbols representing the properties and fields used by rule conditions and actions.</param>
      <param name="expression">The expression being executed.</param>
      <param name="isRead">true if fields and properties read by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> are to be added to <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" />; otherwise, false.</param>
      <param name="isWritten">true if fields and properties written by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> are to be added to <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" />; otherwise, false.</param>
      <param name="qualifier">The path of a field or property determined up to this point.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="analysis" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Clone(System.CodeDom.CodeExpression)">
      <summary>Creates a deep copy of the child nodes of the current <see cref="T:System.CodeDom.CodeExpression" />.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression" /> that is identical to this instance.</returns>
      <param name="originalExpression">The expression that the clone is based on.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Decompile(System.Text.StringBuilder,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>Decompiles the child nodes of the expression into string form.</summary>
      <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder" /> that contains the mutable string of characters.</param>
      <param name="expression">The current <see cref="T:System.CodeDom.CodeExpression" />.</param>
      <param name="parentExpression">The parent <see cref="T:System.CodeDom.CodeExpression" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Evaluate(System.Workflow.Activities.Rules.RuleExecution,System.CodeDom.CodeExpression)">
      <summary>Evaluates the expression and all child expressions.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleExpressionResult" /> that indicates the result of the expression evaluation.</returns>
      <param name="execution">The <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> to execute the expression.</param>
      <param name="expression">The <see cref="T:System.CodeDom.CodeExpression" /> to evaluate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="execution" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Match(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>Compares the current expression and child nodes to another expression to determine whether they are equal.</summary>
      <returns>true if the expressions are equal; otherwise, false.</returns>
      <param name="firstExpression">The first <see cref="T:System.CodeDom.CodeExpression" /> in the comparison.</param>
      <param name="secondExpression">The second <see cref="T:System.CodeDom.CodeExpression" /> in the comparison.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleExpressionWalker.Validate(System.Workflow.Activities.Rules.RuleValidation,System.CodeDom.CodeExpression,System.Boolean)">
      <summary>Verifies that the expression and child nodes are configured correctly and has no errors.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleExpressionInfo" /> for the <see cref="T:System.CodeDom.CodeExpression" />.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <param name="expression">The <see cref="T:System.CodeDom.CodeExpression" /> to evaluate.</param>
      <param name="isWritten">true if fields and properties written by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> are stored in by <see cref="T:System.Workflow.Activities.Rules.RuleAnalysis" />; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validation" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="expression" /> is null and the errors collection on the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> object is a null reference (Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleHaltAction">
      <summary>Causes the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to stop executing and returns control back to the calling method.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleHaltAction" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.Equals(System.Object)">
      <summary>Determines whether two object instances are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.Execute(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>Executes the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> using the specified <see cref="T:System.Workflow.Activities.Rules.RuleExecution" />.</summary>
      <param name="context">The <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> context used to execute the <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.GetSideEffects(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Returns the fields and properties updated by the <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A list of the fields and properties changed by the <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.NoteSince <see cref="T:System.Workflow.Activities.Rules.RuleHaltAction" /> does not have parameters, the return value will always be an empty list.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.ToString">
      <summary>Returns the string "Halt".</summary>
      <returns>The string "Halt".</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleHaltAction.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Returns true, no validation is performed.</summary>
      <returns>Always returns true.</returns>
      <param name="validator">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleInvokeAttribute">
      <summary>Indicates that a method is invoked by a condition. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleInvokeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleInvokeAttribute" /> class.</summary>
      <param name="methodInvoked">The method invoked by the rule.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleInvokeAttribute.MethodInvoked">
      <summary>Gets the method invoked by the condition.</summary>
      <returns>The method invoked by the condition.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleLiteralResult">
      <summary>Represents the literal result of a custom expression written using <see cref="T:System.Workflow.Activities.Rules.IRuleExpression" />. </summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleLiteralResult.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleLiteralResult" /> class.</summary>
      <param name="literal">The literal result of the expression.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleLiteralResult.Value">
      <summary>Gets the result of the expression.  </summary>
      <returns>The result of the expression.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Workflow.Activities.Rules.RuleLiteralResult.Value" /> is set.</exception>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RulePathQualifier">
      <summary>Builds the path of a field or property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RulePathQualifier.#ctor(System.String,System.Workflow.Activities.Rules.RulePathQualifier)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RulePathQualifier" /> class.</summary>
      <param name="name">The name of the current entity in the path.</param>
      <param name="next">The next entity, or the field or property, for the path. Null if <paramref name="name" /> is the name of the property or field at the root of the path.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RulePathQualifier.Name">
      <summary>Gets the name of the current field or property.</summary>
      <returns>The name of the current entity in the path.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RulePathQualifier.Next">
      <summary>Gets the next field or property for the path.</summary>
      <returns>The next entity, or the field or property, for the path.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleReadAttribute">
      <summary>Indicates that a property is read by a <see cref="T:System.Workflow.Activities.Rules.Rule" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleReadAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleReadAttribute" /> class.</summary>
      <param name="path">The logical path of the member read by the condition.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleReadAttribute.#ctor(System.String,System.Workflow.Activities.Rules.RuleAttributeTarget)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleReadAttribute" /> class.</summary>
      <param name="path">The logical path of the member read by the condition.</param>
      <param name="target">
        <see cref="T:System.Workflow.Activities.Rules.RuleAttributeTarget" /> enumeration; specifies whether the path is relative to this or to a method parameter.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleReadWriteAttribute">
      <summary>Represents the base class for the <see cref="T:System.Workflow.Activities.Rules.RuleReadAttribute" /> and <see cref="T:System.Workflow.Activities.Rules.RuleWriteAttribute" /> classes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleReadWriteAttribute.#ctor(System.String,System.Workflow.Activities.Rules.RuleAttributeTarget)">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleReadWriteAttribute" /> class.</summary>
      <param name="path">The path to target of the attribute.</param>
      <param name="target">
        <see cref="T:System.Workflow.Activities.Rules.RuleAttributeTarget" /> enumeration value that determines how to use path to find target.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleReadWriteAttribute.Path">
      <summary>Gets the path to the target of the attribute.</summary>
      <returns>A <see cref="T:System.String" /> containing the path.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleReadWriteAttribute.Target">
      <summary>Gets the <see cref="T:System.Workflow.Activities.Rules.RuleAttributeTarget" /> enumeration value that determines how to use path to find target.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleAttributeTarget" /> enumeration value that determines how to use the specified path to find target.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleReevaluationBehavior">
      <summary>Specifies whether a <see cref="T:System.Workflow.Activities.Rules.Rule" /> can be reevaluated.</summary>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleReevaluationBehavior.Never">
      <summary>Indicates that the <see cref="T:System.Workflow.Activities.Rules.Rule" /> is executed once.  A condition may be evaluated several times until the rule executes actions, but the rule will never be evaluated again.</summary>
    </member>
    <member name="F:System.Workflow.Activities.Rules.RuleReevaluationBehavior.Always">
      <summary>Indicates that the <see cref="T:System.Workflow.Activities.Rules.Rule" /> can be reevaluated multiple times. <see cref="F:System.Workflow.Activities.Rules.RuleReevaluationBehavior.Always" /> is the default value.</summary>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleSet">
      <summary>Contains a collection of <see cref="T:System.Workflow.Activities.Rules.Rule" /> classes along with the semantics for forward-chaining execution of those rules. A <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> can be executed directly in code or using the <see cref="T:System.Workflow.Activities.PolicyActivity" /> activity.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> class by using the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> class by using the name and description of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
      <param name="description">A description of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSet.ChainingBehavior">
      <summary>Gets or sets the forward chaining behavior for the <see cref="T:System.Workflow.Activities.Rules.Rule" /> classes in the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleChainingBehavior" /> for the <see cref="T:System.Workflow.Activities.Rules.Rule" /> classes in the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSet.Description">
      <summary>Gets or sets a description of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>A description of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.Equals(System.Object)">
      <summary>Determines whether two object instances are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.Execute(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>Evaluates the <see cref="T:System.Workflow.Activities.Rules.Rule" /> instances in the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <param name="ruleExecution">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with the <see cref="T:System.Workflow.ComponentModel.Activity" /> that is invoking the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ruleExecution" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The cached <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> cannot be validated.</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSet.Name">
      <summary>Gets and sets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSet.Rules">
      <summary>Gets a list of <see cref="T:System.Workflow.Activities.Rules.Rule" /> classes in the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>A list of <see cref="T:System.Workflow.Activities.Rules.Rule" /> classes in the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSet.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Validates the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> attributes and the <see cref="T:System.Workflow.Activities.Rules.Rule" /> classes in the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> of errors found during validation.</returns>
      <param name="validation">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> to manage the validation process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="validation" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleSetChangeAction">
      <summary>Represents an abstract base class from which all dynamic update notifications of changes to a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> must be derived. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetChangeAction.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetChangeAction" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSetChangeAction.RuleSetName">
      <summary>When overridden in a derived class, gets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to be changed.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to be changed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetChangeAction.ValidateChanges(System.Workflow.ComponentModel.Activity)">
      <summary>When overridden in a derived class, verifies that the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is configured correctly and has no errors.</summary>
      <returns>A new <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" />.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> changes are occurring in.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleSetCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> classes defined in a workflow.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetCollection.Add(System.Workflow.Activities.Rules.RuleSet)">
      <summary>Overloaded. Adds a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to the collection</summary>
      <param name="item">The <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> to add to the <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetCollection.Diff(System.Object,System.Object)">
      <summary>Determines the difference between two <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" />.</summary>
      <returns>A list of <see cref="T:System.Workflow.ComponentModel.WorkflowChangeAction" /> classes that differentiate the <paramref name="originalDefinition" /> from the <paramref name="changedDefinition" />.</returns>
      <param name="originalDefinition">The original definition of the <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" />.</param>
      <param name="changedDefinition">The changed definition of the <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleSetReference">
      <summary>Holds the name of a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> in the <see cref="T:System.Workflow.Activities.Rules.RuleSetCollection" /> on the workflow. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetReference" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetReference.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetReference" /> class using the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <param name="ruleSetName">The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> that the activity evaluates.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSetReference.RuleSetName">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> that the activity evaluates.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> that the activity evaluates.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleSetValidationException">
      <summary>Represents the exception thrown when processing cannot continue because a rule set cannot be validated.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetValidationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetValidationException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetValidationException" /> class from serialized data.</summary>
      <param name="serializeInfo">Reference to the object that holds the data needed to deserialize the exception.</param>
      <param name="context">Provides the means for deserializing the exception data.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetValidationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetValidationException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetValidationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetValidationException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="ex">The inner exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetValidationException.#ctor(System.String,System.Workflow.ComponentModel.Compiler.ValidationErrorCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleSetValidationException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="errors">Collection of validation errors that occurred while validating a rule set.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleSetValidationException.Errors">
      <summary>Gets a collection of validation errors that occurred while validating a rule set.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the validation errors.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleSetValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</summary>
      <param name="info">Reference to the object that holds the data needed to serialize and deserialize the exception.</param>
      <param name="context">Provides the means for serializing the exception data.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleStatementAction">
      <summary>Specifies a property or field to update or a method to run using the CodeDom types.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleStatementAction" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleStatementAction" /> class using a <see cref="T:System.CodeDom.CodeExpression" />.</summary>
      <param name="codeDomExpression">A <see cref="T:System.CodeDom.CodeExpression" /> specifying the action to perform.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.#ctor(System.CodeDom.CodeStatement)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleStatementAction" /> class using a <see cref="T:System.CodeDom.CodeStatement" />.</summary>
      <param name="codeDomStatement">A <see cref="T:System.CodeDom.CodeStatement" /> specifying the action to perform.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleStatementAction.CodeDomStatement">
      <summary>Gets or sets the code statement specifying the action to perform.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeStatement" /> specifying the action to perform.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.Equals(System.Object)">
      <summary>Determines whether two object instances are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.Execute(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>Executes the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> using the specified <see cref="T:System.Workflow.Activities.Rules.RuleExecution" />.</summary>
      <param name="context">The <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> context used to execute the <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.GetSideEffects(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Returns the fields and properties updated by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A list of the fields and properties changed by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.ToString">
      <summary>Returns the string value of the action. </summary>
      <returns>The string value of the action.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleStatementAction.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Verifies that the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> is configured correctly and has no errors.</summary>
      <returns>true if the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> had no errors; otherwise, false.</returns>
      <param name="validator">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleUpdateAction">
      <summary>Indicates that a rule is updating a variable, in order to cause reevaluation of affected rules.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleUpdateAction" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleUpdateAction" /> class.</summary>
      <param name="path">A string that represents the name of the field or property changed. The character "/" is used as a separator. </param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.Clone">
      <summary>Creates a deep copy of the current <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> that is identical to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.Equals(System.Object)">
      <summary>Determines whether two object instances are equal.</summary>
      <returns>true if the objects are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.Execute(System.Workflow.Activities.Rules.RuleExecution)">
      <summary>Executes the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> using the specified <see cref="T:System.Workflow.Activities.Rules.RuleExecution" />.</summary>
      <param name="context">The <see cref="T:System.Workflow.Activities.Rules.RuleExecution" /> context used to execute the <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.GetSideEffects(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Returns the fields and properties updated by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</summary>
      <returns>A list of the fields and properties changed by a <see cref="T:System.Workflow.Activities.Rules.RuleAction" />.</returns>
      <param name="validation">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleUpdateAction.Path">
      <summary>Gets or sets the path of the <see cref="T:System.Workflow.Activities.Rules.RuleUpdateAction" />.</summary>
      <returns>The path of the <see cref="T:System.Workflow.Activities.Rules.RuleUpdateAction" />.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.ToString">
      <summary>Returns a string that indicates the field or property that the <see cref="T:System.Workflow.Activities.Rules.Rule" /> is updating.</summary>
      <returns>The string "Update &lt;<see cref="P:System.Workflow.Activities.Rules.RuleUpdateAction.Path" />&gt;".</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleUpdateAction.Validate(System.Workflow.Activities.Rules.RuleValidation)">
      <summary>Verifies that the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> is configured correctly and has no errors.</summary>
      <returns>true if the <see cref="T:System.Workflow.Activities.Rules.RuleAction" /> has no errors; otherwise, false.</returns>
      <param name="validator">The <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> to manage the validation process.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleValidation">
      <summary>Validates expression conditions. </summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleValidation.#ctor(System.Type,System.Workflow.ComponentModel.Compiler.ITypeProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> class using the <see cref="T:System.Type" /> of the <see cref="T:System.Workflow.Activities.Rules.Rule" />. </summary>
      <param name="thisType">The type of the object that this <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> or <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> will be executed against. Normally it is the workflow, but it can be any valid type.</param>
      <param name="typeProvider">An optional <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> implementation that is used to determine what <see cref="T:System.Type" />s are available in the condition. If one is not specified, only types in the assembly specified by the activity and any assemblies it references are available.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="thisType" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleValidation.#ctor(System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" /> class using the specified <see cref="T:System.Workflow.ComponentModel.Activity" /> and the type provider. </summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> in which context the <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> or <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is run. In most cases, this will be the workflow object.</param>
      <param name="typeProvider">An optional <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> implementation that is used to determine what <see cref="T:System.Type" />s are available in the condition. If one is not specified, only types in the assembly specified by the activity and any assemblies it references are available.</param>
      <param name="checkStaticType">If true, the types used by any <see cref="T:System.Workflow.Activities.Rules.RuleCondition" /> or <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> that are validated with this object must be in the restricted list of types allowed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleValidation.Errors">
      <summary>Gets the errors associated with the <see cref="T:System.Workflow.Activities.Rules.RuleValidation" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> objects created during rule validation.</returns>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleValidation.ExpressionInfo(System.CodeDom.CodeExpression)">
      <summary>Determines the type of the code expression.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.Rules.RuleExpressionInfo" /> for the object. This identifies the type of the object.</returns>
      <param name="expression">The <see cref="T:System.CodeDom.CodeExpression" /> to evaluate.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleValidation.PopParentExpression">
      <summary>Removes and returns the parent expressions at the top of the <see cref="T:System.Collections.Stack" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleValidation.PushParentExpression(System.CodeDom.CodeExpression)">
      <summary>Inserts an object at the top of the <see cref="T:System.Collections.Stack" />. </summary>
      <returns>true if the <paramref name="newParent" /> was added to the stack; otherwise, false.</returns>
      <param name="newParent">The <see cref="T:System.CodeDom.CodeExpression" /> to add to the <see cref="T:System.Collections.Stack" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newParent" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.RuleValidation.ThisType">
      <summary>Gets the type of object.</summary>
      <returns>The <see cref="T:System.Type" /> of the object.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.RuleWriteAttribute">
      <summary>Indicates that a property or field is written by the method or property that this attribute is applied to. This information is used by the rules engine to determine dependencies between rules. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleWriteAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleWriteAttribute" /> class. </summary>
      <param name="path">The field or property that is on the same class as the method or property that this attribute is applied to.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.RuleWriteAttribute.#ctor(System.String,System.Workflow.Activities.Rules.RuleAttributeTarget)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.RuleWriteAttribute" /> class. </summary>
      <param name="path">The field or property that is on the same class as the method or property that this attribute is applied to.</param>
      <param name="target">
        <see cref="T:System.Workflow.Activities.Rules.RuleAttributeTarget" /> enumeration value that determines how to use path to find target.</param>
    </member>
    <member name="T:System.Workflow.Activities.Rules.UpdatedConditionAction">
      <summary>Represents the change to a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> for dynamic updates. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.UpdatedConditionAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.UpdatedConditionAction" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.UpdatedConditionAction.#ctor(System.Workflow.Activities.Rules.RuleCondition,System.Workflow.Activities.Rules.RuleCondition)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.UpdatedConditionAction" /> class, with the existing and new conditions of the change.</summary>
      <param name="conditionDefinition">The condition being replaced.</param>
      <param name="newConditionDefinition">The replacing condition.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conditionDefinition" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newConditionDefinition" /> is a null reference (Nothing).</exception>
      <exception cref="T:System.ArgumentException">The name of the <paramref name="conditionDefinition" /> is not equal to the name of <paramref name="newConditionDefinition." /></exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.UpdatedConditionAction.ConditionDefinition">
      <summary>Gets or sets the condition being replaced by this action.</summary>
      <returns>The condition being replaced by this action.</returns>
      <exception cref="T:System.ArgumentNullException">Trying to set this property to a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.UpdatedConditionAction.ConditionName">
      <summary>Gets the name of the condition be replaced.</summary>
      <returns>The name of the condition to be replaced.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.UpdatedConditionAction.NewConditionDefinition">
      <summary>Gets or sets the condition which will replace the existing condition.</summary>
      <returns>The condition which will replace the existing condition.</returns>
      <exception cref="T:System.ArgumentNullException">Trying to set this property to a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.UpdatedRuleSetAction">
      <summary>Represents the change to a <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> for dynamic updates. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.UpdatedRuleSetAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.UpdatedRuleSetAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.Rules.UpdatedRuleSetAction.#ctor(System.Workflow.Activities.Rules.RuleSet,System.Workflow.Activities.Rules.RuleSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.UpdatedRuleSetAction" /> class by using the original and the updated <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> classes.</summary>
      <param name="originalRuleSetDefinition">The original <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
      <param name="updatedRuleSetDefinition">The updated <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</param>
      <exception cref="T:System.ArgumentNullException">The RuleSetDefinition or updatedRuleSetDefinition is null</exception>
      <exception cref="T:System.ArgumentException">The names of the two RuleSets are not the same</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.UpdatedRuleSetAction.OriginalRuleSetDefinition">
      <summary>Gets or sets the original <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The original <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
      <exception cref="T:System.ArgumentNullException">The original <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.UpdatedRuleSetAction.RuleSetName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.Rules.UpdatedRuleSetAction.UpdatedRuleSetDefinition">
      <summary>Gets or sets the updated <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</summary>
      <returns>The updated <see cref="T:System.Workflow.Activities.Rules.RuleSet" />.</returns>
      <exception cref="T:System.ArgumentNullException">The updated <see cref="T:System.Workflow.Activities.Rules.RuleSet" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.Rules.Design.RuleConditionDialog">
      <summary>This dialog is normally used by the activities <see cref="T:System.Workflow.Activities.IfElseBranchActivity" />, <see cref="T:System.Workflow.Activities.WhileActivity" />, <see cref="T:System.Workflow.Activities.ConditionedActivityGroup" />, and <see cref="T:System.Workflow.Activities.ReplicatorActivity" /> to edit declarative conditions. However, if you want to use conditions outside of these activities (for example, edit a condition for use outside of a workflow completely), you can use this dialog to perform the editing of the condition.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleConditionDialog.#ctor(System.Type,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Design.RuleConditionDialog" /> class with the specified activity type, the type provider, and the expression.</summary>
      <param name="activityType">The type of the object that this condition is executed against. Normally it is the workflow, but can be any valid type.</param>
      <param name="typeProvider">An optional <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> implementation that is used to determine what types are available in the condition. If one is not specified, only types in the assembly specified by <paramref name="activityType" /> and any assemblies it references is available.</param>
      <param name="expression">The initial <see cref="T:System.CodeDom.CodeExpression" /> to be displayed.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleConditionDialog.#ctor(System.Workflow.ComponentModel.Activity,System.CodeDom.CodeExpression)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Design.RuleConditionDialog" /> class.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that this condition is executed against. Typically it is the workflow, but it can be any valid activity.</param>
      <param name="expression">The initial <see cref="T:System.CodeDom.CodeExpression" /> to be displayed.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleConditionDialog.Dispose(System.Boolean)">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.Activities.Rules.Design.RuleConditionDialog" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Design.RuleConditionDialog.Expression">
      <summary>Gets the <see cref="T:System.CodeDom.CodeExpression" /> as modified by the dialog box user.</summary>
      <returns>The <see cref="T:System.CodeDom.CodeExpression" /> as modified by the dialog box user.</returns>
    </member>
    <member name="T:System.Workflow.Activities.Rules.Design.RuleSetDialog">
      <summary>This dialog is normally used by <see cref="T:System.Workflow.Activities.PolicyActivity" /> to edit rule sets. However, if you want to use a rule set outside of this activity (for example, edit a rule set for use outside of a workflow), you can use this dialog to perform the editing of the rule set.</summary>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleSetDialog.#ctor(System.Type,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Workflow.Activities.Rules.RuleSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Design.RuleSetDialog" /> class.</summary>
      <param name="activityType">The type of the object that this condition is executed against. Normally it is the workflow, but can be any valid type.</param>
      <param name="typeProvider">An optional <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> implementation that is used to determine what Types are available in the condition. If one is not specified, only types in the assembly specified by <paramref name="activityType" /> and any assemblies it references are available.</param>
      <param name="ruleSet">The initial <see cref="T:System.Workflow.Activies.Rules.RuleSet" /> to be displayed.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleSetDialog.#ctor(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.Rules.RuleSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.Rules.Design.RuleSetDialog" /> class.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that this <see cref="T:System.Workflow.Activies.Rules.RuleSet" /> is executed against. Typically it is the workflow (as used by <see cref="T:System.Workflow.Activities.PolicyActivity" />), but it can be any valid activity.</param>
      <param name="ruleSet">The initial <see cref="T:System.Workflow.Activies.Rules.RuleSet" /> to be displayed.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleSetDialog.Dispose(System.Boolean)">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.Activities.Rules.Design.RuleSetDialog" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Workflow.Activities.Rules.Design.RuleSetDialog.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
      <summary>Processes a command key.</summary>
      <returns>true if the keystroke was processed and accessed by the control; false to allow further processing.</returns>
      <param name="msg">A <see cref="T:System.Windows.Forms.Message" />, passed by reference that represents the Win32 message to process.</param>
      <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</param>
    </member>
    <member name="P:System.Workflow.Activities.Rules.Design.RuleSetDialog.RuleSet">
      <summary>Gets the <see cref="T:System.Workflow.Activies.Rules.RuleSet" /> as confirmed by the dialog box user.</summary>
      <returns>The <see cref="T:System.Workflow.Activies.Rules.RuleSet" /> as confirmed by the dialog box user.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Xaml.Hosting.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xaml.Hosting</name>
  </assembly>
  <members>
    <member name="T:System.Xaml.Hosting.XamlBuildProvider">
      <summary>A build provider for server side XAML (.xamlx) documents.</summary>
    </member>
    <member name="M:System.Xaml.Hosting.XamlBuildProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Hosting.XamlBuildProvider" /> class. </summary>
    </member>
    <member name="M:System.Xaml.Hosting.XamlBuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)">
      <summary>Returns a type generated by the build provider from the virtual path.</summary>
      <returns>The type that is generated by the build provider for the virtual path.</returns>
      <param name="results">The compilation results for the build provider's virtual path.</param>
    </member>
    <member name="M:System.Xaml.Hosting.XamlBuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)">
      <summary>Returns a value that indicates actions required when a virtual path is built.</summary>
      <returns>The <see cref="T:System.Web.Compilation.BuildProviderResultFlags" /> value that indicates actions required after the virtual path is built.</returns>
      <param name="results">The compilation results for the build provider's virtual path.</param>
    </member>
    <member name="T:System.Xaml.Hosting.Configuration.HandlerElement">
      <summary>Manages the HTTP handler property of a XAML element in a configuration file.</summary>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Hosting.Configuration.HandlerElement" /> class.</summary>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElement.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Hosting.Configuration.HandlerElement" /> class with specified HTTP handler and XAML root element type names.</summary>
      <param name="xamlType">The name of the XAML root element in a configuration file.</param>
      <param name="handlerType">The name of the HTTP handler property of an XAML element in a configuration file.</param>
    </member>
    <member name="P:System.Xaml.Hosting.Configuration.HandlerElement.HttpHandlerType">
      <summary>Gets or sets the type name of the HTTP handler property of an XAML element in a configuration file.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Xaml.Hosting.Configuration.HandlerElement.XamlRootElementType">
      <summary>Gets or sets the type name of the root XAML element in a configuration file.</summary>
      <returns>
        <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Xaml.Hosting.Configuration.HandlerElementCollection">
      <summary>Manages a collection of configuration file handler elements.</summary>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElementCollection.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" /> class with the string comparer setting initialized.</summary>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElementCollection.Add(System.Xaml.Hosting.Configuration.HandlerElement)">
      <summary>Adds a handler configuration element to a <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" />.</summary>
      <param name="handlerElement">An HTTP handler configuration element.</param>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElementCollection.Clear">
      <summary>Removes all elements from a <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" />. </summary>
    </member>
    <member name="P:System.Xaml.Hosting.Configuration.HandlerElementCollection.CollectionType">
      <summary>Gets the type of the HTTP handler element collection.</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationElementCollectionType" />.</returns>
    </member>
    <member name="P:System.Xaml.Hosting.Configuration.HandlerElementCollection.Item(System.Int32)">
      <summary>Gets the HTTP handler element at the specified index location in the handler element collection.</summary>
      <returns>
        <see cref="T:System.Xaml.Hosting.Configuration.HandlerElement" />.</returns>
      <param name="index">An index location in a handler element collection. </param>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElementCollection.Remove(System.String)">
      <summary>Removes the specified XAML root element from a <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" />.</summary>
      <param name="xamlRootElementType">The XAML root element to remove from the collection.</param>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElementCollection.Remove(System.Xaml.Hosting.Configuration.HandlerElement)">
      <summary>Removes the specified handler configuration element from a <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" />.</summary>
      <param name="handlerElement">The HTTP handler element to remove from the collection.</param>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.HandlerElementCollection.RemoveAt(System.Int32)">
      <summary>Removes an element from a <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" /> at the specified index location.</summary>
      <param name="index">The index location of the handler element to remove from the collection. </param>
    </member>
    <member name="T:System.Xaml.Hosting.Configuration.XamlHostingSection">
      <summary>Gets an empty collection of HTTP handler elements. </summary>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.XamlHostingSection.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Xaml.Hosting.Configuration.XamlHostingSection" /> class.</summary>
    </member>
    <member name="P:System.Xaml.Hosting.Configuration.XamlHostingSection.Handlers">
      <summary>Gets an empty collection of HTTP handler elements.</summary>
      <returns>
        <see cref="T:System.Xaml.Hosting.Configuration.HandlerElementCollection" />.</returns>
    </member>
    <member name="T:System.Xaml.Hosting.Configuration.XamlHostingSectionGroup">
      <summary>Gets the XAML hosting section of a configuration file.</summary>
    </member>
    <member name="M:System.Xaml.Hosting.Configuration.XamlHostingSectionGroup.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Xaml.Hosting.Configuration.XamlHostingSectionGroup" /> class.</summary>
    </member>
    <member name="P:System.Xaml.Hosting.Configuration.XamlHostingSectionGroup.XamlHostingSection">
      <summary>Gets the XAML hosting section of a configuration file.</summary>
      <returns>
        <see cref="T:System.Xaml.Hosting.Configuration.XamlHostingSection" />.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Workflow.ComponentModel.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Workflow.ComponentModel</name>
  </assembly>
  <members>
    <member name="T:System.Workflow.ComponentModel.Activity">
      <summary>Represents the fundamental building block of workflows. <see cref="T:System.Workflow.ComponentModel.Activity" /> is the base class for all activities. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> class, while initializing the <see cref="P:System.Workflow.ComponentModel.Activity.Name" />. </summary>
      <param name="name">The name to associate with this instance. The name must conform to the variable naming conventions for the programming language that is being used in the Workflow project, and must be unique in the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that represents the <see cref="T:System.Guid" /> of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that is associated with the <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Called by the workflow runtime to cancel execution of an activity that is currently executing.</summary>
      <returns>The status at the end of the operation that determines whether the activity remains in the canceling state or transitions to the closed state.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that contains the instance to cancel.</param>
    </member>
    <member name="E:System.Workflow.ComponentModel.Activity.Canceling">
      <summary>Occurs when the activity execution is canceled. </summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.CancelingEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.ComponentModel.Activity.Canceling" /> event.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Clone">
      <summary>Creates a deep copy of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>A deep copy of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.Activity.Closed">
      <summary>Occurs when an <see cref="T:System.Workflow.ComponentModel.Activity" /> has completed execution.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.ClosedEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.ComponentModel.Activity.Closed" /> event.</summary>
    </member>
    <member name="E:System.Workflow.ComponentModel.Activity.Compensating">
      <summary>Occurs when running a compensation method on the <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.CompensatingEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.ComponentModel.Activity.Compensating" /> event.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.Description">
      <summary>Gets or sets the user-defined description of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The text description of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.Enabled">
      <summary>Gets or sets a value that indicates whether this instance is enabled for execution and validation.</summary>
      <returns>true if enabled for execution and validation; false otherwise.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Called by the workflow runtime to execute an activity. </summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of the run task, which determines whether the activity remains in the executing state, or transitions to the closed state.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> to associate with this <see cref="T:System.Workflow.ComponentModel.Activity" /> and execution.</param>
    </member>
    <member name="E:System.Workflow.ComponentModel.Activity.Executing">
      <summary>Occurs when the <see cref="T:System.Workflow.ComponentModel.Activity" /> is run.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.ExecutingEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.ComponentModel.Activity.Executing" /> event, which occurs when the activity is executed.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.ExecutionResult">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionResult" /> of the last attempt to run this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionResult" /> of the last attempt to run this instance.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.ExecutionStatus">
      <summary>Gets the current <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of this instance.</summary>
      <returns>The current <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of this instance.</returns>
    </member>
    <member name="E:System.Workflow.ComponentModel.Activity.Faulting">
      <summary>Occurs when an exception is raised during the running of the instance.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.FaultingEvent">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that represents the <see cref="E:System.Workflow.ComponentModel.Activity.Faulting" /> event.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)">
      <summary>Returns the instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> whose name is requested from the set of all activities running under the root activity of this instance, which is within the workflow.</summary>
      <returns>The instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> whose name is requested from the set of all activities running under the root activity of this instance.</returns>
      <param name="activityQualifiedName">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityQualifiedID" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)">
      <summary>Returns the instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> whose name is requested from the set of all activities under the root the <see cref="T:System.Workflow.ComponentModel.Activity" /> of this instance if the second parameter is false and under the current <see cref="T:System.Workflow.ComponentModel.Activity" /> if the second parameter is true.</summary>
      <returns>The instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> whose name is requested from the set of all activities under the root the <see cref="T:System.Workflow.ComponentModel.Activity" /> of this instance if the second parameter is false and under the current <see cref="T:System.Workflow.ComponentModel.Activity" /> if the second parameter is true.</returns>
      <param name="activityQualifiedName">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> to search for.</param>
      <param name="withinThisActivityOnly">The value that indicates whether to limit the search to activities contained within this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityQualifiedID" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)">
      <summary>Called when an exception is raised within the context of the execution of this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> that results from an attempt to cancel this instance.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
      <param name="exception">The <see cref="T:System.Exception" /> that caused this fault.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Initialize(System.IServiceProvider)">
      <summary>Called by the workflow runtime to initialize an activity during the construction of a new workflow instance. This method is called during the construction of a dynamic <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides the initialization service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)">
      <summary>Subscribes an <see cref="T:System.EventHandler" /> and invokes that delegate.</summary>
      <param name="handler">The <see cref="T:System.EventHandler" /> to be invoked.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> to associate with this event</param>
      <typeparam name="T">The specified type.</typeparam>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener{``0},``0)">
      <summary>Subscribes an <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> and invokes that delegate.</summary>
      <param name="eventListener">The <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> to be invoked.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> to associate with this event</param>
      <typeparam name="T">The specified type.</typeparam>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.IsDynamicActivity">
      <summary>Gets information about whether the activity is executing within the default <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the workflow instance.</summary>
      <returns>Returns false if the activity is executing within the default <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the workflow instance, otherwise returns true.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)">
      <summary>Loads an instance of an <see cref="T:System.Workflow.ComponentModel.Activity" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <returns>An instance of an <see cref="T:System.Workflow.ComponentModel.Activity" /> from a <see cref="T:System.IO.Stream" />.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> from which to load.</param>
      <param name="outerActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the context for the deserialized <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)">
      <summary>Loads an instance of an <see cref="T:System.Workflow.ComponentModel.Activity" /> from a <see cref="T:System.IO.Stream" /> using the custom <see cref="T:System.Runtime.Serialization.IFormatter" /> for deserialization.</summary>
      <returns>An instance of an <see cref="T:System.Workflow.ComponentModel.Activity" /> from a <see cref="T:System.IO.Stream" />.</returns>
      <param name="stream">The target <see cref="T:System.IO.Stream" /> of the load operation.</param>
      <param name="outerActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the context for the deserialized <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="formatter">The <see cref="T:System.Runtime.Serialization.IFormatter" /> used to read from the <see cref="T:System.IO.Stream" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formatter" /> is a null reference (Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.Name">
      <summary>Gets or sets the name of this instance. This name must conform to the variable naming convention of the programming language that is being used in the Workflow project.</summary>
      <returns>The name of this instance.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.OnActivityExecutionContextLoad(System.IServiceProvider)">
      <summary>Called by the workflow runtime whenever an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> is loaded. For example, this method is called during the creation of an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> as well as every time the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> is reincarnated when a workflow instance is loaded from persistent storage.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides the service.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.OnActivityExecutionContextUnload(System.IServiceProvider)">
      <summary>Called by the workflow runtime whenever an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> is unloaded. For example, this method is called during completion of an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> as well as every time the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> is unloaded when a workflow instance is persisted.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides the service.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)">
      <summary>Called by the workflow runtime as part of the activity's transition to the closed state.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides the service.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.Parent">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> that contains this <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> that is a parent to this <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.QualifiedName">
      <summary>Gets the qualified name of the activity. Qualified activity names are always unique in a workflow instance.</summary>
      <returns>The qualified name of the instance.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)">
      <summary>Raises an <see cref="F:System.Reflection.MemberTypes.Event" /> associated with the specified dependency property.</summary>
      <param name="dependencyEvent">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associated with this <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
      <param name="sender">The <see cref="T:System.Object" /> source of the <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> associated with the <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)">
      <summary>Raises the event associated with the referenced <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <param name="dependencyEvent">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associated with this <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
      <param name="sender">The <see cref="T:System.Object" /> source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> associated with the <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
      <typeparam name="T">The specified type.</typeparam>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})">
      <summary>Registers the specified <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> for the status change event.</summary>
      <param name="dependencyProp">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to register.</param>
      <param name="activityStatusChangeListener">The object that implements the Event Listener interface for this registration.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dependencyProp" /> is not one of the following:<see cref="F:System.Workflow.ComponentModel.Activity.ExecutingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.CancelingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.ClosedEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.CompensatingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.FaultingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.StatusChangedEvent" /></exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)">
      <summary>Writes the <see cref="T:System.Workflow.ComponentModel.Activity" /> to a <see cref="T:System.IO.Stream" /> for persistence.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to which to save the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
      <summary>Writes the <see cref="T:System.Workflow.ComponentModel.Activity" /> to a <see cref="T:System.IO.Stream" /> for persistence using the custom <see cref="T:System.Runtime.Serialization.IFormatter" /> provided for serialization.</summary>
      <param name="stream">The target <see cref="T:System.IO.Stream" /> of the save operation.</param>
      <param name="formatter">The binary or custom <see cref="T:System.Runtime.Serialization.IFormatter" /> for the serialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formatter" /> is a null reference (Nothing).</exception>
      <exception cref="T:System.InvalidOperationException">This instance is in design mode.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.Activity.StatusChanged">
      <summary>Occurs when the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of a running <see cref="T:System.Workflow.ComponentModel.Activity" /> changes.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.StatusChangedEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.ComponentModel.Activity.StatusChanged" /> event.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.ToString">
      <summary>Provides a string that represents this instance.</summary>
      <returns>This instance.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.TrackData(System.Object)">
      <summary>Informs the run-time tracking infrastructure of pending tracking information.</summary>
      <param name="userData">
        <see cref="T:System.Object" /> that contains the tracking information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userData" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)">
      <summary>Informs the run-time tracking infrastructure of pending tracking information.</summary>
      <param name="userDataKey">The key to the user data that has changed.</param>
      <param name="userData">
        <see cref="T:System.Object" /> that contains the tracking information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userData" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Uninitialize(System.IServiceProvider)">
      <summary>When overridden in a derived class, provides un-initialization by a service provider for the activity. </summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides the service.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})">
      <summary>Un-registers the specified <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> for the status change event.</summary>
      <param name="dependencyProp">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to un-register.</param>
      <param name="activityStatusChangeListener">The object that implements the Event Listener interface for this registration.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dependencyProp" /> is not one of the following:<see cref="F:System.Workflow.ComponentModel.Activity.ExecutingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.CancelingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.ClosedEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.CompensatingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.FaultingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.StatusChangedEvent" /></exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.WorkflowInstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> associated with the instance.</summary>
      <returns>The <see cref="T:System.Guid" /> associated with the instance.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityBind">
      <summary>Binds an activity's property to a property, field, indexer, method, event, or another activity's property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> class with the <paramref name="name" /> parameter.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> class with <paramref name="name" /> and <paramref name="path" /> parameters.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="path">The path of the new <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.GetRuntimeValue(System.Workflow.ComponentModel.Activity)">
      <summary>Gets the <see cref="T:System.Object" /> representing the run-time value of this <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</summary>
      <returns>The <see cref="T:System.Object" /> representing the run-time value of this <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns this bind.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.GetRuntimeValue(System.Workflow.ComponentModel.Activity,System.Type)">
      <summary>Gets the <see cref="T:System.Object" /> representing the run-time value of this <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</summary>
      <returns>The <see cref="T:System.Object" /> representing the run-time value of this <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns this bind.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of the object if a <see cref="T:System.Delegate" />; otherwise a null reference (Nothing in Visual Basic). <paramref name="activity" /> is null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityBind.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> points to.</summary>
      <returns>The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> points to.</returns>
      <exception cref="T:System.Data.ReadOnlyException">Occurs when you attempt to set this value when the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> is not in design mode.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityBind.Path">
      <summary>Gets or sets the path for a member of the target activity. The value can use dotted notation to indicate a path to a nested value. For example, a path of "A.B.C" indicates that the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> is to a field or property named 'C', which is a member of the field or property 'B', which in turn is a field or property 'A', which is a member of the target activity.</summary>
      <returns>The path of the data item of interest on the chosen <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <exception cref="T:System.Data.ReadOnlyException">Occurs when you attempt to set this value when the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> is not in design mode.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.ProvideValue(System.IServiceProvider)">
      <summary>Returns the current instance of this class.</summary>
      <returns>The current instance of this class.</returns>
      <param name="provider">An <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.SetRuntimeValue(System.Workflow.ComponentModel.Activity,System.Object)">
      <summary>Sets the run-time value.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> owning this bind.</param>
      <param name="value">The <see cref="T:System.Object" /> to set the run-time value to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.ToString">
      <summary>Calculates and returns a combination of the <see cref="P:System.Workflow.ComponentModel.ActivityBind.Name" /> and <see cref="P:System.Workflow.ComponentModel.ActivityBind.Path" /> property strings.</summary>
      <returns>A combination of the <see cref="P:System.Workflow.ComponentModel.ActivityBind.Name" /> and <see cref="P:System.Workflow.ComponentModel.ActivityBind.Path" /> property strings.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityBind.UserData">
      <summary>Gets an <see cref="T:System.Collections.IDictionary" /> of user data relating to this instance.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> of user data relating to this instance.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityChangeAction">
      <summary>Represents a proposed change to a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> within a running workflow instance. This class must be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityChangeAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityChangeAction" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityChangeAction.#ctor(System.Workflow.ComponentModel.CompositeActivity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityChangeAction" /> class, initializing the associated <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</summary>
      <param name="compositeActivity">The <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> associated with the change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="compositeActivity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityChangeAction.OwnerActivityDottedPath">
      <summary>Gets and sets the <see cref="P:System.Workflow.ComponentModel.ActivityChangeAction.OwnerActivityDottedPath" /> of the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> associated with this instance.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.ActivityChangeAction.OwnerActivityDottedPath" /> of the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityChangeAction.ValidateChanges(System.Workflow.ComponentModel.Activity)">
      <summary>Validates the changes pending on the target activity.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains any <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> resulting from running each <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> defined for the target activity.</returns>
      <param name="contextActivity">The activity to have its changes validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contextActivity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityCollection">
      <summary>Models a strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.#ctor(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityCollection" /> class, initializing an owner <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <param name="owner">The <see cref="T:System.Workflow.ComponentModel.Activity" /> designated as owning this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="owner" /> is not a descendent of <see cref="T:System.Workflow.ComponentModel.Activity" />.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.Add(System.Workflow.ComponentModel.Activity)">
      <summary>Adds the <see cref="T:System.Workflow.ComponentModel.Activity" /> to the <see cref="T:System.Collections.ICollection" />.</summary>
      <param name="item">The <see cref="T:System.Workflow.ComponentModel.Activity" /> to be added to the <see cref="T:System.Collections.ICollection" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.Clear">
      <summary>Removes every <see cref="T:System.Workflow.ComponentModel.Activity" /> from the <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.Contains(System.Workflow.ComponentModel.Activity)">
      <summary>Provides a test for membership of the <see cref="T:System.Workflow.ComponentModel.Activity" /> in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Activity" /> belongs to the <see cref="T:System.Collections.ICollection" />; otherwise, false.</returns>
      <param name="item">The <see cref="T:System.Workflow.ComponentModel.Activity" /> being tested for membership.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.Count">
      <summary>Gets the number of members of the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>The number of members of the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.GetEnumerator">
      <summary>Implements an enumeration interface to the <see cref="T:System.Collections.ICollection" />.  </summary>
      <returns>Returns an enumerator that can iterate through the <see cref="T:System.Collections.ReadOnlyCollectionBase" /> instance. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.IndexOf(System.Workflow.ComponentModel.Activity)">
      <summary>Gets the index of the <see cref="T:System.Workflow.ComponentModel.Activity" /> in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>The index of the <see cref="T:System.Workflow.ComponentModel.Activity" /> in the <see cref="T:System.Collections.ICollection" />. Otherwise -1 (if <see cref="T:System.Workflow.ComponentModel.Activity" /> is not in the <see cref="T:System.Collections.ICollection" />).</returns>
      <param name="item">The activity for which to acquire the index. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.Insert(System.Int32,System.Workflow.ComponentModel.Activity)">
      <summary>Inserts the item at the index in the <see cref="T:System.Collections.ICollection" />. </summary>
      <param name="index">Zero-based index of the collection at which to insert the item.</param>
      <param name="item">The <see cref="T:System.Workflow.ComponentModel.Activity" /> to be inserted into the collection.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.Item(System.Int32)">
      <summary>Gets or sets the activity in the <see cref="T:System.Collections.ICollection" /> based on the index.</summary>
      <returns>A member activity of the <see cref="T:System.Collections.ICollection" />, whose index in the <see cref="T:System.Collections.ICollection" /> was specified in the call.</returns>
      <param name="index">Zero-based index into the <see cref="T:System.Collections.ICollection" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList" /> is read-only.</exception>
      <exception cref="T:System.Exception">An attempt to set to an <see cref="T:System.Object" /> that is not an <see cref="T:System.Workflow.ComponentModel.Activity" />.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.Item(System.String)">
      <summary>Gets the activity in the <see cref="T:System.Collections.ICollection" /> based on the string which is a unique key.</summary>
      <returns>A member <see cref="T:System.Workflow.ComponentModel.Activity" /> of the <see cref="T:System.Collections.ICollection" />; the key in the <see cref="T:System.Collections.ICollection" /> which was specified in the call.</returns>
      <param name="key">Unique identifier for activity in the <see cref="T:System.Collections.ICollection" />.</param>
    </member>
    <member name="E:System.Workflow.ComponentModel.ActivityCollection.ListChanged">
      <summary>Raised whenever a change is made to the contents of this <see cref="T:System.Collections.ICollection" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.Remove(System.Workflow.ComponentModel.Activity)">
      <summary>Removes the activity specified in the call from the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>true if the operation succeeded; otherwise, false.</returns>
      <param name="item">The activity to remove from the <see cref="T:System.Collections.ICollection" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Workflow.ComponentModel.Activity" /> in the <see cref="T:System.Collections.ICollection" /> at the specified <paramref name="index" />.</summary>
      <param name="index">Position in a zero-based index to remove the activity from the collection.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#Add(System.Workflow.ComponentModel.Activity)">
      <summary>Adds an object to the <see cref="T:System.Collections.IList" /> at the end of the <see cref="T:System.Collections.IList" />.</summary>
      <param name="item"></param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Clears all activities from the <see cref="T:System.Collections.IList" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#Contains(System.Workflow.ComponentModel.Activity)">
      <summary>Gets a value that indicates whether the <see cref="T:System.Object" /> is a member of the collection.</summary>
      <returns>true if value is in the collection; otherwise, false.</returns>
      <param name="item"></param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#CopyTo(System.Workflow.ComponentModel.Activity[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The <see cref="T:System.Array" /> which is the target of the copy operation.</param>
      <param name="arrayIndex"></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination array.</exception>
      <exception cref="T:System.InvalidCastException">The type <see cref="T:System.Workflow.ComponentModel.Activity" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.IList" /> is read-only. </summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#Remove(System.Workflow.ComponentModel.Activity)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />. </summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />. </returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />. </param>
      <exception cref="T:System.NotSupportedException">The ICollection is read-only.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection. </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{T}#IndexOf(System.Workflow.ComponentModel.Activity)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />. </summary>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1. </returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{T}#Insert(System.Int32,System.Workflow.ComponentModel.Activity)">
      <summary>Inserts an <see cref="T:System.Object" /> into the <see cref="T:System.Collections.IList" /> at the zero-based index specified.</summary>
      <param name="index">The zero-based position of the insertion.</param>
      <param name="item"></param>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The <see cref="T:System.Object" /> at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The ICollection is read-only.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified <paramref name="index" />.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The ICollection is read-only.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)"></member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Collections.Generic.ICollection`1" /> is synchronized, that is thread-safe.</summary>
      <returns>true if access to the <see cref="T:System.Collections.Generic.ICollection`1" /> is synchronized, that is, thread-safe; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the underlying <see cref="T:System.Collections.IList" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Add(System.Object)"></member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Clear"></member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Contains(System.Object)"></member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Gets the zero-based index of the <see cref="T:System.Object" /> in the underlying activities collection.</summary>
      <returns>The zero-based index of the <see cref="T:System.Object" /> in the underlying activities collection.</returns>
      <param name="value">The <see cref="T:System.Object" /> to be indexed.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Insert(System.Int32,System.Object)"></member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsReadOnly"></member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Item(System.Int32)"></member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only. <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityCollectionChangeAction">
      <summary>Represents an enumeration of the permissible actions which may be performed on an <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />, which typically represents the collection of all child activities of a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityCollectionChangeAction.Add">
      <summary>The enumerator corresponding to adding a new <see cref="T:System.Workflow.ComponentModel.Activity" /> to the <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityCollectionChangeAction.Remove">
      <summary>The enumerator corresponding to removing an <see cref="T:System.Workflow.ComponentModel.Activity" /> from the <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityCollectionChangeAction.Replace">
      <summary>The enumerator corresponding to replacing an <see cref="T:System.Workflow.ComponentModel.Activity" /> in the <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs">
      <summary>Represents the information needed by an event handler to perform custom processing whenever the contents of an <see cref="T:System.Workflow.ComponentModel.ActivityCollection" /> changes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.#ctor(System.Int32,System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Object,System.Workflow.ComponentModel.ActivityCollectionChangeAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> class. </summary>
      <param name="index">The index of the change within the subject <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />.</param>
      <param name="removedItems">A strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" /> containing each removed <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="addedItems">A strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" /> containing each added <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="owner">The <see cref="T:System.Object" /> which originated the event.</param>
      <param name="action">The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeAction" /> corresponding to the event.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.#ctor(System.Int32,System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.Activity,System.Object,System.Workflow.ComponentModel.ActivityCollectionChangeAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> class. </summary>
      <param name="index">The index of the change within the subject <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />.</param>
      <param name="removedActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> which was removed from the collection.</param>
      <param name="addedActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> which was added to the collection.</param>
      <param name="owner">The <see cref="T:System.Object" /> which originated the event.</param>
      <param name="action">The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeAction" /> corresponding to the event.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.Action">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeAction" /> representing the type of change that occurred.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeAction" /> representing the type of change that occurred.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.AddedItems">
      <summary>Gets a strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" /> containing each added <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>A strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" /> containing each added <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.Index">
      <summary>Gets the index of the change originating the event.</summary>
      <returns>The index of the change originating the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.Owner">
      <summary>Gets the <see cref="T:System.Object" /> which originated the event.</summary>
      <returns>The <see cref="T:System.Object" /> which originated the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.RemovedItems">
      <summary>Gets a strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" /> containing each removed <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>A strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" /> containing each removed <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityCondition">
      <summary>Represents an abstract class for an expression, which evaluates to a Boolean. This class must be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCondition.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCondition.Evaluate(System.Workflow.ComponentModel.Activity,System.IServiceProvider)">
      <summary>Evaluates the underlying condition. </summary>
      <returns>The Boolean resulting from evaluating the underlying expression.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this condition.</param>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> for this condition evaluation.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityExecutionContext">
      <summary>Represents the execution environment of an <see cref="T:System.Workflow.ComponentModel.Activity" />. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Activity" /> that currently executes within this execution context.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated to this execution context.</returns>
      <exception cref="T:System.ObjectDisposedException">This instance is marked for garbage collection.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.CancelActivity(System.Workflow.ComponentModel.Activity)">
      <summary>Called by a composite activity to schedule the cancellation of a child activity. The workflow runtime disallows cancellation of a child activity that is not in the <see cref="E:System.Workflow.ComponentModel.Activity.Executing" /> state.</summary>
      <param name="activity">The canceled <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="activity" /> is not a valid child of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />. This means that either the argument is equal to the associated <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" /> or that the argument is not in the commented state and is a child of the <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" /> associated with this <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="activity" /> is not in the <see cref="E:System.Workflow.ComponentModel.Activity.Executing" /> state.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.CloseActivity">
      <summary>Indicates to the workflow runtime that the currently executing activity should transition to the <see cref="E:System.Workflow.ComponentModel.Activity.Closed" /> state.</summary>
      <exception cref="T:System.InvalidOperationException">The status of the associated <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" /> is not equal to <see cref="E:System.Workflow.ComponentModel.Activity.Executing" /> or <see cref="E:System.Workflow.ComponentModel.Activity.Canceling" /> or <see cref="E:System.Workflow.ComponentModel.Activity.Compensating" /> or <see cref="E:System.Workflow.ComponentModel.Activity.Closed" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The disposed <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid">
      <summary>Gets the ContextID of the associated <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The ContextID of the associated <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionContext.CurrentExceptionProperty">
      <summary>Represents an exception that has occurred during the execution of the workflow instance. This property has a value only when an activity is in the faulting state.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity(System.Workflow.ComponentModel.Activity)">
      <summary>Called by a composite activity to schedule the execution of a child activity. The workflow runtime disallows execution of a child activity that is not in the initialized state.</summary>
      <param name="activity">The executed <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="activity" /> is not a valid child of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />. This means that either the argument is equal to the associated <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" /> or that the argument is not in the commented state and is a child of the <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" /> associated with this <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</exception>
      <exception cref="T:System.InvalidOperationException">The status is neither initialized nor <see cref="E:System.Workflow.ComponentModel.Activity.Closed" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> has been disposed.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionContext.ExecutionContextManager">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContextManager" /> associated with this instance.</summary>
      <returns>the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContextManager" /> associated with this instance.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.GetService``1">
      <summary>Returns a service provider of the specified <see cref="T:System.Type" />.</summary>
      <returns>A service provider <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" />.</returns>
      <typeparam name="T">The specified type for which the provider is to be returned.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> has been disposed.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.GetService(System.Type)">
      <summary>Returns a service of the specified type.</summary>
      <returns>A service <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of the service.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> has been disposed.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.TrackData(System.Object)">
      <summary>Invokes the track method for the associated <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" />.</summary>
      <param name="userData">An object that specifies the data to track.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="userData" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">If the <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this instance is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.TrackData(System.String,System.Object)">
      <summary>Invokes the track method for the associated <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" />.</summary>
      <param name="userDataKey">The member of <paramref name="userData" /> to track.</param>
      <param name="userData">The data to track.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="userData" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">If the <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this instance is a null reference (Nothing).</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityExecutionContextManager">
      <summary>Allows a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> to create and manage execution contexts for its child activities. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContextManager.CompleteExecutionContext(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Marks an execution context as completed.</summary>
      <param name="childContext">The designated <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="childContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="childContext" /> is not contained in this instance's <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContextManager.ExecutionContexts" />.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContextManager.CompleteExecutionContext(System.Workflow.ComponentModel.ActivityExecutionContext,System.Boolean)">
      <summary>Marks an execution context as completed.</summary>
      <param name="childContext">The designated <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</param>
      <param name="forcePersist">Boolean that indicates whether the completed context will be persisted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="childContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="childContext" /> is not contained in this instance's <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContextManager.ExecutionContexts" />.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContextManager.CreateExecutionContext(System.Workflow.ComponentModel.Activity)">
      <summary>Creates an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the designated <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The created <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the designated <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <param name="activity">The designated <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="activity" /> is not a valid child activity of owner of this context.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionContextManager.ExecutionContexts">
      <summary>Represents the set of execution contexts, created by the current activity, that have not yet been completed.</summary>
      <returns>The collection that contains the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />(s) associated with this instance.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContextManager.GetExecutionContext(System.Workflow.ComponentModel.Activity)">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with the designated <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with the designated <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <param name="activity">The designated <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContextManager.GetPersistedExecutionContext(System.Guid)">
      <summary>Retrieves the persisted <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> corresponding to the designated <see cref="T:System.Guid" />.</summary>
      <returns>The persisted <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> corresponding to the designated <see cref="T:System.Guid" />.</returns>
      <param name="contextGuid">The designated <see cref="T:System.Guid" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionContextManager.PersistedExecutionContexts">
      <summary>Represents the set of execution contexts, created by the current activity, that have been completed and were persisted upon their completion.</summary>
      <returns>The collection of type <see cref="T:System.Guid" /> that represents the set of all persisted <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityExecutionResult">
      <summary>Enumeration of activity result values that qualifies the state of an <see cref="T:System.Workflow.ComponentModel.Activity" /> that has an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of Closed.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionResult.None">
      <summary>The activity is not in the <see cref="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Closed" /> state.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionResult.Succeeded">
      <summary>The activity has transitioned to the closed state from the executing state.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionResult.Canceled">
      <summary>The activity has transitioned to the closed state from the canceling state.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionResult.Compensated">
      <summary>The activity has transitioned to the closed state from the compensating state.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionResult.Faulted">
      <summary>The activity has transitioned to the closed state from the faulting state.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionResult.Uninitialized">
      <summary>The activity has transitioned to the closed state from the initialized state.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityExecutionStatus">
      <summary>Enumeration of activity status values that correspond to the life cycle of an activity within a running workflow instance.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Initialized">
      <summary>Represents the status when an activity is being initialized.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Executing">
      <summary>Represents the status when an activity is executing.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Canceling">
      <summary>Represents the status when an activity is in the process of being canceled.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Closed">
      <summary>Represents the status when an activity is closed.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Compensating">
      <summary>Represents the status when an activity is compensating.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Faulting">
      <summary>Represents the status when an activity is faulting.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs">
      <summary>Holds information relating to the change of execution status event for an <see cref="T:System.Workflow.ComponentModel.Activity" />. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs.Activity">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Activity" /> that raised the event.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> that raised the event.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs.ExecutionResult">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionResult" /> of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that raised the event corresponding to the value when the event occurred.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionResult" /> of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that raised the event corresponding to the value when the event occurred.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs.ExecutionStatus">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that raised the event corresponding to the value when the event occurred.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that raised the event corresponding to the value when the event occurred.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs.ToString">
      <summary>Provides a <see cref="T:System.String" /> representing the current instance.</summary>
      <returns>A <see cref="T:System.String" /> representing the current instance.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.AddedActivityAction">
      <summary>Represents a proposed addition of an <see cref="T:System.Workflow.ComponentModel.Activity" /> to a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> within a running workflow instance.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.AddedActivityAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.AddedActivityAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.AddedActivityAction.#ctor(System.Workflow.ComponentModel.CompositeActivity,System.Workflow.ComponentModel.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.AddedActivityAction" /> class by using a specified activity and composite activity.</summary>
      <param name="compositeActivity">The <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> that the <see cref="T:System.Workflow.ComponentModel.AddedActivityAction" /> is based on.</param>
      <param name="activityAdded">The <see cref="T:System.Workflow.ComponentModel.Activity" /> added to the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="compositeActivity" /> or <paramref name="activityAdded" /> are a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.AddedActivityAction.AddedActivity">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Activity" /> added to the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> added to the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.AddedActivityAction.Index">
      <summary>Gets the index of the added <see cref="T:System.Workflow.ComponentModel.Activity" /> with the <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> collection of the parent <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</summary>
      <returns>The index value of the new <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.AlternateFlowActivityAttribute">
      <summary>Custom attribute which indicates that the activity supports an alternative flow. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.AlternateFlowActivityAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.AlternateFlowActivityAttribute" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.CancellationHandlerActivity">
      <summary>Represents cancellation logic that can be associated with a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CancellationHandlerActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CancellationHandlerActivity" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CancellationHandlerActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CancellationHandlerActivity" /> class using the name of the activity. </summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CancellationHandlerActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity">
      <summary>Defines a compensatable version of the <see cref="T:System.Workflow.ComponentModel.TransactionScopeActivity" /> activity. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#ICompensatableActivity#Compensate(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Called by the workflow runtime to compensate an activity that is in the <see cref="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Closed" /> state. The activity must have a value of <see cref="F:System.Workflow.ComponentModel.ActivityExecutionResult.Succeeded" /> for its <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionResult" /> property in order to be compensatable. </summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> after operation has been tried. </returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the operation.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.TransactionOptions">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.WorkflowTransactionOptions" /> associated with this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowTransactionOptions" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.CompensateActivity">
      <summary>Triggers the compensation of a completed child <see cref="T:System.Workflow.ComponentModel.Activity" /> that implements the <see cref="T:System.Workflow.ComponentModel.ICompensatableActivity" /> interface. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensateActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompensateActivity" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensateActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompensateActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensateActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.CompensateActivity.TargetActivityName">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> to compensate.</summary>
      <returns>A string that contains the name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> to compensate.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.CompensateActivity.TargetActivityNameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.ComponentModel.CompensateActivity.TargetActivityName" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.CompensationHandlerActivity">
      <summary>Specifies workflow logic that undoes, or compensates for, the successful execution of the associated <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensationHandlerActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompensationHandlerActivity" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensationHandlerActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompensationHandlerActivity" /> class using the name of the activity.</summary>
      <param name="name">A string that contains the name of this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityName" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensationHandlerActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.CompositeActivity">
      <summary>Derivative of <see cref="T:System.Workflow.ComponentModel.Activity" /> that is the base class for all activities that contain other activities. A <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> is responsible for managing the execution of its child activities.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Activity})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> class from an <see cref="T:System.Object" /> which implements the <see cref="T:System.Collections.IEnumerable" /> interface with type <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <param name="children">The <see cref="T:System.Object" /> implementing the <see cref="T:System.Collections.IEnumerable" /> interface with type <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> class, along with the name for that activity.</summary>
      <param name="name">The name for the instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.CompositeActivity.Activities">
      <summary>Gets the object representing the collection, <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />, of all child activities.</summary>
      <returns>
        <see cref="T:System.Workflow.ComponentModel.ActivityCollection" /> of all child activities.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)">
      <summary>Applies the <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> manifest in the parameter to this instance.</summary>
      <param name="workflowChanges">The <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> to apply.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowChanges" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities">
      <summary>Gets or sets a value which controls whether the individual activities within <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> can be modified.</summary>
      <returns>true if the individual activities within <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> can be modified; otherwise false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)">
      <summary>Calls <see cref="M:System.Workflow.ComponentModel.DependencyObject.Dispose(System.Boolean)" /> on this instance, and optionally calls <see cref="M:System.Workflow.ComponentModel.DependencyObject.Dispose" /> on all child activities of this instance.</summary>
      <param name="disposing">true to release both managed and unmanaged resources used by this instance and all child activities of this instance; false to release only the unmanaged resources of this instance.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.CompositeActivity.EnabledActivities">
      <summary>Gets the read-only collection that represents the subset of <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> that are enabled. </summary>
      <returns>The read-only collection that represents the subset of <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> that are enabled.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)">
      <summary>Returns an array that contains all of the currently executing instances of the specified activity.</summary>
      <returns>An array of activity instances that are currently executing.</returns>
      <param name="activity">The specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)">
      <summary>Called when an exception is raised within the context of the execution of this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> that results from an attempt to cancel this instance.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
      <param name="exception">The <see cref="T:System.Exception" /> that caused this fault.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.Initialize(System.IServiceProvider)">
      <summary>Initializes all appropriate child activities of this instance and the specified <see cref="T:System.IServiceProvider" />.</summary>
      <param name="provider">The specified <see cref="T:System.IServiceProvider" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)">
      <summary>Calls when an activity is added.</summary>
      <param name="executionContext">The specified <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</param>
      <param name="addedActivity">The specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addedActivity" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)">
      <summary>Called when an activity is removed.</summary>
      <param name="executionContext">The specified <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</param>
      <param name="removedActivity">The specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)">
      <summary>Called by the workflow runtime engine every time the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this activity is loaded.</summary>
      <param name="provider">An <see cref="T:System.Object" /> that implements <see cref="T:System.IServiceProvider" /> and provides services to this instance.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)">
      <summary>Called by the workflow runtime engine every time the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this activity is unloaded.</summary>
      <param name="provider">An <see cref="T:System.Object" /> that implements <see cref="T:System.IServiceProvider" /> and provides services to this instance.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Performs additional processing when the <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> property changes.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> broadcast by the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Event that occurs before a change being made to the underlying <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" />.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> relating to the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Called after changes have been made to the collection <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> of this instance.</summary>
      <param name="rootContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with this instance.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)">
      <summary>Called by the workflow runtime engine when an activity transitions into the <see cref="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Closed" /> state from the <see cref="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Initialized" /> state.</summary>
      <param name="provider">An <see cref="T:System.Object" /> that implements <see cref="T:System.IServiceProvider" /> and provides services to this instance.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.DependencyObject">
      <summary>The base class for all objects that have dependency properties. This class must be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)">
      <summary>Adds a handler for an event of a <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</summary>
      <param name="dependencyEvent">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />. </param>
      <param name="value">The <see cref="T:System.Object" /> that represents the value of this property. In this case, a <see cref="T:System.Delegate" /> type.</param>
      <exception cref="T:System.ArgumentNullException">Either of the arguments is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">Value is of incorrect <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="dependencyEvent" /> represents a non-event <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyObject.DesignMode">
      <summary>Gets the value that indicates whether this instance is in design or run-time mode.</summary>
      <returns>true if this instance is in design mode; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.Dispose">
      <summary>Releases all the resources used by the <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources and optionally releases the managed resources used by <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.Finalize">
      <summary>Provided as an override to <see cref="M:System.Object.Finalize" /> to clean up any unmanaged resources deterministically.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Provides access to the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> associated with the specific <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> associated with the specific <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)">
      <summary>Retrieves the <see cref="T:System.Object" /> that is the subject of an <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</summary>
      <returns>The <see cref="T:System.Object" /> that is the subject of an <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</returns>
      <param name="bind">The <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bind" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetType" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Gets an array that contains the delegates for the specified <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>An array that contains the delegates for the specified <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
      <param name="dependencyEvent">The specified <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <typeparam name="T">The type of the returned delegates.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyEvent" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dependencyEvent" /> does not correspond to an event.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Provides access to the value of the designated <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>The object that represents the value of the designated <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Provides access to the bound object of a <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> and bypasses the <see cref="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)" /> override.</summary>
      <returns>The bound object of a <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />. This bypasses the <see cref="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)" /> override.</returns>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to get the value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyProperty" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.InitializeProperties">
      <summary>Performs initialization on dependency properties when overridden in a derived class.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Indicates whether the value of a <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is set as a binding. See <see cref="M:System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)" />.</summary>
      <returns>true if set as a binding; otherwise, false.</returns>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to test.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyProperty" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)">
      <summary>Determines whether the metaproperties of this <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> equals the metaproperties of the parameterized <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</summary>
      <returns>true if the metaproperties are equal; otherwise, false.</returns>
      <param name="dependencyObject">The <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> to compare with for equality.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject">
      <summary>Gets the parent <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> in the <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> graph.</summary>
      <returns>The parent <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> in the <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> graph.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)">
      <summary>Removes an <see cref="T:System.EventHandler" /> from an associated <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <param name="dependencyEvent">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="value">The <see cref="T:System.Object" /> that represents the value of this property. In this case, a <see cref="T:System.Delegate" /> type.</param>
      <exception cref="T:System.ArgumentNullException">Either of the arguments is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="dependencyEvent" /> is a metaproperty.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="dependencyEvent" /> is not an event.</exception>
      <exception cref="T:System.Data.ReadOnlyException">The <paramref name="value" /> is a <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> and this instance is not in <see cref="P:System.Workflow.ComponentModel.DependencyObject.DesignMode" />.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Removes a <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> from the <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</summary>
      <returns>true if operation was successful; otherwise, false.</returns>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to be removed.</param>
      <exception cref="T:System.ArgumentNullException">The argument is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)">
      <summary>Sets the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> for the specified <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />. </summary>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="bind">The <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to set to.</param>
      <exception cref="T:System.ArgumentNullException">Either of the arguments is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> associated with the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is read-only.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> associated with the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is metadata.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> associated with the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is not bindable.</exception>
      <exception cref="T:System.InvalidOperationException">This instance is not in <see cref="P:System.Workflow.ComponentModel.DependencyObject.DesignMode" />.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)">
      <summary>Sets the value of the target <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</summary>
      <param name="bind">The <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to set the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bind" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)">
      <summary>Sets the value of a <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />, which is read-only.</summary>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="value">The <see cref="T:System.Object" /> that represents the value.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dependencyProperty" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)">
      <summary>Sets the value of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to the object.</summary>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to be set.</param>
      <param name="value">The <see cref="T:System.Object" /> to set the value to.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)">
      <summary>Sets the value of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to the specified <see cref="T:System.Object" />, bypassing the <see cref="M:System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)" />.</summary>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to be set to the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> that becomes the value of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyProperty" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyObject.Site">
      <summary>Gets or sets a reference to the <see cref="P:System.Workflow.ComponentModel.DependencyObject.Site" /> component of the <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.DependencyObject.Site" /> component of the <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.DependencyObject.System#ComponentModel#IComponent#Disposed">
      <summary>Represents the method that handles the Disposed event of a component.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyObject.UserData">
      <summary>Gets an <see cref="T:System.Collections.IDictionary" /> that associates custom data with this class instance.</summary>
      <returns>A dictionary that acts as an extensibility hook for developers to manipulate <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> declarations for a design tool and associate custom data with individual activity declarations.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.DependencyProperty">
      <summary>A special kind of property that can be defined or attached to a <see cref="T:System.Workflow.ComponentModel.DependencyObject" />. There are three kinds of dependency properties: instance properties, meta properties, and attached properties. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.DefaultMetadata">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> that represents user-defined data for this <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> for this <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.FromName(System.String,System.Type)">
      <summary>Gets the registered <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> based on the <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> and <see cref="P:System.Workflow.ComponentModel.DependencyProperty.OwnerType" />.</summary>
      <returns>The registered <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> based on the <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> and <see cref="P:System.Workflow.ComponentModel.DependencyProperty.OwnerType" />.</returns>
      <param name="propertyName">The <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="ownerType">The required value of <see cref="P:System.Workflow.ComponentModel.DependencyProperty.OwnerType" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.FromType(System.Type)">
      <summary>Creates an <see cref="T:System.Collections.IList" /> of type <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that belong to a specific <see cref="T:System.Type" />.</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that belong to a specific <see cref="T:System.Type" />.</returns>
      <param name="ownerType">The <see cref="T:System.Type" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.IsAttached">
      <summary>Gets the property that indicates whether this <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is associated to a <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> by registration.</summary>
      <returns>true if attached to a <see cref="T:System.Workflow.ComponentModel.DependencyObject" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.IsEvent">
      <summary>Gets the property that indicates whether the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is an event <see cref="T:System.Delegate" />.</summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is an event <see cref="T:System.Delegate" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.Name">
      <summary>Gets the <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />. </summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.OwnerType">
      <summary>Gets the <see cref="T:System.Type" /> of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.PropertyType">
      <summary>Gets the <see cref="T:System.Type" /> of the value stored in the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>The <see cref="T:System.Type" /> of the value stored in the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.Register(System.String,System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</returns>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> of the value that the property can contain.</param>
      <param name="ownerType">Owner <see cref="T:System.Type" /> of the dependency property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.Register(System.String,System.Type,System.Type,System.Workflow.ComponentModel.PropertyMetadata)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</returns>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> of the value the property can contain.</param>
      <param name="ownerType">Owner <see cref="T:System.Type" /> of the dependency property.</param>
      <param name="defaultMetadata">Additional property options.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters. This instance is intended to declare properties that are used on objects other than the objects of owning type.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</returns>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> of the value the property can contain.</param>
      <param name="ownerType">Owner <see cref="T:System.Type" /> of the dependency property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Workflow.ComponentModel.PropertyMetadata)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</returns>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> of the value the property can contain.</param>
      <param name="ownerType">Owner <see cref="T:System.Type" /> of the dependency property.</param>
      <param name="defaultMetadata">Additional property options.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Workflow.ComponentModel.PropertyMetadata,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</returns>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> of the value the property can contain.</param>
      <param name="ownerType">Owner <see cref="T:System.Type" /> of the dependency property.</param>
      <param name="defaultMetadata">Additional property options.</param>
      <param name="validatorType">
        <see cref="T:System.Type" /> of object that implements validation logic for the attached property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associated with the data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.ToString">
      <summary>Overrides the <see cref="T:System.Object" /> method to return the <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> property value.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> property value.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.ValidatorType">
      <summary>Gets the <see cref="T:System.Type" /> implementing validation logic specific to the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>The <see cref="T:System.Type" /> implementing validation logic specific to this instance.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.DependencyPropertyOptions">
      <summary>Represents an enumeration of <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> options.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.DependencyPropertyOptions.Default">
      <summary>Default option. No noted characteristic.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.DependencyPropertyOptions.ReadOnly">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.DependencyPropertyOptions.Optional">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is an optional property.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.DependencyPropertyOptions.Metadata">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> represents metadata.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.DependencyPropertyOptions.NonSerialized">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /></summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.DependencyPropertyOptions.DelegateProperty">
      <summary>This option is used to specify whether or not a property is of type <see cref="T:System.Delegate" />. It is important to use this to disambiguate the delegate properties from events.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.FaultHandlerActivity">
      <summary>Represents the activity class used to handle an <see cref="T:System.Exception" /> of the type specified by the <see cref="P:System.Workflow.ComponentModel.FaultHandlerActivity.FaultType" /> property. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlerActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.FaultHandlerActivity" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlerActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.FaultHandlerActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityName" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.FaultHandlerActivity.Fault">
      <summary>Gets the <see cref="T:System.Exception" /> that is being handled by this <see cref="T:System.Workflow.ComponentModel.FaultHandlerActivity" />.</summary>
      <returns>The <see cref="T:System.Exception" /> associated with this instance. null is returned if the activity did not handle any exceptions.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.FaultHandlerActivity.FaultType">
      <summary>Gets and sets the <see cref="T:System.Type" /> of the exceptions to be handled by the <see cref="T:System.Workflow.ComponentModel.FaultHandlerActivity" />. Exceptions of the type derived from the type specified in <see cref="P:System.Workflow.ComponentModel.FaultHandlerActivity.FaultType" /> are also handled.</summary>
      <returns>The <see cref="T:System.Type" /> of the associated <see cref="T:System.Exception" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.FaultHandlerActivity.FaultTypeProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.ComponentModel.FaultHandlerActivity.FaultType" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlerActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)">
      <summary>Provides a value that indicates whether this instance can filter on the specified <see cref="T:System.Type" />.</summary>
      <returns>true if the <see cref="T:System.Type" /> can be filtered; false otherwise.</returns>
      <param name="type">The specified <see cref="T:System.Type" />.</param>
      <param name="throwOnError">The value that determines whether an exception is raised on an error.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.FaultHandlerActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription">
      <summary>Gets the filter description associated with this instance.</summary>
      <returns>The filter description associated with this instance.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlerActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlerActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denotes the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlerActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.FaultHandlersActivity">
      <summary>Represents a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> that has an ordered list of child activities of type <see cref="T:System.Workflow.ComponentModel.FaultHandlerActivity" />. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlersActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.FaultHandlersActivity" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlersActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.FaultHandlersActivity" /> class using the name of the activity. </summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlersActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.GetValueOverride">
      <summary>Allows a custom override of the <see cref="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)" /> logic associated with a dependency property that is defined on a dependency object.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the value of the designated <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
      <param name="d">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)" /> method.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.IActivityEventListener`1">
      <summary>Defines the interface for an object that listens for an event.</summary>
      <typeparam name="T">The type of the event argument.</typeparam>
    </member>
    <member name="M:System.Workflow.ComponentModel.IActivityEventListener`1.OnEvent(System.Object,`0)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.ICompensatableActivity">
      <summary>Defines the interface required by an <see cref="T:System.Workflow.ComponentModel.Activity" /> that can be compensated.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ICompensatableActivity.Compensate(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Called by the workflow runtime to compensate an activity that is in the Closed state. The activity must have a value of Succeeded for its <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionResult" /> property in order to be compensatable.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> after operation has been tried.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the operation.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider">
      <summary>Provides a property type to the bind infrastructure. It is implemented by activities that contain a property of variable type, where the type can vary depending on other activity settings.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denotes the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are needed.</param>
      <param name="propertyName">The name of the property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design-time services if they are needed.</param>
      <param name="propertyName">The name of the property. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.IStartWorkflow">
      <summary>Defines a service that can be obtained from an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the purpose of starting a new workflow instance.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.IStartWorkflow.StartWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>Starts the workflow of designated <see cref="T:System.Type" /> providing the running instance with a <see cref="P:System.Collections.DictionaryBase.Dictionary" /> that contains runtime parameters.</summary>
      <returns>The instance ID of the workflow that is started.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow.</param>
      <param name="namedArgumentValues">A <see cref="P:System.Collections.DictionaryBase.Dictionary" /> that contains runtime parameters for the workflow.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.IWorkflowChangeDiff">
      <summary>Supports mining of workflow changes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.IWorkflowChangeDiff.Diff(System.Object,System.Object)">
      <summary>Determines the changes that occurred between two workflow definitions.</summary>
      <returns>A list of <see cref="T:System.Workflow.ComponentModel.WorkflowChangeAction" /> objects that indicates the differences between the two workflow definitions.</returns>
      <param name="originalDefinition">The original workflow definition.</param>
      <param name="changedDefinition">The new workflow definition.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.PersistOnCloseAttribute">
      <summary>Indicates that the current workflow instance must be persisted when the adorned activity completes its execution. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.PersistOnCloseAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PersistOnCloseAttribute" /> class. </summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.PropertyMetadata">
      <summary>Represents the behavior of a dependency property.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with an array of attributes. </summary>
      <param name="attributes">Attributes applicable to the dependency property, such as <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> and <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a default property value. </summary>
      <param name="defaultValue">The object representing the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue" /> of this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Object,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a default property value and an array of attributes.</summary>
      <param name="defaultValue">The object that represents the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue" /> of this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</param>
      <param name="attributes">Attributes applicable to the dependency property, such as <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> and <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Object,System.Workflow.ComponentModel.DependencyPropertyOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a default property value and a <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> enumeration value. </summary>
      <param name="defaultValue">The object representing the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue" /> of this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</param>
      <param name="options">The <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> used to define the associated dependency property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Object,System.Workflow.ComponentModel.DependencyPropertyOptions,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a default property value, a <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> enumeration value, and an array of attributes.</summary>
      <param name="defaultValue">The object that represents the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue" /> of this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</param>
      <param name="options">The <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> used to define the associated dependency property.</param>
      <param name="attributes">Attributes applicable to the dependency property, such as <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> and <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Object,System.Workflow.ComponentModel.DependencyPropertyOptions,System.Workflow.ComponentModel.GetValueOverride,System.Workflow.ComponentModel.SetValueOverride)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a default property value, a <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> enumeration value, and delegates to override the GetValue and SetValue logic associated with the dependency property. </summary>
      <param name="defaultValue">The object that represents the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue" /> of this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</param>
      <param name="options">The <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> used to define the associated dependency property.</param>
      <param name="getValueOverride">The <see cref="T:System.Workflow.ComponentModel.GetValueOverride" /> delegate that belongs to this instance.</param>
      <param name="setValueOverride">The <see cref="T:System.Workflow.ComponentModel.SetValueOverride" /> delegate that belongs to this instance.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Object,System.Workflow.ComponentModel.DependencyPropertyOptions,System.Workflow.ComponentModel.GetValueOverride,System.Workflow.ComponentModel.SetValueOverride,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a default property value, a <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> enumeration value, delegates to override the GetValue and SetValue logic associated with the dependency property, and an array of attributes. </summary>
      <param name="defaultValue">The object that represents the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue" /> of this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</param>
      <param name="options">The <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> used to define the associated dependency property.</param>
      <param name="getValueOverride">The <see cref="T:System.Workflow.ComponentModel.GetValueOverride" /> delegate that belongs to this instance.</param>
      <param name="setValueOverride">The <see cref="T:System.Workflow.ComponentModel.SetValueOverride" /> delegate that belongs to this instance.</param>
      <param name="attributes">Attributes applicable to the dependency property, such as <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> and <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Workflow.ComponentModel.DependencyPropertyOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> enumeration value. </summary>
      <param name="options">The <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> used to define the associated dependency property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Workflow.ComponentModel.DependencyPropertyOptions,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> enumeration value and an array of attributes. </summary>
      <param name="options">The <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> used to define the associated dependency property.</param>
      <param name="attributes">Attributes applicable to the dependency property, such as <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> and <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue">
      <summary>Represents the default value of the associated dependency property.</summary>
      <returns>An object representing the default value for this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</returns>
      <exception cref="T:System.InvalidOperationException">Attempting to set this property when <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.IsSealed" /> is true.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.GetAttributes">
      <summary>Retrieves an array that contains all attributes.</summary>
      <returns>An array that contains all attributes.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.GetAttributes(System.Type)">
      <summary>Receives an array of type <see cref="T:System.Attribute" /> that contains those attributes having type equal to <paramref name="attributeType" />.</summary>
      <returns>An array of type <see cref="T:System.Attribute" />  that contains those attributes having type equal to <paramref name="attributeType" />.</returns>
      <param name="attributeType">The <see cref="T:System.Type" /> of attributes to return.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.GetValueOverride">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.GetValueOverride" /> callback, a callback invoked immediately upon a call to the <see cref="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)" /> method.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.GetValueOverride" /> callback, a callback invoked immediately upon a call to the <see cref="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)" /> method.</returns>
      <exception cref="T:System.InvalidOperationException">Attempting to set this property when <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.IsSealed" /> is true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.IsMetaProperty">
      <summary>Gets a value that indicates whether the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.Options" /> is set to <see cref="F:System.Workflow.ComponentModel.DependencyPropertyOptions.Metadata" />.</summary>
      <returns>true if this option is set to <see cref="F:System.Workflow.ComponentModel.DependencyPropertyOptions.Metadata" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.IsNonSerialized">
      <summary>Gets a value that indicates whether the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.Options" /> is set to <see cref="F:System.Workflow.ComponentModel.DependencyPropertyOptions.NonSerialized" />.</summary>
      <returns>true if set to <see cref="F:System.Workflow.ComponentModel.DependencyPropertyOptions.NonSerialized" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.Options" /> are set to <see cref="F:System.Workflow.ComponentModel.DependencyPropertyOptions.ReadOnly" />.</summary>
      <returns>true if set to <see cref="F:System.Workflow.ComponentModel.DependencyPropertyOptions.ReadOnly" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.IsSealed">
      <summary>Determines whether the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> has been applied to a property resulting in the immutable state.</summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> is immutable; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.OnApply(System.Workflow.ComponentModel.DependencyProperty,System.Type)">
      <summary>Provides processing when this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> is applied to a dependency property.</summary>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to which this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> has been applied. </param>
      <param name="targetType">The <see cref="T:System.Type" /> associated with this metadata if this instance is type-specific metadata. If this is default metadata, this value is a null reference (Nothing in Visual Basic).</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.Options">
      <summary>Gets or set the property which represents the option setting for the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associated to this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</summary>
      <returns>The option setting for the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associated to this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</returns>
      <exception cref="T:System.InvalidOperationException">Attempting to set this property when <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.IsSealed" /> is true.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.SetValueOverride">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.SetValueOverride" /> callback, a callback invoked immediately upon a call to the <see cref="M:System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)" /> method.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.SetValueOverride" /> callback, a callback invoked immediately upon a call to the <see cref="M:System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)" /> method.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set this property when <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.IsSealed" /> is true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.QueueEventArgs">
      <summary>Represents the event arguments for a workflow queue-related event.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.QueueEventArgs.QueueName">
      <summary>Gets the name of the workflow queue that originated the event.</summary>
      <returns>The name of the workflow queue that originated the event.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.RemovedActivityAction">
      <summary>Represents a proposed removal of an <see cref="T:System.Workflow.ComponentModel.Activity" /> from a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> within a running workflow instance.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.RemovedActivityAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.RemovedActivityAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.RemovedActivityAction.#ctor(System.Int32,System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.CompositeActivity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.RemovedActivityAction" /> class.</summary>
      <param name="removedActivityIndex">Indicates the index of the activity being removed when you remove the activity using the workflow changes.</param>
      <param name="originalActivity">Activity that was removed.</param>
      <param name="clonedParentActivity">Root activity from which the activity was removed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.RemovedActivityAction.OriginalRemovedActivity">
      <summary>Gets the instance of original <see cref="T:System.Workflow.ComponentModel.Activity" /> being removed.</summary>
      <returns>The instance of the original <see cref="T:System.Workflow.ComponentModel.Activity" /> being removed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.RemovedActivityAction.RemovedActivityIndex">
      <summary>Gets index of the removed <see cref="T:System.Workflow.ComponentModel.Activity" /> with the <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> collection of the parent <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</summary>
      <returns>The index of the <see cref="T:System.Workflow.ComponentModel.Activity" /> being removed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.SetValueOverride">
      <summary>Allows a custom override of the <see cref="M:System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)" /> logic associated with a dependency property that is defined on a dependency object. </summary>
      <param name="d">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="M:System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)" />  method.</param>
      <param name="value">The <see cref="T:System.Object" /> to set the value to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.SuspendActivity">
      <summary>Suspends the running workflow instance when executed. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.SuspendActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.SuspendActivity" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.SuspendActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.SuspendActivity" /> class, along with the name for that activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.SuspendActivity.Error">
      <summary>Gets or sets an error message to report to administrators providing the reason for suspension.</summary>
      <returns>An error message that provides the reason for the workflow instance suspension. The default value is null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.SuspendActivity.ErrorProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.ComponentModel.SuspendActivity.Error" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.SynchronizationScopeActivity">
      <summary>Represents a section of workflow that requires controlled access to shared variables.  If two or more instances of a <see cref="T:System.Workflow.ComponentModel.SynchronizationScopeActivity" /> access the same variables, then the execution of these activities is effectively serialized. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.SynchronizationScopeActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.SynchronizationScopeActivity" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.SynchronizationScopeActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.SynchronizationScopeActivity" /> class using the name of the activity. </summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.SynchronizationScopeActivity.SynchronizationHandles">
      <summary>Gets or sets a collection of strings that represents handles that determine the synchronization behavior of this <see cref="T:System.Workflow.ComponentModel.SynchronizationScopeActivity" />. When two or more <see cref="T:System.Workflow.ComponentModel.SynchronizationScopeActivity" /> activities share a synchronization handle, they execute in a serial fashion; there is no interleaved execution of the child activities within them.</summary>
      <returns>A multiline string that contains synchronization handles for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.SynchronizationScopeActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.TerminateActivity">
      <summary>Terminates the running workflow instance when an abnormal situation occurs. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.TerminateActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.TerminateActivity" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.TerminateActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.TerminateActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.TerminateActivity.Error">
      <summary>Gets or sets an error message to report to administrators, providing the reason for termination.</summary>
      <returns>An error message that provides the reason for the workflow instance termination. The default value is null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.TerminateActivity.ErrorProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.ComponentModel.TerminateActivity.Error" /> property. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.ThrowActivity">
      <summary>Models the throwing of an exception. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ThrowActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ThrowActivity" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ThrowActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ThrowActivity" /> class, and initializes its name.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ThrowActivity.Fault">
      <summary>Indicates the exception object that should be thrown by the <see cref="T:System.Workflow.ComponentModel.ThrowActivity" />.</summary>
      <returns>The <see cref="T:System.Exception" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.ThrowActivity.FaultProperty">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> representing the  <see cref="P:System.Workflow.ComponentModel.ThrowActivity.Fault" /> property for this instance.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ThrowActivity.FaultType">
      <summary>Indicates the type of exception that should be thrown by the <see cref="T:System.Workflow.ComponentModel.ThrowActivity" />.</summary>
      <returns>The type representing the fault associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.ThrowActivity.FaultTypeProperty">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> representing the  <see cref="P:System.Workflow.ComponentModel.ThrowActivity.FaultType" /> property for this instance.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether the specified <see cref="T:System.Type" /> can be filtered.</summary>
      <returns>true if the specified type can be filtered; otherwise, false. </returns>
      <param name="type">The <see cref="T:System.Type" /> to check for filtering</param>
      <param name="throwOnError">true to throw an exception when the <see cref="M:System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(System.Type,System.Boolean)" /> is processed; otherwise, false.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription">
      <summary>Gets the description for the filter to be displayed on the class browser dialog box. </summary>
      <returns>A <see cref="T:System.String" /> that contains the description of the filter. </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value denoting the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are needed.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are needed.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.TransactionScopeActivity">
      <summary>A section of workflow which demarcates a transaction boundary. A new <see cref="T:System.Transactions.Transaction" /> is started when this <see cref="T:System.Workflow.ComponentModel.Activity" /> begins executing and the transaction commits when the <see cref="T:System.Workflow.ComponentModel.Activity" /> closes successfully. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.TransactionScopeActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.TransactionScopeActivity" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.TransactionScopeActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.TransactionScopeActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.TransactionScopeActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.TransactionScopeActivity.TransactionOptions">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.WorkflowTransactionOptions" /> associated with this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowTransactionOptions" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.WorkflowChangeAction">
      <summary>An abstract base class from which all classes that represent proposed changes to a running workflow instance must derive.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChangeAction.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowChangeAction" /> class.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChangeAction.ApplyTo(System.Workflow.ComponentModel.Activity)">
      <summary>When overridden in a derived class, applies the changes to the root <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>true if the root <see cref="T:System.Workflow.ComponentModel.Activity" /> was updated with the added <see cref="T:System.Workflow.ComponentModel.Activity" />, false if the root <see cref="T:System.Workflow.ComponentModel.Activity" /> is a null reference (Nothing in Visual Basic).</returns>
      <param name="rootActivity">The root <see cref="T:System.Workflow.ComponentModel.Activity" /> of the workflow.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChangeAction.ValidateChanges(System.Workflow.ComponentModel.Activity)">
      <summary>When overridden in a derived class, validates the changes and returns a <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains any errors.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains any errors.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> upon which to validate the changes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityInstance" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.WorkflowChanges">
      <summary>Represents a set of proposed changes to a running workflow instance.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChanges.#ctor(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> class. </summary>
      <param name="rootActivity">The root <see cref="T:System.Workflow.ComponentModel.Activity" /> of the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rootActivity" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rootActivity" /> is not a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rootActivity" /> is in design mode.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.WorkflowChanges.ConditionProperty">
      <summary>Specifies the condition that must be satisfied to apply the <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChanges.GetCondition(System.Object)">
      <summary>Gets the condition property on a dependency object.</summary>
      <returns>A condition property type, such as <see cref="T:System.Workflow.ComponentModel.ActivityCondition" />.</returns>
      <param name="dependencyObject">A <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> (or derived type) that contains a condition property, such as the <see cref="T:System.Workflow.Activities.SequentialWorkflowActivity" /> and <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> activities.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dependencyObject" /> is not a <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> or a type that derives from <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChanges.SetCondition(System.Object,System.Object)">
      <summary>Sets the condition property on a dependency object.</summary>
      <param name="dependencyObject">A <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> (or derived type) that contains a condition property, such as the <see cref="T:System.Workflow.Activities.SequentialWorkflowActivity" /> and <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> activities.</param>
      <param name="value">The condition type to set on the dependency object, such as an <see cref="T:System.Workflow.ComponentModel.ActivityCondition" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.WorkflowChanges.TransientWorkflow">
      <summary>Returns a cloned activity tree to which changes can be made and then applied to the running workflow instance.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> that contains the cloned root activity for the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChanges.Validate">
      <summary>Validates the current set of proposed changes that have been made to the activity tree represented by the <see cref="P:System.Workflow.ComponentModel.WorkflowChanges.TransientWorkflow" /> property.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> object that contains any errors or warnings that occurred during validation.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.WorkflowParameterBinding">
      <summary>A general-purpose class that represents a binding to a named parameter. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowParameterBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBinding" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowParameterBinding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBinding" /> class. </summary>
      <param name="parameterName">A string that contains the name of the parameter.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.WorkflowParameterBinding.ParameterName">
      <summary>Gets or sets the <see cref="P:System.Workflow.ComponentModel.WorkflowParameterBinding.ParameterName" /> property. Represents the name of the parameter being bound.</summary>
      <returns>The name of the parameter being bound.</returns>
    </member>
    <member name="F:System.Workflow.ComponentModel.WorkflowParameterBinding.ParameterNameProperty">
      <summary>The dependency property which targets <see cref="P:System.Workflow.ComponentModel.WorkflowParameterBinding.ParameterName" />.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.WorkflowParameterBinding.Value">
      <summary>Gets or sets the value assigned to the corresponding parameter.</summary>
      <returns>The assigned value as an <see cref="T:System.Object" />.</returns>
    </member>
    <member name="F:System.Workflow.ComponentModel.WorkflowParameterBinding.ValueProperty">
      <summary>The dependency property which targets <see cref="P:System.Workflow.ComponentModel.WorkflowParameterBinding.Value" />.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection">
      <summary>Represents a <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> of type <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBinding" />. This class may not be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowParameterBindingCollection.#ctor(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> class. </summary>
      <param name="ownerActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that own this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerActivity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowParameterBindingCollection.GetItem(System.String)">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBinding" /> from the collection having the specified key.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBinding" /> from the collection having the specified key.</returns>
      <param name="key">The key to match for this retrieval.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.WorkflowTerminatedException">
      <summary>Represents the <see cref="T:System.Exception" /> that is raised when a workflow is terminated. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowTerminatedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowTerminatedException" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowTerminatedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowTerminatedException" /> class, with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowTerminatedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowTerminatedException" /> class, with a specified error message and a reference to the inner <see cref="T:System.Exception" /> that is the cause of this <see cref="T:System.Exception" /> .</summary>
      <param name="message">The message that describes the error.</param>
      <param name="exception">The inner <see cref="T:System.Exception" /> reference. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.WorkflowTransactionOptions">
      <summary>Container for workflow transaction type options. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowTransactionOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowTransactionOptions" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.WorkflowTransactionOptions.IsolationLevel">
      <summary>Gets or sets the <see cref="T:System.Data.IsolationLevel" /> for the transaction. </summary>
      <returns>The <see cref="T:System.Data.IsolationLevel" /> for the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.WorkflowTransactionOptions.IsolationLevelProperty">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> representing <see cref="P:System.Workflow.ComponentModel.WorkflowTransactionOptions.IsolationLevel" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.WorkflowTransactionOptions.TimeoutDuration">
      <summary>Gets or sets the <see cref="T:System.TimeSpan" /> representing the time-out period for the transaction.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> representing the time-out period for the transaction.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.WorkflowTransactionOptions.TimeoutDurationProperty">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> representing <see cref="P:System.Workflow.ComponentModel.WorkflowTransactionOptions.TimeoutDuration" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.AccessTypes">
      <summary>Specifies the access mode for the dependency property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.Compiler.AccessTypes.Read">
      <summary>Read access.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Compiler.AccessTypes.Write">
      <summary>Write access.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Compiler.AccessTypes.ReadWrite">
      <summary>Read and write access.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator">
      <summary>Base class for code generator components that can be associated with activities.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator.GenerateCode(System.Workflow.ComponentModel.Compiler.CodeGenerationManager,System.Object)">
      <summary>Generates code for the specified <see cref="T:System.Object" /> using the specific <see cref="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager" />.</summary>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager" /> to use in the code generation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to generate the code for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> cannot be cast to type <see cref="T:System.Workflow.ComponentModel.Activity" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator.GetCodeTypeDeclaration(System.Workflow.ComponentModel.Compiler.CodeGenerationManager,System.String)">
      <summary>Returns the code type declaration for the workflow that is currently being compiled.</summary>
      <returns>The <see cref="T:System.CodeDom.CodeTypeDeclaration" /> for the workflow that is currently being compiled.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager" /> to use in the code generation.</param>
      <param name="fullClassName">The fully qualified class name of the workflow that is currently being compiled.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute">
      <summary>Indicates the type to be used for code generation for an activity. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute" /> class, also initializing the <see cref="P:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute.CodeGeneratorTypeName" />.</summary>
      <param name="codeGeneratorTypeName">The specified value for <see cref="P:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute.CodeGeneratorTypeName" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="codeGeneratorTypeName" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute" /> class from a code generator <see cref="T:System.Type" />.</summary>
      <param name="codeGeneratorType">The <see cref="T:System.Type" /> to initialize the instance from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="codeGeneratorType" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codeGeneratorType" /> is not assignable to the type of a code generator.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codeGeneratorType" /> has no default constructor.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute.CodeGeneratorTypeName">
      <summary>Gets the name of the code generator <see cref="T:System.Type" /> which this instance is based on.</summary>
      <returns>A string that contains the name of the code generator <see cref="T:System.Type" /> on which this instance is based.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ActivityValidator">
      <summary>Derivative of <see cref="T:System.Workflow.ComponentModel.Compiler.DependencyObjectValidator" /> that is a base class for all activity validator components.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityValidator" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Verifies that the given activity is valid.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> object that contains any errors or warnings that occurred during validation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> associated with validation.</param>
      <param name="obj">The <see cref="T:System.Workflow.ComponentModel.Activity" /> to be validated.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute">
      <summary>Identifies the class that performs validation on an <see cref="T:System.Workflow.ComponentModel.Activity" /> that is subject to validation. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute" /> class by using the type of the validator.</summary>
      <param name="validatorTypeName">Type of the <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute" /> class by using the specified validator type name.</summary>
      <param name="validatorType">The name of the <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> type.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute.ValidatorTypeName">
      <summary>Gets the name of the type of the associated <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> class.</summary>
      <returns>The name of the type of the associated <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> class.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.AttributeInfo">
      <summary>Wrapper class that represents attributes on a type at design time. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AttributeInfo.ArgumentValues">
      <summary>Gets a collection that contains values for each of the arguments associated with this instance.</summary>
      <returns>A collection that contains values for each of the arguments associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AttributeInfo.AttributeType">
      <summary>Gets the <see cref="T:System.Type" /> of this instance.</summary>
      <returns>The <see cref="T:System.Type" /> of this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AttributeInfo.Creatable">
      <summary>Gets a value that indicates whether this instance can be created.</summary>
      <returns>Returns a value which is false if either of the following conditions are true:The <see cref="T:System.Type" /> defining this attribute has an <see cref="P:System.Type.Assembly" /> which is a null reference (Visual Basic Nothing).Any one of the objects in the array <see cref="P:System.Workflow.ComponentModel.Compiler.AttributeInfo.ArgumentValues" /> is of <see cref="T:System.Type" /><see cref="T:System.Exception" />Otherwise the value returned is true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.AttributeInfo.CreateAttribute">
      <summary>Creates an attribute of type Creates an attribute of type <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" />.</summary>
      <returns>An attribute of type <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" />.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Workflow.ComponentModel.Compiler.AttributeInfo.Creatable" /> is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.AttributeInfo.GetArgumentValueAs(System.IServiceProvider,System.Int32,System.Type)">
      <summary>Gets the argument for this instance, based on type and index.</summary>
      <returns>An <see cref="T:System.Object" /> cast to the requested type.</returns>
      <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> helping this operation.</param>
      <param name="argumentIndex">The integer index of the requested argument in the collection of arguments.</param>
      <param name="requestedType">The <see cref="T:System.Type" /> of the argument.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="argumentIndex" /> is out of range of the argument collection.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedType" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.AttributeInfoAttribute">
      <summary>Represents a class holding information about an attribute at design time. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AttributeInfoAttribute.AttributeInfo">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> associated with this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.AuthorizedType">
      <summary>Represents a set of types that are either allowed or disallowed in compiled workflows by the workflow compiler (depending on the value of the <see cref="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.Authorized" /> property). This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.AuthorizedType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.AuthorizedType" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.Assembly">
      <summary>Gets or sets the name of the assembly that contains the type(s) represented by this class.</summary>
      <returns>The name of the assembly.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.Authorized">
      <summary>Gets or sets the value that indicates whether the type designated by this class is authorized to participate in a workflow compilation.</summary>
      <returns>true if authorized to participate in a workflow compilation; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.Namespace">
      <summary>Gets or sets the name of the namespace of the type represented in this instance.</summary>
      <returns>The name of the namespace of the <see cref="T:System.Type" /> represented in this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.RegularExpression">
      <summary>Gets the <see cref="T:System.Text.RegularExpressions.Regex" /> associated with this instance.</summary>
      <returns>The regular expression associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.TypeName">
      <summary>Gets or sets the name of the type being represented by this instance.</summary>
      <returns>The name of the <see cref="T:System.Type" /> being represented by this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.BindValidationContext">
      <summary>Represents the context for the validation of an <see cref="T:System.Workflow.ComponentModel.ActivityBind" />. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.BindValidationContext.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.BindValidationContext" /> class, while initializing the <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</summary>
      <param name="targetType">The <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.BindValidationContext.#ctor(System.Type,System.Workflow.ComponentModel.Compiler.AccessTypes)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.BindValidationContext" /> class, initializing the <see cref="T:System.Type" /> and the <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> of the target of the bind represented by this instance.</summary>
      <param name="targetType">The <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> represented by this instance.</param>
      <param name="access">The <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> represented by this instance.</param>
      <exception cref="T:System.ArgumentNullException"> Is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.BindValidationContext.Access">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> represented by this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> represented by this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.BindValidationContext.TargetType">
      <summary>Gets the <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> represented by this instance.</summary>
      <returns>The <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> represented by this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager">
      <summary>Enables sharing of data across activity code generators during the code generation phase of compilation. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CodeGenerationManager.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager" /> class by using an existing <see cref="T:System.IServiceProvider" /> type.</summary>
      <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> to use in this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CodeGenerationManager.Context">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> associated with this instance.</summary>
      <returns>The <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CodeGenerationManager.GetCodeGenerators(System.Type)">
      <summary>Gets an array that contains each <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator" /> associated with the specified <see cref="T:System.Type" />.</summary>
      <returns>An array that contains each <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator" /> associated with the specified <see cref="T:System.Type" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> required.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CodeGenerationManager.GetService(System.Type)">
      <summary>Provides access to the service object of the specified type.</summary>
      <returns>The service object of the specified type.</returns>
      <param name="serviceType">The desired <see cref="T:System.Type" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.CompileWorkflowCleanupTask">
      <summary>Defines an MSBuild task for erasing the contents of temporary files that are used when compiling workflows created using Visual Basic. The contents of the temporary files are erased but the files are not deleted. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompileWorkflowCleanupTask.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.CompileWorkflowCleanupTask" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompileWorkflowCleanupTask.Execute">
      <summary>Erases the contents of the files specified in the <see cref="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowCleanupTask.TemporaryFiles" /> property, without deleting the files.</summary>
      <returns>true if the task successfully executed; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowCleanupTask.TemporaryFiles">
      <summary>Gets or sets an array of paths to temporary files created when compiling workflows created using Visual Basic .NET.</summary>
      <returns>A list of temporary files associated with this compilation task.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask">
      <summary>Represents the MSBuild task of compiling a workflow. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.AssemblyName">
      <summary>Gets and sets the name of the assembly that is built during compilation.</summary>
      <returns>A String that contains the name of the assembly.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.CompilationOptions">
      <summary>Gets or sets the compilation options.</summary>
      <returns>The compilation options.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.DelaySign">
      <summary>Gets or sets a value that indicates whether the workflow assembly will be delay signed.</summary>
      <returns>true if the assembly will be delay signed; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.Execute">
      <summary>Runs the compilation of the workflow task.</summary>
      <returns>true if the operation was successful; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.HostObject">
      <summary>Gets or sets the <see cref="T:System.Object" /> that is used to obtain services provided by the Visual Studio host when the compile workflow task is invoked. </summary>
      <returns>The <see cref="T:System.Object" /> that is used to obtain services provided by Visual Studio host when the compile workflow task is invoked. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.Imports">
      <summary>Gets or sets a string that contains all the imports directives for the compilation of the workflow.</summary>
      <returns>A string that contains all the imports directives for the compilation of the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.KeepTemporaryFiles">
      <summary>Gets a Boolean value that determines whether temporary files are to be kept.</summary>
      <returns>true if temporary files are to be kept; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.KeyContainer">
      <summary>Gets or sets the name of the public/private key container used for signing the workflow assembly.</summary>
      <returns>The name of the public/private key container used for signing the workflow assembly.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.KeyFile">
      <summary>Gets or sets the path of the file that is used for signing the workflow assembly.</summary>
      <returns>The path of the file that is used for signing the workflow assembly.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.Microsoft#Build#Framework#ITask#HostObject">
      <summary>Gets and sets the Host Object in the Microsoft Build framework.</summary>
      <returns>The Host Object from the Microsoft Build framework.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.OutputFiles">
      <summary>Gets an array of paths to output files from the workflow project being compiled.</summary>
      <returns>An array of paths to output files from the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.ProjectDirectory">
      <summary>Gets or sets a string that contains the path of the directory that contains the workflow project.</summary>
      <returns>A string that contains the path of the directory that contains the workflow project.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.ProjectExtension">
      <summary>Gets or sets a string that contains the file name extension for the workflow project.</summary>
      <returns>A string that contains the file name extension for the workflow project.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.ReferenceFiles">
      <summary>Gets or sets an array of paths to reference files for the workflow project being compiled.</summary>
      <returns>An array of paths to reference files for the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.ResourceFiles">
      <summary>Gets or sets an array of paths to resource files for the workflow project being compiled.</summary>
      <returns>An array of paths to resource files for the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.RootNamespace">
      <summary>Gets or sets the root namespace for the workflow project being compiled.</summary>
      <returns>The root namespace for the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.SourceCodeFiles">
      <summary>Gets or sets an array of paths to Visual Basic or C# files in the workflow project being compiled.</summary>
      <returns>An array of paths to Visual Basic or C# files in the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.TargetFramework">
      <summary>Gets or sets the target .NET Framework of the current project.</summary>
      <returns>The target .NET Framework of the current project.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.TemporaryFiles">
      <summary>Gets an array of paths to temporary files created by the build task for the workflow project being compiled.</summary>
      <returns>An array of paths to temporary files created by the build task for the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.WorkflowMarkupFiles">
      <summary>Gets or sets an array of paths to Workflow Markup Files for the workflow project being compiled.</summary>
      <returns>An array of paths to Workflow Markup Files for the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.CompositeActivityCodeGenerator">
      <summary>Base class for code generator components that can be associated with composite activities.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompositeActivityCodeGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.CompositeActivityCodeGenerator" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompositeActivityCodeGenerator.GenerateCode(System.Workflow.ComponentModel.Compiler.CodeGenerationManager,System.Object)">
      <summary>Generates code for the specified <see cref="T:System.Object" /> using the specific <see cref="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager" />.</summary>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager" /> to use in code generation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to generate code for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> cannot be cast to type <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.CompositeActivityValidator">
      <summary>Derivative of <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityValidator" /> that is the base class for all composite activity validator components.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompositeActivityValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.CompositeActivityValidator" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompositeActivityValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> configuration.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> of errors found during validation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> linked to the validation.</param>
      <param name="obj">Activity to be validated.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompositeActivityValidator.ValidateActivityChange(System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.ActivityChangeAction)">
      <summary>Validates the change based on the affected <see cref="T:System.Workflow.ComponentModel.Activity" /> and provides the error.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> by the validation.</returns>
      <param name="activity">The affected <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="action">The <see cref="T:System.Workflow.ComponentModel.ActivityChangeAction" /> that defines the change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is a null reference (Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ConditionValidator">
      <summary>Derivative of <see cref="T:System.Workflow.ComponentModel.Compiler.DependencyObjectValidator" /> that is the base class for all condition validator components.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ConditionValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ConditionValidator" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ConditionValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the specified object using the specified <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the errors from this operation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> to use for this validation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to validate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> cannot be cast to type <see cref="T:System.Workflow.ComponentModel.ActivityCondition" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.DependencyObjectValidator">
      <summary>Derivative of <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> that is the base class for all dependency object validator components.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.DependencyObjectValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.DependencyObjectValidator" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.DependencyObjectValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates each settable <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> of the specified <see cref="T:System.Object" /> using the specified <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the errors from this operation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> to use in the validation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to be validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> cannot be cast to type <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ITypeProvider">
      <summary>Defines the behavior of a service that acts as a container of types.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetType(System.String)">
      <summary>Gets the <see cref="T:System.Type" /> of the named entity.</summary>
      <returns>The <see cref="T:System.Type" /> of the named entity.</returns>
      <param name="name">A string that contains the name of the entity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetType(System.String,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> of the named entity.</summary>
      <returns>The <see cref="T:System.Type" /> of the named entity.</returns>
      <param name="name">A string that contains the name of the entity.</param>
      <param name="throwOnError">A value that indicates whether to throw an exception if <paramref name="name" /> is not resolvable.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetTypes">
      <summary>Creates and returns an array which contains each <see cref="T:System.Type" /> known to this instance.</summary>
      <returns>An array which contains each <see cref="T:System.Type" /> known to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ITypeProvider.LocalAssembly">
      <summary>Temporary assembly that is generated during the compilation process to validate the types in the active project that is being compiled.</summary>
      <returns>The local <see cref="T:System.Reflection.Assembly" /> defined by this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ITypeProvider.ReferencedAssemblies">
      <summary>Gets a collection of all assemblies referenced by the <see cref="T:System.Type" />.</summary>
      <returns>A collection of all assemblies referenced by the <see cref="T:System.Type" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypeLoadErrors">
      <summary>Gets an <see cref="T:System.Collections.IDictionary" /> of load error exceptions keyed by the <see cref="T:System.Object" /> causing the <see cref="T:System.Exception" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> of load error exceptions keyed by the <see cref="T:System.Object" /> causing the <see cref="T:System.Exception" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypeLoadErrorsChanged">
      <summary>Occurs when the collection <see cref="P:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" /> is modified.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypesChanged">
      <summary>Occurs when the types in the type provider that implements this interface change. This can happen when an assembly or <see cref="T:System.CodeDom.CodeCompileUnit" /> is added or removed from the type provider.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService">
      <summary>Defines the interface implemented by the environment hosting the workflow designer and compiler to provide environment-specific compilation information during the validation and compilation processes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes">
      <summary>Gets a value that indicates whether types are checked.</summary>
      <returns>true if types are checked, otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.Language">
      <summary>Gets the programming language used by the environment, such as Visual Studio, when compiling the workflow.</summary>
      <returns>The name of the programming language used by the development environment.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.RootNamespace">
      <summary>Gets the root namespace set for the project. </summary>
      <returns>The name of the root namespace.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.PropertyValidationContext">
      <summary>Provides the context for validation of a <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.PropertyValidationContext.#ctor(System.Object,System.Reflection.PropertyInfo,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.PropertyValidationContext" /> class. </summary>
      <param name="propertyOwner">The <see cref="T:System.Object" /> that owns the property</param>
      <param name="propertyInfo">The associated <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="propertyName">The name of the property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyOwner" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is a null reference (Visual Basic Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.PropertyValidationContext.#ctor(System.Object,System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.PropertyValidationContext" /> class. </summary>
      <param name="propertyOwner">The <see cref="T:System.Object" /> that owns the property.</param>
      <param name="dependencyProperty">The associated <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyOwner" /> is a null reference (Visual Basic Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.PropertyValidationContext.Property">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associated with this instance as an <see cref="T:System.Object" /> .</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associated with this instance as an <see cref="T:System.Object" /> .</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.PropertyValidationContext.PropertyName">
      <summary>Gets the property name associated with this instance.</summary>
      <returns>The property name associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.PropertyValidationContext.PropertyOwner">
      <summary>Get the <see cref="T:System.Object" /> which owns the property associated with this instance.</summary>
      <returns>The <see cref="T:System.Object" /> which owns the property associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.TypeProvider">
      <summary>An implementation of <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> that acts as a container of types within the indicated assemblies and code compile units.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> class. </summary>
      <param name="serviceProvider">The encapsulated <see cref="T:System.IServiceProvider" /> for this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)">
      <summary>Adds an already-loaded assembly. It is the caller's responsibility to load the assembly, and <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> includes the types from this assembly for dispensing when <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType" /> is called.</summary>
      <param name="assembly">The <see cref="P:System.Type.Assembly" /> to add a reference for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is a null reference (Visual Basic Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)">
      <summary>Adds a reference to the <see cref="P:System.Type.Assembly" /> to the internal list. This assembly is used for the <see cref="T:System.Type" /> lookup in the <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" /> method.</summary>
      <param name="path">The path of the <see cref="P:System.Type.Assembly" /> to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is a null reference (Visual Basic Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>Adds a reference to the <see cref="T:System.CodeDom.CodeCompileUnit" /> to the internal list. This <see cref="T:System.CodeDom.CodeCompileUnit" /> is used for the <see cref="T:System.Type" /> lookup in the <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" /> method.</summary>
      <param name="codeCompileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit" /> to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="codeCompileUnit" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codeCompileUnit" /> is already referenced in this instance.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.TypeProvider.AssemblyNameResolver">
      <summary>Gets or sets the delegate that references a method with one parameter and one return value that returns the assembly display name in which a specified type belongs to.</summary>
      <returns>The delegate that references a method with one parameter and one return value that returns the assembly display name that a specified type belongs to.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" />. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetAssemblyName(System.Type)">
      <summary>Returns the assembly display name of the assembly in which the specified type is declared.</summary>
      <returns>The assembly display name of the assembly in which the specified type is declared.</returns>
      <param name="type">The type whose assembly name to get.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetEnumNames(System.Type)">
      <summary>Provides a string array that contains the names for the specified <see cref="T:System.Enum" /> in indexed order.</summary>
      <returns>The names for the specified <see cref="T:System.Enum" /> in indexed order.</returns>
      <param name="enumType">The type to obtain the names from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> Is not an <see cref="T:System.Enum" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetEventHandlerType(System.Reflection.EventInfo)">
      <summary>Gets the <see cref="T:System.Type" /> of an <see cref="T:System.EventHandler" />, given a reference to an <see cref="T:System.Reflection.EventInfo" />.</summary>
      <returns>The <see cref="T:System.Type" /> of an <see cref="T:System.EventHandler" />, given a reference to an <see cref="T:System.Reflection.EventInfo" />.</returns>
      <param name="eventInfo">The <see cref="T:System.Reflection.EventInfo" /> to obtain the <see cref="T:System.EventHandler" /> type of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventInfo" /> is a null reference (Visual Basic Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetService(System.Type)">
      <summary>Gets the <see cref="T:System.Object" /> that provides the designated service <see cref="T:System.Type" />.</summary>
      <returns>The <see cref="T:System.Object" /> that provides the designated service <see cref="T:System.Type" />.</returns>
      <param name="serviceType">The service <see cref="T:System.Type" /> that the <see cref="T:System.Object" /> is to provide.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)">
      <summary>Gets the type from the set of assemblies added to the TypeProvider using <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" />, <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" />, or <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />. </summary>
      <returns>The requested <see cref="T:System.Type" />.</returns>
      <param name="name">The type name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String,System.Boolean)">
      <summary>Gets the type from the set of assemblies added to the TypeProvider using <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" />, <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" />, or <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />.</summary>
      <returns>The requested <see cref="T:System.Type" />.</returns>
      <param name="name">The type name.</param>
      <param name="throwOnError">A value that indicates whether to throw an exception if <paramref name="name" /> is not resolvable.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is a null reference (Nothing in Visual Basic)</exception>
      <exception cref="T:System.Exception">
        <paramref name="name" /> is not resolvable and <paramref name="throwOnError" /> is true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetTypes">
      <summary>Creates an array that contains each <see cref="T:System.Type" /> known to this instance.</summary>
      <returns>An array that contains each <see cref="T:System.Type" /> known to this instance.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">Any <see cref="T:System.Type" /> fails to load.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsAssignable(System.Type,System.Type)">
      <summary>Indicates whether one type can be safely assigned to another type.</summary>
      <returns>true if the assignment can be safely made; otherwise false.</returns>
      <param name="toType">The target <see cref="T:System.Type" /> of the assignment.</param>
      <param name="fromType">The source <see cref="T:System.Type" /> of the assignment.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsEnum(System.Type)">
      <summary>Indicates whether a <see cref="T:System.Type" /> is of type <see cref="T:System.Enum" /> .</summary>
      <returns>true if the <see cref="T:System.Type" /> is an <see cref="T:System.Enum" /> ; otherwise false.</returns>
      <param name="type">The <see cref="T:System.Type" /> to be tested.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSubclassOf(System.Type,System.Type)">
      <summary>Indicates whether a <see cref="T:System.Type" /> is a derived class of another <see cref="T:System.Type" /> .</summary>
      <returns>true if the tested relationship is true; otherwise false.</returns>
      <param name="subclass">The <see cref="T:System.Type" /> being tested as a derived class.</param>
      <param name="superClass">The <see cref="T:System.Type" /> being tested as the class.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSupportedProperty(System.Reflection.PropertyInfo,System.Object)">
      <summary>Returns a value that determines whether the specified property is supported in the target .NET Framework.</summary>
      <returns>true if the specified property is supported in the target .NET Framework; otherwise, false.</returns>
      <param name="property">The property to resolve.</param>
      <param name="declaringInstance">The instance in which the specified property is declared.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSupportedPropertyResolver">
      <summary>Gets or sets the delegate that references a method with two parameters and one return value that determines whether a specified property is supported in the target .NET Framework.</summary>
      <returns>The delegate that references a method with two parameters and one return value that determines whether a specified property is supported in the target .NET Framework.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.TypeProvider.LocalAssembly">
      <summary>Gets a value that represents the locally defined <see cref="T:System.Reflection.Assembly" /> for this instance.</summary>
      <returns>The locally defined <see cref="T:System.Reflection.Assembly" /> for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.TypeProvider.ReferencedAssemblies">
      <summary>Gets a collection of all assemblies referenced by the <see cref="T:System.Type" />.</summary>
      <returns>A collection of all assemblies referenced by the <see cref="T:System.Type" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RefreshCodeCompileUnit(System.CodeDom.CodeCompileUnit,System.EventHandler)">
      <summary>Updates the <see cref="T:System.CodeDom.CodeCompileUnit" /> reference associated with this instance.</summary>
      <param name="codeCompileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit" /> to refresh with.</param>
      <param name="refresher">The <see cref="T:System.EventHandler" /> to delegate this event to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="codeCompileUnit" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">This instance already references the subject <see cref="T:System.CodeDom.CodeCompileUnit" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveAssembly(System.Reflection.Assembly)">
      <summary>Removes all references to the subject <see cref="T:System.Reflection.Assembly" /> from this instance.</summary>
      <param name="assembly">The <see cref="T:System.Reflection.Assembly" /> to remove from this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveAssemblyReference(System.String)">
      <summary>Removes a path-based <see cref="T:System.Reflection.Assembly" /> reference from this instance.</summary>
      <param name="path">The path of the <see cref="T:System.Reflection.Assembly" /> to be removed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveCodeCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>Removes all references to the subject <see cref="T:System.CodeDom.CodeCompileUnit" /> from this instance.</summary>
      <param name="codeCompileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit" /> to be removed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="codeCompileUnit" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.SetLocalAssembly(System.Reflection.Assembly)">
      <summary>Sets the value of the local <see cref="T:System.Reflection.Assembly" /> to the referenced <see cref="T:System.Reflection.Assembly" /> .</summary>
      <param name="assembly">The <see cref="T:System.Reflection.Assembly" /> used to set this value</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors">
      <summary>Gets an <see cref="T:System.Collections.IDictionary" /> of load error exceptions keyed by the <see cref="T:System.Object" /> that causes the <see cref="T:System.Exception" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> of load error exceptions keyed by the <see cref="T:System.Object" /> that causes the <see cref="T:System.Exception" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrorsChanged">
      <summary>Occurs when the collection <see cref="P:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" /> is modified.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged">
      <summary>Occurs when the collection of defined types is modified.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ValidationError">
      <summary>Represents the base class for all validation errors.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationError.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> class; initializes the error text and error numbers for this instance.</summary>
      <param name="errorText">The associated error text for this instance.</param>
      <param name="errorNumber">The error number for this error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationError.#ctor(System.String,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> class, initializes the error text, error number and error type for this instance.</summary>
      <param name="errorText">The associated error text for this instance.</param>
      <param name="errorNumber">The error number for this error.</param>
      <param name="isWarning">A Boolean which is true if the error is considered a warning and false otherwise.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationError.#ctor(System.String,System.Int32,System.Boolean,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> class, initializing the error text, the error number, the error type and the property name associated with the error.</summary>
      <param name="errorText">The associated error text for this instance.</param>
      <param name="errorNumber">The error number for this error.</param>
      <param name="isWarning">A Boolean which is true if the error is considered a warning and false otherwise.</param>
      <param name="propertyName">The name of the property associated with this error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationError.ErrorNumber">
      <summary>Gets the error number of this instance.</summary>
      <returns>The error number of this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationError.ErrorText">
      <summary>Gets the error text for this instance.</summary>
      <returns>The error text for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationError.GetNotSetValidationError(System.String)">
      <summary>Creates a new validation error defined for the error type of a property not being set.</summary>
      <returns>A new validation error defined for the error type of a property not being set.</returns>
      <param name="propertyName">The property associated with this error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationError.IsWarning">
      <summary>Gets a value that indicates whether this instance is a warning.</summary>
      <returns>true if a warning; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationError.PropertyName">
      <summary>Gets or sets the name of the property that failed to validate. </summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the property that failed to validate.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationError.ToString">
      <summary>Provides a string representation of this instance incorporating the error type (error or warning) the error number and the error text.</summary>
      <returns>A string representation of this instance incorporating the error type (error or warning) the error number and the error text.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationError.UserData">
      <summary>Gets an <see cref="T:System.Collections.IDictionary" /> for the definition and storage of user-defined data related to this instance.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> for the definition and storage of user-defined data related to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection">
      <summary>Holds a collection of <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Compiler.ValidationError})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> class from an <see cref="T:System.Collections.IEnumerable" /> collection of type <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /></summary>
      <param name="value">The <see cref="T:System.Collections.IEnumerable" /> collection of type <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.#ctor(System.Workflow.ComponentModel.Compiler.ValidationErrorCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> class by using a <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" />.</summary>
      <param name="value">A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains validation errors.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.AddRange(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Compiler.ValidationError})">
      <summary>Copies the collection of enumerable elements to the end of the collection.</summary>
      <param name="value">A collection of <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> elements to add to the end of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.HasErrors">
      <summary>Indicates whether the collection contains <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> objects that indicate compilation errors.</summary>
      <returns>true if the activity has generated validation errors; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.HasWarnings">
      <summary>This property indicates whether the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> contains at least one <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> object, which indicates a compilation warning.</summary>
      <returns>true if the activity has generated validation warnings; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.ToArray">
      <summary>Returns a new instance of an array that contains all <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> objects that are contained in this collection.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> array of <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> classes.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ValidationManager">
      <summary>Enables the sharing of contextual information, such as property validation, parent activity, and so on, across validators during the compilation process.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationManager.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> class using the identified service provider.</summary>
      <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> that locates a GUID identified service.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationManager.#ctor(System.IServiceProvider,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> class using the identified service provider and indicates whether child <see cref="T:System.Workflow.ComponentModel.Activity" /> classes should be validated.</summary>
      <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> that locates a GUID identified service.</param>
      <param name="validateChildActivities">true to validate the child <see cref="T:System.Workflow.ComponentModel.Activity" /> classes of the current <see cref="T:System.Workflow.ComponentModel.Activity" />; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationManager.Context">
      <summary>Gets a value that indicates the stack object that a validator can use to make information available to nested validators.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> that a validator can use to make information available to nested validators.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationManager.GetService(System.Type)">
      <summary>Gets the service object of the specified <see cref="T:System.Type" />.</summary>
      <returns>A service object of type <paramref name="serviceType" />, or a null reference (Nothing in Visual Basic) if there is no service object of type <paramref name="serviceType" />.</returns>
      <param name="serviceType">An object that specifies the <see cref="T:System.Type" /> of service object to retrieve.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationManager.GetValidators(System.Type)">
      <summary>Returns an array of validators that are associated with a type by looking up the validator attribute applied on the type.</summary>
      <returns>An array of <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> classes.</returns>
      <param name="type">The <see cref="T:System.Type" /> of <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> class to find.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationManager.ValidateChildActivities">
      <summary>Gets a value that indicates whether child <see cref="T:System.Workflow.ComponentModel.Activity" /> classes should be validated.</summary>
      <returns>true if child <see cref="T:System.Workflow.ComponentModel.Activity" /> classes should be validated; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ValidationOption">
      <summary>Specifies the validation options in the <see cref="P:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute.ValidationOption" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.Compiler.ValidationOption.None">
      <summary>No validation performed.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Compiler.ValidationOption.Optional">
      <summary>Validation is optional. If value is present, it will be validated.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Compiler.ValidationOption.Required">
      <summary>Validation must be performed. Value must be present and will be validated.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute">
      <summary>Custom attribute that contains <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOption" /> information. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute.#ctor(System.Workflow.ComponentModel.Compiler.ValidationOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute" /> class, with a value for <see cref="P:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute.ValidationOption" />.</summary>
      <param name="validationOption">The required <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOption" /> enumeration value for this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute.ValidationOption">
      <summary>Gets the value of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOption" /> associated with this instance.</summary>
      <returns>The value of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOption" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.Validator">
      <summary>Base class for all validator components.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.Validator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.Validator.GetFullPropertyName(System.Workflow.ComponentModel.Compiler.ValidationManager)">
      <summary>Helper method to extract the full property name.</summary>
      <returns>The full property name.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> linked to the validation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is null.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.Validator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the specified object and returns a collection of validation errors.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the validation errors resulting from this operation.</returns>
      <param name="manager">The validation manager linked to the validation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to be validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.Validator.ValidateActivityChange(System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.ActivityChangeAction)">
      <summary>When overridden in a derived class, validates a change based on a specified <see cref="T:System.Workflow.ComponentModel.Activity" /> being added or removed. This function is called during the application of changes that are made to the workflow during dynamic updates.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> generated by the operation.</returns>
      <param name="activity">The specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="action">The specified <see cref="T:System.Workflow.ComponentModel.ActivityChangeAction" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is a null reference (Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.Validator.ValidateProperties(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Helper method to automatically validate the specific objects properties.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the validation errors resulting from this operation.</returns>
      <param name="manager">The validation manager linked to the validation.</param>
      <param name="obj">The <see cref="T:System.Workflow.ComponentModel.Activity" /> to be validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.Validator.ValidateProperty(System.Reflection.PropertyInfo,System.Object,System.Object,System.Workflow.ComponentModel.Compiler.ValidationManager)">
      <summary>Performs validation on a property and returns a <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the results of that validation.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the results of that validation.</returns>
      <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo" /> on the subject property.</param>
      <param name="propertyOwner">The owner of the property.</param>
      <param name="propertyValue">The value of the property.</param>
      <param name="manager">A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> for this operation.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext">
      <summary>Provides workflow compilation options for the current compilation or validation task.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext.CheckTypes">
      <summary>Gets a value that indicates whether <see cref="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes" /> is enabled at the current scope.</summary>
      <returns>true if <see cref="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes" /> is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext.CreateScope(System.IServiceProvider)">
      <summary>Initializes a <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext" /> class at the current scope.</summary>
      <returns>A reference to the scope.</returns>
      <param name="serviceProvider">The workflow compiler options for the current scope.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext.Current">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext" /> that is available at the current scope.</summary>
      <returns>The workflow compilation context that is available at the current scope, or null if no compilation scope is initialized.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext.GetAuthorizedTypes">
      <summary>Returns a list of types that the compiler allows in compiled workflows.</summary>
      <returns>A list of types that the compiler allows in compiled workflows.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext.Language">
      <summary>Gets the workflow compiler options <see cref="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.Language" /> that is available at the current scope.</summary>
      <returns>The workflow compiler options programming language that is available at the current scope.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext.RootNamespace">
      <summary>Gets the workflow compiler options <see cref="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.RootNamespace" /> that is available at the current scope.</summary>
      <returns>The workflow compiler options root namespace that is available at the current scope.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowCompiler">
      <summary>Represents the compiler for workflows that are developed using C# or Visual Basic code and/or XAML markup. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompiler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompiler" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompiler.Compile(System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters,System.String[])">
      <summary>Compiles a list of workflows contained in the files that are passed as parameters based on the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerResults" /> representing the results of the operation.</returns>
      <param name="parameters">The <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" />.</param>
      <param name="files">A string array that contains the paths to the files to compile. These files can be either code files (such as .vb or .cs) or workflow markup files. Workflow markup files must have an .xoml extension to be recognized by the compiler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="files" /> is a null reference (Visual Basic Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError">
      <summary>Represents a <see cref="T:System.CodeDom.Compiler.CompilerError" /> that is obtained during the workflow compilation process.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError" /> class. Includes initialization for several properties which define the error.</summary>
      <param name="fileName">A string containing the name of the source file that has the error.</param>
      <param name="line">An integer representing the line number of the error.</param>
      <param name="column">An integer representing the column position of the start of the error.</param>
      <param name="errorNumber">A string that contains the error number.</param>
      <param name="errorText">A string that contains text which describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError.#ctor(System.String,System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError" /> class. Initializes the instance to define the source file name and <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" />.</summary>
      <param name="fileName">A string that contains the name of the source file that has the error.</param>
      <param name="exception">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> to associate with this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError.PropertyName">
      <summary>Returns the property associated with the compiler error.</summary>
      <returns>The property associated with the compiler error.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError.ToString">
      <summary>Provides a string which represents this instance.</summary>
      <returns>A string which represents this instance/</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError.UserData">
      <summary>Gets an <see cref="T:System.Collections.IDictionary" /> which can be accessed to read and write user-defined data associated with this instance.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> which can be accessed to read and write user-defined data associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService">
      <summary>Provides a default implementation of <see cref="T:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService" /> class.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService.CheckTypes">
      <summary>Gets a value that indicates whether the types in the workflow being compiled are checked against a list that allows or excludes types based on the value of the <see cref="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.Authorized" /> property.</summary>
      <returns>true if <see cref="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes" /> is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService.Language">
      <summary>Gets the name of the programming language used by the environment.</summary>
      <returns>The name of the programming language used by the workflow compiler.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService.RootNamespace">
      <summary>Gets the root namespace for the environment.</summary>
      <returns>The root namespace for the environment.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService.TargetFrameworkMoniker">
      <summary>Gets the target .NET Framework version for the compiled workflow assembly.</summary>
      <returns>The target .NET Framework version for the compiled workflow assembly.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters">
      <summary>Represents parameters passed to <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompiler" /> during the compilation process.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" /> class, with the names of the assemblies used in compilation.</summary>
      <param name="assemblyNames">The names of the assemblies used in compilation.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.#ctor(System.String[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" /> class, with the names of the assemblies used in compilation, and the name to apply to the output file.</summary>
      <param name="assemblyNames">The names of the assemblies used in compilation.</param>
      <param name="outputName">The name to apply to the output file.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" /> class, with the names of the assemblies used in compilation, and the name to apply to the output file, and the designator for inclusion of debug information.</summary>
      <param name="assemblyNames">The names of the assemblies used in compilation.</param>
      <param name="outputName">The name to apply to the output file.</param>
      <param name="includeDebugInformation">Indicates whether a PDB file should be generated for debugging.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.#ctor(System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" /> class from an existing instance.</summary>
      <param name="parameters">The instance of <see cref="System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters)" /> used to initialize the new instance.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.CompilerOptions">
      <summary>Gets or sets a string that contains command-line options for this compilation.</summary>
      <returns>A string that contains command-line options for this compilation.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.GenerateCodeCompileUnitOnly">
      <summary>Gets or sets a value which indicates whether to generate only a <see cref="T:System.CodeDom.CodeCompileUnit" />, or to call the C# or Visual Basic compiler to generate the executable or DLL.</summary>
      <returns>A value which indicates whether to generate only a <see cref="T:System.CodeDom.CodeCompileUnit" /> , or to call the C# or Visual Basic compiler to generate the executable or DLL.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.LanguageToUse">
      <summary>Gets or sets a string which contains the language to use in compilation of the <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <returns>A string which contains the language to use in compilation of the <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.LibraryPaths">
      <summary>Gets the property that represents a collection of directory names under which compiler looks for referenced assemblies.</summary>
      <returns>The property that represents a collection of directory names under which compiler looks for referenced assemblies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.UserCodeCompileUnits">
      <summary>Gets or sets the collection of code compile units which will be used in this invocation of the workflow compiler.</summary>
      <returns>The collection of code compile units which will be used in this invocation of the workflow compiler.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerResults">
      <summary>Represents the results of a workflow compilation. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerResults.CompiledUnit">
      <summary>Gets the <see cref="T:System.CodeDom.CodeCompileUnit" /> that was produced during compilation of the workflow.</summary>
      <returns>The <see cref="T:System.CodeDom.CodeCompileUnit" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute">
      <summary>Attribute that contains information about a Workflow markup file. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute" /> class, initializing the values of <see cref="P:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute.FileName" /> and <see cref="P:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute.MD5Digest" />.</summary>
      <param name="fileName">A string that contains the file name of the mark up file.</param>
      <param name="md5Digest">A string representing the <see cref="P:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute.MD5Digest" />for the file.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute.FileName">
      <summary>Gets the name of the file represented by this instance.</summary>
      <returns>The name of the file represented by this instance</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute.MD5Digest">
      <summary>Gets the MD5 hash algorithm computed checksum that is associated with the workflow markup source file. </summary>
      <returns>A <see cref="T:System.String" /> that contains the checksum associated with the workflow markup source file.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException">
      <summary>Represents an <see cref="T:System.Exception" /> that occurs when a workflow does not pass validation. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException" /> class. The exception message is passed as a parameter.</summary>
      <param name="message">The exception message.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException" /> class. The exception message and the inner exception are passed as parameters.</summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The <see cref="P:System.Exception.InnerException" /> associated with this exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException.#ctor(System.String,System.Workflow.ComponentModel.Compiler.ValidationErrorCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException" /> class. The exception message and the errors collection are passed as parameters.</summary>
      <param name="message">The exception message.</param>
      <param name="errors">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> associated with this exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException.Errors">
      <summary>Returns <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" />s that were obtained when creating/validating workflows.</summary>
      <returns>An array that contains each <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> that caused this exception.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException" />. </summary>
      <param name="info">Reference to the object that holds the data needed to serialize and deserialize the exception.</param>
      <param name="context">Provides the means to serialize the exception data.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> classes to and from various other representations.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object of the given source type to an <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> using the specified context.</summary>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type to convert. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to the destination type using the specified context.</summary>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to convert the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to an <see cref="T:System.Workflow.ComponentModel.ActivityBind" />, using the specified context and culture information.</summary>
      <returns>The <see cref="T:System.Object" /> that represents the converted value.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo" />. If not supplied, the current culture is assumed.</param>
      <param name="valueToConvert">The <see cref="T:System.Object" /> to convert.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred while converting <paramref name="valueToConvert" /> to an <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> object to the specified type using the specified context and culture.</summary>
      <returns>The converted object.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> into which the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> will be converted.</param>
      <param name="value">The <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Returns a collection of properties for the type of array specified by the <paramref name="value" /> parameter using the specified context and attributes.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for this data type, or a null reference (Nothing in Visual Basic) if there are no properties.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="value">An <see cref="T:System.Object" /> that specifies the type of array for which to get properties.</param>
      <param name="attributes">An <see cref="T:System.Attribute" /> array that is used as a filter.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns a value indicating whether the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> supports properties using the specified context.</summary>
      <returns>true if <see cref="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> should be called to find the properties of this object; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns a collection of standard values for the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> data type using the specified context.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> that holds a standard set of valid values or a null reference (Nothing in Visual Basic) if the data type does not support a standard set of values.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether the collection of standard values returned from <see cref="Overload:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValues" /> is an exclusive list of possible values, using the specified context.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> returned from <see cref="Overload:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValues" /> is an exhaustive list of possible values; false if other values are possible.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
      <returns>true if <see cref="Overload:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValues" /> should be called to find a common set of values the object supports; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs">
      <summary>Contains information about changes made to the activity associated with the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs.#ctor(System.Workflow.ComponentModel.Activity,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>Initializes an instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs" />.</summary>
      <param name="activity">The Activity associated with the designer that has changed.</param>
      <param name="member">The member of the Activity that has changed.</param>
      <param name="oldValue">The value of the member before the change.</param>
      <param name="newValue">The value of the member after the change.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs.Activity">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Activity" /> that has changed.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> that has changed.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs.Member">
      <summary>The member of the <see cref="T:System.Workflow.ComponentModel.Activity" /> being changed.</summary>
      <returns>A <see cref="T:System.ComponentModel.MemberDescriptor" /> that describes the member that has changed.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs.NewValue">
      <summary>The new value of the member of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that has changed.</summary>
      <returns>The new value of the member that has changed.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs.OldValue">
      <summary>The old value of the member of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that has changed.</summary>
      <returns>The old value of the member that has changed.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesigner">
      <summary>Provides a mandatory base class for all activity designer components.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> class.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.AccessibilityObject">
      <summary>Gets an <see cref="T:System.Windows.Forms.AccessibleObject" /> that accessibility applications use to adjust the application UI for users who have impairments.</summary>
      <returns>The <see cref="T:System.Windows.Forms.AccessibleObject" /> associated with the control.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Activity">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with the designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Bounds">
      <summary>Gets a <see cref="T:System.Drawing.Rectangle" /> which contains the value for the enclosing rectangle of the designer in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that encloses the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.CanBeParentedTo(System.Workflow.ComponentModel.Design.CompositeActivityDesigner)">
      <summary>Gets a value that indicates if a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> can be set as the parent of the activity associated with the designer.</summary>
      <returns>true if a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> can be set as the parent of the activity associated with the designer; otherwise, false.</returns>
      <param name="parentActivityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> which can potentially be set as parent.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.CanConnect(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Returns a value that indicates whether a connection can be created between the specified connection point on the current activity designer and the specified connection point on a target activity designer.</summary>
      <returns>true to indicate that a connection can be created between source and target; otherwise, false.  </returns>
      <param name="source">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> to check on the current activity designer.</param>
      <param name="target">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> to check on the target activity designer.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.CreateView(System.ComponentModel.Design.ViewTechnology)">
      <summary>Creates a workflow view for the current activity designer using the specified ViewTechnology.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> that contains the current activity designer.</returns>
      <param name="viewTechnology">The ViewTechnology to use to create the workflow view.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.DesignerActions">
      <summary>Gets the array of actions associated with configuration errors.</summary>
      <returns>A read-only array of <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.DesignerTheme">
      <summary>Gets the current designer theme for the activity designer.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that contains theme settings for the activity designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> and optionally releases the managed resources.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Dispose(System.Boolean)">
      <summary>Releases the resources used by the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <param name="disposing">true if the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> is being disposed; false if the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> is being finalized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.DoDefaultAction">
      <summary>Performs the default UI action associated with the designer.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.EnableVisualResizing">
      <summary>Gets a value that indicates whether the activity designer can be resized in a free form designer.</summary>
      <returns>true if the activity designer can be resized in a <see cref="T:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.EnsureVisible">
      <summary>Shifts the visible area of the screen to guarantee that the specified designer is visible.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Finalize">
      <summary>Provided as an override to <see cref="M:System.Object.Finalize" /> to clean up any resources deterministically.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetConnectionPoints(System.Workflow.ComponentModel.Design.DesignerEdges)">
      <summary>Returns a read-only collection of connection points for the activity designer along the specified DesignerEdges.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> generic read-only collection that is used as the points at which the activity designer can connect to other activity designers. </returns>
      <param name="edges">The DesignerEdges along which to gather the connection points.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetConnections(System.Workflow.ComponentModel.Design.DesignerEdges)">
      <summary>Returns a read-only collection of points that the designer uses for connections.</summary>
      <returns>A Point read-only collection that contains the connections to use for the activity designer.</returns>
      <param name="edges">The DesignerEdges on which to query for points.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetPreviewImage(System.Drawing.Graphics)">
      <summary>Gets the image of the activity designer on the specified <see cref="T:System.Drawing.Graphics" />.</summary>
      <returns>An <see cref="T:System.Drawing.Image" /> object that contains a bitmap used as a preview image in the drag-and-drop operations and in the <see cref="T:System.Workflow.Activities.ConditionedActivityGroup" /> preview pane.</returns>
      <param name="compatibleGraphics">The <see cref="T:System.Drawing.Graphics" /> object used to draw the image.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetRootDesigner(System.IServiceProvider)">
      <summary>Returns the designer associated with the design surface of the workflow.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> that is the <see cref="P:System.ComponentModel.Design.IDesignerHost.RootComponent" /> of the designer host.</returns>
      <param name="serviceProvider">An <see cref="T:System.Object" /> that implements <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetService(System.Type)">
      <summary>Tries to retrieve the specified type of service from the design mode site for the activity associated with the designer.</summary>
      <returns>An object implementing the requested service or a null reference (Nothing in Visual Basic) if the service cannot be resolved.</returns>
      <param name="serviceType">The type of service to request.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Glyphs">
      <summary>Gets a collection of glyphs with which to adorn the designer.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> that contains the glyphs to display on the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.HitTest(System.Drawing.Point)">
      <summary>Gets information about the ActivityDesigner at a specified point on the screen.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains information about the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> at a specified point.</returns>
      <param name="point">A <see cref="T:System.Drawing.Point" /> that represents a single x,y coordinate.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Image">
      <summary>Gets or sets the <see cref="T:System.Drawing.Image" /> associated with the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> associated with the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.ImageRectangle">
      <summary>Gets the value for the enclosing bounds of the image associated with the designer in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Initialize(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes the designer with the associated <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> with which the designer should be initialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Invalidate">
      <summary>Invalidates the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Invalidate(System.Drawing.Rectangle)">
      <summary>Invalidates the specified rectangle on the designer.</summary>
      <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" /> that specifies the area on the workflow to invalidate.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.InvokingDesigner">
      <summary>Gets or sets the designer of the activity that invokes the activity associated with the current activity designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> to invoke the current activity designer. </returns>
      <exception cref="T:System.NotSupportedException">A set operation was attempted on <see cref="P:System.Workflow.ComponentModel.Design.ActivityDesigner.InvokingDesigner" />.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.IsCommentedActivity(System.Workflow.ComponentModel.Activity)">
      <summary>Returns a Boolean value that indicates whether the current designer's activity is commented or is inside a commented activity.</summary>
      <returns>true if the activity is commented or is inside a commented activity; otherwise, false.</returns>
      <param name="activity">
        <see cref="T:System.Workflow.ComponentModel.Activity" /> in the current activity designer. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsLocked">
      <summary>Gets a value that indicates whether the activity associated with the designer can be modified.</summary>
      <returns>true if the activity associated with the designer can be modified; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsPrimarySelection">
      <summary>Gets a value that indicates if the activity associated with the designer is the primary selection.</summary>
      <returns>true if the activity associated with the designer is the primary selection; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsRootDesigner">
      <summary>Gets a value that indicates whether the designer is a root designer.</summary>
      <returns>true if the designer is a root designer; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsSelected">
      <summary>Gets a value that indicates if the activity associated with the designer is selected.</summary>
      <returns>true if the activity associated with the designer is selected; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.IsSupportedActivityType(System.Type)">
      <summary>Returns a value that indicates whether the specified activity type is supported if the activity designer is a root designer.</summary>
      <returns>true if <paramref name="activityType" /> is a supported activity; otherwise, false. </returns>
      <param name="activityType">The <see cref="T:System.Type" /> is supported.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsVisible">
      <summary>Gets a value that indicates if the activity associated with the designer is visible on the workflow.</summary>
      <returns>true if the activity associated with the designer is visible on the workflow; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.LoadViewState(System.IO.BinaryReader)">
      <summary>Loads the view state of the designer from a binary stream.</summary>
      <param name="reader">A <see cref="T:System.IO.BinaryReader" /> used to restore the designer state.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Location">
      <summary>Gets or sets the location of the designer in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Point" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.MessageFilters">
      <summary>Gets a read-only collection of message filters that are associated with the activity designer.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> read-only collection that includes all standard message filters to associate with the activity designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.MinimumSize">
      <summary>Gets the minimum size for the activity designer.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the minimum size of the activity designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnActivityChanged(System.Workflow.ComponentModel.Design.ActivityChangedEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when the activity it is associated with changes.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnBeginResizing(System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when a user starts to visually resize the activity designer when the designer is in a <see cref="T:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner" />.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnConnected(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when a connection is established between two connection points.</summary>
      <param name="source">The source ConnectionPoint on the current activity designer.</param>
      <param name="target">The target ConnectionPoint on the activity designer to connect to. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragDrop(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Occurs when the drag drop operation is completed inside designer bounds.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Occurs when the drag drop operation is in progress and the pointer enters the designer bounds.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave">
      <summary>Occurs when the drag drop operation is in progress and the pointer leaves the designer bounds.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Occurs when the drag drop operation is in progress and the pointer is within the designer bounds.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnEndResizing">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when a user is finished visually resizing the activity designer when the designer is in a <see cref="T:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnExecuteDesignerAction(System.Workflow.ComponentModel.Design.DesignerAction)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when the user clicks on the configuration errors associated with the designer.</summary>
      <param name="designerAction">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> associated with the configuration error. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="designerAction" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>Updates the visual cues for feedback supplied to the user when performing a drag operation.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is pressed when the designer has the keyboard focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is released when the designer has keyboard focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Notifies the ActivityDesigner when a user repositions its visual cues or child activity designers.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Returns the size of the visual cues or child activity designers on the ActivityDesigner.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that contains the new size settings for the visual cues or child activity designers.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseCaptureChanged">
      <summary>Occurs when the mouse capture changes.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse button is clicked multiple times on the designer.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse button is pressed when the pointer is in designer bounds.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDragBegin(System.Drawing.Point,System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the user starts to drag the mouse on the designer.</summary>
      <param name="initialDragPoint">A <see cref="T:System.Drawing.Point" /> that represents a single x,y coordinate.</param>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data..</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDragEnd">
      <summary>Occurs when the user stops dragging the mouse on the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDragMove(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs on each movement of the mouse as the user drags the pointer over the designer.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseEnter(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse first enters the designer bounds.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseHover(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the pointer is in designer bounds.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseLeave">
      <summary>Occurs when the pointer leaves designer bounds.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the pointer is moving in designer bounds.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse button is released when the pointer is in designer bounds.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws the visual representation of the activity at design time.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnProcessMessage(System.Windows.Forms.Message)">
      <summary>Allows the designer to process raw Win32 messages.</summary>
      <param name="message">A Win32 <see cref="T:System.Windows.Forms.Message" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
      <summary>Controls whether the drag operation should continue.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />  that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnResizing(System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when a user is visually resizing it at design time. The method is only called if the activity designer is a child of a <see cref="T:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner" />. </summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnScroll(System.Windows.Forms.ScrollBar,System.Int32)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when a user changes the scroll position.</summary>
      <param name="sender">The <see cref="T:System.Windows.Forms.ScrollBar" /> on which the user changed position.</param>
      <param name="value">The new scroll position value.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnShowSmartTagVerbs(System.Drawing.Point)">
      <summary>Displays the designer verbs associated with a smart tag at the specified point.</summary>
      <param name="smartTagPoint">A <see cref="T:System.Drawing.Point" /> that designates the location to show the smart tag.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnSmartTagVisibilityChanged(System.Boolean)">
      <summary>Notifies the ActivityDesigner whether a smart tag should be displayed or hidden. </summary>
      <param name="visible">true to indicate the smart tag should be displayed; false to indicate the smart tag should be hidden.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnThemeChange(System.Workflow.ComponentModel.Design.ActivityDesignerTheme)">
      <summary>Notifies the designer that the associated theme has changed.</summary>
      <param name="newTheme">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that contains the event data.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.ParentDesigner">
      <summary>Gets the parent designer of the existing designer.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />. If the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> is a root designer then the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> returned will be the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />; otherwise, the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> will be the parent <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.ParentView">
      <summary>Gets the workflow view that contains the current activity designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> that contains the current activity designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PerformLayout">
      <summary>Updates the layout of the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PointToLogical(System.Drawing.Point)">
      <summary>Transforms a point from screen coordinate system to the activity designer coordinate system.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> that contains the transformed x,y coordinates.</returns>
      <param name="point">A <see cref="T:System.Drawing.Point" /> that contains the coordinates to transform.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PointToScreen(System.Drawing.Point)">
      <summary>Transforms a point from the activity designer coordinate system to the screen coordinate system.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> that contains the transformed x,y coordinates.</returns>
      <param name="point">A <see cref="T:System.Drawing.Point" /> that contains the coordinates to transform.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, it allows a designer to change or remove items from the set of attributes that it exposes through a TypeDescriptor.</summary>
      <param name="attributes">The <see cref="T:System.Collections.IDictionary" /> that contains the TypeID values of the attributes.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PostFilterEvents(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, it allows the designer to change or remove items from the set of events that it exposes through a TypeDescriptor.</summary>
      <param name="events">The <see cref="T:System.Collections.IDictionary" /> that contains the event names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PostFilterProperties(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, it allows a designer to change or remove items from the set of properties that it exposes through a TypeDescriptor.</summary>
      <param name="properties">The <see cref="T:System.Collections.IDictionary" /> that contains the property names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, it allows a designer to add items to the set of attributes that it exposes through a TypeDescriptor.</summary>
      <param name="attributes">The <see cref="T:System.Collections.IDictionary" /> that contains the TypeID values of the attributes.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PreFilterEvents(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, it allows a designer to add items to the set of events that it exposes through a TypeDescriptor.</summary>
      <param name="events">The <see cref="T:System.Collections.IDictionary" /> that contains the event names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to add items to the set of properties that it exposes through a TypeDescriptor.</summary>
      <param name="properties">The <see cref="T:System.Collections.IDictionary" /> that contains the property names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.RectangleToLogical(System.Drawing.Rectangle)">
      <summary>Transforms a rectangle from the screen coordinate system to the activity designer coordinate system.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that describes the transformed coordinates.</returns>
      <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" /> that describes the coordinates to transform.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.RectangleToScreen(System.Drawing.Rectangle)">
      <summary>Transforms a rectangle from the activity designer coordinate system to the screen coordinate system.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that describes the transformed coordinates.</returns>
      <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" /> that describes the coordinates to transform.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.RefreshDesignerActions">
      <summary>Refreshes the configuration errors associated with the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.RefreshDesignerVerbs">
      <summary>Refreshes the activity designer verbs associated with the designer by calling the status handler.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.SaveViewState(System.IO.BinaryWriter)">
      <summary>Stores the view state of the designer into a binary stream.</summary>
      <param name="writer">The <see cref="T:System.IO.BinaryWriter" />  into which the view state is stored.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowInfoTip(System.String)">
      <summary>Shows the specified tooltip.</summary>
      <param name="infoTip">The text to display in the InfoTip.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowInfoTip(System.String,System.String)">
      <summary>Displays the info tip for the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with the specified title and text.</summary>
      <param name="title">A string that contains the title of the info tip.</param>
      <param name="infoTip">A string that contains the info tip text to display.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowInPlaceTip(System.String,System.Drawing.Rectangle)">
      <summary>Displays the specified tool tip in the specified rectangle location.</summary>
      <param name="infoTip">A string that contains the tool tip to display.</param>
      <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" /> that defines the location at which to display the tool tip.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowSmartTag">
      <summary>Gets a value that indicates if the activity should show a smart tag.</summary>
      <returns>true if the activity should show a SmartTag; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Size">
      <summary>Gets or sets the size of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the area of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.SmartTagRectangle">
      <summary>Gets the rectangle where the smart tag should be displayed.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.SmartTagVerbs">
      <summary>Gets a read-only collection of designer actions to associate with a smart tag on the activity designer. </summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> read-only collection to associate with the activity designer's smart tag.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesigner#Component">
      <summary>Gets the base component with which the activity designer is associated. </summary>
      <returns>The <see cref="T:System.ComponentModel.IComponent" /> with which the activity designer is associated.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesigner#DoDefaultAction">
      <summary>Performs the default action associated with the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesigner#Initialize(System.ComponentModel.IComponent)">
      <summary>Initializes the designer with the associated activity.</summary>
      <param name="component">The IComponent to initialize the designer with.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesigner#Verbs">
      <summary>Gets the design-time verbs associated with the activity designer.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> that contains the design-time verbs associated with the activity designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterAttributes(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to change or remove items from the set of attributes that it exposes through a TypeDescriptor.</summary>
      <param name="attributes">The <see cref="T:System.Collections.IDictionary" /> that contains the TypeIDs of the attributes of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterEvents(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to change or remove items from the set of events that it exposes through a TypeDescriptor.</summary>
      <param name="events">The <see cref="T:System.Collections.IDictionary" /> that contains the event names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterProperties(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to change or remove items from the set of properties that it exposes through a TypeDescriptor.</summary>
      <param name="properties">The <see cref="T:System.Collections.IDictionary" /> that contains the property names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterAttributes(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to add items to the set of attributes that it exposes through a TypeDescriptor.</summary>
      <param name="attributes">The <see cref="T:System.Collections.IDictionary" /> that contains the TypeIDs of the attributes of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterEvents(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to add items to the set of events that it exposes through a TypeDescriptor.</summary>
      <param name="events">The <see cref="T:System.Collections.IDictionary" /> that contains the event names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterProperties(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to add items to the set of properties that it exposes through a TypeDescriptor.</summary>
      <param name="properties">The <see cref="T:System.Collections.IDictionary" /> that contains the property names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IRootDesigner#GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>Returns a view object for the specified view technology.</summary>
      <returns>An object that represents the view for this designer.</returns>
      <param name="technology">A <see cref="T:System.ComponentModel.Design.ViewTechnology" /> for which to return the view object. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IRootDesigner#SupportedTechnologies">
      <summary>Gets the array of technologies that the activity designer can support for its display. </summary>
      <returns>An array of supported <see cref="T:System.ComponentModel.Design.ViewTechnology" /> objects.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Drawing#Design#IToolboxUser#GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>Gets a value indicating whether the specified Toolbox item is supported by the current activity designer.</summary>
      <returns>true if the tool is supported by the toolbox and can be enabled; otherwise, false.</returns>
      <param name="toolboxItem">The <see cref="T:System.Drawing.Design.ToolboxItem" /> to test for support.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Drawing#Design#IToolboxUser#ToolPicked(System.Drawing.Design.ToolboxItem)">
      <summary>Selects the specified toolbox item.</summary>
      <param name="toolboxItem">The <see cref="T:System.Drawing.Design.ToolboxItem" />  to select.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IPersistUIState#LoadViewState(System.IO.BinaryReader)">
      <summary>Restores the view state from a binary stream.</summary>
      <param name="reader">The <see cref="T:System.IO.BinaryReader" /> to load the view state from.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IPersistUIState#SaveViewState(System.IO.BinaryWriter)">
      <summary>Saves the view state to a binary stream.</summary>
      <param name="writer">A <see cref="T:System.IO.BinaryWriter" /> to save the view state to.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IWorkflowRootDesigner#InvokingDesigner">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that requested the activity designer be initialized. </summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that requested the activity designer be initialized.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IWorkflowRootDesigner#IsSupportedActivityType(System.Type)">
      <summary>Returns a value that indicates whether the specified type is supported on the current <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />. </summary>
      <returns>true if <paramref name="type" /> is supported on the current workflow designer; otherwise, false.</returns>
      <param name="activityType">The <see cref="T:System.Type" /> of the activity to check for support on the activity designer. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IWorkflowRootDesigner#MessageFilters">
      <summary>Gets any message filters associated with the activity designer. </summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> read-only collection that contains any message filters associated with the workflow root designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IWorkflowRootDesigner#SupportsLayoutPersistence">
      <summary>Gets the value that indicates whether the actual workflow root designer supports the layout persistence.</summary>
      <returns>true when the designer supports layout persistence; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Text">
      <summary>Gets or sets the text to associate with the designer.</summary>
      <returns>A <see cref="T:System.String" /> that contains the text to associate with the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.TextRectangle">
      <summary>Gets the value of the text rectangle in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that contains the text associated with the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Verbs">
      <summary>Gets the collection of verbs to be associated with the designer.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection" />. </returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject">
      <summary>Implements an accessible object that <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> classes use to adjust the designer user interface for users who have impairments.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" /> class by using the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> which to apply the accessible object.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.ActivityDesigner">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to which the accessible object is applied.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to which the accessibility object is applied.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Bounds">
      <summary>Gets the location and size of the accessible object.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds of the accessible object.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.DefaultAction">
      <summary>Gets a string that describes the default action of the activity designer. </summary>
      <returns>A description of the default action associated with the activity designer, or a null reference (Nothing in Visual Basic) if the object has no default action.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Description">
      <summary>Gets a string that describes the visual appearance of the activity designer. </summary>
      <returns>A description of the activity designer's visual appearance, or a null reference (Nothing in Visual Basic) if the object has no description.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.DoDefaultAction">
      <summary>Performs the default action associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.GetService(System.Type)">
      <summary>Returns the service defined by the specified type that is associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the requested service, or a null reference (Nothing in Visual Basic) if the service cannot be resolved.</returns>
      <param name="serviceType">The service <see cref="T:System.Type" /> to request.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Help">
      <summary>Gets a description of what the activity associated with the activity designer does or how it is used.</summary>
      <returns>A string that contains the description of what the activity associated with the activity designer does or how it is used, or a null reference (Nothing in Visual Basic) if no help is defined.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with the accessible object's <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> or a null reference (Nothing in Visual Basic) if the property has not been set.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
      <summary>Returns the <see cref="T:System.Windows.Forms.AccessibleObject" /> associated with the location defined by the specified <see cref="T:System.Windows.Forms.AccessibleNavigation" />.</summary>
      <returns>The <see cref="T:System.Windows.Forms.AccessibleObject" /> at the specified location.</returns>
      <param name="navdir">One of the <see cref="T:System.Windows.Forms.AccessibleNavigation" /> values.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Parent">
      <summary>Gets the parent of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" />.</summary>
      <returns>The <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the parent of the current <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" /> or a null reference (Nothing in Visual Basic) if there it no parent accessible object.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Role">
      <summary>Gets the role of the current <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" />.</summary>
      <returns>One of the <see cref="T:System.Windows.Forms.AccessibleRole" /> values, or <see cref="F:System.Windows.Forms.AccessibleRole.None" /> if no role has been specified.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Select(System.Windows.Forms.AccessibleSelection)">
      <summary>Modifies the selection or moves the keyboard focus of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" />.</summary>
      <param name="flags">One of the <see cref="T:System.Windows.Forms.AccessibleSelection" /> values.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.State">
      <summary>Gets the accessible state of the current <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" />.</summary>
      <returns>A combination of <see cref="T:System.Windows.Forms.AccessibleStates" /> values.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection">
      <summary>Exposes a generic <see cref="T:System.Collections.Generic.List`1" /> of designer glyphs associated with an activity designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> class that is empty and has the default initial capacity. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Design.DesignerGlyph})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> class that contains elements copied from the specified generic collection of <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />, and has sufficient capacity to accommodate the number of elements copied.</summary>
      <param name="glyphs">Enumerable generic collection containing <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> objects.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection.#ctor(System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> class that contains elements copied from the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> and has sufficient capacity to accommodate the number of elements copied. </summary>
      <param name="glyphs">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> from which to copy collection elements.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs">
      <summary>Provides data for the layout event for the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs.#ctor(System.Drawing.Graphics,System.Workflow.ComponentModel.Design.ActivityDesignerTheme)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> class with the specified graphics and designer theme.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used the layout the designer.</param>
      <param name="designerTheme">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> to use for look and feel.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs.AmbientTheme">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> associated with the root workflow.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> that contains theme information for the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs.DesignerTheme">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> associated with the designer.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that describes the designer look and feel.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs.Graphics">
      <summary>Gets the <see cref="T:System.Drawing.Graphics" /> used to lay out the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Graphics" /> object used to lay out the designer.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializer">
      <summary>Serializes an activity designer layout used in a freeform designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializer.#ctor">
      <summary>Serializes an activity designer layout used in a freeform designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializer.CreateInstance(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Type)">
      <summary>Creates an instance of the specified <see cref="T:System.Type" /> using the specified <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</summary>
      <returns>An instance of the specified <see cref="T:System.Type" />. </returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> supporting this operation.</param>
      <param name="type">The specified <see cref="T:System.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializer.GetProperties(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves information about all properties associated with the specified object.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> array that contains information about the properties associated with <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> supporting this operation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for properties.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> or <paramref name="obj" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializer.OnBeforeSerialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Performs required processing on obj before the serialization process begins.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> supporting this operation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for properties.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaint">
      <summary>Provides static methods used to draw user interface elements on activity designer surfaces. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.Draw3DButton(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Windows.Forms.ButtonState)">
      <summary>Draws a 3-dimensional button on the activity designer surface.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the 3-dimensional button.</param>
      <param name="image">The <see cref="T:System.Drawing.Image" /> to draw on the button.</param>
      <param name="bounds">The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds of the button.</param>
      <param name="transparency">The single-precision floating-point number to specify the transparency level of the button.</param>
      <param name="buttonState">The <see cref="T:System.Windows.Forms.ButtonState" /> enumeration value to specify the appearance of the button.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphics" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.DrawExpandButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Workflow.ComponentModel.Design.CompositeDesignerTheme)">
      <summary>Draws a button that is used to expand and collapse composite designers on the activity designer surface.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the button.</param>
      <param name="boundingRect">The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds of the button.</param>
      <param name="drawExpanded">true to draw an expanded button; otherwise, false. </param>
      <param name="compositeDesignerTheme">The <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> associated with the activity designer used to render the button.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphics" /> or <paramref name="compositeDesignerTheme" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Workflow.ComponentModel.Design.DesignerContentAlignment,System.Single,System.Boolean)">
      <summary>Draws an image on the activity designer surface by using a <see cref="T:System.Drawing.Graphics" />, an <see cref="T:System.Drawing.Image" />, a source and destination <see cref="T:System.Drawing.Rectangle" />, an <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" />, a single-precision floating-point number, and a Boolean value.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the image.</param>
      <param name="image">The <see cref="T:System.Drawing.Image" /> to draw.</param>
      <param name="destination">The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds of the image.</param>
      <param name="source">The <see cref="T:System.Drawing.Rectangle" /> that defines the source of the image.</param>
      <param name="alignment">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" /> that specifies how the image is aligned in the bounding rectangle.</param>
      <param name="transparency">A single-precision floating-point number that defines the transparency settings for the image.</param>
      <param name="grayscale">true to draw the image in grayscales; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphics" />, <paramref name="image" />, <paramref name="destination" />, or <paramref name="source" /> contains a null reference (Nothing in Visual Basic).-or-<paramref name="transparency" /> is less than 0, or greater than 1.0f.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Workflow.ComponentModel.Design.DesignerContentAlignment)">
      <summary>Draws an image on the activity designer surface by using a <see cref="T:System.Drawing.Graphics" />, an <see cref="T:System.Drawing.Image" />, a <see cref="T:System.Drawing.Rectangle" />, and a <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" />.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the image.</param>
      <param name="image">The <see cref="T:System.Drawing.Image" /> to draw.</param>
      <param name="destination">The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds of the image to draw.</param>
      <param name="alignment">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" /> that specifies how the image is aligned in the bounding rectangle.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphics" />, <paramref name="image" />, or <paramref name="destination" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.DrawRoundedRectangle(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Rectangle,System.Int32)">
      <summary>Draws a rounded rectangle on the activity designer surface.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the rectangle.</param>
      <param name="drawingPen">The <see cref="T:System.Drawing.Pen" /> to draw the rectangle.</param>
      <param name="rectangle">The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds of the rounded rectangle.</param>
      <param name="radius">The integer value of the radius to use for the rounded edges.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphics" /> or <paramref name="drawingPen" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.DrawText(System.Drawing.Graphics,System.Drawing.Font,System.String,System.Drawing.Rectangle,System.Drawing.StringAlignment,System.Workflow.ComponentModel.Design.TextQuality,System.Drawing.Brush)">
      <summary>Draws text on the activity designer surface.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the text.</param>
      <param name="font">The <see cref="T:System.Drawing.Font" /> used to draw the text</param>
      <param name="text">The text to draw.</param>
      <param name="boundingRect">The bounding <see cref="T:System.Drawing.Rectangle" /> in which the text must be drawn.</param>
      <param name="alignment">The <see cref="T:System.Drawing.StringAlignment" /> that specifies where the text is aligned in the bounding rectangle.</param>
      <param name="textQuality">The <see cref="T:System.Workflow.ComponentModel.Design.TextQuality" /> that specifies the quality setting to draw the text.</param>
      <param name="textBrush">The <see cref="T:System.Drawing.Brush" /> to draw the text.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphics" />, <paramref name="font" />, <paramref name="text" />, or <paramref name="textBrush" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.GetRoundedRectanglePath(System.Drawing.Rectangle,System.Int32)">
      <summary>Returns the graphics path used to draw the specified rounded rectangle.</summary>
      <returns>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> that draws the rounded path of the specified rectangle.</returns>
      <param name="rectangle">The <see cref="T:System.Drawing.Rectangle" /> for which to obtain the graphics path.</param>
      <param name="radius">An integer that defines the radius to use to draw the rounded corners.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rectangle" /> is set to <see cref="P:System.Drawing.Rectangle.IsEmpty" />.-- or --<paramref name="radius" /> is less than or equal to 0.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs">
      <summary>Provides data for the <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)" />, <see cref="M:System.Workflow.ComponentModel.Design.ConnectionPoint.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs,System.Boolean)" />, <see cref="M:System.Workflow.ComponentModel.Design.Connector.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)" />, and <see cref="M:System.Workflow.ComponentModel.Design.DesignerGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)" /> methods and any overridden versions of OnPaint in classes that derive from them, when they are drawn on a workflow design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Workflow.ComponentModel.Design.ActivityDesignerTheme)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> class with the specified graphics, clipping rectangle, viewport and designer theme. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to draw the item.</param>
      <param name="clipRectangle">The <see cref="T:System.Drawing.Rectangle" /> that represents the rectangle in which to draw.</param>
      <param name="viewPort">The view port in which to draw.</param>
      <param name="designerTheme">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> associated with the object to draw.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs.AmbientTheme">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> associated with the workflow design surface.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> that contains theme information for the workflow.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs.ClipRectangle">
      <summary>Gets the <see cref="T:System.Drawing.Rectangle" /> in which to draw.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that describes the area to draw.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs.DesignerTheme">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> associated with the designer.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that describes the designer look and feel.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs.Graphics">
      <summary>Gets the <see cref="T:System.Drawing.Graphics" /> used to draw the item on the workflow design surface.</summary>
      <returns>The <see cref="T:System.Drawing.Graphics" /> used to draw the item on the workflow design surface.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs">
      <summary>Provides data for the <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnBeginResizing(System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs)" /> and <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnResizing(System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs)" /> methods.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs.#ctor(System.Workflow.ComponentModel.Design.DesignerEdges,System.Drawing.Rectangle)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs" /> class by using the specified <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> value and <see cref="T:System.Drawing.Rectangle" />. </summary>
      <param name="sizingEdge">A <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> to use to resize the activity designer.</param>
      <param name="newBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the resized bounds of the activity designer.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs.Bounds">
      <summary>Gets the new bounding rectangle for the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the new bounds of the activity designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs.SizingEdge">
      <summary>Gets the designer edge used to resize the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> on the workflow design surface.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> used to resize the activity designer on the workflow design surface.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme">
      <summary>Provides the look and feel property settings to a designer in a design-time environment.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)">
      <summary>Initializes an instance of an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" />.</summary>
      <param name="theme">A <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> that contains the theme information for the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BackColorEnd">
      <summary>Gets or sets the <see cref="T:System.Drawing.Color" /> to end with when using a color gradient for the background color.</summary>
      <returns>The background ending <see cref="T:System.Drawing.Color" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BackColorStart">
      <summary>Gets or sets the starting color of the background when using a color gradient on the background.</summary>
      <returns>The background starting <see cref="T:System.Drawing.Color" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BackgroundStyle">
      <summary>Gets or sets the background style.</summary>
      <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientMode" /> that describes the background style.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BoldFont">
      <summary>Gets the font for the theme.</summary>
      <returns>The <see cref="T:System.Drawing.Font" /> of the theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderColor">
      <summary>Gets or sets the <see cref="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderColor" /> for the theme.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> that represents the <see cref="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderColor" /> of the theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderPen">
      <summary>Gets the BorderPen for the theme.</summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> that represents the <see cref="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderPen" /> of the theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderStyle">
      <summary>Gets or sets the style used for the border.</summary>
      <returns>A <see cref="T:System.Drawing.Drawing2D.DashStyle" /> enumeration that represents the style used for the border.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderWidth">
      <summary>Gets the width of the border in pixels.</summary>
      <returns>The width of the border in pixels.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.DesignerGeometry">
      <summary>Gets the geometry of the designer.</summary>
      <returns>An enumeration that describes the geometry of the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.DesignerImage">
      <summary>Gets the image associated with the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> to display for the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.DesignerImagePath">
      <summary>Gets or sets the image path for the designer.</summary>
      <returns>The image path for the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources and optionally releases the managed resources used by <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.Font">
      <summary>Gets the font of the text used by the theme.</summary>
      <returns>The font of the designer theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.ForeColor">
      <summary>Gets or sets the color of the foreground.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> that represents the foreground color of the theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.ForegroundBrush">
      <summary>Gets the <see cref="T:System.Drawing.Brush" /> object associated with the theme.</summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> object associated with the theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.ForegroundPen">
      <summary>Gets the <see cref="T:System.Drawing.Pen" /> used for painting the foreground of the theme.</summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> that is used to paint the foreground of the theme.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.GetBackgroundBrush(System.Drawing.Rectangle)">
      <summary>Gets a brush used to paint the area specified by the rectangle passed.</summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> that is used to fill interiors of graphical shapes such as rectangles, ellipses, pies, polygons, and paths.</returns>
      <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" /> that specifies the location and size of the area on the background.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.ImageSize">
      <summary>Gets the size of the image of the theme.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the size of the image.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.Initialize">
      <summary>Initializes the designer theme.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.OnAmbientPropertyChanged(System.Workflow.ComponentModel.Design.AmbientProperty)">
      <summary>Called to signal changes to ambient settings.</summary>
      <param name="ambientProperty">The property that has changed.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.Size">
      <summary>Gets the size of the designer.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the size of the designer.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute">
      <summary>Specifies the theme class an activity designer uses on the workflow design surface. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute" /> class by using the specified designer theme type.</summary>
      <param name="designerThemeType">A <see cref="T:System.Type" /> that represents the designer theme to be associated with the designer class.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute.DesignerThemeType">
      <summary>Gets the type of the theme class that encapsulates the designer theme settings to apply to the activity designer.</summary>
      <returns>A <see cref="T:System.Type" /> that encapsulates the designer theme settings.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute.Xml">
      <summary>Gets or sets an XML string that defines default property settings for the activity designer.</summary>
      <returns>A string that contains the default theme property settings in XML format.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb">
      <summary>Creates a new verb to be used with the designer using the associated verb group, text and event handler.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerVerb.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Workflow.ComponentModel.Design.DesignerVerbGroup,System.String,System.EventHandler)">
      <summary>Initializes an instance of an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> by using an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />, a <see cref="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup" /> value, a description of the verb, and an <see cref="T:System.EventHandler" />.</summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to associate with the new verb.</param>
      <param name="verbGroup">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup" /> in which the new verb belongs.</param>
      <param name="text">The description of the verb to show on the menu.</param>
      <param name="invokeHandler">The <see cref="T:System.EventHandler" /> that will handle the menu selection event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is empty or a null reference (Nothing in Visual Basic).-or-<paramref name="invokeHandler" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerVerb.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Workflow.ComponentModel.Design.DesignerVerbGroup,System.String,System.EventHandler,System.EventHandler)">
      <summary>Initializes an instance of a <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> by using an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />, a <see cref="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup" /> value, a description of the verb, and two <see cref="T:System.EventHandler" /> objects, one to handle menu selection events and the other to handle status updates. </summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to associate with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" />.</param>
      <param name="verbGroup">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup" /> in which this <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> belongs.</param>
      <param name="text">The description of the verb to show on the menu.</param>
      <param name="invokeHandler">The event handler that handles the menu selection event.</param>
      <param name="statusHandler">The event handler that handles status updates.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerVerb.CommandID">
      <summary>Gets a new <see cref="T:System.ComponentModel.Design.CommandID" /> for an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" />.</summary>
      <returns>A new <see cref="P:System.Workflow.ComponentModel.Design.ActivityDesignerVerb.CommandID" /> object.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerVerb.Group">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup" /> object.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerVerb.OleStatus">
      <summary>Gets an integer that describes the status of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" />.</summary>
      <returns>An int that describes the OleStatus of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection">
      <summary>Maintains a collection of <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection.#ctor">
      <summary>Initializes an instance of an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Design.ActivityDesignerVerb})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection" /> class by using the specified generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of verbs. </summary>
      <param name="verbs">A generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> objects. </param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs">
      <summary>Represents a class that provides data for the <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragDrop(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)" />, <see cref="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnDragEnter(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)" />, and <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)" /> events in the workflow designer.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDragEventArgs.Activities">
      <summary>Gets a collection of activities upon which a drag-and-drop operation is performed.</summary>
      <returns>A read-only collection that contains all <see cref="T:System.Workflow.ComponentModel.Activity" /> objects on which the drag-and-drop operation is performed.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDragEventArgs.DragImageSnapPoint">
      <summary>Gets or sets the location where the activities are to be dropped on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> that defines the location on the workflow design surface where the activities will be dropped.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDragEventArgs.DragInitiationPoint">
      <summary>Gets the <see cref="T:System.Drawing.Point" /> on the workflow design surface where a drag operation began.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> that defines the location on the workflow design surface where the drag operation began.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner">
      <summary>Displays a collection of child activity designers in a preview strip and, when a child designer is selected on the preview strip, displays the selected activity designer in preview or edit mode on a workflow design surface. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.AccessibilityObject">
      <summary>Gets an <see cref="T:System.Windows.Forms.AccessibleObject" /> that allows the designer to adjust its UI for users with disabilities.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that allows the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> to adjust its UI for users who have impairments.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.ContainedDesigners">
      <summary>Gets a collection of activity designers that are displayed by the activity preview designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> read-only collection that contains the designers displayed by <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.CurrentDropTarget">
      <summary>Gets or sets the index of the current drop target in the array of drop targets returned by <see cref="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.GetDropTargets(System.Drawing.Point)" />.</summary>
      <returns>An integer that represents the index of the current drop target for the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release the managed resources; otherwise, false. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.EnsureVisibleContainedDesigner(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Ensures that the specified activity designer is visible on the workflow design surface.</summary>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> for which to ensure visibility on the workflow design surface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.FirstSelectableObject">
      <summary>Gets the first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>An <see cref="T:System.Object" /> that is the first selectable object in the designer navigation order.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.GetConnectors">
      <summary>Returns an array of rectangles that bound the activity designer's connectors.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> array that defines the bounds of all connectors in the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.GetDropTargets(System.Drawing.Point)">
      <summary>Returns an array of rectangles that represent the valid drop locations within the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> array that represents the valid drop locations within the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</returns>
      <param name="dropPoint">The <see cref="T:System.Drawing.Point" /> that defines the x- and y-coordinates for the drop target.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.GetNextSelectableObject(System.Object,System.Workflow.ComponentModel.Design.DesignerNavigationDirection)">
      <summary>Returns the first selectable object that follows the specified object in the navigation order of the current <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>The first selectable <see cref="T:System.Object" /> that follow <paramref name="obj" /> in the navigation order. </returns>
      <param name="obj">The current object in the navigation order.</param>
      <param name="direction">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerNavigationDirection" /> enumeration value that specifies the direction in which designer navigation occurs.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.Glyphs">
      <summary>Gets a read-only collection of glyphs that are associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> read-only collection that contains the glyphs associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.HelpText">
      <summary>Gets or sets the text to display when the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> contains no other activity designers. </summary>
      <returns>A string that contains the text to display on the designer surface</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.HitTest(System.Drawing.Point)">
      <summary>Returns information about the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> at the specified coordinates on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains information about the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> at the specified coordinates</returns>
      <param name="point">The <see cref="T:System.Drawing.Point" /> that contains the coordinates on the workflow design surface from which to gather information.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.Initialize(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes the designer used by the specified activity.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> for which to initialize the designer.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.IsContainedDesignerVisible(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Returns a value that indicates whether the specified activity designer is visible in the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>true if <paramref name="containedDesigner" /> is visible; otherwise, false. </returns>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.LastSelectableObject">
      <summary>Gets the last selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>The <see cref="T:System.Object" /> that is the last selectable object in the designer navigation order.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.LoadViewState(System.IO.BinaryReader)">
      <summary>Loads the view state of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> from a binary stream.</summary>
      <param name="reader">The <see cref="T:System.IO.BinaryReader" /> used to restore the designer view state.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> contains a null reference (Nothing in Visual Basic)</exception>
      <exception cref="T:System.Exception">The designer host associated with the designer is a null reference (Nothing).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.Location">
      <summary>Gets or sets the location of the designer in logical coordinates on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> that contains the x- and y-coordinates associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> on the workflow design surface.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnContainedActivitiesChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Notifies the designer that the number of activities contained in the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> has changed.</summary>
      <param name="listChangeArgs">The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="listChangeArgs" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnDragEnter(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor enters the bounds of the designer.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnDragOver(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor is inside the bounds of the designer.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Performs layout tasks to position visual cues and child designers on the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Sets the size of the visual cues on the designers contained within the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that contains the new size settings for the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> when the user double-clicks on the surface of the activity designer.</summary>
      <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> when the user presses the mouse button down while the pointer is in designer bounds.</summary>
      <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnMouseLeave">
      <summary>Notifies the designer when the user moves the mouse cursor out of designer bounds. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>Notifies the designer when the user releases the mouse button in the designer bounds.</summary>
      <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws the visual representation of the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> at design time.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnThemeChange(System.Workflow.ComponentModel.Design.ActivityDesignerTheme)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> that its associated theme has changed.</summary>
      <param name="newTheme">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that contains the updated theme property settings.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.PreviewedDesigner">
      <summary>Gets the designer to preview in the preview section of the activity designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to display in the preview section of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.  </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.RefreshDesignerActions">
      <summary>Updates the configuration errors associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.RefreshPreview">
      <summary>Updates the view displayed in the preview window of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.SaveViewState(System.IO.BinaryWriter)">
      <summary>Stores the current view state of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> to a binary stream.</summary>
      <param name="writer">The <see cref="T:System.IO.BinaryWriter" /> to which the current designer view state is stored. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> contains null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.ShowPreview">
      <summary>Gets or sets a value indicating whether the activity preview should be displayed in the designer. </summary>
      <returns>true to display the activity preview in the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />; otherwise, false. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.Verbs">
      <summary>Gets the collection of verbs to associate with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection" /> that contains the verbs associated with <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme">
      <summary>Provides theme settings for activity designers that use a preview mode on the workflow design surface. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme" /> class. </summary>
      <param name="theme">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> that the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme" /> is associated with.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.Initialize">
      <summary>Performs any additional initialization tasks for <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme" /> that is not performed by <see cref="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.OnAmbientPropertyChanged(System.Workflow.ComponentModel.Design.AmbientProperty)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme" /> that the ambient property settings for the designer have changed. </summary>
      <param name="ambientProperty">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientProperty" /> enumeration value that the activity preview designer theme should now use.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.PreviewBackColor">
      <summary>Gets or sets the color set to associate with the background of the activity preview section of the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Color" /> to associate with the background of the activity preview section of the designer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.PreviewBorderColor">
      <summary>Gets or sets the color set to associate with the border of the activity preview section of the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Color" /> to associate with the border of the activity preview section of the designer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.PreviewForeColor">
      <summary>Gets or sets the color set to associate with the foreground of the activity preview section of the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Color" /> to associate with the foreground of the activity preview section of the designer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityToolboxItem">
      <summary>Provides a base class for all toolbox items associated with an activity in a workflow designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityToolboxItem" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityToolboxItem" /> class by using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds information to deserialize the toolbox item.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that provides the deserialization context for the toolbox item.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityToolboxItem" /> class that creates the specified type of <see cref="T:System.Workflow.ComponentModel.Activity" /> component. </summary>
      <param name="type">The type of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that the toolbox item will create. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.CreateComponentsCore(System.ComponentModel.Design.IDesignerHost)">
      <summary>Creates an <see cref="T:System.Workflow.ComponentModel.Activity" /> component or an array of <see cref="T:System.Workflow.ComponentModel.Activity" /> components when the toolbox item is invoked.</summary>
      <returns>An array of created <see cref="T:System.ComponentModel.IComponent" /> objects.</returns>
      <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> to host the toolbox item.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.CreateComponentsWithUI(System.ComponentModel.Design.IDesignerHost)">
      <summary>Creates an <see cref="T:System.Workflow.ComponentModel.Activity" /> component or an array of <see cref="T:System.Workflow.ComponentModel.Activity" /> components that generate a dialog box on the design surface when the toolbox item is invoked.</summary>
      <returns>An array of created <see cref="T:System.ComponentModel.IComponent" /> objects.</returns>
      <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> to host the toolbox item.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.GetToolboxDisplayName(System.Type)">
      <summary>Gets the associated display name for the Toolbox item in the Toolbox.</summary>
      <returns>String representing the display name for the Toolbox item</returns>
      <param name="activityType">The type of the <see cref="T:System.Workflow.ComponentModel.Activity" /> to retrieve the display name for.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.GetToolboxImage(System.Type)">
      <summary>Gets the associated Image that is used to represent the Toolbox item in the Toolbox.</summary>
      <returns>Image object displayed in the Toolbox for a Toolbox item</returns>
      <param name="activityType">The type of the <see cref="T:System.Workflow.ComponentModel.Activity" /> to retrieve the Toolbox image for.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.AmbientProperty">
      <summary>Specifies the source of ambient theme settings for designer theme classes.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.AmbientProperty.DesignerSize">
      <summary>The ambient theme settings are obtained from the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> class associated with the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.AmbientProperty.OperatingSystemSetting">
      <summary>The ambient theme settings are obtained from the operating system.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.AmbientTheme">
      <summary>Provides the look and feel property settings to a top-level workflow in a design-time environment.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.AmbientTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> class by using a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />. </summary>
      <param name="theme">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> with which the ambient theme is associated.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.BackColor">
      <summary>Gets or sets the ambient back color on a workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the ambient background color. The default is white.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.BackgroundBrush">
      <summary>Gets the ambient brush used to fill graphical shapes displayed on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> value that represents the background brush of the workflow on a design surface. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.BoldFont">
      <summary>Gets the ambient bold font setting for the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> value that determines whether the text on the workflow design surface is bold. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.BorderWidth">
      <summary>Gets the ambient border width for objects that are placed onto the workflow design surface. </summary>
      <returns>An integer that represents the border width of objects placed on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.CommentIndicatorBrush">
      <summary>Gets the ambient brush associated with commented designers on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> that is associated with commented designers on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.CommentIndicatorColor">
      <summary>Gets or sets the ambient color associated with commented designers on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that is associated with commented designers on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.CommentIndicatorPen">
      <summary>Gets the ambient pen associated with commented designers on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> value that is associated with commented designers on the workflow design surface. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DesignerSize">
      <summary>Gets or sets the ambient size settings for activity designers on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerSize" /> enumeration value that determines the size of activity designers on the workflow design surface. The default value is <see cref="F:System.Workflow.ComponentModel.Design.DesignerSize.Medium" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.AmbientTheme.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DrawGrayscale">
      <summary>Gets or sets a value indicating whether the ambient theme associated with the workflow design surface draws grayscales. </summary>
      <returns>true if the ambient theme associated with the workflow draws grayscales; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DrawRounded">
      <summary>Gets or sets a value indicating whether the ambient theme associated with the workflow design surface draws rounded shapes. </summary>
      <returns>true if the ambient theme associated with the workflow draws rounded shapes; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DrawShadow">
      <summary>Gets or sets a value indicating whether the ambient theme associated with the workflow design surface draws shadows.</summary>
      <returns>true if the ambient theme associated with the workflow draws shadows; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DropIndicatorBrush">
      <summary>Gets the ambient brush associated with an object that you drag onto the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> associated with an object that you drag onto the workflow design surface. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DropIndicatorColor">
      <summary>Gets or sets the ambient color associated with an object that you drags onto the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value associated with an object that you drag onto the workflow design surface. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DropIndicatorPen">
      <summary>Gets the ambient pen associated with an object that you drag onto the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> associated with an object that you drag onto the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.Font">
      <summary>Gets the ambient font settings for the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Font" /> that represents the ambient font settings for the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.FontName">
      <summary>Gets or sets the ambient font name for the workflow design surface. </summary>
      <returns>A string that represents the ambient font name for the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ForeColor">
      <summary>Gets or sets the ambient fore color property for the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the ambient fore color for the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ForegroundBrush">
      <summary>Gets the ambient foreground brush for the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> value that represents the ambient foreground brush.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ForegroundPen">
      <summary>Gets the ambient foreground pen for the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> value that represents the ambient foreground pen.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.GlyphSize">
      <summary>Gets the ambient height and width of glyphs on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Size" /> value that represents the ambient height and width of glyphs on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.GridColor">
      <summary>Gets or sets the ambient grid color for the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the grid color for the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.GridSize">
      <summary>Gets the ambient size of the grid to display on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> value that represents the height and width of the grid to display on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.GridStyle">
      <summary>Gets or sets the ambient grid style for the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Drawing2D.DashStyle" /> value that represents the dash style for the grid. The default setting is <see cref="F:System.Drawing.Drawing2D.DashStyle.Dash" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.AmbientTheme.Initialize">
      <summary>Performs additional initialization tasks for the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> class that are not performed by the <see cref="M:System.Workflow.ComponentModel.Design.AmbientTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" />.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.MajorGridBrush">
      <summary>Gets the ambient brush settings for major grids on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> associated with the major grid on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.MajorGridPen">
      <summary>Gets the ambient pen settings for major grids on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> associated with the major grid on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.Margin">
      <summary>Gets the ambient margin settings for the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the margin settings on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.MinorGridPen">
      <summary>Gets the ambient pen settings for minor grids on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> associated with the minor grid on the workflow design surface.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.AmbientTheme.OnAmbientPropertyChanged(System.Workflow.ComponentModel.Design.AmbientProperty)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> when the value of the <see cref="T:System.Workflow.ComponentModel.Design.AmbientProperty" /> enumeration changes. </summary>
      <param name="ambientProperty">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientProperty" /> enumeration value to which the setting was changed.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ReadonlyIndicatorBrush">
      <summary>Gets the ambient brush used to fill graphical shapes associated with read-only items displayed on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> that represents the brush associated with read-only items on the workflow on a design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ReadonlyIndicatorColor">
      <summary>Gets or sets the ambient color for read-only items on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the ambient color for read-only items on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.SelectionForeColor">
      <summary>Gets or sets the ambient color for selected items on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the ambient color for read-only items on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.SelectionForegroundBrush">
      <summary>Gets the ambient foreground brush used to fill graphical shapes associated with selected items displayed on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> that represents the brush associated with read-only items on the workflow on a design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.SelectionForegroundPen">
      <summary>Gets the ambient foreground pen settings for selected items on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> associated with the foreground of selected items on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.SelectionPatternColor">
      <summary>Gets or sets the ambient pattern color for items that you select on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the ambient pattern color for items that you select on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.SelectionPatternPen">
      <summary>Gets the ambient pen settings for the pattern associated with selected items on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> associated with the pattern of selected items on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.SelectionSize">
      <summary>Gets the ambient size of a selected item on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the ambient property settings for selected items on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ShowConfigErrors">
      <summary>Gets or sets a value that indicates whether the workflow design surface displays configuration errors.</summary>
      <returns>true if the workflow design surface is to display configuration errors; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ShowDesignerBorder">
      <summary>Gets or sets a value indicating whether the workflow design surface displays designer borders. </summary>
      <returns>true if the workflow design surface displays designer borders; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ShowGrid">
      <summary>Gets or sets a value indicating whether grids will be shown on the workflow design surface. </summary>
      <returns>true if grids will be displayed on the workflow design surface; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.TextQuality">
      <summary>Gets or sets the text quality to display on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.TextQuality" /> that specifies the text quality settings to use on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.UseOperatingSystemSettings">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> uses the theme settings of the operating system. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> uses theme settings of the operating system; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.WatermarkAlignment">
      <summary>Gets or sets the ambient alignment settings for watermark images on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" /> that specifies the ambient alignment settings for watermark images on the workflow design surface. The default is <see cref="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.BottomRight" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.WatermarkImagePath">
      <summary>Gets or sets the ambient path to the image to display as a watermark on the workflow design surface.</summary>
      <returns>A string that contains the ambient path to the image to display as a watermark on the workflow design surface. The default is an empty string.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.WorkflowWatermarkImage">
      <summary>Gets the ambient image to associate with the workflow design surface as its watermark.</summary>
      <returns>An <see cref="T:System.Drawing.Image" /> to use as a watermark on the workflow design surface.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.BindUITypeEditor">
      <summary>Represents a <see cref="T:System.Drawing.Design.UITypeEditor" /> that is associated with the properties that are bound, or can be bound, on an activity.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.BindUITypeEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.BindUITypeEditor" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.BindUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>Edits the value of the specified object using the editor style indicated by <see cref="Overload:System.Workflow.ComponentModel.Design.BindUITypeEditor.GetEditStyle" />.</summary>
      <returns>The new value of the object. </returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> that the editor can use to obtain services.</param>
      <param name="value">The value of the object to edit.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.BindUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns the editor style used by the <see cref="Overload:System.Workflow.ComponentModel.Design.BindUITypeEditor.EditValue" /> method.</summary>
      <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates the style of editor used by <see cref="Overload:System.Workflow.ComponentModel.Design.BindUITypeEditor.EditValue" />.</returns>
      <param name="typeDescriptorContext">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.CommentGlyph">
      <summary>Provides a glyph for an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to display when a user disables an activity at design time. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CommentGlyph.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.CommentGlyph" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CommentGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the current comment glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the comment glyph is associated.</param>
      <param name="activated">true to indicate whether the glyph appears on the activity designer surface; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CommentGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Performs any tasks required to render the comment glyph on the activity designer surface. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to perform fill and drawing tasks.</param>
      <param name="activated">true to indicate that the glyph appears on the design surface; otherwise, false. </param>
      <param name="ambientTheme">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> to use to access ambient property settings.</param>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> from which to obtain information about user actions.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CommentGlyph.Priority">
      <summary>Gets the view priority of the glyph on the activity designer.</summary>
      <returns>An integer that represents the view priority of the glyph on the activity designer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner">
      <summary>Provides a designer that enables you to visually design composite activities.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.#ctor">
      <summary>When implemented in a derived class, initializes an instance of the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.AccessibilityObject">
      <summary>Gets a <see cref="T:System.Windows.Forms.AccessibleObject" /> that accessibility applications use to adjust the application look and feel for people with disabilities.</summary>
      <returns>The <see cref="T:System.Windows.Forms.AccessibleObject" /> associated with the control.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.CanExpandCollapse">
      <summary>Gets a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> can be collapsed.</summary>
      <returns>true if the specified composite activity designer can be collapsed; otherwise false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.CanInsertActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Gets a value that indicates whether activities can be inserted into the composite activity associated with the designer.</summary>
      <returns>true if activities can be inserted into the composite activity associated with the designer; otherwise false.</returns>
      <param name="insertLocation">The location to insert the activities.</param>
      <param name="activitiesToInsert">A read-only array of <see cref="T:System.Workflow.ComponentModel.Activity" /> to insert.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.CanMoveActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Gets a value that indicates whether activities contained within the composite activity can be moved out of the composite activity associated with the designer.</summary>
      <returns>true if the activities can be moved from the composite activity; otherwise false.</returns>
      <param name="moveLocation">The location from which to move the activities.</param>
      <param name="activitiesToMove">The read-only array of activities to move.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.CanRemoveActivities(System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Gets a value that indicates if activities can be removed from the composite activity associated with the designer.</summary>
      <returns>true if the activities can be removed from the composite activity; otherwise false.</returns>
      <param name="activitiesToRemove">A read-only array of activities to remove from the composite activity associated with the designer.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ContainedDesigners">
      <summary>Gets the array of <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> contained within the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
      <returns>The read-only collection of <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.DeserializeActivitiesFromDataObject(System.IServiceProvider,System.Windows.Forms.IDataObject)">
      <summary>Deserializes items from an <see cref="T:System.Windows.Forms.IDataObject" /> received during a drag-and-drop operation or from the clipboard.</summary>
      <returns>An array of activities deserialized from an <see cref="T:System.Windows.Forms.IDataObject" />.</returns>
      <param name="serviceProvider">Component serialization service.</param>
      <param name="dataObj">Object that contains activities to deserialize.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true if the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> is being disposed; false if the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> is being finalized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.EnsureVisibleContainedDesigner(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Verifies that the contained designer is visible.</summary>
      <param name="containedDesigner">The contained designer to make visible.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ExpandButtonRectangle">
      <summary>Gets the <see cref="T:System.Drawing.Rectangle" /> that contains the expand or collapse button.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that encloses the expand or collapse button.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.Expanded">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> is expanded.</summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> is expanded; otherwise false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.FirstSelectableObject">
      <summary>Gets the first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
      <returns>The first selectable object contained within the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.GetIntersectingDesigners(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Drawing.Rectangle)">
      <summary>Retrieves designers belonging to the specified root activity that intersect a specified area.</summary>
      <returns>An array of <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> objects that intersect a portion of the Rectangle specified.</returns>
      <param name="topLevelDesigner">The top-level designer to analyze.</param>
      <param name="rectangle">Area within the top-level designer to analyze.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.GetNextSelectableObject(System.Object,System.Workflow.ComponentModel.Design.DesignerNavigationDirection)">
      <summary>Gets the object which is next in the order of navigation.</summary>
      <returns>The object that is next in the order of navigation.</returns>
      <param name="current">The current object in the navigation order.</param>
      <param name="direction">The direction to navigate. 0 = next; 1 = previous; 2 = left; 3 = right.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.Glyphs">
      <summary>Gets a collection of glyphs with which to adorn the composite activity designer.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> that contains the glyphs to display on the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.HitTest(System.Drawing.Point)">
      <summary>Gets information about the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> at a specified point on the screen.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains information about the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> at a specified point.</returns>
      <param name="point">A <see cref="T:System.Drawing.Point" /> that represents a single x and y coordinate.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ImageRectangle">
      <summary>Gets the value for the enclosing bounds of the image associated with the designer in logical coordinates.</summary>
      <returns>A rectangle that encloses the <see cref="T:System.Drawing.Image" /> displayed for the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.Initialize(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes the designer with the associated <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> with which the designer should be initialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.InsertActivities(System.Workflow.ComponentModel.Design.CompositeActivityDesigner,System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity},System.String)">
      <summary>Inserts activities into the designer at the specified location using a transaction.</summary>
      <param name="compositeActivityDesigner">The designer into which the activities will be inserted.</param>
      <param name="insertLocation">The location in the designer at which the activities will be inserted.</param>
      <param name="activitiesToInsert">The list of activities to insert.</param>
      <param name="undoTransactionDescription">Description for the designer transaction created by the insertion.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.InsertActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Inserts the specified activities in the designer at the specified location.</summary>
      <param name="insertLocation">The location in the designer to insert the activities.</param>
      <param name="activitiesToInsert">The list of activities to insert.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.IsContainedDesignerVisible(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Gets a value that indicates if the contained designer is visible.</summary>
      <returns>true if the contained designer is visible; otherwise false.</returns>
      <param name="containedDesigner">The designer contained within the CompositeActivityDesigner to test for visibility.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.IsEditable">
      <summary>Gets a value that indicates whether the designer can be edited.</summary>
      <returns>true if the designer can be edited; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.LastSelectableObject">
      <summary>Gets the last selectable object contained within the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
      <returns>The last selectable object contained within the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.LoadViewState(System.IO.BinaryReader)">
      <summary>Restores the view state from a binary stream.</summary>
      <param name="reader">The <see cref="T:System.IO.BinaryReader" /> from which to load the view state.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.Location">
      <summary>Gets or sets the location of the designer in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Point" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.MoveActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Moves activities from one designer to another.</summary>
      <param name="moveLocation">A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> describing the location to which to move the activities.</param>
      <param name="activitiesToMove">The list of activities to move.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.MoveDesigners(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Moves a designer forward or backwards in index within the composite activity.</summary>
      <param name="activityDesigner">The ActivityDesigner to move.</param>
      <param name="moveBack">true to move the designer backwards; false to move the designer forward. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnContainedActivitiesChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Occurs when more than one activities contained within the designers have changed. This occurs, for example, when a new child activity is added or an existing child activity is removed.</summary>
      <param name="listChangeArgs">An <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> containing information about the change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="listChangeArgs" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnContainedActivitiesChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Occurs when an activity or a group of activities contained within the designer are changing. This occurs, for example, when a new child activity is added or an existing child activity is removed.</summary>
      <param name="listChangeArgs">An <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> that contains information about the change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="listChangeArgs" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnContainedActivityChanged(System.Workflow.ComponentModel.Design.ActivityChangedEventArgs)">
      <summary>Occurs when an activity contained within the designer has changed.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs" /> that contains information about the change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>Called when a key is pressed with the designer in focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Performs layout and positioning tasks for the contained visual cues or designers on the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> to reposition its child activities.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Called to calculate the size needed for an activity based on its current state (collapsed or expanded) and its list of child activities.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that contains the new size settings for the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>Called when the mouse is clicked when the pointer is in designer bounds.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws the visual representation of a composite activity at design time.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the drawing data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnThemeChange(System.Workflow.ComponentModel.Design.ActivityDesignerTheme)">
      <summary>Notifies the designer that the associated theme has changed.</summary>
      <param name="designerTheme">A <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.PaintContainedDesigners(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Adjusts the clip region on the graphics object and calls <see cref="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)" /> on all contained designers.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> to be used for painting.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.RemoveActivities(System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Removes a list of activities from the composite activity designer.</summary>
      <param name="activitiesToRemove">A list of activities to remove from the designer.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.RemoveActivities(System.IServiceProvider,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity},System.String)">
      <summary>Removes the list of activities from the designer using a transaction.</summary>
      <param name="serviceProvider">The service provider associated with the designer.</param>
      <param name="activitiesToRemove">The list of activities to remove.</param>
      <param name="transactionDescription">The description of the transaction created.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.SaveViewState(System.IO.BinaryWriter)">
      <summary>Saves the view state to a binary stream.</summary>
      <param name="writer">The <see cref="T:System.IO.BinaryWriter" /> into which the view state is stored.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.SerializeActivitiesToDataObject(System.IServiceProvider,System.Workflow.ComponentModel.Activity[])">
      <summary>Serializes an array of activities to an <see cref="T:System.Windows.Forms.IDataObject" /> that can be placed into the clipboard or used when initializing a drag and drop operation.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.IDataObject" /> that contains serialized activities.</returns>
      <param name="serviceProvider">Component serialization service.</param>
      <param name="activities">Array of activities to serialize.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.TextRectangle">
      <summary>Gets the value of the description rectangle in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.TitleHeight">
      <summary>Gets the height of the title area of the designer.</summary>
      <returns>The height in pixels of the title area of the designer.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.CompositeActivityDesignerLayoutSerializer">
      <summary>Serializes a composite activity designer layout used in a freeform designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesignerLayoutSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesignerLayoutSerializer" /> class.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesignerLayoutSerializer.GetProperties(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves information about all properties associated with the specified object.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> array that contains information about the properties associated with <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for properties.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject">
      <summary>Implements an accessible object that <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> classes use to adjust the designer user interface for users who have impairments.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject.#ctor(System.Workflow.ComponentModel.Design.CompositeActivityDesigner)">
      <summary> Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject" /> class by using the specified <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> to apply to the accessible object.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject.GetChild(System.Int32)">
      <summary>Returns the child accessible object associated with the activity designer at the specified index location.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> associated with the child <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> at the specified index location.</returns>
      <param name="index">The zero-based index of the child accessible object.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject.GetChildCount">
      <summary>Returns the number of child accessible objects that belong to the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject" />.</summary>
      <returns>The number of children that belong to the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject.State">
      <summary>Gets the accessible state of the current <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject" />.</summary>
      <returns>A combination of <see cref="T:System.Windows.Forms.AccessibleStates" /> values.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme">
      <summary>Provides theme settings to <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> class. </summary>
      <param name="theme">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> to associate with the composite designer theme.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorEndCap">
      <summary>Gets or sets a value that determines the shape that appears at the end of a connector.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> enumeration value that defines the shape that appears at the end of the connector. The default value is <see cref="F:System.Workflow.ComponentModel.Design.LineAnchor.ArrowAnchor" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorSize">
      <summary>Gets the <see cref="T:System.Drawing.Size" /> of the connector.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> object that contains information about the height and width of the connector. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorStartCap">
      <summary>Gets or sets a value that determines the shape that appears at the beginning of a connector.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> enumeration value that defines the shape that appears at the beginning of the connector. The default value is <see cref="F:System.Workflow.ComponentModel.Design.LineAnchor.None" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ExpandButtonSize">
      <summary>Gets the <see cref="T:System.Drawing.Size" /> of the expand button on the composite activity designer.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> object that contains information about the height and width of the expand button on the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />. </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.GetExpandButtonBackgroundBrush(System.Drawing.Rectangle)">
      <summary>Retrieves a brush that defines the background display properties of the expand button on the composite activity designer.</summary>
      <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> object that uses the <paramref name="rectangle" /> parameter to define the button area in which the brush applies two colors in a linear gradient from the upper-left corner to the lower-right corner of the expand button.</returns>
      <param name="rectangle">The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds of the expand button on the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.Initialize">
      <summary>Performs further initialization tasks beyond those provided by the <see cref="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" /> constructor.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.OnAmbientPropertyChanged(System.Workflow.ComponentModel.Design.AmbientProperty)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> object that the ambient property settings for the designer have changed. </summary>
      <param name="ambientProperty">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientProperty" /> enumeration value which the composite designer theme should now use.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ShowDropShadow">
      <summary>Gets or sets a value indicating whether the composite designer theme will display drop shadows around the composite activity designer. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> displays drop shadows around the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkAlignment">
      <summary>Gets or sets the alignment of the watermark image in the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" /> enumeration value that indicates where in the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> the watermark image will be placed. The default value is <see cref="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.BottomRight" />. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImage">
      <summary>Gets the watermark image to use on the composite activity designer.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> object to use as the watermark for the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath">
      <summary>Gets or sets the relative path to the watermark image to use on the composite activity designer.</summary>
      <returns>A string value that represents the relative path to the watermark image to use on the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConfigErrorGlyph">
      <summary>Provides a glyph for an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to display when a user has not performed required designer actions at design time.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConfigErrorGlyph.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ConfigErrorGlyph" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConfigErrorGlyph.CanBeActivated">
      <summary>Gets a value indicating whether the <see cref="T:System.Workflow.ComponentModel.Design.ConfigErrorGlyph" /> can gain focus on the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which it is associated. </summary>
      <returns>true if the designer glyph can be activated; otherwise, false. The default is true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConfigErrorGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the glyph is associated.</param>
      <param name="activated">true to indicate whether the glyph appears on the activity designer surface; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="designer" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConfigErrorGlyph.OnActivate(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Notifies the glyph that an action has been performed which has activated the glyph.</summary>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> on which the glyph is drawn.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConfigErrorGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Performs any tasks required to render the glyph on the activity designer surface. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to perform fill and drawing tasks.</param>
      <param name="activated">true to indicate that the glyph appears on the design surface; otherwise, false. </param>
      <param name="ambientTheme">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> to use to access ambient property settings.</param>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> from which to obtain information about user actions.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConfigErrorGlyph.Priority">
      <summary>Gets the priority setting for the glyph on the activity designer surface.</summary>
      <returns>An integer value that represents the priority setting for the <see cref="T:System.Workflow.ComponentModel.Design.ConfigErrorGlyph" /> on the activity design surface.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConnectionPoint">
      <summary>Represents a connection point that is displayed on the outer edges of an activity designer on a workflow design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectionPoint.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Workflow.ComponentModel.Design.DesignerEdges,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> class by using the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />, <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> enumeration value, and an integer. </summary>
      <param name="associatedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to which the connection point belongs.</param>
      <param name="designerEdge">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> enumeration value that specifies where on the activity designer the connection point is located.</param>
      <param name="connectionIndex">An index location of the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="connectionIndex" /> is less than zero.-- or --<paramref name="connectionIndex" /> is greater than or equal to the number of connection points on <paramref name="associatedDesigner" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="associatedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectionPoint.AssociatedDesigner">
      <summary>Gets the activity designer to which the connection point belongs.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to which the connection point belongs.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectionPoint.Bounds">
      <summary>Gets the bounding rectangle for the connection point.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> that bounds the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectionPoint.ConnectionEdge">
      <summary>Gets the designer edge on which the connection point appears.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> that specifies the activity designer edge on which the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> appears. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectionPoint.ConnectionIndex">
      <summary>Gets the connection index for the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" />.</summary>
      <returns>An integer that represents the connection index for the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectionPoint.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> is equal to the specified object.</summary>
      <returns>true to indicate that the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> and <paramref name="obj" /> are equal; otherwise, false. </returns>
      <param name="obj">The object to compare with the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" />. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectionPoint.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" />.</summary>
      <returns>The hash code generated by the <see cref="P:System.Workflow.ComponentModel.Design.ConnectionPoint.ConnectionIndex" /> integer or the designer available through <see cref="P:System.Workflow.ComponentModel.Design.ConnectionPoint.AssociatedDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectionPoint.Location">
      <summary>Gets a point that represents the logical location of the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> on the associated <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Point" /> that represents the logical location of the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> on the associated <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectionPoint.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs,System.Boolean)">
      <summary>Performs all tasks required to render the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> on the activity designer surface.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the data</param>
      <param name="drawHighlighted">true to draw a highlighted connection point; otherwise, false. </param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.Connector">
      <summary>Represents a connector between two activity designers on a workflow design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.#ctor(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> class. </summary>
      <param name="source">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> where drawing for the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> begins.</param>
      <param name="target">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> where drawing for the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> ends.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="target" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.AccessibilityObject">
      <summary>Gets an <see cref="T:System.Windows.Forms.AccessibleObject" /> that accessibility applications use to adjust the application UI for users who have impairments.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that accessibility applications use to adjust the application UI for users who have impairments.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.Bounds">
      <summary>Gets the bounding rectangle for the connector on the workflow design surface.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> that bounds the connector on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.ConnectorModified">
      <summary>Gets the value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> is modified.</summary>
      <returns>true if the connector is modified; otherwise false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.ConnectorSegments">
      <summary>Gets a read-only collection of points that contains all segments found in the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> read-only collection that contains all segments found in the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> is equal to the specified connector.</summary>
      <returns>true if the specified connector is equal to the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" />; otherwise, false. </returns>
      <param name="obj">The <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> to compare with the current connector.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.ExcludedRoutingRectangles">
      <summary>Returns an empty array of Rectangle object. Derived classes populate this collection.</summary>
      <returns>A generic collection of Rectangle objects.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</summary>
      <returns>A hash code for the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.GetService(System.Type)">
      <summary>Returns a service object of the specified type if it is available.</summary>
      <returns>A service object of type <paramref name="serviceType" /> or a null reference (Nothing in Visual Basic) if there is no service object of type <paramref name="serviceType" />.  </returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of the service object to return.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.HitTest(System.Drawing.Point)">
      <summary>Returns a value that indicates whether the specified point resides on the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</summary>
      <returns>true if <paramref name="point" /> resides on the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" />; otherwise, false. </returns>
      <param name="point">The <see cref="T:System.Drawing.Point" /> to test. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.Invalidate">
      <summary>Invalidates the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> and causes it to be redrawn.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.Offset(System.Drawing.Size)">
      <summary>Changes the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> height and width using the settings defined in the specified <see cref="T:System.Drawing.Size" />.</summary>
      <param name="size">The <see cref="T:System.Drawing.Size" /> that contains the height and width settings to offset the connector.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.OnLayout(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> that layout operations are occurring. </summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Renders the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> on the workflow design surface.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the drawing data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.OnPaintEdited(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs,System.Drawing.Point[],System.Drawing.Point[])">
      <summary>Used for drawing the Connector when it is dragged from one state to another.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> object that specifies the graphics to use to draw the object and the clipping rectangle in which to draw it.</param>
      <param name="segments">Coordinates for the segments in the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</param>
      <param name="segmentEditPoints">Coordinated for the edit points on the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.OnPaintSelected(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs,System.Boolean,System.Drawing.Point[])">
      <summary>Used for drawing a Connector that is selected by the user.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> object that specifies the graphics to use to draw the object and the clipping rectangle in which to draw it.</param>
      <param name="primarySelection">Not used.</param>
      <param name="segmentEditPoints">Coordinates for the edit points on the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.ParentDesigner">
      <summary>Gets the designer on which the connecter appears on the workflow design surface.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> on which the connector appears on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.ParentView">
      <summary>Gets the workflow view associated with the connector.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> that is associated with the connector.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.PerformLayout">
      <summary>Performs layout tasks for the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.SetConnectorSegments(System.Collections.Generic.ICollection{System.Drawing.Point})">
      <summary>Reroutes the connector from source to target if the connector has changed.</summary>
      <param name="segments">A <see cref="T:System.Drawing.Point" /> collection that represents the new connector segments to use for rerouting.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.Source">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> where drawing of the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> begins.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> where drawing of the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> begins.</returns>
      <exception cref="T:System.ArgumentException">When setting this property the source <see cref="P:System.Workflow.ComponentModel.Design.ConnectionPoint.AssociatedDesigner" /> does not match the target associated designer.  </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Workflow.ComponentModel.Design.Connector.Source" /> was set to a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.Target">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> where drawing of the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> ends.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> where drawing of the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> ends.</returns>
      <exception cref="T:System.ArgumentException">When setting this property the source <see cref="P:System.Workflow.ComponentModel.Design.ConnectionPoint.AssociatedDesigner" /> does not match the target associated designer.  </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Workflow.ComponentModel.Design.Connector.Target" /> was set to a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject">
      <summary>Provides information on connectors between activity designers that accessibility applications use to adjust an application's UI for users with impairments.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject.#ctor(System.Workflow.ComponentModel.Design.Connector)">
      <summary>Initializes an instance of the <see cref="T:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject" /> class using an instance of <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</summary>
      <param name="connector">An instance of <see cref="T:System.Workflow.ComponentModel.Design.Connector" />   which represents a connector between two activity designers on a workflow design surface.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject.Bounds">
      <summary>Gets the location and size of the accessible object.</summary>
      <returns>Rectangle containing location and size information for the accessible object</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject.HitTest(System.Int32,System.Int32)">
      <summary>Retrieves the child object at the specified screen coordinates.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject" /> the child object at the given screen coordinates. This method returns the calling object if the object itself is at the location specified. Returns a null reference (Nothing in Visual Basic) if no object is at the tested location.</returns>
      <param name="x">The horizontal screen coordinate.</param>
      <param name="y">The vertical screen coordinate.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject.Name">
      <summary>Gets or sets the object name.</summary>
      <returns>String value representing the name of the accessible object</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject.Parent">
      <summary>Gets the parent of an accessible object.</summary>
      <returns>Parent object for the accessible object</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject.Role">
      <summary>Gets the role of this accessible object.</summary>
      <returns>One of the values of AccessibleRole.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner.ConnectorAdded" />, <see cref="E:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner.ConnectorRemoved" />, and <see cref="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorChanged" /> events.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorEventArgs.Connector">
      <summary>Gets the connector object that is passed as a part of <see cref="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> object passed as part of <see cref="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConnectorEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner.ConnectorAdded" />, <see cref="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorRemoved" />, and <see cref="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorChanged" /> events of a <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo">
      <summary>Contains information about a connector at a specified coordinate in <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> and all classes that inherit from it.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo.#ctor(System.Workflow.ComponentModel.Design.CompositeActivityDesigner,System.Workflow.ComponentModel.Design.HitTestLocations,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo" /> class. </summary>
      <param name="compositeActivityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that contains the connector.</param>
      <param name="flags">A <see cref="T:System.Workflow.ComponentModel.Design.HitTestLocations" /> that defines the location on the connector that the user clicked.</param>
      <param name="connector">The index identifier of the connector that was clicked.</param>
      <exception cref="T:System.ArgumentException">Prior to the constructor call the connector index was set to less than zero. </exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo.Bounds">
      <summary>Gets the bounding rectangle for the connector that was clicked.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> that bounds the connector that was clicked.  </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo" />.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo" />; otherwise, false.  </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo" />. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo" />.</summary>
      <returns>The hash code for the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo.MapToIndex">
      <summary>Returns the index of the connector that the user clicked.</summary>
      <returns>The index of the connector that the user clicked.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo.SelectableObject">
      <summary>Gets a selectable object associated with the hit area.</summary>
      <returns>A selectable <see cref="T:System.Object" /> associated with the area where the user clicked. </returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer">
      <summary>Serializes a connector layout.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer" /> class.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer.CreateInstance(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Type)">
      <summary>Creates an instance of the specified <see cref="T:System.Type" /> using the specified <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</summary>
      <returns>An instance of the specified <see cref="T:System.Type" />. </returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> supporting this operation.</param>
      <param name="type">The specified <see cref="T:System.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer.GetConnectorConstructionArguments(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Type)">
      <summary>Gets a Dictionary collection filled with element name and their associated values from the current position in the xml reader associated with the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</summary>
      <returns>Dictionary based collection containing the argument names and their associated values for the construction of the connector.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="type">The specified <see cref="T:System.Type" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer.GetProperties(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves information about all properties associated with the specified object.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> array that contains information about the properties associated with <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for properties.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> or <paramref name="obj" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer.OnAfterDeserialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Performs processing of the object after the deserialization process.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> that was deserialized.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerAction">
      <summary>Associates an action taken on an activity designer on the workflow design surface with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerAction.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> class by using an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />, an integer, and a string.</summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> on which the designer action is taken.</param>
      <param name="actionId">An integer value that represents the identifier of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" />.</param>
      <param name="text">A string that represents the text associated with the designer action.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> contains a null reference (Nothing) or its length is 0.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerAction.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Int32,System.String,System.Drawing.Image)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> class by using <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />, an integer, a string, and an <see cref="T:System.Drawing.Image" />.</summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> on which the designer action is to appear.</param>
      <param name="actionId">An integer value that represents the identifier of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" />.</param>
      <param name="text">A string that represents the text associated with the designer action.</param>
      <param name="image">The <see cref="T:System.Drawing.Image" /> to be associated with the designer action.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> contains a null reference (Nothing) or its length is 0.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerAction.ActionId">
      <summary>Gets the identifier for the designer action.</summary>
      <returns>An integer that represents the identifier for the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> object.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerAction.Image">
      <summary>Gets the image associated with the designer action.</summary>
      <returns>An <see cref="T:System.Drawing.Image" /> that is associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerAction.Invoke">
      <summary>Invokes the <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnExecuteDesignerAction(System.Workflow.ComponentModel.Design.DesignerAction)" /> method of the activity designer associated with the current designer action.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerAction.PropertyName">
      <summary>Represents the name of the property that the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> is associated with.</summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the property.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerAction.Text">
      <summary>Gets the text associated with the designer action.</summary>
      <returns>A string value that represents the text associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerAction.UserData">
      <summary>Gets a dictionary of user data associated with the designer action.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> that represents the user data associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment">
      <summary>Specifies where in the workflow designer that workflow content is aligned.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.Left">
      <summary>Workflow content is aligned to the left side of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.Top">
      <summary>Workflow content is aligned to the top of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.Right">
      <summary>Workflow content is aligned to the right side of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.Bottom">
      <summary>Workflow content is aligned to the bottom of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.Center">
      <summary>Workflow content is aligned to the center of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.TopLeft">
      <summary>Workflow content is aligned to the top left of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.TopCenter">
      <summary>Workflow content is aligned to the top center of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.TopRight">
      <summary>Workflow content is aligned to the top right of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.CenterLeft">
      <summary>Workflow content is aligned to the center left of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.CenterRight">
      <summary>Workflow content is aligned to the center right of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.BottomLeft">
      <summary>Workflow content is aligned to the bottom left of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.BottomCenter">
      <summary>Workflow content is aligned to the bottom center of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.BottomRight">
      <summary>Workflow content is aligned to the bottom right of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.Fill">
      <summary>Workflow content is aligned to fill the designer.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerEdges">
      <summary>Specifies the edge or edges of an activity designer on a workflow design surface where design-time processing is performed, such as a <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> location on the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerEdges.None">
      <summary>None of the edges of the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerEdges.Left">
      <summary>The left edge of the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerEdges.Top">
      <summary>The top edge of the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerEdges.Right">
      <summary>The right edge of the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerEdges.Bottom">
      <summary>The bottom edge of the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerEdges.All">
      <summary>All edges of the activity designer.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerGeometry">
      <summary>Specifies the shape used by activity designers to render the corners of their design surface.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerGeometry.Rectangle">
      <summary>The corners of the design surface are straight.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerGeometry.RoundedRectangle">
      <summary>The corners of the design surface are rounded.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerGlyph">
      <summary>Draws a glyph at the top-most Z order position on an activity designer. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerGlyph.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> class. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerGlyph.CanBeActivated">
      <summary>Gets a value indicating whether the <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> can gain focus on the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which it is associated. </summary>
      <returns>true if the designer glyph can be activated; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the glyph is associated.</param>
      <param name="activated">true to indicate whether the glyph appears on the activity designer surface; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="designer" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerGlyph.HighestPriority">
      <summary>Represents the highest priority possible for a <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />. This value is a constant.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerGlyph.LowestPriority">
      <summary>Represents the lowest priority possible for a <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />. This value is a constant.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerGlyph.NormalPriority">
      <summary>Represents the normal priority for a <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />. This value is a constant.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerGlyph.OnActivate(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Indicates to the glyph that an action has been performed which has activated the glyph.</summary>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> on which the glyph is drawn.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>When overridden in a derived class, performs any tasks required to render the glyph on the activity designer surface. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to perform fill and drawing tasks.</param>
      <param name="activated">true to indicate that the glyph appears on the design surface; otherwise, false. </param>
      <param name="ambientTheme">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> to use to access ambient property settings.</param>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> from which to obtain information about user actions.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerGlyph.Priority">
      <summary>Gets the priority setting for the designer glyph on the activity design surface.</summary>
      <returns>An integer value that represents the priority setting for the <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> on the activity designer surface. A lower value indicates a higher priority and therefore draws the glyph at the top-most Z order position on an activity designer.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerNavigationDirection">
      <summary>Specifies values for navigating among designer objects.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerNavigationDirection.Down">
      <summary>Navigates down to the next activity in sequence.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerNavigationDirection.Up">
      <summary>Navigates up to the previous activity in sequence.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerNavigationDirection.Left">
      <summary>Navigates to the left in the workflow.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerNavigationDirection.Right">
      <summary>Navigates to the right in the workflow.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerSize">
      <summary>Specifies the size settings that theme classes use to control the size of <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> classes when they are rendered on a workflow design surface.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerSize.Small">
      <summary>The activity designer is small.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerSize.Medium">
      <summary>The activity designer is medium. </summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerSize.Large">
      <summary>The activity designer is large.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerTheme">
      <summary>Supplies base class implementation for all activity designer theme classes used in a workflow design-time environment.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerTheme" /> class by using a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> object.</summary>
      <param name="theme">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> with which the designer theme is associated.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerTheme.ApplyTo">
      <summary>Gets or sets the unqualified name of the designer type to which the designer theme is applied. </summary>
      <returns>The name of the designer type to which the designer theme is applied.</returns>
      <exception cref="T:System.Data.ReadOnlyException">A user attempted a set operation when the <see cref="P:System.Workflow.ComponentModel.Design.DesignerTheme.ReadOnly" /> property was set to true.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerTheme.ContainingTheme">
      <summary>Gets the workflow theme that encapsulates the designer theme. </summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> object associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerTheme" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerTheme.DesignerType">
      <summary>Gets or sets the type of the designer associated with the designer theme.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the designer to be associated with the current designer theme.</returns>
      <exception cref="T:System.Data.ReadOnlyException">A user attempted a set operation when the <see cref="P:System.Workflow.ComponentModel.Design.DesignerTheme.ReadOnly" /> property was set to true.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerTheme.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.DesignerTheme" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerTheme.Finalize">
      <summary>Allows the <see cref="T:System.Workflow.ComponentModel.Design.DesignerTheme" /> to attempt to free resources and perform other clean-up operations before it is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerTheme.Initialize">
      <summary>Performs further initialization tasks beyond those performed by <see cref="M:System.Workflow.ComponentModel.Design.DesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" />. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerTheme.OnAmbientPropertyChanged(System.Workflow.ComponentModel.Design.AmbientProperty)">
      <summary>Notifies the designer theme class that the ambient property settings for the designer have changed. </summary>
      <param name="ambientProperty">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientProperty" /> enumeration value that the designer theme should now use.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerTheme.ReadOnly">
      <summary>Gets a value that indicates whether the designer theme is read-only. </summary>
      <returns>true if <see cref="T:System.Workflow.ComponentModel.Design.DesignerTheme" /> is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerTheme.System#IDisposable#Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup">
      <summary>Specifies the grouping area on a context menu or a workflow designer menu in which an activity designer verb is to appear.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerVerbGroup.General">
      <summary>The general designer verb group.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerVerbGroup.View">
      <summary>The view designer verb group.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerVerbGroup.Edit">
      <summary>The edit designer verb group.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerVerbGroup.Options">
      <summary>The options designer verb group.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerVerbGroup.Actions">
      <summary>The actions designer verb group.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerVerbGroup.Misc">
      <summary>The miscellaneous designer verb group.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerView">
      <summary>Serves as a repository for information about the views supported by the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> or classes that inherit from it.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerView.#ctor(System.Int32,System.String,System.Drawing.Image)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> class by using an integer, a string, and an <see cref="T:System.Drawing.Image" />.</summary>
      <param name="viewId">The integer identifier for the designer view.</param>
      <param name="text">The string that specifies the name of the designer view.</param>
      <param name="image">The <see cref="T:System.Drawing.Image" /> associated with the designer view. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewId" /> or <paramref name="text" /> contains null.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerView.#ctor(System.Int32,System.String,System.Drawing.Image,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> class by using an integer, a string, an <see cref="T:System.Drawing.Image" />, and an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <param name="viewId">The integer identifier for the designer view.</param>
      <param name="text">The string that specifies the name of the designer view.</param>
      <param name="image">The <see cref="T:System.Drawing.Image" /> associated with the designer view. </param>
      <param name="associatedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> associated with the designer view.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewId" />, <paramref name="text" />, or <paramref name="associatedDesigner" /> contains null.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerView.AssociatedDesigner">
      <summary>Gets the activity designer associated with the designer view.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerView.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current designer view.</summary>
      <returns>true if <paramref name="obj" /> and the current <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> are equal; otherwise, false.  </returns>
      <param name="obj">An <see cref="T:System.Object" /> to compare to the current <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerView.GetHashCode">
      <summary>Serves as a hash function for the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> and is suitable for use in hashing algorithms and data structures like a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerView.Image">
      <summary>Gets the image associated with the designer view.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerView.OnActivate">
      <summary>Notifies the designer when the view is activated.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerView.OnDeactivate">
      <summary>Notifies the designer when the view is deactivated.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerView.Text">
      <summary>Gets the name of the designer view.</summary>
      <returns>A string that contains the name of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerView.UserData">
      <summary>Gets the dictionary of user data associated with the designer view.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> that contains the user data associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerView.ViewId">
      <summary>Gets the identifier associated with the designer view.</summary>
      <returns>An integer that contains the identifier for the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner">
      <summary>Provides a customizable activity designer surface for users to visually modify on a workflow design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> class. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.AccessibilityObject">
      <summary>Gets an <see cref="T:System.Windows.Forms.AccessibleObject" /> that accessibility applications use to adjust the application UI for users who have impairments.</summary>
      <returns>The <see cref="T:System.Windows.Forms.AccessibleObject" /> associated with the control.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.AddConnector(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Adds a connector to the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> that was added to the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</returns>
      <param name="source">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> location to begin drawing the connector.</param>
      <param name="target">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> location to finish drawing the connector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="target" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Workflow.ComponentModel.Design.ConnectionPoint.AssociatedDesigner" /> property for <paramref name="source" /> or <paramref name="target" /> contains a null reference (Nothing).</exception>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> is not the container for the connector to add.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.AutoSize">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> is resized automatically when a user resizes the designer's child designers. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> is resized automatically; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.AutoSizeMargin">
      <summary>Gets or sets the margin size to render around the child designers when the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> is automatically resized.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the size of the margin to render around the child designers of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.AutoSizeMode">
      <summary>Gets or sets the <see cref="T:System.Windows.Forms.AutoSizeMode" /> settings for the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Windows.Forms.AutoSizeMode" /> for the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. The default setting is <see cref="F:System.Windows.Forms.AutoSizeMode.GrowOnly" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.BringToFront(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Brings the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to the top of the z-order of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to bring to the top of the z-order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="containedDesigner" /> is not found in the <see cref="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ContainedDesigners" /> collection.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.CanConnectContainedDesigners(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> can create a connection between the specified connection point on a source child activity designer and the specified connection point on a target child activity designer. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> can draw a connector between source and target activity designers; otherwise, false. </returns>
      <param name="source">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> to check on the source activity designer.</param>
      <param name="target">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> to check on the target activity designer.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.CanExpandCollapse">
      <summary>Gets a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> can be collapsed on a workflow design surface.</summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> can be collapsed; otherwise false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.CanResizeContainedDesigner(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Returns a value that indicates whether a user can visually resize the specified child activity designer in the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. </summary>
      <returns>true if a user can visually resize the specified activity designer; otherwise, false. </returns>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to check.</param>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorAdded">
      <summary>Occurs when a <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> is added to the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. </summary>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorChanged">
      <summary>Occurs when a user changes the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> locations associated with a <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> displayed by the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. </summary>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorRemoved">
      <summary>Occurs when a user removes a connector from the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.Connectors">
      <summary>Gets a read-only collection of connectors that are associated with the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>A read-only collection that contains all <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> objects associated with the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.CreateConnector(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Creates a connector between the two specified connection points.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> that was created.</returns>
      <param name="source">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> location to begin drawing the connector.</param>
      <param name="target">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> location to finish drawing the connector.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true if thedesigner is being disposed; false if the designer is being finalized.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.EnableUserDrawnConnectors">
      <summary>Gets or sets a value that indicates whether users can drag and draw connectors on the free-form activity designer surface. </summary>
      <returns>true if users can drag and draw connectors on the free-form activity designer surface; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.EnableVisualResizing">
      <summary>Gets a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> can be visually resized on the workflow design surface. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> can be visually resized; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.FirstSelectableObject">
      <summary>Gets the first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>The first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.GetNextSelectableObject(System.Object,System.Workflow.ComponentModel.Design.DesignerNavigationDirection)">
      <summary>Returns the first selectable object that follows the specified object in the navigation order of the current <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>The first selectable <see cref="T:System.Object" /> that follows the <paramref name="obj" /> parameter in the navigation order.</returns>
      <param name="current">The current <see cref="T:System.Object" /> in the navigation order.</param>
      <param name="navigate">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerNavigationDirection" /> enumeration value that determines the navigation order of the designer.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.Glyphs">
      <summary>Gets the collection of glyphs that are displayed on the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> that contains the glyphs displayed on the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.HitTest(System.Drawing.Point)">
      <summary>Returns information about the FreeformActivityDesigner at the specified coordinates on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains information about the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> at the specified coordinates</returns>
      <param name="point">The <see cref="T:System.Drawing.Point" /> that contains the coordinates on the workflow design surface from which to gather information.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.Initialize(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> by using the specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> with which to initialize the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.InsertActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Adds the specified read-only collection of activities to the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> at the specified location on the workflow design surface.</summary>
      <param name="insertLocation">The <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that specifies the location to add the activities.</param>
      <param name="activitiesToInsert">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection that contains the activities to add to the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.LastSelectableObject">
      <summary>Gets the last selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Object" /> that is the last selectable object in the designer navigation order.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.Location">
      <summary>Gets or sets the location of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> in logical coordinates.</summary>
      <returns>A Point that represents the location of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> in logical coordinates.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.MinimumSize">
      <summary>Gets the minimum size settings for the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the smallest possible size for the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.MoveActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Moves activities to a specified location within the design surface.</summary>
      <param name="moveLocation">Location to move activities to.</param>
      <param name="activitiesToMove">Collection that contains the activities to move to <paramref name="moveLocation." /></param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.MoveContainedDesigner(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Drawing.Point)">
      <summary>Moves the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to the specified location.</summary>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to move.</param>
      <param name="newLocation">The <see cref="T:System.Drawing.Point" /> that represents the designer's new location. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="containedDesigner" /> is not found in the <see cref="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ContainedDesigners" /> collection.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnConnectorAdded(System.Workflow.ComponentModel.Design.ConnectorEventArgs)">
      <summary>Raises the <see cref="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorAdded" /> event. </summary>
      <param name="e">A <see cref="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnConnectorChanged(System.Workflow.ComponentModel.Design.ConnectorEventArgs)">
      <summary>Raises the <see cref="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorChanged" /> event. </summary>
      <param name="e">A <see cref="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnConnectorRemoved(System.Workflow.ComponentModel.Design.ConnectorEventArgs)">
      <summary>Raises the <see cref="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorRemoved" /> event. </summary>
      <param name="e">A <see cref="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnContainedActivitiesChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> when a child activity is added or deleted from its Activities collection.</summary>
      <param name="listChangeArgs">The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> that contains information about the added or removed activities.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnContainedDesignersConnected(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> when a connection has been established between two of its contained activity designers.</summary>
      <param name="source">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> location to begin drawing the connector.</param>
      <param name="target">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> location to finish drawing the connector.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnDragDrop(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> when a drag-drop operation is completed within the bounds of its design surface. </summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that defines the operation event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnDragOver(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor is inside the bounds of the designer.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that defines the operation event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is pressed when the designer has the keyboard focus. </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Performs layout tasks to position visual cues and child designers on the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that defines the operation event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> when the size of the visual cues on the designers displayed by the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> have changed.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that represents the new size of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> on the workflow design surface.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that defines the operation event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnResizing(System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> when a user is visually resizing it at design time.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs" /> that defines the operation event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnThemeChange(System.Workflow.ComponentModel.Design.ActivityDesignerTheme)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> that its associated theme has changed.</summary>
      <param name="newTheme">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that contains the updated theme property settings.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.RemoveConnector(System.Workflow.ComponentModel.Design.Connector)">
      <summary>Removes the specified <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> from the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <param name="connector">The <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> to remove. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connector" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ResizeContainedDesigner(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Drawing.Size)">
      <summary>Resizes the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to the dimensions of specified size.</summary>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to resize.</param>
      <param name="newSize">The <see cref="T:System.Drawing.Size" /> that represents the new dimensions of the designer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="containedDesigner" /> is not found in the <see cref="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ContainedDesigners" /> collection.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.SendToBack(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Sets the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to the bottom of the z-order of the FreeformActivityDesigner.</summary>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to set to the back of the z-order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="containedDesigner" /> is not found in the <see cref="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ContainedDesigners" /> collection.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ShowConnectorsInForeground">
      <summary>Gets a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> draws connectors in the foreground of its design surface. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> draws connectors in the foreground of its design surface; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.FreeformActivityDesignerLayoutSerializer">
      <summary>Serializes freeform activity designer specific layout information.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesignerLayoutSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesignerLayoutSerializer" /> class.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesignerLayoutSerializer.GetProperties(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves information about all properties associated with the specified object.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> array that contains information about the properties associated with <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for properties.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.HitTestInfo">
      <summary>Contains information about a part of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> at a specified coordinate.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.HitTestInfo.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Workflow.ComponentModel.Design.HitTestLocations)">
      <summary>Initializes an instance of a <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> object.</summary>
      <param name="designer">The associated <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</param>
      <param name="location">The location on the associated <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> that was clicked.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.HitTestInfo.AssociatedDesigner">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> class.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> class.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.HitTestInfo.Bounds">
      <summary>Returns the bounds of the area hit.</summary>
      <returns>A rectangle that encloses the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> object or an empty rectangle if the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> object is not associated with a designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.HitTestInfo.HitLocation">
      <summary>Contains information about where the hit occurred.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestLocations" /> that describes the area hit.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.HitTestInfo.MapToIndex">
      <summary>Returns the index of the hit designer.</summary>
      <returns>The index of the designer hit by the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.HitTestInfo.Nowhere">
      <summary>Gets an empty <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" />.</summary>
      <returns>An empty <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.HitTestInfo.SelectableObject">
      <summary>Gets a selectable object associated with the hit area.</summary>
      <returns>A selectable object associated with the hit area or a null reference (Nothing in Visual Basic) if no designer is associated with the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.HitTestInfo.UserData">
      <summary>Gets the user data associated with the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" />.</summary>
      <returns>A new dictionary for user data, or a reference to the existing user data.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.HitTestLocations">
      <summary>Describes the area of the designer that contains the point passed to a <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.HitTest(System.Drawing.Point)" /> method.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.None">
      <summary>Indicates that no part of the designer was hit.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.Designer">
      <summary>Indicates that any part of the designer was hit.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.ActionArea">
      <summary>Indicates the area contained by the expand button was hit.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.Left">
      <summary>Indicates that the left part of the designer was hit.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.Top">
      <summary>Indicates the top of the designer was hit.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.Right">
      <summary>Indicates the right part of the designer was hit.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.Bottom">
      <summary>Indicates that the bottom of the designer was hit. </summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.Connector">
      <summary>Indicates that a connector on the designer was hit.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider">
      <summary>Defines the method that glyph provider classes use to generate an array of glyphs to display on an activity designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider.GetGlyphs(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Returns an array of glyphs that are associated with the specified activity designer.</summary>
      <returns>An array of <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> objects to render to the activity designer.</returns>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> object for which to retrieve the glyphs.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProviderService">
      <summary>Allows activity designer developers to add custom glyph providers to an activity designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IDesignerGlyphProviderService.AddGlyphProvider(System.Workflow.ComponentModel.Design.IDesignerGlyphProvider)">
      <summary>Adds a class that implements the <see cref="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider" /> interface to the list of glyph providers that an activity designer uses.</summary>
      <param name="glyphProvider">The <see cref="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider" /> to add.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.IDesignerGlyphProviderService.GlyphProviders">
      <summary>Gets a generic read-only collection of designer glyph providers.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider" /> read-only collection.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IDesignerGlyphProviderService.RemoveGlyphProvider(System.Workflow.ComponentModel.Design.IDesignerGlyphProvider)">
      <summary>Removes the class that implements the <see cref="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider" /> interface to the list of glyph providers that an activity designer uses.</summary>
      <param name="glyphProvider">The <see cref="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider" /> to remove.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider">
      <summary>Defines a means for an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to return its designer verbs.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IDesignerVerbProvider.GetVerbs(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Returns the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> collection associated with the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />. </summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection" /> that contains the verbs associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</returns>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> for which to return the activity verb collection.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IDesignerVerbProviderService">
      <summary>Allows activity designer developers to add custom designer verb providers to an activity designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IDesignerVerbProviderService.AddVerbProvider(System.Workflow.ComponentModel.Design.IDesignerVerbProvider)">
      <summary>Adds a class that implements the <see cref="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider" /> interface to the list of verb providers that an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> uses.</summary>
      <param name="verbProvider">The <see cref="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider" /> to add.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IDesignerVerbProviderService.RemoveVerbProvider(System.Workflow.ComponentModel.Design.IDesignerVerbProvider)">
      <summary>Removes a class that implements the <see cref="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider" /> interface to the list of verb providers that an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> uses.</summary>
      <param name="verbProvider">The <see cref="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider" /> to remove.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.IDesignerVerbProviderService.VerbProviders">
      <summary>Gets an <see cref="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider" /> read-only collection.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider" /> read-only collection. </returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IExtendedUIService">
      <summary>Defines the methods that workflow designer hosts can call to perform advanced UI operations. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.AddAssemblyReference(System.Reflection.AssemblyName)">
      <summary>Instructs the workflow designer host to add an assembly reference for the current project to access.</summary>
      <param name="assemblyName">An <see cref="T:System.Reflection.AssemblyName" /> that identifies the assembly to add. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.AddDesignerActions(System.Workflow.ComponentModel.Design.DesignerAction[])">
      <summary>Adds an array of designer actions to the list of available user actions in the workflow designer host. </summary>
      <param name="actions">A <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> array that contains the actions to add.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.AddWebReference(System.Uri@,System.Type@)">
      <summary>Adds a reference to a Web resource to a project in a workflow designer.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DialogResult" /> value that indicates the return value of the Add Web Reference dialog box.</returns>
      <param name="url">When this method returns, contains a <see cref="T:System.Uri" /> that represents the universal resource locator (URL) of the Web resource to provide the project access to. This parameter is passed uninitialized. </param>
      <param name="proxyClass">When this method returns, contains a <see cref="T:System.Type" /> of the proxy class associated with the Web resource. This parameter is passed uninitialized. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.GetProxyClassForUrl(System.Uri)">
      <summary>Returns the type of the proxy class associated with the specified universal resource locator (URL).</summary>
      <returns>The <see cref="T:System.Type" /> of the proxy class.</returns>
      <param name="url">A <see cref="T:System.Uri" /> that represents a URL.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.GetSelectedPropertyContext">
      <summary>Provides contextual information about the current component.</summary>
      <returns>Returns property context.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.GetUrlForProxyClass(System.Type)">
      <summary>Returns the universal resource locator (URL) for the Web resource associated with the specified proxy class.</summary>
      <returns>The URL for the Web resource associated with the proxy class.</returns>
      <param name="proxyClass">The <see cref="T:System.Type" /> associated with the proxy class.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.GetXsdProjectItemsInfo">
      <summary>Returns the types that are generated for the XSD schema that is added to the workflow project.</summary>
      <returns>The types that are generated for the XSD schema that is added to the workflow project.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.NavigateToProperty(System.String)">
      <summary>Navigates to the specified property in the property browser of the workflow designer host. </summary>
      <returns>true if the property was navigated to successfully; otherwise, false.</returns>
      <param name="propName">The name of the property to navigate to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.RemoveDesignerActions">
      <summary>Deletes all designer actions in the task list associated with the workflow designer host. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.ShowToolsOptions">
      <summary>Displays the tools options associated with the workflow designer host.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IExtendedUIService2">
      <summary>Defines the methods that workflow designer hosts can call to determine the environment settings.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService2.GetReflectionAssembly(System.Reflection.AssemblyName)">
      <summary>Returns the assembly loaded in reflection context for the current target framework.</summary>
      <returns>The assembly loaded in reflection context for the current target framework.</returns>
      <param name="assemblyName">The assembly name.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService2.GetRuntimeType(System.Type)">
      <summary>Returns the current runtime type for the specified reflection type. The reflection type depends on the target .NET Framework version.</summary>
      <returns>The current runtime type.</returns>
      <param name="reflectionType">The reflection type that depends on the target .NET Framework version.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService2.GetTargetFrameworkVersion">
      <summary>Returns the target .NET Framework version of the current project.</summary>
      <returns>The target .NET Framework version of the current project.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService2.IsSupportedType(System.Type)">
      <summary>Returns a value that indicates whether the specified type is supported in the current target .NET Framework version.</summary>
      <returns>true if the specified type is supported in the current target .NET Framework version; otherwise, false.</returns>
      <param name="type">The type to check.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IIdentifierCreationService">
      <summary>Provides a mechanism to create uniquely named identifiers throughout a specified range of activities.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IIdentifierCreationService.EnsureUniqueIdentifiers(System.Workflow.ComponentModel.CompositeActivity,System.Collections.ICollection)">
      <summary>Provides a mechanism to ensure that Activities added to a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> are uniquely named.</summary>
      <param name="parentActivity">The <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> that will contain the uniquely named activities.</param>
      <param name="childActivities">A collection of activities to ensure that activities are uniquely named.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IIdentifierCreationService.ValidateIdentifier(System.Workflow.ComponentModel.Activity,System.String)">
      <summary>Provides a mechanism to test that an identifier is unique within an <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> against which to test the identifier.</param>
      <param name="identifier">The identifier to test for validity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IMemberCreationService">
      <summary>Defines methods to dynamically create, update and remove code elements for a type at design time. Methods are also provided that allow you to display code at design time.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.CreateEvent(System.String,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean)">
      <summary>Creates an event on the specified class by using the specified event name, event type and attributes.</summary>
      <param name="className">A string that contains the class name to add the event to.</param>
      <param name="eventName">A string that defines the name of the event.</param>
      <param name="eventType">The <see cref="T:System.Type" /> assigned to the event.</param>
      <param name="attributes">An <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> array that contains information on all attributes to assign to the event.</param>
      <param name="emitDependencyProperty">true to emit any dependency properties associated with the event; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.CreateField(System.String,System.String,System.Type,System.Type[],System.CodeDom.MemberAttributes,System.CodeDom.CodeSnippetExpression,System.Boolean)">
      <summary>Creates a field on the specified class by using the specified field name, field type, parameter types, attributes and literal initialization expression.</summary>
      <param name="className">A string that defines the name of the class to add the field.</param>
      <param name="fieldName">A string that defines the name of the field.</param>
      <param name="fieldType">The <see cref="T:System.Type" /> of the new field. </param>
      <param name="genericParameterTypes">A <see cref="T:System.Type" /> array of any parameters associated with the field.</param>
      <param name="attributes">A <see cref="T:System.CodeDom.MemberAttributes" /> that defines the member attribute identifier for the field.</param>
      <param name="initializationExpression">A <see cref="T:System.CodeDom.CodeSnippetExpression" /> that contains the literal expression of the field.</param>
      <param name="overwriteExisting">true to delete any existing fields on <paramref name="className" /> when creating the new field; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.CreateProperty(System.String,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean,System.Boolean,System.Boolean,System.Type,System.Boolean)">
      <summary>Creates a property on the specified class by using the specified property name, property type and attributes.</summary>
      <param name="className">A string that defines the name of the class to add the field.</param>
      <param name="propertyName">A string that defines the name of the field.</param>
      <param name="propertyType">The <see cref="T:System.Type" /> of the new property. </param>
      <param name="attributes">An <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> array that contains information on all attributes to assign to the property.</param>
      <param name="emitDependencyProperty">true to emit any dependency properties associated with the property; otherwise, false.</param>
      <param name="isMetaProperty">true to create the property as a meta property; otherwise, false. </param>
      <param name="isAttached">true to indicate that the emitted dependency property has its <see cref="P:System.Workflow.ComponentModel.DependencyProperty.IsAttached" /> property set to true; otherwise, false. </param>
      <param name="ownerType">The <see cref="T:System.Type" /> that is declaring the dependency property.</param>
      <param name="isReadOnly">true to create the property as a read-only property; false to create the property as a read-write property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.RemoveEvent(System.String,System.String,System.Type)">
      <summary>Removes the specified event from the specified class.</summary>
      <param name="className">A string that contains the name of the class from which to remove the event.</param>
      <param name="eventName">A string that contains the name of the event to remove.</param>
      <param name="eventType">The <see cref="T:System.Type" /> associated with the event to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.RemoveProperty(System.String,System.String,System.Type)">
      <summary>Removes the specified property from the specified class.</summary>
      <param name="className">A string that contains the name of the class from which to remove the property.</param>
      <param name="propertyName">A string that contains the name of the property to remove.</param>
      <param name="propertyType">The <see cref="T:System.Type" /> of the property to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.ShowCode">
      <summary>Displays code for the new member on a workflow design surface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.ShowCode(System.Workflow.ComponentModel.Activity,System.String,System.Type)">
      <summary>Displays code for the new member on a workflow design surface by using the specified <see cref="T:System.Workflow.ComponentModel.Activity" />, the specified method and the specified delegate type.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with the code to display.</param>
      <param name="methodName">The name of the method to display.</param>
      <param name="delegateType">The <see cref="T:System.Type" /> of the delegate associated with the method to display.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateBaseType(System.String,System.Type)">
      <summary>Updates the base type to associate with the specified class.</summary>
      <param name="className">A string that contains the name of the class to update with a new base type.</param>
      <param name="baseType">The <see cref="T:System.Type" /> to be the new base type for the class.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateEvent(System.String,System.String,System.Type,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean,System.Boolean)">
      <summary>Sets a new name and type to an existing event on the specified class.</summary>
      <param name="className">A string that contains the name of the class that contains the event to update.</param>
      <param name="oldEventName">A string that contains the name of the existing event.</param>
      <param name="oldEventType">The <see cref="T:System.Type" /> associated with the existing event.</param>
      <param name="newEventName">A string that contains the new name of the updated event.</param>
      <param name="newEventType">The <see cref="T:System.Type" /> to associate with the updated event.</param>
      <param name="attributes">An <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> array that contains information on all attributes to assign to the updated event.</param>
      <param name="emitDependencyProperty">true to update the event to emit a dependency property; otherwise, false.</param>
      <param name="isMetaProperty">true to set the event as a meta property; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateProperty(System.String,System.String,System.Type,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean,System.Boolean)">
      <summary>Sets a new name and type to a property on the specified class.</summary>
      <param name="className">A string that contains the name of the class on which the property to update resides.</param>
      <param name="oldPropertyName">A string that contains the existing name of the property.</param>
      <param name="oldPropertyType">The <see cref="T:System.Type" /> associated with the existing property.</param>
      <param name="newPropertyName">A string that contains the new name of the property.</param>
      <param name="newPropertyType">The <see cref="T:System.Type" /> to associate with the updated version of the property.</param>
      <param name="attributes">An <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> array that contains information on all attributes to assign to the updated property.</param>
      <param name="emitDependencyProperty">true to update the property emit a dependency property; otherwise, false.</param>
      <param name="isMetaProperty">true to set the property as a meta property; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateTypeName(System.String,System.String)">
      <summary>Updates the name of the specified class.</summary>
      <param name="oldClassName">A string that contains the existing name of the class.</param>
      <param name="newClassName">A string that contains the new name to assign to the class.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IPersistUIState">
      <summary>Defines methods that workflow designers and activity designers use to save UI state information to and restore UI state information from a binary stream. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IPersistUIState.LoadViewState(System.IO.BinaryReader)">
      <summary>Restores the UI state of a designer from a binary stream.</summary>
      <param name="reader">The <see cref="T:System.IO.BinaryReader" /> from which to restore the designer state.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IPersistUIState.SaveViewState(System.IO.BinaryWriter)">
      <summary>Stores the UI state of a designer to a binary stream.</summary>
      <param name="writer">The <see cref="T:System.IO.BinaryWriter" /> to use to store the state.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider">
      <summary>Provides members that classes use to filter types that are displayed in class browser dialog boxes that are displayed by the workflow designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether the specified type can be filtered.</summary>
      <returns>true if the specified type can be filtered; otherwise, false. </returns>
      <param name="type">The <see cref="T:System.Type" /> to check for filtering.</param>
      <param name="throwOnError">true to throw an exception when the <see cref="M:System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(System.Type,System.Boolean)" /> is processed; otherwise, false. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription">
      <summary>Gets the description for the filter to be displayed on the class browser dialog box.</summary>
      <returns>A string value that contains the description of the filter.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ITypeProviderCreator">
      <summary>Defines a group of methods that classes can use to create a type provider for an activity or workflow designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ITypeProviderCreator.GetLocalAssembly(System.Object)">
      <summary>Returns the local assembly associated with the specified object.</summary>
      <returns>The <see cref="T:System.Reflection.Assembly" /> associated with <paramref name="obj" />.</returns>
      <param name="obj">The <see cref="T:System.Object" /> for which to obtain the local assembly.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ITypeProviderCreator.GetTransientAssembly(System.Reflection.AssemblyName)">
      <summary>Returns the transient assembly associated with the specified assembly name.</summary>
      <returns>The transient <see cref="T:System.Reflection.Assembly" /> associated with <paramref name="assemblyName" />.</returns>
      <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName" /> for which to retrieve the transient assembly.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ITypeProviderCreator.GetTypeProvider(System.Object)">
      <summary>Returns the type provider associated with the specified object. </summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> to perform type provider tasks for <paramref name="obj" />.</returns>
      <param name="obj">The <see cref="T:System.Object" /> for which to return the type provider.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ITypeProviderCreator.GetTypeResolutionService(System.Object)">
      <summary>Returns a service that can retrieve an assembly or type by name for the specified object.</summary>
      <returns>The <see cref="T:System.ComponentModel.Design.ITypeResolutionService" /> to use to retrieve an assembly or type.</returns>
      <param name="obj">The <see cref="T:System.Object" /> for which to retrieve the type resolution service.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner">
      <summary>Defines the invoking designer and message filters properties and the method that determines whether an activity is supported for all workflow root designers.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.InvokingDesigner">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that requested the workflow root designer to be initialized.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that requested the workflow root designer to be initialized.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.IsSupportedActivityType(System.Type)">
      <summary>Returns a value that indicates whether the specified type is supported on the current workflow designer.</summary>
      <returns>true if <paramref name="type" /> is supported on the current workflow designer; otherwise, false. </returns>
      <param name="activityType">The <see cref="T:System.Type" /> to check for support on the designer.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.MessageFilters">
      <summary>Gets any message filters associated with the workflow root designer. </summary>
      <returns>A WorkflowDesignerMessageFilter read-only collection that contains any message filters associated with the workflow root designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.SupportsLayoutPersistence">
      <summary>Gets the value that indicates whether the actual workflow root designer supports the layout persistence.</summary>
      <returns>true when the designer supports layout persistence; otherwise, false.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.LineAnchor">
      <summary>Determines the shapes of connector points on a workflow design surface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.None">
      <summary>There is no connector point.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.Arrow">
      <summary>The connector point is an arrow.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.ArrowAnchor">
      <summary>The connector point is an arrow anchor.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.Diamond">
      <summary>The connector point is a diamond.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.DiamondAnchor">
      <summary>The connector point is an diamond anchor.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.Round">
      <summary>The connector point is a circle.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.RoundAnchor">
      <summary>The connector point is a circle anchor.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.Rectangle">
      <summary>The connector point is a rectangle.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.RectangleAnchor">
      <summary>The connector point is a rectangle anchor.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.RoundedRectangle">
      <summary>The connector point is a rounded rectangle.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.RoundedRectangleAnchor">
      <summary>The connector point is a rounded rectangle anchor.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.LockedActivityGlyph">
      <summary>Provides a glyph for an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to display when the activity associated with the designer cannot be modified.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.LockedActivityGlyph.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.LockedActivityGlyph" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.LockedActivityGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the glyph is associated.</param>
      <param name="activated">true to indicate whether the glyph appears on the activity designer surface; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="designer" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.LockedActivityGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Performs any tasks required to render the glyph on the activity designer surface. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to perform fill and drawing tasks.</param>
      <param name="activated">true to indicate that the glyph appears on the design surface; otherwise, false. </param>
      <param name="ambientTheme">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> to use to access ambient property settings.</param>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> from which to obtain information about user actions.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.LockedActivityGlyph.Priority">
      <summary>Gets the priority setting for the glyph on the activity design surface.</summary>
      <returns>An integer value that represents the priority setting for the <see cref="T:System.Workflow.ComponentModel.Design.LockedActivityGlyph" /> on the activity design surface.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner">
      <summary>Provides methods and properties for all activity designers that display parallel vertical layouts on a workflow design surface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.CanMoveActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Returns a value that indicates whether child activities of the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" /> can be moved.</summary>
      <returns>true if the activities can be moved from the parent activity; otherwise false.</returns>
      <param name="moveLocation">The <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that describes the location to move the activities to.</param>
      <param name="activitiesToMove">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection that contains the activities to move.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.CanRemoveActivities(System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Returns a value that indicates whether child activities of the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" /> can be deleted.</summary>
      <returns>true if the activities can be deleted from the parent activity; otherwise false.</returns>
      <param name="activitiesToRemove">The read-only collection of activities to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.FirstSelectableObject">
      <summary>Gets the first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Object" /> that is the first selectable object in the designer navigation order.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.GetDropTargets(System.Drawing.Point)">
      <summary>Returns array of rectangles that represent the valid drop locations within the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> array that represents the valid drop locations within the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</returns>
      <param name="dropPoint">The <see cref="T:System.Drawing.Point" /> that defines the x- and y-coordinates for the drop target.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.GetNextSelectableObject(System.Object,System.Workflow.ComponentModel.Design.DesignerNavigationDirection)">
      <summary>Returns the first selectable object that follows the specified object in the navigation order of the current <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Object" /> that follows the specified object.</returns>
      <param name="obj">The current <see cref="T:System.Object" /> in the navigation order.</param>
      <param name="direction">A <see cref="T:System.Workflow.ComponentModel.Design.DesignerNavigationDirection" /> enumeration value that determines the navigation order of the designer.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.LastSelectableObject">
      <summary>Gets the last selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Object" /> that is the last selectable object in the designer navigation order.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.OnCreateNewBranch">
      <summary>Indicates that the user has created a new branch activity on the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> that was added as the new branch of the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Performs layout tasks to position visual cues and child designers on the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Sets the size of the visual cues on the designers contained within the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that contains the new size settings for the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws the visual representation of the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" /> at design time.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the drawing arguments.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.Verbs">
      <summary>Gets the collection of designer verbs to be associated with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection" /> that contains the designer verbs to associate with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />. </returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph">
      <summary>Provides a glyph for an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to display when the activity it is associated with is set to read only at design time.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the glyph is associated.</param>
      <param name="activated">true to indicate whether the glyph appears on the activity designer surface; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="designer" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Performs any tasks required to render the glyph on the activity designer surface. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to perform fill and drawing tasks.</param>
      <param name="activated">true to indicate that the glyph appears on the design surface; otherwise, false. </param>
      <param name="ambientTheme">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> to use to access ambient property settings.</param>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> from which to obtain information about user actions.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph.Priority">
      <summary>Gets the priority setting for the glyph on the activity designer surface.</summary>
      <returns>An integer value that represents the priority setting for the <see cref="T:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph" /> on the activity designer surface.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.SelectionGlyph">
      <summary>Provides methods and properties for all glyph classes that an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> displays when it is selected on the workflow design surface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SelectionGlyph.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.SelectionGlyph" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SelectionGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the selection glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the selection glyph is associated.</param>
      <param name="activated">true to indicate whether the selection glyph appears on the activity designer surface; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SelectionGlyph.GetGrabHandles(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Returns an array of rectangles that represents the selected glyph's grab handles. </summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> array of the grab handles to display on the selected glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the selection glyph is associated.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SelectionGlyph.IsPrimarySelection">
      <summary>When overridden in a derived class, gets a value indicating whether the selection glyph is the primary of all selected glyphs on the design surface. </summary>
      <returns>true if the selection glyph is the primary selected glyph on the activity designer; otherwise, false. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SelectionGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Performs any tasks required to render the glyph on the activity designer surface. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to perform fill and drawing tasks.</param>
      <param name="activated">true to indicate that the glyph appears on the design surface; otherwise, false. </param>
      <param name="ambientTheme">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> to use to access ambient property settings.</param>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> from which to obtain information about user actions.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SelectionGlyph.Priority">
      <summary>Gets the view priority of the glyph on the activity designer.</summary>
      <returns>An integer that represents the view priority of the glyph on the activity designer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.SequenceDesigner">
      <summary>Provides design-time support for <see cref="T:System.Workflow.Activities.SequenceActivity" /> and all classes that derive from it.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequenceDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.SequenceDesigner" /> class. </summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.SequenceDesignerAccessibleObject">
      <summary>Implements an accessibility object that SequentialActivityDesigner classes use to adjust the designer user interface for users who have impairments.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequenceDesignerAccessibleObject.#ctor(System.Workflow.ComponentModel.Design.SequentialActivityDesigner)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.SequenceDesignerAccessibleObject" /> class by using the specified <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />. </summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> to apply to the accessible object.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequenceDesignerAccessibleObject.GetChild(System.Int32)">
      <summary>Retrieves the accessible child that corresponds to the specified index location.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the accessible child corresponding to the specified index.</returns>
      <param name="index">The zero-based index for the accessible child.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequenceDesignerAccessibleObject.GetChildCount">
      <summary>Retrieves the number of children that belong to the accessible object.</summary>
      <returns>An integer that represents the number of children that belong to the accessible object. </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequenceDesignerAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
      <summary>Navigates to another accessible object.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the specified <see cref="T:System.Windows.Forms.AccessibleNavigation" /> value.</returns>
      <param name="navdir">One of the <see cref="T:System.Windows.Forms.AccessibleNavigation" /> values.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner">
      <summary>Defines properties and methods for all activity designers that have a sequential vertical layout on the workflow design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> class. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.AccessibilityObject">
      <summary>Gets an <see cref="T:System.Windows.Forms.AccessibleObject" /> that allows the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> to adjust its UI for users who have disabilities. </summary>
      <returns>The <see cref="T:System.Windows.Forms.AccessibleObject" /> to associate with the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.CanExpandCollapse">
      <summary>Gets a value indicating whether the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> can be expanded and collapsed on the workflow designer surface. </summary>
      <returns>true if the designer can be expanded and collapsed on the workflow design surface; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.Expanded">
      <summary>Gets or sets a value indicating whether the designer is expanded on the workflow design surface. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> is expanded on the workflow design surface; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.FirstSelectableObject">
      <summary>Gets the first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Object" /> that is the first selectable object in the designer navigation order.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.GetConnectors">
      <summary>Returns an array of rectangles that bound the activity designer's connectors.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> array that bounds the connectors.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.GetDropTargets(System.Drawing.Point)">
      <summary>Returns array of rectangles that represent the valid drop locations within the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> array that represents the valid drop locations within the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</returns>
      <param name="dropPoint">The <see cref="T:System.Drawing.Point" /> that defines the x- and y-coordinates for the drop target.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.GetNextSelectableObject(System.Object,System.Workflow.ComponentModel.Design.DesignerNavigationDirection)">
      <summary>Returns the first selectable object that follows the specified object in the navigation order of the current <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <returns>The first selectable <see cref="T:System.Object" /> that follows the <paramref name="obj" /> parameter in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />. </returns>
      <param name="obj">The current object in the navigation order.</param>
      <param name="direction">A <see cref="T:System.Workflow.ComponentModel.Design.DesignerNavigationDirection" /> enumeration value that determines the navigation order of the designer.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.Glyphs">
      <summary>Gets a read-only collection of glyphs that are associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> read-only collection that contains all of the glyphs to display on the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HelpText">
      <summary>Gets or sets the text to display when the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> contains no other activity designers.</summary>
      <returns>A string that contains the text to display on the designer surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HelpTextRectangle">
      <summary>Gets the rectangle that serves as the bounds for the text displayed by the <see cref="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HelpText" /> property.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that serves as the bounds for the text displayed by the <see cref="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HelpText" /> property.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HelpTextSize">
      <summary>Gets the height and width of the text to display in the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> when it contains no child activity designers.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that defines the height and width of the text displayed by <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> when it contains no child activity designers. By default <see cref="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HelpTextSize" /> is set to a newly initialized <see cref="T:System.Drawing.Size" />. </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HitTest(System.Drawing.Point)">
      <summary>Returns information about the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> at the specified point on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains information about the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</returns>
      <param name="point">The <see cref="T:System.Drawing.Point" /> location on the workflow design surface from which to gather information.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.Initialize(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes the designer by using the specified activity.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> with which to initialize the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.LastSelectableObject">
      <summary>Gets the last selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Object" /> that is the last selectable object in the designer navigation order.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Performs layout tasks to position visual cues and child designers on the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Sets the size of the visual cues on the designers contained within the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that contains the new size settings for <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />. </returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws the visual representation of activity at design time.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the drawing arguments.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter">
      <summary>Represents a header or footer that is associated with a <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.#ctor(System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> class. </summary>
      <param name="parent">The SequentialWorkflowRootDesigner with which the </param>
      <param name="isHeader">true to indicate that the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> is a header; false to indicate that the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> is a footer. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.AssociatedDesigner">
      <summary>Gets the root designer to which the header or footer is applied.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" /> to which the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> is applied.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.Bounds">
      <summary>Gets the bounding rectangle of the header or footer on the workflow design surface.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> that bounds the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.Image">
      <summary>Gets or sets the image associated with the header or footer.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> to associate with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.ImageRectangle">
      <summary>Gets the bounding rectangle for the image associated with the header or footer.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds for the <see cref="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.Image" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.OnLayout(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> when the elements it contains are repositioned by the user.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws the header or footer associated with the workflow root designer on the design surface.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.Text">
      <summary>Gets or sets the text description associated with the header or footer.</summary>
      <returns>The string that contains the text description associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.TextRectangle">
      <summary>Gets the bounding rectangle for the text associated with the header or footer.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds for the <see cref="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.Text" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner">
      <summary>Contains properties and methods to provide consistent look and feel to all root designers on a workflow design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.CanBeParentedTo(System.Workflow.ComponentModel.Design.CompositeActivityDesigner)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> can be set as the parent of the activity associated with the designer.</summary>
      <returns>true to allow the activity associated with <paramref name="parentActivityDesigner" /> to be the parent of the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />; otherwise, false. </returns>
      <param name="parentActivityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> to check.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.CanExpandCollapse">
      <summary>Gets a value indicating whether the designer can be expanded and collapsed. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" /> can be expanded and collapsed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.Footer">
      <summary>Gets the footer associated with the root designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> that represents the footer associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.GetInnerConnections(System.Workflow.ComponentModel.Design.DesignerEdges)">
      <summary>Returns a read-only collection of points that represent the inner connection of the designer. </summary>
      <returns>A collection that contains the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> objects used for a connectable designer.</returns>
      <param name="edges">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> on which to gather the collection of connection points.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.Glyphs">
      <summary>Gets the collection of glyphs that are displayed on the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> that contains the glyphs displayed on the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.Header">
      <summary>Gets the header associated with the root designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> that represents the header associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.Image">
      <summary>Gets the image associated with the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> to associate with the designer.  </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.ImageRectangle">
      <summary>Gets the value for the enclosing bounds of the image associated with the designer in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that encloses the <see cref="T:System.Drawing.Image" /> displayed for the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.InvokingDesigner">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that requested the sequential workflow root designer to be initialized.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that requested the workflow root designer to be initialized.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.MinimumSize">
      <summary>Gets the minimum size for the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the minimum size of the sequential workflow designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Sets the size of the visual cues on the designers contained within the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that represents the size of the visual cues on the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws any headers and footers associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.OnSmartTagVisibilityChanged(System.Boolean)">
      <summary>Notifies the designer whether smart tags are to be shown or hidden on the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</summary>
      <param name="visible">true to display smart tags on the designer surface; otherwise, false.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.ShowSmartTag">
      <summary>Gets a value indicating whether the root designer displays smart tags.</summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" /> displays smart tags; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.SmartTagRectangle">
      <summary>Gets the rectangle on the designer surface in which to display a smart tag.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that defines the bounds in which to display the smart tag.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.Text">
      <summary>Gets the description associated with the designer.</summary>
      <returns>A string that contains the description associated with the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.TitleHeight">
      <summary>Gets the height of the title area of the designer.</summary>
      <returns>An integer that represents the height of the title area of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ShadowGlyph">
      <summary>Provides a drop shadow for display by <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> classes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ShadowGlyph.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ShadowGlyph" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ShadowGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the glyph is associated.</param>
      <param name="activated">true to indicate whether the glyph appears on the activity designer surface; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ShadowGlyph.Priority">
      <summary>Gets the priority setting for the glyph on the activity designer surface.</summary>
      <returns>An integer value that represents the priority setting for the <see cref="T:System.Workflow.ComponentModel.Design.ShadowGlyph" /> on the activity designer surface.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner">
      <summary>Provides common methods and properties for composite activity designers that contain structured layouts. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> class. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.ActiveView">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> that contains information about the current designer view displayed by the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> that contains information about the current view displayed by the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.CanInsertActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Returns a value that indicates whether the specified activities can be added to the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> at the specified location on the workflow design surface.</summary>
      <returns>true if the specified activities can be inserted at the specified location on the workflow design surface; otherwise, false. </returns>
      <param name="insertLocation">The <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains the screen location at which to attempt to insert the activities.</param>
      <param name="activitiesToInsert">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection that contains the activities to add.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.CanRemoveActivities(System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Returns a value that indicates whether the specified activities can be removed from the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>true if the specified activities can be removed; otherwise, false. </returns>
      <param name="activitiesToRemove">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection that contains the activities to remove.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.ContainedDesigners">
      <summary>Gets a generic read-only collection that contains all activity designers that are children of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> read-only collection that contains the child designers.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.CurrentDropTarget">
      <summary>Gets or sets the index of the current drop target in the array of drop targets returned by <see cref="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.GetDropTargets(System.Drawing.Point)" />.</summary>
      <returns>An integer that represents the index of the current drop target for the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.DrawConnectors(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Point[],System.Workflow.ComponentModel.Design.LineAnchor,System.Workflow.ComponentModel.Design.LineAnchor)">
      <summary>Draws all of the connectors to display on the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the connectors.</param>
      <param name="pen">The <see cref="T:System.Drawing.Pen" /> to draw the connectors.</param>
      <param name="points">The <see cref="T:System.Drawing.Point" /> array that contains the endpoints for each of the connectors to draw.</param>
      <param name="startCap">A <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> that determines the graphic to draw at connector start points.</param>
      <param name="endCap">A <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> that determines the graphic to draw at connector end points.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.EnsureVisibleContainedDesigner(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Ensures that the specified activity designer is visible on the workflow design surface.</summary>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> for which to ensure visibility on the workflow design surface.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.FirstSelectableObject">
      <summary>Gets the first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Object" /> that is the first selectable object in the designer navigation order.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.GetDropTargets(System.Drawing.Point)">
      <summary>Returns an array of valid drop locations on the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> surface. </summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> array that represents the valid drop locations on the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> surface.</returns>
      <param name="dropPoint">The <see cref="T:System.Drawing.Point" /> to query the design surface with.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.GetInnerConnections(System.Workflow.ComponentModel.Design.DesignerEdges)">
      <summary>Returns a read-only collection of points that represent the inner connection points for the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> generic read-only collection that contains the inner connection points for the designer.</returns>
      <param name="edges">The DesignerEdges along which to search for connection points. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.GetNextSelectableObject(System.Object,System.Workflow.ComponentModel.Design.DesignerNavigationDirection)">
      <summary>Returns the first selectable object that follows the specified object in the navigation order for the current <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />. </summary>
      <returns>The first selectable <see cref="T:System.Object" /> that follows the <paramref name="obj" /> parameter in the navigation order. </returns>
      <param name="current">The current object in the navigation order.</param>
      <param name="direction">A <see cref="T:System.Workflow.ComponentModel.Design.DesignerNavigationDirection" /> that determines the navigation order of the designer.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.Initialize(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes the designer by using the specified activity.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> with which to initialize the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.InsertActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Adds the specified activities to the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> at the specified location on the workflow design surface.</summary>
      <param name="insertLocation">The <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that specifies the location to add the activities.</param>
      <param name="activitiesToInsert">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection that contains the activities to add to the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.LastSelectableObject">
      <summary>Gets the last selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Object" /> that is the last selectable object in the designer navigation order.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.LoadViewState(System.IO.BinaryReader)">
      <summary>Loads the view state of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> from a binary stream.</summary>
      <param name="reader">A <see cref="T:System.IO.BinaryReader" /> used to restore the designer view state.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.MinimumSize">
      <summary>Gets the minimum size settings for the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that represents the smallest possible size for the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.MoveActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Moves the specified activities from one designer displayed in the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> to another.</summary>
      <param name="moveLocation">The <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains the location on the workflow design surface to move the activities.</param>
      <param name="activitiesToMove">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection to move.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnActivityChanged(System.Workflow.ComponentModel.Design.ActivityChangedEventArgs)">
      <summary>Notifies the designer when the activity associated with it changes.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs" /> that contains information about the changed activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnContainedActivitiesChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when more than one of the activities it contains has changed. </summary>
      <param name="listChangeArgs">The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> that contains information about the activities that changed.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnDragDrop(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when a drag-drop operation is completed with the bounds of its design surface.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that defines the operation event arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnDragEnter(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor enters the bounds of the designer.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that defines the operation event arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnDragLeave">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor leaves the bounds of the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnDragOver(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor is inside the bounds of the designer.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that defines the operation event arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Performs layout tasks to position visual cues and child designers on the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when the size of the visual cues on the designers displayed by the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> have changed.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that represents the new size of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> on the workflow design surface.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnShowSmartTagVerbs(System.Drawing.Point)">
      <summary>Displays the designer verbs associated with a smart tag at a specified location on the workflow design surface.</summary>
      <param name="smartTagPoint">The <see cref="T:System.Drawing.Point" /> that represents the location on the workflow design surface for which to show <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> objects.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnViewChanged(System.Workflow.ComponentModel.Design.DesignerView)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when the current designer view changes.</summary>
      <param name="view">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> that is to be set.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.SaveViewState(System.IO.BinaryWriter)">
      <summary>Stores the current view state of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> to a binary stream.</summary>
      <param name="writer">The <see cref="T:System.IO.BinaryWriter" /> to which the current designer view state is stored.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.ShowSmartTag">
      <summary>Gets a value indicating whether the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> displays smart tags.</summary>
      <returns>true if the designer displays smart tags; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.SmartTagVerbs">
      <summary>Gets a read-only collection of designer actions that are associated with the smart tags on the designer.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> read-only collection that contains all the actions associated with the smart tags on the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.Views">
      <summary>Get a read-only collection of designer views that the current <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> hosts.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> read-only collection that contains the views hosted by the current <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.TextQuality">
      <summary>Specifies the text rendering settings for the AmbientTheme class.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.TextQuality.Aliased">
      <summary>The ambient text quality setting is aliased.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.TextQuality.AntiAliased">
      <summary>The ambient text quality setting is antialiased.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog">
      <summary>Represents a common dialog box that allows the user to specify a workflow theme to apply to a workflow design surface. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog" /> class by using an <see cref="T:System.IServiceProvider" />. </summary>
      <param name="serviceProvider">The service provider that provides custom support to the <see cref="T:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog.#ctor(System.IServiceProvider,System.Workflow.ComponentModel.Design.WorkflowTheme)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog" /> class by using an <see cref="T:System.IServiceProvider" /> and <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />. </summary>
      <param name="serviceProvider">The service provider that provides custom support to the <see cref="T:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog" />.</param>
      <param name="theme">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> to be highlighted in the theme configuration dialog box in the workflow designer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog.ComposedTheme">
      <summary>Gets the workflow theme that is highlighted in the theme configuration dialog box in the workflow designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> that is highlighted in the theme configuration dialog box in the workflow designer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ThemeType">
      <summary>Specifies the type of theme displayed in the Options dialog box.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.ThemeType.Default">
      <summary>The theme settings are provided by the default workflow theme.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.ThemeType.System">
      <summary>The theme settings are provided by the operating system. </summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.ThemeType.UserDefined">
      <summary>The theme settings are provided by user-defined themes.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.TypeBrowserDialog">
      <summary>Represents a dialog box that allows the user to choose a type. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeBrowserDialog.#ctor(System.IServiceProvider,System.Workflow.ComponentModel.Design.ITypeFilterProvider,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.TypeBrowserDialog" /> class by using an <see cref="T:System.IServiceProvider" />, an <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" />, and a string. </summary>
      <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> from which the dialog obtains services.</param>
      <param name="filterProvider">The <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" /> from which to obtain type filtering services.</param>
      <param name="selectedTypeName">The name of the selected type.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeBrowserDialog.#ctor(System.IServiceProvider,System.Workflow.ComponentModel.Design.ITypeFilterProvider,System.String,System.Workflow.ComponentModel.Compiler.TypeProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.TypeBrowserDialog" /> class by using an <see cref="T:System.IServiceProvider" />, an <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" />, a string, and a <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" />.</summary>
      <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> from which to obtain services.</param>
      <param name="filterProvider">The <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" /> from which to obtain type filtering services.</param>
      <param name="selectedTypeName">The name of the selected type.</param>
      <param name="typeProvider">The <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> that allows access local assemblies to load in the type browser dialog. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.TypeBrowserDialog.SelectedType">
      <summary>Gets the type selected by the user in the type browser dialog box.</summary>
      <returns>The <see cref="T:System.Type" /> selected by the user in the type browser dialog box.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.TypeBrowserDialog.System#ComponentModel#ISite#Component">
      <summary>Gets the component to associate with the type browser dialog box.</summary>
      <returns>The <see cref="T:System.ComponentModel.IComponent" /> to bind to the <see cref="T:System.Workflow.ComponentModel.Design.TypeBrowserDialog" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.TypeBrowserDialog.System#ComponentModel#ISite#Container">
      <summary>Gets the container to associate with the type browser dialog.</summary>
      <returns>The <see cref="T:System.ComponentModel.IContainer" /> to associate with the <see cref="T:System.Workflow.ComponentModel.Design.TypeBrowserDialog" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.TypeBrowserDialog.System#ComponentModel#ISite#DesignMode">
      <summary>Gets a value that indicates whether the type browser dialog is in design mode. </summary>
      <returns>true if <see cref="T:System.Workflow.ComponentModel.Design.TypeBrowserDialog" /> is in design mode; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.TypeBrowserDialog.System#ComponentModel#ISite#Name">
      <summary>Gets or sets name of the component associated with the type browser dialog.</summary>
      <returns>The name of the component associated with the type browser dialog.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeBrowserDialog.System#IServiceProvider#GetService(System.Type)">
      <summary>Retrieves the service object for the specified type.</summary>
      <returns>A service object of type <paramref name="serviceType" />, or a null reference (Nothing in Visual Basic) if there is no service object of type <paramref name="serviceType" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of service object to retrieve.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.TypeBrowserEditor">
      <summary>Provides a user interface for representing and editing the values the Windows Workflow Foundation types in an object browser associated with a workflow designer.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeBrowserEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.TypeBrowserEditor" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeBrowserEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>Edits the value of the specified object using the editor style indicated by <see cref="Overload:System.Workflow.ComponentModel.Design.TypeBrowserEditor.GetEditStyle" />.</summary>
      <returns>The new value of the object. </returns>
      <param name="typeDescriptorContext">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> that the editor can use to obtain services.</param>
      <param name="value">The <see cref="T:System.Object" /> to edit.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeDescriptorContext" /> or <paramref name="serviceProvider" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.Exception">
        <see cref="M:System.IServiceProvider.GetService(System.Type)" /> returns a null reference (Nothing) when it attempts to obtain the type provider. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeBrowserEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns the editor style used by the <see cref="Overload:System.Workflow.ComponentModel.Design.TypeBrowserEditor.EditValue" /> method.</summary>
      <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates the style of editor used by <see cref="Overload:System.Workflow.ComponentModel.Design.TypeBrowserEditor.EditValue" />. Unless overridden by an inheriting class, this method returns <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.Modal" />.</returns>
      <param name="typeDescriptorContext">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.TypeFilterProviderAttribute">
      <summary>Specifies the class a type or member uses to filter the types that are displayed in the class browser dialog box. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeFilterProviderAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.TypeFilterProviderAttribute" /> class by using the specified type name. </summary>
      <param name="typeName">A string that contains the name of the type that implements <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" /> to apply to the class or member.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeFilterProviderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.TypeFilterProviderAttribute" /> class. </summary>
      <param name="type">A <see cref="T:System.Type" /> that implements <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" /> to apply to the class or member.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.TypeFilterProviderAttribute.TypeFilterProviderTypeName">
      <summary>Gets the name of the type that implements <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" />.</summary>
      <returns>A string that contains the name of the type that implements  <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader">
      <summary>Provides common designer loader functionality that can be used to implement custom workflow designer loaders.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.AddActivityToDesigner(System.Workflow.ComponentModel.Activity)">
      <summary>Adds an activity to the designer host after it has been added to the parent activities collection.</summary>
      <param name="activity">
        <see cref="T:System.Workflow.ComponentModel.Activity" /> to add.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader" />. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.FileName">
      <summary>When overridden in a derived class, gets the file name of the designer to load. </summary>
      <returns>A string that contains the file name of the designer to load.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.Flush">
      <summary>Writes pending changes to the location that the designer was loaded from.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.ForceReload">
      <summary>When overridden in a derived class, causes <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader" /> to reload the designer. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.GetFileReader(System.String)">
      <summary>When overridden in a derived class, retrieves an object that <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader" /> uses to read from the specified file. </summary>
      <returns>A <see cref="T:System.IO.TextReader" /> to read the specified file.</returns>
      <param name="filePath">A string that contains a path to the file to read from.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.GetFileWriter(System.String)">
      <summary>When overridden in a derived class, gets an object that the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader" /> uses to write to the specified file. </summary>
      <returns>A <see cref="T:System.IO.TextWriter" /> to write to the file.</returns>
      <param name="filePath">A string that contains the path to the file to write to.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.InDebugMode">
      <summary>Gets a value that indicates whether the workflow should be loaded in debug mode.  </summary>
      <returns>true if the workflow should be loaded in debug mode; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.Initialize">
      <summary>Initializes the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader" /> with any services required by the designer loader host.  </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.LoadDesignerLayout(System.Xml.XmlReader,System.Collections.IList@)">
      <summary>Applies the serialized layout to the root designer in the current designer host.</summary>
      <param name="layoutReader">An <see cref="T:System.Xml.XmlReader" /> that is created for the serialized layout.</param>
      <param name="layoutLoadErrors">List of errors that occurred during the deserialization.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.LoadDesignerLayoutFromResource(System.Type,System.String,System.Collections.IList@)">
      <summary>Retrieves the specified resource and calls the <see cref="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.LoadDesignerLayout(System.Xml.XmlReader,System.Collections.IList@)" /> method that applies the serialized layout to the root designer in the current designer host.</summary>
      <param name="type">
        <see cref="T:System.Type" /> that the resource is associated with.</param>
      <param name="manifestResourceName">Name of the resource.</param>
      <param name="errors">Errors encountered during the call to <see cref="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.LoadDesignerLayout(System.Xml.XmlReader,System.Collections.IList@)" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.OnEndLoad(System.Boolean,System.Collections.ICollection)">
      <summary>Called when loading of the designer is completed.</summary>
      <param name="successful">true if load operation is successful; otherwise, false.</param>
      <param name="errors">Contains the load errors.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.PerformFlush(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>Writes cached changes to the location that the designer was loaded from.</summary>
      <param name="serializationManager">Class that implements the <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> interface, which manages design-time serialization.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.PerformLoad(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>Loads the designer from a design document.</summary>
      <param name="serializationManager">Class that implements the <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> interface, which manages design-time serialization.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.RemoveActivityFromDesigner(System.Workflow.ComponentModel.Activity)">
      <summary>Removes an activity from the designer host after it has been added to the parent activities collection.</summary>
      <param name="activity">Activity to be removed from the designer.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.SaveDesignerLayout(System.Xml.XmlWriter,System.Workflow.ComponentModel.Design.ActivityDesigner,System.Collections.IList@)">
      <summary>Serializes the designer layout.</summary>
      <param name="layoutWriter">XmlWriter that is used to serialize the layout into.</param>
      <param name="rootDesigner">Root activity from which you get the layout information.</param>
      <param name="layoutSaveErrors">Errors encountered during serialization.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.TargetFrameworkTypeDescriptionProvider">
      <summary>Gets the <see cref="T:System.ComponentModel.TypeDescriptor" /> metadata of the target .NET Framework.</summary>
      <returns>The <see cref="T:System.ComponentModel.TypeDescriptor" /> metadata of the target .NET Framework.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter">
      <summary>Provides a base class for all workflow message filters.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.#ctor">
      <summary>When implemented in a derived class, initializes an instance of a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.Finalize">
      <summary>Attempts to free resources by calling Dispose(false) before the object is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.Initialize(System.Workflow.ComponentModel.Design.WorkflowView)">
      <summary>Initializes the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> with the associated <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="parentView">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> to associate with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.MessageHitTestContext">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that describes the context of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> object that contains information about the context of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>Occurs when the mouse button is released above an object during a drag operation. </summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>Occurs when the mouse pointer enters the bounds of an object during a drag operation.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnDragLeave">
      <summary>Occurs when the mouse pointer leaves the bounds of an object during a drag operation.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>Occurs when the mouse pointer moves within the bounds of an object during a drag operation.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>Occurs during a drag operation.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is pressed.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is released.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnLayout(System.Windows.Forms.LayoutEventArgs)">
      <summary>Occurs when child objects should be repositioned.</summary>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseCaptureChanged">
      <summary>Occurs when the items selected by dragging the mouse changes.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when you double-click the mouse.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when a mouse button is clicked.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseEnter(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse pointer enters the bounds of an object.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseHover(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse pointer pauses above an object.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseLeave">
      <summary>Occurs when the mouse pointer leaves the bounds of an object.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse pointer moves while within the bounds of an object.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse button is released.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse wheel moves.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnPaint(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,System.Workflow.ComponentModel.Design.AmbientTheme)">
      <summary>Occurs when a paint message is received.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the event.</param>
      <param name="viewPort">A <see cref="T:System.Drawing.Rectangle" /> that describes the area to be painted.</param>
      <param name="ambientTheme">A <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> used to obtain information about the theme.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnPaintWorkflowAdornments(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,System.Workflow.ComponentModel.Design.AmbientTheme)">
      <summary>Occurs when the workflow should repaint its adornments.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A PaintEventArgs that contains information about the event.</param>
      <param name="viewPort">A Rectangle that describes the area to be painted.</param>
      <param name="ambientTheme">An AmbientTheme used to obtain information about the theme.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
      <summary>Occurs during a drag operation.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnScroll(System.Windows.Forms.ScrollBar,System.Int32)">
      <summary>Occurs when a user scrolls in a workflow designer.</summary>
      <returns>true if the message is handled; otherwise, false. </returns>
      <param name="sender">The <see cref="T:System.Windows.Forms.ScrollBar" /> that the user scrolled.</param>
      <param name="value">The position of the scroll bar.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnShowContextMenu(System.Drawing.Point)">
      <summary>Occurs when the workflow should show a context menu.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="screenMenuPoint">The point at which to the context menu is shown.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnThemeChange">
      <summary>Occurs when the theme of the workflow changes.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.ParentView">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> that is associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.ProcessMessage(System.Windows.Forms.Message)">
      <summary>Occurs when a raw Win32 message must be processed.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="message">The Message to handle.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowMenuCommands">
      <summary>Defines a set of <see cref="T:System.ComponentModel.Design.CommandID" /> fields that each corresponds to a command function provided by the workflow designers. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowMenuCommands" /> class.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.BreakpointActionMenu">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the breakpoint action menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.BreakpointConditionMenu">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the breakpoint condition menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.BreakpointConstraintsMenu">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the breakpoint constraints menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.BreakpointHitCountMenu">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the breakpoint hit count menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.BreakpointLocationMenu">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the breakpoint location menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ChangeTheme">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the change theme menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ClearBreakpointsMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the clear breakpoints menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Collapse">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the collapse menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.CopyToClipboard">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the copy menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.CreateTheme">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the create theme menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DebugCommandSetId">
      <summary>Provides a unique identifier for the debug command set. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DebugStepBranchMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the debug step branch menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DebugStepInstanceMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the debug step instance menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DebugWorkflowGroupId">
      <summary>Provides a unique identifier for the debug workflow group of menus. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DefaultFilter">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the default filter menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DefaultPage">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the default page menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DesignerActionsMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the designer actions menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DesignerProperties">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the designer properties menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Disable">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the disable menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Enable">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the enable menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.EnableBreakpointMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the enable breakpoint menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ExecutionStateMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the execution state menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Expand">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the expand menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.FirstZoomCommand">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom first menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.GotoDisassemblyMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the goto disassembly menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.InsertBreakpointMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the insert breakpoint menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.InsertTracePointMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the insert tracepoint menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.LastZoomCommand">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom last menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.MenuGuid">
      <summary>Provides a unique identifier for the menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.NewDataBreakpointMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the new data breakpoint menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.NewFileTracePointMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the new file tracepoint menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PageDown">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the PageDown menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PageLayoutMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the page layout menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PageSetup">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the page setup menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PageUp">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the PageUp menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Pan">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the pan menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PanMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the pan menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Print">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the print menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PrintPreview">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the print preview menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PrintPreviewPage">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the print preview page menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.RunToCursorMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the run to cursor menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.SaveAsImage">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the save as image menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.SelectionMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the selection menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.SetNextStatementMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the set next statement menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ShowAll">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the show all menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ShowNextStatementMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the show next statement menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ToggleBreakpointMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the toggle breakpoint menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupActions">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the verb group actions menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupDesignerActions">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the verb group designer actions menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupEdit">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the edit verb group menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupGeneral">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the general verb group menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupMisc">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the miscellaneous verb group menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupOptions">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the options verb group menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupView">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the view verb group menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.WorkflowCommandSetId">
      <summary>Provides a unique identifier for the workflow command set. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.WorkflowToolBar">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the workflow toolbar menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom100Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 100% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom150Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 150% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom200Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 200% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom300Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 300% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom400Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 400% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom50Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 50% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom75Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 75% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ZoomIn">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom in menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ZoomLevelCombo">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom level combo menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ZoomLevelListHandler">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom level list handler menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ZoomMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ZoomOut">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom out menu. This field is read-only.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowOutline">
      <summary>Renders the document outline for the workflow currently being designed in the workflow designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" /> class by using an object that retrieves a service object. </summary>
      <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> that retrieves a service object for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The hosting environment obtained through <paramref name="serviceProvider" /> is null (Nothing).- or -The design surface obtained through <paramref name="serviceProvider" /> is null (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.CreateNewNode(System.Workflow.ComponentModel.Activity)">
      <summary>Creates a new node for an <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutlineNode" /> for the activity.</returns>
      <param name="activity">Activity for which a new node must be created.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.WorkflowOutline.Expanding">
      <summary>Event raised when the TreeView for the document outline is expanding.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.GetNode(System.Workflow.ComponentModel.Activity)">
      <summary>Retrieves the node in the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" /> associated with the specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutlineNode" /> that is associated with <paramref name="activity" />.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with the node to retrieve.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.GetService(System.Type)">
      <summary>Returns an object that represents a service provided by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" /> or by its <see cref="T:System.ComponentModel.Container" />.</summary>
      <returns>An <see cref="T:System.Object" /> that represents a service provided by <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> that represents the service provided by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowOutline.NeedsExpandAll">
      <summary>Gets or sets a value that indicates whether the document outline TreeView needs to be expanded.</summary>
      <returns>true if the document outline TreeView needs to be expanded; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.OnBeginUpdate">
      <summary>Called when the control is starting to update the <see cref="P:System.Workflow.ComponentModel.Design.WorkflowOutline.TreeView" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.OnEndUpdate">
      <summary>Called when the control is finished updating the <see cref="P:System.Workflow.ComponentModel.Design.WorkflowOutline.TreeView" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.OnLoad(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Form.Load" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.OnNodeAdded(System.Workflow.ComponentModel.Design.WorkflowOutlineNode)">
      <summary>Called after a new node that is not null is added to the activity tree.</summary>
      <param name="node">Node that was added to the activity tree.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.OnNodeSelected(System.Workflow.ComponentModel.Design.WorkflowOutlineNode)">
      <summary>Called when the user selects a node in the activity tree.</summary>
      <param name="node">Node that was selected.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.OnRefreshNode(System.Workflow.ComponentModel.Design.WorkflowOutlineNode)">
      <summary>Called when the node is refreshed.</summary>
      <param name="node">Workflow outline node that was refreshed.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.RefreshNode(System.Workflow.ComponentModel.Design.WorkflowOutlineNode,System.Boolean)">
      <summary>Forces a node to be refreshed.</summary>
      <param name="nodeToUpdate">Node that must be updated.</param>
      <param name="refreshChildNodes">Boolean value that indicates whether child nodes must be updated.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.RefreshWorkflowOutline">
      <summary>Refreshes color and icons of all document outline nodes.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.ReloadWorkflowOutline">
      <summary>Reloads the document outline control.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowOutline.RootNode">
      <summary>Gets the root node of the root provider.</summary>
      <returns>A <see cref="T:System.Windows.Forms.TreeNode" /> that is the root node.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowOutline.TreeView">
      <summary>Retrieves the <see cref="T:System.Windows.Forms.TreeView" /> control used to display the document outline</summary>
      <returns>The <see cref="T:System.Windows.Forms.TreeView" /> control used to display the document outline.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowOutlineNode">
      <summary>Represents a node in a workflow outline document displayed in the workflow designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutlineNode.#ctor(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutlineNode" /> class by using an activity.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> to associate with the node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowOutlineNode.Activity">
      <summary>Gets the activity associated with the node.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutlineNode" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutlineNode.OnActivityRename(System.String)">
      <summary>Changes the text displayed in the label of the workflow outline node to the specified name. </summary>
      <param name="newName">A string that contains the name to display in the label of the workflow outline node.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutlineNode.RefreshNode">
      <summary>Updates property settings on the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutlineNode" />.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowPageSetupDialog">
      <summary>Represents the page setup dialog for the workflow designer when a user selects the Page Setup… command. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowPageSetupDialog.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowPageSetupDialog" /> class. </summary>
      <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> from which the dialog obtains services.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowTheme">
      <summary>Provides the look and feel property settings to a workflow in design-time environment.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.#ctor">
      <summary>Initializes a new instance of a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.AmbientTheme">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> that describes default values for the look and feel of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.Clone">
      <summary>Creates a duplicate theme.</summary>
      <returns>An object that represents the newly-cloned theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.ContainingFileDirectory">
      <summary>Gets the directory part of the <see cref="P:System.Workflow.ComponentModel.Design.WorkflowTheme.FilePath" />.</summary>
      <returns>The directory part of the <see cref="P:System.Workflow.ComponentModel.Design.WorkflowTheme.FilePath" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.CreateStandardTheme(System.Workflow.ComponentModel.Design.ThemeType)">
      <summary>Creates a standard theme.</summary>
      <returns>A new <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />.</returns>
      <param name="standardThemeType">The <see cref="T:System.Workflow.ComponentModel.Design.ThemeType" /> of the standard theme to create.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.CurrentTheme">
      <summary>Gets or sets the current theme.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> that is used for display settings.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.Description">
      <summary>Gets or sets the description of the theme.</summary>
      <returns>The description of the theme.</returns>
      <exception cref="T:System.InvalidOperationException">The property value cannot be set because the workflow theme is read-only.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.DesignerThemes">
      <summary>Gets a list of designer themes associated with the workflow.</summary>
      <returns>A list of designer themes associated with the workflow.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.EnableChangeNotification">
      <summary>Sets or gets the state of change notification.</summary>
      <returns>true to enable change notification; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.FilePath">
      <summary>Gets or sets the file path for the theme.</summary>
      <returns>The file path to the theme.</returns>
      <exception cref="T:System.InvalidOperationException">The property value cannot be set because the workflow theme is read-only.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.GenerateThemeFilePath">
      <summary>Generates a file path for the theme.</summary>
      <returns>A new, unique file path for the theme.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.GetDesignerTheme(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Gets the theme for the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> associated with the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</returns>
      <param name="designer">The activity designer from which to retrieve the theme.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.Load(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String)">
      <summary>Loads a new theme from the specified path using a serialization manager.</summary>
      <returns>A new <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> loaded from the file path specified using the serialization manager specified.</returns>
      <param name="serializationManager">The serialization manager to use to load the theme.</param>
      <param name="themeFilePath">The file path from which to load the theme.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.Load(System.String)">
      <summary>Loads the theme from the specified file path.</summary>
      <returns>A new <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> loaded from the filename specified.</returns>
      <param name="themeFilePath">The file path to the theme.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.LoadThemeSettingFromRegistry">
      <summary>Loads a theme from the registry.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> loaded from the registry.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.LookupPath">
      <summary>Gets the file path from the registry.</summary>
      <returns>The file path from the registry to the theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.Name">
      <summary>Gets or sets the name of the theme.</summary>
      <returns>The name of the theme.</returns>
      <exception cref="T:System.InvalidOperationException">The property value cannot be set because the workflow theme is read-only.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.ReadOnly">
      <summary>Gets or sets a value that indicates whether the workflow theme is read-only. </summary>
      <returns>true if the workflow theme is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.RegistryKeyPath">
      <summary>Gets the registry key path for the theme.</summary>
      <returns>The registry key for the theme.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.Save(System.String)">
      <summary>Saves a theme to a file.</summary>
      <param name="themeFilePath">The file in which to save the WorkflowTheme.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.SaveThemeSettingToRegistry">
      <summary>Saves a theme to the registry.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.StandardThemes">
      <summary>Gets the list of standard themes.</summary>
      <returns>A list of available themes.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.System#IDisposable#Dispose">
      <summary>Releases the managed resources used by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />.</summary>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.WorkflowTheme.ThemeChanged">
      <summary>Occurs when a theme changes.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.Type">
      <summary>Gets the type of the theme.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ThemeType" /> of the theme. Possible values are Default, System, and UserDefined.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.Version">
      <summary>Gets or sets the version of the theme.</summary>
      <returns>The version information for the theme.</returns>
      <exception cref="T:System.InvalidOperationException">The property value cannot be set because the workflow theme is read-only.</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowView">
      <summary>Provides a design surface, which renders a visual representation of process flow.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.#ctor">
      <summary>Initializes an instance of a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.#ctor(System.IServiceProvider)">
      <summary>Initializes an instance of a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> with the specified service provider.</summary>
      <param name="serviceProvider">An object that implements the <see cref="T:System.IServiceProvider" /> interface.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.AddDesignerMessageFilter(System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter)">
      <summary>Adds a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> to the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="designerMessageFilter">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> to add to the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ClientPointToLogical(System.Drawing.Point)">
      <summary>Converts a <see cref="T:System.Drawing.Point" /> from client coordinates to logical coordinates.</summary>
      <returns>The <see cref="T:System.Drawing.Point" /> converted from client coordinates to logical coordinates.</returns>
      <param name="clientPoint">The <see cref="T:System.Drawing.Point" /> to convert from client coordinates to logical coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ClientRectangleToLogical(System.Drawing.Rectangle)">
      <summary>Converts a <see cref="T:System.Drawing.Rectangle" /> from client coordinates to logical coordinates.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> converted from client coordinates to logical coordinates.</returns>
      <param name="rectangle">The <see cref="T:System.Drawing.Rectangle" /> to convert from client to logical coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ClientSizeToLogical(System.Drawing.Size)">
      <summary>Converts a <see cref="T:System.Drawing.Size" /> from client to logical coordinates.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> converted from client coordinates to logical coordinates.</returns>
      <param name="clientSize">The <see cref="T:System.Drawing.Size" /> to convert from client to logical coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.CreateAccessibilityInstance">
      <summary>Creates a new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.EnableFitToScreen">
      <summary>Enables the button on the design surface that, when clicked, changes the zoom level of the workflow design surface so that the entire workflow is displayed in the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>true if the dynamic button is enabled; otherwise, false. </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.EnsureVisible(System.Object)">
      <summary>Ensures that the <see cref="T:System.Object" /> passed is visible, expanding parent objects and scrolling the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> as necessary.</summary>
      <param name="selectableObject">The object to make visible.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selectableObject" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.FitToScreenSize">
      <summary>Changes the zoom level of the workflow design surface so that the entire workflow is displayed in the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.FitToWorkflowSize">
      <summary>Changes the zoom level to one hundred percent to display the full size of the workflow in the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.GetService(System.Type)">
      <summary>Gets the service object of the specified type, if it is available.</summary>
      <returns>If the <paramref name="serviceType" /> is typeof(<see cref="T:System.ComponentModel.Design.CommandID" />) then GetService returns a specific <see cref="T:System.ComponentModel.Design.CommandID" />; otherwise, GetService returns a <see cref="T:System.Object" /> implementing the requested service, or a null reference (Nothing in Visual Basic) if the service cannot be resolved.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of the service to retrieve.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.HScrollBar">
      <summary>Gets the horizontal scrollbar for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A <see cref="T:System.Windows.Forms.ScrollBar" /> you can use to adjust the settings and visibility of the horizontal scrollbar.</returns>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.WorkflowView.Idle">
      <summary>Occurs when the WorkflowView finishes processing and is about to enter the idle state.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.InvalidateClientRectangle(System.Drawing.Rectangle)">
      <summary>Invalidates the specified <see cref="T:System.Drawing.Rectangle" /> and causes it to be repainted.</summary>
      <param name="clientRectangle">The <see cref="T:System.Drawing.Rectangle" />, in client coordinates, to invalidate and cause to be repainted.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.InvalidateLogicalRectangle(System.Drawing.Rectangle)">
      <summary>Invalidates the specified <see cref="T:System.Drawing.Rectangle" /> and causes it to be repainted.</summary>
      <param name="logicalRectangle">The <see cref="T:System.Drawing.Rectangle" />, in logical coordinates, to invalidate and cause to be repainted.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.LoadViewState(System.IO.Stream)">
      <summary>Restores view-state information from a binary stream.</summary>
      <param name="viewState">A <see cref="T:System.IO.BinaryReader" /> used to restore the view state.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.LogicalPointToClient(System.Drawing.Point)">
      <summary>Converts a <see cref="T:System.Drawing.Point" /> from logical to client coordinates.</summary>
      <returns>The <see cref="T:System.Drawing.Point" /> converted from logical to client coordinates.</returns>
      <param name="logicalPoint">The <see cref="T:System.Drawing.Point" /> to convert to client coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.LogicalPointToScreen(System.Drawing.Point)">
      <summary>Converts a <see cref="T:System.Drawing.Point" /> from logical to screen coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> converted from logical to screen coordinates.</returns>
      <param name="logicalPoint">The <see cref="T:System.Drawing.Point" /> to convert to screen coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.LogicalRectangleToClient(System.Drawing.Rectangle)">
      <summary>Converts a <see cref="T:System.Drawing.Rectangle" /> from logical to client coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> converted from logical to client coordinates.</returns>
      <param name="rectangle">The <see cref="T:System.Drawing.Rectangle" /> to convert to client coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.LogicalSizeToClient(System.Drawing.Size)">
      <summary>Converts a <see cref="T:System.Drawing.Size" /> from logical to client coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> converted from logical to client coordinates.</returns>
      <param name="logicalSize">The <see cref="T:System.Drawing.Size" /> to convert to client coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
      <summary>Occurs when a control is added to the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.InvalidOperationException">If the control added is not a <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.HScrollBar" /> or <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.VScrollBar" /></exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>Occurs when a dragged item is dropped onto the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="dragEventArgs">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>Occurs when an item is dragged into the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> bounds.</summary>
      <param name="dragEventArgs">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnDragLeave(System.EventArgs)">
      <summary>Occurs when the cursor leaves the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> during a drag operation.</summary>
      <param name="e">A <see cref="T:System.EventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>Occurs when a drag-drop operation is in progress and the pointer is within the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> bounds.</summary>
      <param name="dragEventArgs">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>Occurs during a drag operation.</summary>
      <param name="gfbevent">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is pressed while the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> has focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is released while the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> has focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that provides data about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnLayout(System.Windows.Forms.LayoutEventArgs)">
      <summary>Occurs when the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> should reposition child controls.</summary>
      <param name="levent">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseCaptureChanged(System.EventArgs)">
      <summary>Occurs when the items selected by dragging the mouse changes.</summary>
      <param name="e">A <see cref="T:System.EventArgs" /> that provides data about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> is double-clicked.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse pointer is over the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> and a mouse button is pressed.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseEnter(System.EventArgs)">
      <summary>Occurs when the mouse pointer enters the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseHover(System.EventArgs)">
      <summary>Occurs when the mouse hovers over the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="e">A <see cref="T:System.EventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseLeave(System.EventArgs)">
      <summary>Occurs when the mouse pointer leaves the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="e">A <see cref="T:System.EventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse moves over the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when a mouse button is released over the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse wheel moves when the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> has focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>Occurs when the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> is redrawn.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
      <summary>Occurs during a drag operation and allows the drag source to determine whether the drag option should be canceled.</summary>
      <param name="qcdevent">A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnRootDesignerChanged">
      <summary>Called when a different designer is set as the new root designer of the design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnZoomChanged">
      <summary>Called when the zoom level is changed.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.PerformLayout(System.Boolean)">
      <summary>Forces the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> to apply layout logic to all its child controls.</summary>
      <param name="immediateUpdate">true to cause the layout to update immediately; otherwise, false.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.PrintDocument">
      <summary>Gets the <see cref="T:System.Drawing.Printing.PrintDocument" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.PrintDocument" /> object that sends output to a printer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.PrintPreviewMode">
      <summary>Gets or sets the print preview mode of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>true if print preview mode is active; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.RemoveDesignerMessageFilter(System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter)">
      <summary>Removes an associated <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</summary>
      <param name="designerMessageFilter">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> to remove from the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.RootDesigner">
      <summary>Gets or sets the root designer for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</returns>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.WorkflowView.RootDesignerChanged">
      <summary>Raised when the root designer is changed.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.SaveViewState(System.IO.Stream)">
      <summary>Saves the view-state to a binary stream. </summary>
      <param name="viewState">A <see cref="T:System.IO.BinaryReader" /> used to store the view state.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.SaveWorkflowImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>Saves an image of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> to the specified stream using the specified image format. </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to save the workflow view image to.</param>
      <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat" /> to use to save the workflow view image.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="imageFormat" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.SaveWorkflowImage(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>Saves an image of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> to the specified file using the specified image format. </summary>
      <param name="imageFile">The path to the file in which to store the workflow view image.</param>
      <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat" /> to use to save the workflow view image.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="imageFile" /> or <paramref name="imageFormat" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.SaveWorkflowImageToClipboard">
      <summary>Saves an image of the WorkflowView to the clipboard.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ScreenPointToLogical(System.Drawing.Point)">
      <summary>Converts a <see cref="T:System.Drawing.Point" /> from screen coordinates to logical coordinates.</summary>
      <returns>The <see cref="T:System.Drawing.Point" /> converted from screen coordinates to logical coordinates.</returns>
      <param name="screenPoint">The <see cref="T:System.Drawing.Point" /> to convert from screen coordinates to logical coordinates.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.ScrollPosition">
      <summary>Gets or sets the position of the scrollbar on the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A point describing the location of the scrollbar in screen coordinates.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.ShadowDepth">
      <summary>Gets or sets the <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.ShadowDepth" /> for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>The shadow depth in pixels.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ShowInfoTip(System.String)">
      <summary>Shows the InfoTip for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> with the specified text.</summary>
      <param name="text">The text to display on the InfoTip.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="infoTipText" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ShowInfoTip(System.String,System.String)">
      <summary>Shows the InfoTip for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> with the specified title and text.</summary>
      <param name="title">The title of the InfoTip to display.</param>
      <param name="text">The text of the InfoTip to display.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="title" /> is a null reference (Nothing in Visual Basic).-or-<paramref name="infoTipText" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ShowInPlaceToolTip(System.String,System.Drawing.Rectangle)">
      <summary>Shows a ToolTip at the specified location.</summary>
      <param name="toolTipText">The text to display.</param>
      <param name="toolTipRectangle">The <see cref="T:System.Drawing.Rectangle" /> specifying the location on the screen to place the ToolTip.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.System#IServiceProvider#GetService(System.Type)">
      <summary>Gets the service of the specified type, if it is available.</summary>
      <returns>An <see cref="T:System.Object" /> implementing the requested service, or a null reference (Nothing in Visual Basic) if the service cannot be resolved.</returns>
      <param name="serviceType">The <paramref name="Type" /> of the service to retrieve.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.System#Windows#Forms#IMessageFilter#PreFilterMessage(System.Windows.Forms.Message@)">
      <summary>Filters out a message before it is dispatched.</summary>
      <returns>true to filter the message and stop it from being dispatched; false to allow the message to continue to the next filter or control.</returns>
      <param name="m">The message to be dispatched. You cannot modify this message.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.ViewPortRectangle">
      <summary>Gets the current <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.ViewPortRectangle" /> for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that describes the area on the screen that is visible.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.ViewPortSize">
      <summary>Gets the size of the visible area for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A Size that describes the visible area of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.VScrollBar">
      <summary>Gets the vertical scrollbar associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A <see cref="T:System.Windows.Forms.ScrollBar" /> you can use to adjust the settings and visibility of the horizontal scrollbar.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.WndProc(System.Windows.Forms.Message@)">
      <summary>Processes Windows messages.</summary>
      <param name="m">The Windows Message to process.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.Zoom">
      <summary>Gets or sets the zoom level of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>The zoom level of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</returns>
      <exception cref="T:System.NotSupportedException">If the zoom level is less than the minimum zoom level of the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" />-or-if the zoom level exceeds the maximum zoom level of the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" />.</exception>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.WorkflowView.ZoomChanged">
      <summary>Occurs when the zoom setting for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> changes.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject">
      <summary>Implements an accessibility object that <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> classes use to adjust the designer user interface for users with disabilities.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.#ctor(System.Workflow.ComponentModel.Design.WorkflowView)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" /> class by using the specified <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="workflowView">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> to associate with the accessible object.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.Bounds">
      <summary>Gets the location and size of the accessible object.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.DefaultAction">
      <summary>Gets a string that describes the default action of the accessible object. Not all objects have a default action.</summary>
      <returns>A string that contains a description of the default action for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" />, or a null reference (Nothing in Visual Basic) if the accessible object has no default action.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.Description">
      <summary>Gets a string that describes the visual appearance of the specified accessible object. Not all accessible objects have a description.</summary>
      <returns>A description of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" /> visual appearance to the user, or a null reference (Nothing in Visual Basic) if the object does not have a description.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.GetChild(System.Int32)">
      <summary>Returns the accessible child object associated with the specified index.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the accessible child object corresponding to the specified index.</returns>
      <param name="index">The zero-based index of the accessible child object to retrieve.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.GetChildCount">
      <summary>Retrieves the number of children that belong to the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" />.</summary>
      <returns>An integer that represents the number of child objects that belong to the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.Help">
      <summary>Gets a description of what the accessible object does or how the accessible object is used.</summary>
      <returns>A string that contains the description of what the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" /> does or how it is used or a null reference (Nothing in Visual Basic) if no help is defined.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.Name">
      <summary>Gets or sets the accessible object name.</summary>
      <returns>A string that contains the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" /> name, or a null reference (Nothing in Visual Basic) if the property has not been set.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
      <summary>Navigates to another accessible object.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents one of the <see cref="T:System.Windows.Forms.AccessibleNavigation" /> values.</returns>
      <param name="navdir">One of the <see cref="T:System.Windows.Forms.AccessibleNavigation" /> values.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.Role">
      <summary>Gets the role of the accessible object.</summary>
      <returns>One of the <see cref="T:System.Windows.Forms.AccessibleRole" /> values. <see cref="F:System.Windows.Forms.AccessibleRole.None" /> is returned if no role has been specified</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager">
      <summary>Manages serialization of activities into designer-generated source code segments before compilation.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.#ctor(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager" /> class. </summary>
      <param name="manager">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> to associate with this instance.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Adds the specified serialization provider to the serialization manager.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" /> to be added.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.Context">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> associated with <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager" />. </summary>
      <returns>The <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> associated with the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>Creates an instance of the specified type and adds it to a collection of named instances.</summary>
      <returns>The newly created object instance.</returns>
      <param name="type">The data <see cref="T:System.Type" /> to create.</param>
      <param name="arguments">An <see cref="T:System.Collections.ICollection" /> of arguments to pass to the constructor for the specified type. </param>
      <param name="name">The name assigned to the resulting object. This name can be used to access the object later through <see cref="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetInstance(System.String)" />.If null is passed, the object is created but cannot be accessed by name.</param>
      <param name="addToContainer">true to add the object to the design container; otherwise, false. The object must implement <see cref="T:System.ComponentModel.IComponent" /> for this to have any effect.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetInstance(System.String)">
      <summary>Gets an <see cref="T:System.Object" /> of the specified name, or null if that <see cref="T:System.Object" /> does not exist.</summary>
      <returns>An <see cref="T:System.Object" /> of the specified name, or null if that <see cref="T:System.Object" /> does not exist.</returns>
      <param name="name">The name of the <see cref="T:System.Object" /> to obtain.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetName(System.Object)">
      <summary>Gets the name of the specified <see cref="T:System.Object" />, or null if the <see cref="T:System.Object" /> has no name.</summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the <see cref="T:System.Object" />.</returns>
      <param name="value">The <see cref="T:System.Object" /> to obtain the name for.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>Gets a serializer of the requested type for the specified <see cref="T:System.Object" /> type.</summary>
      <returns>A serializer of the requested type for the specified <see cref="T:System.Object" /> type.</returns>
      <param name="objectType">The <see cref="T:System.Type" /> of the <see cref="T:System.Object" /> for which to obtain the serializer.</param>
      <param name="serializerType">The <see cref="T:System.Type" /> of serializer to retrieve.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetService(System.Type)">
      <summary>Gets an <see cref="T:System.Object" /> that provides a service of the specified <see cref="T:System.Type" />. </summary>
      <returns>A <see cref="T:System.Object" /> that provides a service of the specified <see cref="T:System.Type" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of service to be provided. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetType(System.String)">
      <summary>Gets a <see cref="T:System.Type" /> of the specified name.</summary>
      <returns>An instance of the <see cref="T:System.Type" />, or a null reference (Nothing in Visual Basic) if the <see cref="T:System.Type" /> cannot be loaded.</returns>
      <param name="typeName">The fully qualified name of the <see cref="T:System.Type" /> to load.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.Properties">
      <summary>Gets a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains a read-only collection of type <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains a read-only collection of type <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Removes a custom serialization provider from the serialization manager.</summary>
      <param name="provider">The provider to remove. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.ReportError(System.Object)">
      <summary>Reports an error in serialization.</summary>
      <param name="errorInformation">An <see cref="T:System.Object" /> that contains the error to report. </param>
    </member>
    <member name="E:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.ResolveName">
      <summary>Occurs when <see cref="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetName(System.Object)" /> cannot locate the specified name in the serialization manager name table.</summary>
    </member>
    <member name="E:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.SerializationComplete">
      <summary>Occurs when serialization is complete.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.SerializationManager">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> associated with the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager" />.</summary>
      <returns>The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> associated with the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.SetName(System.Object,System.String)">
      <summary>Sets the name of the specified existing <see cref="T:System.Object" />.</summary>
      <param name="instance">The <see cref="T:System.Object" /> instance to name.</param>
      <param name="name">A <see cref="T:System.String" /> that contains the name to give the instance.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer">
      <summary>Represents a class that provides the CodeDOM serialization services to an activity at design time.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer" /> class. </summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer.MarkupFileNameProperty">
      <summary>The name of the markup file to write to.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Serializes the specified object into a CodeDOM object.</summary>
      <returns>A CodeDOM object representing the object that has been serialized.</returns>
      <param name="manager">The serialization manager to use during the serialization process.</param>
      <param name="obj">An <see cref="T:System.Object" /> that derives from <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> or <paramref name="obj" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> cannot be converted to an <see cref="T:System.Workflow.ComponentModel.Activity" />.</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer">
      <summary>Provides extensible Application Markup Language (XAML) serialization services for an <see cref="T:System.Workflow.ComponentModel.Activity" /> at design time.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.CreateInstance(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Type)">
      <summary>Creates an instance of the specified <see cref="T:System.Type" /> using the specified <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</summary>
      <returns>A reference to the newly created <see cref="T:System.Object" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> to use in this instance creation.</param>
      <param name="type">The <see cref="T:System.Type" /> to create.</param>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.EndColumnProperty">
      <summary>The index of the last character in the activity definition.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.EndLineProperty">
      <summary>The index of the last line in the activity definition.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.OnAfterSerialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer" /> that an object has just been serialized.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> that was serialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.OnBeforeSerialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer" /> that an object is about to be serialized. </summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to be serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" />, <paramref name="obj" />, or <paramref name="writer" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not of type <see cref="T:System.Workflow.ComponentModel.Activity" />.</exception>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.StartColumnProperty">
      <summary>The index of the first character in the activity definition.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.StartLineProperty">
      <summary>The index of the first line in the activity definition.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector">
      <summary>Selects the surrogate that can be used to serialize an <see cref="T:System.Workflow.ComponentModel.Activity" />. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector" /> class. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector.Default">
      <summary>Gets the default <see cref="T:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector" />. This property is read-only.</summary>
      <returns>The default <see cref="T:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector" /> that can be used to serialize an <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
      <summary>Finds the surrogate that represents the specified type, starting with the specified surrogate selector for the specified serialization context.</summary>
      <returns>The appropriate surrogate for the specified type and context.</returns>
      <param name="type">The <see cref="T:System.Type" /> for which to obtain a surrogate.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that serves as the source or destination context for the current serialization.</param>
      <param name="selector">When this method returns, contains an <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> that holds a reference to the surrogate selector where the appropriate surrogate was found. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer">
      <summary>Serializes an <see cref="T:System.Workflow.ComponentModel.Activity" /> to a new type.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
      <summary>Deserializes the specified type declaration.</summary>
      <returns>The deserialized <see cref="T:System.Object" />.</returns>
      <param name="manager">The serialization manager to use for deserialization.</param>
      <param name="declaration">The <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to use for deserialization.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
      <summary>Returns the method where the statements used to serialize a member are stored.</summary>
      <returns>The <see cref="T:System.CodeDom.CodeMemberMethod" /> used to emit all of the initialization code for the given member.</returns>
      <param name="manager">The serialization manager to use for serialization.</param>
      <param name="typeDecl">The <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to use for serialization.</param>
      <param name="value">The <see cref="T:System.Object" /> to use for serialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="typeDecl" />, or <paramref name="value" /> contains a null reference (Nothing in Visual Basic). </exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
      <summary>Returns an array of methods to be interpreted during deserialization.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeMemberMethod" /> array of methods to be interpreted during serialization.</returns>
      <param name="manager">The serialization manager to use for serialization.</param>
      <param name="typeDecl">The <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to use for serialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> or <paramref name="typeDecl" /> contains a null reference (Nothing in Visual Basic). </exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
      <summary>Serializes the specified object by creating a new type declaration that defines that object.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that defines the specified object.</returns>
      <param name="manager">The serialization manager to use for serialization.</param>
      <param name="root">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="members">An optional collection of members. Can be a null reference (Nothing in Visual Basic) or an empty collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> or <paramref name="root" /> contains a null reference (Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="root" /> cannot be converted to an <see cref="T:System.Workflow.ComponentModel.Activity" />.</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.CompositeActivityMarkupSerializer">
      <summary>Provides extensible Application Markup Language (XAML) serialization services for a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.CompositeActivityMarkupSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.CompositeActivityMarkupSerializer" /> class. </summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ConstructorArgumentAttribute">
      <summary>Carries argument name information for the decorated class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ConstructorArgumentAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ConstructorArgumentAttribute" /> class, initializing the <see cref="P:System.Workflow.ComponentModel.Serialization.ConstructorArgumentAttribute.ArgumentName" /> property.</summary>
      <param name="argumentName">A string that contains the argument name.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.ConstructorArgumentAttribute.ArgumentName">
      <summary>Gets the string representing the argument name.</summary>
      <returns>The string representing the argument name.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute">
      <summary>Contains the name for the content property of the decorated class. Marking a type with this attribute causes the data in that type to be serialized without the enclosing property name tags. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute" /> class, initializing the <see cref="P:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute.Name" /> property.</summary>
      <param name="name">A <see cref="T:System.String" /> that contains the value for the <see cref="P:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute.Name" /> property.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute.Name">
      <summary>Gets the <see cref="T:System.String" /> representing the name of the content property.</summary>
      <returns>The <see cref="T:System.String" /> representing the name of the content property.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer">
      <summary>Provides <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> objects with CodeDOM serialization services. This is the base class from which other CodeDOM serializers, such as the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer" />, are inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Serializes the specified object into a CodeDOM object.</summary>
      <returns>A CodeDOM object that represents the object that has been serialized.</returns>
      <param name="manager">The serialization manager to use during serialization.</param>
      <param name="obj">The <see cref="T:System.Object" /> to serialize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> or <paramref name="obj" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj " />cannot be converted to a <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.MarkupExtension">
      <summary>Represents the abstract class for all Markup extensions for types. This class must be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.MarkupExtension.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.MarkupExtension" /> class. This class must be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.MarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary>When overridden in a derived class, provides the value for the underlying type, by optional use of an <see cref="T:System.IServiceProvider" />.</summary>
      <returns>The <see cref="T:System.Object" /> representing the encapsulated type.</returns>
      <param name="provider">The specified <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.RuntimeNamePropertyAttribute">
      <summary>Carries the run-time name for an <see cref="T:System.Object" /> decorated with this <see cref="T:System.Attribute" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.RuntimeNamePropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.RuntimeNamePropertyAttribute" /> class, initializing the <see cref="P:System.Workflow.ComponentModel.Serialization.RuntimeNamePropertyAttribute.Name" /> for this instance.</summary>
      <param name="name">A string that contains the name to associate with this instance.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.RuntimeNamePropertyAttribute.Name">
      <summary>Gets the run-time name carried by this instance.</summary>
      <returns>A string that contains the run-time name carried by this instance.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException">
      <summary>The exception that is thrown by methods that perform serialization and deserialization. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> class by using serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the serialized object data about the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> being thrown.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the context information about the source or destination of the bits the serializer was using.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> class by using the specified error message.</summary>
      <param name="message">A string that contains message that describes the error.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> class by using an error message and an exception.</summary>
      <param name="message">A string that contains message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" />. If <paramref name="innerException" /> is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> class by using an error message, an exception, and the line and column numbers that caused the exception to be thrown.</summary>
      <param name="message">A string that contains message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" />. If <paramref name="innerException" /> is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <param name="lineNumber">The line number in the object or XOML file that caused the exception to be thrown.</param>
      <param name="columnNumber">The column position in the object or XOML file that caused the exception to be thrown.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> class by using an error message and the line and column numbers that caused the exception to be thrown.</summary>
      <param name="message">A string that contains message that describes the error.</param>
      <param name="lineNumber">The line number in the object or XOML file that caused the exception to be thrown.</param>
      <param name="columnNumber">The column position in the object or XOML file that caused the exception to be thrown.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" />.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the serialized object data about the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> being thrown.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the context information about the source or destination of the bits the serializer was using.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.LineNumber">
      <summary>Gets the line number in the object or XOML file that caused the exception to be thrown.</summary>
      <returns>An integer that represents the line number on which the exception was thrown.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.LinePosition">
      <summary>Gets the column position in the object or XOML file that caused the exception to be thrown.</summary>
      <returns>An integer that represents the column position that caused the exception to be thrown.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager">
      <summary>Manages design-time serialization to and from extensible Application Markup Language (XAML) for workflows.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.#ctor(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> class by using the specified <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />. </summary>
      <param name="manager">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> with which to initialize the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Adds the specified serialization provider to the serialization manager.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" /> to add.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.Context">
      <summary>Gets a stack-based, user-defined storage area that is useful for communication between serializers.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> that contains information about the current object being serialized.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>Returns a serializer of the specified type for an object of the specified type.</summary>
      <returns>The requested serializer, or a null reference (Nothing in Visual Basic) if no appropriate serializer can be located.</returns>
      <param name="objectType">The <see cref="T:System.Type" /> for which to retrieve the serializer.</param>
      <param name="serializerType">The <see cref="T:System.Type" /> of the serializer to retrieve.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.GetService(System.Type)">
      <summary>Returns a service object of the specified type.</summary>
      <returns>A service object of type <paramref name="serviceType" />, or a null reference (Nothing in Visual Basic) if there is no service object of type <paramref name="serviceType" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of service object to return.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.GetType(System.String)">
      <summary>Returns a type of the specified name.</summary>
      <returns>The <see cref="T:System.Type" /> associated with <paramref name="typeName" />. </returns>
      <param name="typeName">The fully-qualified name of the <see cref="T:System.Type" /> to load.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.GetType(System.Xml.XmlQualifiedName)">
      <summary>Returns that type associated with the specified XML qualified name.</summary>
      <returns>The <see cref="T:System.Type" /> associated with <paramref name="xmlQualifiedName" />.</returns>
      <param name="xmlQualifiedName">The <see cref="T:System.Xml.XmlQualifiedName" /> of the type to load.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlQualifiedName" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.GetXmlQualifiedName(System.Type,System.String@)">
      <summary>Returns the XML-qualified name associated with the specified type.</summary>
      <returns>The <see cref="T:System.Xml.XmlQualifiedName" /> associated with <paramref name="type" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> for which to return the XML-qualified name.</param>
      <param name="prefix">When this method returns, contains the XML prefix for the qualified name or an empty string if no prefix is defined. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.LocalAssembly">
      <summary>Gets or sets the assembly that is associated with the current serializer. </summary>
      <returns>The <see cref="T:System.Reflection.Assembly" /> that is associated with the current serializer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Removes a custom serialization provider from the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" /> to remove. This provider must be added using <see cref="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.ReportError(System.Object)">
      <summary>Reports an error in serialization.</summary>
      <param name="errorInformation">The error to report. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.SerializationManager">
      <summary>Gets or sets the serialization manager to use with the current serializer.</summary>
      <returns>The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> to use with the current serializer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>Creates an instance of the specified type and adds it to a collection of named instances. </summary>
      <returns>The newly created object.</returns>
      <param name="type">The <see cref="T:System.Type" /> to create.</param>
      <param name="arguments">An <see cref="T:System.Collections.ICollection" /> that contains the arguments for <paramref name="type" />.</param>
      <param name="name">The name of the object. This name can be used to access the object later using <see cref="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />. If a null reference (Nothing in Visual Basic) is passed, the object is still created but cannot be accessed by name.</param>
      <param name="addToContainer">true to add the object to the design container; otherwise, false. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)">
      <summary>Returns an instance of a created object of the specified name.</summary>
      <returns>An instance of the object with the given name, or a null reference (Nothing in Visual Basic) if no object by that name can be found.</returns>
      <param name="name">The name of the object to retrieve.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)">
      <summary>Returns the name of the specified object.</summary>
      <returns>The name of the object, or a null reference (Nothing in Visual Basic) if the object is unnamed.</returns>
      <param name="value">The <see cref="T:System.Object" /> for which to retrieve the name.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties">
      <summary>Gets a collection of properties that can be serialized with available serializers.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the properties to serialize.</returns>
    </member>
    <member name="E:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ResolveName">
      <summary>Occurs when <see cref="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> cannot locate the specified name in the serialization manager's name table. </summary>
    </member>
    <member name="E:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SerializationComplete">
      <summary>Occurs when serialization is complete.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)">
      <summary>Sets the name of the specified existing object.</summary>
      <param name="instance">The object to name.</param>
      <param name="name">The name to assign to the object.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer">
      <summary>Provides the extensible Application Markup Language (XAML) serialization services to workflows at design time.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.AddChild(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object,System.Object)">
      <summary>Adds a child object to the specified object.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> to use in this operation.</param>
      <param name="parentObject">The <see cref="T:System.Object" /> to which to add the child object.</param>
      <param name="childObj">The <see cref="T:System.Object" /> to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentObject" /> or<paramref name=" childObj" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.CanSerializeToString(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Returns a Boolean that indicates whether the specified object can be serialized to a string.</summary>
      <returns>true if the specified object can be serialized to a string; otherwise, false.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> used to serialize this object.</param>
      <param name="value">The specified <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.ClearChildren(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Removes all child objects from the specified object.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> supporting this operation.</param>
      <param name="obj">The <see cref="T:System.Object" /> from which to remove all child objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.ClrNamespacesProperty">
      <summary>Represents an attached <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that is used to define which assemblies to reference for custom activities.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.CreateInstance(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Type)">
      <summary>Creates an instance of the specified <see cref="T:System.Type" /> using the specified <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</summary>
      <returns>An instance of the specified <see cref="T:System.Type" />. </returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> supporting this operation.</param>
      <param name="type">The specified <see cref="T:System.Type" /></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Xml.XmlReader)">
      <summary>Deserializes workflow markup into an <see cref="T:System.Object" /> using the specified serialization manager.</summary>
      <returns>An <see cref="T:System.Object" /> that contains the definition of the workflow defined in the workflow markup file or stream.</returns>
      <param name="serializationManager">An object that implements the <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> interface, such as <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" />.</param>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> that contains the workflow definition.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.Deserialize(System.Xml.XmlReader)">
      <summary>Deserializes workflow markup into an <see cref="T:System.Object" />.</summary>
      <returns>An <see cref="T:System.Object" /> that contains the definition of the workflow defined in the workflow markup file or stream.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> that contains the workflow definition.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.DeserializeFromString(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Type,System.String)">
      <summary>Deserializes extensible Application Markup Language (XAML) content from the specified string according to the given type of the property to deserialize.</summary>
      <returns>The deserialized <see cref="T:System.Object" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the deserialization process.</param>
      <param name="propertyType">The <see cref="T:System.Type" /> associated with the property to deserialize. </param>
      <param name="value">A string that contains the XAML to deserialize. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" />, <paramref name="propertyType" />, or <paramref name="value" />, contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.EventsProperty">
      <summary>Represents an attached <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that defines the names for event handler properties.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.GetChildren(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves a list of child objects for the specified object</summary>
      <returns>An <see cref="T:System.Collections.IList" /> that contains the child objects of <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> which supports this operation.</param>
      <param name="obj">The <see cref="T:System.Object" /> from which to retrieve child objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> or <paramref name="serializationManager" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.GetEvents(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves information about all events associated with the specified <see cref="T:System.Object" />.</summary>
      <returns>An <see cref="T:System.Reflection.EventInfo" /> array that contains information about the events associated with <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the deserialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for event objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> or <paramref name="obj" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.GetProperties(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves information about all properties associated with the specified object.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> array that contains information about the properties associated with <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for properties. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> or <paramref name="obj" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.OnAfterDeserialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Overridden. Notifies the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer" /> that an object has just been deserialized.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> that was deserialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.OnAfterSerialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer" /> that an object has just been serialized.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> that was serialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.OnBeforeDeserialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Overridden. Notifies the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer" /> that an object is about to be deserialized.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that managed the deserialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> that was deserialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.OnBeforeSerialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer" /> that <see cref="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.Serialize(System.Xml.XmlWriter,System.Object)" /> is about to run.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to be serialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Xml.XmlWriter,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> into a workflow markup file or stream using the specified serialization manager.</summary>
      <param name="serializationManager">An object that implements the <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> interface, such as <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" />.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> that contains the stream or file used in serializing.</param>
      <param name="obj">The object to be serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is a null reference (Nothing).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> into a workflow markup file or stream.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> that contains the stream or file used in serializing.</param>
      <param name="obj">The object to be serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.SerializeToString(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> to a string.</summary>
      <returns>A string that contains the serialized <see cref="T:System.Object" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize to a string.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> or <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.ShouldSerializeValue(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer" /> should serialize the specified <see cref="T:System.Object" />.</summary>
      <returns>true to indicate <paramref name="value" /> should be serialized; otherwise, false.  </returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="value">The <see cref="T:System.Object" /> to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.XClassProperty">
      <summary>Represents an attached <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that defines the type name, which will be created during compilation. </summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.XCodeProperty">
      <summary>Represents a code example, embedded into XAML x:Code element.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute">
      <summary>Can be optionally applied to a workflow assembly. It defines a mapping between a common language runtime namespace that is defined in the current assembly and an XML namespace. This information is used in extensible Application Markup Language (XAML) serialization/deserialization when activities or workflows that are defined in the assembly decorated with this attribute are used. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute" /> class, initializing <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.XmlNamespace" /> and <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.ClrNamespace" /> properties.</summary>
      <param name="xmlNamespace">A <see cref="T:System.String" /> that contains the value for <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.XmlNamespace" />.</param>
      <param name="clrNamespace">A <see cref="T:System.String" /> that contains the value for <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.ClrNamespace" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clrNamespace" /> is a null reference (Nothing).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.AssemblyName">
      <summary>Gets or sets a <see cref="T:System.String" /> that represents the <see cref="P:System.Type.Assembly" /> name of the decorated class.</summary>
      <returns>A <see cref="T:System.String" /> that represents the <see cref="P:System.Type.Assembly" /> name of the decorated class.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.ClrNamespace">
      <summary>Gets a <see cref="T:System.String" /> that represents the name of the CLR namespace of the decorated class.</summary>
      <returns>A <see cref="T:System.String" /> that represents the name of the CLR namespace of the decorated class.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.XmlNamespace">
      <summary>Gets a <see cref="T:System.String" /> that represents the name of the XML namespace of the decorated class.</summary>
      <returns>A <see cref="T:System.String" /> that represents the name of the XML namespace of the decorated class.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute">
      <summary>Contains XML namespace and prefix information for the decorated class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute" /> class, initializing <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.XmlNamespace" /> and <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.Prefix" />.</summary>
      <param name="xmlNamespace">A <see cref="T:System.String" /> that contains the value for <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.XmlNamespace" />.</param>
      <param name="prefix">A <see cref="T:System.String" /> that contains the value for <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.Prefix" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> is a null reference (Visual Basic Nothing).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.Prefix">
      <summary>Gets the <see cref="T:System.String" /> that contains the value of the prefix for the decorated class.</summary>
      <returns>The <see cref="T:System.String" /> that contains the value of the prefix for the decorated class.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.XmlNamespace">
      <summary>Gets the <see cref="T:System.String" /> that contains the value of the XML namespace for the decorated class.</summary>
      <returns>The <see cref="T:System.String" /> that contains the value of the XML namespace for the decorated class.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.WorkflowModel.Activities.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.WorkflowModel.Activities</name>
  </assembly>
  <members>
    <member name="T:System.WorkflowModel.Activities.ActivityActionTrigger">
      <summary>Raises <see cref="T:System.WorkflowModel.ActivityAction" /> events.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.ActivityActionTrigger.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.ActivityActionTrigger" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.ActivityActionTrigger.Handler">
      <summary>The <see cref="T:System.WorkflowModel.WorkflowElement" /> to execute when the <see cref="T:System.WorkflowModel.ActivityAction" /> occurs.</summary>
      <returns>The <see cref="T:System.WorkflowModel.WorkflowElement" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.ActivityActionTriggered">
      <summary>An event raised when an <see cref="T:System.WorkflowModel.ActivityAction" /> occurs.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.ActivityActionTriggered.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.ActivityActionTriggered" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.ActivityActionTriggered.ActivityAction">
      <summary>The <see cref="T:System.WorkflowModel.ActivityAction" /> that raises this event.</summary>
      <returns>The <see cref="T:System.WorkflowModel.ActivityAction" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.ActivityActionTriggered.Equals(System.Object)">
      <summary>Gets a value that indicates whether the compared object has the same <see cref="P:System.WorkflowModel.Activities.ActivityFlowEvent.Activity" /> and <see cref="P:System.WorkflowModel.Activities.ActivityActionTriggered.ActivityAction" /> properties.</summary>
      <returns>true if the properties are equal.</returns>
      <param name="obj"></param>
    </member>
    <member name="M:System.WorkflowModel.Activities.ActivityActionTriggered.GetHashCode">
      <summary>If <see cref="P:System.WorkflowModel.Activities.ActivityActionTriggered.ActivityAction" /> has been set, returns the hash code for this object, otherwise returns 1.</summary>
      <returns>The hash code for the object.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.ActivityActionTriggered.ToString">
      <summary>Returns an information string that includes the values of the <see cref="P:System.WorkflowModel.Activities.ActivityFlowEvent.Activity" /> and <see cref="P:System.WorkflowModel.Activities.ActivityActionTriggered.ActivityAction" /> properties.</summary>
      <returns>The information string.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.ActivityCompleted">
      <summary>An event raised when an activity gracefully completes execution.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.ActivityCompleted.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.ActivityCompleted" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.ActivityCompleted.Equals(System.Object)">
      <summary>Returns true if the compared object has the same <see cref="P:System.WorkflowModel.ActivityFlowEvent.Activity" /> property.</summary>
      <returns>true if the property is equal.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.ActivityCompleted.GetHashCode">
      <summary>Returns the hash code for the object if the <see cref="P:System.WorkflowModel.ActivityFlowEvent.Activity" /> property has been set, otherwise returns 1. </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.ActivityCompleted.ToString">
      <summary>Returns an information string that includes the name of the <see cref="P:System.WorkflowModel.ActivityFlowEvent.Activity" /> property.</summary>
      <returns>The information string.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.ActivityFaulted">
      <summary>An event raised when an activity faults.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.ActivityFaulted.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.ActivityFaulted" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.ActivityFaulted.Equals(System.Object)">
      <summary>Returns true if the compared object has the same <see cref="P:System.WorkflowModel.ActivityFlowEvent.Activity" /> property.</summary>
      <returns>true if the property is equal.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.ActivityFaulted.Exception">
      <summary>The exception that caused the activity to fault.</summary>
      <returns>The exception.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.ActivityFaulted.GetHashCode">
      <summary>Returns the hash code for the object if the <see cref="P:System.WorkflowModel.ActivityFlowEvent.Activity" /> property has been set, otherwise returns 1.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.ActivityFaulted.ToString">
      <summary>Returns an information string that includes the name of the <see cref="P:System.WorkflowModel.ActivityFlowEvent.Activity" /> property.</summary>
      <returns>The information string.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.ActivityFlowEvent">
      <summary>The abstract base class for activity events.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.ActivityFlowEvent.Activity">
      <summary>When implemented in a derived class, the activity that generated thi event.</summary>
      <returns>The activity.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Assign">
      <summary>Sets <see cref="T:System.WorkflowModel.Argument" /> values from within a workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Assign.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.Assign" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Assign.To">
      <summary>Specifies the <see cref="T:System.WorkflowModel.Argument" /> that the activity assigns its <see cref="P:System.WorkflowModel.Activities.Assign.Value" /> to.</summary>
      <returns>The specified <see cref="T:System.WorkflowModel.Argument" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Assign.Value">
      <summary>Specifies the value that is assigned.</summary>
      <returns>The value to be assigned.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Assign`1">
      <summary>The <see cref="T:System.WorkflowModel.Activities.Assign" /> activity is used to set <see cref="T:System.WorkflowModel.Argument" /> values from within a workflow.</summary>
      <typeparam name="T">The type of the assigned value.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.Assign`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.Assign`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Assign`1.To">
      <summary>Specifies the <see cref="T:System.WorkflowModel.Argument" /> that the activity assigns its <see cref="P:System.WorkflowModel.Activities.Assign.Value" /> to.</summary>
      <returns>The specified <see cref="T:System.WorkflowModel.Argument" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Assign`1.Value">
      <summary>Specifies the value that is assigned.</summary>
      <returns>The value to be assigned.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Break">
      <summary>The <see cref="T:System.WorkflowModel.Activities.Break" /> activity terminates execution of the innermost enclosing looping structure. Execution of the looping structure is maintained internally using a <see cref="T:System.WorkflowModel.Bookmark" />. </summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Break.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.Break" /> class.</summary>
    </member>
    <member name="T:System.WorkflowModel.Activities.CancellationScope">
      <summary>A container that defines the collection of activities affected by cancellation. Cancellation is a user-defined procedure that can be invoked (either from the activities contained by the handler, or externally) to gracefully terminate an activity’s work.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.CancellationScope.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.CancellationScope" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.CancellationScope.Body">
      <summary>The <see cref="T:System.WorkflowModel.WorkflowElement" /> contained by the <see cref="T:System.WorkflowModel.Activities.CancellationScope" />.</summary>
      <returns>Returns the <see cref="T:System.WorkflowModel.WorkflowElement" /> contained by the <see cref="T:System.WorkflowModel.Activities.CancellationScope" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CancellationScope.CancelHandler">
      <summary>The <see cref="T:System.WorkflowModel.WorkflowElement" /> that is executed in the event of cancellation.</summary>
      <returns>The cancel handler.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CancellationScope.Variables">
      <summary>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects associated with the <see cref="T:System.WorkflowModel.Activities.CancellationScope" />.</summary>
      <returns>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects associated with the <see cref="T:System.WorkflowModel.Activities.CancellationScope" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Catch">
      <summary>Contains activities to be executed after a fault in a <see cref="T:System.WorkflowModel.Activities.TryCatchFinally" /> activity.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Catch.ExceptionType">
      <summary>The type of exception that causes the <see cref="T:System.WorkflowModel.Activities.Catch" /> activity to execute.</summary>
      <returns>The exception type.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Catch`1">
      <summary>Contains activities to be executed after a fault in a <see cref="T:System.WorkflowModel.Activities.TryCatchFinally" /> activity.</summary>
      <typeparam name="TException">The fault type to be caught.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.Catch`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.Catch`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Catch`1.Action">
      <summary>The <see cref="T:System.WorkflowModel.ActivityAction" /> handled by this activity.</summary>
      <returns>The activity action.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Catch`1.ExceptionType">
      <summary>The type of exception that causes the <see cref="T:System.WorkflowModel.Activities.Catch" /> activity to execute.</summary>
      <returns>The exception type.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Comment">
      <summary>Displays a comment in the workflow designer surface. This activity provides no functionality at runtime.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Comment.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.Comment" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Comment.Body">
      <summary>The child activities of the <see cref="T:System.WorkflowModel.Activities.Comment" /> activity, if any.</summary>
      <returns>The child activities.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Continue">
      <summary>Bypasses the current iteration of a <see cref="T:System.WorkflowModel.Activities.Loop" /> activity. </summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Continue.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.Continue" /> class.</summary>
    </member>
    <member name="T:System.WorkflowModel.Activities.CreateSharePointListItem">
      <summary>Creates a new list item in the specified list on the specified SharePoint site.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.CreateSharePointListItem.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.CreateSharePointListItem" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.CreateSharePointListItem.Fields">
      <summary>The collection of arguments used to create the new list. The names of these arguments are the field names, and the values of these arguments, which are evaluated at runtime, are the field values.</summary>
      <returns>The collection of arguments used to create the new list.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CreateSharePointListItem.ListName">
      <summary>The name of the list to which the specified list item is added.</summary>
      <returns>The list name.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CreateSharePointListItem.NewItemId">
      <summary>The item ID returned by the SharePoint server after the operation. This value is read-only at runtime.</summary>
      <returns>The item ID.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.CreateSharePointListItem.SharePointSite">
      <summary>The site on which to create the new list item. This value is read-only at runtime.</summary>
      <returns>The site name.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.DbConnectionContext">
      <summary>Stores database connection information for workflow operations.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.DbConnectionContext.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.DbConnectionContext" /> class with connection information from the specified configuration section name.</summary>
      <param name="configName">The name of the configuration section containing connection information.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.DbConnectionContext.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.DbConnectionContext" /> class with theee specified provider name and connection string.</summary>
      <param name="providerName">The name of the database provider used for the connection.</param>
      <param name="connectionString">The connection string used to access the data store.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.DbConnectionContext.ConfigName">
      <summary>The name of the configuration section containing connection information.</summary>
      <returns>The configuration section name.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.DbConnectionContext.ConnectionString">
      <summary>The connection string used to access the data store.</summary>
      <returns>The connection string.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.DbConnectionContext.ProviderName">
      <summary>The name of the database provider used to access the persistence store.</summary>
      <returns>The database provider.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.DbQuery`1">
      <summary>Executes a query against a database and populates an <see cref="T:System.WorkflowModel.OutArgument" /> with a list of the query results.</summary>
      <typeparam name="TResult">The type of the values returned in the result set.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.DbQuery`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.DbQuery`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.DbQuery`1.CommandText">
      <summary>The text of the SQL command used to execute the query.</summary>
      <returns>The SQL command.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.DbQuery`1.CommandType">
      <summary>The <see cref="T:System.Data.CommandType" /> that specifies how the <see cref="P:System.WorkflowModel.Activities.DbQuery`1.CommandText" /> parameter is interpreted.</summary>
      <returns>The command type.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.DbQuery`1.ConnectionContext">
      <summary>The <see cref="T:System.WorkflowModel.Activities.DbConnectionContext" /> that defines connection parameters for the query.</summary>
      <returns>The connection context.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.DbQuery`1.ObjectInitializationAction">
      <summary>The <see cref="T:System.WorkflowModel.ActivityAction" /> callback invoked when the activity body is created. This callback is used to read the value from the database reader and assign the resulting value to the <see cref="P:System.WorkflowModel.Activities.DbQuery`1.Results" /> property.</summary>
      <returns>The initialization callback.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.DbQuery`1.Parameters">
      <summary>The collection of stored procedure parameters used for the query, including the stored procedure return value.</summary>
      <returns>The stored procedure parameters.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.DbQuery`1.Results">
      <summary>The list that contains the data returned by the query.</summary>
      <returns>The returned list.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.DbUpdate">
      <summary>Executes an update query against a database.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.DbUpdate.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.DbUpdate" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.DbUpdate.CommandText">
      <summary>The text of the SQL command used to execute the query.</summary>
      <returns>The text of the SQL command used to execute the query.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.DbUpdate.ConnectionContext">
      <summary>The <see cref="T:System.WorkflowModel.Activities.DbConnectionContext" /> that defines connection parameters for the query.</summary>
      <returns>The <see cref="T:System.WorkflowModel.Activities.DbConnectionContext" /> that defines connection parameters for the query.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.DbUpdate.CreateBody">
      <summary>Creates the underlying database command used to update the database, based on the provided values.</summary>
      <returns>The <see cref="T:System.WorkflowModel.WorkflowElement" /> that performs the update action.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.DbUpdate.OnGetArguments(System.Collections.Generic.IList{System.WorkflowModel.RuntimeArgument})">
      <summary>Returns the <see cref="P:System.WorkflowModel.Activities.DbUpdate.RowsAffected" /> and <see cref="P:System.WorkflowModel.Activities.DbUpdate.ConnectionContext" /> parameters.</summary>
      <param name="arguments">The returned arguments.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.DbUpdate.Parameters">
      <summary>The collection of stored procedure parameters used for the query, including the stored procedure return value.</summary>
      <returns>The collection of stored procedure parameters used for the query, including the stored procedure return value.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.DbUpdate.RowsAffected">
      <summary>The number of rows affected by the query. This value is read-only at runtime.</summary>
      <returns>The number of rows affected by the query.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Delay">
      <summary>The <see cref="T:System.WorkflowModel.Activities.Delay" /> activity puts one branch of workflow execution into an idle state. If the delay activity uses a durable timer, which is created if the activity is configured using a TimerExpiredNotification standard endpoint, the runtime can persist and unload the workflow. To pause the workflow without the possibility of having the workflow unload, configure the activity without adding a TimerExpiredNotification standard endpoint. </summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Delay.#ctor">
      <summary>Creates a new instance of the<see cref="T:System.WorkflowModel.Activities.Delay" /> activity.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Delay.Duration">
      <summary>The amount of time that the activity pauses workflow execution along the current branch.</summary>
      <returns>The time delay.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Delay.System#WorkflowModel#IActivityExtensionProvider#EnsureExtensions(System.WorkflowModel.IExtensionCollection)">
      <summary>Verifies that a TimerExtension exists in the current execution context. If no TimerExtension exists, this method adds a new VolatileTimerExtension to the current execution context.</summary>
      <param name="extensions">The extensions in the current execution context.</param>
    </member>
    <member name="T:System.WorkflowModel.Activities.DeleteSharePointListItem">
      <summary>Deletes an item in the specified list on the specified SharePoint site.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.DeleteSharePointListItem.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.DeleteSharePointListItem" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.DeleteSharePointListItem.ListItemId">
      <summary>The ID of the item to be deleted. This value is read-only at runtime.</summary>
      <returns>The ID of the item to be deleted.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.DeleteSharePointListItem.ListName">
      <summary>The SharePoint list from which the specified item is deleted.</summary>
      <returns>The list from which the item is deleted.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.DeleteSharePointListItem.SharePointSite">
      <summary>The site from which the specified list item is deleted.</summary>
      <returns>The site from which the item is deleted.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.DoWhile">
      <summary>A looping activity that executes contained activities at least once.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.DoWhile.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.DoWhile" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.DoWhile.Body">
      <summary>The child activity to be iterated.</summary>
      <returns>The child activity.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.DoWhile.Condition">
      <summary>The <see cref="T:System.WorkflowModel.ValueExpression" /> checked at the end of the loop to determine whether the loop is executed again.</summary>
      <returns>The condition for re-executing the loop.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.DoWhile.FindName(System.String)">
      <summary>Locates and retrieves a name scope from the internal dictionary of names. Name scopes enable activities to share similar variable names within the same workflow.</summary>
      <returns>The retrieved name.</returns>
      <param name="name">The name to retrieve.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.DoWhile.OnBreak(System.WorkflowModel.ActivityExecutionContext,System.WorkflowModel.Bookmark,System.Object)">
      <summary>Cancels the remaining activities in the loop, and exits the loop.</summary>
      <param name="context">The execution environment under which the <see cref="T:System.WorkflowModel.Activities.DoWhile" /> activity is running.</param>
      <param name="bookmark">Not implemented. </param>
      <param name="state">Not implemented.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.DoWhile.OnContinue(System.WorkflowModel.ActivityExecutionContext,System.WorkflowModel.Bookmark,System.Object)">
      <summary>Cancels the remaining activities in the loop, and restarts the loop.</summary>
      <param name="context">The execution environment under which the <see cref="T:System.WorkflowModel.Activities.DoWhile" /> activity is running.</param>
      <param name="bookmark">Not implemented.</param>
      <param name="state">Not implemented.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.DoWhile.OnExecute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Schedules the body of the activity to be run.</summary>
      <param name="context">The execution environment under which the <see cref="T:System.WorkflowModel.Activities.DoWhile" /> activity is running.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.DoWhile.OnGetArguments(System.Collections.Generic.IList{System.WorkflowModel.RuntimeArgument})">
      <summary>Not implemented.</summary>
      <param name="arguments">Not implemented.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.DoWhile.OnGetChildren(System.Collections.Generic.IList{System.WorkflowModel.WorkflowElement})">
      <summary>Returns the loop’s <see cref="P:System.WorkflowModel.Activities.DoWhile.Condition" /> and the activities in the <see cref="P:System.WorkflowModel.Activities.DoWhile.Body" />.</summary>
      <param name="children">The list that is populated with the activity’s <see cref="P:System.WorkflowModel.Activities.DoWhile.Condition" /> and <see cref="P:System.WorkflowModel.Activities.DoWhile.Body" />.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.DoWhile.OnGetEnvironmentVariables(System.Collections.Generic.IList{System.WorkflowModel.Variable})">
      <summary>Returns the activity’s <see cref="P:System.WorkflowModel.Activities.DoWhile.Variables" /> collection and a <see cref="T:System.Boolean" /> variable that indicates whether the loop is to be continued. </summary>
      <param name="variables">The collection to be populated with the activity’s variable list.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.DoWhile.OnOpen(System.WorkflowModel.DeclaredEnvironment)">
      <summary>Opens the activity. If the <see cref="P:System.WorkflowModel.Activities.DoWhile.Condition" /> property is not set, a ValidationException is thrown.</summary>
      <param name="environment"></param>
    </member>
    <member name="M:System.WorkflowModel.Activities.DoWhile.RegisterName(System.String,System.Object)">
      <summary>Adds a name scope to the internal dictionary of name scopes. Name scopes enable activities to share similar variable names within the same workflow.</summary>
      <param name="name">The name of the element to add.</param>
      <param name="scopedElement">The object associated with the element to add.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.DoWhile.UnregisterName(System.String)">
      <summary>Removes an element from the internal dictionary of name scopes. Name scopes enable activities to share similar variable names within the same workflow.</summary>
      <param name="name">The key of the element to remove.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.DoWhile.Variables">
      <summary>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects associated with the <see cref="T:System.WorkflowModel.Activities.DoWhile" /> activity.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.DurableTimerExtension"></member>
    <member name="M:System.WorkflowModel.Activities.DurableTimerExtension.#ctor(System.WorkflowModel.Activities.ITimerServiceClient)"></member>
    <member name="M:System.WorkflowModel.Activities.DurableTimerExtension.BeginOnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.DurableTimerExtension.BeginOnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.DurableTimerExtension.EndOnDelete(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.DurableTimerExtension.EndOnSave(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.DurableTimerExtension.OnDelete(System.WorkflowModel.IExtensionCollection,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.Activities.DurableTimerExtension.OnLoad(System.Object,System.WorkflowModel.IExtensionCollection)"></member>
    <member name="M:System.WorkflowModel.Activities.DurableTimerExtension.OnSave(System.WorkflowModel.IExtensionCollection,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.Activities.DurableTimerExtension.RemoveTimerOnTxCompleted(System.Object,System.Transactions.TransactionEventArgs)"></member>
    <member name="M:System.WorkflowModel.Activities.DurableTimerExtension.TimerExpiredNotification(System.Guid,System.Object)"></member>
    <member name="T:System.WorkflowModel.Activities.DurableTimerStrings"></member>
    <member name="F:System.WorkflowModel.Activities.DurableTimerStrings.DurableTimerNamespace"></member>
    <member name="F:System.WorkflowModel.Activities.DurableTimerStrings.TimerExpiredNotificationContractName"></member>
    <member name="F:System.WorkflowModel.Activities.DurableTimerStrings.TimerExpiredNotificationOperationName"></member>
    <member name="F:System.WorkflowModel.Activities.DurableTimerStrings.TimerServiceContractName"></member>
    <member name="F:System.WorkflowModel.Activities.DurableTimerStrings.TimerServiceEndpointConfigurationName"></member>
    <member name="F:System.WorkflowModel.Activities.DurableTimerStrings.TimerServiceRegisterOperation"></member>
    <member name="F:System.WorkflowModel.Activities.DurableTimerStrings.TimerServiceRemoveOperation"></member>
    <member name="T:System.WorkflowModel.Activities.Flowchart">
      <summary>Models workflows using the familiar Flowchart paradigm. The <see cref="T:System.WorkflowModel.Activities.Flowchart" /> activity uses directional links that derive from <see cref="T:System.WorkflowModel.Activities.FlowElement" /> to control the flow of execution of contained activities.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Flowchart.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.Flowchart" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Flowchart.Elements">
      <summary>The contained collection of flowchart elements, including <see cref="T:System.WorkflowModel.Activities.FlowDecision" />, <see cref="T:System.WorkflowModel.Activities.FlowStep" />, and <see cref="T:System.WorkflowModel.Activities.FlowSwitch" /> elements.</summary>
      <returns>The collection of elements.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Flowchart.Execute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Executes the starting element (determined during <see cref="M:System.WorkflowModel.Activities.Flowchart.OnOpen(System.WorkflowModel.DeclaredEnvironment)" />).</summary>
      <param name="context">The environment in which the flowchart executes.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Flowchart.OnGetChildren(System.Collections.Generic.IList{System.WorkflowModel.WorkflowElement})">
      <summary>Returns the contained activities.</summary>
      <param name="children">The activities.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Flowchart.OnGetEnvironmentVariables(System.Collections.Generic.IList{System.WorkflowModel.Variable})">
      <summary>Returns the collection of contained variables.</summary>
      <param name="variables">The collection of variables.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Flowchart.OnOpen(System.WorkflowModel.DeclaredEnvironment)">
      <summary>Builds the collection of elements and determines the starting element.</summary>
      <param name="environment"></param>
    </member>
    <member name="P:System.WorkflowModel.Activities.Flowchart.Variables">
      <summary>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects associated with the <see cref="T:System.WorkflowModel.Activities.Flowchart" />.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.FlowDecision">
      <summary>
        <see cref="T:System.WorkflowModel.Activities.FlowDecision" /> is a <see cref="T:System.WorkflowModel.Activities.FlowElement" /> that allows the developer to define a condition and take different actions based on the value of the condition.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.FlowDecision.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.FlowDecision" /> class. </summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.FlowDecision.Condition">
      <summary>Specifies the condition the <see cref="T:System.WorkflowModel.Activities.FlowDecision" /> is testing. If the condition evaluates to true, the <see cref="T:System.WorkflowModel.WorkflowElement" /> in the <see cref="P:System.WorkflowModel.Activities.FlowDecision.True" /> property is executed. Otherwise the <see cref="T:System.WorkflowModel.WorkflowElement" /> in the <see cref="P:System.WorkflowModel.Activities.FlowDecision.False" /> property is executed.</summary>
      <returns>A value expression that represents the condition. </returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.FlowDecision.False">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.WorkflowElement" /> that is executed when the condition evaluates to false.</summary>
      <returns>The workflow element that is executed when the condition evaluates to false.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.FlowDecision.True">
      <summary>Gets or sets the <see cref="T:System.WorkflowModel.WorkflowElement" /> that is executed when the condition evaluates to true.</summary>
      <returns>The workflow element to execute when the condition evaluates to true.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.FlowElement"></member>
    <member name="M:System.WorkflowModel.Activities.FlowElement.op_Implicit(System.WorkflowModel.WorkflowElement)~System.WorkflowModel.Activities.FlowElement"></member>
    <member name="T:System.WorkflowModel.Activities.FlowEvent"></member>
    <member name="T:System.WorkflowModel.Activities.FlowStep"></member>
    <member name="M:System.WorkflowModel.Activities.FlowStep.#ctor">
      <summary>Returns a new instance of the <see cref="T:System.WorkflowModel.Activities.FlowStep" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.FlowStep.Action">
      <summary>The <see cref="T:System.WorkflowModel.WorkflowElement" /> that the <see cref="T:System.WorkflowModel.Activities.FlowStep" /> element executes.</summary>
      <returns>The element to be executed.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.FlowStep.Next">
      <summary>If <see cref="P:System.WorkflowModel.Activities.FlowStep.Action" /> is null, the <see cref="T:System.WorkflowModel.Activities.FlowElement" /> that the <see cref="T:System.WorkflowModel.Activities.FlowStep" /> element executes.</summary>
      <returns>The specified element.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.FlowSwitch"></member>
    <member name="M:System.WorkflowModel.Activities.FlowSwitch.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.FlowSwitch" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.FlowSwitch.Cases">
      <summary>A dictionary of cases to be processed by the <see cref="T:System.WorkflowModel.Activities.FlowSwitch" /> element. Each element in the dictionary consists of an object of a type that implements <see cref="T:System.IComparable" /> (such as <see cref="T:System.String" />) and a <see cref="T:System.WorkflowModel.Activities.FlowElement" />.</summary>
      <returns>The collection of cases.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.FlowSwitch.Default">
      <summary>The element to be executed if no elements in the <see cref="P:System.WorkflowModel.Activities.FlowSwitch.Cases" /> collection match the compared value.</summary>
      <returns>The default element to execute.<see cref="" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.FlowSwitch.Expression">
      <summary>The expression to evaluate against the collection of <see cref="P:System.WorkflowModel.Activities.FlowSwitch.Cases" /> elements.</summary>
      <returns>The expression to evaluate.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.ForEach`1">
      <summary>Executes an activity action once for each value provided in the <see cref="P:System.WorkflowModel.Activities.ForEach`1.Values" /> collection.</summary>
      <typeparam name="T">The type of the values provided in the <see cref="P:System.WorkflowModel.Activities.ForEach`1.Values" /> collection.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.ForEach`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.ForEach`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.ForEach`1.Body">
      <summary>The activity action to be executed for each item in the <see cref="P:System.WorkflowModel.Activities.ForEach`1.Values" /> collection.</summary>
      <returns>
The activity action to be executed.
</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.ForEach`1.OnBreak(System.WorkflowModel.ActivityExecutionContext,System.WorkflowModel.Bookmark,System.Object)">
      <summary>Cancels the currently executing iteration and exits the loop.</summary>
      <param name="context">The execution environment the activity is executing under.</param>
      <param name="bookmark">Not implemented.</param>
      <param name="state">Not implemented.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.ForEach`1.OnContinue(System.WorkflowModel.ActivityExecutionContext,System.WorkflowModel.Bookmark,System.Object)">
      <summary>Cancels the currently executing iteration and begins the next iteration.</summary>
      <param name="context">The execution environment the activity is executing under.</param>
      <param name="bookmark">Not implemented.</param>
      <param name="state">Not implemented.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.ForEach`1.OnExecute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Begins execution of the activity iterations.</summary>
      <param name="context">The execution environment the activity is executing under.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.ForEach`1.OnGetChildren(System.Collections.Generic.IList{System.WorkflowModel.WorkflowElement})">
      <summary>Returns the activity action specified in the <see cref="P:System.WorkflowModel.Activities.ForEach`1.Body" /> parameter.</summary>
      <param name="children">A list that contains the body parameter.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.ForEach`1.OnGetEnvironmentVariables(System.Collections.Generic.IList{System.WorkflowModel.Variable})">
      <summary>Returns a collection of variables that describe the current execution state.</summary>
      <param name="variables">The collection of variables.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.ForEach`1.OnOpen(System.WorkflowModel.DeclaredEnvironment)">
      <summary>Opens the activity.</summary>
      <param name="environment">The collection of variables and arguments associated with the execution environment.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.ForEach`1.Values">
      <summary>The activity’s collection of inputs for the execution of the <see cref="P:System.WorkflowModel.Activities.ForEach`1.Body" /> activity action.</summary>
      <returns>
The collection of values.
</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.GetSharePointListItems`1">
      <summary>Returns a collection of SharePoint list items.</summary>
      <typeparam name="TResult">The type of the returned list values.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.GetSharePointListItems`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.GetSharePointListItems`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.GetSharePointListItems`1.FieldNames">
      <summary>The names of the fields to query for values.</summary>
      <returns>The collection of field names.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.GetSharePointListItems`1.ListItems">
      <summary>The collection of list items returned by the query.</summary>
      <returns>The returned list item objects.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.GetSharePointListItems`1.ListName">
      <summary>The name of the list to query for values.</summary>
      <returns>The queried list name.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.GetSharePointListItems`1.ObjectInitializationAction">
      <summary>The <see cref="T:System.WorkflowModel.Activities.InitializationAction`2" /> callback that initializes the list item object based on the data returned by the SharePoint server.</summary>
      <returns>The collection of initialization parameters.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.GetSharePointListItems`1.SharePointSite">
      <summary>The SharePoint site to be queried.</summary>
      <returns>The SharePoint site.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.If">
      <summary>Models an If-Else condition.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.If.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.If" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.If.Condition">
      <summary>The condition that determines which child activity to execute.  The <see cref="P:System.WorkflowModel.Activities.If.Then" /> activity will execute if the condition resolves to true.</summary>
      <returns>
The execution condition.
</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.If.Else">
      <summary>The activity to be executed if the activity’s <see cref="P:System.WorkflowModel.Activities.If.Condition" /> resolves to false.</summary>
      <returns>
The child activity.
</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.If.Execute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Executes the <see cref="T:System.WorkflowModel.WorkflowElement" /> specified in the <see cref="P:System.WorkflowModel.Activities.If.Then" /> parameter if the  <see cref="P:System.WorkflowModel.Activities.If.Condition" /> resolves to true, otherwise, executes the <see cref="T:System.WorkflowModel.WorkflowElement" /> specified in the <see cref="P:System.WorkflowModel.Activities.If.Else" /> parameter.</summary>
      <param name="context">The execution environment under which the activity executes.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.If.OnGetChildren(System.Collections.Generic.IList{System.WorkflowModel.WorkflowElement})">
      <summary>Returns the <see cref="P:System.WorkflowModel.Activities.If.Then" /> and <see cref="P:System.WorkflowModel.Activities.If.Else" /> activities.</summary>
      <param name="children">The requested activities.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.If.OnOpen(System.WorkflowModel.DeclaredEnvironment)">
      <summary>Opens the activity.</summary>
      <param name="environment">The collection of variables and attributes associated with the execution environment.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.If.Then">
      <summary>The activity to be executed if the activity’s <see cref="P:System.WorkflowModel.Activities.If.Condition" /> resolves to true.</summary>
      <returns>
The child activity.
</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.InitializationAction`2">
      <summary>An event that occurs when an activity initializes.</summary>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TTarget"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.InitializationAction`2.#ctor">
      <summary>Cretaes a new instance of the <see cref="T:System.WorkflowModel.Activities.InitializationAction`2" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.InitializationAction`2.GetActionArguments">
      <summary>Returns a collection including the <see cref="P:System.WorkflowModel.Activities.InitializationAction`2.Source" /> and <see cref="P:System.WorkflowModel.Activities.InitializationAction`2.Target" /> parameters.</summary>
      <returns>The parameters.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.InitializationAction`2.Source">
      <summary>The initializing activity.</summary>
      <returns>The activity.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.InitializationAction`2.Target">
      <summary>The initialized activity.</summary>
      <returns>The activity.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.Interop">
      <summary>An activity that allows for execution of (WinFX) activities within a workflow.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.Interop" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Interop.Body">
      <summary>The type of the activity contained by the <see cref="T:System.WorkflowModel.Activities.Interop" /> activity.</summary>
      <returns>This type must derive from <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.Cancel(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Cancels the execution of the contained activity.</summary>
      <param name="executionContext">The execution environment under which the activity executes.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.Execute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Executes the contained activity.</summary>
      <param name="context">The execution environment under which the activity executes.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.GetAttributes">
      <summary>Returns the collection of attributes for the contained WinFX activity.</summary>
      <returns>The attribute collection.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.GetClassName">
      <summary>Returns the name of the class of the contained WinFX activity.</summary>
      <returns>The class name.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.GetComponentName">
      <summary>Returns the name of the contained WinFX activity.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.GetConverter">
      <summary>Returns the associated type converter for the contained WinFX activity.</summary>
      <returns>The type converter.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.GetDefaultEvent">
      <returns>Returns the default event for the contained WinFX activity.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.GetDefaultProperty">
      <summary>Returns the default property of the contained WinFX activity.</summary>
      <returns>The default property.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.GetEditor(System.Type)">
      <summary>Returns the editor for the contained WinFX activity.</summary>
      <returns>The editor.</returns>
      <param name="editorBaseType">The type of the requested editor.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.GetEvents">
      <summary>Returns the collection of events for the contained WinFX activity.</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.GetEvents(System.Attribute[])">
      <summary>Returns the collection of events for the contained WinFX activity.</summary>
      <returns>The events.</returns>
      <param name="attributes"></param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.GetProperties">
      <summary>Returns the collection of properties for the contained WinFX activity.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.GetProperties(System.Attribute[])">
      <summary>Returns the collection of properties for the contained WinFX activity.</summary>
      <returns>The property collection.</returns>
      <param name="attributes">Not implemented.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns the owner of the specified property descriptor, or the Interop activity itself if the property descriptor has no owner.</summary>
      <returns>The owner.</returns>
      <param name="pd"></param>
    </member>
    <member name="P:System.WorkflowModel.Activities.Interop.MetaProperties">
      <summary>The collection of name-value pairs that corresponds to the meta properties of the WinFX activity, such as an activity’s <see cref="T:System.Workflow.ComponentModel.Activity.Name" /> property, or a <see cref="T:System.Workflow.Activities.While" /> activity’s <see cref="M:System.Workflow.Activities.While.Condition" /> property.</summary>
      <returns>The collection of meta-properties.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.OnGetArguments(System.Collections.Generic.IList{System.WorkflowModel.RuntimeArgument})">
      <summary>Returns the list of arguments associated with the activity. The argument list is determined by the type of the Body property.</summary>
      <param name="arguments">The argument list.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.OnGetEnvironmentVariables(System.Collections.Generic.IList{System.WorkflowModel.Variable})">
      <summary>Returns the variables used by the activity.</summary>
      <param name="variables">The list that contains the variables used by the activity.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Interop.OnOpen(System.WorkflowModel.DeclaredEnvironment)">
      <summary>Prepares the activity for execution.</summary>
      <param name="environment">The variable and argument collections.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.Interop.Properties">
      <summary>The collection of name-value pairs that corresponds to the input and output properties of the WinFX activity.</summary>
      <returns>The collection of properties.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.ITimerExpiredNotification"></member>
    <member name="M:System.WorkflowModel.Activities.ITimerExpiredNotification.TimerExpiredNotification(System.Guid,System.Object)"></member>
    <member name="T:System.WorkflowModel.Activities.ITimerServiceClient"></member>
    <member name="M:System.WorkflowModel.Activities.ITimerServiceClient.BeginRegisterTimer(System.TimeSpan,System.Guid,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.ITimerServiceClient.BeginRemoveTimer(System.Guid,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.ITimerServiceClient.EndRegisterTimer(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.ITimerServiceClient.EndRemoveTimer(System.IAsyncResult)"></member>
    <member name="M:System.WorkflowModel.Activities.ITimerServiceClient.RegisterTimer(System.TimeSpan,System.Guid,System.Object,System.TimeSpan)"></member>
    <member name="M:System.WorkflowModel.Activities.ITimerServiceClient.RemoveTimer(System.Guid)"></member>
    <member name="T:System.WorkflowModel.Activities.Loop">
      <summary>The abstract base class for looping flow control activities.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Loop.#ctor">
      <summary>When implemented in a derived class, creates a new instance of the derived class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Loop.Execute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>When implemented in a derived class, executes one iteration of the loop.</summary>
      <param name="context">The runtime environment under which the activity executes.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Loop.OnBreak(System.WorkflowModel.ActivityExecutionContext,System.WorkflowModel.Bookmark,System.Object)">
      <summary>When implemented in a derived class, an event that executes when a <see cref="T:System.WorkflowModel.Activities.Break" /> activity in the loop is encountered.</summary>
      <param name="context">The runtime environment under which the activity executes.</param>
      <param name="bookmark">The <see cref="T:System.WorkflowModel.Bookmark" /> used to resume the workflow after execution stops.</param>
      <param name="state">A user-defined object to uniquely identify this instance.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Loop.OnContinue(System.WorkflowModel.ActivityExecutionContext,System.WorkflowModel.Bookmark,System.Object)">
      <summary>When implemented in a derived class, called when a <see cref="T:System.WorkflowModel.Activities.Continue" /> activity executes within the loop.</summary>
      <param name="context">The runtime environment under which the activity executes.</param>
      <param name="bookmark">The <see cref="T:System.WorkflowModel.Bookmark" /> used to resume the workflow after execution stops.</param>
      <param name="state">A user-defined object to uniquely identify this instance.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Loop.OnExecute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>When implemented in a derived class, called when each iteration of the loop executes.</summary>
      <param name="context">The runtime environment under which the activity executes.</param>
    </member>
    <member name="T:System.WorkflowModel.Activities.Parallel">
      <summary>A workflow element that executes all child activities simultaneously and asynchronously.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Parallel.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.Parallel" /> activity.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Parallel.Branches">
      <summary>The child elements to be executed.</summary>
      <returns>The elements.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Parallel.CompletionCondition">
      <summary>If this expression is true after the completion of any elements in the <see cref="P:System.WorkflowModel.Activities.Parallel.Branches" /> collection, any remaining executing elements are cancelled.</summary>
      <returns>The completion expression.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Parallel.Variables">
      <summary>The collection of contained variables.</summary>
      <returns>The contained variables.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.ParallelForEach`1">
      <summary>An iterative activity that executes a contained activity once for each value in the <see cref="P:System.WorkflowModel.Activities.ParallelForEach`1.Values" /> collection. For example, if the contained activity writes out a message to the console, and the <see cref="P:System.WorkflowModel.Activities.ParallelForEach`1.Values" /> collection contains strings, then the contained activity is executed repeatedly with each string as input.</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.ParallelForEach`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.ParallelForEach`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.ParallelForEach`1.Body">
      <summary>The workflow element that is executed once for every value contained in the <see cref="P:System.WorkflowModel.Activities.ParallelForEach`1.Values" /> collection.</summary>
      <returns>The contained activity.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.ParallelForEach`1.CompletionCondition">
      <summary>If this expression evaluates to true when one iteration completes, then any remaining iterations are cancelled. </summary>
      <returns>The completion expression.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.ParallelForEach`1.Values">
      <summary>The collection of values used as parameters for each iteration of the activity contained in the <see cref="P:System.WorkflowModel.Activities.ParallelForEach`1.Body" /> property.</summary>
      <returns>The collection of values.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.PowerShellCommand">
      <summary>Executes a command using PowerShell.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.PowerShellCommand.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.PowerShellCommand" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.PowerShellCommand.CommandText">
      <summary>The command to be executed.</summary>
      <returns>The command.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.PowerShellCommand.Errors"></member>
    <member name="P:System.WorkflowModel.Activities.PowerShellCommand.Input">
      <summary>The pipeline input to be provided to the executed PowerShell command.</summary>
      <returns>The input.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.PowerShellCommand.Parameters">
      <summary>The collection of parameters for the executed command.</summary>
      <returns>The collection of parameters.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.PowerShellCommand`1">
      <summary>Executes a command using PowerShell, specifying the command’s return type.</summary>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.PowerShellCommand`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.PowerShellCommand`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.PowerShellCommand`1.CommandText">
      <summary>The command to be executed.</summary>
      <returns>The command.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.PowerShellCommand`1.Errors"></member>
    <member name="P:System.WorkflowModel.Activities.PowerShellCommand`1.Input">
      <summary>The pipeline input to be provided to the executed PowerShell command.</summary>
      <returns>The input.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.PowerShellCommand`1.ObjectInitializationAction">
      <summary>The <see cref="T:System.WorkflowModel.Activities.ActivityAction" /> to be executed when the activity initializes. This activity action is used to initialize the parameters and pipeline input for the activity.</summary>
      <returns>The activity action.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.PowerShellCommand`1.Output">
      <summary>The returned output from the executed command.</summary>
      <returns>The output.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.PowerShellCommand`1.Parameters">
      <summary>The collection of parameters for the executed command.</summary>
      <returns>The collection of parameters.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.PowerShellExecutionException"></member>
    <member name="M:System.WorkflowModel.Activities.PowerShellExecutionException.#ctor"></member>
    <member name="M:System.WorkflowModel.Activities.PowerShellExecutionException.#ctor(System.Exception,System.Collections.ObjectModel.Collection{System.Management.Automation.ErrorRecord})"></member>
    <member name="M:System.WorkflowModel.Activities.PowerShellExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:System.WorkflowModel.Activities.PowerShellExecutionException.#ctor(System.String)"></member>
    <member name="M:System.WorkflowModel.Activities.PowerShellExecutionException.#ctor(System.String,System.Exception)"></member>
    <member name="P:System.WorkflowModel.Activities.PowerShellExecutionException.ErrorRecords"></member>
    <member name="P:System.WorkflowModel.Activities.PowerShellExecutionException.FailReason"></member>
    <member name="M:System.WorkflowModel.Activities.PowerShellExecutionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="T:System.WorkflowModel.Activities.Sequence">
      <summary>Executes a set of child activities according to a single, defined ordering.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.Sequence.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.Sequence" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Sequence.Activities">
      <summary>The collection of contained activities.</summary>
      <returns>The activities.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Sequence.Execute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Executes contained activities in sequence.</summary>
      <param name="executionContext">The environment in which the activity executes.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Sequence.OnGetArguments(System.Collections.Generic.IList{System.WorkflowModel.RuntimeArgument})">
      <summary>Not implemented.</summary>
      <param name="arguments">Not implemented.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Sequence.OnGetChildren(System.Collections.Generic.IList{System.WorkflowModel.WorkflowElement})">
      <summary>Retrieves the collection of child activities contained by the <see cref="T:System.WorkflowModel.Activities.Sequence" /> activity.</summary>
      <param name="children">The child activities.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Sequence.OnGetEnvironmentVariables(System.Collections.Generic.IList{System.WorkflowModel.Variable})">
      <summary>Retrieves the collection of variables contained by the <see cref="T:System.WorkflowModel.Activities.Sequence" /> activity.</summary>
      <param name="variables">The collection of variables.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.Sequence.OnSequenceComplete(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Not implemented.</summary>
      <param name="executionContext">Not implemented.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.Sequence.Variables">
      <summary>The collection of contained variables.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.SharePointConnectionContext"></member>
    <member name="M:System.WorkflowModel.Activities.SharePointConnectionContext.#ctor"></member>
    <member name="P:System.WorkflowModel.Activities.SharePointConnectionContext.SharePointSite"></member>
    <member name="T:System.WorkflowModel.Activities.State"></member>
    <member name="M:System.WorkflowModel.Activities.State.#ctor"></member>
    <member name="P:System.WorkflowModel.Activities.State.Entry"></member>
    <member name="P:System.WorkflowModel.Activities.State.Exit"></member>
    <member name="P:System.WorkflowModel.Activities.State.IsInitial"></member>
    <member name="P:System.WorkflowModel.Activities.State.IsTerminal"></member>
    <member name="P:System.WorkflowModel.Activities.State.Name"></member>
    <member name="P:System.WorkflowModel.Activities.State.States"></member>
    <member name="M:System.WorkflowModel.Activities.State.ToString"></member>
    <member name="T:System.WorkflowModel.Activities.StateMachine"></member>
    <member name="M:System.WorkflowModel.Activities.StateMachine.#ctor"></member>
    <member name="M:System.WorkflowModel.Activities.StateMachine.Execute(System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="M:System.WorkflowModel.Activities.StateMachine.OnGetChildren(System.Collections.Generic.IList{System.WorkflowModel.WorkflowElement})"></member>
    <member name="M:System.WorkflowModel.Activities.StateMachine.OnGetEnvironmentVariables(System.Collections.Generic.IList{System.WorkflowModel.Variable})"></member>
    <member name="M:System.WorkflowModel.Activities.StateMachine.OnOpen(System.WorkflowModel.DeclaredEnvironment)"></member>
    <member name="P:System.WorkflowModel.Activities.StateMachine.States"></member>
    <member name="P:System.WorkflowModel.Activities.StateMachine.Transitions"></member>
    <member name="P:System.WorkflowModel.Activities.StateMachine.Variables"></member>
    <member name="T:System.WorkflowModel.Activities.StateTransition"></member>
    <member name="M:System.WorkflowModel.Activities.StateTransition.#ctor"></member>
    <member name="P:System.WorkflowModel.Activities.StateTransition.Action"></member>
    <member name="P:System.WorkflowModel.Activities.StateTransition.Event"></member>
    <member name="P:System.WorkflowModel.Activities.StateTransition.Source"></member>
    <member name="P:System.WorkflowModel.Activities.StateTransition.Target"></member>
    <member name="T:System.WorkflowModel.Activities.Switch`1">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.Switch`1.#ctor"></member>
    <member name="P:System.WorkflowModel.Activities.Switch`1.Cases"></member>
    <member name="P:System.WorkflowModel.Activities.Switch`1.Default"></member>
    <member name="P:System.WorkflowModel.Activities.Switch`1.Expression"></member>
    <member name="T:System.WorkflowModel.Activities.Throw`1">
      <summary>Causes an exception to be thrown in a <see cref="T:System.WorkflowModel.Activities.TryCatchFinally" /> activity.</summary>
      <typeparam name="TException">The type of the exception to be thrown.</typeparam>
    </member>
    <member name="M:System.WorkflowModel.Activities.Throw`1.#ctor">
      <summary>Returns a new instance of the <see cref="T:System.WorkflowModel.Activities.Throw`1" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.Throw`1.Exception">
      <summary>The exception object to be thrown by the activity.</summary>
      <returns>The exception.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Throw`1.Execute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Throws the contained exception.</summary>
      <param name="context">The environment in which the activity executes.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.Throw`1.InnerException">
      <summary>The inner exception associated with the exception to be thrown by the activity.</summary>
      <returns>The inner exception.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.Throw`1.Message">
      <summary>The message associated with the exception to be thrown by the activity.</summary>
      <returns>The message.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Throw`1.OnOpen(System.WorkflowModel.DeclaredEnvironment)"></member>
    <member name="M:System.WorkflowModel.Activities.Throw`1.ShouldSerializeException">
      <summary>Returns true if the <see cref="P:System.WorkflowModel.Activities.Throw`1.Exception" /> object has been set to a value.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Activities.Throw`1.Exception" /> object has been set to a value.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Throw`1.ShouldSerializeInnerException">
      <summary>Returns true if the <see cref="P:System.WorkflowModel.Activities.Throw`1.InnerException" /> object has been set to a value.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Activities.Throw`1.InnerException" /> object has been set to a value.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.Throw`1.ShouldSerializeMessage">
      <summary>Returns true if the <see cref="P:System.WorkflowModel.Activities.Throw`1.Message" /> object has been set to a value.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Activities.Throw`1.Message" /> object has been set to a value.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.TimerExtension"></member>
    <member name="M:System.WorkflowModel.Activities.TimerExtension.#ctor(System.WorkflowModel.Activities.ITimerServiceClient)"></member>
    <member name="M:System.WorkflowModel.Activities.TimerExtension.Attach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="M:System.WorkflowModel.Activities.TimerExtension.CancelTimer(System.String)"></member>
    <member name="M:System.WorkflowModel.Activities.TimerExtension.Detach(System.WorkflowModel.IExtensibleObject)"></member>
    <member name="F:System.WorkflowModel.Activities.TimerExtension.instance"></member>
    <member name="M:System.WorkflowModel.Activities.TimerExtension.SetTimer(System.TimeSpan,System.String)"></member>
    <member name="M:System.WorkflowModel.Activities.TimerExtension.SetTimer(System.TimeSpan,System.WorkflowModel.ActivityExecutionContext)"></member>
    <member name="F:System.WorkflowModel.Activities.TimerExtension.tableSaved"></member>
    <member name="P:System.WorkflowModel.Activities.TimerExtension.ThisLock"></member>
    <member name="M:System.WorkflowModel.Activities.TimerExtension.TimerFiredCallback(System.Object)"></member>
    <member name="M:System.WorkflowModel.Activities.TimerExtension.TimerFiredDone(System.IAsyncResult)"></member>
    <member name="T:System.WorkflowModel.Activities.TransactionScopeActivity">
      <summary>An activity that demarcates a transaction boundary. A new <see cref="T:System.Transactions.Transaction" /> is started when this activity begins executing, and the transaction commits when the activity closes successfully.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.TransactionScopeActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.WorkflowModel.Activities.TransactionScopeActivity" /> class.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.TransactionScopeActivity.Body">
      <summary>Gets or sets the activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.TransactionScopeActivity" /> executes.</summary>
      <returns>The activity that is scheduled when the <see cref="T:System.WorkflowModel.Activities.TransactionScopeActivity" /> executes.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.TransactionScopeActivity.EnlistWorkflow">
      <summary>Gets or sets a value that indicates whether any workflow variables modified during the execution of this activity are rolled back in the event that the transaction fails to commit.</summary>
      <returns>true if the workflow variables are rolled back in the event the transaction fails to commit; otherwise false. The default is true.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.TransactionScopeActivity.IsolationLevel">
      <summary>Gets or sets the <see cref="T:System.Transactions.IsolationLevel" /> for this <see cref="T:System.WorkflowModel.Activities.TransactionScopeActivity" />.</summary>
      <returns>The <see cref="T:System.Transactions.IsolationLevel" /> for this <see cref="T:System.WorkflowModel.Activities.TransactionScopeActivity" />.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.TransactionScopeActivity.ShouldSerializeIsolationLevel">
      <summary>Indicates whether the <see cref="P:System.WorkflowModel.Activities.TransactionScopeActivity.IsolationLevel" /> for this <see cref="T:System.WorkflowModel.Activities.TransactionScopeActivity" /> should be serialized.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Activities.TransactionScopeActivity.IsolationLevel" /> property value should be serialized; otherwise false.
</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.TransactionScopeActivity.ShouldSerializeTimeout">
      <summary>Indicates whether the <see cref="P:System.WorkflowModel.Activities.TransactionScopeActivity.Timeout" /> for this <see cref="T:System.WorkflowModel.Activities.TransactionScopeActivity" /> should be serialized.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Activities.TransactionScopeActivity.Timeout" /> property value should be serialized; otherwise false.
</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.TransactionScopeActivity.ShouldSerializeTransactionScopeOption">
      <summary>Indicates whether the <see cref="P:System.WorkflowModel.Activities.TransactionScopeActivity.TransactionScopeOption" /> for this <see cref="T:System.WorkflowModel.Activities.TransactionScopeActivity" /> should be serialized.</summary>
      <returns>true if the <see cref="P:System.WorkflowModel.Activities.TransactionScopeActivity.TransactionScopeOption" /> property value should be serialized; otherwise false.
</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.TransactionScopeActivity.Timeout">
      <summary>Gets or sets the <see cref="T:System.TimeSpan" /> that indicates the timeout period for the transaction used for this <see cref="T:System.WorkflowModel.Activities.TransactionScopeActivity" />.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> that indicates the timeout period for the transaction used for this <see cref="T:System.WorkflowModel.Activities.TransactionScopeActivity" />.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.TransactionScopeActivity.TransactionScopeOption">
      <summary>Gets or sets the <see cref="T:System.Transactions. TransactionScopeOption" /> value for this <see cref="T:System.WorkflowModel.Activities.TransactionScopeActivity" />.</summary>
      <returns>The <see cref="T:System.Transactions. TransactionScopeOption" /> value for this <see cref="T:System.WorkflowModel.Activities.TransactionScopeActivity" />.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.TryCatchFinally">
      <summary>Executes workflow elements within an exception handling block.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.TryCatchFinally.#ctor">
      <summary>Creates a new instance of the <see cref="M:System.WorkflowModel.Activities.TryCatchFinally.#ctor" /> class.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.TryCatchFinally.Cancel(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Cancels the exception handling block and all contained elements.</summary>
      <param name="context">The execution environment in which the element executes.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.TryCatchFinally.Catches">
      <summary>The collection of Catch elements to be checked when the <see cref="P:System.WorkflowModel.Activities.TryCatchFinally.Try" /> activity throws an exception.</summary>
      <returns>The clause collection.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.TryCatchFinally.Execute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Schedules the element contained in the <see cref="P:System.WorkflowModel.Activities.TryCatchFinally.Try" /> parameter for execution. The elements contained in the <see cref="P:System.WorkflowModel.Activities.TryCatchFinally.Catches" /> and <see cref="P:System.WorkflowModel.Activities.TryCatchFinally.Finally" /> parameters are scheduled for execution as determined by exceptions encountered while executing the <see cref="P:System.WorkflowModel.Activities.TryCatchFinally.Try" /> element.</summary>
      <param name="context">The execution environment in which the element executes.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.TryCatchFinally.Finally">
      <summary>The workflow element to be executed when the <see cref="P:System.WorkflowModel.Activities.TryCatchFinally.Try" /> and any necessary activities in the <see cref="P:System.WorkflowModel.Activities.TryCatchFinally.Catches" /> collection complete execution.</summary>
      <returns>The workflow element.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.TryCatchFinally.OnGetArguments(System.Collections.Generic.IList{System.WorkflowModel.RuntimeArgument})">
      <summary>Not implemented.</summary>
      <param name="arguments">Not implemented.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.TryCatchFinally.OnGetChildren(System.Collections.Generic.IList{System.WorkflowModel.WorkflowElement})">
      <summary>Returns the elements contained in the <see cref="P:System.WorkflowModel.Activities.TryCatchFinally.Try" />, <see cref="P:System.WorkflowModel.Activities.TryCatchFinally.Catches" />, and <see cref="P:System.WorkflowModel.Activities.TryCatchFinally.Finally" /> parameters.</summary>
      <param name="children">The contained activities.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.TryCatchFinally.OnGetEnvironmentVariables(System.Collections.Generic.IList{System.WorkflowModel.Variable})">
      <summary>Retrieves the collection of variables contained by the <see cref="T:System.WorkflowModel.Activities.TryCatchFinally" /> activity.</summary>
      <param name="variables">The collection of variables.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.TryCatchFinally.OnOpen(System.WorkflowModel.DeclaredEnvironment)">
      <summary>Prepares the <see cref="P:System.WorkflowModel.Activities.TryCatchFinally.Catches" /> collection for execution. This property is usually called by the runtime.</summary>
      <param name="environment">The current execution environment.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.TryCatchFinally.Try">
      <summary>The workflow element first executed when the <see cref="T:System.WorkflowModel.Activities.TryCatchFinally" /> executes.</summary>
      <returns>The workflow element.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.TryCatchFinally.Variables">
      <summary>The collection of contained variables.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.UpdateSharePointListItem"></member>
    <member name="M:System.WorkflowModel.Activities.UpdateSharePointListItem.#ctor"></member>
    <member name="P:System.WorkflowModel.Activities.UpdateSharePointListItem.Fields"></member>
    <member name="P:System.WorkflowModel.Activities.UpdateSharePointListItem.ListItemId"></member>
    <member name="P:System.WorkflowModel.Activities.UpdateSharePointListItem.ListName"></member>
    <member name="P:System.WorkflowModel.Activities.UpdateSharePointListItem.SharePointSite"></member>
    <member name="T:System.WorkflowModel.Activities.While">
      <summary>Executes a contained workflow element while a condition evaluates to true.</summary>
    </member>
    <member name="M:System.WorkflowModel.Activities.While.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.WorkflowModel.Activities.While" /> activity.</summary>
    </member>
    <member name="P:System.WorkflowModel.Activities.While.Body">
      <summary>The activity to execute in the While loop.</summary>
      <returns>The activity.</returns>
    </member>
    <member name="P:System.WorkflowModel.Activities.While.Condition">
      <summary>The condition to be evaluated before each iteration of the While loop.</summary>
      <returns>The condition.</returns>
    </member>
    <member name="M:System.WorkflowModel.Activities.While.FindName(System.String)">
      <summary>Locates a name scope in the internal dictionary. Name scopes enable activities to share similar variable names within the same workflow.</summary>
      <returns>The retrieved name.</returns>
      <param name="name">The name to retrieve.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.While.OnBreak(System.WorkflowModel.ActivityExecutionContext,System.WorkflowModel.Bookmark,System.Object)">
      <summary>Exits the While loop and cancels any contained activity instances.</summary>
      <param name="context">The environment in which the activity executes.</param>
      <param name="bookmark">Not implemented.</param>
      <param name="state">Not implemented.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.While.OnContinue(System.WorkflowModel.ActivityExecutionContext,System.WorkflowModel.Bookmark,System.Object)">
      <summary>Cancels any contained activity instances.</summary>
      <param name="context">The environment in which the activity executes.</param>
      <param name="bookmark">Not implemented.</param>
      <param name="state">Not implemented.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.While.OnExecute(System.WorkflowModel.ActivityExecutionContext)">
      <summary>Executes the contained activity.</summary>
      <param name="context">The environment in which the activity executes.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.While.OnGetArguments(System.Collections.Generic.IList{System.WorkflowModel.RuntimeArgument})">
      <summary>Not implemented.</summary>
      <param name="arguments">Not implemented.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.While.OnGetChildren(System.Collections.Generic.IList{System.WorkflowModel.WorkflowElement})">
      <summary>Returns the <see cref="P:System.WorkflowModel.Activities.While.Body" /> and <see cref="P:System.WorkflowModel.Activities.While.Condition" /> properties.</summary>
      <param name="children">The returned elements.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.While.OnGetEnvironmentVariables(System.Collections.Generic.IList{System.WorkflowModel.Variable})">
      <summary>Retrieves the collection of variables contained by the <see cref="T:System.WorkflowModel.Activities.While" /> activity.</summary>
      <param name="variables">The collection of variables.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.While.OnOpen(System.WorkflowModel.DeclaredEnvironment)">
      <summary>Initializes the <see cref="P:System.WorkflowModel.Activities.While.Condition" /> property.</summary>
      <param name="environment">The environment in which the activity executes.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.While.RegisterName(System.String,System.Object)">
      <summary>Adds a name scope to the internal dictionary. Name scopes enable activities to share similar variable names within the same workflow.</summary>
      <param name="name">The name of the element to add.</param>
      <param name="scopedElement">The object associated with the element to add.</param>
    </member>
    <member name="M:System.WorkflowModel.Activities.While.UnregisterName(System.String)">
      <summary>Removes a name scope from the internal dictionary. Name scopes enable activities to share similar variable names within the same workflow.</summary>
      <param name="name">The key of the element to remove.</param>
    </member>
    <member name="P:System.WorkflowModel.Activities.While.Variables">
      <summary>The collection of <see cref="T:System.WorkflowModel.Variable" /> objects associated with the <see cref="T:System.WorkflowModel.Activities.While" /> activity.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.WorkflowModel.Activities.WriteLine"></member>
    <member name="M:System.WorkflowModel.Activities.WriteLine.#ctor"></member>
    <member name="M:System.WorkflowModel.Activities.WriteLine.System#WorkflowModel#IActivityExtensionProvider#EnsureExtensions(System.WorkflowModel.IExtensionCollection)"></member>
    <member name="P:System.WorkflowModel.Activities.WriteLine.Text"></member>
    <member name="P:System.WorkflowModel.Activities.WriteLine.TextWriter"></member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.WorkflowServices.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.WorkflowServices</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.WorkflowServiceHost">
      <summary>Provides host for workflow-based services.</summary>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.IO.Stream,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a byte stream that contains the workflow definition, a byte stream that contains the workflow rules definition, and the base addresses of the service specified.</summary>
      <param name="workflowDefinition">
        <see cref="T:System.IO.Stream" /> that contains the workflow definition.</param>
      <param name="ruleDefinition">
        <see cref="T:System.IO.Stream" /> that contains the workflow rules definition.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.IO.Stream,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a byte stream that contains the workflow definition, a byte stream that contains the workflow rules definition, a type provider for custom activity types, and the base addresses of the service specified.</summary>
      <param name="workflowDefinition">
        <see cref="T:System.IO.Stream" /> that contains the workflow definition.</param>
      <param name="ruleDefinition">
        <see cref="T:System.IO.Stream" /> that contains the workflow rules definition.</param>
      <param name="typeProvider">A type provider that implements the <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> interface.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.IO.Stream,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a byte stream that contains the workflow definition and the base addresses of the service specified.</summary>
      <param name="workflowDefinition">
        <see cref="T:System.IO.Stream" /> that contains the workflow definition.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.String,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a path to the workflow definition, a path to the workflow rules definition, and the base addresses of the service specified.</summary>
      <param name="workflowDefinitionPath">A string that contains the path to the workflow definition file.</param>
      <param name="ruleDefinitionPath">A string that contains the path to the workflow rules definition file.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.String,System.Workflow.ComponentModel.Compiler.ITypeProvider,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a path to the workflow definition, a path to the workflow rules definition, a type provider for custom activity types, and the base addresses of the service specified.</summary>
      <param name="workflowDefinitionPath">A string that contains the path to the workflow definition file.</param>
      <param name="ruleDefinitionPath">A string that contains the path to the workflow rules definition file.</param>
      <param name="typeProvider">A type provider that implements the <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> interface.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.String,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a path to the workflow definition and the base addresses of the service specified.</summary>
      <param name="workflowDefinitionPath">A string that contains the path to the workflow definition file.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.#ctor(System.Type,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> class using a workflow type and the base addresses of the service specified.</summary>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow instance.</param>
      <param name="baseAddress">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)">
      <summary>Adds a service endpoint for the workflow service using the specified contract, binding, and endpoint address.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the workflow service.</returns>
      <param name="implementedContract">The <see cref="T:System.Type" /> of contract for the endpoint added.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</param>
      <param name="address">The address for the endpoint added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ServiceContractAttribute" /> not specified for <paramref name="implementedContract" />.</exception>
      <exception cref="T:System.InvalidOperationException">The workflow service does not implement <paramref name="implementedContract" />.</exception>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)">
      <summary>Adds a service endpoint to the workflow service with a specified contract, a binding, an endpoint address, and a URI on which the service listens. </summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the workflow service.</returns>
      <param name="implementedContract">The <see cref="T:System.Type" /> of contract for the endpoint added.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</param>
      <param name="address">The endpoint address for the service.</param>
      <param name="listenUri">The <see cref="T:System.Uri" /> on which the service endpoints can listen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The workflow service does not implement <paramref name="implementedContract" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ServiceContractAttribute" /> not specified for <paramref name="implementedContract" />.</exception>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)">
      <summary>Adds a service endpoint to the workflow service with a specified contract, binding, and URI that contains the endpoint address.</summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the workflow service.</returns>
      <param name="implementedContract">The <see cref="T:System.Type" /> of contract for the endpoint added.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</param>
      <param name="address">The <see cref="T:System.Uri" /> that contains the address for the endpoint added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ServiceContractAttribute" /> not specified for <paramref name="implementedContract" />.</exception>
      <exception cref="T:System.InvalidOperationException">The workflow service does not implement <paramref name="implementedContract" />.</exception>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)">
      <summary>Adds a service endpoint to the workflow service with a specified contract, a binding, a URI that contains the endpoint address, and a URI on which the service listens. </summary>
      <returns>The <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> added to the workflow service.</returns>
      <param name="implementedContract">The <see cref="T:System.Type" /> of contract for the endpoint added.</param>
      <param name="binding">The <see cref="T:System.ServiceModel.Channels.Binding" /> for the endpoint added.</param>
      <param name="address">The <see cref="T:System.Uri" /> that contains the address for the endpoint added.</param>
      <param name="listenUri">The <see cref="T:System.Uri" /> on which the service endpoints can listen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="implementedContract" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The workflow service does not implement <paramref name="implementedContract" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ServiceContractAttribute" /> not specified for <paramref name="implementedContract" />.</exception>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)">
      <summary>Creates a description of the workflow service.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.ServiceDescription" /> of the workflow service.</returns>
      <param name="implementedContracts">When this method returns, the <see cref="T:System.Collections.Generic.IDictionary`2" /> object contains the keyed-contracts of the hosted service that have been implemented. </param>
    </member>
    <member name="M:System.ServiceModel.WorkflowServiceHost.OnClosing">
      <summary>This method is called before the <see cref="T:System.ServiceModel.WorkflowServiceHost" /> is put into a closing state.</summary>
    </member>
    <member name="T:System.ServiceModel.Activation.WorkflowServiceHostFactory">
      <summary>Factory that provides instances of <see cref="T:System.ServiceModel.WorkflowServiceHost" /> in managed hosting environments where the host instance is created dynamically in response to incoming messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activation.WorkflowServiceHostFactory" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
      <summary>Creates a <see cref="T:System.ServiceModel.WorkflowServiceHost" /> from a string that contains either the file name of the workflow markup file or the type name of the workflow service type and the base address of the service specified.</summary>
      <returns>A <see cref="T:System.ServiceModel.ServiceHostBase" /> object associated with the workflow service. The default implementation returns a <see cref="T:System.ServiceModel.WorkflowServiceHost" /> object with the specified base addresses.</returns>
      <param name="constructorString">The file name of the workflow markup file that defines the workflow service or the type name of the workflow service type. </param>
      <param name="baseAddresses">An array of type <see cref="T:System.Uri" /> that contains the base addresses for the hosted service.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint">
      <summary>The <see cref="T:System.Activities.DurableInstancing.SqlWorkflowInstanceStore" /> adds a default control endpoint using this class if the &lt;workflowInstanceControl&gt; sub-element in the &lt;sqlWorkflowInstanceStoreBehavior&gt; element is not specified explicitly.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.AddService(System.Object)">
      <summary>Adds the specified service to the list of run-time services supported by the workflow run-time instance.</summary>
      <param name="service">The service object that must be added to the list of run-time services.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.GetService``1">
      <summary>Gets the service object that corresponds to the service type specified as a template parameter.</summary>
      <returns>The service object that corresponds to the service type.</returns>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.GetService(System.Type)">
      <summary>Gets the service object for the specified service type from the list of service objects.</summary>
      <returns>The service object for the specified service type.</returns>
      <param name="serviceType">The type of the service whose object must retrieved from the list of objects.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.OnGetInstanceId(System.Object[],System.ServiceModel.OperationContext)">
      <summary>Gets the instance identifier based on the inputs and operation context passed as parameters.</summary>
      <returns>The instance identifier.</returns>
      <param name="inputs">The input objects.</param>
      <param name="operationContext">The operation context information.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.OnResolveBookmark(System.Object[],System.ServiceModel.OperationContext,System.ServiceModel.Activities.WorkflowHostingResponseContext,System.Object@)">
      <summary>Resolves a bookmark.</summary>
      <returns>A bookmark.</returns>
      <param name="inputs">The input objects</param>
      <param name="operationContext">The operation context information.</param>
      <param name="responseContext">The response context information.</param>
      <param name="value">The value object.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint.RemoveService(System.Object)">
      <summary>Removes the specified service from the list of run-time services supported by the workflow run-time instance.</summary>
      <param name="service">The service object that must be removed from the list of run-time services supported.</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.ExtendedWorkflowRuntimeServiceElementCollection">
      <summary>Represents the collection of configuration elements that represents extended services to be added to the workflow runtime engine.</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtendedWorkflowRuntimeServiceElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.ExtendedWorkflowRuntimeServiceElementCollection" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtendedWorkflowRuntimeServiceElementCollection.Remove(System.String)">
      <summary>Removes the configuration element with the specified key from this collection.</summary>
      <param name="key">The key of the configuration element to be removed.</param>
    </member>
    <member name="M:System.ServiceModel.Configuration.ExtendedWorkflowRuntimeServiceElementCollection.Remove(System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement)">
      <summary>Removes the first occurrence of a specific configuration element from the collection.</summary>
      <param name="serviceSettings">The service configuration element to be removed.</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.PersistenceProviderElement">
      <summary>Represents a persistence service configuration element that specifies the type of the persistence provider implementation to use, as well as the time-out to use for persistence operations. Additional attributes that appear in this element are passed into the constructor for the specified persistence provider.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.PersistenceProviderElement" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.PersistenceProviderElement.BehaviorType">
      <summary>Gets the type of behavior. </summary>
      <returns>A <see cref="T:System.Type" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.CreateBehavior">
      <summary>Creates a custom behavior based on the settings of this configuration element.</summary>
      <returns>A custom behavior based on the settings of this configuration element.</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.IsModified">
      <summary>Indicates whether this configuration element has been modified since it was last saved or loaded.</summary>
      <returns>true if the element has been modified; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
      <summary>Gets a value that indicates whether an unknown attribute is encountered during deserialization.</summary>
      <returns>true when an unknown attribute is encountered while deserializing; otherwise, false.</returns>
      <param name="name">The name of the unrecognized attribute.</param>
      <param name="value">The value of the unrecognized attribute.</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.PersistenceProviderElement.PersistenceOperationTimeout">
      <summary>Gets or sets the time-out used for persistence operations. </summary>
      <returns>A <see cref="T:System.Timespan" /> that specifies the time-out used for persistence operations. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.PersistenceProviderElement.PersistenceProviderArguments">
      <summary>Retrieves additional attributes of this <see cref="T:System.ServiceModel.Configuration.PersistenceProviderElement" />.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" /> object that contains additional attributes of this <see cref="T:System.ServiceModel.Configuration.PersistenceProviderElement" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.PostDeserialize">
      <summary>Called after deserialization.</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)">
      <summary>Writes the contents of this configuration element to the configuration file.</summary>
      <returns>true if any data was actually serialized; otherwise, false. </returns>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> that is used to write to the configuration file.</param>
      <param name="serializeCollectionKey">true to serialize only the collection key properties; otherwise, false.</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.PersistenceProviderElement.Type">
      <summary>Gets or sets the type of the persistence provider to be used by the service.</summary>
      <returns>A <see cref="T:System.Type" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.PersistenceProviderElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
      <summary>Modifies this configuration element object to remove all values that should not be saved.</summary>
      <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement" /> at the current level containing a merged view of the properties.</param>
      <param name="parentElement">The parent <see cref="T:System.Configuration.ConfigurationElement" />, or null if this is the top level.</param>
      <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode" /> that determines which property values to include.</param>
    </member>
    <member name="T:System.ServiceModel.Configuration.WorkflowRuntimeElement">
      <summary>Represents a configuration element that specifies settings for an instance of <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> for hosting workflow-based  services.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.WorkflowRuntimeElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.WorkflowRuntimeElement" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.BehaviorType">
      <summary>Gets the type of this behavior element.</summary>
      <returns>A <see cref="T:System.Type" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.CachedInstanceExpiration">
      <summary>Gets or sets a value that specifies the time that a cached instance will expire.</summary>
      <returns>A <see cref="T:System.Timespan" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.CommonParameters">
      <summary>Gets the collection of common parameters used by services.</summary>
      <returns>A NameValueConfigurationCollection that contains common parameters used by services. The default is null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Configuration.WorkflowRuntimeElement.CreateBehavior">
      <summary>Creates a custom behavior based on the settings of this configuration element.</summary>
      <returns>A custom behavior based on the settings of this configuration element.</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.EnablePerformanceCounters">
      <summary>Gets or sets whether performance counters are enabled.</summary>
      <returns>true if performance counters are enabled; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.Name">
      <summary>Gets or sets the name of the workflow runtime engine.</summary>
      <returns>A string that contains the name of the workflow runtime engine.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.Properties">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> instance that contains a collection of <see cref="T:System.Configuration.ConfigurationProperty" /> objects that can be attributes or <see cref="T:System.Configuration.ConfigurationElement" /> objects of this configuration element.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> instance that contains a collection of <see cref="T:System.Configuration.ConfigurationProperty" /> objects that can be attributes or <see cref="T:System.Configuration.ConfigurationElement" /> objects of this configuration element.</returns>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.Services">
      <summary>Gets the collection of services that will be added to the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> engine.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection" /> that contains the collection of services that will be added to the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> engine.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.ServiceModel.Configuration.WorkflowRuntimeElement.ValidateOnCreate">
      <summary>Gets or sets a value that indicates whether validation will occur on creation of the workflow instance. </summary>
      <returns>true if validation will occur on creation; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.ServiceModel.Description.DurableOperationAttribute">
      <summary>Specifies the local execution behavior of a durable service method.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.DurableOperationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.DurableOperationAttribute" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.DurableOperationAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.DurableOperationAttribute" />.</summary>
      <param name="operationDescription">Not implemented.</param>
      <param name="bindingParameters">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Description.DurableOperationAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.DurableOperationAttribute" />.</summary>
      <param name="operationDescription">Not implemented.</param>
      <param name="clientOperation">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Description.DurableOperationAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
      <summary>Implements the service-side behavior of the operation.</summary>
      <param name="operationDescription">The operation description modified to support <see cref="T:System.ServiceModel.Description.DurableOperationAttribute" /> properties.</param>
      <param name="dispatchOperation">The extensibility point to insert custom service modifications for this operation.</param>
    </member>
    <member name="P:System.ServiceModel.Description.DurableOperationAttribute.CanCreateInstance">
      <summary>Gets or sets a value that indicates whether a new service instance can be created if an activation message is received on this operation. The dispatcher considers messages without an attached instance ID to be activation messages.</summary>
      <returns>true if a new service instance can be created; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.DurableOperationAttribute.CompletesInstance">
      <summary>Gets or sets a value that indicates whether the service instance will be unloaded from memory and deleted from persistence once the operation has finished executing.</summary>
      <returns>true if the instance will be unloaded after the operation has finished executing; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Description.DurableOperationAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.DurableOperationAttribute" />.</summary>
      <param name="operationDescription">Not implemented.</param>
    </member>
    <member name="T:System.ServiceModel.Description.DurableServiceAttribute">
      <summary>Specifies the internal execution behavior of a durable service contract implementation.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.DurableServiceAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.DurableServiceAttribute" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.DurableServiceAttribute.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.DurableServiceAttribute" />.</summary>
      <param name="serviceDescription">Not implemented.</param>
      <param name="serviceHostBase">Not implemented.</param>
      <param name="endpoints">Not implemented.</param>
      <param name="bindingParameters">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Description.DurableServiceAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Customizes the service runtime to support durable service behavior properties, such as specifying a <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> for the service.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="P:System.ServiceModel.Description.DurableServiceAttribute.SaveStateInOperationTransaction">
      <summary>Gets or sets a value that indicates whether the service instance state is persisted to the <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> using the same transaction under which the operation is run.</summary>
      <returns>true if the service instance state is persisted using the same transaction; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.DurableServiceAttribute.UnknownExceptionAction">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Description.UnknownExceptionAction" /> enumeration value associated with the durable service.</summary>
      <returns>An <see cref="T:System.ServiceModel.Description.UnknownExceptionAction" /> enumeration value.</returns>
    </member>
    <member name="M:System.ServiceModel.Description.DurableServiceAttribute.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Verifies that all durable operations on the service are set up correctly.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="T:System.ServiceModel.Description.PersistenceProviderBehavior">
      <summary>Defines the behavior for a <see cref="T:System.ServiceModel.Persistence.PersistenceProviderFactory" /> associated with a <see cref="T:System.ServiceModel.WorkflowServiceHost" />. </summary>
    </member>
    <member name="M:System.ServiceModel.Description.PersistenceProviderBehavior.#ctor(System.ServiceModel.Persistence.PersistenceProviderFactory)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.PersistenceProviderBehavior" /> class.</summary>
      <param name="providerFactory">The <see cref="T:System.ServiceModel.Persistence.PersistenceProviderFactory" /> associated with the behavior object.</param>
    </member>
    <member name="M:System.ServiceModel.Description.PersistenceProviderBehavior.#ctor(System.ServiceModel.Persistence.PersistenceProviderFactory,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.PersistenceProviderBehavior" /> class.</summary>
      <param name="providerFactory">The <see cref="T:System.ServiceModel.Persistence.PersistenceProviderFactory" /> associated with the behavior object.</param>
      <param name="persistenceOperationTimeout">The time-out after which persistence operations performed by persistence providers configured with this object abort.</param>
    </member>
    <member name="M:System.ServiceModel.Description.PersistenceProviderBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.PersistenceProviderBehavior" />.</summary>
      <param name="serviceDescription">Not implemented.</param>
      <param name="serviceHostBase">Not implemented.</param>
      <param name="endpoints">Not implemented.</param>
      <param name="bindingParameters">Not implemented.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.ServiceModel.Description.PersistenceProviderBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.PersistenceProviderBehavior" />.</summary>
      <param name="serviceDescription">Not implemented.</param>
      <param name="serviceHostBase">Not implemented.</param>
    </member>
    <member name="P:System.ServiceModel.Description.PersistenceProviderBehavior.PersistenceOperationTimeout">
      <summary>The timeout after which persistence operations performed by persistence providers configured with this object abort.</summary>
      <returns>The time-out.</returns>
    </member>
    <member name="P:System.ServiceModel.Description.PersistenceProviderBehavior.PersistenceProviderFactory">
      <summary>The <see cref="T:System.ServiceModel.Persistence.PersistenceProviderFactory" /> associated with the behavior object.</summary>
      <returns>The provider factory.</returns>
    </member>
    <member name="M:System.ServiceModel.Description.PersistenceProviderBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.PersistenceProviderBehavior" />.</summary>
      <param name="serviceDescription">Not implemented.</param>
      <param name="serviceHostBase">Not implemented.</param>
    </member>
    <member name="T:System.ServiceModel.Description.UnknownExceptionAction">
      <summary>Specifies how a durable service will handle an unknown exception.</summary>
    </member>
    <member name="F:System.ServiceModel.Description.UnknownExceptionAction.TerminateInstance">
      <summary>The service will close all channels and remove its state information from its persistence store.</summary>
    </member>
    <member name="F:System.ServiceModel.Description.UnknownExceptionAction.AbortInstance">
      <summary>The service will abruptly stop and leave existing state information in its persistence store. Any changes to instance state during the operation which threw the unknown exception will be lost.</summary>
    </member>
    <member name="T:System.ServiceModel.Description.WorkflowRuntimeBehavior">
      <summary>Defines the behavior for the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> associated with a <see cref="T:System.ServiceModel.WorkflowServiceHost" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.WorkflowRuntimeBehavior.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Description.WorkflowRuntimeBehavior" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Description.WorkflowRuntimeBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Not implemented in <see cref="T:System.ServiceModel.Description.WorkflowRuntimeBehavior" />.</summary>
      <param name="serviceDescription">Not implemented.</param>
      <param name="serviceHostBase">Not implemented.</param>
      <param name="endpoints">Not implemented.</param>
      <param name="bindingParameters">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Description.WorkflowRuntimeBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Configures the workflow service to support the workflow run-time behavior. </summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="P:System.ServiceModel.Description.WorkflowRuntimeBehavior.CachedInstanceExpiration">
      <summary>Gets or sets a value that indicates how long a workflow instance stays in-memory in the idle state before it is forcibly removed from memory.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object indicating how long a workflow instance stays in-memory in the idle state before it is forcibly removed from memory.</returns>
    </member>
    <member name="M:System.ServiceModel.Description.WorkflowRuntimeBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Verifies the scheduling service used for workflow services has been added to the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> object and that the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> object has not started before the call to <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.Open" />.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
      <exception cref="T:System.InvalidOperationException">The wrong <see cref="T:System.Workflow.Runtime.Hosting.WorkflowSchedulerService" /> is registered.</exception>
    </member>
    <member name="P:System.ServiceModel.Description.WorkflowRuntimeBehavior.WorkflowRuntime">
      <summary>Gets the <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> associated with a <see cref="T:System.ServiceModel.WorkflowServiceHost" /> instance.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> object.</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.DurableOperationContext">
      <summary>Provides a set of static methods to gain access to related information and functionality.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.DurableOperationContext.AbortInstance">
      <summary>Purges the current durable service instance from memory after the operation has completed.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.DurableOperationContext.CompleteInstance">
      <summary>Unloads the durable service instance from memory and deletes it from persistence after the operation has completed.</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.DurableOperationContext.InstanceId">
      <summary>Gets the service ID of this service instance.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the ID of the service.</returns>
    </member>
    <member name="T:System.ServiceModel.Persistence.InstanceLockException">
      <summary>This exception is intended for use by classes that inherit from <see cref="T:System.ServiceModel.Persistence.LockingPersistenceProvider" /> when the operation cannot be performed because of the state of the instance lock.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="id">The unique identifier of the exception instance.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="id">The unique identifier of the exception instance.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> instance that caused the current exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.Guid,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="id">The unique identifier of the exception instance.</param>
      <param name="message">The message that describes the current exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.Guid,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="id">The unique identifier of the exception instance.</param>
      <param name="message">The message that describes the current exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> instance that caused the current exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="message">The message that describes the current exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceLockException" /> class.</summary>
      <param name="message">The message that describes the current exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> instance that caused the current exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceLockException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.ServiceModel.Persistence.InstanceLockException.InstanceId">
      <summary>The unique identifier of the exception instance.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the unique identifier of the exception instance.</returns>
    </member>
    <member name="T:System.ServiceModel.Persistence.InstanceNotFoundException">
      <summary>This exception is thrown under the following circumstances: an operation is performed on a durable service instance that has been marked for completion, or a persistence provider created by a <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" /> attempts to lock, unlock, or otherwise process state data that is not found in the database.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class.</summary>
      <param name="id">The unique identifier associated with this instance.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.Guid,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class.</summary>
      <param name="id">The unique identifier associated with this instance.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" />.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.Guid,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class </summary>
      <param name="id">The unique identifier associated with this instance.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.Guid,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class </summary>
      <param name="id">The unique identifier associated with this instance.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" />.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />  that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />  that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the <see cref="T:System.ServiceModel.Persistence.InstanceNotFoundException" />.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.InstanceNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:system.runtime.serialization.SerializationInfo" /> with information about the exception, including the exception <see cref="P:System.ServiceModel.Persistence.InstanceNotFoundException.InstanceId" />.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />  that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />  that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.ServiceModel.Persistence.InstanceNotFoundException.InstanceId">
      <summary>The unique identifier associated with this instance.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the unique identifier of the exception instance.</returns>
    </member>
    <member name="T:System.ServiceModel.Persistence.LockingPersistenceProvider">
      <summary>The abstract base class from which all durable service persistence providers that implement locking are derived.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.#ctor(System.Guid)">
      <summary>When implemented in a derived class, creates a new instance of the <see cref="T:System.ServiceModel.Persistence.LockingPersistenceProvider" /> class, configured with the specified identity value.</summary>
      <param name="id">The unique identifier to be associated with this persistence provider instance.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to create instance state information in the persistence store using the parameters. This method does not unlock the instance after saving the state information.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="instance">The instance whose state information is saved into the persistence store.</param>
      <param name="timeout">The interval in which the operation must be completed without timing out.</param>
      <param name="callback">The delegate that receives the notification when the operation completes.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to create instance state information in the persistence store using the parameters. This method unlocks the instance after saving the instance state if the value of the <paramref name="unlockInstance" /> parameter is true.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="instance">The instance whose state information is saved into the persistence store.</param>
      <param name="timeout">The interval in which the operation must be completed without timing out.</param>
      <param name="unlockInstance">true if the instance must be unlocked in the persistence store; otherwise false.</param>
      <param name="callback">The delegate that receives the notification when the operation completes.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to load an instance based on state information in the persistence store using the parameters. This method does not lock the instance. </summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="timeout">The interval in which the operation must be completed without timing out.</param>
      <param name="callback">The delegate that receives the notification when the operation completes.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginLoad(System.TimeSpan,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to load an instance based on state information in the persistence store using the parameters. This method locks the instance after loading the instance state if the value of the <paramref name="lockInstance" /> parameter is true.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="timeout">An interval in which the operation must be completed before timing out.</param>
      <param name="lockInstance">true if the instance must be locked; otherwise false.</param>
      <param name="callback">The delegate that receives the notification when the operation completes.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the LoadIfChanged phase. The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store and the state data in the persistence store has been changed. This method call does not lock the instance in the persistence store.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this operation.</param>
      <param name="instanceToken">The token returned by a previous Create or Update method that represents the current state held by the caller.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the LoadIfChanged phase. The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store and the state data in the persistence store has been changed. This method call lets you specify whether you want to lock the instance in the persistence store.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this operation.</param>
      <param name="instanceToken">The token returned by a previous Create or Update method that represents the current state held by the caller.</param>
      <param name="lockInstance">true if the instance is locked in the persistence store; otherwise false.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginUnlock(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to unlock an instance in the persistence store.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="timeout">An interval in which the operation must be completed before timing out.</param>
      <param name="callback">The delegate that receives the notification when the operation completes.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to update instance state information in the persistence store using the parameters passed. This operation does not unlock the instance in the instance store.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="instance">The instance whose state information is being updated in the persistence store.</param>
      <param name="timeout">The interval in which the operation must complete without timing out.</param>
      <param name="callback">The delegate that receives the notification when the operation is completed.</param>
      <param name="state">The state information about the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to update instance state information in the persistence store using the parameters passed. This operation locks the instance in the persistence store if the value of the <paramref name="unlockInstance" /> parameter is true.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="instance">The instance whose state information is being updated in the persistence store.</param>
      <param name="timeout">The interval in which the operation must complete without timing out.</param>
      <param name="unlockInstance">true if the instance must be locked after the instance state is updated in the persistence store; otherwise false.</param>
      <param name="callback">The delegate that receives the notification when the operation completes.</param>
      <param name="state">The state information about the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Create(System.Object,System.TimeSpan)">
      <summary>Creates instance state information in the persistence store using parameters passed into the method. This method does not unlock the instance in the persistence store after saving the instance state.</summary>
      <returns>The state information.</returns>
      <param name="instance">The instance object whose state information must be saved into the persistence store.</param>
      <param name="timeout">The interval in which the operation must complete before timing out.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Create(System.Object,System.TimeSpan,System.Boolean)">
      <summary>This method creates instance state information in the persistence store using parameters passed into the method. The method unlocks the instance in the instance store if the value of the <paramref name="unlockInstance" /> parameter is true.</summary>
      <returns>The state information.</returns>
      <param name="instance">The instance object whose state information is saved into the persistence store.</param>
      <param name="timeout">The interval within which the operation must complete before timing out.</param>
      <param name="unlockInstance">true if the instance must be unlocked in the persistence store; otherwise false.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.EndUnlock(System.IAsyncResult)">
      <summary>Ends the asynchronous operation to unlock an instance in the persistence store.</summary>
      <param name="result">The result returned by the unlock operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Load(System.TimeSpan)">
      <summary>Loads service state information from the persistence store without locking the instance.</summary>
      <returns>The service state information.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Load(System.TimeSpan,System.Boolean)">
      <summary>Loads state information from the persistence store after locking the instance.</summary>
      <returns>The state information.</returns>
      <param name="timeout">The period after which the persistence provider aborts this operation.</param>
      <param name="lockInstance">true if the instance should be locked; otherwise false.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Boolean,System.Object@)">
      <summary>Loads the instance state information from the persistence store if the state information has been changed since the last time the information was loaded by the caller. This method also lets the caller specify whether to lock the instance in the persistence store.</summary>
      <returns>true if the instance should be locked in the persistence store at the end of this operation; otherwise false.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this operation.</param>
      <param name="instanceToken">The token returned by the previous Create or Update method calls, which represents the current state held by the caller.</param>
      <param name="lockInstance">true if the instance should be locked in the persistence store at the end of this operation; otherwise false.</param>
      <param name="instance">The instance state information.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
      <summary>Loads the instance state information from the persistence store if the state information has been changed since the last time the information was loaded by the caller. This method does not lock the instance in the persistence store.</summary>
      <returns>true if the instance should be locked in the persistence store at the end of this operation; otherwise false.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this operation.</param>
      <param name="instanceToken">The token returned by the previous Create or Update method calls, which represents the current state held by the caller.</param>
      <param name="instance">The actual instance state information.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Unlock(System.TimeSpan)">
      <summary>Unlocks the instance whose ID is specified when constructing the <see cref="T:System.ServiceModel.Persistence.LockingPersistenceProvider" /> object in the persistence store.</summary>
      <param name="timeout">The time period after which the persistence provider aborts the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Update(System.Object,System.TimeSpan)">
      <summary>When implemented in a derived class, updates the instance state information in the persistence store. This method does not unlock the instance after updating the instance state information in the persistence store.</summary>
      <returns>The instance state information.</returns>
      <param name="instance">The instance state information.</param>
      <param name="timeout">The time period after which the persistence provider aborts the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.LockingPersistenceProvider.Update(System.Object,System.TimeSpan,System.Boolean)">
      <summary>When implemented in a derived class, updates the instance state information in the persistence store. This method does not unlock the instance after updating the instance state information in the persistence store.</summary>
      <returns>The instance state information.</returns>
      <param name="instance">The instance state information.</param>
      <param name="timeout">The time period after which the persistence provider aborts the operation.</param>
      <param name="unlockInstance">true if the instance is unlocked after the instance state information is updated; otherwise false.</param>
    </member>
    <member name="T:System.ServiceModel.Persistence.PersistenceException">
      <summary>This exception is thrown by a <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" /> when general connectivity errors are encountered. </summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.PersistenceException" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.PersistenceException" /> class.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.PersistenceException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.PersistenceException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> that caused the <see cref="T:System.ServiceModel.Persistence.PersistenceException" />. </param>
    </member>
    <member name="T:System.ServiceModel.Persistence.PersistenceProvider">
      <summary>The abstract base class from which all durable service persistence providers are derived. </summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> class.</summary>
      <param name="id">The unique identifier of the service state data being saved.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the Create phase. The Create phase occurs when service instance records are first created in the persistence store.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</returns>
      <param name="instance">The actual instance state.</param>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the Delete phase. The Delete phase occurs when service state data is permanently deleted from the persistence store.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</returns>
      <param name="instance">The actual instance state.</param>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the Load phase. The Load phase occurs when state data is loaded into the persistence provider from the persistence store.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the LoadIfChanged phase. The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store, and the state data in the persistence store has been changed.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" /> asynchronous method call.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="instanceToken">The token returned by a previous <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /> or <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /> that represents the current state held by the caller.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>When implemented in a derived class, represents the beginning of the Update phase. The Update phase occurs when service state data is updated in the persistence store.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call. </returns>
      <param name="instance">The actual instance state.</param>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)">
      <summary>When implemented in a derived class, creates a service state record in the persistence store.</summary>
      <returns>The instance token corresponding to the state just saved. This can be passed to <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /> to determine whether the state in the persistence store differs from the state when Create was called.</returns>
      <param name="instance">The actual instance state.</param>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)">
      <summary>When implemented in a derived class, permanently deletes service state information from the persistence store.</summary>
      <param name="instance">The actual instance state.</param>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)">
      <summary>When implemented in a derived class, represents the end of the Create phase. The Create phase occurs when service state records are first created in the persistence store.</summary>
      <returns>The instance token corresponding to the state just saved. This can be passed to <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /> to determine whether the state in the persistence store differs from the state when Create was called.</returns>
      <param name="result">A reference to the result of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)">
      <summary>When implemented in a derived class, represents the end of the Delete phase. The Delete phase occurs when state data is permanently deleted from the persistence store.</summary>
      <param name="result">A reference to the result of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)">
      <summary>When implemented in a derived class, represents the end of the Load phase. The Load phase occurs when state data is loaded into the persistence provider from the persistence store.</summary>
      <returns>The service state information.</returns>
      <param name="result">A reference to the result of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)">
      <summary>When implemented in a derived class, represents the end of the LoadIfChanged phase. The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store, and the state data in the persistence store has been changed.</summary>
      <returns>true if the instance out parameter has been set with the latest copy from the persistence store; false if the locally cached state is already up-to-date.</returns>
      <param name="result">A reference to the result of the operation.</param>
      <param name="instance">The actual instance state.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)">
      <summary>Represents the end of the Update phase. The Update phase occurs when service state records are updated in the persistence store.</summary>
      <returns>The instance token corresponding to the state just saved. This can be passed to <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /> to determine whether the state in the persistence store differs from the state when Create was called.</returns>
      <param name="result">A reference to the result of the operation.</param>
    </member>
    <member name="P:System.ServiceModel.Persistence.PersistenceProvider.Id">
      <summary>Represents the <see cref="T:System.Guid" /> associated with this instance.</summary>
      <returns>The GUID associated with this instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)">
      <summary>When implemented in a derived class, loads service state information from the persistence store.</summary>
      <returns>The loaded instance state.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)">
      <summary>When implemented in a derived class, loads service state information from the persistence store if that data has been changed.</summary>
      <returns>true if the <paramref name="instance" />out parameter has been set with the latest copy from the persistence store; false if the locally cached state is already up to date.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="instanceToken">The token returned by a previous <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /> or <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" />, which represents the current state held by the caller.</param>
      <param name="instance">The actual instance state.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)">
      <summary>When implemented in a derived class, updates service state records in the persistence store.</summary>
      <returns>The instance token corresponding to the state just saved. This can be passed to <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /> to determine whether the state in the persistence store differs from the state when Create was called.</returns>
      <param name="instance">The actual instance state.</param>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="T:System.ServiceModel.Persistence.PersistenceProviderFactory">
      <summary>The abstract class from which all durable service persistence providers must inherit.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProviderFactory.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.PersistenceProviderFactory.CreateProvider(System.Guid)">
      <summary>When implemented in a derived class, initializes a new <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> object.</returns>
      <param name="id">The unique identifier of the persistence provider being created.</param>
    </member>
    <member name="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory">
      <summary>A system-provided <see cref="T:System.ServiceModel.Persistence.PersistenceProviderFactory" /> implementation used to create a <see cref="T:System.ServiceModel.Persistence.LockingPersistenceProvider" /> instance that uses a SQL database to store persisted service state data.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" /> class, configured with the specified parameter collection.</summary>
      <param name="parameters">The collection of parameters used by the new persistence provider factory. Valid parameters include lockTimeout, connectionStringName, and serializeAsText.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" /> class, configured with the specified connection string.</summary>
      <param name="connectionString">The connection parameters for the new persistence provider instance.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" /> class, configured with the specified connection string and serializeAsText parameters.</summary>
      <param name="connectionString">The connection parameters for the new persistence provider instance.</param>
      <param name="serializeAsText">Specifies whether data is serialized as text rather than binary.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.#ctor(System.String,System.Boolean,System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.SqlPersistenceProviderFactory" /> class, configured with the specified connection string, serializeAsText, and lockTimeout parameters.</summary>
      <param name="connectionString">The connection parameters for the new persistence provider factory instance.</param>
      <param name="serializeAsText">Specifies whether data is serialized as text rather than binary.</param>
      <param name="lockTimeout">The time-out for lock ownership. Locked instances are automatically unlocked after this time period. A time-out of TimeSpan.Zero specifies that no locking is used.</param>
    </member>
    <member name="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.ConnectionString">
      <summary>Gets the connection parameters for persistence provider instances created with this factory.</summary>
      <returns>The connection parameters for persistence provider instances created with this factory.</returns>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.CreateProvider(System.Guid)">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Persistence.LockingPersistenceProvider" /> instance that uses a SQL database as its persistence store.</summary>
      <returns>A newly-created <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" />.</returns>
      <param name="id">The unique identifier of the persistence provider being created.</param>
    </member>
    <member name="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.DefaultCloseTimeout">
      <summary>Gets the default time-out value used when persistence providers created with this factory are closed.</summary>
      <returns>The default time-out value.</returns>
    </member>
    <member name="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.DefaultOpenTimeout">
      <summary>Gets the default time-out value used when persistence provider is opened.</summary>
      <returns>The default time-out value.</returns>
    </member>
    <member name="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.LockTimeout">
      <summary>The time-out for lock ownership used by persistence provider instances created by this instance. Locked instances are automatically unlocked after this time period. </summary>
      <returns>The time-out value for lock ownership.</returns>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnAbort">
      <summary>Represents the Abort phase.</summary>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the Close phase.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Represents the beginning of the Open phase.</summary>
      <returns>The state of the <see cref="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</returns>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other operations.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnClose(System.TimeSpan)">
      <summary>Represents the Close phase.</summary>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnEndClose(System.IAsyncResult)">
      <summary>Represents the end of the Close phase.</summary>
      <param name="result">A reference to the result of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnEndOpen(System.IAsyncResult)">
      <summary>Represents the end of the Open phase.</summary>
      <param name="result">A reference to the result of the operation.</param>
    </member>
    <member name="M:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.OnOpen(System.TimeSpan)">
      <summary>Represents the Open phase.</summary>
      <param name="timeout">The time period after which the persistence provider aborts this attempt.</param>
    </member>
    <member name="P:System.ServiceModel.Persistence.SqlPersistenceProviderFactory.SerializeAsText">
      <summary>Specifies whether data is serialized as text rather than binary in persistence providers created with this factory.</summary>
      <returns>true if the service information is serialized as text; otherwise, false.</returns>
    </member>
    <member name="T:System.Workflow.Activities.ChannelToken">
      <summary>Used by a <see cref="T:System.Workflow.Activities.SendActivity" /> to associate itself with a client-side channel.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ChannelToken.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ChannelToken" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.ChannelToken.EndpointName">
      <summary>Gets or sets the custom address used to communicate with a service.</summary>
      <returns>A string representing the custom address used to communicate with a service.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ChannelToken.Name">
      <summary>The name of this <see cref="T:System.Workflow.Activities.ChannelToken" /> instance.</summary>
      <returns>A string representing the name of this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ChannelToken.OwnerActivityName">
      <summary>The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this instance.</summary>
      <returns>A string representing the name of the activity associated with this instance.</returns>
    </member>
    <member name="T:System.Workflow.Activities.ContextToken">
      <summary>Represents a token that can be used to specify the context that should be used to correlate the exchange between a <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity and the client that the activity is communicating with.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ContextToken.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ContextToken" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ContextToken.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ContextToken" /> class.</summary>
      <param name="name">The name of the new instance.</param>
    </member>
    <member name="P:System.Workflow.Activities.ContextToken.Name">
      <summary>Gets or sets the name of this instance.</summary>
      <returns>A string that represents the name of this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ContextToken.OwnerActivityName">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this context token.</summary>
      <returns>A string that represents the name of the activity associated with this context token.</returns>
    </member>
    <member name="F:System.Workflow.Activities.ContextToken.RootContextName">
      <summary>A constant string that represents the root context. The value of this string is "(RootContext)".</summary>
    </member>
    <member name="T:System.Workflow.Activities.OperationInfo">
      <summary>Represents the information for a contract operation defined in a workflow service.</summary>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationInfo" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfo.Clone">
      <summary>Creates a copy of the object.</summary>
      <returns>The copy of the <see cref="T:System.Workflow.Activities.OperationInfo" /> object.</returns>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfo.ContractName">
      <summary>Gets or sets the full name of the contract that defines this operation.</summary>
      <returns>A string that represents the full name of the contract that defines the operation.</returns>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfo.Equals(System.Object)">
      <summary>Determines whether two object instances are equal.</summary>
      <returns>true to indicate that the current <see cref="T:System.Workflow.Activities.OperationInfo" /> and <paramref name="obj" /> are equal; otherwise, false.</returns>
      <param name="obj">The object to compare with the current <see cref="T:System.Workflow.Activities.OperationInfo" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfo.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Workflow.Activities.OperationInfo" />. </summary>
      <returns>A hash code for this instance.</returns>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfo.HasProtectionLevel">
      <summary>Gets information on whether or not the operation has a defined <see cref="T:System.Net.Security.ProtectionLevel" />. </summary>
      <returns>A Boolean value indicating whether or not the operation has a <see cref="T:System.Net.Security.ProtectionLevel" /> associated with it.</returns>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfo.IsOneWay">
      <summary>Gets or sets information on the operation to specify that communication between the service and a client is one-way.</summary>
      <returns>true if the operation supports one-way communication; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfo.Parameters">
      <summary>Gets a collection of <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> objects that represents the parameter definitions used by the operation.</summary>
      <returns>A collection of <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> objects that represents the parameter definitions used by the operation when called by a client.</returns>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfo.ProtectionLevel">
      <summary>Gets or sets the <see cref="T:System.Net.Security.ProtectionLevel" /> of an operation.</summary>
      <returns>A <see cref="T:System.Net.Security.ProtectionLevel" /> object used by the operation.</returns>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfo.ToString">
      <summary>Provides a string that represents this instance.</summary>
      <returns>A string that represents this instance.</returns>
    </member>
    <member name="T:System.Workflow.Activities.OperationInfoBase">
      <summary>The base class used for storing information for a contract operation defined in a workflow service.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationInfoBase" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.Clone">
      <summary>When implemented in a derived class, creates a deep copy of the <see cref="T:System.Workflow.Activities.OperationInfoBase" /> instance.</summary>
      <returns>The copy of the <see cref="T:System.Workflow.Activities.OperationInfoBase" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.Equals(System.Object)">
      <summary>Determines if the specified <see cref="T:System.object" /> is equal to the current instance.</summary>
      <returns>True if <paramref name="obj" /> is equal, otherwise False.</returns>
      <param name="obj">The object to compare with the current instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.GetContractFullName(System.IServiceProvider)">
      <summary>Returns the full name of the contract that implements this operation. </summary>
      <returns>A string representing the full name of the contract that implements this operation.</returns>
      <param name="provider">The service provider associated with this operation.</param>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.GetContractType(System.IServiceProvider)">
      <summary>Returns the type of the contract associated with this operation.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the type of the contract associated with this operation.</returns>
      <param name="provider">The service provider associated with this operation.</param>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.GetHashCode">
      <summary>Generates a number corresponding to the value of the object to support the use of a hash table.</summary>
      <returns>An <see cref="T:System.Int32" /> representing the hash code value of the object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.GetIsOneWay(System.IServiceProvider)">
      <summary>true if this operation is one-way, false if it is two-way.</summary>
      <returns>true if this operation is one-way, false if it is two-way.</returns>
      <param name="provider">The service provider associated with this operation.  </param>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.GetMethodInfo(System.IServiceProvider)">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> associated with the operation.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object containing details of the operation.</returns>
      <param name="provider">The service provider associated with this operation.  </param>
    </member>
    <member name="M:System.Workflow.Activities.OperationInfoBase.GetParameters(System.IServiceProvider)">
      <summary>Gets the collection of parameters associated with the operation.</summary>
      <returns>An <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" /> object containing details about the parameters of the operation.</returns>
      <param name="provider">The service provider associated with this operation.</param>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfoBase.Name">
      <summary>When implemented in a derived class, gets or sets the name associated with this instance.</summary>
      <returns>A string representing the object's name.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfoBase.PrincipalPermissionName">
      <summary>Gets or sets the user name associated with the security context of the operation.</summary>
      <returns>A string representing the user name associated with the security context of the operation.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationInfoBase.PrincipalPermissionRole">
      <summary>Gets or sets the user role (e.g. Administrator) associated with the security context of the operation.</summary>
      <returns>A string representing the user role associated with the security context of the operation.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.OperationParameterInfo">
      <summary>Contains information about an operation parameter.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfo.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> class.</summary>
      <param name="parameterName">Represents the parameter name.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.Attributes">
      <summary>Gets or sets the attributes of the associated operation parameter.</summary>
      <returns>The <see cref="T:System.Reflection.ParameterAttributes" /> of the associated operation parameter.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.OperationParameterInfo.AttributesProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.OperationParameterInfo.Attributes" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfo.Clone">
      <summary>Creates a shallow copy of the <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> instance.</summary>
      <returns>The copy of the object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfo.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.Object" /> instances are equal.</summary>
      <returns>true if <paramref name="obj" /> is equal, otherwise false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfo.GetHashCode">
      <summary>Generates a number corresponding to the value of the object to support the use of a hash table.</summary>
      <returns>An <see cref="T:System.Int32" /> representing the hash code value of the object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.IsIn">
      <summary>true if the associated operation parameter is an In parameter; otherwise false.</summary>
      <returns>true if the associated operation parameter is an In parameter; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.IsLcid">
      <summary>true if the associated operation parameter is a locale identifier; otherwise false.</summary>
      <returns>true if the associated operation parameter is a locale identifier; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.IsOptional">
      <summary>true if the associated operation parameter is an optional parameter; otherwise false.</summary>
      <returns>true if the associated operation parameter is an optional parameter; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.IsOut">
      <summary>true if the associated operation parameter is an Out parameter; otherwise false.</summary>
      <returns>true if the associated operation parameter is an Out parameter; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.IsRetval">
      <summary>true if the associated operation parameter is the return value for the operation; otherwise false.</summary>
      <returns>true if the associated operation parameter is the return value for the operation; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.Name">
      <summary>Gets or sets the name of the associated operation parameter.</summary>
      <returns>A string representing the name of the associated operation parameter.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.OperationParameterInfo.NameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.OperationParameterInfo.Name" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.ParameterType">
      <summary>Gets or sets the type of the associated operation parameter.</summary>
      <returns>A <see cref="T:System.Type" /> object representing the type of the associated operation parameter.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.OperationParameterInfo.ParameterTypeProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.OperationParameterInfo.ParameterType" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfo.Position">
      <summary>Gets or sets the signature position of the associated operation parameter.</summary>
      <returns>An <see cref="T:System.Int32" /> representing the signature position of the associated operation parameter.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.Activities.OperationParameterInfo.PositionProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.OperationParameterInfo.Position" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Activities.OperationParameterInfoCollection">
      <summary>A collection of <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.#ctor(System.Workflow.Activities.OperationInfoBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" /> class.</summary>
      <param name="owner">The <see cref="T:System.Workflow.Activities.OperationInfoBase" /> that uses this collection to define parameter information for the service operation that it represents.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.Add(System.Workflow.Activities.OperationParameterInfo)">
      <summary>Adds an <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> to the end of the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <param name="item">The <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> to be added.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.Clear">
      <summary>Removes all elements from the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.Contains(System.Workflow.Activities.OperationParameterInfo)">
      <summary>Determines whether an element is in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />, otherwise false.</returns>
      <param name="item">The item to search for. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <returns>An <see cref="T:System.Int32" /> representing the number of elements contained in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can iterate through the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.IndexOf(System.Workflow.Activities.OperationParameterInfo)">
      <summary>Returns the zero-based index of the first occurrence of an <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> object in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <returns>An <see cref="T:System.Int32" /> representing the zero-based index of the first occurrence of an <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> object in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</returns>
      <param name="item">The <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> to locate in the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.Insert(System.Int32,System.Workflow.Activities.OperationParameterInfo)">
      <summary>Inserts an <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> into the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> to insert.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.  In C#, this property is the indexer for the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" /> class.</summary>
      <returns>An <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> object representing the element at the specified index.</returns>
      <param name="index">The array index of the requested element.</param>
    </member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.Item(System.String)">
      <summary>Gets or sets the element with the specified key.</summary>
      <returns>An <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> object representing the element with the specified key.</returns>
      <param name="key">The key value of the requested element.</param>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.Remove(System.Workflow.Activities.OperationParameterInfo)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> from the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <returns>true if the item was successfully removed, otherwise false.</returns>
      <param name="item">The <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the <see cref="T:System.Workflow.Activities.OperationParameterInfoCollection" />.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.Workflow.Activities.OperationParameterInfo" /> to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#Add(System.Workflow.Activities.OperationParameterInfo)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#Clear"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#Contains(System.Workflow.Activities.OperationParameterInfo)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#CopyTo(System.Workflow.Activities.OperationParameterInfo[],System.Int32)"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#Count"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#IsReadOnly"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#ICollection{T}#Remove(System.Workflow.Activities.OperationParameterInfo)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#IList{T}#IndexOf(System.Workflow.Activities.OperationParameterInfo)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#IList{T}#Insert(System.Int32,System.Workflow.Activities.OperationParameterInfo)"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#IList{T}#Item(System.Int32)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#ICollection#IsSynchronized"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#ICollection#SyncRoot"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IEnumerable#GetEnumerator"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#Add(System.Object)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#Clear"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#Contains(System.Object)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#IndexOf(System.Object)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#Insert(System.Int32,System.Object)"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#IsFixedSize"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#IsReadOnly"></member>
    <member name="P:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#Item(System.Int32)"></member>
    <member name="M:System.Workflow.Activities.OperationParameterInfoCollection.System#Collections#IList#Remove(System.Object)"></member>
    <member name="T:System.Workflow.Activities.OperationValidationEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Activities.ReceiveActivity.OperationValidation" /> event.</summary>
    </member>
    <member name="M:System.Workflow.Activities.OperationValidationEventArgs.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Claims.ClaimSet})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.OperationValidationEventArgs" /> class.</summary>
      <param name="claimSets">The collection of <see cref="T:System.IdentityModel.Claims.ClaimSet" /> objects that contains the claims that have been added to the operation's authorization context.</param>
    </member>
    <member name="P:System.Workflow.Activities.OperationValidationEventArgs.ClaimSets">
      <summary>The collection of <see cref="T:System.IdentityModel.Claims.ClaimSet" /> objects that contains the claims that have been added to the operation's authorization context.</summary>
      <returns>The collection of <see cref="T:System.IdentityModel.Claims.ClaimSet" /> objects that contains the claims that have been added to the operation's authorization context.</returns>
    </member>
    <member name="P:System.Workflow.Activities.OperationValidationEventArgs.IsValid">
      <summary>true if the operation is valid; false otherwise.</summary>
      <returns>true if the operation is valid; false otherwise.</returns>
    </member>
    <member name="T:System.Workflow.Activities.ReceiveActivity">
      <summary>Service activity that implements an operation defined by a  service contract.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> class, initializing its <see cref="P:System.Workflow.ComponentModel.Activity.Name" /> property.</summary>
      <param name="name">The name to assign to the activity instance.</param>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.CanCreateInstance">
      <summary>Gets or sets whether the operation causes a new workflow service instance to be created.</summary>
      <returns>true if a new workflow instance is created; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.Context">
      <summary>Gets the context information for this activity.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IDictionary`2" /> object that contains context information for this activity.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.ContextToken">
      <summary>Represents a token that can be used to specify the context that should be used to correlate the exchange between a <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity and the client that the activity is communicating with.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.ContextToken" /> that can be used for correlation.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.FaultMessage">
      <summary>The exception that is returned when a receive activity completes execution.</summary>
      <returns>A <see cref="T:System.ServiceModel.FaultException" /> object that contains the fault message text and details.</returns>
    </member>
    <member name="F:System.Workflow.Activities.ReceiveActivity.FaultMessageProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.ReceiveActivity.FaultMessage" /> property.</summary>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String)">
      <summary>Static method that returns context information given an activity instance and context token.</summary>
      <returns>A dictionary-based collection that contains <see cref="T:System.Xml.XmlQualifiedName" /> keys and their associated <see cref="T:System.String" /> values.</returns>
      <param name="activity">Activity instance that context information is requested for.</param>
      <param name="contextName">Name of the context token used by the activity.</param>
      <param name="ownerActivityName">The name of the owning activity name.</param>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ContextToken)">
      <summary>Static method that returns context information given an activity instance and context token.</summary>
      <returns>A dictionary based collection that contains <see cref="T:System.Xml.XmlQualifiedName" /> keys and their associated <see cref="T:System.String" /> values.</returns>
      <param name="activity">Activity instance that context information is requested for.</param>
      <param name="contextToken">The context token used by the activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.GetRootContext(System.Workflow.ComponentModel.Activity)">
      <summary>Static method that returns context information for the root context associated with a given activity instance. Context information is used for communication between a host application and the workflow service.</summary>
      <returns>A dictionary-based collection that contains <see cref="T:System.Xml.XmlQualifiedName" /> keys and their associated <see cref="T:System.String" /> values that represent context information for a root context. Barring custom instance creation logic, the message that triggers creation of a new instance is received in the root context.</returns>
      <param name="activity">The child activity instance.</param>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.GetWorkflowServiceAttributes(System.Object)">
      <summary>Returns the <see cref="T:System.Workflow.Activities.WorkflowServiceAttributes" /> attributes for the service implemented by the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity. These attributes include items like the <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.AddressFilterMode" />, the <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.ConfigurationName" />, the <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.IncludeExceptionDetailInFaults" />, and whether to include exception details in any faults that are returned from the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity.</summary>
      <returns>A <see cref="T:System.Object" /> that represents a <see cref="T:System.Workflow.Activities.WorkflowServiceAttributes" /> object that contains service attribute data.</returns>
      <param name="dependencyObject">The object to retrieve the service attributes from.</param>
    </member>
    <member name="E:System.Workflow.Activities.ReceiveActivity.OperationValidation">
      <summary>Occurs when a message is received for an operation and validation is required.</summary>
    </member>
    <member name="F:System.Workflow.Activities.ReceiveActivity.OperationValidationEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.ReceiveActivity.OperationValidation" /> event.</summary>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.ParameterBindings">
      <summary>Gets the collection of bindable parameters as found in the service's formal parameter list.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> of parameters to bind to.</returns>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo">
      <summary>Defines the contract and service operation that the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity implements.</summary>
      <returns>An <see cref="T:System.Workflow.Activities.OperationInfoBase" /> object that contains the contract name, the contract type, the operation name, (which could be distinct from method name), whether the operation is a one-way operation, and method information including parameters about the operation.</returns>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.SetWorkflowServiceAttributes(System.Object,System.Object)">
      <summary>Sets the attributes for the service implemented by the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity. These attributes include items like the <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.AddressFilterMode" />, the <see cref="P:System.Workflow.Activities.WorkflowServiceAttributes.ConfigurationName" />, and whether to include exception details in any faults that are returned from the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity.</summary>
      <param name="dependencyObject">The object to apply the service attributes to.</param>
      <param name="value">The <see cref="T:System.Workflow.Activities.WorkflowServiceAttributes" /> object that contains the service attribute data to apply.</param>
    </member>
    <member name="P:System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#QueueName">
      <summary>Gets the name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive.</summary>
      <returns>The name of the <see cref="T:System.Workflow.Runtime.WorkflowQueue" /> on which the activity is waiting for data to arrive. </returns>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Subscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Creates the subscription of the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activity.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> that handles the event. This event handler is owned by the parent activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.System#Workflow#Activities#IEventActivity#Unsubscribe(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.QueueEventArgs})">
      <summary>Cancels the subscription of a <see cref="T:System.Workflow.ComponentModel.Activity" /> to an event.</summary>
      <param name="parentContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that represents the execution environment of the <see cref="T:System.Workflow.Activities.WebServiceInputActivity" /> activity.</param>
      <param name="parentEventHandler">The <see cref="T:System.EventHandler" /> that handles the event. This event handler is owned by the parent activity.</param>
    </member>
    <member name="M:System.Workflow.Activities.ReceiveActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.QueueEventArgs)"></member>
    <member name="F:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.Activities.ReceiveActivity.ServiceOperationInfo" /> property.</summary>
    </member>
    <member name="T:System.Workflow.Activities.SendActivity">
      <summary>Client activity that models the synchronous invocation of a  service operation.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SendActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SendActivity" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SendActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SendActivity" /> class with the specified name property.</summary>
      <param name="name">The value assigned to <see cref="P:System.Workflow.ComponentModel.Activity.Name" /> when the activity is initialized.</param>
    </member>
    <member name="E:System.Workflow.Activities.SendActivity.AfterResponse">
      <summary>Occurs after the response has been received from the service.</summary>
    </member>
    <member name="F:System.Workflow.Activities.SendActivity.AfterResponseEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.SendActivity.AfterResponse" /> event.</summary>
    </member>
    <member name="E:System.Workflow.Activities.SendActivity.BeforeSend">
      <summary>Occurs before the <see cref="T:System.Workflow.Activities.SendActivity" /> activity sends the message to the service.</summary>
    </member>
    <member name="F:System.Workflow.Activities.SendActivity.BeforeSendEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.Activities.SendActivity.BeforeSend" /> event.</summary>
    </member>
    <member name="P:System.Workflow.Activities.SendActivity.ChannelToken">
      <summary>
        <see cref="T:System.Workflow.Activities.ChannelToken" /> used by the <see cref="T:System.Workflow.Activities.SendActivity" /> to associate itself with a client channel.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.ChannelToken" /> defining a client channel that a <see cref="T:System.Workflow.Activities.SendActivity" /> uses to communicate with a service.</returns>
    </member>
    <member name="P:System.Workflow.Activities.SendActivity.Context">
      <summary>Returns a dictionary that contains the context used for communication between the client and the service it is communicating with, including such things as identification for correlation.</summary>
      <returns>A dictionary-based collection that contains <see cref="T:System.Xml.XmlQualifiedName" /> keys and their associated <see cref="T:System.String" /> values.</returns>
    </member>
    <member name="P:System.Workflow.Activities.SendActivity.CustomAddress">
      <summary>Gets or sets the custom address used to communicate with a service.</summary>
      <returns>String value whose value is the address a service is listening on.</returns>
    </member>
    <member name="F:System.Workflow.Activities.SendActivity.CustomAddressProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> for the <see cref="P:System.Workflow.Activities.SendActivity.CustomAddress" /> property.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)">
      <summary>Static method that returns context information given an activity instance, an endpoint name used by that activity, the name of the owner activity, and a <see cref="T:System.Type" /> object that represents the type of the contract.</summary>
      <returns>A dictionary-based collection that contains <see cref="T:System.Xml.XmlQualifiedName" /> keys and their associated <see cref="T:System.String" /> values.</returns>
      <param name="activity">Activity whose context information is required.</param>
      <param name="endpointName">Name of the endpoint used for correlation with a service.</param>
      <param name="ownerActivityName">The name of the owning activity.</param>
      <param name="contractType">The <see cref="T:System.Type" /> of the contract implemented by a service.</param>
    </member>
    <member name="M:System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)">
      <summary>Gets or sets the context information for a send operation.</summary>
      <returns>A dictionary-based collection that contains <see cref="T:System.Xml.XmlQualifiedName" /> keys and their associated <see cref="T:System.String" /> values.</returns>
      <param name="activity">Activity whose context information is required.</param>
      <param name="endpoint">Endpoint information for correlation with a service.</param>
      <param name="contractType">The <see cref="T:System.Type" /> of the contract implemented by a service.</param>
    </member>
    <member name="P:System.Workflow.Activities.SendActivity.ParameterBindings">
      <summary>Gets the collection of bindable parameters as found in the  service's formal parameter list.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> of parameters to bind to.</returns>
    </member>
    <member name="F:System.Workflow.Activities.SendActivity.ReturnValuePropertyName">
      <summary>Name of the property that is used for the return value sent by the service that the SendActivity activity is communicating with.</summary>
    </member>
    <member name="P:System.Workflow.Activities.SendActivity.ServiceOperationInfo">
      <summary>Defines the contract and operation of the service that the SendActivity activity communicates with.</summary>
      <returns>A <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> object that contains the contract name, the contract type, the operation name, (which may be distinct from the actual method name), whether the operation is a one-way operation, and method information including parameters about the operation.</returns>
    </member>
    <member name="M:System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>A static method that sets context information for a <see cref="T:System.Workflow.Activities.SendActivity" /> activity, given an activity instance, an endpoint name used by that activity, the name of the owner activity, a <see cref="T:System.Type" /> object that represents the type of the contract, and the context information itself.</summary>
      <param name="activity">The Activity instance to associate the context information with.</param>
      <param name="endpointName">The name of an endpoint used for correlation with a service.</param>
      <param name="ownerActivityName">The name of the owning activity</param>
      <param name="contractType">The <see cref="T:System.Type" /> of the contract implemented by a service.</param>
      <param name="context">The context information to set.</param>
    </member>
    <member name="M:System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>A static method that sets context information for a <see cref="T:System.Workflow.Activities.SendActivity" /> activity, given an activity instance, an endpoint used by that activity, a <see cref="T:System.Type" /> object that represents the type of the contract, and the context information itself.</summary>
      <param name="activity">The Activity instance to associate the context information with.</param>
      <param name="endpoint">The endpoint used for correlation with a service.</param>
      <param name="contractType">The <see cref="T:System.Type" /> of the contract implemented by a service.</param>
      <param name="context">The context information to set.</param>
    </member>
    <member name="T:System.Workflow.Activities.SendActivityEventArgs">
      <summary>Provides information for the <see cref="E:System.Workflow.Activities.SendActivity.BeforeSend" /> and <see cref="E:System.Workflow.Activities.SendActivity.AfterResponse" /> events.</summary>
    </member>
    <member name="M:System.Workflow.Activities.SendActivityEventArgs.#ctor(System.Workflow.Activities.SendActivity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.SendActivityEventArgs" /> class.</summary>
      <param name="sendActivity">The T:System.Workflow.Activities.SendActivity that threw the event associated with this <see cref="T:System.Workflow.Activities.SendActivityEventArgs" />.</param>
    </member>
    <member name="P:System.Workflow.Activities.SendActivityEventArgs.SendActivity">
      <summary>Gets the <see cref="T:System.Workflow.Activities.SendActivity" /> that threw the event associated with this <see cref="T:System.Workflow.Activities.SendActivityEventArgs" />.</summary>
      <returns>The <see cref="T:System.Workflow.Activities.SendActivity" /> that threw the event associated with this <see cref="T:System.Workflow.Activities.SendActivityEventArgs" />.</returns>
    </member>
    <member name="T:System.Workflow.Activities.TypedOperationInfo">
      <summary>An <see cref="T:System.Workflow.Activities.OperationInfo" /> object that inherits from <see cref="T:System.Workflow.Activities.OperationInfoBase" /> used for the service operation information of the <see cref="T:System.Workflow.Activities.SendActivity" /> and <see cref="T:System.Workflow.Activities.ReceiveActivity" /> activities. Note that this operation information must be based on a CLR type.  </summary>
    </member>
    <member name="M:System.Workflow.Activities.TypedOperationInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.TypedOperationInfo.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> class.</summary>
      <param name="contractType">The type of the associated contract interface.</param>
      <param name="operationName">The method name of the associated service operation.</param>
    </member>
    <member name="M:System.Workflow.Activities.TypedOperationInfo.Clone">
      <summary>Creates a copy of the current object.</summary>
      <returns>The copy of the object.</returns>
    </member>
    <member name="P:System.Workflow.Activities.TypedOperationInfo.ContractType">
      <summary>The type of the associated contract interface.</summary>
      <returns>A <see cref="T:System.Type" /> object that represents the type of the associated contract interface.</returns>
    </member>
    <member name="M:System.Workflow.Activities.TypedOperationInfo.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> instances are equal.</summary>
      <returns>true if the instances are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Workflow.Activities.TypedOperationInfo" />.</param>
    </member>
    <member name="M:System.Workflow.Activities.TypedOperationInfo.GetHashCode">
      <summary>Generates a number that corresponds to the value of the object to support the use of a hash table.</summary>
      <returns>An <see cref="T:System.Int32" /> that represents the hash code value of the object.</returns>
    </member>
    <member name="M:System.Workflow.Activities.TypedOperationInfo.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> object.</returns>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowServiceAttributes">
      <summary>Builds the service behavior for the workflow service that it decorates.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowServiceAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowServiceAttributes" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.AddressFilterMode">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.AddressFilterMode" /> enumeration that is used by the dispatcher to route incoming messages to the correct endpoint.</summary>
      <returns>An <see cref="T:System.ServiceModel.AddressFilterMode" /> enumeration value that is used by the dispatcher to route incoming messages to the correct endpoint.</returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.ConfigurationName">
      <summary>Gets or sets the value used to locate the service element in an application configuration file.</summary>
      <returns>The value to locate in the configuration file. </returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.IgnoreExtensionDataObject">
      <summary>Gets or sets a value that specifies whether to send unknown serialization data onto the wire.</summary>
      <returns>true if unknown serialization data is never sent; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.IncludeExceptionDetailInFaults">
      <summary>Gets or sets a value that specifies that general unhandled execution exceptions are to be converted into a <see cref="T:System.ServiceModel.FaultException" /> of type <see cref="T:System.ServiceModel.ExceptionDetail" /> and sent as a fault message. Set this to true only during development to troubleshoot a service. </summary>
      <returns>true if unhandled exceptions are to be returned as SOAP faults; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.MaxItemsInObjectGraph">
      <summary>Gets or sets the maximum number of items allowed in a serialized object. </summary>
      <returns>The maximum number of items allowed in an object. </returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.Name">
      <summary>Gets or sets the value of the name attribute in the service element in Web Services Description Language (WSDL).</summary>
      <returns>The value of the Name property. </returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.Namespace">
      <summary>Gets or sets the value of the target namespace for the service in Web Services Description Language (WSDL). </summary>
      <returns>The value of the Namespace property.</returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.UseSynchronizationContext">
      <summary>Gets or sets a value that specifies whether to use the current synchronization context to choose the thread of execution. </summary>
      <returns>true if all calls to the service must run on the thread specified by the <see cref="T:System.Threading.SynchronizationContext" />; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.Activities.WorkflowServiceAttributes.ValidateMustUnderstand">
      <summary>Gets or sets a value that specifies whether the system or the application enforces SOAP MustUnderstand header processing. </summary>
      <returns>true if the system is to perform SOAP header MustUnderstand processing; otherwise false, which indicates that the application performs this processing. </returns>
    </member>
    <member name="T:System.Workflow.Activities.WorkflowServiceAttributesDynamicPropertyValidator">
      <summary>The property validator used by the <see cref="F:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty" />.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowServiceAttributesDynamicPropertyValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Activities.WorkflowServiceAttributesDynamicPropertyValidator" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Activities.WorkflowServiceAttributesDynamicPropertyValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the <see cref="F:System.Workflow.Activities.ReceiveActivity.WorkflowServiceAttributesProperty" /> property and returns a collection of <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> objects.</summary>
      <returns>A collection of <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> objects representing the results of the validation.</returns>
      <param name="manager">The validation manager linked to the validation.</param>
      <param name="obj">The parameter to validate.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Hosting.ChannelManagerService">
      <summary>Provides functionality for constructing client-side channels, caching channels, and channel factories.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ChannelManagerService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ChannelManagerService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ChannelManagerService.#ctor(System.Collections.Generic.IList{System.ServiceModel.Description.ServiceEndpoint})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ChannelManagerService" /> class.</summary>
      <param name="endpoints">A collection of service endpoints.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ChannelManagerService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ChannelManagerService" /> class.</summary>
      <param name="parameters">Configuration parameters for the service.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ChannelManagerService.#ctor(System.ServiceModel.Channels.ChannelPoolSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ChannelManagerService" /> class.</summary>
      <param name="settings">Settings for quotas for the pool of channels managed by this service. </param>
    </member>
    <member name="M:System.Workflow.Runtime.Hosting.ChannelManagerService.#ctor(System.ServiceModel.Channels.ChannelPoolSettings,System.Collections.Generic.IList{System.ServiceModel.Description.ServiceEndpoint})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.ChannelManagerService" /> class.</summary>
      <param name="settings">Settings for quotas for the pool of channels managed by this service.</param>
      <param name="endpoints">A collection of service endpoints.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Xml.Linq.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml.Linq</name>
  </assembly>
  <members>
    <member name="T:System.Xml.Linq.Extensions">
      <summary>Contains the LINQ to XML extension methods.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of elements that contains the ancestors of every node in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the ancestors of every node in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contains the ancestors of every node in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the ancestors of every node in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>Returns a collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the ancestors of every element in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>Returns a collection of the attributes of every element in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of every element in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of the descendant nodes of every document and element in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the descendant nodes of every document and element in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>Returns a collection of nodes that contains every element in the source collection, and the descendant nodes of every element in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains every element in the source collection, and the descendant nodes of every element in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of elements that contains the descendant elements of every element and document in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the descendant elements of every element and document in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>Returns a collection of elements that contains every element in the source collection, and the descendent elements of every element in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the descendent elements of every element in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of the child elements of every element and document in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the child elements of every element or document in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the child elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the child elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of nodes that contains all nodes in the source collection, sorted in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains all nodes in the source collection, sorted in document order.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of the child nodes of every document and element in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the child nodes of every document and element in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})">
      <summary>Removes every attribute in the source collection from its parent element.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the source collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Removes every node in the source collection from its parent node.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.LoadOptions">
      <summary>Specifies load options when parsing XML. </summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.None">
      <summary>Does not preserve insignificant white space or load base URI and line information.</summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.PreserveWhitespace">
      <summary>Preserves insignificant white space while parsing.</summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.SetBaseUri">
      <summary>Requests the base URI information from the <see cref="T:System.Xml.XmlReader" />, and makes it available via the <see cref="P:System.Xml.Linq.XObject.BaseUri" /> property.</summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.SetLineInfo">
      <summary>Requests the line information from the <see cref="T:System.Xml.XmlReader" /> and makes it available via properties on <see cref="T:System.Xml.Linq.XObject" />.</summary>
    </member>
    <member name="T:System.Xml.Linq.ReaderOptions">
      <summary>Specifies whether to omit duplicate namespaces when loading an <see cref="T:System.Xml.Linq.XDocument" /> with an <see cref="T:System.Xml.XmlReader" />.</summary>
    </member>
    <member name="F:System.Xml.Linq.ReaderOptions.None">
      <summary>No reader options specified.</summary>
    </member>
    <member name="F:System.Xml.Linq.ReaderOptions.OmitDuplicateNamespaces">
      <summary>Omit duplicate namespaces when loading the <see cref="T:System.Xml.Linq.XDocument" />.</summary>
    </member>
    <member name="T:System.Xml.Linq.SaveOptions">
      <summary>Specifies serialization options.</summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.None">
      <summary>Format (indent) the XML while serializing.</summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.DisableFormatting">
      <summary>Preserve all insignificant white space while serializing.</summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces">
      <summary>Remove the duplicate namespace declarations while serializing.</summary>
    </member>
    <member name="T:System.Xml.Linq.XAttribute">
      <summary>Represents an XML attribute.</summary>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute" /> class from another <see cref="T:System.Xml.Linq.XAttribute" /> object. </summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XAttribute" /> object to copy from.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="other" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute" /> class from the specified name and value. </summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> of the attribute.</param>
      <param name="value">An <see cref="T:System.Object" /> containing the value of the attribute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> or <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.EmptySequence">
      <summary>Gets an empty collection of attributes.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> containing an empty collection.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.IsNamespaceDeclaration">
      <summary>Determines if this attribute is a namespace declaration.</summary>
      <returns>true if this attribute is a namespace declaration; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.Name">
      <summary>Gets the expanded name of this attribute.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> containing the name of this attribute.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.NextAttribute">
      <summary>Gets the next attribute of the parent element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> containing the next attribute of the parent element.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XAttribute" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Attribute" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.DateTime" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.DateTime" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.DateTime" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Decimal" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Double" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Decimal" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTimeOffset">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.DateTimeOffset" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Guid" />.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Guid" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Guid" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.TimeSpan" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.TimeSpan" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.TimeSpan" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Double" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Double" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to an <see cref="T:System.Int32" />.</summary>
      <returns>A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Int32" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Int32" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.UInt32" />.</summary>
      <returns>A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.UInt32" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.UInt32" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.String" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Boolean" />.</summary>
      <returns>A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Boolean" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Boolean" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Boolean" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.UInt32" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.UInt64" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Single" />.</summary>
      <returns>A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Single" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Single" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Single" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to an <see cref="T:System.Int64" />.</summary>
      <returns>A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Int64" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Int64" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.UInt64" />.</summary>
      <returns>A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.UInt64" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.UInt64" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.PreviousAttribute">
      <summary>Gets the previous attribute of the parent element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> containing the previous attribute of the parent element.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.Remove">
      <summary>Removes this attribute from its parent element.</summary>
      <exception cref="T:System.InvalidOperationException">The parent element is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.SetValue(System.Object)">
      <summary>Sets the value of this attribute.</summary>
      <param name="value">The value to assign to this attribute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.ToString">
      <summary>Converts the current <see cref="T:System.Xml.Linq.XAttribute" /> object to a string representation.</summary>
      <returns>A <see cref="T:System.String" /> containing the XML text representation of an attribute and its value.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.Value">
      <summary>Gets or sets the value of this attribute.</summary>
      <returns>A <see cref="T:System.String" /> containing the value of this attribute.</returns>
      <exception cref="T:System.ArgumentNullException">When setting, the <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:System.Xml.Linq.XCData">
      <summary>Represents a text node that contains CDATA. </summary>
    </member>
    <member name="M:System.Xml.Linq.XCData.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XCData" /> class. </summary>
      <param name="value">A string that contains the value of the <see cref="T:System.Xml.Linq.XCData" /> node.</param>
    </member>
    <member name="M:System.Xml.Linq.XCData.#ctor(System.Xml.Linq.XCData)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XCData" /> class. </summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XCData" /> node to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XCData.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XCData" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.CDATA" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XCData.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this CDATA object to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XComment">
      <summary>Represents an XML comment. </summary>
    </member>
    <member name="M:System.Xml.Linq.XComment.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XComment" /> class with the specified string content. </summary>
      <param name="value">A string that contains the contents of the new <see cref="T:System.Xml.Linq.XComment" /> object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XComment.#ctor(System.Xml.Linq.XComment)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XComment" /> class from an existing comment node. </summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XComment" /> node to copy from.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="other" /> parameter is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XComment.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XComment" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Comment" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XComment.Value">
      <summary>Gets or sets the string value of this comment.</summary>
      <returns>A <see cref="T:System.String" /> that contains the string value of this comment.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XComment.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this comment to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XContainer">
      <summary>Represents a node that can contain other nodes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Add(System.Object)">
      <summary>Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</summary>
      <param name="content">A content object containing simple content or a collection of content objects to be added.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Add(System.Object[])">
      <summary>Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object)">
      <summary>Adds the specified content as the first children of this document or element.</summary>
      <param name="content">A content object containing simple content or a collection of content objects to be added.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object[])">
      <summary>Adds the specified content as the first children of this document or element.</summary>
      <param name="content">A parameter list of content objects.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XContainer.CreateWriter">
      <summary>Creates an <see cref="T:System.Xml.XmlWriter" /> that can be used to add nodes to the <see cref="T:System.Xml.Linq.XContainer" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> that is ready to have content written to it.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XContainer.DescendantNodes">
      <summary>Returns a collection of the descendant nodes for this document or element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the descendant nodes of the <see cref="T:System.Xml.Linq.XContainer" />, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Descendants">
      <summary>Returns a collection of the descendant elements for this document or element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the descendant elements for this document or element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" /> that match the specified <see cref="T:System.Xml.Linq.XName" />.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)">
      <summary>Gets the first (in document order) child element with the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>A <see cref="T:System.Xml.Linq.XElement" /> that matches the specified <see cref="T:System.Xml.Linq.XName" />, or null.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Elements">
      <summary>Returns a collection of the child elements of this element or document, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the child elements of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the child elements of this element or document, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the children of the <see cref="T:System.Xml.Linq.XContainer" /> that have a matching <see cref="T:System.Xml.Linq.XName" />, in document order.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="P:System.Xml.Linq.XContainer.FirstNode">
      <summary>Get the first child node of this node.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNode" /> containing the first child node of the <see cref="T:System.Xml.Linq.XContainer" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Xml.Linq.XContainer.LastNode">
      <summary>Get the last child node of this node.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNode" /> containing the last child node of the <see cref="T:System.Xml.Linq.XContainer" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Nodes">
      <summary>Returns a collection of the child nodes of this element or document, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the contents of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.RemoveNodes">
      <summary>Removes the child nodes from this document or element.</summary>
    </member>
    <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)">
      <summary>Replaces the children nodes of this document or element with the specified content.</summary>
      <param name="content">A content object containing simple content or a collection of content objects that replace the children nodes.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])">
      <summary>Replaces the children nodes of this document or element with the specified content.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="T:System.Xml.Linq.XDeclaration">
      <summary>Represents an XML declaration.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDeclaration" /> class with the specified version, encoding, and standalone status.</summary>
      <param name="version">The version of the XML, usually "1.0".</param>
      <param name="encoding">The encoding for the XML document.</param>
      <param name="standalone">A string containing "yes" or "no" that specifies whether the XML is standalone or requires external entities to be resolved.</param>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.Xml.Linq.XDeclaration)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDeclaration" /> class from another <see cref="T:System.Xml.Linq.XDeclaration" /> object. </summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XDeclaration" /> used to initialize this <see cref="T:System.Xml.Linq.XDeclaration" /> object.</param>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Encoding">
      <summary>Gets or sets the encoding for this document.</summary>
      <returns>A <see cref="T:System.String" /> containing the code page name for this document.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Standalone">
      <summary>Gets or sets the standalone property for this document.</summary>
      <returns>A <see cref="T:System.String" /> containing the standalone property for this document.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.ToString">
      <summary>Provides the declaration as a formatted string.</summary>
      <returns>A <see cref="T:System.String" /> that contains the formatted XML string.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Version">
      <summary>Gets or sets the version property for this document.</summary>
      <returns>A <see cref="T:System.String" /> containing the version property for this document.</returns>
    </member>
    <member name="T:System.Xml.Linq.XDocument">
      <summary>Represents an XML document. </summary>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class. </summary>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified content.</summary>
      <param name="content">A parameter list of content objects to add to this document.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified <see cref="T:System.Xml.Linq.XDeclaration" /> and content.</summary>
      <param name="declaration">An <see cref="T:System.Xml.Linq.XDeclaration" /> for the document.</param>
      <param name="content">The content of the document.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class from an existing <see cref="T:System.Xml.Linq.XDocument" /> object.</summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XDocument" /> object that will be copied.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.Declaration">
      <summary>Gets or sets the XML declaration for this document.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDeclaration" /> that contains the XML declaration for this document.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocument.DocumentType">
      <summary>Gets the Document Type Definition (DTD) for this document.</summary>
      <returns>A <see cref="T:System.Xml.Linq.XDocumentType" /> that contains the DTD for this document.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance by using the specified stream.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> object that reads the data that is contained in the stream. </returns>
      <param name="stream">The stream that contains the XML data.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> object that reads the data that is contained in the stream.</returns>
      <param name="stream">The stream containing the XML data.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.IO.TextReader" />.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.String)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</returns>
      <param name="uri">A URI string that references the file to load into a new <see cref="T:System.Xml.Linq.XDocument" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</returns>
      <param name="uri">A URI string that references the file to load into a new <see cref="T:System.Xml.Linq.XDocument" />.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from an <see cref="T:System.Xml.XmlReader" />. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />, optionally setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XDocument" />.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XDocument" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Document" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Parse(System.String)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.</returns>
      <param name="text">A string that contains XML.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.</returns>
      <param name="text">A string that contains XML.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.Root">
      <summary>Gets the root element of the XML Tree for this document.</summary>
      <returns>The root <see cref="T:System.Xml.Linq.XElement" /> of the XML tree.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="textWriter">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.String)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a file.</summary>
      <param name="fileName">A string that contains the name of the file.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a file, optionally disabling formatting.</summary>
      <param name="fileName">A string that contains the name of the file.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this document to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XDocumentType">
      <summary>Represents an XML Document Type Definition (DTD). </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class. </summary>
      <param name="name">A <see cref="T:System.String" /> that contains the qualified name of the DTD, which is the same as the qualified name of the root element of the XML document.</param>
      <param name="publicId">A <see cref="T:System.String" /> that contains the public identifier of an external public DTD.</param>
      <param name="systemId">A <see cref="T:System.String" /> that contains the system identifier of an external private DTD.</param>
      <param name="internalSubset">A <see cref="T:System.String" /> that contains the internal subset for an internal DTD.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.Xml.Linq.XDocumentType)">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class from another <see cref="T:System.Xml.Linq.XDocumentType" /> object.</summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XDocumentType" /> object to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.InternalSubset">
      <summary>Gets or sets the internal subset for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String" /> that contains the internal subset for this Document Type Definition (DTD).</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.Name">
      <summary>Gets or sets the name for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String" /> that contains the name for this Document Type Definition (DTD).</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XDocumentType" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.DocumentType" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.PublicId">
      <summary>Gets or sets the public identifier for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String" /> that contains the public identifier for this Document Type Definition (DTD).</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.SystemId">
      <summary>Gets or sets the system identifier for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String" /> that contains the system identifier for this Document Type Definition (DTD).</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this <see cref="T:System.Xml.Linq.XDocumentType" /> to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XElement">
      <summary>Represents an XML element.</summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from another <see cref="T:System.Xml.Linq.XElement" /> object.</summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XElement" /> object to copy from.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name. </summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</param>
      <param name="content">The contents of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</param>
      <param name="content">The initial content of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from an <see cref="T:System.Xml.Linq.XStreamingElement" /> object.</summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XStreamingElement" /> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf">
      <summary>Returns a collection of elements that contain this element, and the ancestors of this element. </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and the ancestors of this element. </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
      <summary>Returns the <see cref="T:System.Xml.Linq.XAttribute" /> of this <see cref="T:System.Xml.Linq.XElement" /> that has the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> that has the specified <see cref="T:System.Xml.Linq.XName" />; null if there is no attribute with the specified name.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> of the <see cref="T:System.Xml.Linq.XAttribute" /> to get.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attributes">
      <summary>Returns a collection of attributes of this element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> of attributes of this element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantNodesAndSelf">
      <summary>Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contain this element, and all descendant nodes of this element, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf">
      <summary>Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and all descendant elements of this element, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="P:System.Xml.Linq.XElement.EmptySequence">
      <summary>Gets an empty collection of elements.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains an empty collection.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.FirstAttribute">
      <summary>Gets the first attribute of this element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the first attribute of this element.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetDefaultNamespace">
      <summary>Gets the default <see cref="T:System.Xml.Linq.XNamespace" /> of this <see cref="T:System.Xml.Linq.XElement" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the default namespace of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
      <summary>Gets the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> for the namespace associated with the prefix for this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="prefix">A string that contains the namespace prefix to look up.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
      <summary>Gets the prefix associated with a namespace for this <see cref="T:System.Xml.Linq.XElement" />.</summary>
      <returns>A <see cref="T:System.String" /> that contains the namespace prefix.</returns>
      <param name="ns">An <see cref="T:System.Xml.Linq.XNamespace" /> to look up.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Xml.Linq.XElement.HasAttributes">
      <summary>Gets a value indicating whether this element as at least one attribute.</summary>
      <returns>true if this element has at least one attribute; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.HasElements">
      <summary>Gets a value indicating whether this element has at least one child element.</summary>
      <returns>true if this element has at least one child element; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.IsEmpty">
      <summary>Gets a value indicating whether this element contains no content.</summary>
      <returns>true if this element contains no content; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.LastAttribute">
      <summary>Gets the last attribute of this element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the last attribute of this element.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that is contained in the stream.</returns>
      <param name="stream">The stream that contains the XML data.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that the stream contains.</returns>
      <param name="stream">The stream containing the XML data.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> object that specifies whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space and retaining line information. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.String)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</returns>
      <param name="uri">A URI string referencing the file to load into a new <see cref="T:System.Xml.Linq.XElement" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</returns>
      <param name="uri">A URI string referencing the file to load into an <see cref="T:System.Xml.Linq.XElement" />.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="P:System.Xml.Linq.XElement.Name">
      <summary>Gets or sets the name of this element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this element.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XElement" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Element" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Decimal" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Decimal" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTime" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.DateTime" /> value.</exception>
      <exception c