System.String)">
            <summary>
            214;Sql Server on {0} is not running!
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AllNeedsRepair(System.Int32)">
            <summary>
            216;The Sql Fail Safe Set {0} has all databases marked needs repair. At least one database must be online or offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryCannotBeNeedsRepair(System.Int32,System.String,System.String)">
            <summary>
            217;The Sql Fail Safe Set {0} has the primary database {1}:{2} marked needs repair.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryOfflineNotAllowed(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            221;"{0}:{1}" is a Primary database. Cannot mark primary Offline. Demote first and then mark Offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UpdateVersionNotCalled">
            <summary>
            222:In order to call UpgradeStatus or UpgradeSetup, you must import a new Manifest and call UpdateVersion first.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MustFinishUpgrade">
            <summary>
            224:The previous call to UpdateVersion was not completed by a call to UpgradeSetup or UpgradeRollback.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLInvalidValue(System.String,System.String)">
            <summary>
            225:The {0} element "{1}" is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.WitnessServerMissing(System.String)">
            <summary>
            226;Witness server (per SQL FailsafeSet) missing for (Mirroring) deployment {0}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.OnlyTwoMirroringDbsPerFSSAllowed">
            <summary>
            227;Number of databases per SQL FailsafeSet cannot exceed 2 for Mirroring Topology.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MirroringDbsRequireSameName(System.String)">
            <summary>
            228;The database names in a Mirroring Failsafeset are required to be the same. Failsafeset Number={0}
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoMirroringInfo">
            <summary>
            229;XML tag "Mirroring" required for Mirroring.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.WitnessServerCannotShareServer">
            <summary>
            230;Witness Server cannot be on the same server as that of Principal or Mirror database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ServerHasNoMirroringEndPoint(System.String)">
            <summary>
            231;Server {0} does not have a registered end-point. Please re-register the server with end point information.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MirroringStateChangedDuringOperation(System.String,System.String,System.String,System.Exception)">
            <summary>
            232;{0}:{1} is no more a {2}. Please rerun the command.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.TooFewDataPartitions(System.String,System.String)">
            <summary>
            233;There are too few data partitions specified.  Presently there are {0} specified in the Manifest, but due to the Deployment XML at least {1} are required.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingDataServerInfo">
            <summary>
            234;The &lt;DataServers&gt; and &lt;DataServer&gt; elements must be defined in the Deployment XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotForceRepair">
            <summary>
            500;Cannot force repair with MultiMaster/WriteAllCopies/Mirroring unless all databases in the Fail Safe Set are marked NeedsRepair.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropSecurityRole(System.String,System.String)">
            <summary>
            501;Cannot drop security role {1}, it still has a member security account {0}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotAddLogicalFileNameIfNotExistInSqlFileLogical">
            <summary>
            502;The list of Logical Files from the FileGroup section of your Manifest must match the DeploymentLogicalFiles section of your Deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DeployedDatabaseDoesNotMatchDatabaseTemplate(System.String,System.String,System.String,System.String)">
            <summary>
            503;During validation of the database {0}:{1}, Webstore found that the list of File groups and Logical Files for this database: {2} does not match Webstore's configuration for this database {3}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MustSetDefaultPhysicalLocation(System.String,System.String)">
            <summary>
            504;The {0} value must be set for the Deployment Logical File {1}. Use wst dep sqlfiledefault.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ErrorInGrantPermission(System.String,System.String,System.String,System.String)">
            <summary>
            1000;The object {0} could not have the permission {1} granted to {2}. The error was {3}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingElementInAddCluster">
            <summary>
            With Add Clusters, the Clusters and Cluster elements must be defined in the XML.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FssCrossCluster(System.Int32,System.String)">
            <summary>
            Fail Safe Set {0} of Deployment {1} doesnt have all members accessed by the same affinity cluster.
            </summary>
            <param name="sqlFssId"></param>
            <param name="depName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoReplStream(System.String,System.String)">
            <summary>
            509;No replication stream setup for "{0}:{1}".
            </summary>
            <param name="ServerName"></param>
            <param name="DBName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ProvPrefOutOfRange(System.Int32)">
            <summary>
            ProvPref ({0}) must be [0,100].
            </summary>
            <param name="provPref"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ForceMarkOfflineNotAllowedWithWriteAllCopies">
            <summary>
            511;Force mark offline is not allowed for WriteAllCopies topology.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CantSetBothParameter(System.String,System.String)">
            <summary>
            512;Can't set [{0}] and [{1}] at the same time.
            </summary>
            <param name="Param1"></param>
            <param name="Param2"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.LogicalPartitionCountMustBeDividableByClusterCount">
            <summary>
            513;Logical Partition Count Must be Dividable By Cluster Count
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoObjectInConfig(System.String,System.String,System.Exception)">
            <summary>
            519;The {0} "{1}" is not registered.
            </summary>
            <param name="objectType"></param>
            <param name="name"></param>
            <param name="innerException"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ObjectAlreadyExistsOverwrite(System.String,System.String)">
            <summary>
            The {0} "{1}" already exists in the Config Database. Use -overwrite to update.
            </summary>
            <param name="objectType"></param>
            <param name="name"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidParameter(System.String,System.String)">
            <summary>
            Parameter "{0} {1}" is invalid.
            </summary>
            <param name="Switch"></param>
            <param name="Value"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ConnectionFailureToWstConfig">
            <summary>
            ConnectionFailureToWstConfig = 529;Connection failure to WstConfig database.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CantPromoteDemoteBoth(System.String)">
            <summary>
            CantPromoteDemoteBoth = 530;Can't {0} both the SQLFailSafeSet and FileFailSafeSet at the same time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CantUpgradeWithOfflineDatabases">
            <summary>
            CantUpgradeWithOfflineDatabases = 531;Under Write All Read Any topology, databases cannot be offline during upgrade.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InappropriateOperation(System.String,System.String,System.String)">
            <summary>
            532;The {0} operation is inappropriate for topology {1}.  The toplogy can only accept the following operation(s) to complete:  ({2}).
            </summary>
            <param name="topology"></param>
            <param name="op"></param>
            <param name="validOperations"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.LogreaderDrainFailed(System.String,System.String)">
            <summary>
            553; Logreader for {0}:{1} cannot be drained.
            </summary>
            <param name="PubSvrName"></param>
            <param name="PubDBName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropReplFromPrimary(System.String,System.String)">
            <summary>
            534; Can not drop replication from primary database {0}:{1}. See also the -force option.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDoReplAction(System.String,System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            535; Cannot {0} replication with database {1}:{2} in this state: {3}
            </summary>
            <param name="action"></param>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="dbState"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryDefaultStatusNotOnline(System.String,System.String,System.String)">
            <summary>
            536; Can not set primary database {0}:{1} with default status {2}. Primary database default status must be online.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="strDefaultStatus"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryStandbyNotAllowed(System.String,System.String)">
            <summary>
            537; Can not set primary database {0}:{1} standby.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CanNotStandbyConfig(System.String,System.String)">
            <summary>
            538; Can not set config database {0}:{1} standby.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.WriteAllCopiesNotSupportStandby(System.String,System.String)">
            <summary>
            539; WriteAllCopies topology does not support database {0}:{1} standby status
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotUpgradeWstConfig">
            <summary>
            1001;Use the WstConfigUpgrade.exe tool to upgrade the WstConfig database.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidCommandLineParameter(System.String)">
            <summary>
            1002;Invalid parameter: {0}
            </summary>
            <param name="msg"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoLongerSupported(System.String)">
            <summary>
            1003;{0} is no longer supported.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AlreadyUpgradingToThisManifest">
            <summary>
            1004;Upgrade is already upgrading to this Manifest.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UpgradeInProgress">
            <summary>
            1005;Upgrade is in progress. Cannot specify a different Manifest.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DuringRollingUpgradeCannotUpgradeWithFSSInBadState(System.Int32)">
            <summary>
            1006;During call to upgrade with -RollingUpgrade set, the Fail
            Safe Set {0} has databases in NeedsRepair or NotDeployed state.
            This would cause 100% R/W outage. Upgrade was not performed on
            this FSS.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DataServerCountMustBeAnEvenNumber(System.Int32)">
            <summary>
            1007;Data server count specified ({0}) must be an even number.
            </summary>
            <param name="countDataServers"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.IncorrectAmountOfFss">
            <summary>
            1008;The number of fail safe sets specified is incorrect.  Only one fail safe set containing one new database can be added to a Config at a time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.IncorrectAmountOfDatabases">
            <summary>
            1009;The number of databases specified is incorrect.  Only one database can be added to a Config at a time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoFileFssForFileShareOnlyManifest">
            <summary>
            1010;The Deployment XML file being imported does not have any file fail safe sets, and the Manifest is a File Share only manifest (meaning it has no SQL objects defined).  The Import cannot continue.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotRebootServerWithWstConfig(System.String)">
            <summary>
            1100;{0} has WstConfig database on it. Cannot reboot a server which has the WstConfig database on it.
            </summary>
            <param name="serverName">Name of the server being rebooted</param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotRebootServerWithoutSqlDbs(System.String)">
            <summary>
            1101;{0} does not have any Sql databases registered with Webstore. Cannot reboot servers that do not have registered Sql databases with Webstore.
            </summary>
            <param name="serverName">Name of the server being rebooted</param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotRebootServerWithFileShares(System.String)">
            <summary>
            1102;Server {0} has fileshares registered with Webstore. Cannot reboot servers with FileShares.
            </summary>
            <param name="serverName">Name of the server being rebooted</param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ServerFssNotInDefaultState(System.String)">
            <summary>
            1103;The following server Fss's are not in default state. {0}
            </summary>
            <param name="errMsg">Detailed list of fss's/Db's not in default state.</param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.RebootServerTimeout(System.String,System.Int32)">
            <summary>
            1104; Server reboot for server :{0} Timedout. Timeout period was {1} ms.
            </summary>
            <param name="serverName"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.RebootServerFailure(System.String,System.Exception)">
            <summary>
            1105; Server reboot for server :{0} failed. Look at inner exception for details.
            </summary>
            <param name="serverName"></param>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.TooManyParametersForMappingDelete">
            <summary>
            1111;You cannot specify to delete more than one mapping at a time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingParameterValueForSetting(System.String)">
            <summary>
            1200;Setting Name - {0}: Either the value or the Overwrite or the Remove attribute of a setting must be set.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SettingAlreadyExists(System.String)">
            <summary>
            1201;Setting Name - {0} already exists in the WstConfig database. Cannot override existing setting. Please remove setting and then readd.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingElementDefinition(System.String)">
            <summary>
            1202;Missing definition for {0}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingSettingDefinition(System.String)">
            <summary>
            1203;The definition for setting {0} does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidValueProvided(System.String)">
            <summary>
            1204; The value for setting {0} is not correct.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ElementCannotBeEmpty(System.String,System.String)">
            <summary>
            1205; Inner Text for element {0} under node {1} cannot be empty.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ObjectDoesNotExist(System.String,System.String,System.Exception)">
            <summary>
            1206;The {0} "{1}" does not exist in the configuration database.
            </summary>
            <param name="objectType"></param>
            <param name="objectName"></param>
            <param name="innerException"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ClusterCanNotBeNull">
            <summary>
            1208;The cluster cannot be NULL.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.IndexOutOfRange(System.String,System.String)">
            <summary>
            1209;The object {0} with type {1} does not exist in the collection.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DatabaseTemplateAlreadyExists(System.String)">
            <summary>
            1211;The DatabaseTemplate {0} already exists.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.RequiredEitherParameterMissing(System.String,System.String)">
            <summary>
            1212;You must specify either the {0} parameter or the {1} parameter on the command line.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ValueHasNotBeenSpecified(System.String,System.String)">
            <summary>
            1214;The {0} property in {1} has not been specified.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDefaultDatabaseTemplate">
            <summary>
            1215;You cannot drop the default database template.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropTemplateAssignedToFSS">
            <summary>
            1216;You cannot drop a database template assigned to one or more SqlFailSafeSets.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropTemplateAssignedToServer">
            <summary>
            1217;You cannot drop a database template assigned to one or more Servers.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SqlFailSafeSetNotRegistered(System.Int16,System.String)">
            <summary>
            1219;Sql fail safe set number {0} from the Deployment {1} is not registered.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropWebstoreSetting(System.String)">
            <summary>
            1221;Setting {0} is a webstore setting. Cannot drop webstore setting.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDemotePrincipal(System.String,System.String,System.String,System.String)">
            <summary>
            1227;Cannot demote database {0}:{1} while the mirror database {2}:{3} is offline.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotOfflinePrincipal(System.String,System.String,System.String,System.String)">
            <summary>
            1228;Cannot offline database {0}:{1} while the mirror database {2}:{3} is offline.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotOnlineMirror(System.String,System.String,System.String,System.String)">
            <summary>
            1229;Cannot online database {0}:{1} while the principal database {2}:{3} is offline. Online the principal database first.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MirroringDoesNotSupportServerDemoteWithNopromote">
            <summary>
            1231;Mirroring does not support server level demote with -nopromote option.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDefaultCluster">
            <summary>
            1232;You cannot drop the default cluster
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropClusterAssignedToServer">
            <summary>
            1233;You cannot drop a cluster assigned to one or more Server(s)
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryFileGroupIsMissing">
            <summary>
            1235;The "Primary" filegroup is missing. Sql Server requires that a Primary filegroup be defined for every database.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDefaultServerRole">
            <summary>
            1237;You cannot drop a default server role.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropServerRole(System.String)">
            <summary>
            1238;You cannot drop a server role assigned to one or more {0}(s).
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropServer(System.String)">
            <summary>
            1239;The server {0} is in use. It cannot be dropped.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ServerMustHaveDistributionDatabaseTemplate(System.String)">
            <summary>
            1240;You cannot assign the database template {0} to a server. Servers can only have distribution database templates.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SqlFailSafeSetCannotHaveDistributionDatabaseTemplate(System.String)">
            <summary>
            1241;You cannot assign the database template {0} to a sql fail safe set. Sql fail safe sets can only have database templates that are not for distribution databases.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotAssignServersToCrossClusters(System.String,System.Int32,System.String,System.String)">
            <summary>
            1242;The Deployment {0} at Fail Safe Set {1}. You cannot assign the Data Servers {2} and {3} to different clusters within the same FSS.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DatabaseNotForceRepairable(System.String,System.String)">
            <summary>
            1243;{0}:{1} is not force repairable. It is in the restoring state. Cannot recover from this copy.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringOjbectIsInUseCannotDelete(System.String)">
            <summary>
            1245;{0}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ActionIdMustExistInTheCollection(System.String,System.String)">
            <summary>
            1246;The ActionID "{0}" does not exist in the list of ProcessAction for for AlertProcess "{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ProcessActionDoesNotHaveAnAction(System.String,System.String)">
            <summary>
            1247;The ProcessAction "{0}" specifies the Action "{1}" for a parent, but it does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoredDatumInvalidAttribute(System.String,System.String)">
            <summary>
            1248;The MonitoredDatum "{0}" cannot have an assembly, class, or method specified for a type of "{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringMissingAttribute(System.String,System.String,System.String)">
            <summary>
            1249;The {0} object with a name of "{1}" has a missing attribute "{2}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringMissingProperty(System.String,System.String,System.String,System.String)">
            <summary>
            1251;The {0} object with a name of "{1}" has a missing property "{2}" for a type of "{3}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidPropertyValue(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            1252;The {0} object with a name of "{1}" has a property named "{2}" which has an invalid value "{3}".  Acceptable values are "{4}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidNextAction(System.String,System.String,System.String)">
            <summary>
             1253;For Action "{0}" the "{1}" value must match a name in the collection, or it must be "{2}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidMonitoreDatumForAlertRule(System.String,System.String,System.String)">
            <summary>
             1254;The the alert rule [{0}], there is an invalid Monitored Datum [{1}] in the {2} conditions
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidPropertyDataType(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            1255;The {0} object with a name of "{1}" has a property named "{2}" which has an invalid data type of "{3}".  The only acceptable value is "{4}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidPropertyName(System.String,System.String,System.String,System.String)">
            <summary>
            1256;The {0} object with a name of "{1}" has a property named "{2}", which is invalid.  The only acceptable property names are "{3}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidAlertRuleCondition(System.String,System.String)">
            <summary>
            1257;For Alert Rule [{0}] there is a generate alert condition for which the monitored datum [{1}] will cause an infinte loop with the resolve alert condition.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidTimeAlertRuleCondition(System.String,System.String,System.Int32,System.String)">
            <summary>
            1258;For Alert Rule [{0}] there is a [{1}] condition for which threhold needs to be greater than [{2}], the sampling frequency for the monitored datum [{3}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidXML(System.String,System.Int32,System.Int32)">
            <summary>
            1258;There was an error importing the XML: [{0}].\nThis occurred in line {1} at position {2}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidDataPartition(System.String)">
            <summary>
            1259;The Monitoring Data Partition Num for Cluster [{0}] must be greater than zero, but less than the total # of data partitions in the WstPerf deployment.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringBadMonitoredDatum(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            1260;The MonitoredDatum "{0}" has a {1} attribute of with a value of "{2}".  The {3} attribute is set to "{4}", which must be greater than or equal to the {1} attribute.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringAlertRuleMustHaveMonitoredDatumMapped(System.String,System.String,System.String,System.String)">
            <summary>
            1261;For the Server Role Mapping "{0}", the Alert Rule "{1}" has a {2} condition in which the monitored datum "{3}" is referenced.  It is not mapped to this Server Role, and must be for this alert rule to work.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ActionIdHasCircularReference(System.String,System.String)">
            <summary>
            1262;The ActionID "{0}" has a circular reference in the AlertProcess "{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MovingDataAlreadyInProgress(System.Int32)">
            <summary>
            1263;The Sql Fail Safe Set {0} is already in a Move Data state. Abort the process with 'wst par movedata -abort -FssNum ###' or Force the process to complete with 'wst par movedata -force -FssNum ###'
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.EmptyUID(System.String)">
            <summary>
            1265;UID for {0} cannot be Empty.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.EmptyProperties">
            <summary>
            1266;Properties is NULL or has an invalid Uid.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoAlertProcessRetryCount(System.String)">
            <summary>
            1267;If the AlertProcessName has a value, it is necessary to specify an AlertProcessRetryCount (greater than or equal to zero) for Alert Rule [{0}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoAlertProcessRetryPeriod(System.String)">
            <summary>
            1268;If the AlertProcessName has a value, it is necessary to specify an AlertProcessRetryPeriod (greater than zero) for Alert Rule [{0}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AlertProcessAttributeNotNeeded(System.String,System.String)">
            <summary>
            1269;The {0} is not necessary without an AlertProcessName for Alert Rule [{1}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InappropriateSqlFailSafeSetStatus(System.String,System.Int16)">
            <summary>
            1270;The {0} operation is inappropriate for fail safe set #{1}. The FSS is in the process of moving data between fail safe sets. Complete or abort the move data process and try again.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AllocateInvalidNumberOfServers">
            <summary>
            1271;With "None" as the PartitionType in the manifest and with the Topology set to "NoSecondaries", only one server can be used when creating a deployment.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AllocateServersMustBeInSameCluster">
            <summary>
            1272;With "None" as the PartitionType in the manifest, all servers must be in the same cluster.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidSeverity(System.String)">
            <summary>
            1273;The severity on the Alert Rule [{0}] must be greater than 0.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotFindClassInAction(System.String,System.String,System.String)">
            <summary>
            1274;Cannot find class [{0}] for Action [{1}] of type [{2}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotFindMethodInClass(System.String,System.String,System.String,System.String)">
            <summary>
            1275;Cannot find method [{0}] on class [{1}] for Action [{2}] of type [{3}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotApplyPropertyToClass(System.String,System.String,System.String,System.String)">
            <summary>
            1276;Cannot apply property [{0}] on class [{1}] for Action [{2}] of type [{3}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidPropertyTypeForClass(System.String,System.String,System.String,System.String)">
            <summary>
            1277;The passed in type [{0}] on property [{1}] for Action [{2}] is invalid, it needs to be [{3}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.StripeValidationFailure(System.String,System.String,System.String,System.String)">
            <summary>
            1278;Failure validating server {0} shares "{1}" as "{2}". The exception was: {3}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CleanUpHasStarted">
            <summary>
            1279;MoveData cannot be called. We are currently cleaning data. Call wst par cleanup
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.JobStatusInvalidDataPartition(System.String,System.String)">
            <summary>
            JobStatusInvalidDataPartition = 1280;The JobStatus Data Partition Num for Cluster [{0}] must be greater than zero, but less than the total # of data partitions in the [{1}] deployment.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropSqlFailSafeSet(System.Int32)">
            <summary>
            1281;Cannot drop Sql Fail Safe Set #{0} until all databases in the FSS are marked Needs Repair.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FssPurgeCannotBeUsedForVariable">
            <summary>
            1282;The fss purge command cannot be used for variable partitioned applications.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FssDropCannotBeUsedForFixed">
            <summary>
            1283;The fss drop command cannot be used for fixed partitioned applications.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.IncorrectSqlFssState(System.Int16,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus)">
            <summary>
            1284;The Sql Fail Safe ID {0} on the deployment {1} has an invalid state for this operation: {2}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MethodHasBeenDeprecated(System.String,System.String)">
            <summary>
            1285;The method [{0}] on the [{1}] object has been deprecated.  It should no longer be used.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PartitionOperationFailed(System.String)">
            <summary>
            1286;{0} failed on one or more partitions.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotBeUsedForVariable(System.String)">
            <summary>
            1287;The operation {0} cannot be used for variable partitioned environments.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InappropriateStatusDuringMoveData(System.String,System.String,System.String)">
            <summary>
            1288;The {0} operation is inappropriate for the database "{1}:{2}". Finish moving or cleaning data first.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringBadEventLogProperty(System.String)">
            <summary>
            1289;The MonitoredDatum "{0}", which is an EventLog type contains a negative property with no positive properties.  With a negative property, at least one positive property is necessary.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringBadEventLogProperty(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            1290;The MonitoredDatum "{0}" has a property "{1}" which has a value of {2}.  It must be greater or equal to the sampling frequency, which is {3}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoErrorUnitTest">
            <summary>
            Errors unit test
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoErrorUnitTest.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoErrorUnitTest.CreateAllErrors">
            <summary>
            Create All possible errors,
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoErrorUnitTest.ReturnSqlException">
            <summary>
            Return a forces SQL Exception for testing purposes.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoErrorUnitTest.TestOutput">
            <summary>
            Output to log and screen.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoErrorUnitTest.TestOutput.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoErrorUnitTest.TestOutput.Output(Microsoft.Webstore.Common.WmoException)">
            <summary>
            Output
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataResource.GetObject(System.String)">
            <summary>
            GetObject
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentResource.GetObject(System.String)">
            <summary>
            GetObject
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoAdminLock">
            <summary>
            Summary description for WmoAdminLock.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoConfig">
            <summary>
            Class for WmoConfig
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNamedObject">
            <summary>
            Base class for objects identified by name
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNamedObject.m_name">
            <summary>
            Name of the object
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNamedObject.m_isInCollection">
            <summary>
            Whether the object is inside a collection
            Names of objects inside a collection can't be changed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNamedObject.isUpdated">
            <summary>
            Determines whether or not this item has been updated or not
            </summary>        
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObject.Name">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObject.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObject.IsUpdated">
            <summary>
            Determines whether or not this item has been updated or not
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.GetCentralizedSettingOverride(System.String,System.Object)">
            <summary>
            Returns the Setting that matches the settingEntry name. If the settingEntry does not exist
            in the WebstoreMetaData.WebstoreSettings class, it will return the default.
            </summary>
            <param name="settingEntry"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.GetSqlFailSafeSet(System.String,System.String)">
            <summary>
            Find and return the WmoSqlFailSafeSet object which contains the given database
            If it doesn't exist, throw exception.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoSqlFailSafeSet Object which contains the given database</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.GetFileFailSafeSet(System.String,System.String)">
            <summary>
            Find and return the WmoFileFailSafeSet object which contains the given fileshare
            If it doesn't exist, throw exception.
            </summary>
            <param name="serverName"></param>
            <param name="fileSharePath"></param>
            <returns>WmoFileFailSafeSet Object which contains the given fileshare</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.WaitForClientPolling(System.Boolean)">
            <summary>
            Waits for client polling. If bWait = false, the user will be informed they should
            wait, but no wait will actually occur.
            </summary>
            <param name="bWait">true if can't continue until clients refreshed</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfig.WaitForActivePrimaryProcess(System.String,System.String)">
            <summary>
            Waits for Primary Active Connection to go down to Zero.
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.Management.Wmo.WmoConfig.WmoStatusEvent">
            <summary>
            Status Events
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Singleton">
            <summary>
            Singleton object. This is avaiable no matter where in the code base you are.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.ThreadPool">
            <summary>
            ThreadPool
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Manifests">
            <summary>
            collection of manifests
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Deployments">
            <summary>
            collection of Deployments
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.ServerRoles">
            <summary>
            collection of Server Roles
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.DataServers">
            <summary>
            collection of SqlServers
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Clusters">
            <summary>
            collection of Clusters
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.DatabaseTemplates">
            <summary>
            Collection of DatabaseTemplates
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Monitoring">
            <summary>
            Monitoring Configuration
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.Environment">
            <summary>
            Environment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoConfig.ConnectionString">
            <summary>
            Connection String
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDTC">
            <summary>
            Class for WmoDTC
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDTC.#ctor">
            <summary>
            DTCExecute helper
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDTC.Dispose">
            <summary>
            DTCExecute helper
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDTC.DTCExecute(System.Object,System.Object[],System.Reflection.MethodBase)">
            <summary>
            DTCExecute helper
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum">
            <summary>
            Enumerations used by Wmo
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MaxServerNameLength">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToSetupStep(System.String)">
            <summary>
            Convert a String into a WmoEnum.SetupStep.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStepToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep)">
            <summary>
            Convert a WmoEnum.SetupStep into a String.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType)">
            <summary>
            translating partitiontype to string
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToSecondaryType(System.String)">
            <summary>
            translating string to secondarytype
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType)">
            <summary>
            translating secondarytype to string
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType)">
            <summary>
            translating commandtype to string
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToCommandType(System.String)">
            <summary>
            Translating CommandType to string
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToDBStatus(System.String)">
            <summary>
            Convert a string into a WmoEnum.DBStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToDefaultDBStatus(System.String)">
            <summary>
            Convert a string into a WmoEnum.DBStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatusToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Convert a WmoEnum.DBStatus into a string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToFailSafeSetStatus(System.String)">
            <summary>
            Convert a string into a WmoEnum.FailSafeSetStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType)">
            <summary>
            Convert a WmoEnum.AdminLockResourceType into a string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceTypeToVerboseStr(Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType)">
            <summary>
            Convert a WmoEnum.AdminLockResourceType into a verbose string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToFileShareStatus(System.String)">
            <summary>
            Convert a string into a WmoEnum.FileShareStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatusToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus)">
            <summary>
            Convert a WmoEnum.FileShareStatus into a string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToPartitionStatus(System.String)">
            <summary>
            Convert a String into a WmoEnum.PartitionStatus
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatusToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatus)">
            <summary>
            Convert a WmoEnum.PartitionStatus into a string.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToBool(System.String,System.Boolean)">
            <summary>
            translating string to bool.
            </summary>summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToPublicationType(System.String)">
            <summary>
            Convert a String into a WmoEnum.PublicationType.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationTypeToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType)">
            <summary>
            Convert a WmoEnum.PublicationType into a String.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.StrToReplCallMethod(System.String)">
            <summary>
            Convert a String into a WmoEnum.ReplCallMethod.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethodToStr(Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethod)">
            <summary>
            Convert a WmoEnum.PublicationType into a String.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnum.GetAssemblyVersion">
            <summary>
            Used to get the Assembly version attribute of the executing assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep">
            <summary>
            Enumeration of steps in setup at which an object's source code may be executed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.BeforeTables">
            <summary>
            before creating tables
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.Tables">
            <summary>
            with tables
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.AfterTables">
            <summary>
            after creating tables, before creating views
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.Views">
            <summary>
            with views
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.AfterViews">
            <summary>
            after creating views, before creating sprocs
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.StoredProcedures">
            <summary>
            with sprocs
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.AfterStoredProcedures">
            <summary>
            after creating sprocs
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.SecurityRoles">
            <summary>
            with SecurityRoles
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.Jobs">
            <summary>
            After Security roles are installed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep.Publications">
            <summary>
            with Publications
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType">
            <summary>
            Enumeration of partitioning types available to a manifest.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType.None">
            <summary>
            Manifest is not written to support partitioning
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType.Fixed">
            <summary>
            Fixed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitioningType.Variable">
            <summary>
            Variable
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType">
            <summary>
            Enumeration of types of secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.NoSecondaries">
            <summary>
            No Secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.WriteAllCopies">
            <summary>
            replicas with no synchronization provided by webstore
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.Mirroring">
            <summary>
            Mirroring secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.SingleMaster">
            <summary>
            Single master replication
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SecondaryType.MultiMaster">
            <summary>
            multi master replication
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.TableType">
            <summary>
            Enumeration of types of objects registered as tables in the manifest.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.TableType.Table">
            <summary>
            Table
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.TableType.View">
            <summary>
            View
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType">
            <summary>
            Enumeration of command types.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.PrimaryOnly">
            <summary>
            WriteOnly
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.PrimaryThenSecondary">
            <summary>
            WriteThenRead
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.SecondaryThenPrimary">
            <summary>
            ReadThenWrite
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.PrimaryOrSecondary">
            <summary>
            ReadOrWrite
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.SecondaryOnly">
            <summary>
            ReadOnly
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.CommandType.WriteAllCopies">
            <summary>
            WriteAllCopies
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus">
            <summary>
            Status of a database
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.Online">
            <summary>
            The database is online.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.Offline">
            <summary>
            The database has been marked offline by admin.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.NoWriteAll">
            <summary>
            The database has been marked no write all.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.NeedsRepair">
            <summary>
            The database has been marked needed repaired.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.NotDeployed">
            <summary>
            The database is not deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus.Standby">
            <summary>
            The database is not deployed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus">
            <summary>
            Status of a Fail Safe Set
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus.NotDeployed">
            <summary>
            The fail safe set (SQL or File) is not deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus.Deployed">
            <summary>
            The fail safe set (SQL or File) is deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus.UpOrDowngrading">
            <summary>
            The SQL fail safe set is in progress of being upgraded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus.MovingData">
            <summary>
            The SQL fail safe set is in the process of having data moved to or from it. Suspend any promote/demote operations.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType">
            <summary>
            Enumeration of types of objects that can be locked in the config db.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.SQLFailsafeSet">
            <summary>
            SQLFailsafeSet
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.FileFailsafeSet">
            <summary>
            FileFailsafeSet
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.DistributionDatabase">
            <summary>
            DistribDB
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.Manifest">
            <summary>
            Manifest
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.Deployment">
            <summary>
            Deployment
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.Write">
            <summary>
            Write
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.Ticket">
            <summary>
            Ticket
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AdminLockResourceType.MoveData">
            <summary>
            MoveData lock. Disallows deployment, config and other MoveData locks but allows all others.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus">
            <summary>
            Status of a File Share
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus.Online">
            <summary>
            The FileShare is online.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus.Offline">
            <summary>
            The FileShare has been marked offline by admin.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus.NeedsRepair">
            <summary>
            The FileShare has been marked needsrepair by admin
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus.NotDeployed">
            <summary>
            The FileShare is not deployed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatus">
            <summary>
            Status of a partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatus.ReadWrite">
            <summary>
            ReadWrite
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PartitionStatus.ReadOnly">
            <summary>
            ReadOnly
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus">
            <summary>
            Status values for MoveData. Shared by the WstMoveData program.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.NotInitialized">
            <summary>
            Not initialized. This is set at first insert.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveInitialized">
            <summary>
            Initialed value when wst par movedata is called.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveJobStarted">
            <summary>
            Value when WMO submits the job to the JobFramework.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveStart">
            <summary>
            Set by WstMoveData when it first starts MoveData. Not set
            in WstConfig.PartitionMoveMap
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveData">
            <summary>
            Set by WstMoveData while the data is being moved. Not set
            in WstConfig.PartitionMoveMap
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveFinished">
            <summary>
            Set by WstMoveData as well as by Wmo when the data has finished
            being moved.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveRemapped">
            <summary>
            Set by WMO when the data partition has been drained and remapped.
            No equavalent for clean.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveFailed">
            <summary>
            Set by either WstMoveData.exe or WMO for several reasons. Equavalent to an abort,
            except that it is set by the code, rather then by the user. The Progress column
            will have the error message, which will be reflected in the Status.XML.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveAborted">
            <summary>
            Set by the user, either explicitly by wst mar movedata -abort, or by setting
            a database on a fail safe set involved in a move to NeedsRepair.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.MoveJobFailed">
            <summary>
            When the job framework cannot start a job. This can be due to the
            JobFrameworkAgent service not running, the WstMoveData.exe program
            is missing, or other reasons.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanInitialized">
            <summary>
            Can be set once the status of the partition is set to MoveRemapped.
            This is done by the call to wst par clean 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanJobStarted">
            <summary>
            Value when WMO submits the job to the JobFramework.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanStart">
            <summary>
            Set by WstMoveData when the clean process is started.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanData">
            <summary>
            Set by WstMoveData when the clean process is in the process of being cleaned.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanFinished">
            <summary>
            Set on both the WstConfig and application databases when the cleanup is
            finished.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanFailed">
            <summary>
            Set by either WstMoveData.exe or WMO for several reasons. Equavalent to an abort,
            except that it is set by the code, rather then by the user. The Progress column
            will have the error message, which will be reflected in the Status.XML.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanAborted">
            <summary>
            Wmo sets this when the customer has aborted the process.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.CleanJobFailed">
            <summary>
            When the job framework cannot start the job.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.NotInvolved">
            <summary>
            At start up time for the WstMoveData binary, it queries the WstConfig for
            details given a particular partition number. If the system is in a very bad state,
            it is possible that the partition being asked about is not involved in moving data.
            This can occur if the WstConfig database thinks that a move is going on, but the
            application database has no records. Possibly due to calling WstMoveData manually
            or a rogue job starting after a needsrepair.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus.ApplicationGetStatusFailure">
            <summary>
            During the move, if a failure occurs getting application data, then set this value.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType">
            <summary>
            Enumeration of publication types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType.Single">
            <summary>
            Single Master
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType.Multi">
            <summary>
            Multi Master
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethod">
            <summary>
            Enumeration of call methods for replication stored procedures
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethod.Call">
            <summary>
            call
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.ReplCallMethod.Mcall">
            <summary>
            Mcall
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus">
            <summary>
            Enumeration of job status
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus.Stopped">
            <summary>
            Stopped Nicely
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus.Missing">
            <summary>
            Missing
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.JobStatus.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.AuditResultStatus">
            <summary>
            Enumeration of audit result status
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AuditResultStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.AuditResultStatus.Failure">
            <summary>
            Manifest
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode">
            <summary>
            Enumeration of database recovery modes
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode.SIMPLE">
            <summary>
            Simple
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode.BULK_LOGGED">
            <summary>
            BulkLogged
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode.FULL">
            <summary>
            Full
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType">
            <summary>
            Enumeration of setup types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType.Setup">
            <summary>
            Deploying from scratch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType.Upgrade">
            <summary>
            For Upgrade. Includes Setup as well as upgrade only scripts.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType.Downgrade">
            <summary>
            For Downgrade. Only downgrade scripts.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet.GetSqlFailSafeSets(System.String)">
            <summary>
            Get the list of SqlFailSafeSets on the given server
            This is used by the WmoLockServerFailSafeSet object to
            get lock on all FailSafeSets of a server.
            NOTE: The FailSafeSets should always be returned in a 
            sorted order, so that deadlocks can be avoided.
            </summary>
            <param name="serverName">The name of the server on which
            to get the FailSafeSets</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet.GetFileFailSafeSets(System.String)">
            <summary>
            Get the list of FileFailSafeSets on the given server
            This is used by the WmoLockServerFailSafeSet object to
            get lock on all FailSafeSets of a server.
            NOTE: The FailSafeSets should always be returned in a 
            sorted order, so that deadlocks can be avoided.
            </summary>
            <param name="serverName">The name of the server on which
            to get the FailSafeSets</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection">
            <summary>
            Base collection class of named objects
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Add(Microsoft.Webstore.Management.Wmo.WmoNamedObject)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Clear">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.AddWithoutDuplicateCheck(Microsoft.Webstore.Management.Wmo.WmoNamedObject)">
            <summary>
            Adds an object to the collection without checking beforehand it it exists in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoNamedObjectCollection.  This is meant to 
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.WmoNamedObjectEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.WmoNamedObjectEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.WmoNamedObjectEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.  
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNamedObjectCollection.WmoNamedObjectEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNumberedObject">
            <summary>
            Base class for objects which are identified by number
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.CompareTo(System.Object)">
            <summary>
            IComparable.CompareTo implementation.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.ID">
            <summary>
            Number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.IDStr">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.DeploymentUid">
            <summary>
            UID of the deployment to which this object belongs
            set by the collection's Add method
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObject.IsBeingImportedNew">
            <summary>
            Determines if this object is in config or not.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection">
            <summary>
            Collection class for WmoNumberedObject
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.IndexOf(System.Int32)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.ObjectAtIndex(System.Int32)">
            <summary>
            Returns the object at a given index in the internal array.
            used only by the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Contains(System.Int32)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Add(Microsoft.Webstore.Management.Wmo.WmoNumberedObject)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Remove(System.Int32)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.DeploymentUid">
            <summary>
            the uid of the deployment that this collection belongs to
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.WmoNumberedObjectEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.WmoNumberedObjectEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.WmoNumberedObjectEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNumberedObjectCollection.WmoNumberedObjectEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.WmoAgent.WmoSqlCmdHelper">
            <summary>
            Class for WmoSqlCmdHelper.  Used to help execute generic SQL script files or system sprocs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlCmdHelper.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlCmdHelper.Dispose">
            <summary>
            DTCExecute helper
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommand">
            <summary>
            WmoCommand
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommand.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommand.StartAudit(System.Guid,System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Write audit entry into AdminHistory table at the beginning of operation
            </summary>
            <param name="auditUid">AuditUID</param>
            <param name="parentAuditUid">ParentAuditUID</param>
            <param name="startObjectStatus">StartObjectStatus</param>
            <param name="cmdObjectType">CmdObjectType</param>
            <param name="cmdOperation">CmdOperation</param>
            <param name="objectName">ObjectName</param>
            <param name="additionalArguments">AdditionalArguments</param>
            <param name="reason">Reason</param>
            <param name="sproc">sproc</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommand.FinishAudit(System.Guid,System.Int32,System.String)">
            <summary>
            Write audit entry into AdminHistory table at the end of operation
            </summary>
            <param name="auditUid">AuditUID</param>
            <param name="resultStatus">ResultStatus</param>
            <param name="errorMessage">ErrorMessage</param>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.InXmlPath">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.OutXmlPath">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.Reason">
            <summary>
            Reason
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.CmdObjectType">
            <summary>
            CmdObjectType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.CmdOperation">
            <summary>
            CmdOperation
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.ObjectName">
            <summary>
            ObjectName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.AdditionalArguments">
            <summary>
            AdditionalArguments
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.LogFilePath">
            <summary>
            LogFilePath
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.OverWrite">
            <summary>
            Flag to indicate that the object can be overwritten or not. If false, a
            warning will state that the object already exists.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.AuditUID">
            <summary>
            Audituid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.IsUTC">
            <summary>
            IsUTC
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.FromTime">
            <summary>
            FromTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.ToTime">
            <summary>
            ToTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.IsProxyCall">
            <summary>
            IsProxyCall
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommand.EventHandlerProxy">
            <summary>
            WmoStatusEventHandlerProxy
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.Management.Wmo.WmoCommand.WmoStatusEvent">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoStatusEventHandlerProxy">
            <summary>
            WmoStatusEventHandlerProxy
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStatusEventHandlerProxy.FireStatusEvent(System.Object,Microsoft.Webstore.Common.WmoStatusEventArgs)">
            <summary>
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.Management.Wmo.WmoStatusEventHandlerProxy.WmoStatusEvent">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandCluster">
            <summary>
            This class is used for Cluster manipulation, Import and Export
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandPartition
            </summary>    
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.Import">
            <summary>
            Import New Cluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.Purge">
            <summary>
            Purge Cluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.Export">
            <summary>
            Export Cluster Info
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandCluster.ClusterName">
            <summary>
            ClusterName
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase">
            <summary>
            class for WmoCommandDatabase
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandDatabase
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.#ctor">
            <summary>
            WmoCommandDatabase
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.AddConfig">
            <summary>
            add secondary configs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Import">
            <summary>
            Import New Database Info
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Setup">
            <summary>
            Setup Database 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Drop">
            <summary>
            Drop Database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.SetupRepl">
            <summary>
            Setup replication from database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.DropRepl">
            <summary>
            Drop replication from database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Offline">
            <summary>
            Mark Database Offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.NeedsRepair">
            <summary>
            Mark Database for Repair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Repair">
            <summary>
            Repair Database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Online">
            <summary>
            Mark Database Online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Standby">
            <summary>
            Mark Database Standby
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Promote">
            <summary>
            Promote Database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Demote">
            <summary>
            Demote Database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Updateinfo">
            <summary>
            Update Database Location 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.MarkAndTestRepl">
            <summary>
            Mark and Test Replication
            </summary>
            <remarks> Configurable Properties: PublishingServerName:	The server hosting the publishing database. PublishingDBName:	The publishing database. SubscribingServerName:	The server hosting the subscribing database. If a subscribing database/server is not specified, all outgoing replication streams from the publisher are tested. SubscribingDBName: The subscribing database.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.MarkNeedsRepl">
            <summary>
            For MultiMaster a database, will reset the NeedsReplication column between the given dates.
            This forces the row to replicate.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.History">
            <summary>
            Admin History of a database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.Status">
            <summary>
            Status of a database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.ServerName">
            <summary>
            ServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.DatabaseName">
            <summary>
            DatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.PublishingServerName">
            <summary>
            PublishingServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.PublishingDBName">
            <summary>
            PublishingDBName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.SubscribingServerName">
            <summary>
            SubscribingServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.SubscribingDBName">
            <summary>
            SubscribingDBName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.DataCenterName">
            <summary>
            DataCenterName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.SqlFailSafeSetID">
            <summary>
            SqlFailSafeSetID
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsDropPhysical">
            <summary>
            IsDropPhysical
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsNoBackupRestore">
            <summary>
            IsNoBackupRestore
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForceRepair">
            <summary>
            IsForceRepair
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForceNeedsRepair">
            <summary>
            IsForceNeedsRepair
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForceOffline">
            <summary>
            IsForceOffline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForcePromote">
            <summary>
            IsForcePromote
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsForceDropRepl">
            <summary>
            IsForceDropRepl
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsJobsOnly">
            <summary>
            IsJobsOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.IsReplicationOnly">
            <summary>
            IsReplicationOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.StartTime">
            <summary>
            StartTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabase.EndTime">
            <summary>
            EndTime
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate">
            <summary>
            class for WmoCommandDatabaseTemplate
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.#ctor">
            <summary>
            WmoCommandDatabase
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandDatabaseTemplate Serializor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.Import">
            <summary>
            Import New Database Template Info
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.Export">
            <summary>
            Export Database Template Info
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.Purge">
            <summary>
            Purge specified Database Template or any unattached database template.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.AssignSqlFss">
            <summary>
            Assign DatabaseTemplate(s) to SqlFailSafeSet(s)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.AssignServer">
            <summary>
            Assign DatabaseTemplate(s) to SqlFailSafeSets or DataServers.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.CustomBackupScript">
            <summary>
            Set the Custom Backup string for Litespeed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.CustomRestoreScript">
            <summary>
            Set the Custom Restore string for Litespeed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.DatabaseTemplateName">
            <summary>
            DatabaseTemplateName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.SqlFailSafeSetId">
            <summary>
            SqlFailSafeSetId
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.ServerName">
            <summary>
            ServerName, used for assigning a distribution database template to a server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDatabaseTemplate.Parameter">
            <summary>
            Parameter is used for the custom Litespeed parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment">
            <summary>
            WmoCommandDeployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandDeployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Import">
            <summary>
            Import Deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Setup">
            <summary>
            Setup Deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Export">
            <summary>
            Export Deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Upgrade">
            <summary>
            Run new manifests scripts from new manifest. Called after UpdateVersion has been called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Downgrade">
            <summary>
            Run downgrade scripts in order to restore a system to previous version.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.UpdateVersion">
            <summary>
            Update Deployment's Manifest Version as part of Deployment Upgrade
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.List">
            <summary>
            Lists out all Deployments.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Status">
            <summary>
            Get Status of this deployment into an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Drop">
            <summary>
            Drop Deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Settings">
            <summary>
            Modify/View Deployment Settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.History">
            <summary>
            Admin History of a deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.Allocate">
            <summary>
            Auto Allocate
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.AddAccount">
            <summary>
            Add an account to the deployment role. 
            </summary>
            <remarks>Configurable properties: "DeploymentName" - The deployment name needed for setup with the original manifest. "UserName" - The account username (eg. domain\username). “SecurityRole" - The security role to add the account to. "Reason" - The reason for adding the account.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.DropAccount">
            <summary>
            Drop Account from ConfigDB Role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.UpdateTicket">
            <summary>
            Update Deployment Ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.SettingName">
            <summary>
            SettingName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.NewValue">
            <summary>
            NewValue
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.NewManifestVersion">
            <summary>
            NewManifestVersion
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.UserName">
            <summary>
            UserName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.SecurityRole">
            <summary>
            SecurityRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsVerbose">
            <summary>
            IsVerbose
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsReplicationOnly">
            <summary>
            IsReplicationOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsForce">
            <summary>
            IsForce
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsReplTearDown">
            <summary>
            IsReplTearDown
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.SqlFSSNum">
            <summary>
            SqlFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.NoAutoAllocate">
            <summary>
            NoAutoAllocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandDeployment.IsRollingUpgrade">
            <summary>
            IsRollingUpgrade - Used during dep upgrade. Indicates that each database in the FSS
            must be marked offline before it is upgraded, then marked back online before the next
            is upgraded.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandEnvironment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.#ctor">
            <summary>
            WmoCommandEnvironment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.Settings">
            <summary>
            View/Change Environment Settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.Genregfile">
            <summary>
            Generate Client Registry File
            THIS CODE IS ONLY REQUIRED FOR NATIVE SUPPORT. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.AddAccount">
            <summary>
            Add Account to ConfigDB Role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.DropAccount">
            <summary>
            Drop Account from ConfigDB Role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.Status">
            <summary>
            Get Status of this Site into an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.History">
            <summary>
            Admin History
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.Version">
            <summary>
            Version information for the Wmo.DLL, the Wst.exe and WstConfig database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.SettingName">
            <summary>
            SettingName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.NewValue">
            <summary>
            NewValue
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.UserName">
            <summary>
            UserName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.SecurityRole">
            <summary>
            SecurityRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.RegfilePath">
            <summary>
            RegfilePath
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.DataCenter">
            <summary>
            DataCenter
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandEnvironment.IsVerbose">
            <summary>
            IsVerbose
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet">
            <summary>
            Summary description for WmoCommandFailSafeSet.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandFailSafeSet
            </summary>    
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Import">
            <summary>
            Imports an XML Delta file that includes and Sql and File Fail
            Safe Set nodes. Then registers them with the WstConfig.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Setup">
            <summary>
            Calls Deploy on the items registered from Import.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Purge">
            <summary>
            Purge FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Drop">
            <summary>
            Drops a sql fail safe set for a variable partitioned application.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.DefaultPrimary">
            <summary>
            Set Default Primary for a FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Offline">
            <summary>
            Marks offline all databases in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Online">
            <summary>
            Marks online all databases in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Promote">
            <summary>
            Promotes the Default Primary database in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Demote">
            <summary>
            Demotes all databases in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.SetupRepl">
            <summary>
            Setup replication for the entire fail safe set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.DropRepl">
            <summary>
            Drop replication for sql fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.ProvPref">
            <summary>
            Set ProvPref for a FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.ProvOn">
            <summary>
            Set ProvPref for a FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.ProvOff">
            <summary>
            Set ProvPref for a FailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.MarkNeedsRepl">
            <summary>
            For MultiMaster, will reset the NeedsReplication column between the given dates.
            This forces the row to replicate. Works on all databases in the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.History">
            <summary>
            Admin History of a failsafeset
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.Updateinfo">
            <summary>
            Update Database or Fileshare Locations
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.ChangeWitness">
            <summary>
            Changes the witness server for this Failsafeset
            for a given mirroring deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.SyncMirroring">
            <summary>
            For a FSS in a Mirroring Deployment, this updates the status and
            ensures the data is accurate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.NewPrimaryName">
            <summary>
            NewPrimaryName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.SQLFSSNum">
            <summary>
            SQLFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.FileFSSNum">
            <summary>
            FileFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.NewProvPref">
            <summary>
            ProvPref
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.IsForceDropRepl">
            <summary>
            IsForceDropRepl
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.IsForceOffline">
            <summary>
            IsForceOffline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.IsForcePromote">
            <summary>
            IsForcePromote
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.StartTime">
            <summary>
            StartTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.EndTime">
            <summary>
            EndTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFailSafeSet.NewWitnessServerName">
            <summary>
            The new witness server name for mirroring deployment
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandFileShare
            </summary>    
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.#ctor">
            <summary>
            WmoCommandFileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Import">
            <summary>
            Add Fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Setup">
            <summary>
            Setup FileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Drop">
            <summary>
            Drop Fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Offline">
            <summary>
            Mark Fileshare Offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.NeedsRepair">
            <summary>
            Mark Fileshare for Repair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Online">
            <summary>
            Mark Fileshare Online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Promote">
            <summary>
            Promote Fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Demote">
            <summary>
            Demote Fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Repair">
            <summary>
            Repair Fileshare 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.Updateinfo">
            <summary>
            Update Fileshare Location 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.History">
            <summary>
            Admin History of a fileshare
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.ServerName">
            <summary>
            ServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.FileSharePath">
            <summary>
            FileSharePath
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.IsDelete">
            <summary>
            IsDelete
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.IsForceRepair">
            <summary>
            IsForceRepair
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandFileShare.FileFSSNum">
            <summary>
            FileFSSNum
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandJobs">
            <summary>
            WmoCommandJobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Import">
            <summary>
            Imports/update Jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Export">
            <summary>
            Export view of Jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Drop">
            <summary>
            Drop job/JobSchedule
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Disable">
            <summary>
            Disable the job
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.Enable">
            <summary>
            Enable the job
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.JobName">
            <summary>
            The name of the jobs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandJobs.ScheduleNumber">
            <summary>
            Job schedule number
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandManifest">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandManifest
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.Import">
            <summary>
            Import a Manifest Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.Export">
            <summary>
            Exports the Manifest. Uses DoExportSource and DoExportGeneratedObjects
            to determine if these files should be created as part of the export.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.List">
            <summary>
            Lists out all Manifests and the deployments that use them.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.Diff">
            <summary>
            Report the differences between two manifest versions.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.Purge">
            <summary>
            Purge manifest
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.History">
            <summary>
            Admin History of a manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.ManifestName">
            <summary>
            ManifestName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.ManifestVersion">
            <summary>
            ManifestVersion
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.ManifestVersionForDiff">
            <summary>
            ManifestVersionForDiff
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.DoExportSource">
            <summary>
            Flag to indicate whether to export the source or not.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.DoExportGeneratedObjects">
            <summary>
            Flag to indicate whether to export the generate objects source or not.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandManifest.ExportManifestVersion">
            <summary>
            The user has the option of choosing what version of the Manifest
            to export. If not specified, the most recent Manifest is used.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandMonitoring
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.Import">
            <summary>
            Import a Monitoring Configuration Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.Export">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.DeleteObject">
            <summary>
            delete perfcounter
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.DeleteMapping">
            <summary>
            delete perfcounter
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.History">
            <summary>
            Admin History of a monitoring configuration
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.MonitoringObjectName">
            <summary>
            Monitoring Object Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.MonitoringObjectType">
            <summary>
            Monitoring Object Type
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.ServerRole">
            <summary>
            Monitoring ServerRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.MonitoredDatumName">
            <summary>
            Monitoring MonitoredDatumName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandMonitoring.AlertRuleName">
            <summary>
            Monitoring AlertRuleName
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandPartition">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandPartition
            </summary>    
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Import">
            <summary>
            Imports an XML Delta file that includes new datapartition mapping. 
            Then registers them with the WstConfig.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Map">
            <summary>
            Maps a DataPartition to a Sql and/or File Fail Safe Set.
            Each map happens one at a time.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Cleanup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.ReadOnly">
            <summary>
            Mark DataPartition ReadOnly
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.ReadWrite">
            <summary>
            Mark DataPartition ReadWrite
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Status">
            <summary>
            View Data Partition Status
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.MoveData">
            <summary>
            Move Data 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.History">
            <summary>
            Admin History of a data partition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.DataPartition">
            <summary>
            DataPartition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.NewSqlFSSNum">
            <summary>
            NewSqlFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.OldSqlFSSNum">
            <summary>
            OldSqlFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.NewFileFSSNum">
            <summary>
            NewFileFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.OldFileFSSNum">
            <summary>
            OldFileFSSNum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.IsForce">
            <summary>
            IsForce
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Verbose">
            <summary>
            Verbose
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.BatchSize">
            <summary>
            BatchSize
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.CleanupInterval">
            <summary>
            CleanupInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.IsForceMoveData">
            <summary>
            When true, the WstConfig database is updated to show that the move data is complete,
            without actually moving data.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.IsForceCleanData">
            <summary>
            When true, the WstConfig database is updated to show that the clean data is complete,
            without actually cleaning data.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.BulkCopyTimeout">
            <summary>
            Time out value used during bulk copy processing. Default is 8 hours (28800)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.NumThreads">
            <summary>
            NumThreads
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.Interval">
            <summary>
            Interval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandPartition.UseNew">
            <summary>
            UseNew - A flag to indicate using old MoveData code or new MoveData code.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandServer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            WmoCommandPartition
            </summary>    
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Offline">
            <summary>
            Mark Server Offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Online">
            <summary>
            Mark Server Online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.NeedsRepair">
            <summary>
            Mark Server for Repair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Repair">
            <summary>
            Repair Server 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Promote">
            <summary>
            Promote Server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Demote">
            <summary>
            Demote Server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.List">
            <summary>
            List all servers into an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Status">
            <summary>
            Get Status of servers into an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Import">
            <summary>
            Import New Server 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Purge">
            <summary>
            Purge Server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.History">
            <summary>
            Admin History of a server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.ProvOn">
            <summary>
            Set Server ProvOn
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.ProvOff">
            <summary>
            Set Server ProvOff
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Reboot">
            <summary>
            Reboot the server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.CleanRebootStatus">
            <summary>
            Reboot the server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Export">
            <summary>
            Export Servers
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.ServerName">
            <summary>
            ServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsNoPromote">
            <summary>
            IsNoPromote
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsForceOffline">
            <summary>
            IsForceOffline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsForceNeedsRepair">
            <summary>
            Used to force the application database into a needsrepair state without attempting to
            promote (in the case of a Primary NeedsRepair call), drop jobs or drop replication.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsJobsOnly">
            <summary>
            IsJobsOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsReplicationOnly">
            <summary>
            IsReplicationOnly
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsVerbose">
            <summary>
            IsVerbose
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.Topology">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.IsRebootOnly">
            <summary>
            Whether the server reboot command Reboot only. 
            If true then there will be no pre/post QC checks done.
            Only FSS locks will be taken.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServer.RebootTimeout">
            <summary>
            The timeout value for reboot command.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole">
            <summary>
            The command class to import/export server roles
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.Import">
            <summary>
            Imports/update centralized settings 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.Export">
            <summary>
            Export view of the server roles
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.Purge">
            <summary>
            purge a server role
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCommandServerRole.Role">
            <summary>
            ServerName
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandSettings">
            <summary>
            The command class to import/export centralized settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandSettings.Import">
            <summary>
            Imports/update centralized settings 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandSettings.Export">
            <summary>
            Export view of the centralized settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandSettings.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCommandUnitTest">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandUnitTest.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCommandUnitTest.TestErrors">
            <summary>
            Test Errors
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoXml.XmlFileName">
            <summary>
            Once the Xml file has been loaded and validated, make the file
            name available to subsequent classes that use this abstract class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoXml.XmlDirectory">
            <summary>
            XmlDirectory
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoXml.RawXml">
            <summary>
            Once the Xml file has been loaded and validated, make the raw
            Xml available to subsequent classes that use this utility class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoXml.XmlDoc">
            <summary>
            Once the Xml file has been loaded and validated, make the
            XmlDocument available to subsequent classes.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoXmlBuilder">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoXmlBuilder.#ctor(System.String)">
            <summary>
            Constructor for XML that requires an XSD
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoXmlBuilder.#ctor(System.String,System.String)">
            <summary>
            Constructor 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCluster">
            <summary>
            Class for Cluster instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.InitializeServers">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.PostInitialize">
            <summary>
            Do any post initialization steps, if necessary
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.IsEmpty">
            <summary>
            whether the cluster is empty for delete
            (ie. no svr left)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoCluster.Purge">
            <summary>
            Purge an individual cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.Name">
            <summary>
            Name of the cluster.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.Uid">
            <summary>
            Uid of the Cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.Path">
            <summary>
            The path of the cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.MonitoringServerUid">
            <summary>
            MonitoringServerUid of the Cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.MonitoringDataPartitionNum">
            <summary>
            MonitoringDataPartitionNum of the Cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.JobStatusDataPartitionNum">
            <summary>
            JobStatusDataPartitionNum of the Cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.Servers">
            <summary>
            Servers on this cluster
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoCluster.IsCommon">
            <summary>
            The cluster used for cross cluster communications.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoClusterCollection">
            <summary>
            Collection class for WmoDataServer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Add(Microsoft.Webstore.Management.Wmo.WmoCluster)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            this method uses a flag to indicate new or old Xml format.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.PostInitialize">
            <summary>
            Does a call to update the Clusters, now that the DataServers have been loaded
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            initializes dataserver, ipaddressswitches
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Register">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Purge">
            <summary>
            Purge any cluster not assigned to a DataServer.
            Do not purge defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoClusterCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabase">
            <summary>
            Base class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.GetHashCode">
            <summary>
            Overridden method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Equals(System.Object)">
            <summary>
            Overridden method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Initialize(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Guid)">
            <summary>
            Initialize from passing in parameters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from xml dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register this database. Note internal consistency must be validated
            before getting to this step. This step is inside a DTC.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Register">
            <summary>
            Register this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Initialize(Microsoft.Webstore.WstClient.WstDataReader,System.Guid,System.Guid)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used for bulk insert during register.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Deploy">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Deploy(Microsoft.Webstore.Management.Wmo.WmoEnum.SetupType,Microsoft.Webstore.Management.Wmo.WmoManifest,System.Boolean)">
            <summary>
            Upgrades a Deployment in the "Real world".
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.UnRegister(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            UnRegister this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.UnDeploy">
            <summary>
            Removes the databases etc from the 'real' world
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Backup(Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode,System.Boolean)">
            <summary>
            Backup this database. Will use LiteSpeed if ListeSpeed is determined to be installed on both systems.
            FileGroups will be validated.
            </summary>
            <param name="recoveryMode"></param>
            <param name="doLogBackup"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Restore(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode,System.Boolean)">
            <summary>
            Restores over this database. LiteSpeed will be used if it is installed on bith systems.
            Supports mirroring with the withRecovery and recoveryMode parameters.
            </summary>
            <param name="sourceDatabase"></param>
            <param name="withRecovery"></param>
            <param name="recoveryMode"></param>
            <param name="doLogRestore"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.AggressiveDropDB">
            <summary>
            drops this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.Drop">
            <summary>
            drops this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.SetupPublication(System.String,System.String,System.String,System.Data.DataTable,System.Boolean,System.Boolean)">
            <summary>
            sets up the described publication
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DropPublication(System.String)">
            <summary>
            drops up the described publication
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.SetupSubscription(System.String,System.String,System.String,System.Boolean)">
            <summary>
            sets up the described subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DropSubscription(System.String,System.String,System.String)">
            <summary>
            drops up the described subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DropAllSubscription(System.String)">
            <summary>
            drops up the described subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DeployJobs">
            <summary>
            Used to deploy (setup) jobs on the database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.EnableJobs">
            <summary>
            Enable and start jobs on the database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DisableJobs">
            <summary>
            Disable and stop jobs on the databasse.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DisableJobs(Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection)">
            <summary>
            Disable and stop jobs in the collection passed in
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.SetupSuitableJobs">
            <summary>
            Installs or drops jobs that are supposed to be on this database.
            In other words, if the IsPrimary flag is set for this database,
            then drop all Secondary Only jobs and install all Primary Only
            jobs, Leave jobs that are on both the Primary and Secondary alone.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.DropJobs(System.Boolean)">
            <summary>
            Drops jobs that are supposed to be on this database.
            See summary for SetupSuitableJobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsLiteSpeedInstalled">
            <summary>
            Check to see if the third party software Litespeed is installed.
            Typically, this method will be called twice. One for the backup
            server and once for the restore server.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Uid">
            <summary>
            Uid of this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.SqlServerName">
            <summary>
            Name of the server hosting this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.DatabaseName">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.DeploymentUid">
            <summary>
            Guid of the deployment that this db belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.ManifestUid">
            <summary>
            Guid of the manifest that this db belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.SqlFailSafeSetID">
            <summary>
            Sql Fail Safe Set that this db belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Jobs">
            <summary>
            Jobs registered on this database (not replication/mirroring jobs)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Ticket">
            <summary>
            Ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Status">
            <summary>
            Status: IsDeployed, IsOffline, IsNeedsRepair
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.DefaultStatus">
            <summary>
            DefaultStatus: Online/Standby
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsPrimary">
            <summary>
            Whether this database is offline (admin access only)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsDefaultPrimary">
            <summary>
            Whether this database needs repairing (unreachable)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.IsDeployed">
            <summary>
            Whether the database has been deployed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.Latency">
            <summary>
            The replication latency in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.LatencyBucket">
            <summary>
            The replication latency bucket.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabase.ReplicationLatencies">
            <summary>
            All publications inserting into this database have a latency and a latencybucket.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.IndexOf(System.String,System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given uid.
            </summary>
            <returns>
            The 0-based index of the first object with the uid.
            -1 if the collection doesn't contain an object with this uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Contains(System.String,System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Contains(System.Guid)">
            <summary>
            Tests whether the collection contains an object of the given Uid.
            </summary>
            <returns>
            true if the collection contains an object identified by the Uid.
            false if the collection doesn't contain an object with this Uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Remove(System.String,System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used by the Register FailSafeSet collection for bulk inserts.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Item(System.String,System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.DeploymentUid">
            <summary>
            the uid of the deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.SqlFailSafeSetID">
            <summary>
            Sql FailSafe Set that this db belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.SqlServerName">
            <summary>
            Server that this db belongs to
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.WmoDatabaseEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.WmoDatabaseEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.WmoDatabaseEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseCollection.WmoDatabaseEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate">
            <summary>
            This class is used for defining the file groups, logical files, and
            backup stripes related to the creation, backing up and restoring of
            sQl databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.#ctor(System.Guid)">
            <summary>
            Default constructor defines the Uid of the object.
            The name of the object must still be defined before it can be registered.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            This method is usually called from the WmoDatabaseTemplateCollection Initialize method,
            but can also be called from a call to WspGetDatabaseTemplate.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the template. This method is called with Dtc already started at the collection level.
            All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.RegisterLitespeedCustom">
            <summary>
            Register the template. This method is called with Dtc already started at the collection level.
            All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Purge">
            <summary>
            Purge the individual templates
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.CreateDatabaseRestoreCmd(System.String,System.String,System.String,System.Boolean,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoEnum.DBRecoveryMode,System.Boolean)">
            <summary>
            This command creates a string that will be used to restore a database. NOTE: if the
            withRecovery flag is set to false for the full restore, it must be set to false for
            the log restore. Otherwise the resultant log file can not be restored.
            </summary>
            <param name="sourceServerName"></param>
            <param name="sourceDatabaseName"></param>
            <param name="destinationDatabaseName"></param>
            <param name="isLiteSpeedInstalled"></param>
            <param name="withRecovery"></param>
            <param name="recoveryMode"></param>
            <param name="isLogRestore"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.GetAllLogicalFilesInThisDatabaseTemplate">
            <summary>
            Gets all LogicalFiles for the DatabaseTemplate. The class structure doesn't
            work well for this because the LogicalFiles are split into FileGroups.
            Specifically for Backup/Restore the FileGroup component is not used.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.DatabaseTemplateUid">
            <summary>
            Uid of this DatabaseTemplate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.DatabaseTemplateName">
            <summary>
            Name of this DatabaseTemplate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Description">
            <summary>
            Description of this DatabaseTemplate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.FileGroups">
            <summary>
            The FileGroups that belong to this DatabaseTemplate.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.LogFile">
            <summary>
            The LogFile that belongs to this DatabaseTemplate.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.Stripes">
            <summary>
            The Stripe collection that belong to this DatabaseTemplate.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.IsInCollection">
            <summary>
            Whether this object is in a collection (set by the add/remove
            methods for collections determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.IsOld">
            <summary>
            Used when the Sql Initialize fetches the DatabaseTemplate.
            It is for objects that already exist in the WstConfig, and therefore
            do not need to be registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.IsDistributionOnly">
            <summary>
            Flag to determine what kind of database template this is
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.LitespeedCustomBackup">
            <summary>
            Custom Litespeed backup script. Appended to Backup command string.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate.LitespeedCustomRestore">
            <summary>
            Custom Litespeed Restore script. Appended to Restore command string.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given uid.
            </summary>
            <returns>
            The 0-based index of the first object with the uid.
            -1 if the collection doesn't contain an object with this uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Contains(System.Guid)">
            <summary>
            Tests whether the collection contains an object of the given Uid.
            </summary>
            <returns>
            true if the collection contains an object identified by the Uid.
            false if the collection doesn't contain an object with this Uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplate)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Uses the properties of each item and sub item to create an XML object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Register">
            <summary>
            Register all DatabaseTemplates in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseTemplateCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml)">
            <summary>
            Passed in a WmoXml object, find all elements relating to DatabaseTemplates.
            With each element and sub-element, create the objects that make up the
            DatabaseTemplates.
            </summary>
            <param name="objXml"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Initialize">
            <summary>
            Execute WspGetAllDatabaseTemplate. This will return four results sets.
            They are:
                all DatabaseTemplates
                all FileGroups in all DatabaseTemplates
                all LogicalFiles in all FileGroups in all DatabaseTemplates
                all Stripes in all DatabaseTemplates
            Takes these results and create the objects and sub-objects that make up
            a DatabaseTemplate.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Purge">
            <summary>
            Purge any template not assigned to a DataServer or SqlFailSafeSet.
            Do not purge default templates.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.WmoDatabaseTemplateEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.WmoDatabaseTemplateEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.WmoDatabaseTemplateEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDatabaseTemplateCollection.WmoDatabaseTemplateEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection">
            <summary>
            Collection class for WmoDataPartition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.#ctor(System.Int32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.IndexOf(System.Int32)">
            <summary>
            Returns the index of the first object of the given ID.
            </summary>
            <returns>
            The 0-based index of the first object with the ID.
            -1 if the collection doesn't contain an object with this ID.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Contains(System.Int32)">
            <summary>
            Tests whether the collection contains an object of the given ID.
            </summary>
            <returns>
            true if the collection contains an object identified by the ID;
            false if the collection doesn't contain an object with this ID.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Initialize">
            <summary>
            Initialize from the config db to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
            <param name="objXml"></param>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Initialize(System.Int32)">
            <summary>
            Initialize to a certain size
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register all data partitions
            need another function to update individual ones
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.RegisterPartition(Microsoft.Webstore.Management.Wmo.WMOSprocs,System.Int16,System.Int16,System.Int16)">
            <summary>
            Register one data partition for re-map after Add Partition.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoNamedObjectCollection.  This is meant to 
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.GetDPStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32,System.Int32@)">
            <summary>
            GetStatus method for the DataServer object. Called individually
            or by the DataServerCollection. Tell child objects to report their status.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Validate(System.Boolean)">
            <summary>
            Validates the internal memory configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.DeploymentUid">
            <summary>
            the uid of the deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Deployment">
            <summary>
            The deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.DataPartitions">
            <summary>
            The array of DataPartitions.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Ticket">
            <summary>
            ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.Count">
            <summary>
            count of partitions in collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.BeginNumber">
            <summary>
            When numbering the sql fail safe sets, this is the beginning number to start with
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.WmoDataPartitionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.WmoDataPartitionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.  
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartitionCollection.WmoDataPartitionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataPartition.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.ID">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.SqlFailSafeSetID">
            <summary>
            Sql Fail Safe Set that this data partition is mapped to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.FileFailSafeSetID">
            <summary>
            File Fail Safe Set that this data partition is mapped to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.Ticket">
            <summary>
            ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.Status">
            <summary>
            Status of the Partition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataPartition.StatusStr">
            <summary>
            String converstion for Status of the Partition
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataServer">
            <summary>
            Class for DataServer instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.InitializeDatabases">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.InitializeFileShares">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.ReInitialize">
            <summary>
            ReInitialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.InsertIPAddrSwitch(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            insert a IPAddress Switch pair into the array of struct
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Initialize(System.String)">
            <summary>
            Initialize to defaults
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.InitializeForAssign(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Processes Xml to set the DatabaseTemplate. The rules are: If the element
            is not specified, use the preset. If the preset is not specified, use the
            default. In all cases verify the templates exist.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.UnRegisterIPs">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DeployValidate">
            <summary>
            Validates IP addresses
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the DataServer object. Called individually
            or by the DataServerCollection. Tell child objects to report their status.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.IsEmpty">
            <summary>
            Whether the data server is in use for any other purpose.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Assign">
            <summary>
            Assign DatabaseTemplate to the server.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Assign(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Assign the database template to the server.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Demote(System.Boolean,System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            demote all databases and fileshares on server, and promote replicas
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PrepareForDemoteDatabases(System.Boolean)">
            <summary>
            This method is helper to find the best secondaries to promote (if applicable).
            We will try to find the best online secondary to promote for the default
            primaries that are being demoted, such that we balance the new primaries accross the
            available data servers as best as possible.
            </summary>
            <param name="isNoPromote">true if not allowed to auto-promote</param>
            <returns>array of SvrDbDemoteHelper with secondary to be promoted</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteDatabases(System.Boolean,System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Called by Multithread
            demote all databases on server, and promote replicas
            The fssLocks is used by the svr reboot command. 
            This instance is used to pass the lock object to each
            newly spawned thread so that it can inherit the already 
            taken lock
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteDatabases(System.Boolean,System.Guid,System.String)">
            <summary>
            Called by Multithread
            demote all databases on server, and promote replicas
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteDatabase(System.Object)">
            <summary>
            Called by MultiThread
            demote a database and promote its replica
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteDatabase(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Boolean,System.Collections.ArrayList,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Called by Single Thread
            demote a database and promote its replica
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.DemoteFileShares(System.Boolean,System.Guid,System.String)">
            <summary>
            Called by Single Thread
            demote all fileshares on server, and promote replicas
            currently not using IsNeedsRepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Offline(System.Boolean,System.Guid,System.Boolean,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Mark server offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.OfflineDatabases(System.Boolean,System.Guid,System.Boolean,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Called by MultiThread
            Mark all databases on server offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.OfflineFileShares(System.Boolean,System.Guid,System.String)">
            <summary>
            Called by Single Thread
            Mark all fileshares on server offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Promote(System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            promote all databases on server, and demote replicas
            currently not checking isneedsrepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PromoteDatabases(System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Called by Multi Thread
            promote all databases on server, and demote replicas
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PromoteDatabase(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Called By Single Thread
            promote a database and demote its replica
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PromoteDatabase(System.Object)">
            <summary>
            Called by Multi Thread
            promote a database and demote its replica
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.PromoteFileShares(System.Guid,System.String)">
            <summary>
            Called by Single Thread
            promote all fileshares on server, and demote replicas
            currently not checking isneedsrepair value
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Online(System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Mark server online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.OnlineDatabases(System.Guid,System.String,Microsoft.Webstore.Management.Wmo.Common.WmoLockServerFailSafeSet)">
            <summary>
            Called by Multi Thread
            Mark all databases on server online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.OnlineFileShares(System.Guid,System.String)">
            <summary>
            Called by Single Thread
            Mark all fileshares on server online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.Repair(System.Guid,System.String)">
            <summary>
            Repair server -- repair all databases on server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.RepairDatabases(System.Guid,System.String)">
            <summary>
            repair all databases on server
            called by multi-thread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.RepairFileShares(System.Guid,System.String)">
            <summary>
            repair all fileshares on server
            called by single
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.Name">
            <summary>
            Name of the data server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.Uid">
            <summary>
            Uid of the Data Server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DataCenterName">
            <summary>
            The name of the data center
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.IPAddressSwitches">
            <summary>
            array of ipaddress and switches
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DeploymentUids">
            <summary>
            array of deploymentuids
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.Description">
            <summary>
            The name of the data center
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DistributionServer">
            <summary>
            The server hosting the distrib db used by this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.HostedDistribDB">
            <summary>
            The distribution database hosted on this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.Databases">
            <summary>
            Databases on this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.FileShares">
            <summary>
            FileShares on this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.ClusterName">
            <summary>
            Name of the cluster hosting this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DistributionDatabaseTemplateUid">
            <summary>
            This is used for constructing a Distribution Database on this server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServer.DistributionDatabaseTemplateName">
            <summary>
            This is only used by export.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataServer.SvrDbDemoteHelper">
             <summary>
             This is a private helper class used by WmoDataServer.Demote() to help find the
             best secondaries to promote (if applicable) by balancing load as best as possible
             accross the available data servers.
            
             An ArrayList of these objects are sorted by how many secondaries are available
             (least to greatest).  This way, the FSS with fewest secondaries to choose from get
             to pick the secondary/dataserver to promote first.
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServer.SvrDbDemoteHelper.FindBestSecondary(System.Collections.Hashtable)">
            <summary>
            Try to find best secondary to promote by looking at how many primaries are already on
            each server.
            </summary>
            <param name="primariesOnServer">This is a cache of number of primary dbs on server including
            the ones we intend to promote</param>
            <returns>Secondary to promote</returns>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoIPAddressSwitch">
            <summary>
            struct of IPAddress and Switch
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoIPAddressSwitch.NetworkSwitch">
            <summary>
            name of the network switch
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoIPAddressSwitch.IPAddress">
            <summary>
            IP Address
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoIPAddressSwitch.IsPreferred">
            <summary>
            IsPreferred
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMirroringEndPoint">
            <summary>
            struct for Mirroring_EndPoint
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMirroringEndPoint.CompleteDomainName">
            <summary>
            The domain name for this endpoint
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMirroringEndPoint.PortNumber">
            <summary>
            The port number for this endpoint
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMirroringEndPoint.EndPointName">
            <summary>
            The name of the endpoint
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection">
            <summary>
            Collection class for WmoDataServer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Contains(System.Guid)">
            <summary>
            Tests whether the collection contains an object of the given UID.
            </summary>
            <returns>
            true if the collection contains an object identified by the UID;
            false if the collection doesn't contain an object with this UID.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDataServer)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Imports an Xml document, passing on sections to child members.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            initializes dataserver, ipaddressswitches
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Guid,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Register">
            <summary>
            Validates then registers each Server in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.RegisterAfterValidate">
            <summary>
            Registers each Server in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.ValidateSqlFSSAgainstCrossClusterServers">
            <summary>
            Validate Sql Fail Safe sets against cross cluster servers.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.ValidateFileFSSAgainstCrossClusterServers">
            <summary>
            Validate File Fail Safe sets against cross cluster servers.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.List(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            List all data servers in the configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Assign">
            <summary>
            Assign DatabaseTemplate to the server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDataServerCollection.PresetDistributionDatabaseTemplateUid">
            <summary>
            For defining database templates for a series of servers.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeployment">
            <summary>
            Class for deployments
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.InitializeInUseObjects(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the arrays of objects that use this deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.InitializeClientSettings(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from the Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Import(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Imports an XML file for the deployment, splitting up the various tasks to each sub class.
            The doValidate parameter is used by the WebstoreWetupWizard
            </summary>
            <param name="objXml"></param>
            <param name="doValidate"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ExportXmlFragmentForAllocate(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an partial XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ExportDeployment(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.RegisterDeployment(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.RegisterUpdateDeployment">
            <summary>
            Writes the in-memory data to the config dbs. Used for update deployment settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.RegisterClientSettings(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.RegisterUpdateClientSettings">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Register">
            <summary>
            Writes the in-memory data to the config dbs
            this deployment and all collections under it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Deploy">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.DeployAudit(System.Guid)">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Drop">
            <summary>
            drop deployment from wstconfig
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.Validate">
            <summary>
            Validates internal data as well as server readyness.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ValidateDeployment(System.Boolean)">
            <summary>
            Validates whether the in-memory data matches the "real" world
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ValidateDatabasesAndFileShares">
            <summary>
            ValidateDatabasesAndFileShares before deploying
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ValidateDatabasesAndFileSharesForSqlUpgrade(System.Int32)">
            <summary>
            ValidateDatabasesAndFileShares before deploying
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddReplicaSetup(System.String)">
            <summary>
            Add Replica Setup. Run through FSSes and deploy them.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddFailSafeSetImport(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Registers new SqlFailSafeSet and FileFailSafeSet.
            Takes in SqlFailSafeSets and FileFailSafeSets
            in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddFailSafeSetRegister">
            <summary>
            Registers new FileFailSafeSet. No longer used for Sql.
            Takes in FileFailSafeSets in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddPartitionImport(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Registers or updates data partition mapping.
            Take in new data partition map
            in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddPartitionImportNew(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Registers or updates data partition mapping.
            Take in new data partition map
            in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.AddPartitionSetup(System.Guid)">
            <summary>
            Add the partition imported from AddPartitionImport.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ValidateAndLoadAddFailSafeSet(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Add a partition. Takes in DataServers, SqlFailSafeSets, FileFailSafeSets
            and DataPartitions in the form of a Delta XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.MapPartition(Microsoft.Webstore.Management.Wmo.WMOSprocs,System.Int16,System.Int16,System.Int16)">
            <summary>
            Maps a data Partition to a SQL or File Fail Safe Set, or both.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateDatabase(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Guid)">
            <summary>
            Can only update db if it's offline or needsrepair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateVersionCheck(Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Deployment Upgrade verification.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateVersionSecurityRoleCheck(Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Always allow to add new roles, allow to drop an old role only if there is
            no security account belongs to this role
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpdateVersion(Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Associates a new Manifest with an existing Deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.UpgradeAudit(System.Guid,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Upgrades the databases etc in the 'real' world.
            Steps:
            1) For any database that is marked NeedsRepair, ignore it.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.DowngradeAudit(System.Guid,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Downgrades to a previous version of the users Manifest. Prereqs:
            1) UpdateVersion must have been called that started an Upgrade, otherwise calls to this function is a NOP.
            2) All Fail Safe Sets that are not listed as being the Previous version will have their registered downgrade scripts run.
            3) Multiple calls to UpdateVersion without finishing downgrade are not supported. You must finish upgrade or downgrade before running a second UpdateVersion. If necessary use the -force command so that you can make a fresh start.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the Deployment object. Called individually
            or by the DeploymentCollection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.List(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Lists the names of this Deployment in an XML node.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.CalculateAllocatedDatabaseName(System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            This does the heavy lifting of marking up the database name with the replacement chars
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetServerNumber(System.String)">
            <summary>
            This will find the trailing number from a server name and return that
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetAndValidateMask(System.String)">
            <summary>
            This will take the passed in mask and determine if it can be used.  It will return "0" if it cannot
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetServerNumberString(System.String,System.String)">
            <summary>
            This will utilize the passed in mask and pad the passed in number appoppriately with the proper chars
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.GetProvPref(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            GetProvPref method for the Deployment object. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployment.ReinitTemplateObjects">
            <summary>
            Reinitialize the TemplateObjects after changing the name and version of
            the manifest. Used during deployment upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.Name">
            <summary>
            Name of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.Uid">
            <summary>
            Uid of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ManifestUid">
            <summary>
            Uid of the manifest this deployment deploys.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ManifestName">
            <summary>
            Name of the manifest that this deployment deploys
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SystemManifestUid">
            <summary>
            Uid of the system manifest this deployment deploys.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.PreviousManifestUid">
            <summary>
            Uid of the previous manifest after Update Version is called.
            The value will be equal to the current ManifestUID if Update
            Version has not been called.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ManifestVersion">
            <summary>
            The Version of the Manifest this deployment belongs to.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ManifestIsFileshareOnly">
            <summary>
            Whether this manifest is a Fileshare Only manifest
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.WebstoreVersion">
            <summary>
            The Version of the System Manifest this deployment belongs to.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlDefaultReadCmdType">
            <summary>
            Default command type for Read commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlDefaultReadCmdTypeStr">
            <summary>
            Default command type for Read commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlDefaultWriteCmdType">
            <summary>
            Default command type for Write commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlDefaultWriteCmdTypeStr">
            <summary>
            Default command type for Write commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileDefaultReadCmdType">
            <summary>
            Default command type for Read commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileDefaultReadCmdTypeStr">
            <summary>
            Default command type for Read commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileDefaultWriteCmdType">
            <summary>
            Default command type for Write commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileDefaultWriteCmdTypeStr">
            <summary>
            Default command type for Write commands.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.MaxTicket">
            <summary>
            max ticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.MaxPartitionTicket">
            <summary>
            maxpartitionticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.MaxDeleteTicket">
            <summary>
            maxdeleteticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.MaxDeploymentTicket">
            <summary>
            MaxDeploymentTicket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlClientSettingsTicket">
            <summary>
            ticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileClientSettingsTicket">
            <summary>
            ticket
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlSecondaryStaleThreshold">
            <summary>
            How old a secondary must be before being considered stale
            causing clients to choose another database in the Sql FailSafe Set.
            in minutes.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlSecondaryStaleThresholdStr">
            <summary>
            String version of ClientSecondaryStaleThreshold
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlSecondaryStaleDCThreshold">
            <summary>
            How old a secondary must be before being considered stale
            causing clients to choose a database in another data center.
            in minutes.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlSecondaryStaleDCThresholdStr">
            <summary>
            String version of ClientSecondaryStaleDCThreshold
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileSecondaryStaleThreshold">
            <summary>
            How old a secondary must be before being considered stale
            causing clients to choose another database in the Sql FailSafe Set.
            in minutes.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileSecondaryStaleThresholdStr">
            <summary>
            String version of ClientSecondaryStaleThreshold
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileSecondaryStaleDCThreshold">
            <summary>
            How old a secondary must be before being considered stale
            causing clients to choose a database in another data center.
            in minutes.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileSecondaryStaleDCThresholdStr">
            <summary>
            String version of ClientSecondaryStaleDCThreshold
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.PartitioningType">
            <summary>
            Partitioning option supported by this manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.PartitioningTypeStr">
            <summary>
            get and set PartitioningType with string input/output
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.TypeOfSqlSecondaries">
            <summary>
            Replication option supported by this deployment and manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.TypeOfSqlSecondariesStr">
            <summary>
            get and set PartitioningType with string input/output
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.Description">
            <summary>
            Description of the deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.DataServers">
            <summary>
            Data Servers used by this deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.DataServersInUse">
            <summary>
            Data Servers used by this deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ServerRoles">
            <summary>
            Server roles used by this deployment.
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.Clusters">
            <summary>
            Clusters used by this deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.DatabaseTemplates">
            <summary>
            Database Templates used by this deployment
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.AllocateExportClusters">
            <summary>
            Used for autoallocate, these are the clusters that have been created separately
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.AllocateExportDataServers">
            <summary>
            Used for autoallocate, these are the clusters that have been created separately
            </summary>summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.TemplateObjects">
            <summary>
            Template objects, including accounts, files, distribution
            server and database, publications, subscriptions and jobs.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.SqlFailSafeSets">
            <summary>
            Collection of Sql FailSafe Sets.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.FileFailSafeSets">
            <summary>
            Collection of File Fail Safe Sets.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.DataPartitions">
            <summary>
            Collection of data partitions.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.IsAllocate">
            <summary>
            IsAllocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ShouldAllocateAllNewDataPartitions">
            <summary>
            Tells us whether we should be allocating data partitions 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ExportFromExistingDeployment">
            <summary>
            Tells us if we are exporing out existing deployment information (so we only have to do a fragment)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ContainsInitialSqlClientSettings">
            <summary>
            Inidicates whether on the Import if Sql Client settings were passed in
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployment.ContainsInitialFileClientSettings">
            <summary>
            Inidicates whether on the Import if File Client settings were passed in
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection">
             <summary>
            
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDeployment)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs, shallow initialize
            only initializes simple member variables of manifests, no collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.List(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Lists all Deployments.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentCollection.Item(System.Guid)">
            <summary>
            guid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeploymentObject">
            <summary>
            Base class for deployment objects
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObject.Name">
            <summary>
            Name of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObject.DeploymentUid">
            <summary>
            UID of the deployment to which this object belongs
            set by the collection's Add method
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection">
            <summary>
            Base collection class for derivers of WmoDeploymentObject
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.Add(Microsoft.Webstore.Management.Wmo.WmoDeploymentObject)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.DeploymentUid">
            <summary>
            the uid of the deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeploymentObjectCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase">
            <summary>
            Class for distribution databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.SetPublisherToUseDistributor(System.String,System.String)">
            <summary>
            run once per publishing server to associate the publishing server 
            with a distribution server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.SqlServerUid">
            <summary>
            Name of the server hosting this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.SqlServerName">
            <summary>
            Name of the server hosting this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.DatabaseName">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabase.ConfigSprocs">
            <summary>
            to run sprocs against config db (initialize)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet">
            <summary>
            Class for File Fail Safe Sets
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.IsOperationAllowed(Microsoft.Webstore.Management.Wmo.WmoFileShare,System.String,System.Boolean)">
            <summary>
            Determines whether a particular operation is allowed or not
            </summary>
            <param name="fs"></param>
            <param name="op"></param>
            <param name="throwException"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.GetValidStatuses(System.String)">
            <summary>
            Gets the valid statuses for a given operation
            </summary>
            <param name="operation"></param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from the xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Uninitialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Uninitialize internal data from Initalize()
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.InitializeFileShare(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ReInitialize">
            <summary>
            ReInitialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used only for bulk registration for FileFailSafeSets.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Drop(System.Boolean)">
            <summary>
            drop fail safe set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DeployAudit(System.Guid)">
            <summary>
            Installs the FileShares etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Deploy(System.Object)">
            <summary>
            Installs the FileShares etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.AddFileShare(System.String,System.String)">
            <summary>
            Add a fileshare. Verify that the server exists, and the fileshare
            does not. Then add it to the Database collection on the
            FileFailSafeSet and on the DataServer FileShare collection.
            Finally, register it with WstConfig.
            Note, this method is called by WmoCommandFileShare.Import
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.PromoteAudit(System.String,System.String,System.Guid)">
            <summary>
            Audit the promote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Promote(System.String,System.String,System.Guid)">
            <summary>
            Promotes the given FileShare to be the primary in the File Fail Safe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.PromoteFSS(System.Guid)">
            <summary>
            Promote for the Fail Safe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DemoteAudit(System.String,System.String,System.Guid)">
            <summary>
            Audit the Demote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Demote(System.String,System.String)">
            <summary>
            Demotes the primary FileShare to be a secondary in the File
            Fail Safe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DemoteFSS(System.Guid)">
            <summary>
            Demote the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeConfigFileShareDemote(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Changes the config db to demote this FileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeConfigMarkNeedsRepairAndDemote(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Changes the config db to demote this FileShare
            </summary>
            <summary>
            Changes the config db to demote this FileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeConfigFileSharePromote(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Changes the config db to demote this FileShare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkOfflineAudit(System.String,System.String,System.Guid)">
            <summary>
            Marks this FileShare offline (admin access only) with auditting
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkOffline(System.String,System.String)">
            <summary>
            Marks this FileShare offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkNeedsRepairAudit(System.String,System.String,System.Guid)">
            <summary>
            Marks this FileShare MarkNeedsRepair (admin access only) with auditting
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkNeedsRepair(System.String,System.String,System.Guid)">
            <summary>
            Marks this FileShare offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkOnlineAudit(System.String,System.String,System.Guid)">
            <summary>
            Marks this fileshare online (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.MarkOnline(System.String,System.String)">
            <summary>
            Marks this FileShare offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.RepairAudit(System.String,System.String,System.Guid)">
            <summary>
            Repair this fileshare (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Repair(System.String,System.String)">
            <summary>
            Repair simply changes fileshare status to offline for time being
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeStatusInConfigDB(Microsoft.Webstore.Management.Wmo.WmoFileShare,Microsoft.Webstore.Management.Wmo.WmoEnum.FileShareStatus)">
            <summary>
            Changes the config db to marks this FileShare offline
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ChangeDefaultPrimary(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Change the Primary file share of this fail safe set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.GetProvPref(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            GetProvPref method for the object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Deployment">
            <summary>
            Set by the parent when this class is instantiated. This allows us to access
            child properties. This is used specifically to figure out what kind of Fail
            Safe Set Manager to create.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DeploymentUid">
            <summary>
            UID of the deployment to which this object belongs
            set by the collection's Add method
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ID">
            <summary>
            Number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.IDStr">
            <summary>
            String version of the number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Ticket">
            <summary>
            Ticket used for Polling.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.Status">
            <summary>
            Status: Deployed, NotDeployed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.PrimaryShareUid">
            <summary>
            Primary File Share for the Fail Safe Set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.DefaultPrimaryShareUid">
            <summary>
            Default Primary File Share for the Fail Safe Set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.FileShares">
            <summary>
            File Shares in this File Fail Safe Set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ProvPref">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet.ProvStatus">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection">
            <summary>
            Collection class for WmoFileFailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Add(Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSet)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Initialize">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            initializes from xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Uninitialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Removes any allocated data from the Initialize() call
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Used by Collection Register command to do bulk import of FileFailSafeSets and Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Validate">
            <summary>
            Validate the internal consistency of the Collection and each
            object within the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.GetProvPref(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            GetProvPref method for the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileFailSafeSetCollection.Deployment">
            <summary>
            Set by the parent when this class is instantiated. This allows us to access
            child properties. This is used specifically to figure out what kind of Fail
            Safe Set Manager to create.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileGroup">
            <summary>
            This class is used for defining the file groups, logical files, and
            backup stripes related to the creation, backing up and restoring of
            sQl databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.#ctor">
            <summary>
            Default constructor. The DatabaseTemplateUid and FileGroupName must
            still be set. Once these have been set, the WmoLogicalFileCollection
            must also have these values set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.#ctor(System.Guid)">
            <summary>
            Constructor with the DatabaseTemplateUid passed in.
            The name of the object must still be defined before it can be
            registered. Once these two are set, the WmoLogicalFileCollection
            must also have these values set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.#ctor(System.Guid,System.String)">
            <summary>
            Constructor with the DatabaseTemplateUid and FileGroupName passed in.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoDatabaseCollection initialize method or from the WmoFileGroup collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the template. This method is called with Dtc already started at the collection level.
            All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroup.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroup.IsInCollection">
            <summary>
            Whether this object is in a collection (set by the add/remove
            methods for collections determines whether the name can be set)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Add(Microsoft.Webstore.Management.Wmo.WmoFileGroup)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoFileGroupCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.DatabaseTemplateUid">
            <summary>
            DatabaseTemplateUid of the parent
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.Item(System.String)">
            <summary>
            FileGroupName indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.WmoFileGroupEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.WmoFileGroupEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.WmoFileGroupEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileGroupCollection.WmoFileGroupEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileShare">
            <summary>
            Class for file share information.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Initialize(System.String,System.String,System.Guid)">
            <summary>
            Initialize from passing in parameters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from xml dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register this File share
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Register">
            <summary>
            Register this fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Initialize(Microsoft.Webstore.WstClient.WstDataReader,System.Guid,System.Guid)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Uses in-memory data to create an XML element.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used for bulk insert during register.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Deploy">
            <summary>
            Simply Validate
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Setup">
            <summary>
            deploy fileshare and change status to be online
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.UnRegister(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            UnRegister this fileshare
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.UnDeploy">
            <summary>
            What to do?
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.Validate">
            <summary>
            validate 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.DeployValidate">
            <summary>
            validate if fileshare exists, throws exception if it doesn't
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShare.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.Uid">
            <summary>
            Uid of this file share
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.FileSharePath">
            <summary>
            Path for this share.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.DataServer">
            <summary>
            The server where this file share path resides.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.DataServerName">
            <summary>
            The string name of the server where this file share path resides.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.DeploymentUid">
            <summary>
            Guid of the deployment that this file share belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.FileFailSafeSetID">
            <summary>
            File Fail Safe Set that this file share belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.FileFailSafeSet">
            <summary>
            FileFailSafeSet
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.Ticket">
            <summary>
            Ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.Status">
            <summary>
            Status: Online or Offline. TODO: Determine if there are more states for File Shares.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.StatusStr">
            <summary>
            String converstion for Status of the File Share
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.IsPrimary">
            <summary>
            Primary File Share. For Promote/Demote.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.IsDefaultPrimary">
            <summary>
            The default primary share state. Used to restore a system to a known state.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShare.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the share path can be set)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection">
            <summary>
            Collection class for File Shares
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.m_FileShares">
            <summary>
            Keep track of FileShares in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.IndexOf(System.String,System.String)">
            <summary>
            Returns the index of the first file share with the given data
            server and path.
            </summary>
            <returns>
            The 0-based index.
            -1 if the collection doesn't contain the object.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given uid.
            </summary>
            <returns>
            The 0-based index of the first object with the uid.
            -1 if the collection doesn't contain an object with this uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Contains(System.String,System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Add(Microsoft.Webstore.Management.Wmo.WmoFileShare)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Remove(System.String,System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used by the Register FailSafeSet collection for bulk inserts.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoFileShareCollection.  This is
            meant to support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Deploy">
            <summary>
            Installs the file shares in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Count">
            <summary>
            count of FileShares in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Item(System.String,System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.DeploymentUid">
            <summary>
            The uid of the deployment that this collection belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.FileFailSafeSetID">
            <summary>
            File Fail Safe Set that this file share collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.DataServer">
            <summary>
            Server that this file share is installed on.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.WmoFileShareEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoFileShareCollection
            in support of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.WmoFileShareEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before
            the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.WmoFileShareEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFileShareCollection.WmoFileShareEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoLogFile">
            <summary>
            The WmoLogFile is a special hybrid between the WmoFileGroup and WmoLogicalFile
            classes. The LogFile has one FileGroup with the name LogFile which has one
            logical file of the users choosing. The data for the WmoLogFile class is stored
            in the LogicalFile table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.#ctor">
            <summary>
            Only the DatabaseTemplateUid is needed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.#ctor(System.Guid)">
            <summary>
            Only the DatabaseTemplateUid is needed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoDatabaseCollection initialize method or from the WmoLogFile collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the template. This method is called with Dtc already started at the collection level.
            All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogFile.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogFile.DatabaseTemplateUid">
            <summary>
            The DatabaseTemplateUID passed in from the parent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogFile.LogicalFileName">
            <summary>
            The LogicalFileName from the logicalFiles collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoLogicalFile">
            <summary>
            This class is used for defining a logical file, used for creating, backing up 
            and restoring Sql databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.#ctor">
            <summary>
            After using this constructor the user must set the DatabaseTemplateUid
            and FileGroupName.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.#ctor(System.Guid,System.String)">
            <summary>
            Pass in two parts of the identity for the logical file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from sql data reader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the LogicalFile. This method is called with Dtc already started at the
            collection level. All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Converts the internal variables into an XML fragment. This is appended
            to the Xml document object to output to a file by the parent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFile.IsInCollection">
            <summary>
            Whether this object is in a collection (set by the add/remove
            methods for collections determines whether the name can be set)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.#ctor">
            <summary>
            Default constructor. Must set the DatabaseTemplateUid and the FileGroupName.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.#ctor(System.Guid,System.String)">
            <summary>
            Prefered constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Add(Microsoft.Webstore.Management.Wmo.WmoLogicalFile)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoLogicalFileCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.FileGroupName">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.DatabaseTemplateUid">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.WmoLogicalFileEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.WmoLogicalFileEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.WmoLogicalFileEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoLogicalFileCollection.WmoLogicalFileEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency">
            <summary>
            Base class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.Publisher">
            <summary>
            The source of the publication.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.Subscriber">
            <summary>
            The source of the publication.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.Latency">
            <summary>
            The replication latency in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatency.LatencyBucket">
            <summary>
            The replication latency bucket.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection">
            <summary>
            Collection class for the above.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.IndexOf(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Contains(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Add(Microsoft.Webstore.Management.Wmo.WmoReplicationLatency)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Remove(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoReplicationLatencyCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.Item(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.WmoReplicationLatencyEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.WmoReplicationLatencyEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.WmoReplicationLatencyEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationLatencyCollection.WmoReplicationLatencyEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet">
            <summary>
            Class for Sql Fail Safe Sets
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from the xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Uninitialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Uninitialize internal data from Initalize()
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.InitializeAppDB(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ReInitialize">
            <summary>
            ReInitialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Used only for bulk registration for SqlFailSafeSets.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Drop(System.Boolean)">
            <summary>
            Drop fail safe set. The caller must have done the following before this call is made:
                Mapped the Data Partitions pointing to this FSS to a different FSS or to -1.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Deploy">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DeployAudit(System.Guid)">
            <summary>
            Audit the Deploy
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Deploy(System.Object)">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Upgrade(System.Object)">
            <summary>
            Installs the databases etc in the 'real' world.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Downgrade(System.Object)">
            <summary>
            If a user feels that upgrade has failed, we supply the downgrade method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.AddDatabase(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Add a database. Verify that the server exists, and the database
            does not. Then add it to the Database collection on the
            SqlFailSafeSet and on the DataServer Database collection.
            Finally, register it with WstConfig.
            Note, this method is called by WmoCommandDatabase.Import and
            WmoCommandDatabase.AddConfig. The latter code is only reachable
            through MSI setup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.RegisterLatency(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Initializes the data in the SqlFssLatency table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.AddReplica(System.Object)">
            <summary>
            Add replicas to an existing sql fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.AddReplica(System.String)">
            <summary>
            Add replicas to an existing sql fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.PromoteAudit(System.String,System.String,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Audit the promote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.PromoteDbInMirroring(System.String,System.String)">
            <summary>
            Demotes the primary database to be a secondary in the Sql FailSafe Set and auto promotes the secondary to Primary
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.PromoteFSS(System.Guid,System.Boolean)">
            <summary>
            Promote for the Fail Safe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Promote(System.String,System.String,System.Guid,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Promotes the given database to be the primary in the Sql FailSafe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DemoteFSS(System.Guid)">
            <summary>
            Demote the fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOfflineFSS(System.Guid,System.Boolean)">
            <summary>
            Mark an entire fail safe set offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOnlineFSS(System.Guid)">
            <summary>
            Mark an entire fail safe set online.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DemoteAudit(System.String,System.String,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Audit the Demote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DemoteDbInMirroring(System.String,System.String)">
            <summary>
            Demotes the primary database to be a secondary in the Sql FailSafe Set and auto promotes the secondary to Primary
            A database in mirroring can only be in the following state online/offline/notdeployed/needsrepair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Demote(System.String,System.String,System.Guid,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Demotes the primary database to be a secondary in the Sql FailSafe Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOfflineAudit(System.String,System.String,System.Guid,System.Boolean,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Marks this database offline (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOffline(System.String,System.String,System.Guid,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Marks this database offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ForceMarkOfflineDatabase(System.String,System.String,System.Boolean)">
            <summary>
            We have to do this because in Mirroring db offline -force is not allowed
            while fss offline -force is allowed.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="isUpgradeWithReplTearDown"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ForceMarkOffline(System.String,System.String,System.Boolean)">
            <summary>
            Marks this database offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOfflineAudit(System.Object)">
            <summary>
            Marks this database offline (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepairAudit(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Marks this database MarkNeedsRepair (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepair(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Marks this database needs repair
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepairAudit(System.Object)">
            <summary>
            Called by Multi-Threading
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOnlineAudit(System.String,System.String,System.Guid,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Marks this database online (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkStandbyAudit(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Marks this database standby (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOnline(System.String,System.String,System.Boolean,Microsoft.Webstore.Management.Wmo.WmoAdminLock)">
            <summary>
            Marks this database online (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkStandby(System.String,System.String,System.Boolean)">
            <summary>
            Marks this database standby (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkOnlineAudit(System.Object)">
            <summary>
            Marks this database online (admin access only)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.RepairAudit(System.String,System.String,System.Guid)">
            <summary>
            Repair the database (admin access only) and audit it
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repairs the database. The Repair essentially calls DeploySecondary.
            However, we do additional checks, such as making sure that there
            is a primary database that is online, that the database is
            actually marked for repair, and that the force flag has not been
            used. The final state of the database is Offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.RepairAudit(System.Object)">
            <summary>
            Called by Multi-Threading
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ForceRepair(System.String,System.String)">
            <summary>
            Forces Repairs of the database. In the case where all databases are
            marked as Needs Repair, we allow the operator to select a database
            to mark online.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ChangeDefaultPrimary(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Change the Primary Database of this fail safe set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.GetProvPref(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            GetProvPref method for the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.UpgradeAudit(System.Guid,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Audit the update from one manifest to the next
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DeployUpgradeOrDowngradeScripts(System.Guid,Microsoft.Webstore.Management.Wmo.WmoManifest,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            DeployUpgradeScripts will walk through each database, put it into the correct
            state. (demoted, offline) then call the WmoDatabase level DeployUpgrade scripts.
            Once this is complete, it will online and demote as appropriate for the parameters
            passed in by the user.
            </summary>
            <param name="parentAuditUid"></param>
            <param name="manDelta"></param>
            <param name="isTopologyChange"></param>
            <param name="isReplTearDown"></param>
            <param name="isRollingUpgrade"></param>
            <param name="isUpgrade"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DowngradeAudit(System.Guid,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Audit the update from one manifest to the next
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.SetManifestUid(System.Guid)">
            <summary>
            SetManifestUid
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.SetupRepl(System.String,System.String)">
            <summary>
            Setup replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.SetupRepl">
            <summary>
            Setup replication for all databases in the FSS.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DropRepl(System.String,System.String,System.Boolean)">
            <summary>
            Drop replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DropRepl(System.Boolean)">
            <summary>
            Drop replication from all databases in the FSS.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepl(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Mark the ti_NeedsRepl column on all tables on a multimaster database. Return errors if the parematers incorrect.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.MarkNeedsRepl(System.DateTime,System.DateTime)">
            <summary>
            Mark the ti_NeedsRepl column on all databases in a fail safe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.IsLiteSpeedInstalled">
            <summary>
            The source and destination servers in a backup/restore set must both have Litespeed in order
            for the process to work.
            Backup and Restore can only happen between the primary and a secondary database.
            Furthermore, the secondary database must be in a not deployed or needs repair state.
            Therefore, we will check the servers that have these databases to see if Litespeed
            is installed. If any one of them do not have it installed, the test fails.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Assign(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.InitializeForAssign(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Processes Xml to set the DatabaseTemplate. The rules are: If the element
            is not specified, use the preset. If the preset is not specified, use the
            default. In all cases verify the templates exist.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Deployment">
            <summary>
            Set by the parent when this class is instantiated. This allows us to access
            child properties. This is used specifically to figure out what kind of Fail
            Safe Set Manager to create.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ManifestUid">
            <summary>
            The ManifestUid of the SqlFailSafeSet can be different from the
            Deployment ManifestUid during upgrade.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.TypeOfSqlSecondaries">
            <summary>
            Replication option supported by this fail safe set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.SecondaryDeploymentManager">
            <summary>
            This virtual property determines what manager to return to the caller.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ID">
            <summary>
            Number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.IDStr">
            <summary>
            String version of the number of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Ticket">
             <summary>
            
             </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Status">
            <summary>
            Status: Deployed, NotDeployed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.PrimaryDatabaseUid">
            <summary>
            Primary database for the partition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DefaultPrimaryDatabaseUid">
            <summary>
            Default primary database for the partition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.WitnessServerUid">
            <summary>
            Witness server for the partition
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Databases">
            <summary>
            Databases in this Sql FailSafe Set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Allocated">
            <summary>
            if current fss is auto allocated or not
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Override">
            <summary>
            Override for MarkOnline
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ProvPref">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ProvStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ReplicationPublicationDeploy">
            <summary>
            Publication info for the fail safe set.
            </summary>
            Publication information can differ between the deployment and the fail safe set
            due to topology upgrade. Therefore we have a Deployment level ReplPublicationForSecondaries
            and a FSS level ReplPublicationForSecondaries.
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.ClusterUid">
            <summary>
            The ClusterUid for the Sql Fail Safe Set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.Cluster">
            <summary>
            The Cluster for the Sql Fail Safe Set. Note that this.clusterUid must exist.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DatabaseTemplateUid">
            <summary>
            The database template for the sql fail safe set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet.DatabaseTemplateName">
            <summary>
            The database template name used for export.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection">
            <summary>
            Collection class for WmoSqlFailSafeSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Add(Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSet)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Initialize">
            <summary>
            Initialize from the config dbs to in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            initializes from xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Uninitialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Removes any allocated data from the Initialize() call
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.ExportForRegister(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Used by Collection Register command to do bulk import of SqlFailSafeSets and Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Register">
            <summary>
            Registers SqlFailSafeSets.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Validate">
            <summary>
            Validate the internal consistency of the Collection and each
            object within the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.GetStatus(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean,System.Int32@)">
            <summary>
            GetStatus method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.GetProvPref(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            GetProvPref method for the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.SetAllocated(System.Boolean)">
            <summary>
            set allocated flag on all member.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Assign">
            <summary>
            Assign DatabaseTemplate to each FSS in the array.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Deployment">
            <summary>
            Set by the parent when this class is instantiated. This allows us to access
            child properties. This is used specifically to figure out what kind of Fail
            Safe Set Manager to create.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.NumSecondaries">
            <summary>
            NumSecondaries for auto allocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.NumPrimariesPerServer">
            <summary>
            NumPrimariesPerServer for auto allocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.PrimaryDatabaseName">
            <summary>
            Is the structure for the name of primary databases that are created through auto allocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.SecondaryDatabaseName">
            <summary>
            Is the structure for the name of secondary databases that are created through auto allocate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.BeginNumber">
            <summary>
            When numbering the sql fail safe sets, this is the beginning number to start with
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.Datacenter">
            <summary>
            The data center that will be replaced in the Mask strings
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.ServerCluster">
            <summary>
            The server cluster that will be replaced in the Mask strings
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.PrimaryServerIdMask">
            <summary>
            The mask for the primary server id (e.g. "000" to force the server id to be three characters)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.SecondaryServerIdMask">
            <summary>
            The mask for the secondary server id (e.g. "000" to force the server id to be three characters)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.FssIdMask">
            <summary>
            The mask for the fail safe set id (e.g. "000" to force the fail safe set id to be three characters)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.UsePrimaryDatabaseName">
            <summary>
            This determines whether we should use the PrimaryDatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.UseSecondaryDatabaseName">
            <summary>
            This determines whether we should use the SecondaryDatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.PresetDatabaseTemplateName">
            <summary>
            Used for when the customer wants one database template for all fail safe sets.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.PresetDatabaseTemplateUid">
            <summary>
            Used for when the customer wants one database template for all fail safe sets.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection.MirroringWitnessServerNames">
            <summary>
            List of all of the witness servers that will be used for allocation on new fail safe sets (it will alternate)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoStripe">
            <summary>
            During repair operations or when adding a database, the stripe class is
            used to determine where the BAK files go.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.#ctor">
            <summary>
            Once constructed, the class requires the DatabaseTemplateUid.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.#ctor(System.Guid)">
            <summary>
            Class requires the DatabaseTemplateUid for all work.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initialize from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize from sql data reader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the Stripe. This method is called with Dtc already started at the
            collection level. All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Converts the internal variables into an XML fragment. This is appended
            to the Xml document object to output to a file by the parent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripe.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripe.IsInCollection">
            <summary>
            Indicates whether this object is part of a collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoStripeCollection">
            <summary>
            Collection class for databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Add(Microsoft.Webstore.Management.Wmo.WmoStripe)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoStripeCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Initialize">
            <summary>
            Execute WspGetStripe. This will return one result set consisting of all Stripes, 
            given the passed in parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Clean">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.DatabaseTemplateUid">
            <summary>
            The parent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.WmoStripeEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.WmoStripeEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.WmoStripeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoStripeCollection.WmoStripeEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects">
            <summary>
            Definition of the WmoDeployTemplateObjects class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.#ctor">
            <summary>
            Constructor for the WmoDeployTemplateObjects class.
            </summary>
            <remarks>Written by BradT</remarks>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.Accounts">
            <summary>
            The Security Accounts collection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDeployTemplateObjects.SystemManifestUid">
            <summary>
            The Manifest Uid of the Webstore system manifest (WebstoreManifest)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoJobDeploy">
            <summary>
            Class for job deployments
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.Initialize(Microsoft.Webstore.Management.Wmo.WmoManifestJob)">
            <summary>
            Using the WmoManifestJob as a base, create the WmoJobDeploy object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.DeploymentUid">
            <summary>
            The GUID for the Deployment in which owns this job.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeploy.ManifestUid">
            <summary>
            The GUID for the Manifest in which this job is registered
            This value is populated by the thread that creates this object.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection">
            <summary>
            Collection class for WmoJobDeploy
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.InitializeFromManifest">
            <summary>
            Initialize from Manifest
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.Add(Microsoft.Webstore.Management.Wmo.WmoJobDeploy)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.ValidateName(Microsoft.Webstore.Management.Wmo.WmoSqlFailSafeSetCollection)">
            <summary>
            Validates the Job Instance Name. Walk through every partition and
            combine the given job name with the database name. If it is to long,
            throw an error. At any time, any database can be promoted or
            demoted, causing the various jobs to be installed. This check will
            guarantee that we won't have jobs with names that would be
            truncated after a successful Setup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.ManifestUid">
            <summary>
            The GUID for the Manifest in which these jobs exist.
            This value is populated by the thread that creates this object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.DeploymentUid">
            <summary>
            The Uid of the Deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobDeployCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy">
            <summary>
            Class to hold the default distribution settings for a deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Reads the XML node to initialize during Import.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.RegisterUpdate">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.DeploymentUid">
            <summary>
            The uid of the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.DrainNumRetries">
            <summary>
            Drain No Of Retries
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.DrainIntervalSecs">
            <summary>
            Drain Interval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationDistributionDeploy.StaleAlertInterval">
            <summary>
            The Stale Alert Interval in seconds.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy">
            <summary>
            Class to hold the default Publication settings for a deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Initialize">
            <summary>
            Creates a WstConfig connection then calls Initialize(reader)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
            NOTE: This inititilize has two incoming paths. You will need to change the sprocs
            WspGetReplPublicationDeploy and WspGetFailSafeSetReplPublicationDeploy if you wish
            to change this code.
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifestPublication)">
            <summary>
            Initialize during Import 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Initialize(Microsoft.Webstore.Management.Wmo.WmoManifestPublication)">
            <summary>
            Initialize during Upgrade
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.DeploymentUid">
            <summary>
            The Deployment Uid where this publication is registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.ManifestUid">
            <summary>
            The Manifest Uid where this publication is registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.ManifestPubName">
            <summary>
            The Manifest publication name where this publication is registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoReplicationPublicationDeploy.IsInteresting">
            <summary>
            Whether this object has been populated
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount">
            <summary>
            Class for registered accounts
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Register">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.UnRegisterRole(System.String)">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.IsNT">
            <summary>
            Whether this account is an NT security account
            (if not, must be SQL Server security)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.ManifestUid">
            <summary>
            Uid of the manifest of the security roles
            that this account belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccount.SecurityRoles">
            <summary>
            Security roles to which this account belongs
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection">
            <summary>
            Collection class for WmoSecurityAccount
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Add(Microsoft.Webstore.Management.Wmo.WmoSecurityAccount)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoSecurityAccountCollection.ManifestUid">
            <summary>
            Manifest whose roles this account can belong to
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoEnvironment">
            <summary>
            Class for Environment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnvironment.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Register">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Name">
            <summary>
            Environment Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Uid">
            <summary>
            Environment Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.PollingIntervalClient">
            <summary>
            Cfg Setting: PollingIntervalClient
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.TicketExpirationInterval">
            <summary>
            Cfg Setting: TicketExpirationInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.PollingOffsetClient">
            <summary>
            Cfg Setting: PollingOffsetClient
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.PollingOffsetService">
            <summary>
            Cfg Setting: PollingOffsetService
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.HistoryRetentionPeriod">
            <summary>
            Cfg Setting: HistoryRetentionPeriod
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyPollingInterval">
            <summary>
            Cfg Setting: LatencyPollingInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyBucket0">
            <summary>
            Cfg Setting: LatencyBucket0
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyBucket1">
            <summary>
            Cfg Setting: LatencyBucket1
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyBucket2">
            <summary>
            Cfg Setting: LatencyBucket2
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LatencyBucket3">
            <summary>
            Cfg Setting: LatencyBucket3
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LockWaitInterval">
            <summary>
            Cfg Setting: LockWaitInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.LockNumRetries">
            <summary>
            Cfg Setting: LockNumRetries
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoEnvironment.Ticket">
            <summary>
            Ticket
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifest">
            <summary>
            Top level site object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Initialize">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Import(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Loads the in-memory data from the XML. The XML is assumed to
            be validated before this function is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Loads the in-memory data from the Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.InitializePublication(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from the Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.ExportSource(System.String)">
            <summary>
            Reads from the in-memory data to create the source files associated with the objects.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.ExportGeneratedObjects(System.String)">
            <summary>
            Reads from the in-memory data to create the source files associated with the objects.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.ExportManifest(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.RegisterManifest(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Register">
            <summary>
            Writes the source and Crc to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.ValidateManifest">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.List(System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Exports the name of the Manifest, its version and Service Name
            along with all Deployments that use this Manifest.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifest.Drop">
            <summary>
            drop manifest from wstconfig
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Name">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.IsInCollection">
            <summary>
            whether this object is in a collection
            (set by the add/remove methods for collections
            determines whether the name can be set)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Uid">
            <summary>
            Uid of the manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Version">
            <summary>
            Version of the manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.PartitioningType">
            <summary>
            Partitioning option supported by this manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.IsFileshareOnly">
            <summary>
            Whether this manifest is a Fileshare Only manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.PartitioningTypeStr">
            <summary>
            get and set PartitioningType with string input/output
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.DataPartitionCount">
            <summary>
            Number of data partitions. Valid only for hash based partitioning.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.DataPartitionColumnName">
            <summary>
            Name of the column containing the data partition column in each partitioned table.
            Can be overridden at the table level.
            Only valid for hash based partitioning.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.IsNoExtraObjectValidation">
            <summary>
            Whether webstore gives warning for the objects that
            are in the database but are not registered.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.TypeOfSqlSecondaries">
            <summary>
            Type of secondaries that this manifest has
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.OldTypeOfSqlSecondaries">
            <summary>
            Type of secondaries that this manifest has
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.TypeOfSqlSecondariesStr">
            <summary>
            Type of secondaries as a string.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.MinSQLServerVersion">
            <summary>
            Minimum version of SQL Server required
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Description">
            <summary>
            Other description of the manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Scripts">
            <summary>
            Collection of registered scripts.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.StoredProcedures">
            <summary>
            Collection of registered stored procedures.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Functions">
            <summary>
            Collection of registered functions.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Triggers">
            <summary>
            Collection of registered tables.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Tables">
            <summary>
            Collection of registered tables.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Jobs">
            <summary>
            Collection of registered jobs.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.SecurityRoles">
            <summary>
            Collection of registered security roles.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.FileGroups">
            <summary>
            Collection of registered file groups.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.Sources">
            <summary>
            Collection of registered source files.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifest.PublicationForSecondaries">
            <summary>
            publication registered for secondary dbs.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestCollection">
            <summary>
            Collection class for WmoManifest
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given guid.
            </summary>
            <returns>
            The 0-based index of the first object with the guid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.IndexOf(System.String,System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the manifest with the given name with the most recent
            version. If multiple manifests of this name exist with different service
            names, an exception is thrown.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Contains(System.Guid)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Contains(System.String,System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Adds a manifest to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Remove(System.String,System.String)">
            <summary>
            Removes a manifest from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoManifestCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs, shallow initialize
            only initializes simple member variables of manifests, no collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.List(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Lists all Manifests and their deployments.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Item(System.Guid)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Item(System.String,System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.WebstoreManifest">
            <summary>
            The webstore internal manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.WmoManifestEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoNamedObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.WmoManifestEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.WmoManifestEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestCollection.WmoManifestEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestArticle">
            <summary>
            Summary description for WmoManifestArticle.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Sequence:
            If the Article node under table exists
                If the Name attribute is supplied, use it.
                else use the table name for the article name.
            else use the table name for the article name.
            If the DELSproc name is supplied use it
            else use wsp_MSdelTableName
            If the INSSproc name is supplied use it
            else use wsp_MSinsTableName
            If the UPDSproc name is supplied use it
            else use wsp_MSupdTableName
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.Validate">
            <summary>
            Validate object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.Name">
            <summary>
            Name of the article.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.PublicationName">
            <summary>
            name of the publication
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.ManifestUid">
            <summary>
            Guid of the Manifest
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.TableName">
            <summary>
            name of table
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.InsertSprocName">
            <summary>
            InsertSprocName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.InsertCallMethod">
            <summary>
            InsertCallMethod
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.InsertCallMethodStr">
            <summary>
            InsertCallMethod string
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.UpdateSprocName">
            <summary>
            UpdateSprocName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.UpdateCallMethod">
            <summary>
            UpdateCallMethod
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.UpdateCallMethodStr">
            <summary>
            UpdateCallMethod string
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.DeleteSprocName">
            <summary>
            DeleteSprocName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.DeleteCallMethod">
            <summary>
            DeleteCallMethod
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticle.DeleteCallMethodStr">
            <summary>
            DeleteCallMethod string
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection">
            <summary>
            Collection class for WmoManifestArticle
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestArticle)">
            <summary>
            Adds a manifest to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNodeList,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.ManifestUid">
            <summary>
            ManifestUid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.PublicationName">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestArticleCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup">
            <summary>
            Class for registered file groups
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the file group.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Initialize(System.String)">
            <summary>
            Default object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Equals(Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup)">
            <summary>
            Compares 2 file groups
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.Name">
            <summary>
            Name of the article.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.ManifestUid">
            <summary>
            UID of the manifest to which this object belongs
            set by the collection's Add method
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.IsDeleted">
            <summary>
            This FileGroup was deleted from a previous Manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup.IsAdded">
            <summary>
            This FileGroup was added since a previous Manifest.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection">
            <summary>
            Collection class for WmoManifestFileGroup
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestFileGroup)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Remove(System.String)">
            <summary>
            Removes an object from the file group collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.GetDelta(Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection,Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection)">
            <summary>
            Looks for differences in a FileGroup collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Validate(Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Equals(Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection)">
            <summary>
            Compares 2 collections
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.ManifestUid">
            <summary>
            the uid of the manifest that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFileGroupCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestFunction">
            <summary>
            Class for registered functions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestObject">
            <summary>
            Base class for all Wmo classes identified by a string
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Read the source from the XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Read the source from the XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Initialize with reader (deep initialize)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Validate">
            <summary>
            validate
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.ExportSource(System.String)">
            <summary>
            Exports the source file associated with this object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Source">
            <summary>
            Source code string used to install the object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObject.Name">
            <summary>
            Name of the manifest object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObject.ManifestUid">
            <summary>
            UID of the manifest to which this object belongs
            set by the collection's Add method
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the function.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.IsInstallOnSecondary">
            <summary>
            Whether this object should be installed on secondary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.IsInstallOnSecondaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.IsInstallOnPrimary">
            <summary>
            Whether this object should be installed on primary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFunction.IsInstallOnPrimaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection">
            <summary>
            Collection class for WmoManifestFunction
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection">
            <summary>
            Base class for collections of object identified by a string
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.m_objects">
            <summary>
            Keep track of objects in collection using an ArrayList.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Contains(System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestObject)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Remove(System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.ExportSource(System.String)">
            <summary>
            Exports the source file associated with each object in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoManifestObjectCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Initialize all objects within the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Initialize all objects within the collection using Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.GetDelta(Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection,Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection)">
            Generic for WmoManifestFunction
            WmoManifestFunctionCollection
            nextManifest.Functions
            manDelta.Functions
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Manifest">
            <summary>
            the uid of the manifest that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.WmoManifestObjectEnumerator">
            <summary>
            This class implements the IEnumerator over a WmoManifestObjectCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.WmoManifestObjectEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.WmoManifestObjectEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection.WmoManifestObjectEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestFunction)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Remove(System.String)">
            <summary>
            Removes an object from the function collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestFunctionCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestJob">
            <summary>
            Class for registered jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJob.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJob.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJob.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJob.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJob.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJob.Name">
            <summary>
            Name of the manifest object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJob.IsInstallOnSecondary">
            <summary>
            Whether this job should be installed on secondary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJob.IsInstallOnSecondaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJob.IsInstallOnPrimary">
            <summary>
            Whether this job should be installed on primary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJob.IsInstallOnPrimaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection">
            <summary>
            Collection class for WmoManfiestJob
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestJob)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Remove(System.String)">
            <summary>
            Removes an object from the job collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Equals(Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection)">
            <summary>
            Compares 2 collections
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestJobCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestPublication">
            <summary>
            Class for registered Publications
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the function.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            Replication must be registered, even for Manifests that do not use SQL
            replication. This is to support AddPartition and MoveData.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.GenerateReplicationStoredProcedures">
            <summary>
            Generate the replication stored procedures for the registered tables.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Equals(Microsoft.Webstore.Management.Wmo.WmoManifestPublication)">
            <summary>
            Compares 2 collections
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.PublicationType">
            <summary>
            type of publication
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.PublicationTypeStr">
            <summary>
            type of publication, as string
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.MMChangeDateTimeColumnName">
            <summary>
            ChangeDateTime column name (multi master)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.MMNeedsReplicationColumnName">
            <summary>
            NeedsReplication column name (multi master)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Articles">
            <summary>
            collection of articles
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestPublication.Name">
            <summary>
            name of publication
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestScript">
            <summary>
            Class for registered scripts
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScript.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the script.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScript.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScript.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScript.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScript.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsInstallOnSecondary">
            <summary>
            Whether this object should be installed on secondary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsInstallOnSecondaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsInstallOnPrimary">
            <summary>
            Whether this object should be installed on primary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsInstallOnPrimaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsUpgradeOnly">
            <summary>
            Whether this object is only run during deployment upgrade
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsDowngradeOnly">
            <summary>
            Whether this object is only run during deployment downgrade
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsUpgradeOnlyStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScript.IsDowngradeOnlyStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection">
            <summary>
            Collection of WmoManifestScript objects.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestScript)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Remove(System.String)">
            <summary>
            Removes an object from the script collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestScriptCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole">
            <summary>
            Class for registered security roles
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the Security Role.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.ExportSprocPermissions(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.ExportFunctionPermissions(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.ExportTablePermissions(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.ExportViewPermissions(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.ToString">
            <summary>
            override to string method
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.SprocGrantMaskByte">
            <summary>
            need to be rewritten
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.FunctionGrantMaskByte">
            <summary>
            need to be rewritten
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.TableGrantMaskByte">
            <summary>
            need to be rewritten
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.ViewGrantMaskByte">
            <summary>
            need to be rewritten
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasDeleteOnTables">
            <summary>
            Whether to grant Delete permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasUpdateOnTables">
            <summary>
            Whether to grant Update permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasInsertOnTables">
            <summary>
            Whether to grant Insert permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasSelectOnTables">
            <summary>
            Whether to grant Select permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasDeleteOnViews">
            <summary>
            Whether to grant Delete permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasUpdateOnViews">
            <summary>
            Whether to grant Update permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasInsertOnViews">
            <summary>
            Whether to grant Insert permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasSelectOnViews">
            <summary>
            Whether to grant Select permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasExecuteOnFunctions">
            <summary>
            Whether to grant Execute permissions on this role
            for all registered functions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasExecuteOnSprocs">
            <summary>
            Whether to grant Execute permissions on this role
            for all registered stored procedures
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasDeleteOnTablesStr">
            <summary>
            Whether to grant Delete permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasUpdateOnTablesStr">
            <summary>
            Whether to grant Update permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasInsertOnTablesStr">
            <summary>
            Whether to grant Insert permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasSelectOnTablesStr">
            <summary>
            Whether to grant Select permissions on this role
            for all registered tables
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasDeleteOnViewsStr">
            <summary>
            Whether to grant Delete permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasUpdateOnViewsStr">
            <summary>
            Whether to grant Update permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasInsertOnViewsStr">
            <summary>
            Whether to grant Insert permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasSelectOnViewsStr">
            <summary>
            Whether to grant Select permissions on this role
            for all registered views
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasExecuteOnFunctionsStr">
            <summary>
            Whether to grant Execute permissions on this role
            for all registered functions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole.HasExecuteOnSprocsStr">
            <summary>
            Whether to grant Execute permissions on this role
            for all registered stored procedures
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection">
            <summary>
            Collection class for WmoManifestSecurityRole
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRole)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Remove(System.String)">
            <summary>
            Removes an object from the Security Role collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Equals(Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection)">
            <summary>
            Compares 2 collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.ToString">
            <summary>
            Converts object to string for printing out
            </summary>
            <returns>string describing the object</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.GetDelta(Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection,Microsoft.Webstore.Management.Wmo.WmoManifestObjectCollection)">
            <summary>
            Gets the delta between the two manifests.  Since this is Security roles, we get all of the roles for the new manifest, and identify the new ones
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSecurityRoleCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestSource">
            <summary>
            A class to hold the source code for a manifest object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoEnum.SetupStep,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs,System.Guid)">
            <summary>
            Update the ConfigDBs with the latest changes to the script.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,System.Boolean)">
            <summary>
            export to xml file
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSource.ExportSource(System.String)">
            <summary>
            Exports the source file associated with this object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Name">
            <summary>
            Name of the manifest object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Uid">
            <summary>
            Guid identifying the source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Source">
            <summary>
            The SQL source code for the Manifest objects.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.SourceBytes">
            <summary>
            the source in bytes
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.Crc">
            <summary>
            Crc value for the stored source code string.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.ModDateTime">
            <summary>
            Modification date/time on the incoming file, or else the
            date/time that the XML was imported.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.FileName">
            <summary>
            The file name (SourceFile) for the SQL code in the Manifest.
            This file is always in a relative path to the Manifest XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.SetupStep">
            <summary>
            setup step in which to run the object source
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.SetupStepStr">
            <summary>
            Convert a string to a SetupStep enum
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSource.InstallOrder">
            <summary>
            Ordering information within the setup step for running object source
            Rule 1: an object which does not depend on any other object within its
            setup step would have install order 1.
            Rule 2: an object which depends on other objects within its setup step
            will have install order of one more than the maximum install order of
            the objects it is dependant on.
            Example:
            Customers is table which does not have foreign key dependencies
            on other tables. It will have an install order of 1.
            Orders is another table which has no foreign key dependencies on other tables.
            It also has an install order of 1.
            CustomerOrders is a table which has foreign key dependencies on both the Customers
            and Orders tables. It has an install order of 2.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestSourceCollection">
            <summary>
            Collection class for WmoManifestSource
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSourceCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestSourceCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestSource)">
            <summary>
            Adds a manifest to the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSourceCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestSourceCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure">
            <summary>
            Class for registered stored procedures
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the stored procedure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.IsGenerated">
            <summary>
            Whether this trigger is generated by webstore
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.IsGeneratedStr">
            <summary>
            String version of IsGenerated
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.IsInstallOnSecondary">
            <summary>
            Whether this job should be installed on secondary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.IsInstallOnSecondaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.IsInstallOnPrimary">
            <summary>
            Whether this job should be installed on primary databases
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure.IsInstallOnPrimaryStr">
            <summary>
            Converts a string representatin into true/false, validates and allows for defaults.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection">
            <summary>
            Collection class for WmoManifestStoredProcedure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedure)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Remove(System.String)">
            <summary>
            Removes an object from the stored procedure collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.ExportSource(System.String)">
            <summary>
            Exports the source file associated with each object in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.ExportGeneratedObjects(System.String)">
            <summary>
            Reads from the in-memory data to create the source files associated with the objects.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.RegisterGenerated(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestStoredProcedureCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestTable">
            <summary>
            Class for registered tables
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.InitializeTable(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.InitializeView(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.ExportTable(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.ExportView(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTable.ToString">
            <summary>
            override to string method
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTable.Name">
            <summary>
            Name of the manifest object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTable.DataPartitionColumn">
            <summary>
            The name of the column holding the hash value.
            Defaults to the name set for the manifest if not specified.
            Required only for partitioned table in hash based partitioned manifests.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTable.IsNonPartitioned">
            <summary>
            whether this table is non-partitioned
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTable.IsPartitionedStr">
            <summary>
            String version of IsNonPartitioned. Currently the Xml has this as IsPartitioned. So this reverses the value for the IsNonPartitioned property.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTable.TableType">
            <summary>
            which type of object this is
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTable.TableTypeStr">
            <summary>
            which type of object this is
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection">
            <summary>
            Collection class for WmoManifestTable
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestTable)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Remove(System.String)">
            <summary>
            Removes an object from the table collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.ExportTables(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.ExportViews(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTableCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestTrigger">
            <summary>
            class for SQLTrigger
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTrigger.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Update the ConfigDBs with the latest changes to the table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTrigger.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from a ConfigDB.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTrigger.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTrigger.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTrigger.Validate">
            <summary>
            Validate that the in-memory state is self-consistent.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection">
            <summary>
            class for collection of triggers
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Add(Microsoft.Webstore.Management.Wmo.WmoManifestTrigger)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Remove(System.String)">
            <summary>
            Removes an object from the trigger collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Initialize(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.ExportSource(System.String)">
            <summary>
            Exports the source file associated with each object in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoManifestTriggerCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoConfigManager">
            <summary>
            Summary description for WmoConfigManager.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager">
            <summary>
            Summary description for WmoFailSafeSetDatabaseManager.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.IsOperationAllowedForTopology(System.String,System.Boolean)">
            <summary>
            Gets the valid statuses for a given operation
            </summary>
            <param name="op"></param>
            <param name="throwException"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.GetTopology">
            <summary>
            Gets the currently employed toplogy
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.GetValidOperations(System.String)">
            <summary>
            Gets the valid statuses (in a comma separated string) for a given topology
            </summary>
            <param name="topology"></param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.IsOperationAllowed(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.String,System.Boolean)">
            <summary>
            Gets the valid statuses for a given operation
            </summary>
            <param name="db"></param>
            <param name="op"></param>
            <param name="throwException"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.GetValidStatuses(System.String)">
            <summary>
            Gets the valid statuses for a given operation
            </summary>
            <param name="operation"></param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForDeploy(System.String,System.String)">
            <summary>
            Preparation steps for Deploy.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.UpgradePreCheck(System.Boolean)">
            <summary>
            Upgrade precheck
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForUpOrDowngrade(System.Int16)">
            <summary>
            Preparation steps for upgrade.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.AfterUpgrade(System.Int16)">
            <summary>
            After Upgrade
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.DeployEmptySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Deploys a secondary database during initial deployment of the failsafe set.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.DeploySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Boolean)">
            <summary>
            Deploys a secondary database for all commands except initial deployment
            of the failsafe set. 
            Used for repairing a failed secondary.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForRepair(System.String,System.String)">
            <summary>
            Preparation steps for Repair.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repairs a database that has been Marked as NeedsRepair.
            Changes Status of the database to Offline when finished.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForOffline(System.String,System.String)">
            <summary>
            Preparation steps for Mark Offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForForceOffline(System.String,System.String)">
            <summary>
            Preparation steps for Mark Offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.MarkOffline(System.String,System.String)">
            <summary>
            Does what is required for marking a database offline.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ForceMarkOffline(System.String,System.String)">
            <summary>
            Does what is required for marking a database offline.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.MarkNeedsRepair(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Does what is required for marking a database Needs Repair.
            Does nothing if the database listed is not in this.Databases.
            NOTE: called inside a try-catch block which swallows any exceptions thrown.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForOnline(System.String,System.String)">
            <summary>
            Preparation steps for Mark Online.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.MarkOnline(System.String,System.String)">
            <summary>
            Does what is required for marking a database online.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForStandby(System.String,System.String)">
            <summary>
            Preparation steps for Mark Standby.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.MarkStandby(System.String,System.String)">
            <summary>
            Does what is required by replication/logshipping for marking
            a database standby.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Promote(System.String,System.String)">
            <summary>
            Does what is required for promoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Demote(System.String,System.String,System.Boolean)">
            <summary>
            Does what is required for demoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForDemote(System.String,System.String)">
            <summary>
            Preparation steps for Demote.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.AfterDemote(System.String,System.String)">
            <summary>
            AfterDemote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrepareForPromote(System.String,System.String)">
            <summary>
            Preparation steps for Promote.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.AfterPromote(System.String,System.String)">
            <summary>
            AfterPromote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.AfterRepair(System.String,System.String,System.Boolean)">
            <summary>
            AfterPromote
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.SetupRepl(System.String,System.String)">
            <summary>
            Setup replication at database level
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.DropRepl(System.String,System.String)">
            <summary>
            Drop replication from database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.IsSqlAgentRunning(System.String)">
            <summary>
            check if sql server agent is running
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ForceRepair(System.String,System.String)">
            <summary>
            Set up whatever is needed to take a populated database to Offline state.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeStatusInConfigDB(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.String)">
            <summary>
            Change status in the config db
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeStatusInConfigDB(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Change status in the config db
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeStatusInConfigDBLocked(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Change status in the config db
            THIS FUNCTION must be called with a ticket lock already in place.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeConfigDBPromote(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Changes the config db to demote this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeConfigDBDemote(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Changes the config db to demote this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeConfigDBDemoteLocked(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Changes the config db to demote this database
            THIS FUNCTION must be called with a ticket lock already in place.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeConfigDBOneStepPromoteDemote(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Changes the config db to demote this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.ChangeConfigDBOneStepPromoteDemoteLocked(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Changes the config db to demote this database
            THIS FUNCTION must be called with a ticket lock already in place.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.DeploymentUid">
            <summary>
            the collection of databases this manager deals with
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.Databases">
            <summary>
            the collection of databases this manager deals with
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager.PrimaryDB">
            <summary>
            The primary database (null if none)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfigManager.MarkOnline(System.String,System.String)">
            <summary>
            Same as WriteAllCopiesManager
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfigManager.DeploySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Boolean)">
            <summary>
            Deploys a new secondary database. Also used for repairing a failed secondary.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfigManager.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repair only marks the database Offline. The actually repair
            process will take place in the MarkOnline code.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfigManager.UpgradePreCheck(System.Boolean)">
            <summary>
            Upgrade should not be performed for WstConfig database. Use the special upgrader. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoConfigManager.FindLatestSecondaryFromString(System.String)">
            <summary>
            Find latest secondary for the config Fss 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager">
            <summary>
            Class for distribution databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager.PublishingServer">
            <summary>
            publishing server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager.PublishingServerName">
            <summary>
            publishing server name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager.DistributionServer">
            <summary>
            distribution server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager.DistribDB">
            <summary>
            whether this object has been initialized
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoJobInstance">
            <summary>
            Class for job instance
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobInstance.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobInstance.InitInstance(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Given a Job Name, Database Uid, and Data Server Uid, populate this object.
            The data comes from the JobDeploy table and then the Instance Name is
            generated by prepending the Database name to the JobName.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.JobInstanceName">
            <summary>
            The instance name used to deploy the job. This name is typically
            the Job Name decorated with the database name.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.DeploymentUid">
            <summary>
            The GUID of the Deployment for this job instance.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.SqlServerName">
            <summary>
            SqlServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.DatabaseName">
            <summary>
            DatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.JobName">
            <summary>
            JobName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.IsInstallOnPrimary">
            <summary>
            A flag used to indicate if the job was dropped to an existing application database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstance.IsInstallOnSecondary">
            <summary>
            A flag used to indicate if the job was Added to an existing application database.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection">
            <summary>
            Collection class for WmoJobInstance
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.Add(Microsoft.Webstore.Management.Wmo.WmoJobInstance)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.InitInstance(System.Boolean)">
            <summary>
            Initialize JobInstanceCollection from JobDeploy.
            Pre-requisite: DeploymentUid, SqlServerName, DatabaseName must
            be populated before this is called.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.DeploymentUid">
            <summary>
            The Uid of the Deployment that this collection belongs to
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.SqlServerName">
            <summary>
            This collection of Job Instances is for a single Server/Database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.DatabaseName">
            <summary>
            This collection of Job Instances is for a single Server/Database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoJobInstanceCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMirroringManager">
            <summary>
            WmoMirroringManager is responsible to setup/tear down mirroring, process with
            mirroring topology promote/demote, online/offline and needsrepair/repair.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMirroringManager.PrepareForOffline(System.String,System.String)">
            <summary>
            Preparation steps for Mark Offline.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMirroringManager.SqlAgentDatabase">
            <summary>
            WmoSqlAgentDatabase object
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager">
            <summary>
            Summary description for WmoMoveDataManager.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.CreateBcpJobs">
            <summary>
            Create jobs at source databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.WaitForBcpOut">
             <summary>
             idf status  ==  BcpJobCreated
             {
             1) Start the JOb
             2) Ping Status for BcpOutDone (while loop) Sleep 30s
             Note: you can get each table total rows!
             3) Update Dst DS BcpInfo (BcpTotal)
             4) Update Config BcpOutDone
             5) copy files
             5) wait for bcpin
            }
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.CopyBcpFiles(Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.SqlInfo,Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.PartitionMapInfo)">
             <summary>
              // idf status  ==  BcpOutDone
            {
             1) Copy Bcp files to destination
             2) Update Config BcpFilesCopied
             3) Update DstDs BcpFilesCopied
            }
             </summary>
             <param name="oldInfo"></param>
             <param name="mapInfo"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.WaitForBcpIn">
            <summary>
            if status  ==  BcpFilesCopied
            {
            1) Start the JOb dst
            2) Ping Status for BcpInDone (while loop) Sleep 30s
            3) Update Config BcpInDone
            }
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.StartReplication">
            <summary>
            idf status  ==  BcpFilesCopied
            {
            3) Update Config BcpDone
            }
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.DrainAndMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.NumThreads">
            <summary>
            NumThreads
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.BatchSize">
            <summary>
            BatchSize
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMoveDataManager.Interval">
            <summary>
            Interval
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr">
            <summary>
            Summary description for WmoSingleMasterMgr.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr">
            <summary>
            Summary description for WmoSingleMasterMgr.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.PrepareForPromote(System.String,System.String)">
            <summary>
            Preparation steps for Promote.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.PrepareForOnline(System.String,System.String)">
            <summary>
            Preparation steps for Mark Online.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.DrainReplication(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Boolean)">
            <summary>
            drain replication between the specified pub and sub databases
            </summary>
            <param name="PublishingDB"></param>
            <param name="SubscribingDB"></param>
            <param name="IsRestartJob">Whether to attempt restarting stopped jobs in order to drain</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.DrainReplication(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager,Microsoft.Webstore.Management.Wmo.WmoDatabase,System.DateTime,System.Boolean)">
            <summary>
            Finish draining replication between pub and sub databses with given changedatetime marker
            ie. marker already put into source database
            </summary>
            <param name="PublishingDB"></param>
            <param name="DistribDBManager"></param>
            <param name="SubscribingDB"></param>
            <param name="ChangeDateTime"></param>
            <param name="IsRestartJob">Whether to attempt restarting stopped jobs in order to drain</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.DrainReplication(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDistributionDatabaseManager,Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Finish draining replication between pub and sub databses with given changedatetime marker
            ie. marker already put into source database
            </summary>
            <param name="PublishingDB"></param>
            <param name="DistribDBManager"></param>
            <param name="SubscribingDB"></param>
            <param name="DrainIntervalSecs"></param>
            <param name="DrainNumRetries"></param>
            <param name="ChangeDateTime"></param>
            <param name="IsRestartJob">Whether to attempt restarting stopped jobs in order to drain</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.DrainReplication(Microsoft.Webstore.Management.Wmo.WmoFailSafeSetDatabaseManager,Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase,System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Check for marker on the subscriber side
            </summary>
            <param name="fssManager"></param>
            <param name="PubDatabase"></param>
            <param name="SubDatabase"></param>
            <param name="DrainIntervalSecs"></param>
            <param name="DrainNumRetries"></param>
            <param name="ChangeDateTime"></param>
            <param name="IsRestartJob">Whether to attempt restarting stopped jobs in order to drain</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.PauseReplicationOutgoing(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Pause all out going replications from publishing DB
            Both logreader and distribution jobs are stopped
            </summary>
            <param name="publishingDB"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.PauseLogReader(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Pause log reader job of publishingDB
            </summary>
            <param name="publishingDB"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.PauseDistribution(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            pause distribution job from pub to sub databases
            </summary>
            <param name="publishingDB"></param>
            <param name="subscribingDB"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.UpdateSqlFailSafeSetSavedState(System.Int16)">
            <summary>
            Set the SavedState column.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplicationMgr.GetSqlFailSafeSetSavedState(System.Int16,System.Guid@,System.DateTime@)">
            <summary>
            Fetch saved state information
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.DeployEmptySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Deploys a secondary database during initial deployment of the failsafe set.
            Exception if the database listed is not in this.Databases.
            NOTE: does not do backup/restore of primary
            NOTE: assumes that there is no activity on the primary during the procedure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repairs a secondary database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.MarkOffline(System.String,System.String)">
            <summary>
            Does what is required for marking a database offline.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.ForceRepair(System.String,System.String)">
            <summary>
            Set up whatever is needed to take a populated database to Offline state.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.MarkNeedsRepair(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Does what is required for marking a database needs repair.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.MarkOnline(System.String,System.String)">
            <summary>
            Does what is required for marking a database online.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.MarkStandby(System.String,System.String)">
            <summary>
            Does what is required by replication for marking a database as a StandBy.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.Promote(System.String,System.String)">
            <summary>
            Does what is required for promoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.Demote(System.String,System.String,System.Boolean)">
            <summary>
            Does what is required for demoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.PrepareForUpOrDowngrade(System.Int16)">
            <summary>
            For multmaster major schema upgrade, save the current state, demote the FSS and drain
            and drop replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.AfterUpgrade(System.Int16)">
            <summary>
            For multmaster major schema upgrade, after upgrade is complete, reset up replication,
            then restore the saved state. Synchronise the various databases between each one by
            using the saved date in the MMDropReplication column as a starting point.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.DeploySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Boolean)">
            <summary>
            Deploys a new secondary database. Also used for repairing a failed secondary.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.UpdateSqlFailSafeSetMMDropReplication(System.Int16,System.DateTime)">
            <summary>
            Set the calue of the MMDropReplication column in the SqlFailSafeSet table.
            This code path is being used for Deployment Upgrade and for MoveData.
            In the case of Deployment Upgrade, replication is dropped at the start of the upgrade.
            The datetime saved in this column is used to syncronize any data items that were
            added or updated since replication was dropped.
            In the case of MoveData, the datetime is used to indicate when MoveData is started so
            that all data is syncronized for the new Sql FSS primaries to the replicas.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.SetupRepl(System.String,System.String)">
            <summary>
            Setup replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMultiMasterMgr.DropRepl(System.String,System.String)">
            <summary>
            Drop replication.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNoSecondaryManager">
            <summary>
            Summary description for WmoNoSecondaryManager.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNoSecondaryManager.DeploySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Boolean)">
            <summary>
            Detect errors
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNoSecondaryManager.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Detect errors
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNoSecondaryManager.UpgradePreCheck(System.Boolean)">
            <summary>
            Topology upgrade is not supported for this topology type. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoReplHelper">
            <summary>
            Class for distribution databases
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoReplHelper.GetPublication(Microsoft.Webstore.Management.Wmo.WmoEnum.PublicationType,Microsoft.Webstore.Management.Wmo.WmoManifest)">
            <summary>
            publication name
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr">
            <summary>
            Summary description for WmoSingleMasterMgr.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.DeployEmptySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Deploys a secondary database during initial deployment of the failsafe set.
            Exception if the database listed is not in this.Databases.
            NOTE: does not do backup/restore of primary
            NOTE: assumes that there is no activity on the primary during the procedure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repairs a secondary database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.MarkOffline(System.String,System.String)">
            <summary>
            Does what is required for marking  a database offline.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.ForceRepair(System.String,System.String)">
            <summary>
            Set up whatever is needed to take a populated database to Offline state.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.MarkNeedsRepair(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Does what is required for marking a database needs repair.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.MarkOnline(System.String,System.String)">
            <summary>
            Does what is required for marking a database online.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.MarkStandby(System.String,System.String)">
            <summary>
            Does what is required by replication/logshipping for marking 
            a database standby.
            Does nothing if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.Promote(System.String,System.String)">
            <summary>
            Does what is required for promoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.Demote(System.String,System.String,System.Boolean)">
            <summary>
            Does what is required for demoting a database.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.PrepareForDemote(System.String,System.String)">
            <summary>
            Preparation steps for Demote.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.SetupRepl(System.String,System.String)">
            <summary>
            Setup replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.DropRepl(System.String,System.String)">
            <summary>
            Drop replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoSingleMasterMgr.DeploySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Boolean)">
            <summary>
            Deploys a new secondary database. Also used for repairing a failed secondary.
            Exception if the database listed is not in this.Databases.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager">
            <summary>
            Summary description for WmoWriteAllCopiesManager.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.MarkNeedsRepair(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Marks a database needs repair.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.Repair(System.String,System.String,System.Boolean)">
            <summary>
            Repairs a secondary database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.ForceRepair(System.String,System.String)">
            <summary>
            Force repairs a secondary database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.RemoveUnNeededReplication(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Removes replication to and from current db.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.DeployEmptySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            Deploys a secondary database during initial deployment of the failsafe set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.DeploySecondary(System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus,System.Boolean)">
            <summary>
            Deploys a new secondary database. Also used for repairing a failed secondary.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.PrepareForOffline(System.String,System.String)">
            <summary>
            Preparation steps for mark offline. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.MarkOnline(System.String,System.String)">
            <summary>
            Marks a database online.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.SetupPublication(Microsoft.Webstore.Management.Wmo.WmoDatabase,System.String,System.String,System.String,System.Data.DataTable,System.Boolean)">
            <summary>
            Setup publication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.PreDrainReplication(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Restart and drain a replication
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.DrainAndDropReplication(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Drain and drop a replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.IsLastStream(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Check if the pub db is the last replication stream exist for the sub db.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.SubscriptionExist(Microsoft.Webstore.Management.Wmo.WmoDatabase,Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            Check if a subscription exist for the sub db on the pub db.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoWriteAllCopiesManager.UpgradePreCheck(System.Boolean)">
            <summary>
            Topology upgrade for WARA is not yet implemented.
            For WARA, we can't allow upgrade if any of the databases in the fail safe set are offline.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.MoveDataJobSupport">
            <summary>
            Wrapper class for access to the JobEngine.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.MoveDataJobSupport.MoveDataJobCallback">
            <summary>
            The callback method for status report updates.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection">
            <summary>
            Collection class for WebstorePartitionMoveMap
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.SafeGet(System.String,System.String)">
            <summary>
            Get the data from the WebstorePartitionMoveMap table.
            </summary>//
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Insert(System.String,System.String)">
            <summary>
            Call the WebstorePartitionMoveMap.Insert method on each object in this collection.
            Each object must have been initialized before calling this method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Clear">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.IndexOf(System.Int16)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.ObjectAtIndex(System.Int32)">
            <summary>
            Returns the object at a given index in the internal array.
            used only by the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Contains(System.Int16)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Add(Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Remove(System.Int16)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.DeploymentName">
            <summary>
            The Deployment defines the list of all partitions being moved.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.Item(System.Int16)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.WebstorePartitionMoveMapEnumerator">
            <summary>
            This class implements the IEnumerator over a WebstorePartitionMoveMapCollection
            in support of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.WebstorePartitionMoveMapEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.WebstorePartitionMoveMapEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMapCollection.WebstorePartitionMoveMapEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager">
            <summary>
            Summary description for WmoNewMoveDataManager.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.StartMoveData">
            <summary>
            Used for moving data in an "add partition" scenario.
            This method requires the following pre-conditions:
                o) Valid Manifest and Deployments have been imported and deployed.
                o) The command "wst fss import ..." has been called to import the new FSS.
                o) The command "wst fss setup ..."  has been called to set them up.
                o) The command "wst par import ..." has been called to fill the PartitionMoveMap
                        table with the partitions data that will be moving from one FSS to another.
            
            Dependencies: All partitions in the PartitionMoveMap table are checked to see if
            they are in the Default state. Any found to be in a non-default state will get a
            warning message, and all partitions associated with the FSS will have a status of
            aborted set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.StartCleanUp">
            <summary>
            The data to be cleaned is the data on the source database that is no longer needed. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.ResetPartitionMoveMapStatus(System.Boolean)">
            <summary>
            Resets the status to initial values for Move or for Clean.
            </summary>
            <param name="isClean"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.SafeSetFssToDeployed">
            <summary>
            Checks to see if there are any FSSes where all partitions are NOT listed as
            finished. All partitions must be set to MoveFinished, MoveAborted,
            CleanFinished or CleanAborted. If these criteria are met, the FSS status
            is set to "Deployed" instead of the "MovingData".
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.JobCallback(System.IAsyncResult)">
            <summary>
            Callback for job status.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.WatchMoveDataStatus">
            <summary>
            Every 15 seconds, poll the partitions that are moving data, and report the status
            VIA FireStatusEvent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.MonitorRemoteStatus(Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Called from the main watch case statement above.
            Once the status in the WstConfig.PartitionMoveMap table is set to (Move)|(Clean)JobStarted,
            the application status values in the WebstorePartitionMoveMap table are monitored instead.
            Once the status for this table is set to (Move)|(Clean)Finished, the processing resumes
            </summary>
            <param name="configMap"></param>
            <param name="countFailed"></param>
            <param name="countInProgress"></param>
            <param name="isClean"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.CheckNonDefaultFailSafeSetStatus(System.Boolean)">
            <summary>
            Verifies the state of all fail safe sets that are involved in the move. If the FSS is not
            in the correct state, a warning is printed, and all Partitions related to the FSS have a
            status of aborted set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.CheckIsDone(System.Boolean)">
            <summary>
            Verifies the state of all fail safe sets that are involved in the move. If the FSS is not
            in the correct state, a warning is printed, and all Partitions related to the FSS have a
            status of aborted set.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.DropWorkTables">
            <summary>
            Remove the WebstorePartitionMoveMap and WebstoreBulkCopy tables.
            This step is only run after all data partitions have been moved and all
            application data has been cleaned up.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.CheckDefaultStatus(Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap)">
            <summary>
            Check te status of both the source and destination dail safe set.
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.PrepareDatabases(System.Boolean)">
            <summary>
            Installs the tables and sprocs on each destination database (primary) of the
            application that is involed in the move.
            This method must have VerifyState and VerifyProgress called before.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.PopulateDatabases(System.Boolean)">
            <summary>
            Is called as part of a sequence. See the Initialization method for required calls.
            o) Deletes the contents of the WebstorePartitionMoveMap and WebstoreBulkCopy
               tables. This is a safety measure. By the time this method is called, only the
               Destination Fail Safe sets that have been approved will be effected.
            o) Populate WebstorePartitionMoveMap based on the WstConfig databases
               PartitionMoveMap.
            o) Populate WebstoreBulkCopy based on the above, along with data from the WmoManifest.
            
            Each database that is part of the move will have all data available. That is, if
            there are 100 partitions being moved to 10 Fsses, all 100 partitions will be added to
            the tables, even if those rows do not apply to this fail safe set.
            
            At the end of this method, the WebstorePartitionMoveMap and WebstoreBulkCopy classes
            will be populated as well as the data in the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.FillInWebstorePartitionMoveMapCollection(System.Boolean)">
            <summary>
            This method is called by PopulateDatabases(). All verifications will have been done by this point.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.FillInWebstoreBulkCopyCollection">
            <summary>
            This method is called by Initialize. All verifications will have been done by this point.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.SetupPausedReplication(System.Int16)">
            <summary>
            Given a partition number, setup paused replication from the source(s) to the destination.
            This requires creating the articles and the filters for the publication, adding the
            publications, subscriptions and subscribers.
            </summary>
            <param name="partitionNumber"></param>
            
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.AfterMultiMasterMoveData(System.Int16,System.Int16)">
            <summary>
            For multmaster move data, after the move from the old FSS is complete, update the
            NeedsReplication column in order to force replicate the data from the Primary
            database to the secondary database(s).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.GetMoveDataPublicationName(System.Int16)">
            <summary>
            Name is in the form MoveData_DeploymentName_Partition_PartitionNumber
            </summary>
            <param name="partitionNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.RemoveReplication(System.Int16)">
            <summary>
            Reverse of setting it up. Drop the subscriptions, then publications
            This is a best effort. We don't want to rollback the entire move data if this fails.
            If it does fail, output a failure message. Otherwise ignore it. The user will have
            to clean them up.
            </summary>
            <param name="partitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.RemapDataPartition(System.Int16,System.Int16)">
            <summary>
            This method actually does two things. It maps the specified partition to the new fail safe
            set, and it also sets the status to read/write at the same time.
            </summary>
            <param name="partitionNumber"></param>
            <param name="fssNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.MarkNeedsRepair(System.Int16)">
            <summary>
            MarkNeedsRepair will already be in an AdminLock. It is called from
            the SqlFailSafeSet class during the MarkNeedsRepair method.
            </summary>
            <param name="fssNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.MarkPartitionAborted(Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap)">
            <summary>
            This method assumes that the passed in configMap variable contains an up to date status
            taken from the WstConfig database.
            The status will not change for partitions marked MoveRemapped or CleanFinished. In these
            cases, an abort cannot roll back the work already performed.
            </summary>
            <param name="configMap"></param>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.DeploymentName">
            <summary>
            Returns the deployment name from the singleton based on the DeploymentUID
            passed in to the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.Deployment">
            <summary>
            Returns the deployment from the singleton based on the DeploymentUID
            passed in to the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.DistribDeploy">
            <summary>
            FIXX
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.Manifest">
            <summary>
            Returns the manifest of the deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.WstConfigMoveMaps">
            <summary>
            A collection of the contents of the PartitionMoveMap table in the WstConfig database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.ApplicationPartitionMoveMaps">
            <summary>
            A collection of the contents of the WebstorePartitionMoveMap table on the application
            databases. The data is generated based on the data in the WstConfig.PartitionMoveMap
            table, and inserted into this table during the move process.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.SqlFailSafeSets">
            <summary>
            The fail safe set collection of the Deployment. This includes the new FSSes as well
            as the old ones.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.SqlBulkCopyBatchSize">
            <summary>
            Batch size used during SqlBulkCopy. Default is 1000 rows.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.SqlBulkCopyTimeOut">
            <summary>
            Time out value used during bulk copy processing. Default is 8 hours (28800)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.CleanUpBatchSize">
            <summary>
            Used during cleanup. This is the number of rows to delete at a time. Default is 1000 rows.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoNewMoveDataManager.CleanUpDelay">
            <summary>
            The delay string used in the Cleanup filter. The default is 1/10th of a second.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap">
            <summary>
            This class is essentially just a structure to hold data from some columns of
            the WstConfig database PartitionMoveMap table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.Get(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Get the data from the WstConfig version of the PartitionMoveMap table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.GetStatus">
            <summary>
            Get the Status of the partition. Used within the watcher thread.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.DeploymentUid">
            <summary>
            The deployment name involved in the move.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.PartitionNum">
            <summary>
            The partition number of the data.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.OldSQLFSSNum">
            <summary>
            The Sql Fail Safe Set where the data from the indicated partition is moving from.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.NewSQLFSSNum">
            <summary>
            The Sql Fail Safe Set where the data from the indicated partition is moving to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.Status">
            <summary>
            Each partition being moved has a seperate status.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.Progress">
            <summary>
            Freeform progress string. Updated by the watcher thread.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.SourceServerName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.SourceDatabaseName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.DestinationServerName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.DestinationDatabaseName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.IsInCollection">
            <summary>
            Determines if this object is part of the Collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.JobQueued">
            <summary>
            When the job is submitted to the job engine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.JobState">
            <summary>
            State of the job according to the job framework.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap.ApplicationGetStatusFailureCount">
            <summary>
            The number of times a failure occurs trying to get application status.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection">
            <summary>
            Collection class for WstConfigPartitionMoveMap
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Get">
            <summary>
            Get the data from the WstConfigPartitionMoveMap table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.GetServersForJobs">
            <summary>
            Returns a generic List of servers where a partition on the server is either
            initialized or has a JobStarted status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.IndexOf(System.Int16)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.ObjectAtIndex(System.Int32)">
            <summary>
            Returns the object at a given index in the internal array.
            used only by the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Contains(System.Int16)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Add(Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMap)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Remove(System.Int16)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.DeploymentUid">
            <summary>
            The Deployment defines the list of all partitions being moved.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.Item(System.Int16)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.WstConfigPartitionMoveMapEnumerator">
            <summary>
            This class implements the IEnumerator over a WstConfigPartitionMoveMapCollection
            in support of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.WstConfigPartitionMoveMapEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.WstConfigPartitionMoveMapEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WstConfigPartitionMoveMapCollection.WstConfigPartitionMoveMapEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.SourceDestinationPair">
            <summary>
            Internal class used for the Status command.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoServerRole">
            <summary>
            Class for Server Role instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Takes an Xml node and initializes the member variables.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRole.Validate(System.String)">
            <summary>
            Validates the self consistency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRole.Name">
            <summary>
            Name of the ServerRole.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRole.Uid">
            <summary>
            Uid of the ServerRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRole.DataServerUid">
            <summary>
            DateServerUid of the ServerRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRole.Description">
            <summary>
            Description of the ServerRole
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection">
            <summary>
            Collection class for WmoServerRole
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Add(Microsoft.Webstore.Management.Wmo.WmoServerRole)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml)">
            <summary>
            Imports an Xml file, creating child objects and passing Xml fragments
            to them for further processing.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Initialize">
            <summary>
            Loads the in-memory data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement,Microsoft.Webstore.Management.Wmo.WmoDataServerCollection)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Exports ServerRoles
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Register">
            <summary>
            Register each ServerRole in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Purge">
            <summary>
            Purge any server role not currently in use
            Do not purge default templates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstChannels.Pipe.PipeChannel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.WSTAGENT_PIPENAME">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <param name="clientProviderChain"></param>
            <param name="serverProviderChain"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.Parse(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.CreateMessageSink(System.String,System.Object,System.String@)">
            <summary>
            IChannelSender
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.GetUrlsForUri(System.String)">
            <summary>
            
            </summary>
            <param name="objectURI"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.StartListening(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.StopListening(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.ChannelName">
            <summary>
            IChannel
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.ChannelPriority">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeChannel.ChannelData">
            <summary>
            IChannelReciever
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <param name="clientProviderChain"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.Parse(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.CreateMessageSink(System.String,System.Object,System.String@)">
            <summary>
            IChannelSender
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="objuri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.ChannelName">
            <summary>
            IChannel
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeClientChannel.ChannelPriority">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstChannels.Pipe.PipeIOException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="strText"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="strText"></param>
            <param name="lastWin32Error"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.#ctor(Microsoft.Webstore.WstChannels.Pipe.PipeIOException)">
            <summary>
            
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.LastWin32Error">
            <summary>
            LastWin32Error
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeIOException.LastWin32ErrorMessage">
            <summary>
            LastWin32ErrorMessage
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstChannels.Pipe.PipeImpersonateClient">
            <summary>
            PipeImpersonateClient
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
            <summary>
            CTOR used via the configuration file
            </summary>
            <param name="properties"></param>
            <param name="serverProviderChain"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.Parse(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.GetUrlsForUri(System.String)">
            <summary>
            IChannelReceiver
            </summary>
            <param name="objuri"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.StartListening(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.StopListening(System.Object)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.ChannelName">
            <summary>
            IChannel
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.ChannelPriority">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstChannels.Pipe.PipeServerChannel.ChannelData">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.WmoAgent.WmoAgentProxy">
            <summary>
            class for wstagent
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.WmoAgent.WmoAgentFileShare">
            <summary>
            fileshare object for the WmoAgent
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentFileShare.ValidateFileShare(System.String,System.String)">
            <summary>
            validate fileshare
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase">
            <summary>
            database object for the WmoAgent
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.GetLockObject(System.String)">
            <summary>
            LockObject
            BR - backup/restore (bug3591)
            GL - general server synchronization (bug3682, bug3807)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.m_htDatabases">
            <summary>
            Ensure Sproc installed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetupJobs(System.String,System.String,System.Data.DataSet)">
            <summary>
            creates jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.DropJob(System.String,System.String)">
            <summary>
            Drops the specified job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.DisEnableJob(System.String,System.String,System.Boolean)">
            <summary>
            Disables or Enables the specified job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RestartJob(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Restarts the specified job.
            Creates the job if job is missing and SourceText is specified.
            SourceFileName is used for error messaging if job is created with SourceText.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.EnableJob(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Enables the specified job.
            Creates the job if job is missing and SourceText is specified.
            SourceFileName is used for error messaging if job is created with SourceText.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RestartJobWait(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Restarts the specified job and wait until restarting succeeds
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RestartJobWait(System.String,System.String,System.String)">
            <summary>
            Restarts the specified job and wait until restarting succeeds
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.CheckJobStatus(System.String,System.String)">
            <summary>
            Restarts the specified job and wait until restarting succeeds
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.StopJob(System.String,System.String)">
            <summary>
            Stops the specified job and wait until restarting succeeds.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.StopJobWait(System.String,System.String)">
            <summary>
            Stops the specified job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.ValidateSqlServerIP(System.String,System.String)">
            <summary>
            Validate SqlServer IP
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.ValidateStripe(System.String,System.String,System.String)">
            <summary>
            Validate stripe directory.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.ValidateMinSqlVersion(System.String,System.String)">
            <summary>
            Validate Minimum SQL Version.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.CreateDirectory(System.String,System.String)">
            <summary>
            Create transfer directory.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsSqlRunning(System.String)">
            <summary>
            Method to just make sure sql server is running
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsSqlAgentRunning(System.String)">
            <summary>
            Method to just make sure sql server agent is running
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.GetConnectionString(System.String,System.String)">
            <summary>
            Get a Sql Connection string with default settings.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.MarkNeedsRepl(System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Marks the tiNeedsRepl column on all tables in a multi-master database. Used for
            synchronizing the data between databases of a fail safe set after replication has
            been restored.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.MarkNeedsReplByPartition(System.String,System.String,System.String,System.String,System.String,System.Int16)">
            <summary>
            Marks the tiNeedsRepl column on all tables in a multi-master database. Used for
            synchronizing the data between databases of a fail safe set after replication has
            been restored. This version updates the 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.MarkNeedsReplAll(System.String,System.String,System.String,System.String)">
            <summary>
            Marks the tiNeedsRepl column on all tables in a multi-master database. Used for
            synchronizing the data between databases of a fail safe set after replication has
            been restored. This version updates the 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.Backup(System.String,System.String,System.String,System.Boolean)">
            <summary>
            takes a backup of this database, BackupFilePath is a share
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.Copy(System.String,System.String)">
            <summary>
            copy backup file from one share to another
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.Restore(System.String,System.String,System.String,System.Boolean)">
            <summary>
            restores over this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RemapDBUsers(System.String,System.String)">
            <summary>
            remap db users
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.UpdateAccount(System.String,System.String,System.String,System.Boolean)">
            <summary>
            remap db users
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RunRegisteredScripts(System.String,System.String,System.Data.DataSet)">
            <summary>
            runs registered sql files in the database
            (scripts, tables, views, functions, sprocs and triggers)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetupRegisteredSecurity(System.String,System.String,System.Data.DataSet)">
            <summary>
            sets up roles and accounts as registered
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.AggressiveDropDB(System.String,System.String)">
            <summary>
            Aggressively drops this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetupPublication(System.String,System.String,System.String,System.String,System.String,System.Data.DataTable,System.Boolean,System.Boolean)">
            <summary>
            run to set up a publication
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.AddPublisherToDistributor(System.String,System.String,System.String,System.String)">
            <summary>
            run once per publishing server to associate the publishing server
            with a distribution server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetupSubscription(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            run to set up subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.DropSubscription(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            run to set up subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.DropAllSubscription(System.String,System.String,System.String)">
            <summary>
            run to set up subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.AddSubscriberToPublisher(System.String,System.String)">
            <summary>
            run once per publisher-subscriber pair to allow the subscribing server
            to subscribe to publications from the publishing server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.CreateMirroringEndPoint(System.String,System.String,System.String)">
            <summary>
            Create mirroring end point on the server
            </summary>
            <param name="serverName"></param>
            <param name="endPointName"></param>
            <param name="port"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsSecondaryNeedBackupRestore(System.String,System.String)">
            <summary>
            If the database is in a synchronized mirroring session, there is no need to backup/restore.
            Otherwise, there is a need to backup/restore.
            </summary>
            <param name="serverName"></param>
            <param name="DatabaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsDbForceRepairable(System.String,System.String)">
            <summary>
            Determines the state of the database. If db in restore state, cannot forcerepair
            </summary>
            <param name="serverName"></param>
            <param name="DatabaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetWitnessOrPartnerOff(System.String,System.String,System.String)">
            <summary>
            Set Witness/Partner off when trying to drop mirroring
            </summary>
            <param name="WitnessOrPartner"></param>
            <param name="serverName"></param>
            <param name="dbName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetWitnessOrPartner(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set up witness or partner
            </summary>
            <param name="witnessOrPartener"></param>
            <param name="serverName"></param>
            <param name="partnerServerName"></param>
            <param name="dbName"></param>
            <param name="completeDomainName"></param>
            <param name="port"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetMirroringTimeout(System.String,System.String,System.String)">
            <summary>
            Sets the timeout value for the mirroring session.
            </summary>
            <param name="primaryServerName"></param>
            <param name="primaryDBName"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetSessionSafety(System.String,System.String,System.String)">
            <summary>
            Set mirroring session safety to FULL or OFF. It must be FULL for automatic failover.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="safetyLevel"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsMirroringPrincipal(System.String,System.String)">
            <summary>
            Check if a database is participate in a mirroring session and participate as a principal
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetMirroringPartnerFailover(System.String,System.String)">
            <summary>
            Failover to a mirroring partner
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetMirroringPartnerSuspendOrResume(System.String,System.String,System.String)">
            <summary>
            Suspend a mirroring partner
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="suspendOrResume"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.FileGroup.ToString">
            <summary>
            returns string needed to put this file in a
            sql "create database" statement
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.FileInstance.ToString">
            <summary>
            returns string needed to put this file in a
            sql "create database" statement
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty">
            <summary>
            Top level site object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from the XML. The XML is assumed to
            be validated before this function is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoMonitoringPropertyCollection initialize method or from the WmoLogFile collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.Register(Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.RegisterSproc)">
            <summary>
            Register the template. This method is called with Dtc already started at the
            collection level. All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.UidColumnName">
            <summary>
            The UID of the parent of this property, to be defined by the instantiation of this class
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.MonitoringPropertyUid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.ParentUid">
            <summary>
            The UID of the parent of this property.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.DataType">
            <summary>
            The data type of this property.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.Value">
            <summary>
            The value of this  property.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoAction">
            <summary>
            Top level site object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAction.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from the XML. The XML is assumed to
            be validated before this function is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAction.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoActionCollection initialize method or from the WmoLogFile collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAction.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the Action. This method is called with Dtc already started at the
            collection level. All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAction.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAction.Uid">
            <summary>
            The identifier for this action.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAction.Type">
            <summary>
            The type of this action.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAction.Description">
            <summary>
            The user defined description of the Action.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAction.Properties">
            <summary>
            The collection of properties associated with this action.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoActionCollection">
            <summary>
            Collection class for Actions
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoActionCollection.lockCollection">
            <summary>
            Used for locks for threadsafeness
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoActionCollection.isInitialized">
            <summary>
            Flag to indicate if all the objects in the collection have been
            read from the config.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given uid.
            </summary>
            <returns>
            The 0-based index of the first object with the uid.
            -1 if the collection doesn't contain an object with this uid.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Add(Microsoft.Webstore.Management.Wmo.WmoAction)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Exports the in memory cache
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.AddAction(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Adds new Action(s)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Given the Monitoring node, loads Actions into the cache.
            </summary>
            <param name="objXml"></param>
            <param name="nodeMonitoring"></param>
            <param name="overWrite"></param>
            The user can supply any number of Actions. This means that the user must use the
            "wst mon deleteobject" in order to delete any base object. However, any subobject,
            in this case, the properties on objects in the xml are not treated this way. If
            a user specifies a HA that contains properties, and they specify  the -overwrite flag.
            all properties will be purged on the object. In this case, the XML is the final
            rule as to what makes up this object.
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Register">
            <summary>
            Registers the cached data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Initialize">
            <summary>
            Loads the in-memory data from the WstConfig
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoActionCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoAlertProcess">
            <summary>
            Top level site object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from the XML.
            </summary>
            The caller must set the Uid and the Name of the object before this method is
            called. This is done in order to handle the overwrite case. The Parent
            collection is the only place that knows whether the object is new or
            pre-existing.
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoAlertProcessCollection initialize method or from the WmoLogFile collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the Alert Process. This registered the contents of the WmoAlertProcess
            object with the WstConfig database. The contents must be verified and a DTC
            started before this call is made.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.UnRegister">
            <summary>
            UnRegister the AlertProcess. This deletes the AlertProcess and all ProcessAction
            children. Unlike Register, this method handles creating the DTC. This method is
            called from the WmoCommandMonitoring layer, one at a time.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.Uid">
            <summary>
            The UID of this healing action.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.Description">
            <summary>
            User defined description. 255 characters in length.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.StartActionId">
            <summary>
            The Action that will be executed first when the healing process is started.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcess.ProcessActions">
            <summary>
            A collection of WmoProcessActions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection">
            <summary>
            Collection class for AlertProcesses
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Add(Microsoft.Webstore.Management.Wmo.WmoAlertProcess)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Exports the in memory cache
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            An XML file using the target namespace of WebstoreMonitoringConfigurationSchema.xsd
            The XML file contains Monitoring and Self healing details. In this case AlertProcess
            information, including Actions as sub-nodes.
            </summary>
            <param name="objXml"></param>
            <param name="nodeMonitoring"></param>
            <param name="overWrite"></param>
            The XML file is THE reference for the sub-objects under AlertProcesses. If the
            user specifies true for overWrite, then any AlertProcess listed in the XML
            will take precedence over anything currently in the database. All entries
            pertaining to this AlertProcess will be purged, and the XML entries will
            be inserted in their place.
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Initialize">
            <summary>
            Loads the in-memory data from the WstConfig
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.AddAlertProcess(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Adds new AlertProcess(es)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.PreValidate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertProcessCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoAlertRule">
            <summary>
            Class for MonitoringAlertRule instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.AddCondition(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs about conditions
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Register">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.UnregisterAlertRuleCondition(Microsoft.Webstore.Common.Monitoring.AlertConditionType)">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Uid">
            <summary>
            Uid of the Alert Rule
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.Severity">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.GenerateAlertAt">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.GenerateAlertConditions">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.ResolveAlertConditions">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.AlertProcess">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.AlertProcessRetryCount">
            <summary>
            AlertProcessRetryCount
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRule.AlertProcessRetryPeriod">
            <summary>
            AlertProcessRetryCount
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection">
            <summary>
            Collection class for WmoMonitoringAlertRule
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Add(Microsoft.Webstore.Management.Wmo.WmoAlertRule)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            initializes dataserver, ipaddressswitches
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.AddAlertRule(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Adds new MonitoringAlertRule(s)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Register">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoAlertRuleCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping">
            <summary>
            Class for MonitoringServerRoleMapping instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Register">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.Uid">
            <summary>
            Uid of the mapping
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.MonitoredData">
            <summary>
            MonitoredData
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping.AlertRules">
            <summary>
            AlertRules
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection">
            <summary>
            Collection class for WmoMonitoringMapping
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Add(Microsoft.Webstore.Management.Wmo.WmoServerRoleMapping)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Initialize">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.AddServerRoleMapping(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Adds new mapping of server roles to monitoring items
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.ValidateAndLoadAddServerRoleMapping(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            physically adds the mappings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.DeleteServerRoleToMonitoredDatumMapping(System.String,System.String)">
            <summary>
            Removes a mapping between a Data Server and MonitoredDatum
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.DeleteServerRoleToAlertRuleMapping(System.String,System.String)">
            <summary>
            Removes a mapping between a Data Server and MonitoredDatum
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoServerRoleMappingCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum">
            <summary>
            Class for MonitoringMonitoredDatum instances
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Loads the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Update this object with data from Xml
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.UnRegister">
            <summary>
            Removes the in-memory data from the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Writes the in-memory data to the config dbs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Register">
            <summary>
            NOTE! This method only registers the MonitoringMonitoredDatum. It does not call
            RegisterDistribDBUse. Any method that calls this version of
            Register must call RegisterDistribDBUse for replicated applications.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Validate">
            <summary>
            Validates the self consitency of the in-memory data
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Uid">
            <summary>
            Uid of the Perf Counter
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Type">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.SamplingFrequency">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.AggregationType">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.AggregationInterval">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.StaleTime">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.RatePrecision">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.CollectAt">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum.Properties">
            <summary>
            The collection of Properties associated with this MonitoredDatum
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection">
            <summary>
            Collection class for WmoMonitoringMonitoredDatum
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.IndexOf(System.Guid)">
            <summary>
            Returns the index of the first object of the given Uid.
            </summary>
            <returns>
            The 0-based index of the first object with the Uid.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Add(Microsoft.Webstore.Management.Wmo.WmoMonitoredDatum)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Loads the in-memory data from Xml, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Initialize">
            <summary>
            Loads the in-memory data from the config dbs
            initializes dataserver, ipaddressswitches
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.AddMonitoredDatum(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Adds new MonitoringMonitoredDatum
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Register">
            <summary>
            register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Validate">
            <summary>
            Validate each object in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoredDatumCollection.Item(System.Guid)">
            <summary>
            Uid indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMonitoring">
            <summary>
            Top level site object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoring.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoring.Initialize">
            <summary>
            Loads the in-memory data from the config dbs, deep initialize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoring.Import(Microsoft.Webstore.Management.Wmo.WmoXml,System.Boolean)">
            <summary>
            Loads the in-memory data from the XML. The XML is assumed to
            be validated before this function is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoring.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoring.AlertRules">
            <summary>
            Collection of AlertRule.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoring.AlertProcesses">
            <summary>
            Collection of AlertProcess.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoring.MonitoredData">
            <summary>
            Collection of MonitoredData.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoring.ServerRoleMapping">
            <summary>
            Collection of Mappings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoring.Actions">
            <summary>
            Collection of Actions used for self healing or determining if the server can be
            healed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoProcessAction">
            <summary>
            Top level site object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessAction.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Loads the in-memory data from the XML. The XML is assumed to
            be validated before this function is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessAction.Initialize(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Initialize the class from the WstConfig database. This method is called from
            the WmoProcessActionCollection initialize method or from the WmoLogFile collection
            initialize method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessAction.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register the ProcessAction. This method is called with Dtc already started at the
            collection level. All validation should be completed before you get to this step.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessAction.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Reads from the in-memory data to create an XML file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.ActionUid">
            <summary>
            The Uid of the Healing Action.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.Action">
            <summary>
            The Action object based off the Uid. This object is not available
            during initializion.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.AlertProcessUid">
            <summary>
            The Alert Process Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.AlertProcess">
            <summary>
            The AlertProcess object based off the Uid. This object is not available
            during initializion.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.Id">
            <summary>
            The name of this action process.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.OnProceedId">
            <summary>
            What ProcessAction is executed next when the caller returns true;
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.OnFailureId">
            <summary>
            What ProcessAction is executed next on on failure.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessAction.OnResolveId">
            <summary>
            What ProcessAction is executed next on on Resolve.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection">
            <summary>
            Collection class for actions
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Add(Microsoft.Webstore.Management.Wmo.WmoProcessAction)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Exports the in memory cache
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Register(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Unregister(Microsoft.Webstore.Management.Wmo.WMOSprocs)">
            <summary>
            Unregister all ProcessActions associated with the AlertProcess. This method is
            ONLY called from the WmoAlertProcess.Register method. The internal steps are:
            User loads XML with the AlertProcess object always fully defined. At register
            time, we unregister all ProcessActions, then re-register them from the new
            objects supplied by the user. DTC must be started before this method is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Initialize(Microsoft.Webstore.Management.Wmo.WmoXml,System.Xml.XmlNode)">
            <summary>
            Initializes data elements from XML
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.ValidateCollectionContents">
            <summary>
            Validates the contents of the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoProcessActionCollection.AlertProcessUid">
            <summary>
            The uid of the parent.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1">
            <summary>
            Collection class for WmoMonitoringProperty
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.Add(`0)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.Export(Microsoft.Webstore.Management.Wmo.WmoXmlBuilder,System.Xml.XmlElement)">
            <summary>
            Exports the in memory cache
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.Register(Microsoft.Webstore.Management.Wmo.WmoMonitoringProperty.RegisterSproc)">
            <summary>
            Register each object in the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.Validate">
            <summary>
            Validates the databases.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.ParentUid">
            <summary>
            This collection must always be in the context of a parent. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.Item(System.Int32)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Management.Wmo.WmoMonitoringPropertyCollection`1.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSetting">
            <summary>
            Stores an individual settings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCentralizedSettings">
            <summary>
            Holds the metadata about the centaralized settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Common.QueryExecute.WspBulkUpdateBatchExpirationInterval(System.Guid,System.String,System.Int32)">
            <summary>
            WspBulkUpdateBatchExpirationInterval
            </summary>
            <param name="statusId"></param>
            <param name="csvBatchIdsStr"></param>
            <param name="heartbeatInterval"></param>
        </member>
        <member name="T:Microsoft.Webstore.Common.ConfigurationAccess">
            <summary>
            This class provides functionality related to access to the configuration file. Instance functions are not thread-safe. Static functions are thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.#ctor">
            <summary>
            If not initialized, initializes the MSN Runtime and creates a new instance of ConfigurationAccess.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.AddWebstoreConfiguration(System.Xml.XmlNode)">
            <summary>
            Adds a new XmlNode to the webstore section of the configuration file.
            </summary>
            <param name="nodeToAdd">The new XmlNode to add.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
            <summary>
            Creates an System.Xml.XmlNode with the specified System.Xml.XmlNodeType System.Xml.XmlDocument.Name, and System.Xml.XmlNode.NamespaceURI.
            </summary>
            <param name="type">The XmlNodeType of the new node.</param>
            <param name="name">The qualified name of the new node. If the name contains a colon then it is parsed into System.Xml.XmlNode.Prefix and System.Xml.XmlDocument.LocalName components.</param>
            <param name="namespaceURI">The namespace URI of the new node.</param>
            <returns>The new XmlNode.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.CreateAttribute(System.String)">
            <summary>
            Creates an System.Xml.XmlAttribute with the specified System.Xml.XmlDocument.Name.
            </summary>
            <param name="attributeName">The qualified name of the attribute. If the name contains a colon, the System.Xml.XmlNode.Prefix property reflects the part of the name preceding the first colon and the System.Xml.XmlDocument.LocalName property reflects the part of the name following the first colon. The System.Xml.XmlNode.NamespaceURI remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case NamespaceURI has a value of http://www.w3.org/2000/xmlns/.</param>
            <returns>The new XmlAttribute.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.GetWebstoreConfiguration(System.String)">
            <summary>
            Gets the XmlElement that represent the Webstore configuration for the specified value.
            </summary>
            <param name="value">The value that identifies the webstore configuration we are looking for.</param>
            <returns>The XmlElement that represents the specified configuration.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.GetPathFromString(System.String)">
            <summary>
                Creates a fully expanded, valid path from the specified string.
            </summary>
            <param name="value">The string to expand and validate.</param>
            <returns>The fully expanded, valid path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.OpenWebstoreSubKey(Microsoft.Win32.RegistryKeyPermissionCheck)">
            <summary>
            Locates and opens Webstore sub key in the registry.
            </summary>
            <param name="permission">Required access permissions while opening the WebstoreSubKey. </param>
            <returns>The handler to the opened Webstore subkey.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.GetConfigFileLocation">
            <summary>
            Gets the config file location.
            </summary>
            <returns>Config file location, null if it is not found.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.IntializeMsnRuntime">
            <summary>
            Initializes MSN Runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.SaveNewConfiguration(Microsoft.Webstore.Common.ConfigurationAccess)">
            <summary>
            Saves the new configuration over the existing configuration file.
            </summary>
            <param name="newConfiguration"></param>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.ConfigurationFilePath">
            <summary>
            Gets the full path for the configuration file that is used to initialize MSN Runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.ConfigurationDocument">
            <summary>
            The Xml document that represent the configuration file. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.Configuration">
            <summary>
            Gets the configuration exposed by the MSN Runtime for read only purposes.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.NamespaceURI">
            <summary>
            Gets the namespace uri of the configuration document.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WmoStatusEventType">
            <summary>
            Status Event type.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.WmoStatusEventType.Verbose">
            <summary>
            Verbose.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.WmoStatusEventType.Information">
            <summary>
            Information.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.WmoStatusEventType.InProgress">
            <summary>
            The step is in progress.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.WmoStatusEventType.Success">
            <summary>
            The step succeeded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.WmoStatusEventType.Fail">
            <summary>
            The step failed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.WmoStatusEventType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WmoStatusEventArgs">
            <summary>
            class for WmoStatusEventArgs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoStatusEventArgs.#ctor(System.String,Microsoft.Webstore.Common.WmoStatusEventType)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoStatusEventArgs.#ctor(System.String,Microsoft.Webstore.Common.WmoStatusEventType,System.Exception)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoStatusEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for Serializable
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoStatusEventArgs.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoStatusEventArgs.ToString(System.Boolean)">
            <summary>
            ToString
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoStatusEventArgs.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoStatusEventArgs.StepName">
            <summary>
            StepName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoStatusEventArgs.EventType">
            <summary>
            EventType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoStatusEventArgs.Exception">
            <summary>
            EventType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoStatusEventArgs.ThreadNumber">
            <summary>
            ThreadNumber
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoStatusEventArgs.DateTime">
            <summary>
            DateTime of event
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WmoStatusEventHandler">
            <summary>
            delegate
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WmoException">
            <summary>
            class for WmoException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoException.#ctor(System.Int32,System.Exception)">
             <summary>
            
             </summary>
             <param name="number"></param>
             <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoException.#ctor(System.Int32,System.String,System.Exception)">
             <summary>
            
             </summary>
             <param name="number"></param>
             <param name="message"></param>
             <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoException.#ctor(System.Int32,System.String)">
             <summary>
            
             </summary>
             <param name="number"></param>
             <param name="message"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoException.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.ManifestName">
            <summary>
            ManifestName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.DeploymentName">
            <summary>
            DeploymentName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.ServerName">
            <summary>
            ServerName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.DatabaseName">
            <summary>
            DatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.Context">
            <summary>
            Context
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoException.Number">
            <summary>
            The number of the exception.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WmoSpawnProcess">
            <summary>
            Helper class to spawn a process
            E.g. Svr reboot command will use it.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WmoSpawnProcess.Run(System.Int32)">
            <summary>
            Start the process
            </summary>
            <param name="timeoutMs"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.Common.WmoThreadLocalStorage">
            <summary>
            WmoThreadLocalStorage
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WmoThreadLocalStorage.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.LatencyInfo">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.LatencyInfo.#ctor(System.Int32,System.Guid,System.Guid,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.SourceSqlDBUid">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.DestSqlDBUid">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.Latency">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.LatencyBucket">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.SqlFssNum">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstLatencyManager">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstLatencyManager.GetLatency">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstLatencyManager.GetLatency(System.Guid,System.Guid,System.Guid)">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstTimer">
            <summary>
            A Timer class based on System.Net.Datatime
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.#ctor">
            <summary>
            WstTimer constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.Start">
            <summary>
            Starts the timer (must be called before Stop()).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.Stop">
            <summary>
            Stops the timer (can be called repeatedly for progressive elapsed time).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.ToString">
            <summary>
            Gets the elapsed time as a string in HH:mm:ss.fff format
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.Ticks">
            <summary>
            Gets the elapsed time as number of Ticks
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.Seconds">
            <summary>
            Gets the elapsed time as number of Seconds
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.Milliseconds">
            <summary>
            Gets the elapsed time as number of Milliseconds
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.ElapsedTime">
            <summary>
            Gets the elapsed time as a System.TimeSpan
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstTrace">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.RefreshTraceSwitches">
            <summary>
            Refreshes the trace switches.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.CreateLogFile(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.WriteLogFileLineIf(System.Boolean,System.Object)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.CloseLogFile">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceError(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceWarning(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceInfo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceVerbose(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceDebug(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.LogExceptionEvent(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="exceptionMsgPrefix"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.LogExceptionEvent(System.String,System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            
            </summary>
            <param name="exceptionMsgPrefix"></param>
            <param name="e"></param>
            <param name="st"></param>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.LogFileName">
            <summary>
            LogFileName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.GeneralTrace">
            <summary>
            GeneralTrace
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.LogFileTrace">
            <summary>
            LogFileTrace
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.WstDisplayVerbose">
            <summary>
            Display verbose message notifications on console
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.AdminToolDisplayVerbose">
            <summary>
            Display verbose message notifications on admin tool
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlStart">
            <summary>
            Trace begin execution of SQL commands on Deployments (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlCompleted">
            <summary>
            Trace execution completed of SQL commands Deployments (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlInfoMessages">
            <summary>
            Trace SQL Info Messages received from SQL Server during cmd execution (like print, etc)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlError">
            <summary>
            Trace errors received from SQL when executing SQL commands on Deployments (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceCfgStart">
            <summary>
            Trace begin execution of SQL commands against Config DBs(true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceCfgCompleted">
            <summary>
            Trace execution completed of SQL commands against Config DBs(true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceCfgError">
            <summary>
            Trace errors received from SQL when executing SQL/WST commands against Config DBs (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceDtcInfo">
            <summary>
            Trace start/end of Distributed Transactions (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceAgentDB">
            <summary>
            Trace WmoSqlAgentDatabase low level database operations
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceAdminLockInfo">
            <summary>
            Trace start/end of Admin Locks (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceAdminLockVerbose">
            <summary>
            Trace more detailed AdminLock information (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceMoveData">
            <summary>
            Trace WstMoveData low level database operations
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstWorkItem">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.#ctor(System.Threading.WaitCallback)">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstThread">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(System.Threading.WaitCallback)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(Microsoft.Webstore.Common.WstWorkItem)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstThreadPool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxThreads"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            Defaults the state to NULL
            Defaults the timeout to infinite.
            </summary>
            <param name="threadProc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            Defaults the timeout to infinite.
            </summary>
            <param name="threadProc"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object,System.Int32)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            If millisecondsTimeout is reached, returns false, otherwise
            returns true.
            </summary>
            <param name="threadProc"></param>
            <param name="state"></param>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.WstCallback(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.Int32)">
            <summary>
            Returns a thread pool using the passed in value. If the value is less then
            1, DefaultMaximumThreads is used instead.
            </summary>
            <param name="threadCount"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.String)">
            <summary>
            Uses passed in string as a call into the System Centralized settings
            for the value. If the setting is missing, uses the default.
            </summary>
            <param name="centralizedSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.String,System.Int32)">
            <summary>
            Uses passed in string to get the centralized setting for the thread count.
            If the centralized setting does not exist or is less then 1, uses the
            requestedThreads parameter.
            </summary>
            <param name="centralizedSetting"></param>
            <param name="requestedThreads"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetCentralizedSettingOverride(System.String)">
            <summary>
            Returns the Setting that matches the settingEntry name. If the settingEntry does not exist
            in the WebstoreMetaData.WebstoreSettings class, it will return the default from this class.
            </summary>
            <param name="settingEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetSystemAvailableThreads">
            <summary>
            Retrieves the difference between the maximum number of thread pool
            threads, returned by GetMaxThreads, and the number currently active.
            http://msdn2.microsoft.com/en-us/library/system.threading.threadpool.getavailablethreads.aspx
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetSystemMaxThreads">
            <summary>
            Retrieves the number of requests to the thread pool that can be active
            concurrently. All requests above that number remain queued until thread
            pool threads become available.
            http://msdn2.microsoft.com/en-us/library/system.threading.threadpool.getmaxthreads.aspx
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.MaxThreads">
            <summary>
            Property to set or get the maximum number of threads allowed
            for this pool.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.ActiveThreads">
            <summary>
            ActiveThreads are the number of threads in use.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.IsFull">
            <summary>
            Indicates if the pool can accept more processes.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspGetAdminLock(System.Data.SqlTypes.SqlGuid,System.Int16,System.String,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="ResourceUID"></param>
            <param name="ResourceID"></param>
            <param name="ResourceType"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspReleaseAdminLock(System.Data.SqlTypes.SqlGuid,System.Int16,System.String,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="ResourceUID">DeploymentUid</param>
            <param name="ResourceID"></param>
            <param name="ResourceType"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspUpdateDBStatus(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="DBUid"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspUpdateSQLFailSafeSetDemoteDB(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Demote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspGetConfigVersion">
            <summary>
            Compare that current wstconfig version is the same as the one supported
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspRegisterAdminHistoryStart(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a Distribution
            </summary>
            <param name="AuditUID"></param>
            <param name="ParentAuditUID"></param>
            <param name="StartDateTime"></param>
            <param name="StartObjectState"></param>
            <param name="CmdObjectType"></param>
            <param name="CmdOperation"></param>
            <param name="ObjectName"></param>
            <param name="AdditionalArguments"></param>
            <param name="Reason"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspRegisterAdminHistoryFinish(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32,System.String,System.Int32@)">
            <summary>
            Insert or update Article
            </summary>
            <param name="AuditUID">for [AdminHistory].[AuditUID] column</param>
            <param name="EndDateTime">for [AdminHistory].[EndDateTime] column</param>
            <param name="ResultStatus">for [AdminHistory].[Status] column</param>
            <param name="ErrorMessage">for [AdminHistory].[ErrorMessage] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspUpdateServerRebootStatus(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Int16,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="DataServerUID"></param>
            <param name="Step"></param>
            <param name="StepDescription"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspCleanServerRebootStatus(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="DataServerUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspCheckWmoVersion(System.String)">
            <summary>
            Compare wmo version and return config version
            </summary>
            <param name="WmoVersion"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterObjectSource(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update an Object Source
            </summary>
            <param name="ObjectSourceUid"></param>
            <param name="ManifestUID">for [ObjectSource].[ManifestUID] column</param>
            <param name="InstallOrder">for [ObjectSource].[InstallOrder] column</param>
            <param name="SetupStep">for [ObjectSource].[SetupStep] column</param>
            <param name="SourceCRC">for [ObjectSource].[SourceCRC] column</param>
            <param name="SourceModDateTime">for [ObjectSource].[SourceModDateTime] column</param>
            <param name="SourceFileName">for [ObjectSource].[SourceFileName] column</param>
            <param name="SourceText">for [ObjectSource].[SourceText] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspAgentGetFiles(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspAgentGetJobSource(System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32)">
            <summary>
            Get the Object Source for Jobs in a Manifest.
            </summary>
            <param name="SqlDatabaseUid"></param>
            <param name="GetPrimaryJobs"></param>
            <param name="GetSecondaryJobs"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspAgentGetRegisteredSecurity(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the Accounts belonging belonging to a Deployment
            </summary>
            <param name="DatabaseUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropDeployment(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUID"></param>
            <param name="SiteWideDeploymentTicket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropManifest(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Purge manifest and that is no longer in use. Remove from all tables that reference the Manifest.
            </summary>
            <param name="ManifestUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetWstConfigDatabase">
            <summary>
            Get information on a file group from SQLDatabase table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetFileSharesForServer(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the SQLDatabases belonging belonging to a Server
            </summary>
            <param name="DataServerUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllSQLFileGroups(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all SQLFileGroups belonging to a Manifest
            </summary>
            <param name="ManifestUID">for SQLFileGroup.ManifestUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllManifests">
            <summary>
            Get all the Manifests
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDeployments">
            <summary>
            Get all the Deployments belonging belonging to a Manifest
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllSQLFailSafeSets(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the SQLFailSafeSets and databases belonging belonging to a Deployment
            </summary>
            <param name="DeploymentUID">for SQLFailSafeSet.DeploymentUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDataPartitions(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the LogicalPartitions belonging belonging to a Deployment
            </summary>
            <param name="DeploymentUID">for DataPartition.DeploymentUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetEnvironment">
            <summary>
            Get information on environment, datacenter, switch and dataserver
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetClientSettings(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a file group from Deployment table
            </summary>
            <param name="DeploymentUID">for [Deployment].[DeploymentUID] column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetManifest(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a manifest from Manifest table
            </summary>
            <param name="ManifestUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDeployment(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a file group from Deployment table
            </summary>
            <param name="DeploymentUID">for [Deployment].[DeploymentUID] column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDataServer(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get a specific Server
            </summary>
            <param name="DataServerUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterDataServer(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Insert or update a DataServer
            </summary>
            <param name="DataServerUID">for [DataServer].[DataServerUID] column</param>
            <param name="ServerName">for [DataServer].[ServerName] column</param>
            <param name="DataCenterName">for [DataServer].[DataCenterName] column</param>
            <param name="ClusterName">for [DataServer].[ClusterUID] column</param>
            <param name="Description">for [DataServer].[Description] column</param>
            <param name="SiteWideServerTicket">for [Environment].[MaxServerTicket] column</param>
            <param name="DistributionDatabaseTemplateUid"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterDeployment(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.String,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUID">for [Deployment].[DeploymentUID] column</param>
            <param name="ManifestUID">for [Deployment].[ManifestUID] column</param>
            <param name="DeploymentName">for [Deployment].[DeploymentName] column</param>
            <param name="MaxTicket">for [Deployment].[MaxTicket] column</param>
            <param name="MaxPartitionTicket">for [Deployment].[MaxPartitionTicket] column</param>
            <param name="MaxDeleteTicket">for [Deployment].[MaxDeleteTicket] column</param>
            <param name="Description">for [Deployment].[Description] column</param>
            <param name="SystemManifestUID">for [Deployment].[SystemManifestUID] column</param>
            <param name="SiteWideDeploymentTicket">for [Environment].[MaxDeploymentTicket] column</param>
            <param name="PreviousManifestUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterEnvironment(System.Data.SqlTypes.SqlGuid,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a Deployment
            </summary>
            <param name="EnvironmentUID">for [Environment].[EnvironmentUID] column</param>
            <param name="EnvironmentName">for [Environment].[EnvironmentName] column</param>
            <param name="TicketExpirationInterval">for [Environment].[TicketExpirationInterval] column</param>
            <param name="PollingIntervalClient">for [Environment].[PollingIntervalClient] column</param>
            <param name="PollingOffsetClient">for [Environment].[PollingOffsetClient] column</param>
            <param name="PollingOffsetService">for [Environment].[PollingOffsetService] column</param>
            <param name="HistoryRetentionPeriod">for [Environment].[HistoryRetentionPeriod] column</param>
            <param name="LatencyPollingInterval">for [Environment].[LatencyPollingInterval] column</param>
            <param name="LatencyBucket0">for [Environment].[LatencyBucket0] column</param>
            <param name="LatencyBucket1">for [Environment].[LatencyBucket1] column</param>
            <param name="LatencyBucket2">for [Environment].[LatencyBucket2] column</param>
            <param name="LatencyBucket3">for [Environment].[LatencyBucket3] column</param>
            <param name="LockWaitInterval">for [Environment].[LockWaitInterval] column</param>
            <param name="LockNumRetries">for [Environment].[LockNumRetries] column</param>
            <param name="Ticket">for [Environment].[Ticket] column</param>
            <param name="SiteWideServerTicket">for [Environment].[SiteWideServerTicket] column</param>
            <param name="SiteWideServerDeleteTicket">for [Environment].[SiteWideServerDeleteTicket] column</param>
            <param name="SiteWideDeploymentTicket">for [Environment].[SiteWideDeploymentTicket] column</param>
            <param name="MaxSelfAdminInfoTicket">for [Environment].[MaxSelfAdminInfoTicket ] column</param>
            <param name="MaxSelfAdminInfoDeleteTicket">for [Environment].[MaxSelfAdminInfoDeleteTicket] column</param>
            <param name="MaxSettingsTicket">for [Environment].[MaxSettingsTicket] column</param>
            <param name="MaxSettingsDeleteTicket">for [Environment].[MaxSettingsDeleteTicket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterClientSettings(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a Deployment
            </summary>
            <param name="DeploymentUID">for [ClientSettings].[DeploymentUID] column</param>
            <param name="FailSafeSetType">for [ClientSettings].[FailSafeSetType] column</param>
            <param name="DefaultReadCmdType"></param>
            <param name="DefaultWriteCmdType"></param>
            <param name="SecondaryStaleThreshold">for [ClientSettings].[SecondaryStaleThreshold] column</param>
            <param name="SecondaryStaleDCThreshold">for [ClientSettings].[SecondaryStaleDCThreshold] column</param>
            <param name="Ticket">for [ClientSettings].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLFileGroup(System.Data.SqlTypes.SqlGuid,System.String,System.Int32@)">
            <summary>
            Insert or update SQLFileGroup
            </summary>
            <param name="ManifestUID">for [SQLFileGroup].[ManifestUID] column</param>
            <param name="Name">for [SQLFileGroup].[Name] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterIPAddress(System.String,System.Data.SqlTypes.SqlGuid,System.String,System.Boolean,System.Int32@)">
            <summary>
            Insert or update an IPAddress
            </summary>
            <param name="IPAddr"></param>
            <param name="DataServerUID">for [IPAddress].[DataServerUID] column</param>
            <param name="SwitchName">for [IPAddress].[SwitchName] column</param>
            <param name="IsPreferred">for [IPAddress].[IsPreferred] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterManifest(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int16,System.String,System.Boolean,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a Manifest
            </summary>
            <param name="ManifestUID">for [Manifest].[ManifestUID] column</param>
            <param name="ManifestName">for [Manifest].[ManifestName] column</param>
            <param name="ManifestVersion">for [Manifest].[ManifestVersion] column</param>
            <param name="PartitionType">for [Manifest].[PartitionType] column</param>
            <param name="PartitionCount">for [Manifest].[PartitionCount] column</param>
            <param name="PartitionColumnName">for [Manifest].[PartitionColumnName] column</param>
            <param name="isNoExtraObjectValidation">for [Manifest].[isNoExtraObjectValidation] column</param>
            <param name="TypeOfSQLSecondaries"></param>
            <param name="minSQLServerVersion"></param>
            <param name="Description">for [Manifest].[Description] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterDataPartition(System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a DataPartition
            </summary>
            <param name="DeploymentUID">for [DataPartition].[DeploymentUID] column</param>
            <param name="PartitionNum">for [DataPartition].[PartitionNum] column -- bug 4377</param>
            <param name="SQLFSSNum">for [DataPartition].[SQLFSSNum] column -- bug 4377</param>
            <param name="FileShareFSSNum">for [DataPartition].[FileShareFSSNum] column -- bug 4377</param>
            <param name="Status">for [DataPartition].[Status] column</param>
            <param name="Ticket">for [DataPartition].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAllDataPartitions(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Register all logical partitions
            </summary>
            <param name="DeploymentUID"></param>
            <param name="DataPartitions"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAllSqlFailSafeSets(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Bulk Insert SqlFailSafeSet and Database.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="RawXml"></param>
            <param name="Ticket"></param>
            <param name="ManifestUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAllFileFailSafeSets(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Bulk Insert FileFailSafeSet and FileShare.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="RawXml"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterReplPublication(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a ReplPublication (Manifest)
            </summary>
            <param name="ManifestUID"></param>
            <param name="Name"></param>
            <param name="SourceUid"></param>
            <param name="PublicationType"></param>
            <param name="MMChangeDateTimeColumnName"></param>
            <param name="MMNeedsReplicationColumnName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterReplArticle(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a ReplArticle (Manifest)
            </summary>
            <param name="ManifestUID"></param>
            <param name="PublicationName"></param>
            <param name="ArticleName"></param>
            <param name="SqlTableName"></param>
            <param name="InsertSprocName"></param>
            <param name="UpdateSprocName"></param>
            <param name="DeleteSprocName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterReplPublicationDeploy(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Insert or update a ReplPublicationDeploy row
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PublicationName"></param>
            <param name="ManifestPubName"></param>
            <param name="ManifestUid"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterReplDistribDeploy(System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Insert or update a ReplDistribDeploy row
            </summary>
            <param name="DeploymentUid"></param>
            <param name="StaleAlertInterval"></param>
            <param name="DrainInterval"></param>
            <param name="DrainNumRetries"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLFailSafeSet(System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Insert or update a SQLFailSafeSet
            </summary>
            <param name="DeploymentUID">for [SQLFailSafeSet].[DeploymentUID] column</param>
            <param name="SQLFSSNum">for [SQLFailSafeSet].[SQLFSSNum] column</param>
            <param name="PrimarySQLDBUID">for [SQLFailSafeSet].[PrimarySQLDBUID] column</param>
            <param name="DfltPriSQLDBUID">for [SQLFailSafeSet].[DfltPriSQLDBUID] column</param>
            <param name="Ticket">for [SQLFailSafeSet].[Ticket] column</param>
            <param name="Status">for [SQLFailSafeSet].[Status] column  -- bug 4377</param>
            <param name="ManifestUID"></param>
            <param name="ClusterUID"></param>
            <param name="DatabaseTemplateUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSecurityAccount(System.Data.SqlTypes.SqlGuid,System.String,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="AccountName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSecurityAccountRole(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="AccountName"></param>
            <param name="RoleName"></param>
            <param name="ManifestUid"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSecurityRole(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlGuid,System.Byte,System.Byte,System.Byte,System.Byte,System.Int32@)">
            <summary>
            Insert or update a SecurityRole
            </summary>
            <param name="ManifestUID">for [SecurityRole].[ManifestUID] column</param>
            <param name="Name">for [SecurityRole].[Name] column</param>
            <param name="SourceUid"></param>
            <param name="SprocGrantMask">for [SecurityRole].[SprocGrantMask] column</param>
            <param name="FunctionGrantMask">for [SecurityRole].[FunctionGrantMask] column</param>
            <param name="TableGrantMask">for [SecurityRole].[TableGrantMask] column</param>
            <param name="ViewGrantMask">for [SecurityRole].[ViewGrantMask] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLDatabase(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Insert or update a SQLDatabase
            </summary>
            <param name="SQLDatabaseUID">for [SQLDatabase].[SQLDatabaseUID] column</param>
            <param name="DataServerName">for [SQLDatabase].[SQLServerName] column</param>
            <param name="SQLDatabaseName">for [SQLDatabase].[SQLDatabaseName] column</param>
            <param name="DeploymentUID">for [SQLDatabase].[DeploymentUID] column</param>
            <param name="SQLFSSNum">for [SQLDatabase].[PhysicalPartitionNum] column -- bug 4377</param>
            <param name="Ticket">for [SQLDatabase].[Ticket] column</param>
            <param name="Status">for [SQLDatabase].[Status] column</param>
            <param name="DefaultStatus">for [SQLDatabase].[DefaultStatus] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLTable(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlGuid,System.String,System.Boolean,System.String,System.Int32@)">
            <summary>
            Insert or update a SQLTable
            </summary>
            <param name="ManifestUID">for [SQLTable].[ManifestUID] column</param>
            <param name="Name">for [SQLTable].[Name] column</param>
            <param name="SourceUid"></param>
            <param name="TableType"></param>
            <param name="IsNonPartitioned">for [SQLTable].[IsNonPartitioned] column</param>
            <param name="PartitionColumnName">for [SQLTable].[PartitionColumnName] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLObject(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32@)">
            <summary>
            Insert or update the SQLObject table
            </summary>
            <param name="ManifestUID">for SQLObject.ManifestUID column</param>
            <param name="ObjectType">for SQLObject.ObjectType column</param>
            <param name="Name">for SQLObject.Name column</param>
            <param name="SourceUID">for SQLObject.SourceUID column</param>
            <param name="IsInstallOnPrimary">for SQLObject.IsInstallOnPrimary column</param>
            <param name="IsInstallOnSecondary">for SQLObject.IsInstallOnSecondary column</param>
            <param name="IsGenerated">for SQLObject.IsGenerated column</param>
            <param name="IsUpgradeOnly">for SQLObject.IsUpgradeOnly column</param>
            <param name="IsDowngradeOnly">for SQLObject.IsDowngradeOnly column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateDBStatus(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="DBUid"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSQLFailSafeSetDemoteDB(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Demote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSQLFailSafeSetPromoteDB(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Promote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSQLFailSafeSetOneStepPromoteDemote(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Demote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBToDemoteUid"></param>
            <param name="DBToPromoteUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDatabaseTemplate">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDatabaseTemplate(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllFileGroup(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetFileGroup(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllLogicalFile(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllLogFile(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetLogicalFile(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetStripe(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllStripe(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterDatabaseTemplate(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Boolean,System.String,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
            <param name="Name"></param>
            <param name="Description"></param>
            <param name="IsDistributionOnly"></param>
            <param name="DatabaseBackupAdditionalScript"></param>
            <param name="DatabaseRestoreAdditionalScript"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropDatabaseTemplate(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Drop DatabaseTemplate(s) that are no longer in use.
            </summary>
            <param name="DatabaseTemplateUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterFileGroup(System.Data.SqlTypes.SqlGuid,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
            <param name="FileGroupName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterLogicalFile(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
            <param name="FileGroupName"></param>
            <param name="LogicalFileName"></param>
            <param name="Path"></param>
            <param name="Size"></param>
            <param name="MaxSize"></param>
            <param name="FileGrowth"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterStripe(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
            <param name="Directory"></param>
            <param name="Share"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetAssignDatabaseTemplate(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUID"></param>
            <param name="DeploymentUID"></param>
            <param name="SQLFSSNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateServerAssignDatabaseTemplate(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUID"></param>
            <param name="DataServerUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDataServers">
            <summary>
            Get all Servers
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetSQLDBsForServer(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the SQLDatabases belonging belonging to a Server
            </summary>
            <param name="DataServerUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllFileFailSafeSets(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the FileFailSafeSets and databases belonging belonging to a Deployment
            </summary>
            <param name="DeploymentUID">for FileFailSafeSet.DeploymentUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterFileFailSafeSet(System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Int32@)">
            <summary>
            Insert or update a FileFailSafeSet
            </summary>
            <param name="DeploymentUID">for [FileFailSafeSet].[DeploymentUID] column</param>
            <param name="FileShareFSSNum">for [FileFailSafeSet].[FileShareFSSNum] column  -- bug 4377</param>
            <param name="PrimaryFileShareUID">for [FileFailSafeSet].[PrimaryFileShareUID] column</param>
            <param name="DfltPriFileShareUID">for [FileFailSafeSet].[DfltPriFileShareUID] column</param>
            <param name="Ticket">for [FileFailSafeSet].[Ticket] column</param>
            <param name="Status">for [FileFailSafeSet].[Status] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFileFailSafeSetDemoteFileShare(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Demote a file share on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="FileFailSafeSetID"></param>
            <param name="FileShareUID"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFileFailSafeSetPromoteFileShare(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Promote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="FileFailSafeSetID"></param>
            <param name="FileShareUID"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterFileShare(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Int32@)">
            <summary>
            Insert or update a FileShare
            </summary>
            <param name="FileShareUID">for [FileShare].[FileShareUID] column</param>
            <param name="DataServerName">for [FileShare].[SQLServerName] column</param>
            <param name="FileSharePath">for [FileShare].[FileSharePath] column</param>
            <param name="DeploymentUID">for [FileShare].[DeploymentUID] column</param>
            <param name="FileShareFSSNum">for [FileShare].[PhysicalPartitionNum] column  -- bug 4377</param>
            <param name="Ticket">for [FileShare].[Ticket] column</param>
            <param name="Status">for [FileShare].[Status] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFileShareStatus(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the FileShare status
            DeploymentUID is passed in because we need to row lock the deployment
            table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="FileShareUID"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDeploymentTemplateObjects(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all information for the DatabaseTemplateObject. This includes default
            File Group info, Jobs, DistributionDefaults, Replication Publication, 
            Subscription and Accounts.
            </summary>
            <param name="DeploymentUid">Guid of the Deployment</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetClientPollingInterval">
            <summary>
            Get Client Polling Interval
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetJobsForDatabase(System.String,System.String)">
            <summary>
             Get rows from Job table, but only jobs that would be installed on the
             passed in SqlServer and Database.
            </summary>
            <param name="ServerName"></param>
            <param name="SqlDatabaseName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetObjectSource(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a Object from the ObjectSource table
            </summary>
            <param name="ObjectSourceUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the status to be Deployed or Not Deployed.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetManifestUid(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the MainfestUID of the Sql Fail Safe Set
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="ManifestUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFileFailSafeSetStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the status to be Deployed, Not Deployed, upgrading or moving data.
             DeploymentUID is passed in because we need to row lock the deployment
             table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="FileShareFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetFSSLatency(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="DestSQLDBUID"></param>
            <param name="SourceSQLDBUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterSQLDatabase(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="SQLDatabaseUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMaxDeleteTicket(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMaxTicket(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAdminHistory(System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32)">
            <summary>
            Get the history for all objects or a particular object.
            </summary>
            <param name="CmdObjectType"></param>
            <param name="ObjectName"></param>
            <param name="FromDateTime"></param>
            <param name="ToDateTime"></param>
            <param name="Count"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDPAdminHistory(System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Get the history for a deployment
            </summary>
            <param name="DeploymentName"></param>
            <param name="FromDateTime"></param>
            <param name="ToDateTime"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterFileShare(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="FileShareUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterIPs(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Delete from all IPs belonging to one dataserver
            </summary>
            <param name="DataServerUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterPartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="PartitionNum">for [PartitionMoveMap].[PartitionNum] column</param>
            <param name="NewSQLFSSNum">for [PartitionMoveMap].[NewSQLFSSNum] column</param>
            <param name="Status">for [PartitionMoveMap].[Status] column</param>
            <param name="Progress">for [PartitionMoveMap].[Progress] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetPartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="PartitionNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetNewPartitionMoveMap(System.Data.SqlTypes.SqlGuid)">
            <summary>
            When adding partition(s), the data needed for the transfer is kept in the PartitionMoveMap table.
            This sproc fetches the relevant data and returns it to the caller.
            </summary>
            <param name="DeploymentUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspNewRemapDataPartition(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Remap DataPartitions using the redesigned movedata system.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
            <param name="SQLFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspNewUpdateDataPartitionStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Set the status (readonly vs readwrite) on the DataPartition table.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
            <param name="SQLFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateNewPartitionMoveMapStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32,System.String,System.Int32@)">
            <summary>
            Set status of a partition that is being moved.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
            <param name="Status"></param>
            <param name="Progress"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterPartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int16,System.Boolean,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="PartitionNum"></param>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="IsForce"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterNewPartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdatePartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.String,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="NewSQLFSSNum">for [PartitionMoveMap].[NewSQLFSSNum] column</param>
            <param name="OldSQLFSSNum">for [PartitionMoveMap].[OldSQLFSSNum] column</param>
            <param name="Status">for [PartitionMoveMap].[Status] column</param>
            <param name="Progress">for [PartitionMoveMap].[Progress] column</param>
            <param name="OldSQLDBUid">for [PartitionMoveMap].[OldSQLDBUid] column</param>
            <param name="NewSQLDBUid">for [PartitionMoveMap].[NewSQLDBUid] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdatePartitionMoveMapProgress(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.String,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="NewSQLFSSNum">for [PartitionMoveMap].[NewSQLFSSNum] column</param>
            <param name="OldSQLFSSNum">for [PartitionMoveMap].[OldSQLFSSNum] column</param>
            <param name="Progress">for [PartitionMoveMap].[Progress] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetPartitionMoveMapStatus(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get the status from the PartitionMoveMap table.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemapMoveDataPartition(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int16,System.Int32,System.Boolean,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Remap DataPartitions
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="Status"></param>
            <param name="IsForce"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMoveDataPartitionStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Remap DataPartitions
            </summary>
            <param name="DeploymentUID"></param>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterSQLFailSafeSet(System.Data.SqlTypes.SqlGuid,System.Int16,System.Boolean,System.Int32@)">
            <summary>
            Drop a SqlFailSafeSet. If IsDropPartitions is true, drop the DataPartitions pointing to this FSS.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="SQLFSSNum"></param>
            <param name="IsDropPartitions"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterFileFailSafeSet(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="FileShareFSSNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAllFileShares(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="FileShareFSSNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetNumFilePrimariesOnServer(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get information on a security role from SQLTable table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="FSSNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterDataServer(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete from DataServer table
            </summary>
            <param name="DataServerUID"></param>
            <param name="SiteWideServerTicket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllJobsForDatabase(System.String,System.String)">
            <summary>
             Get rows from Job table, but only jobs that would be installed on the
             passed in SqlServer and Database.
            </summary>
            <param name="ServerName"></param>
            <param name="SqlDatabaseName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterSecurityAccountRole(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="AccountName"></param>
            <param name="SecurityRole"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterSecurityAccount(System.Data.SqlTypes.SqlGuid,System.String,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="AccountName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterMirroringDeploy(System.Data.SqlTypes.SqlGuid,System.Int16,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update the MirroringDeploy table.
            </summary>
            <param name="DeploymentUID">for [MirroringDeploy].[DeploymentUID] column</param>
            <param name="PortNumber">for [MirroringDeploy].[Port] column</param>
            <param name="CompleteDomainName">for [MirroringDeploy].[CompleteDomainName] column</param>
            <param name="EndPointName">for [MirroringDeploy].[EndPointName] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterMirroringEndPoint(System.Data.SqlTypes.SqlGuid,System.Int16,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update the MirroringEndPoint table.
            </summary>
            <param name="DataServerUID">for [MirroringEndPoint].[DeploymentUID] column</param>
            <param name="PortNumber">for [MirroringEndPoint].[Port] column</param>
            <param name="CompleteDomainName">for [MirroringEndPoint].[CompleteDomainName] column</param>
            <param name="EndPointName">for [MirroringEndPoint].[EndPointName] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetServersForCluster(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the dataserver belonging to a cluster
            </summary>
            <param name="ClusterUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspPurgeCluster(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Drop Cluster(s) that are no longer in use.
            </summary>
            <param name="ClusterUID"></param>
            <param name="TicketIn"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterCluster(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlGuid,System.Int16,System.Byte,System.Int16,System.Int32@)">
            <summary>
            Insert or update a Cluster
            </summary>
            <param name="ClusterUID">for [Cluster].[ClusterUID] column</param>
            <param name="ClusterName">for [Cluster].[ClusterName] column</param>
            <param name="ClusterPath">for [Cluster].[ClusterPath] column</param>
            <param name="Ticket">for [DataServer].[Ticket] column</param>
            <param name="MonitoringServerUID">for [Cluster].[MonitoringServerUID] column</param>
            <param name="MonitoringDataPartitionNum">for [Cluster].[MonitoringDataPartitionNum] column</param>
            <param name="IsCommon"></param>
            <param name="JobStatusDataPartitionNum">for [Cluster].[JobStatusDataPartitionNum] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllClusters">
            <summary>
            Get all the Cluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFssProvPref(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            update fss provPref
            </summary>
            <param name="DeploymentUID"></param>
            <param name="FSSNum"></param>
            <param name="ProvPref"></param>
            <param name="ProvStatus"></param>
            <param name="FssType"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSiteWideDeploymentTicket(System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSiteWideServerTicket(System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMaxSelfAdminInfoDeleteTicket(System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMaxSelfAdminInfoTicket(System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllAlertRules">
            <summary>
            Get all the AlertRule
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllMonitoredData">
            <summary>
            Get all the MonitoredDatums
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAlertRule(System.Data.SqlTypes.SqlGuid,System.String,System.Byte,System.String,System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a AlertRule
            </summary>
            <param name="AlertRuleUid">for [AlertRule].[AlertRuleUid] column</param>
            <param name="Name">for [AlertRule].[Name] column</param>
            <param name="Severity">for [AlertRule].[Severity] column</param>
            <param name="GenerateAlertAt">for [AlertRule].[GenerateAlertAt] column</param>
            <param name="AlertProcessUID">for [AlertRule].[AlertProcessUID] column</param>
            <param name="AlertProcessRetryCount">for [AlertRule].[AlertProcessRetryCount] column</param>
            <param name="AlertProcessRetryPeriod">for [AlertRule].[AlertProcessRetryPeriod] column</param>
            <param name="Ticket">for [AlertRule].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAlertRule(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete from AlertRule table
            </summary>
            <param name="AlertRuleUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAlertRuleCondition(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Byte,System.String,System.String,System.Decimal,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a AlertRuleCondition
            </summary>
            <param name="AlertRuleConditionUID">for [AlertCondition].[AlertRuleConditionUID] column</param>
            <param name="AlertRuleUID">for [AlertCondition].[AlertRuleUID] column</param>
            <param name="AlertRuleConditionType">for [AlertCondition].[AlertRuleConditionType] column</param>
            <param name="MonitoredDatumName">for [AlertCondition].[MonitoredDatumUID] column</param>
            <param name="ComparisonOperator">for [AlertCondition].[ComparisonOperator] column</param>
            <param name="Threshold">for [AlertCondition].[Threshold] column</param>
            <param name="Ticket">for [AlertCondition].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAlertRuleConditions(System.Data.SqlTypes.SqlGuid,System.Byte,System.Int32@)">
            <summary>
            Delete from all AlertRuleCondition belonging to one AlertRule
            </summary>
            <param name="AlertRuleUID">for [AlertCondition].[AlertRuleUID] column</param>
            <param name="AlertRuleConditionType">for [AlertCondition].[AlertRuleConditionType] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllAlertRuleConditions(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all conditions for an Alert Rule.  Used prior to the registration of an ALert Rule.
            </summary>
            <param name="AlertRuleUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterMonitoredDatum(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete from MonitoredDatum table
            </summary>
            <param name="MonitoredDatumUID"></param>
            <param name="MaxSelfAdminInfoTicket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllMonitoredDatumProperties(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all properties for a Monitored Datum.  Used prior to the registration of a Monitored Datum.
            </summary>
            <param name="MonitoredDatumUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterMonitoredDatum(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update MonitoredData
            </summary>
            <param name="MonitoredDatumUid">for [MonitoredDatum].[MonitoredDatumUid] column</param>
            <param name="Name">for [MonitoredDatum].[Name] column</param>
            <param name="Type">for [MonitoredDatum].[Type] column</param>
            <param name="CollectAt">for [MonitoredDatum].[CollectAt] column</param>
            <param name="SamplingFrequency">for [MonitoredDatum].[SamplingFrequency] column</param>
            <param name="AggregationType">for [MonitoredDatum].[AggregationType] column</param>
            <param name="AggregationInterval">for [MonitoredDatum].[AggregationInterval] column</param>
            <param name="StaleTime">for [MonitoredDatum].[StaleTime] column</param>
            <param name="RatePrecision">for [MonitoredDatum].[RatePrecision] column</param>
            <param name="Ticket">for [MonitoredDatum].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterMonitoredDatumProperty(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a MonitoredDatumProperty (used in Self healing)
            </summary>
            <param name="MonitoredDatumUID"></param>
            <param name="Name"></param>
            <param name="DataType"></param>
            <param name="Value"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllMappingsForServerRole(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="ServerRoleUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterServerRoleForMonitoredDatum(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a mapping for a server role and monitoreddatum
            </summary>
            <param name="ServerRoleUID">for [ServerRoleMonitoredDatumMapping].[ServerRoleUID] column</param>
            <param name="MonitoredDatumName">for [ServerRoleMonitoredDatumMapping].[MonitoredDatumUID] column</param>
            <param name="Ticket">for [ServerRoleMonitoredDatumMapping].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterServerRoleForMonitoredDatum(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            remove a mapping for a server role and monitoreddatum
            </summary>
            <param name="ServerRoleUID">for [ServerRoleMonitoredDatumMapping].[ServerRoleUID] column</param>
            <param name="MonitoredDatumName">for [ServerRoleMonitoredDatumMapping].[MonitoredDatumUID] column</param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterServerRoleForAlertRule(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a mapping for a server role and alert rule
            </summary>
            <param name="ServerRoleUID">for [ServerRoleAlertRuleMapping].[ServerRoleUID] column</param>
            <param name="AlertRuleName">for [ServerRoleAlertRuleMapping].[AlertRuleUID] column</param>
            <param name="Ticket">for [ServerRoleAlertRuleMapping].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterServerRoleForAlertRule(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            remove a mapping for a server role and AlertRule
            </summary>
            <param name="ServerRoleUID">for [ServerRoleAlertRuleMapping].[ServerRoleUID] column</param>
            <param name="AlertRuleName">for [ServerRoleAlertRuleMapping].[AlertRuleUID] column</param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetMMDropReplication(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the MainfestUID of the Sql Fail Safe Set
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="MMDropReplication"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetSavedState(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32@)">
            <summary>
            Update the SavedState of the Sql Fail Safe Set
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetSqlFailSafeSetSavedState(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get Saved State from the Sql Fail Safe Set
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetFailSafeSetReplPublicationDeploy(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DeploymentUID"></param>
            <param name="ManifestUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSqlFssLatency(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32,System.Boolean,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert a placeholder row in the SqlFssLatency table if it doesn't exist.
            </summary>
            <param name="SourceSQLDBUID"></param>
            <param name="DestSQLDBUID"></param>
            <param name="Latency"></param>
            <param name="LatencyBucket"></param>
            <param name="IsForce"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspBulkRegisterSqlFssLatency(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Inserts or sets a placeholder row in the SqlFssLatency table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllServerRoles">
            <summary>
            Get all the Cluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetServerRolesForDataServer(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all ServerRoles belonging to a DataServer
            </summary>
            <param name="DataServerUID">for DatatServer.DataServerUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllServerRolesForDataServer(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all server roles on a data server. Used during DataServer Update.
            </summary>
            <param name="DataServerUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllMonitoringDataForServerRole(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all monitored data and alert rules for a server role. Used during Server Role Mappings Update.
            </summary>
            <param name="ServerRoleUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterServerRole(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a ServerRole
            </summary>
            <param name="ServerRoleUID">for [ServerRole].[ServerRoleUID] column</param>
            <param name="ServerRoleName">for [ServerRole].[ServerRoleName] column</param>
            <param name="ServerRoleDescription">for [ServerRole].[ServerRoleDescription] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterServerRole(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete from ServerRole table
            </summary>
            <param name="ServerRoleUID"></param>
            <param name="SiteWideServerTicket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterServerRoleForDataServer(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a ServerRole
            </summary>
            <param name="DataServerUID">for [ServerRoleDataServerMapping].[DataServerUID] column</param>
            <param name="ServerRoleName">for [ServerRoleDataServerMapping].[ServerRoleUID] column</param>
            <param name="Ticket">for [ServerRoleDataServerMapping].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllSettings">
            <summary>
            Get all the Centralized Settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSetting(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int16,System.Int16,System.Int16,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="SettingName"></param>
            <param name="SettingValueType"></param>
            <param name="SettingDefaultValue"></param>
            <param name="SettingOverrideLevel"></param>
            <param name="isWebstoreSetting"></param>
            <param name="IsSettingFromFile"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateClientServerSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="ClientServerUid"></param>
            <param name="SettingValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateClusterSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="ClusterUid"></param>
            <param name="SettingValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateDeploymentSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="DeploymentUid"></param>
            <param name="SettingValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateServerRoleSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="ServerRoleUid"></param>
            <param name="SettingValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemoveDeploymentSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the DeploymentSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="DeploymentUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemoveClusterSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the ClusterSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="ClusterUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemoveServerRoleSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the ServerRoleSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="ServerRoleUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemoveClientServerSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the ServerSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="DataServerUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the ServerSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateGlobalSetting(System.Data.SqlTypes.SqlGuid,System.String,System.Int16,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="SettingValue"></param>
            <param name="IsResetValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspResetGlobalSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDataSetOfFileGroupsAndLogicalFiles(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get the FileGroups and LogicalFiles information
            </summary>
            <param name="DatabaseTemplateUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetWitnessServer(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the MainfestUID of the Sql Fail Safe Set
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="WitnessServerUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetMirroringTimeout(System.String)">
            <summary>
            Compare wmo version and return config version
            </summary>
            <param name="DeploymentName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDeploymentAndInUseObjects(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DeploymentUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAction(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a Action (used in Self healing)
            </summary>
            <param name="ActionUID"></param>
            <param name="Name"></param>
            <param name="Type"></param>
            <param name="Description"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAction(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete an Action
            </summary>
            <param name="ActionUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllActionProperties(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all properties for an Action. Used prior to the registration of an action.
            </summary>
            <param name="ActionUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterActionProperty(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a ActionProperty (used in Self healing)
            </summary>
            <param name="ActionUID"></param>
            <param name="Name"></param>
            <param name="DataType"></param>
            <param name="Value"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllAction">
            <summary>
             Return all rows in the Action table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAlertProcess(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a AlertProcess (used in Self healing)
            </summary>
            <param name="AlertProcessUID"></param>
            <param name="Name"></param>
            <param name="Description"></param>
            <param name="StartActionId"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAlertProcess(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete an AlertProcess
            </summary>
            <param name="AlertProcessUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllAlertProcess">
            <summary>
             Return all rows in the AlertProcess table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterProcessAction(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a Action (used in Self healing)
            </summary>
            <param name="AlertProcessUID"></param>
            <param name="ActionUID"></param>
            <param name="Id"></param>
            <param name="OnProceedId"></param>
            <param name="OnFailureId"></param>
            <param name="OnResolveId"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetProcessAction">
            <summary>
             Return all rows in the ProcessAction table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAllProcessAction(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all ProcessActions under an AlertProcess. Called as part of
             deleting or updating the AlertProcess. It should not be called directly.
            </summary>
            <param name="AlertProcessUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterJob(System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Int16,System.Int32@)">
            <summary>
            Get all the Centralized Settings
            </summary>
            <param name="jobName"></param>
            <param name="DOP"></param>
            <param name="batch"></param>
            <param name="location"></param>
            <param name="machineClass"></param>
            <param name="nMachines"></param>
            <param name="assemblyName"></param>
            <param name="version"></param>
            <param name="arguments"></param>
            <param name="numRetries"></param>
            <param name="retryInterval"></param>
            <param name="isDisabled"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterJobSchedule(System.String,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get all the Centralized Settings
            </summary>
            <param name="jobName"></param>
            <param name="scheduleNumber"></param>
            <param name="schedulePriority"></param>
            <param name="startDate"></param>
            <param name="startTime"></param>
            <param name="scheduleType"></param>
            <param name="reccurenceType"></param>
            <param name="occursOn"></param>
            <param name="maxScheduleDelta"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropJob(System.String,System.Int32@)">
            <summary>
            Get all the Centralized Settings
            </summary>
            <param name="jobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropJobSchedule(System.String,System.Int32,System.Int32@)">
            <summary>
            Get all the Centralized Settings
            </summary>
            <param name="jobName"></param>
            <param name="scheduleNumber"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllJobFrameworkJobs">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSQLFailSafeSetSyncMirroring(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspAddLinkedServer(System.String,System.Int32@)">
            <summary>
            Add a linked server
            </summary>
            <param name="remoteServer"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspAddSubscription(System.String,System.String,System.String,System.Boolean,System.Int32@)">
            <summary>
            Add a subscription
            </summary>
            <param name="Publication"></param>
            <param name="SubscribingDB"></param>
            <param name="SubscribingServer"></param>
            <param name="IsPaused"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckSubscription(System.String,System.String,System.String,System.Int32@)">
            <summary>
            Check if subscription exists
            1-Subscription is there
            0-Subscription is missing
            </summary>
            <param name="Publication"></param>
            <param name="SubscribingDB"></param>
            <param name="SubscribingServer"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckDrainableSubscription(System.String,System.String,System.String,System.Int32@)">
            <summary>
            Check if subscription exists
            1-Subscription is there
            0-Subscription is missing
            </summary>
            <param name="Publication"></param>
            <param name="SubscribingDB"></param>
            <param name="SubscribingServer"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckDrainableLogreader(System.String,System.Int32@)">
            <summary>
            Check if logreader exists
            1-logreader is there
            0-logreader is missing
            </summary>
            <param name="Publication"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSInsSingleMaster(System.String,System.String)">
            <summary>
            generate insert repl sproc for single master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSUpdSingleMaster(System.String,System.String)">
            <summary>
            generate update repl sproc for single master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSDelSingleMaster(System.String,System.String)">
            <summary>
            generate delete repl sproc for single master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSInsMultiMaster(System.String,System.String,System.String,System.String)">
            <summary>
            generate insert repl sproc for mutli master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
            <param name="dt_colname"></param>
            <param name="ti_NeedsRepl_colname"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSUpdMultiMaster(System.String,System.String,System.String,System.String)">
            <summary>
            generate update repl sproc for mutli master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
            <param name="dt_colname"></param>
            <param name="ti_NeedsRepl_colname"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSDelMultiMaster(System.String,System.String)">
            <summary>
            generate delete repl sproc for multimaster
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropSubscription(System.String,System.String,System.String,System.Int32@)">
            <summary>
            Drop a subscription
            </summary>
            <param name="Publication"></param>
            <param name="SubscribingDB"></param>
            <param name="SubscribingServer"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropAllSubscription(System.String,System.Int32@)">
            <summary>
            Drop all subscription
            </summary>
            <param name="Publication"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropPublication(System.String,System.Int32@)">
            <summary>
            Add a publication
            </summary>
            <param name="publicationName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetWebstoreFSSLatency(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="SourceUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspUpdateWebstoreFSSLatency(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Insert or update WebstoreFSSLatency
            </summary>
            <param name="SourceUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspInitializeWebstoreFSSLatency(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            </summary>
            <param name="SourceUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetReplTimeStamp(System.String,System.String)">
            <summary>
            Get the transaction timestamp for the publication from the given publishing db
            </summary>
            <param name="PublishingServer"></param>
            <param name="PublishingDB"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckColumnExist(System.String,System.String,System.Int32@)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="TableName"></param>
            <param name="ColumnName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetActivePrimaryProcess(System.String)">
            <summary>
            Get information on a file group from SQLDatabase table
            </summary>
            <param name="DatabaseName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropJob(System.String,System.Int32@)">
            <summary>
            Drop job
            </summary>
            <param name="JobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDisEnableJob(System.String,System.Boolean,System.Int32@)">
            <summary>
            Disable/Enable job
            </summary>
            <param name="JobName"></param>
            <param name="fDisEnable"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspStartJob(System.String,System.Int32@)">
            <summary>
            Start a distribution job
            </summary>
            <param name="JobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspEnableJob(System.String,System.Int32@)">
            <summary>
            Start a distribution job
            </summary>
            <param name="JobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspStopJob(System.String,System.Int32@)">
            <summary>
            Stop a job
            </summary>
            <param name="JobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetLogReaderJobName(System.String,System.String)">
            <summary>
            Get log reader job name
            </summary>
            <param name="PublishingServer"></param>
            <param name="PublishingDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetDistributionJobName(System.String,System.String,System.String,System.String)">
            <summary>
            Start a distribution job
            </summary>
            <param name="PublishingServer"></param>
            <param name="PublishingDatabase"></param>
            <param name="SubscribingServer"></param>
            <param name="SubscribingDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckJobStatus(System.String)">
            <summary>
            </summary>
            <param name="JobName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspAddAccountToRole(System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="LoginName"></param>
            <param name="Role"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropAccountFromRole(System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="LoginName"></param>
            <param name="Role"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDeleteWebstorePartitionMoveMap(System.Int16,System.Int16,System.Int16,System.Int32@)">
            <summary>
            Insert or update WebstorePartitionMoveMap
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="PartitionNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspUpdateWebstorePartitionMoveMap(System.Int16,System.Int16,System.Int16,System.Int32,System.Int32@)">
            <summary>
            Insert or update WebstorePartitionMoveMap
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="PartitionNum"></param>
            <param name="Status"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspRegisterWebstorePartitionMoveMap(System.Int16,System.Int16,System.Int16,System.Boolean,System.Int32,System.Int32@)">
            <summary>
            Insert or update WebstorePartitionMoveMap
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="PartitionNum"></param>
            <param name="IsSource"></param>
            <param name="Status"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetWebstorePartitionMoveMap(System.Int16,System.Int16,System.Int16)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="PartitionNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspUpdateWebstoreBcpInfo(System.Int16,System.Int16,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            Insert or update WebstoreBcpInfo
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="BcpOut"></param>
            <param name="BcpIn"></param>
            <param name="BcpTotal"></param>
            <param name="Status"></param>
            <param name="Progress"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspUpdateWebstoreBcpInfoStatus(System.Int16,System.Int16,System.String,System.Int32,System.Int32@)">
            <summary>
            Insert or update WebstoreBcpInfo
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="Status"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDeleteWebstoreBcpInfo(System.Int16,System.Int16,System.String,System.Int32@)">
            <summary>
            Insert or update WebstoreBcpInfo
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspRegisterWebstoreBcpInfo(System.Int16,System.Int16,System.String,System.String,System.String,System.Int32,System.Int32@)">
            <summary>
            Insert or update WebstoreBcpInfo
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="Filter_clause"></param>
            <param name="BcpFile"></param>
            <param name="Status"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetWebstoreBcpInfo(System.Int16,System.Int16,System.String)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetDeleteMoveDataQuery(System.String,System.String,System.Int32)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="table_name"></param>
            <param name="hash_column"></param>
            <param name="batch_size"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetDeleteMoveDataCount(System.String,System.String)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="table_name"></param>
            <param name="hash_column"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetSelectMoveDataQuery(System.Int16,System.Int16,System.String,System.String,System.String)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="DataPartitionColumnName"></param>
            <param name="NeedsReplColumnName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetDBRecoveryMode(System.String)">
            <summary>
            Add a subscription
            </summary>
            <param name="vcDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspRevokeDBAccess(System.String,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="LoginName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetActualFileGroups">
            <summary>
            Get FileGroups and Logical files that actually make up a database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMarkNeedsRepl(System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            </summary>
            <param name="UpdateDateTimeColumn"></param>
            <param name="NeedsReplicationColumn"></param>
            <param name="TableName"></param>
            <param name="StartDateTime"></param>
            <param name="EndDateTime"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMarkNeedsReplByPartition(System.String,System.String,System.String,System.Int16,System.Int32@)">
            <summary>
            </summary>
            <param name="TableName"></param>
            <param name="NeedsReplicationColumn"></param>
            <param name="PartitionColumn"></param>
            <param name="PartitionNumber"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMarkNeedsReplAll(System.String,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="TableName"></param>
            <param name="NeedsReplicationColumn"></param>
            <param name="retVal"></param>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy">
            <summary>
            Mirrors the WebstoreBulkCopy table used in MoveData processing.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstoreTableBase">
            <summary>
            Used for the comment elements that define the Webstore tables on the destination
            application databases.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreTableBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreTableBase.#ctor(System.String,System.Int16,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.DeploymentName">
            <summary>
            The deployment name where the bulk copy process is occuring.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.PartitionNumber">
            <summary>
            The parition number that has data that is being moved.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.NewPartitionNumber">
            <summary>
            The new partition number that has data that is being moved. This is reserverd
            for variable partitioning.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.DestinationServerName">
            <summary>
            The server where the bulk data is being moved to. It also contains working
            information such as status, tables to be moved, column names to be used, etc. 
            See the WebstorePartitionMoveMap and WebstoreBulkCopy classes.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreTableBase.DestinationDatabaseName">
            <summary>
            The database that resides on the destination server. See the DestinationServer
            for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.#ctor">
            <summary>
            Default constructor initializes the deploymentName and partitionNumber to empty values.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.#ctor(System.String,System.Int16,System.String,System.String)">
            <summary>
            Minimum value list constructor.
            </summary>
            <param name="deploymentName"></param>
            <param name="partitionNumber"></param>
            <param name="destinationServer"></param>
            <param name="destinationDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Insert">
            <summary>
            Call to insert a preliminary row into the WebstoreBulkCopy table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Get(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Fills in the object with the data from the WebstoreBulkCopyIn table.
            Called from the collection class and from the Get() method.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Update(System.DateTime,System.DateTime,System.Int64,System.String)">
            <summary>
            Call to update start time, end time, copy count and other variables as needed during processing.
            Pass in a MinTime for Start Time to leave the existing value "as is"
            Pass in a MinTime for End Time and the value will be set to NULL in the table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Update">
            <summary>
            Call to update WebstoreBulkCopy based on member variables.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.OnSqlRowsCopied(System.Object,System.Data.SqlClient.SqlRowsCopiedEventArgs)">
            <summary>
            Event Handler for SqlBuilkCopy RowsCopied. It is invokded every "NotifyAfter"
            number of records.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Validate">
            <summary>
            Validate the internal variables of the class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.Equals(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            IComparable function to return true/false on a bulkCopy object being equal.
            </summary>
            <param name="bulkCopy"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.CompareTo(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            Uses InstallOrder followed by table name order for sorting.
            </summary>
            <param name="bulkCopy"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares a generic object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.TableName">
            <summary>
            The table in the sql database that has data in the partition that is being moved.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.InstallOrder">
            <summary>
            The order the tables are bulk copied into.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.PartitionNumberColumnName">
            <summary>
            The column name that indicates the partition for the data. Used in the filter
            queries.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.SqlBulkCopyFilter">
            <summary>
            The filter used for the SqlBulkCopy command.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.CleanUpFilter">
            <summary>
            The filter used for cleaning up source FSSes once the data has been copied.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.ProgressMessage">
            <summary>
            This message is updated by the bulk copy process.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.CreateDateTime">
            <summary>
            The date/time when the WMO created this record.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.StartTime">
            <summary>
            The start time when the process begins to WebstoreBulkCopy the data into the table.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.EndTime">
            <summary>
            The end time when the process finishes the WebstoreBulkCopy.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.CopyCount">
            <summary>
            The number of rows that have been copied into the table.
            This value is continuously updated during the process.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopy.IsInCollection">
            <summary>
            Flag that indicates that this object is a member of the WebstoreBulkCopyCollection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection">
            <summary>
            Collection class for WebstoreBulkCopy
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.#ctor(System.String,System.Int16,System.String,System.String)">
            <summary>
            Full constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Get">
            <summary>
            Get the data from the WebstoreBulkCopy table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Insert(System.String,System.String)">
            <summary>
            After adding each item to the collection call this method to insert them all.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Delete">
            <summary>
            Delete all rows from the WebstoreBulkCopy table given the PartitionNumber.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.IndexOf(System.String,System.Int16,System.String)">
            <summary>
            Returns the index of the first object of the given name.
            </summary>
            <returns>
            The 0-based index of the first object with the name.
            -1 if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Reverse">
            <summary>
            Sorts the array in reverse order.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.ObjectAtIndex(System.Int32)">
            <summary>
            Returns the object at a given index in the internal array.
            used only by the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Contains(System.String,System.Int16,System.String)">
            <summary>
            Tests whether the collection contains an object of the given name.
            </summary>
            <returns>
            true if the collection contains an object identified by the name;
            false if the collection doesn't contain an object with this name.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            required for ICollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Add(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            Adds an object to the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Remove(System.String,System.Int16,System.String)">
            <summary>
            Removes an object from the object collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.GetEnumerator">
            <summary>
            Gets the IEnumerator for this WmoDatabaseCollection.  This is meant to
            support the foreach statement.
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Clear">
            <summary>
            remove all elements
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Objects">
            <summary>
            Access to the internal array
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Count">
            <summary>
            count of objects in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.Item(System.String,System.Int16,System.String)">
            <summary>
            0 based position indexer
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.IsSynchronized">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.SyncRoot">
            <summary>
            for ICollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.WebstoreBulkCopyEnumerator">
            <summary>
            This class implements the IEnumerator over a WebstoreBulkCopyCollection
            in support of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.WebstoreBulkCopyEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.WebstoreBulkCopyEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            Must be called before accessing the Current element.
            </summary>
            <returns>
            true if enumerator successfully advanced to next element;
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstoreBulkCopyCollection.WebstoreBulkCopyEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap">
            <summary>
            Defines the elements existing in the application database WebstorePartitionMoveMap
            table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.GetConnectionString(System.String,System.String)">
            <summary>
            Based on where this code is compiled, the connection string is retrieved from the
            WmoSqlAgentDatabase.GetConnectionString or from the WstSqlCmdHelper.GetConnectionString.
            </summary>
            <param name="serverName"></param>
            <param name="databaseName"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.#ctor">
            <summary>
            The minimum constructor requires nothing, DeploymentName and PartitionNumber
            are given default values.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.#ctor(System.String,System.Int16,System.String,System.String)">
            <summary>
            Constructor that defines the essential elements of the class. Given these details,
            a call to the database through Get() will get any additional details.
            </summary>
            <param name="deploymentName"></param>
            <param name="partitionNumber"></param>
            <param name="destinationServer"></param>
            <param name="destinationDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Insert">
            <summary>
            Used by the WMO, this method inserts the values needed for the BulkCopy process.
            This includes the names of the partition columns, the needs replication columns,
            and the source and destination.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Get">
            <summary>
            Get the data from the WebstorePartitionMoveMap table.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.CheckForWebstorePartitionMoveMapTable">
            <summary>
            Check the database for the correct objects.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Get(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Fills in the object with the data from the WebstorePartitionMoveMap table.
            Called from the collection class and from the Get() method.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Update(Microsoft.Webstore.Management.Wmo.WmoEnum.MoveDataStatus,System.String)">
            <summary>
            Call to update status while moving data.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.GetSqlBulkCopyFilter(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            Get the filter used for SqlBulkCopy. The filter uses the required field
            PartitionNumberColumnName, and the optional field needsReplicationColumnName
            along with the IsMultiMaster column to build a select clause for SqlBulkCopy.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.GetCleanUpFilter(Microsoft.Webstore.WstMoveData.WebstoreBulkCopy)">
            <summary>
            Get the filter used for CleanUp of source FSSes after the data has been copied.
            The filter uses the required field PartitionNumberColumnName and CleanBatchSize
            to build a delete clause for SqlBulkCopy.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.SourceServerName">
            <summary>
            The SourceServerName is the location where the WebstoreBulkCopy is coming from.
            It is also used for status updates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.SourceDatabaseName">
            <summary>
            The SourceDatabaseName is the location where the WebstoreBulkCopy is coming from.
            It is also used for status updates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.NeedsReplicationColumnName">
            <summary>
            The column name used for MultiMaster replication. The query that generates the
            SqlBulkCopy filter sets this value to false if IsMultuMaster is true.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.IsMultiMaster">
            <summary>
            Indicates that the deployment is MultiMaster. Used for generating the filter
            used by SqlBulkCopy.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.SqlBulkCopyBatchSize">
            <summary>
            Batch size used during SqlBulkCopy. Default is 1000 rows.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.SqlBulkCopyTimeOut">
            <summary>
            Time out value used during bulk copy processing. Default is 8 hours (28800)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.CleanUpBatchSize">
            <summary>
            Used during cleanup. This is the number of rows to delete at a time. Default is 1000 rows.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.CleanUpDelay">
            <summary>
            The delay string used in the Cleanup filter. The default is 1/10th of a second.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.Status">
            <summary>
            Status values maintained by the process in the WebstorePartitionMoveMap table on
            the local application database server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.StatusMessage">
            <summary>
            Freeform text that gives the moving status for this partition.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.CreateDateTime">
            <summary>
            When the MoveMap row was created. Read only.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.UpdateDateTime">
            <summary>
            The last time the MoveMap row was updated. Updates only occurs for Status
            and StatusMessage updates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstMoveData.WebstorePartitionMoveMap.IsInCollection">
            <summary>
            Determines if this object is part of the WebstorePartitionMoveMapCollection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspInsertWebstorePartitionMoveMap(System.String,System.Int16,System.Int16,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Insert WebstorePartitionMoveMap
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
            <param name="NewPartitionNumber"></param>
            <param name="SourceServer"></param>
            <param name="SourceDatabase"></param>
            <param name="DestinationServer"></param>
            <param name="DestinationDatabase"></param>
            <param name="NeedsReplicationColumnName"></param>
            <param name="IsMultiMaster"></param>
            <param name="SqlBulkCopyBatchSize"></param>
            <param name="SqlBulkCopyTimeOut"></param>
            <param name="CleanUpBatchSize"></param>
            <param name="CleanUpDelay"></param>
            <param name="Status"></param>
            <param name="StatusMessage"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspUpdateWebstorePartitionMoveMap(System.String,System.Int16,System.Int16,System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Update WebstorePartitionMoveMap
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
            <param name="Status"></param>
            <param name="StatusMessage"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetAllWebstorePartitionMoveMap(System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Return rows from the WebstorePartitionMoveMap table based on the DeploymentName.
            </summary>
            <param name="DeploymentName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetWebstorePartitionMoveMap(System.String,System.Int16)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Return a row from the WebstorePartitionMoveMap table based on the DeploymentName and PartitionNumber
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetWebstorePartitionMoveMapStatus(System.String,System.Int16)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Return a row from the WebstorePartitionMoveMap table based on the DeploymentName and PartitionNumber
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspDeleteWebstorePartitionMoveMap">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Delete rows from the WebstorePartitionMoveMap table based on the PK.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspInsertWebstoreBulkCopy(System.String,System.Int16,System.String,System.Int32,System.Int16,System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Insert WebstoreBulkCopy
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
            <param name="TableName"></param>
            <param name="InstallOrder"></param>
            <param name="NewPartitionNumber"></param>
            <param name="PartitionNumberColumnName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspUpdateWebstoreBulkCopy(System.String,System.Int16,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int64,System.String)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Update WebstoreBulkCopy
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
            <param name="TableName"></param>
            <param name="StartTime"></param>
            <param name="EndTime"></param>
            <param name="CopyCount"></param>
            <param name="ProgressMessage"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetWebstoreBulkCopy(System.String,System.Int16)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Return a rowset from the WebstoreBulkCopy table based on the
             DeploymentName and PartitionNumber
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspDeleteWebstoreBulkCopy(System.String,System.Int16)">
            <summary>
             [ExecuteType(ExecuteNonQuery)]
             Delete rows from the WebstoreBulkCopy table from the passed in Deployment and Partition
            </summary>
            <param name="DeploymentName"></param>
            <param name="PartitionNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspGetSelectList(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a select list of all column names from a table.
            </summary>
            <param name="TableName"></param>
            <param name="PartitionNumberColumnName"></param>
            <param name="PartitionNumberColumnValue"></param>
            <param name="NeedsReplicationColumnName"></param>
            <param name="IsMultiMaster"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WstMoveDataApplicationSprocs.WspCreateMoveDataLock(System.String,System.Int32@)">
            <summary>
             Create a lock for WstMoveData.exe so more then one copy cannot run at one time.
            </summary>
            <param name="DeploymentName"></param>
            <param name="retVal"></param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\chk\doc\WstClient.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstClient</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAction">
            <summary>
            Gives information about the action in the WstConfig database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase">
            <summary>
            Guid Keyed item base class
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreObject`1">
            <summary>
            All Wmo classes derive from this class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.Equals(System.Object)">
            <summary>
            The equals method comapres the keys.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.GetHashCode">
            <summary>
            The get hash code function
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.Refresh(System.Boolean)">
            <summary>
            Refresh the configuration
            </summary>
            <param name="Isforce"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.GetUserStore(System.Guid)">
            <summary>
            The consumer can use this method to store information
            related to a particular WebstoreMetaDataObject.
            E.g. the client library might store information related
            to throttling per resource
            </summary>
            <param name="userStoreKey">The key for which to get the 
            user store</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.SetUserStore(System.Guid,System.Object)">
            <summary>
            Use this method to get the stored information from the
            userStore.
            </summary>
            <param name="userStoreKey"></param>
            <param name="value">The key with which to associate the 
            user store</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.RemoveUserStore(System.Guid)">
            <summary>
            Removes the UserStore data for the given key.
            NOTE: The return value is not a bool. So that 
            malacious code might not try to remove user stores
            trying different keys.
            </summary>
            <param name="userStoreKey">The key for which to 
            remove the user store</param>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreObject`1.Key">
            <summary>
            Key
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreObject`1.IsObjectExpired">
            <summary>
            Gets information about whether the given WebstoreObject
            is expired - dropped from WstConfig.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.Uid">
            <summary>
            Uid
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.Name">
            <summary>
            Name
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAction.Type">
            <summary>
            Gets the Type associated with this action.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAction.Properties">
            <summary>
            Properties for this action
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreActionCollection">
            <summary>
            Collection of Actions in a WstConfig database.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2">
            <summary>
            WebstoreKeyedCollection
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreCollectionBase">
            <summary>
            base class for all Wmo collections.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreCollectionBase.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCollectionBase.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.GetKeyAt(System.Int32)">
            <summary>
            Gets the key at the index location of the collection.
            </summary>
            <param name="index">The index location for the key.</param>
            <returns>The key.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.GetValueAt(System.Int32)">
            <summary>
            Gets the value at the index location of the collection.
            </summary>
            <param name="index">The index location for the value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.IndexOfKey(`0)">
            <summary>
            Searches for the specified key and returns the zero-based index within the entire WebstoreKeyedCollection
            </summary>
            <param name="key">The key to locate in the WebstoreKeyedCollection.</param>
            <returns>The zero-based index of key within the entire WebstoreKeyedCollection if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.IndexOfValue(`1)">
            <summary>
            Searches for the specified value and returns the zero-based index of the first occurrence within the entire WebstoreKeyedCollection
            </summary>
            <param name="value">The value to locate in the WebstoreKeyedCollection The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of value within the entire WebstoreKeyedCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.UpdateCollection(Microsoft.Webstore.MetaData.WebstoreKeyedCollection{`0,`1},System.Boolean,Microsoft.Webstore.MetaData.WebstoreConfig)">
            <summary>
            
            </summary>
            <param name="tempColl"></param>
            <param name="isMaxDeleteTicketChanged"></param>
            <param name="cfg"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Add(`0,`1)">
            <summary>
            Adds item to collection
            </summary>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="keyToRemove"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.OnCollectionChanged(System.Object[])">
            <summary>
            This method is called to generate the event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Get the value if key exists in collection.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Add(`1)">
            <summary>
            Adds item to collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Contains(`1)">
            <summary>
            Returns whether the collection containst the item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, 
            starting at a particular Array index. 
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Remove(`1)">
            <summary>
            Removes the given item from the collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.CollectionChanged">
            <summary>
            The collection changed Event
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Item(`0)">
            <summary>
            Gets the object associated with the specified key in the collection.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Count">
            <summary>
            Gets the count of items in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.IsReadOnly">
            <summary>
            Tells whether the collection is readonly
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreActionCollection.Contains(System.Guid)">
            <summary>
            Does the action collection contain action corresponding to the given GUID.
            </summary>
            <param name="healingActionUid"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreProcessAction">
            <summary>
            ProcessAction
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessAction.Action">
            <summary>
            Safeguard
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessAction.OnFailure">
            <summary>
            OnSuccess
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessAction.OnProceed">
            <summary>
            OnProceed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessAction.OnResolve">
            <summary>
            OnResolve
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertProcess">
            <summary>
            Gives information about the alert process in the WstConfig database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertProcess.StartAction">
            <summary>
            The first action to start with
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertProcess.ProcessActions">
            <summary>
            Gets the ProcessHealingActions associated with this alert process.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertProcessCollection">
            <summary>
            Collection of alert process in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreAlertProcessCollection.Contains(System.Guid)">
            <summary>
            Does the alert process collection contain alert process corresponding to the given GUID.
            </summary>
            <param name="alertProcessUid"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreProcessActionCollection">
            <summary>
            Collection of process actions in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreProcessActionCollection.Contains(System.Guid)">
            <summary>
            Does the process action collection contain process actions corresponding to the given GUID.
            </summary>
            <param name="processActionUid"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessActionCollection.Item(System.String)">
            <summary>
            Gets the processaction object of the given name.
            </summary>
            <param name="processActionName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertCondition">
            <summary>
            Gives information about the conditions for the alert rule
            This is used by the monitoring agent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertCondition.MonitoredDatumName">
            <summary>
            MonitoredDatumName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertCondition.ComparisonOperator">
            <summary>
            Comparison
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertCondition.Threshold">
            <summary>
            Threshold
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertRule">
            <summary>
            Gives information about the rule for an Alert generation.
            This is used by the monitoring agent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.GenerateAlertAt">
            <summary>
            GenerateAlertAt
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.GenerateAlertConditions">
            <summary>
            GenerateAlertConditions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.ResolveAlertConditions">
            <summary>
            GenerateAlertConditions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.Severity">
            <summary>
            Severity
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.AlertProcess">
            <summary>
            AlertProcess
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.AlertProcessRetryCount">
            <summary>
            AlertProcessRetryCount
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.AlertProcessRetryPeriod">
            <summary>
            AlertProcessRetryCount
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertConditionCollection">
            <summary>
            Collection of alert rule conditions in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreAlertConditionCollection.Contains(System.Guid)">
            <summary>
            Does the alert rule condition collection contain condition corresponding to the given GUID.
            </summary>
            <param name="alertConditionUid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBackground.Start">
            <summary>
            Start our background thread to update replication delay info, blacklists, 
            and check health of WSTService to make sure we will get notifications from
            the admin console if configuration changes occur (promote/demote, online/offline).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBackground.StartSelfAdminInfoThread">
            <summary>
            Starts polling for selfAdminInfo.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBackground.StopAll">
            <summary>
            Stop the background thread.
            In practice, since this Thread.IsBackground = true for our thread, it will get
            automatically Thread.abort() by the runtime when the process is exiting.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBackground.BackgroundPollDeployments(System.Object)">
            <summary>
            The background thread updates replication delay info, blacklists, 
            and checks health of WSTService to make sure we will get notifications from
            the admin console if configuration changes occur (promote/demote, online/offline).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBackground.BackgroundPollForNewDeployments(System.Object)">
            <summary>
            Polls for addition of new deployments.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBackground.BackgroundPollSelfAdminInfo(System.Object)">
            <summary>
            Polls for self admin info changes. This includes all the 
            tables that are used by the monitoring and the healing agent.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBlacklistMgr.HandleError(System.Exception,Microsoft.Webstore.MetaData.WebstoreResource,System.Data.SqlClient.SqlConnection,System.Boolean)">
            <summary>
            Handle the error that was received from executing the summary.
            This will also blacklist if needed.
            </summary>
            <param name="ex"></param>
            <param name="res"></param>
            <param name="conn"></param>
            <param name="isRegistryResource"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreBlacklistMgr.Instance">
            <summary>
            Gets the singleton instance
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreCluster">
            <summary>
            WebstoreCluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreCluster.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Uid">
            <summary>
            Uid
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Name">
            <summary>
            Name
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Path">
            <summary>
            Path
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.MonitoringServerUid">
            <summary>
            MonitoringServerUid
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.MonitoringDataPartitionNum">
            <summary>
            MonitoringFailSafeSetNum
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.JobStatusDataPartitionNum">
            <summary>
            JobStatusFailSafeSetNum
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreClusterCollection">
            <summary>
            Collection of WebstoreCluster objects
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreChangeAction">
            <summary>
            The Action enum that forms part of WebstoreEventArgs 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreChangeAction.Add">
            <summary>
            Object added 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreChangeAction.Update">
            <summary>
            Object refreshed. Some properties might have changed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreChangeAction.Remove">
            <summary>
            Object removed 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreEventArgs">
            <summary>
            An object of this type is passed to the CollectionChangedEventHandler
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreEventArgs.#ctor(Microsoft.Webstore.MetaData.WebstoreChangeAction,System.Object)">
            <summary>
            WebstoreEventArgs constructor 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEventArgs.Action">
            <summary>
            Type of action.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEventArgs.Element">
            <summary>
            The element that got changed.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.CollectionChangedEventHandler">
            <summary>
            Delegate for CollectionChangedEventHandler
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WmoEnumerator`2">
            <summary>
            This class implements the IEnumerator over a WebstoreKeyedCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WmoEnumerator`2.Dispose">
            <summary>
            The dispose method
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WmoEnumerator`2.MoveNext">
            <summary>
            Moves to the next element in the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WmoEnumerator`2.Reset">
            <summary>
            Moves to the start of the enumerator
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WmoEnumerator`2.Current">
            <summary>
            Returns the current element of the enumerator
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceCollectionBase`1">
            <summary>
            Forms the base class for Resource collections.
            The WmoDatabaseCollection and the WmoFileshareCollection derive from this.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceCollectionBase`1.Item(System.String,System.String)">
            <summary>
            Property - serverName:resourceName
            </summary>
            <param name="ServerName"></param>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceFssCollection`1">
            <summary>
            WebstoreResourceFssCollection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectsCollection`1">
            <summary>
            WebstoreSelfAdminInfoObjectsCollection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectsCollection`1.Item(System.String)">
            <summary>
            Name
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.Monitoring">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.Monitoring.PerfDeploymentNameDefault">
            <summary>
            Default name of the Performance Deployment
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.Monitoring.EventLogNot">
            <summary>
            Negation parameter for Event Log property values
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.PerformanceCounter">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.ReplicationLatency">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.UsedDbSpace">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.ServiceStatus">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.PingIP">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.PingSQL">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.CustomCSharpAssembly">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.MirroringStatus">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.EventLog">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.DatabaseQuery">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPerfCounterPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPerfCounterPropertyNames.Category">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPerfCounterPropertyNames.CounterName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPerfCounterPropertyNames.Instance">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumCSharpAssemblyPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumCSharpAssemblyPropertyNames.Assembly">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumCSharpAssemblyPropertyNames.Class">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumCSharpAssemblyPropertyNames.Method">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumServicePropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumServicePropertyNames.ServiceName">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumDatabasePropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumDatabasePropertyNames.DatabaseName">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames.EventLogName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames.EventsInLastNSeconds">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames.EventId">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames.EventSource">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames.EventCategoryNumber">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames.EventMessage">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumDatabaseQueryPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumDatabaseQueryPropertyNames.DeploymentName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumDatabaseQueryPropertyNames.DatabaseType">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumDatabaseQueryPropertyNames.Query">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPropertyValues">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPropertyValues.NoInstance">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPropertyValues.AllObjects">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPropertyValues.Primary">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPropertyValues.Secondary">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPropertyValues.Any">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.CollectAt">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.CollectAt.LocalOnly">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.CollectAt.RemoteOnly">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.CollectAt.Everywhere">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.PingStatus">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.PingStatus.Unreachable">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.PingStatus.Reachable">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.AlertStatus">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.New">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.NoAlertProcessAvailable">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.AlertBeingProcessed">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.AlertProcessCompleted">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.AlertProcessFailed">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.AlertProcessExceededRetryCount">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.Resolved">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.ResolvedManually">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.ResolvedViaAlertProcess">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.ResolvedWithoutAnAlertProcess">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.ResolvedAfterAlertProcessFailed">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredServerStatus">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredServerStatus.Free">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredServerStatus.Suppress">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredServerStatus.ManualSuppress">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredServerStatus.AutomaticSuppress">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.AggregationType">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AggregationType.None">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AggregationType.Ave">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AggregationType.Sum">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AggregationType.Max">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AggregationType.Min">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ComparisonOperator">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.gt">
            <summary>
            Greater Than
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.gte">
            <summary>
            Greater Than or Equal
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.lt">
            <summary>
            Less Than
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.lte">
            <summary>
            Less than or Equal
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.eq">
            <summary>
            Equal
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.neq">
            <summary>
            Not Equal
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.Older">
            <summary>
            Older -- used for comparing the time when a monitored datum was recorded
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.Newer">
            <summary>
            Newer -- used for comparing the time when a monitored datum was recorded
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionType">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.Outlier">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.RestartService">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.CustomScript">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.NTEvent">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.Wait">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.WmoCommand">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.SocTicket">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.ProvisionNewServer">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionCustomScriptPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionCustomScriptPropertyNames.ScriptHost">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionCustomScriptPropertyNames.ScriptName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionCustomScriptPropertyNames.CommandLine">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionCustomScriptPropertyNames.Timeout">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionCustomScriptPropertyNames.SuccessCode">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionRestartServicePropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionRestartServicePropertyNames.ServiceName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionRestartServicePropertyNames.Timeout">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionNTEventPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionNTEventPropertyNames.EventText">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionNTEventPropertyNames.EventId">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames.MonitoredDatumName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames.CompareTo">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames.ComparisonOperator">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames.Threshold">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames.ThresholdType">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames.MaxSimilarServersToBeOutler">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionWmoCommandPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionWmoCommandPropertyNames.WmoObject">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionWmoCommandPropertyNames.Method">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionWaitPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionWaitPropertyNames.Timeout">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.CMD">
            <summary>
            For ActionType of Custom Script, PropName of ScriptHost
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.WindowsScriptHost">
            <summary>
            For ActionType of Custom Script, PropName of ScriptHost
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.Number">
            <summary>
            For ActionType of Outlier, PropName of ThreshholdType
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.Percentage">
            <summary>
            For ActionType of Outlier, PropName of ThreshholdType
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.Cluster">
            <summary>
            For ActionType of Outlier, PropName of CompareTo
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.ServerRoleInCluster">
            <summary>
            For ActionType of Outlier, PropName of CompareTo
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.AllMonitoredDataForAlertRule">
            <summary>
            For ActionType of Outlier, PropName of MonitoredDatumName
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.OneMonitoredDatumForAlertRule">
            <summary>
            For ActionType of Outlier, PropName of MonitoredDatumName
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames">
            <summary>
            ProcessActionIds
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.Url">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.DomainUserName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.FileId">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.Action">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.AssignedToTeamName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.ClientImpactedIndicator">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.PropertyName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.Description">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.Priority">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.TicketProblemType">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.Title">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.NotifyAliases">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.TicketType">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames">
            <summary>
            Properties for WstProvisionServer action
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames.UpdateServerRoles">
            <summary>
            Specifies if we should update the server roles of the destination server.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames.ServerPoolServerRole">
            <summary>
            Server role for the server pool.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames.FailedServerServerRole">
            <summary>
            Server Role for failed servers.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ProcessActionIds">
            <summary>
            ProcessActionIds
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ProcessActionIds.EndAction">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.AlertConditionType">
            <summary>
            AlertConditionType
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertConditionType.Generate">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertConditionType.Resolve">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoringResult">
            <summary>
            MonitoringResult
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoringResult.NoAggregatedValue">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Monitoring.MonitoringResult.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Monitoring.MonitoringResult.#ctor(Microsoft.Webstore.MetaData.WebstoreMonitoredDatum,Microsoft.Webstore.MetaData.WebstoreServer,System.String,System.Double)">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.MonitoringResult.MonitoredDatum">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.MonitoringResult.SourceServer">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.MonitoringResult.Instance">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.MonitoringResult.Value">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.WstAlert">
            <summary>
            Container for alert information
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Monitoring.WstAlert.#ctor(System.Guid,Microsoft.Webstore.MetaData.WebstoreAlertRule,Microsoft.Webstore.MetaData.WebstoreServer,Microsoft.Webstore.MetaData.WebstoreServer,Microsoft.Webstore.Common.Monitoring.AlertStatus,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.Uid">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.AlertRule">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.AlertProcess">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.Server">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.AlertGenerationServer">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.Status">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.IsResolved">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.Severity">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.AlertProcessIteration">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.CreateTime">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.Ticket">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.WstMonData">
            <summary>
            Container for alert monitored data polled from the PerfDB
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Monitoring.WstMonData.#ctor(Microsoft.Webstore.MetaData.WebstoreServer,Microsoft.Webstore.MetaData.WebstoreMonitoredDatum,System.String,System.String,System.Double,System.Double,System.DateTime)">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.Server">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.MonitoredDatum">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.Instance">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.AgentServer">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.Value">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.AggregatedValue">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.Ticket">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoringApplication">
            <summary>
            MonitoringApplication, which type it is
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoringApplication.WstMasterController">
            <summary>
            MasterController
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoringApplication.WstMonitoringAgent">
            <summary>
            MonitoringAgent
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.EnvironmentChangedEventHandler">
            <summary>
            Delegate for the EnvironmentChanged event
            </summary>
            <param name="src"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ConfigCacheChangedEventHandler">
            <summary>
            Delegate for the Webstore Config cache changed event
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.SettingsChangedEventHandler">
            <summary>
            Delegate for the SettingsChanged event
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ConfigCacheChangedAction">
            <summary>
            This action defines, what happened to the config cache
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ConfigCacheChangedAction.Expired">
            <summary>
            The cached configuration has expired.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ConfigCacheChangedAction.Renewed">
            <summary>
            The cached configuration has been renewed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ConfigCacheChangedEventArgs">
            <summary>
            The event arguments for the WebstoreConfigCacheChanged event
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ConfigCacheChangedEventArgs.Action">
            <summary>
            What was the action - expired/renewed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ConfigCacheChangedEventArgs.TimeSpan">
            <summary>
            What time elapsed since the last action.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreConfig">
            <summary>
            Summary description for WebstoreConfig.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnConfigCacheChanged(System.Object[])">
            <summary>
            This method is called to generate the event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.SetPollingSucceeded">
            <summary>
            Each background thread informs it passed polling.
            </summary>        
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GenerateConfigExpiredEvent">
            <summary>
            Generates the cached configuration expired event if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnUserSettingsChanged(System.Object[])">
            <summary>
            called to fire the UserSettingsChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnWebstoreSettingsChanged(System.Object[])">
            <summary>
            called to fire the WebstoreSettingsChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnEnvironmentChanged(System.Object[])">
            <summary>
            called to fire the EnvironmentChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.IsUserSettingPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether 
            polling is required.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.RenewExpirationUserSettings(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.IsEnvSvrPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether this deployment needs to be polled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.RenewExpirationEnvSvr(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.RenewExpirationNewDeps(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.DeepInitializeAllDeployments">
            <summary>
            Initializes the deployment including the collections.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.InternalInitialize">
            <summary>
            Initializes this config instance (singleton).
            Things that it does:
            1.  Shallow initialize all the registered servers
            2.  Start background thread to look for new servers
            3.  Shallow initialize all the registered deployments
            4.  Start background thread to poll for deployment changes
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.Initialize">
            <summary>
            Call this method to initialize the instance. 
            This should be called before accessing any properties/methods of this class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetManifestCollection(System.Boolean)">
            <summary>
            returns a Collection of WmoManifest objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetServerRoleCollection(System.Boolean)">
            <summary>
            returns a Collection of ServerRole objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetDatabaseTemplateCollection(System.Boolean)">
            <summary>
            returns a Collection of Database Templates objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetDistributionDatabaseTemplateCollection(System.Boolean)">
            <summary>
            returns a Collection of Database Templates objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.EnvironmentChanged">
            <summary>
            The event that gets fired when environment is updated
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.ConfigCacheChanged">
            <summary>
            The event that gets fired when cached configuration either gets expired
            or gets renewed after expiration.
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.UserSettingsChanged">
            <summary>
            The event that gets fired when the userSettings
            are changed
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.WebstoreSettingsChanged">
            <summary>
            The event that gets fired when the webstoreSettings
            are changed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.ConfigConnectionString">
            <summary>
            Gets the connectin string to be used
            to query the config db.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.EventsToGenerateList">
            <summary>
            returns the object that stores the list
            of events that need to be generated by the 
            background event generation thread.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Deployments">
            <summary>
            Gets a collection of all deployments that the Configuration database monitors. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Servers">
            <summary>
            Gets the Server collection. Depending on the WmoViewType hint,
            the server collection might contain one, subset or all of the servers that
            the WstConfig database has.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.SiteName">
            <summary>
            The site Name for this instance of the WmoConfig
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.SelfAdminInfo">
            <summary>
            Gets the Information that the self healing agent and 
            the Monitoring agents require. Polling for changes on 
            that information only starts after the first call to 
            this property.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.EnvironmentSettings">
            <summary>
            Gets the Environment settings for the Site
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.UserSettings">
            <summary>
            Gets the UserSettings object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Settings">
            <summary>
            Gets the settings object from which all the 
            centralized settings stored in config can be queried
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.IsInitialized">
            <summary>
            Has the Initialize method been called.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.ClientDataCenter">
            <summary>
            Gets this client's datacenter
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreStringCollection">
            <summary>
            The WebstoreStringCollection
            </summary>
            
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreStringCollection.Contains(System.String)">
            <summary>
            Whether the server belongs to the given role
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreGuidCollection">
            <summary>
            The WebstoreGuidCollection
            </summary>
            
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDbSelector.#cctor">
            <summary>
            C# static constructor's are used to inititalize static members of the class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDbSelector.GetRandom(System.Int32)">
            <summary>
            Gets random number between 0 and randomMax
            </summary>
            <param name="randomMax">0..randomMax random number</param>
            <returns>0...randomMax</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllUserSettings(System.DateTime,System.String,System.String,System.Int32@)">
            <summary>
            WspGetAllUserSettings
            </summary>
            <param name="Ticket"></param>
            <param name="serverRole"></param>
            <param name="serverName"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetDeploymentsShallowInitInfo(System.DateTime)">
            <summary>
            execute WspGetDeploymentsShallowInitInfo
            </summary>
            <param name="Ticket"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetEnvironmentAndServerInfoV5_02(System.DateTime,System.DateTime,System.DateTime,System.Int32@)">
            <summary>
            Execute WspGetEnvironmentAndServerInfoV5_02
            </summary>
            <param name="EnvTicketIn"></param>
            <param name="ServerTicketIn"></param>
            <param name="SelfAdminInfoTicketIn"></param>
            <param name="returnVal"></param>
            <returns></returns>        
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetEnvironmentAndServerInfoV5_02(System.DateTime,System.DateTime,System.DateTime,System.String,System.Boolean,System.Int32@)">
            <summary>
            Execute WspGetEnvironmentAndServerInfoV5_02
            </summary>
            <param name="EnvTicketIn"></param>
            <param name="ServerTicketIn"></param>
            <param name="SelfAdminInfoTicketIn"></param>
            <param name="site"></param>
            <param name="useFileData"></param>
            <param name="returnVal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetDeploymentInfoByUid_V5_6(System.Guid,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,System.Int32@)">
            <summary>
            Execute WspGetDeploymentInfoByUid_V5_6
            </summary>
            <param name="depUid"></param>
            <param name="ticket"></param>
            <param name="fssLatencyTicket"></param>
            <param name="settingTicket"></param>
            <param name="serverRole"></param>
            <param name="serverName"></param>
            <param name="returnVal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetSelfAdminInfo(System.DateTime)">
            <summary>
            Execute WspGetSelfAdminInfo
            </summary>
            <param name="Ticket"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllManifests">
            <summary>
            Gets the Manifest related Information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllSecurityRoles(System.Guid)">
            <summary>
            Returns all of the security roles for a given manifest
            </summary>
            <param name="manifestUid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllServerRoles">
            <summary>
            Returns all of the server roles for in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllDatabaseTemplate">
            <summary>
            Returns all of the security roles for a given manifest
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllSqlFssLatencies(System.Guid)">
            <summary>
            execute WspLatency
            </summary>
            <param name="depUid"></param>        
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceStatus">
            <summary>
            Enumerates the different Statuses a database can have
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.Online">
            <summary>
            The WmoResource (database/Fileshare) is Online
            This means clients can access it.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.Offline">
            <summary>
            The WmoResource (database/Fileshare) is Offline
            This means clients cannot access it
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.NoWriteAll">
            <summary>
            The WmoResource (database/Fileshare) is Primary
            This means clients cannot access it.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.NeedsRepair">
            <summary>
            The WmoResource(database/Fileshare) is marked
            as needs repair.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.NotDeployed">
            <summary>
            The WmoResource(database/Fileshare) is 
            not yet Deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.Standby">
            <summary>
            The WmoResource(database only) is 
            in Standby state. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceRole">
            <summary>
            Enumerates the different Roles a database can have
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.Primary">
            <summary>
            The WmoResource (database/Fileshare) is Primary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.Secondary">
            <summary>
            The WmoResource (database/Fileshare) is Secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.MirroringPrincipal">
            <summary>
            The WmoResource (database only) is Mirroring Principal
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.MirroringMirror">
            <summary>
            The WmoResource (database only) is Mirror database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceType">
            <summary>
            The type of the resource
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceType.Invalid">
            <summary>
            The resource type is Invalid
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceType.Database">
            <summary>
            The resource is of type SQL
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceType.FileShare">
            <summary>
            The resource is of type File
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency">
            <summary>
            Latency object for the database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.Key">
            <summary>
            Objects Unique key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.SourceDatabase">
            <summary>
            Gets the Source database object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.Latency">
            <summary>
            Gets the latency
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.Bucket">
            <summary>
            Gets the latency bucket for the given latency.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabaseLatencyCollection">
            <summary>
            Each database has a collection of WebstoreDatabaseLatencyCollection.
            Generally this is used for multimaster topology where each db replicated to 
            each of the fss partners.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabase">
            <summary>
            Gives all the information needed to identify this database.
            Information includes - DeploymentUID, FailsafesetNumber, Status, Role etc.
            It also publishes events which get generated after a Status or Role change of the database.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResource">
            <summary>
            Represents a Webstore resource. 
            Forms the base class for WMODatabase and WMOFileshare classes.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResource.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResource.CompareTo(System.Object)">
            <summary>
            Compares two resources. It compares on the key.
            </summary>
            <param name="compareWith"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResource.Equals(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            The IEquatable::Equals method
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Name">
            <summary>
            Gets the Name of this Resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ResourceType">
            <summary>
            Gets the type of the resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ServerUid">
            <summary>
            Gets the Server UID of this Resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Server">
            <summary>
            Gets the Server on which this Resource resides
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ServerName">
            <summary>
            Gets the name of the server on which this resource is.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.FssId">
            <summary>
            Gets the Failsafeset ID of this Resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Uid">
            <summary>
            Gets the associated Resource Guid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.DeploymentUid">
            <summary>
            Gets the Guid associated with the deployment
            of which this Resource is a part of.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ResourceFailSafeSet">
            <summary>
            Gets the corrosponding resource FailSafeSet
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Status">
            <summary>
            Gets the Status of this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.IsOnline">
            <summary>
            Whether the database is online. Most required 
            by all users and thus a property.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsStale">
            <summary>
            Is this database's latency higher than stale latency bucket?
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsStaleRemote">
            <summary>
            Is this database's latency higher than DataCenter stale latency bucket?
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsPrimary">
            <summary>
            Returns true if this database is the primary database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.Latency">
            <summary>
            Gets the highest latency for this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.LatencyBucket">
            <summary>
            Gets the latency bucket under which the 
            database falls.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.DefaultStatus">
            <summary>
            The default status for this database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.ResourceType">
            <summary>
            Gets the type of the resource
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabaseCollection">
            <summary>
            The collection of Fileshares in a FileFailsafeset.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseCollection.Item(System.String,System.String)">
            <summary>
            Gets the database identified by the server and name
            </summary>
            <param name="ServerName"></param>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDataPartition">
            <summary>
            Stores information about a single Data Partition.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDataPartition.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.Number">
            <summary>
            Gets the partition number.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.SQLFssId">
            <summary>
            Gets the SQL Failsafeset ID, to which this partition belongs
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.FileFssId">
            <summary>
            Gets the File Failsafeset ID, to which this partition belongs
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.Status">
            <summary>
            Gets the status of the datapartition.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDataPartitionCollection">
            <summary>
            Collection of dataPartitions.
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.DeploymentPropertiesChangedEventHandler">
            <summary>
            Delegate for DeploymentPropertiesUpdated
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDeployment">
            <summary>
            This class represents a Wmo deployment and its associated properties.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.Refresh(System.Boolean)">
            <summary>
            refreshes this deployment with latest changes.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.IsDepConfigurationExpired">
            <summary>
            Gives the state of polling for this deployment.
            </summary>
            <returns>true if expired, false if not</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.GetKey">
            <summary>
            GetKey
            </summary>
            <returns>Guid Key</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.GetCachedFirstSqlFssForWstConfig">
            <summary>
            Gets the first Sql Fss in the deployment and caches it
            </summary>
            <returns>WebstoreSQLFss First cached FSS in the list</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.IsPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether this deployment needs to be polled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.RenewExpiration(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.ShallowInitializeDeployment(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Shallow initializes from the data reader. Does not initialize the collections.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.ForceReInitialize">
            <summary>
            Reinitialize deep, by reading from the config directly. 
            Null tickets are passed so that the whole configuration 
            is re-read.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.OnDeploymentSettingsChanged(System.Object[])">
            <summary>
            This method is called to generate the event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.ParsePolledDepInfoAndUpdateCache(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Updates the present cache with what was just polled.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.MergeResultsIntoCache(Microsoft.Webstore.MetaData.WebstoreDeployment,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Merge the results from TempDep into the internal cache of this deployment
            </summary>
            <param name="tempDep"></param>
            <param name="IsMaxTicketChanged"></param>
            <param name="IsMaxDeleteTicketChanged"></param>        
            <param name="fEnvironmentSettingsChanged"></param>        
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreDeployment.DeploymentPropertiesChanged">
            <summary>
            The deployment properties changed event.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Name">
            <summary>
            Gets the name of the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Uid">
            <summary>
            Gets the Guid associated with this deployment
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Config">
            <summary>
            Gets the parent config object
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.ManifestUid">
            <summary>
            Gets the manifest Uid associated with this deployment
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxTicket">
            <summary>
            Gets the max ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxPartitionTicket">
            <summary>
            Gets the max partition ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxDeleteTicket">
            <summary>
            Gets the max delete ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxFssLatencyTicket">
            <summary>
            Gets the max Failsafeset latency ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxWebstoreSettingsTicket">
            <summary>
            Gets the max WebstoreSettings ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Description">
            <summary>
            Description of the Deployment 
            as registered in the WstConfig database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.PartitionType">
            <summary>
            Gets the type of partitioning for this deployment.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SecondaryType">
            <summary>
            Secondary type of this deployment.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.FileshareDefaultWriteFailoverMode">
            <summary>
            Gets the default write failover mode for this deployments Fileshare
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.FileshareDefaultReadFailoverMode">
            <summary>
            Gets the default read failover mode for this deployments Fileshare
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SQLDefaultWriteFailoverMode">
            <summary>
            Gets the default read failover mode for this deployments SQL dbs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SQLDefaultReadFailoverMode">
            <summary>
            Gets the default read failover mode for this deployments SQL dbs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SecondaryStaleThreshold">
            <summary>
            Gets the Secondary Stale Threshold time that is used by the client library.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SecondaryStaleDCThreshold">
            <summary>
            Gets the Secondary Stale Data Center Threshold time that is used by the client library.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SQLFailSafeSets">
            <summary>
            Get the collection of SQL Failsafesets for the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.FileFailSafeSets">
            <summary>
            Get the collection of File Failsafesets for the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Partitions">
            <summary>
            Get the collection of logical partitions for the deployment
            </summary>
            
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.IsLatencyInitialized">
            <summary>
            Has the latency been updated.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.IsInitialized">
            <summary>
            Call this property to find out if this deployment
            has been initialized.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.IsShallowInitialize">
            <summary>
            Returns true if deployment has been shallow initialized.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDeploymentCollection">
            <summary>
            This class holds collection of deployments represented in the WstConfig
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeploymentCollection.Item(System.Guid)">
            <summary>
            Returns the deployment associated with the given GUID.
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeploymentCollection.Item(System.String)">
            <summary>
            Returns the deployment object.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings">
            <summary>
            This class holds the environmen settings.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.Name">
            <summary>
            Name of the Environment
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingOffsetService">
            <summary>
            PollingOffsetService
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyPollingInterval">
            <summary>
            LatencyPollingInterval
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket0">
            <summary>
            LatencyBucket0
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket1">
            <summary>
            LatencyBucket1
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket2">
            <summary>
            LatencyBucket2
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket3">
            <summary>
            LatencyBucket3
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingIntervalClient">
            <summary>
            Gets client polling interval.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingOffsetClient">
            <summary>
            Gets the amount of time before the TicketExpirationInterval
            that the client should start polling.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingIntervalService">
            <summary>
            Gets the interval of time after which the service should repoll.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreErrorHelper">
            <summary>
            Error Helper for getting string resources, IDs and names.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreErrorHelper.Number">
            <summary>
            The ID Number associated with this error resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreErrorHelper.Format">
            <summary>
            The Format string before the parameters are inserted.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreErrorHelper.#ctor(System.String)">
            <summary>
            The constructor for the class requires the Short name.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreConfigUnreachable">
            <summary>
            The Webstore configuration server is unreachable. Please look event viewer for more information.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstorePolledInformationInconsistent">
            <summary>
            The Polled information from the Webstore config is inconsistent. This might be due to configuration changes.Plese retry.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreApplicationNotExist(System.String)">
            <summary>
            -3001;The Webstore application ({0}) does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreApplicationTicketBad(System.String)">
            <summary>
            -3010;The Webstore application ({0}) has a bad ticket.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.SettingNotExist(System.String)">
            <summary>
            -3050;The Webstore setting ({0}) does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreUnknownException(System.Exception)">
            <summary>
            3; An unknown exception occured. Please look at inner exception for more details.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreUnexpectedError(System.String)">
            <summary>
            4;Unexpected Error - {0}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreEventsToGenerateList">
            <summary>
            Stores global list of events to be generated.
            The event generation thread comes and collects
            the list and fires the events synchronously.
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreException">
            <summary>
            class for WebstoreException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.#ctor(System.Int32,System.String)">
             <summary>
            
             </summary>
             <param name="number"></param>
             <param name="message"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreException.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreException.Number">
            <summary>
            The number of the exception.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshare">
            <summary>
            Represents file share information
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreFileshare.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshare.IsPrimary">
            <summary>
            Returns true if this fileshare is the primary database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshare.ResourceType">
            <summary>
            Gets the type of the resource
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshareCollection">
            <summary>
            The collection of Fileshares in a FileFailsafeset.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareCollection.Item(System.String,System.String)">
            <summary>
            Gets the database identified by the server and name
            </summary>
            <param name="ServerName"></param>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshareFss">
            <summary>
            Represents a Fileshare Failsafeset.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceFss">
            <summary>
            Represents a Webstore resource Failsafeset. 
            Forms the base class for WMOSQLFss and WMOFileshareFss classes.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.Deployment">
            <summary>
            The deployment to which this ResourceFailsafeset belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.FssId">
            <summary>
            Gets the Failsafeset ID associated with this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.Status">
            <summary>
            Gets the status of this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.DeploymentUid">
            <summary>
            Gets the deployment UID for this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.SecondaryType">
            <summary>
            Gets the type of secondry for this failsafeset.
            During upgrade different Failsafesets of the 
            same deployment might have different WmoSecondaryType's
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.ProvisioningPreference">
            <summary>
            Returns the Provisioning preference for this resource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.ProvisioningStatus">
            <summary>
            Returns the Provisioning Status for this resource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.NeedsStateCopy">
            <summary>
            Does this object need state copy
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.ClusterPath">
            <summary>
            Gets the cluster path for the given fss.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.Fileshares">
            <summary>
            Gets a collection of databases in the Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.PrimaryFileshare">
            <summary>
            Gets the current primary for this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.DefaultPrimaryFileshare">
            <summary>
            Gets the default primary database for this Failsafeset
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshareFssCollection">
            <summary>
            The collection of Fileshare Failsafesets.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreIPAddress">
            <summary>
            Stores information about server IP address.
            Wmo supports 2 IPs per server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.IpAddress">
            <summary>
            Gets the ip address string.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.Switch">
            <summary>
            Gets the name of the switch.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.NetworkSwitch">
            <summary>
            Gets the name of the switch.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.IsPreferred">
            <summary>
            Is this IP Preferred by the clients.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.Server">
            <summary>
            Gets the server to which this IP address belongs.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstorePartitionType">
            <summary>
            What type of partition.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstorePartitionType.None">
            <summary>
            Manifest is not written to support partitioning
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstorePartitionType.Fixed">
            <summary>
            Fixed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstorePartitionType.Variable">
            <summary>
            Variable
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreManifest">
            <summary>
            Webstore manifest class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreManifest.GetSecurityRoles">
            <summary>
            Returns a list of security roles associated with this manifest
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreManifest.GetKey">
            <summary>
            The key for this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Uid">
            <summary>
            Manifest Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Name">
            <summary>
            Manifest Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Version">
            <summary>
            Manifest Version.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Description">
            <summary>
            User defined description of the manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Topology">
            <summary>
            Topology of the manifest (SingleMaster, Multimaster, etc.)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.PartitionType">
            <summary>
            Type of partitioning scheme
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.PartitionCount">
            <summary>
            Count of number of partitions.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreManifestCollection">
            <summary>
            The WebstoreManifestCollection
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMetaData">
            <summary>
            The class that exposes all the the Webstore MetaData.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Instance">
            <summary>
            Gets the Class singleton instance
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.DefaultConfig">
            <summary>
            Gets the default config instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Sites">
            <summary>
            Gets the list of sites.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Item(System.String)">
            <summary>
            Gets the config instance for the given site
            </summary>
            <param name="SiteName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreConfigCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfigCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="SiteName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMonitoringProperty">
            <summary>
            WebstoreMonitoringProperty
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoringProperty.DataType">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoringProperty.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMonitoringPropertyCollection">
            <summary>
            Collection of servers in a WstConfig database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoringPropertyCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum">
            <summary>
            Information about the MonitoredDatum. This is used by the 
            monitoring agent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.Type">
            <summary>
            AssemblyName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.Properties">
            <summary>
            Properties
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.SamplingFrequency">
            <summary>
            SamplingFrequency
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.AggregationType">
            <summary>
            AggregationType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.AggregationInterval">
            <summary>
            AggrInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.StaleTime">
            <summary>
            StaleTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.RatePrecision">
            <summary>
            RatePrecision
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.ServerRoleUid">
            <summary>
            ServerRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.CollectAt">
            <summary>
            CollectAt
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfigurationInfo.Instance">
            <summary>
            Gets the singleton instance
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo">
            <summary>
            The instance of this class provides all information that is
            needed by the Monitoring agent and the self healing agent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.IsPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether this deployment needs to be polled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.RenewExpiration(System.DateTime)">
            <summary>
            Renews configuration expiration interval.
            </summary>
            <param name="dtConfigExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.PollSelfAdminInfo(System.Boolean)">
            <summary>
            Poll for self Admin Info
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.IsInitialized">
            <summary>
            Set to true after first call to get the SelfAdminInfo is made.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.PollingIntervalService">
            <summary>
            Gets the polling interval for service.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.PollingOffsetService">
            <summary>
            Gets the polling offset for service.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.Ticket">
            <summary>
            The ticket related to SelfAdminInfo.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.AlertRules">
            <summary>
            AlertRules.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.MonitoredData">
            <summary>
            Collection of MonitoredData.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.Actions">
            <summary>
            Collection of Actions.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.AlertProcesses">
            <summary>
            Collection of Healing Actions.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServer">
            <summary>
            Gives information about the server in the WstConfig database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Config">
            <summary>
            Gets the config database for this server
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.IPAddresses">
            <summary>
            Gets the collection of IPAddresses for this server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Cluster">
            <summary>
            Gets the cluster information for this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Databases">
            <summary>
            Gets a collection of WmoDatabase on this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Fileshares">
            <summary>
            Gets the collection of Fileshares on this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.ReplicationDistributionServer">
            <summary>
            Gets the replication distribution server for this server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Uid">
            <summary>
            Gets the Guid associated with this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Name">
            <summary>
            Gets the name of the server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.DataCenterName">
            <summary>
            Gets the datacenter the server belongs to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Description">
            <summary>
            Gets the description for the server as
            described in the WstConfig database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.DistributionDatabaseTemplateName">
            <summary>
            Gets the Distribution Database Template Name for the server as
            described in the WstConfig database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MirroringEndPointName">
            <summary>
            Gets the name of the registered mirroring endpoint name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MirroringEndPointPort">
            <summary>
            Gets the port number associated with the registered mirroring endpoint.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MirroringCompleteDomainName">
            <summary>
            Gets the complete domain name associated with the registered mirroring endpoint.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.ServerRoles">
            <summary>
            Server roles for this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MonitoredData">
            <summary>
            MonitoredData for this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.AlertRules">
            <summary>
            AlertRules for this server.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServerCollection">
            <summary>
            Collection of servers in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreServerCollection.Contains(System.Guid)">
            <summary>
            Does the server collection contain server corrosponding to the given GUID.
            </summary>
            <param name="svrUid"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerCollection.Item(System.String)">
            <summary>
            Gets the server object of the given name.
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServerRole">
            <summary>
            Webstore manifest class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreServerRole.GetKey">
            <summary>
            The key for this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Uid">
            <summary>
            ServerRole Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Name">
            <summary>
            ServerRole Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Description">
            <summary>
            ServerRole Description.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServerRoleCollection">
            <summary>
            The WebstoreServerRoleCollection
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSetting">
            <summary>
            Stores an individual settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSetting.Name">
            <summary>
            Name of the setting.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSetting.Uid">
            <summary>
            Uid of the setting.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreUserSettings">
            <summary>
            The user settings class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreUserSettings.#ctor(Microsoft.Webstore.MetaData.WebstoreConfig)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreUserSettings.GetSettingValue(System.String,System.String,System.String)">
            <summary>
            Gets the specified user setting
            </summary>
            <param name="settingName">The Setting name</param>
            <param name="deploymentName">The deployment name for which the setting is requested</param>
            <param name="clusterName">The cluster name for which the setting is requested</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreUserSettings.Key">
            <summary>
            Key for the object
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSettings">
            <summary>
            Stores the Webstore settings for a given object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.#ctor(Microsoft.Webstore.MetaData.WebstoreConfig)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetDbConnectionTimeoutSecs(System.String,System.String)">
            <summary>
            The Connection timeout value
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
            
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetDbConnectAttemptMax(System.String,System.String)">
            <summary>
            Max number of connection attempts for a database
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetResourceValidatePeriod">
            <summary>
            Time to wait in sec's before attempt to unblacklist a resource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetDbCommandTimeoutSecs(System.String,System.String)">
            <summary>
            The command timeout for database queries
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCollectPeriod">
            <summary>
            Timeperiod for counter collection
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCommandLatencyExcellent(System.String)">
            <summary>
            LatencyExcellent bucket boundary
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>        
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCommandLatencyGood(System.String)">
            <summary>
            LatencyGood bucket boundary
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCommandLatencyOK(System.String)">
            <summary>
            LatencyOk bucket boundary
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCommandLatencyPoor(System.String)">
            <summary>
            LatencyPoor bucket boundary
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetBlackListStaleTimeoutSecs(System.String,System.String)">
            <summary>
            Timeperiod after which a server gets removed from 
            the blacklist even if it is not blacklisted yet
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetPersistentFailureLogPeriod(System.String,System.String)">
            <summary>
            PersistentFailureLogPeriod
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMinGrowthPeriod(System.String)">
            <summary>
            What is the minimum time before the MCRL can be grown
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMaxGrowthPeriodOffset(System.String)">
            <summary>
            Max Offset from MinGrowthPeriod that 
            MCRL growth can be delayed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMaxPoolSize(System.String,System.String)">
            <summary>
            The maximum SQL pool size
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetLevelToResetConnectionPool(System.String,System.String)">
            <summary>
            The error level to reset the SQL connection pool. If error class is greater than or equal to the level, the connection pool will be cleaned.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableResetConnection(System.String,System.String)">
            <summary>
            Is reset connection on SqlConnection enabled
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetConcurrencyLimitStart(System.String)">
            <summary>
            The start value of MCRL, when app first starts up.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetConcurrencyLimitDelta(System.String)">
            <summary>
            The delta to be kept between MCRS and MCRL when 
            background thread reduces MCRL because of inactivity
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetConcurrencyLimitMinumum(System.String)">
            <summary>
            The minumum value for MCRL 
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableThrottling(System.String)">
            <summary>
            Is throttling of requests enabled
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableRampedGrowth(System.String)">
            <summary>
            Is ramped growth of MCRL enabled?
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableThrottledCmdFailover(System.String)">
            <summary>
            Should command execution failover if it is throtteled
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableLatencyBasedScaleback(System.String)">
            <summary>
            Should the latency based scaleback thread be enabled?
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableThrottlingOnCmdTimeout(System.String)">
            <summary>
            Should MCRL be reduced if webstore encounters 
            timeout errors
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetPercentBadRequestsThreshold(System.String)">
            <summary>
            The percent number of bad requests before webstore
            logic reduces MCRL.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetThrottlingQueueCapacity(System.String)">
            <summary>
            The number of requests of the throttling queue can accommodate.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetThrottlingQueueWarningRatio(System.String)">
            <summary>
            The threshold to give a warning if the queue exceeds the limits.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetThrottlingQueueStaleDuration(System.String)">
            <summary>
            The duration in the queue when the request will became stale
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetDataCenterName">
            <summary>
            The current client's datacenter name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetSqlFailoverErrors(System.String,System.String)">
            <summary>
            The current client's SqlFailoverErrors 
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetFileFailoverErrors(System.String,System.String)">
            <summary>
            The current client's FileFailoverErrors 
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetFailoverOnCommandTimeout(System.String,System.String)">
            <summary>
            FailoverOnCommandTimeout
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetLogCommandError(System.String)">
            <summary>
            GetLogCommandError
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetUserSettingPollingInterval">
            <summary>
            Gets the user settings polling interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetUserSettingPollingOffset">
            <summary>
            Gets the offset of polling of user settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerHeartBeatInterval">
            <summary>
            Gets the MasterController Heartbeat Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerMonDataPollingInterval">
            <summary>
            Gets the MasterController Monitored Data Polling Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerPerfDBPurgingInterval">
            <summary>
            Gets the MasterController PerfDB Purging Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerPerfDBPurgeStaleTime">
            <summary>
            Gets the MasterController PerfDB Stale Time
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerAlertPollingInterval">
            <summary>
            Gets the MasterController Alert Polling Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerAlertGenerateInterval">
            <summary>
            Gets the MasterController Alert Generate Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerAlertResolveInterval">
            <summary>
            Gets the MasterController Alert Resolve Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerMaxAlertProcessThreads">
            <summary>
            Gets the MasterController Max Alert Process Threads
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerMaxWaitBeforeResolve">
            <summary>
            Gets the MasterController Max Wait Before Resolve
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMonitoringAgentRecordHistoricalInformation">
            <summary>
            Gets the flag for the MonitoringAgent to Record Historical Information
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoMaxBGThreads">
            <summary>
            Gets maximum allowed back ground threads for the Wmo. Used in the WmoConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoDeploymentMaxThreads">
            <summary>
            Maximum allowed threads for setting up a deployment. This is an override setting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWstAgentMaxBGThreads">
            <summary>
            Maximum back ground threads used by the WstAgent for processing latency.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMonitoringWorkThreads">
            <summary>
            Max Monitoring threads.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMonitoringAgentWorkThreads">
            <summary>
            Max Monitoring agent threads.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolNoOnlineDbsNoPrimarySM">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolNoOnlineDbs">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolNoPrimariesSM">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolSomeDbsNotOnline">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolSomeDbsNotDefault">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolPrimDbNotDefault">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolNoSecondaries">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolLatencyHigherThanBucket">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolManVerDiffDepVer">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerNoOnlineDbs">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerNonOnlinePrimary">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerDBNotOnline">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerSomeDbsNotDefault">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerDBLatencyTooHigh">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerAlertSeverityWarning">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerAlertSeverityError">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolLatencyBucketDeployment">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolLatencyBucketServer">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerAlertSeverityWarningNum">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerAlertSeverityErrorNum">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolFont">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolAllowWstCommandsToPopupInNewWindow">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolShouldPollAlertData">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolShouldPollMonitoredData">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolAlertThreadPollInterval">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolAlertLoadDataRecentHours">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolMonitoredDataThreadPollInterval">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerStatusToSupressAlerts">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolStatusHtmlFile">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolStatusXmlFile">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolStatusXslFile">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolJobFrameworkStatusLastNDays">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoWaitActivePrimaryProcessTimeout">
            <summary>
            Gets the timeout to wait on Active Primary processes in the WMO.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoDefaultSqlCommandTimeout">
            <summary>
            Gets the timeout to wait for sql commands.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoDefaultBackupRestoreSqlCmdTimeout">
            <summary>
            Gets the timeout to wait for backup/restore commands.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoServerOperationMaxThreads">
            <summary>
            Max number of threads active during server level operations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWstMonitorMaxBGThreads">
            <summary>
            Max number of threads used for the Admin tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobStatusDeploymentName">
            <summary>
            Name of the JobStatus Deployment
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobManagerLeaseExpirationInterval">
             <summary>
            GetJobManagerLeaseExpirationInterval
             </summary>
             <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobManagerLeaseExpirationIntervalDelta">
             <summary>
            GetJobManagerLeaseExpirationIntervalDelta
             </summary>
             <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobPollingInterval">
            <summary>
            GetJobPollingInterval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobHeartBeatInterval">
            <summary>
            GetJobHeartBeatInterval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobHeartBeatIntervalDelta">
            <summary>
            GetJobHeartBeatIntervalDelta
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMaxJobAgentWorkers(System.String)">
            <summary>
            GetMaxJobAgentWorkers
            </summary>
            <param name="cluster"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobWorkersDirectory">
            <summary>
            Gets the directory from where the job framework jobs are located
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobStatusCleanUpInterval">
            <summary>
            Gets the JobStatusCleanUpInterval. This is used by the jobframework to cleanup old records
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobFrameworkAgentPort">
            <summary>
            Gets the JobFrameworkAgentPort. This is the port that the JobFrameworkAgent will listen on
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSettings.Key">
            <summary>
            Gets the key for this object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSettings.Config">
            <summary>
            Gets the parent config object
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDep_ClusterSettingsCollection">
            <summary>
            WebstoreDep_ClusterSettingsCollection 
            </summary>    
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSettingsCollection">
            <summary>
            WebstoreSettingsCollection
            </summary>    
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFailoverMode">
            <summary>
            Enumerates the different failover modes the client library uses.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.PrimaryOnly">
            <summary>
            Only try to primary resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.SecondaryThenPrimary">
            <summary>
            First try secondary resource and then primary.
            </summary>         
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.SecondaryOnly">
            <summary>
            Only try secondary resource
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.PrimaryThenSecondary">
            <summary>
            First try primary resource and then secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.PrimaryOrSecondary">
            <summary>
            Try either primary or secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.DefaultRead">
            <summary>
            Maps to one of the above types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.DefaultWrite">
            <summary>
            Maps to one of the above types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.WriteAllCopies">
            <summary>
            Used for WriteAllCopies topology.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDataPartitionStatus">
            <summary>
            The enumerator for datapartition status
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreDataPartitionStatus.ReadWrite">
            <summary>
            The datapartition can be written to and read from.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreDataPartitionStatus.ReadOnly">
            <summary>
            The datapartition can only be read from cannot be written to.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFssStatus">
            <summary>
            The Status of a Resource FSS.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFssStatus.NotDeployed">
            <summary>
            The fail safe set (SQL or File) is not deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFssStatus.Deployed">
            <summary>
            The fail safe set (SQL or File) is deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFssStatus.UpOrDowngrading">
            <summary>
            The SQL fail safe set is in progress of being upgraded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFssStatus.MovingData">
            <summary>
            Data is being moved to or from this fail safe set.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSecondaryType">
            <summary>
            Enumeration of different types of secondaries Wmo supports
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.NoSecondaries">
            <summary>
            No Secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.WriteAllCopies">
            <summary>
            Write to all copies. No replication between copies provided
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.SingleMaster">
            <summary>
            Push Replication from Primary to Secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.MultiMaster">
            <summary>
            Push replication from Primary to Secondary and from Secondary to primary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.WARA">
            <summary>
            Write All Read Any 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.Mirroring">
            <summary>
            Mirroring Replication
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSQLFss">
            <summary>
            Gives information about the SQLFSS in the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.ClusterPath">
            <summary>
            Gets the cluster path for the given fss.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.Databases">
            <summary>
            Gets a collection of databases in the Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.PrimaryDB">
            <summary>
            Gets the current primary for this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.DefaultPrimaryDB">
            <summary>
            Gets the default primary database for this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.ManifestUid">
            <summary>
            Gets the manifest UID for this SQLFSS.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.WitnessServer">
            <summary>
            Gets the WitnessServer for this SQLFSS.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.MirroringTimeoutValue">
            <summary>
            Gets the MirroringTimeoutValue for this SQLFSS.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.DatabaseTemplate">
            <summary>
            Gets the DatabaseTemplate for this SQLFSS.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSQLFssCollection">
            <summary>
            The collection of SQL Failsafesets.
            </summary>s
        </member>
        <member name="T:Microsoft.Webstore.Common.WstWorkItem">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.#ctor(System.Threading.WaitCallback)">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstThread">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(System.Threading.WaitCallback)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(Microsoft.Webstore.Common.WstWorkItem)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstThreadPool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxThreads"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            Defaults the state to NULL
            Defaults the timeout to infinite.
            </summary>
            <param name="threadProc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            Defaults the timeout to infinite.
            </summary>
            <param name="threadProc"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object,System.Int32)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            If millisecondsTimeout is reached, returns false, otherwise
            returns true.
            </summary>
            <param name="threadProc"></param>
            <param name="state"></param>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.WstCallback(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.Int32)">
            <summary>
            Returns a thread pool using the passed in value. If the value is less then
            1, DefaultMaximumThreads is used instead.
            </summary>
            <param name="threadCount"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.String)">
            <summary>
            Uses passed in string as a call into the System Centralized settings
            for the value. If the setting is missing, uses the default.
            </summary>
            <param name="centralizedSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.String,System.Int32)">
            <summary>
            Uses passed in string to get the centralized setting for the thread count.
            If the centralized setting does not exist or is less then 1, uses the
            requestedThreads parameter.
            </summary>
            <param name="centralizedSetting"></param>
            <param name="requestedThreads"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetCentralizedSettingOverride(System.String)">
            <summary>
            Returns the Setting that matches the settingEntry name. If the settingEntry does not exist
            in the WebstoreMetaData.WebstoreSettings class, it will return the default from this class.
            </summary>
            <param name="settingEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetSystemAvailableThreads">
            <summary>
            Retrieves the difference between the maximum number of thread pool
            threads, returned by GetMaxThreads, and the number currently active.
            http://msdn2.microsoft.com/en-us/library/system.threading.threadpool.getavailablethreads.aspx
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetSystemMaxThreads">
            <summary>
            Retrieves the number of requests to the thread pool that can be active
            concurrently. All requests above that number remain queued until thread
            pool threads become available.
            http://msdn2.microsoft.com/en-us/library/system.threading.threadpool.getmaxthreads.aspx
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.MaxThreads">
            <summary>
            Property to set or get the maximum number of threads allowed
            for this pool.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.ActiveThreads">
            <summary>
            ActiveThreads are the number of threads in use.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.IsFull">
            <summary>
            Indicates if the pool can accept more processes.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstTrace">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.RefreshTraceSwitches">
            <summary>
            Refreshes the trace switches.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.CreateLogFile(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.WriteLogFileLineIf(System.Boolean,System.Object)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.CloseLogFile">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceError(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceWarning(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceInfo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceVerbose(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceDebug(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.LogExceptionEvent(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="exceptionMsgPrefix"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.LogExceptionEvent(System.String,System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            
            </summary>
            <param name="exceptionMsgPrefix"></param>
            <param name="e"></param>
            <param name="st"></param>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.LogFileName">
            <summary>
            LogFileName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.GeneralTrace">
            <summary>
            GeneralTrace
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.LogFileTrace">
            <summary>
            LogFileTrace
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.WstDisplayVerbose">
            <summary>
            Display verbose message notifications on console
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.AdminToolDisplayVerbose">
            <summary>
            Display verbose message notifications on admin tool
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlStart">
            <summary>
            Trace begin execution of SQL commands on Deployments (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlCompleted">
            <summary>
            Trace execution completed of SQL commands Deployments (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlInfoMessages">
            <summary>
            Trace SQL Info Messages received from SQL Server during cmd execution (like print, etc)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlError">
            <summary>
            Trace errors received from SQL when executing SQL commands on Deployments (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceCfgStart">
            <summary>
            Trace begin execution of SQL commands against Config DBs(true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceCfgCompleted">
            <summary>
            Trace execution completed of SQL commands against Config DBs(true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceCfgError">
            <summary>
            Trace errors received from SQL when executing SQL/WST commands against Config DBs (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceDtcInfo">
            <summary>
            Trace start/end of Distributed Transactions (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceAgentDB">
            <summary>
            Trace WmoSqlAgentDatabase low level database operations
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceAdminLockInfo">
            <summary>
            Trace start/end of Admin Locks (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceAdminLockVerbose">
            <summary>
            Trace more detailed AdminLock information (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceMoveData">
            <summary>
            Trace WstMoveData low level database operations
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstTimer">
            <summary>
            A Timer class based on System.Net.Datatime
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.#ctor">
            <summary>
            WstTimer constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.Start">
            <summary>
            Starts the timer (must be called before Stop()).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.Stop">
            <summary>
            Stops the timer (can be called repeatedly for progressive elapsed time).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.ToString">
            <summary>
            Gets the elapsed time as a string in HH:mm:ss.fff format
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.Ticks">
            <summary>
            Gets the elapsed time as number of Ticks
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.Seconds">
            <summary>
            Gets the elapsed time as number of Seconds
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.Milliseconds">
            <summary>
            Gets the elapsed time as number of Milliseconds
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.ElapsedTime">
            <summary>
            Gets the elapsed time as a System.TimeSpan
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Common.QueryExecute.WspBulkUpdateBatchExpirationInterval(System.Guid,System.String,System.Int32)">
            <summary>
            WspBulkUpdateBatchExpirationInterval
            </summary>
            <param name="statusId"></param>
            <param name="csvBatchIdsStr"></param>
            <param name="heartbeatInterval"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IPartition">
            <summary>
            An IPartition is located on a single machine. If it is a dynamic partition and it has split
            Machine should throw a PartitionException and the JE will call Repartition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IPartition.Repartition">
            <summary>
            Repartition should return a new list of partitions in case of a split
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IPartition.Machine">
            <summary>
            Get the machine where this partition is. May throw PartitionException if the partition is no
            longer on a single machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IPartition.Key">
            <summary>
            The key that uniquely identifies this partition
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IPartitionSet">
            <summary>
            An enumerable set of Ipartition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IPartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            add partition the the partition Set
            </summary>
            <param name="partition">The partition to add</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IPartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            This is called by the JobEngine at regular intervals,to
            get a list of changes since it was called the last time.        
            </summary>
            <param name="addedPartitions">List of added partitions. Null if nothing was added</param>
            <param name="droppedPartitions">List of dropped partitions. Null if nothing was dropped</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IPartitionSet.Count">
            <summary>
            Gets count of partitions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobStep">
            <summary>
            One step of a job - executed sequentially
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            For a job worker, called by the JobAgent.
            This is called by the agent prior to calling the Run function for the worker.
            This gives worker a chance to setup heartbeating thread, and to do other
            initialization activites that might be needed
            </summary>
            <param name="ja">The MBR jobAgent object, to hearbeat with</param>
            <param name="localMachine">this machine</param>
            <param name="location">Location where the worker will run</param>
            <param name="userArgs">The arguments that the user passed</param>
            <param name="batchId">worker identifier. Required for heart beating with JobAgent</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            For a job worker, called by the JobAgent.
            This is the function where the worker writes to job code.
            </summary>
            <param name="inputSet">Set of Input partitions that the worker should work on</param>
            <param name="outputSet">Set of Output partition. This is for future use</param>
            <param name="statusCode">The job run status. 0 = Pass, anything else = job failure. 
            The JobEngine will use this status code to determine if it needs to reschedule this 
            batch of work again.
            </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Add(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Add partitionSet
            </summary>
            <param name="inputSet"></param>
            <param name="outputSet"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Finish">
            <summary>
            Job step finish. Called by the JobEngine on the worker.
            This gives the worker the opportunity to stop the Heart beat 
            thread and do other cleanup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStep.Alive">
            <summary>
            Heartbeat
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStep.AcceptAdd">
            <summary>
            Does this job step accept adding of new partitionset
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobMain">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobMain.Start(System.String,System.Int32,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.String)">
            <summary>
            Implemented by the job implementor (JobCoordinator side)
            JobEngine transfers control by calling Start, where the 
            code creates instance of the Job class and add job steps.
            Also this lets users create their own implementation of
            the IPartitionSet and IPartition and pass to the JobEngine.
            Then the user code on the worker side can typecast to the correct
            type and get a much richer partitionset/partition class, with 
            functionality required for a particular job.
            </summary>
            <param name="jobName">Name of the Job</param>
            <param name="dop">Degree of Parallelism</param>
            <param name="batchOption">Batching option of partition set</param>
            <param name="location">Location where the worker shuld run</param>
            <param name="userArgs">Arguments passed by the user</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.BatchOption">
            <summary>
            Do we batch the work based on the input partitions, the output partitions or not at all?
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.BatchOption.DontBatch">
            <summary>
            DontBatch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.BatchOption.BatchByInput">
            <summary>
            BatchByInput
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.BatchOption.BatchByOutput">
            <summary>
            BatchByOutput 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IMachineSelector">
            <summary>
            Returns an iterator of machines through a machine class - Machines do not have to be returned only once
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IMachineSelector.GetMachines">
            <summary>
            Get the required machine enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.LocationType">
            <summary>
            Determines where the workers are spawned
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.Void">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.MachineClass">
            <summary>
            MachineClass
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.SameAsBatch">
            <summary>
            SameAsBatch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.Local">
            <summary>
            Use Local
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobExecutionStatus">
            <summary>
            Enum used to update job status in db
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Running">
            <summary>
            Job is running
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Pass">
            <summary>
            Job Passed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Fail">
            <summary>
            JobFailed
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector">
            <summary>
            Round robin machine selector class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector.#ctor(System.String,System.Int32)">
            <summary>
            Contsturctor
            </summary>
            <param name="machineClass"></param>
            <param name="machineCount"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector.GetMachines">
            <summary>
            Machines enumbrator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Location">
            <summary>
            A location for the worker
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Location.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Location.CreateLocationWithRandomMachineInClass(System.String,System.Int32)">
            <summary>
            Creates a location for a given machine class
            </summary>
            <param name="machineClass"></param>
            <param name="machineCount"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Location.GetNextMachineInClass">
            <summary>
            Next machine in class
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.Location.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.Location.SameAsBatch">
            <summary>
            SameAsBatch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.Location.Local">
            <summary>
            Local
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Location.LocationType">
            <summary>
            gets location type
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Location.MachineClass">
            <summary>
            Gets the machine class if it has been set
            otherwise null
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.StepType">
            <summary>
            Type of job step
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StepType.MapStep">
            <summary>
            MapStep
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StepType.XProductStep">
            <summary>
            ProductStep
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RetrySettings">
            <summary>
            Max number of retries and delay between retries
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RetrySettings.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RetrySettings.FailoverRetry">
            <summary>
            RetrySettings
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RetrySettings.InfiniteRetry">
            <summary>
            InfiniteRetry
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.RetrySettings.RetryCount">
            <summary>
            Retry count
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.RetrySettings.RetryDelay">
            <summary>
            Retry delay
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionMapping">
            <summary>
            PartitionMapping
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.AssemblyInformation">
            <summary>
            Information about worker assembly
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.AssemblyInformation.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="assemblyName"></param>
            <param name="version"></param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.AssemblyInformation.AssemblyName">
            <summary>
            gets AssemblyName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.AssemblyInformation.Version">
            <summary>
            gets Version
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobStepProperties">
            <summary>
            JobStep properties
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.JobStepType">
            <summary>
            JobType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.BatchOption">
            <summary>
            BatchOptions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.Location">
            <summary>
            Location 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.DOP">
            <summary>
            Degree Of Parallelism
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.PartitionMapping">
            <summary>
            PartitionMapping 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.StepType">
            <summary>
            StepType 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.InputSet">
            <summary>
            IPartitionSet - Input
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.OutputSet">
            <summary>
            IPartitionSet - output
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.RetrySettings">
            <summary>
            RetrySettings 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.UserArgs">
            <summary>
            User given arguments
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.AssemblyInfo">
            <summary>
            AssemblyInformation 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.IsSafeMode">
            <summary>
            IsSafeMode 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJob">
            <summary>
            IJob
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.AddStep(Microsoft.Webstore.JobEngine.IJobStepProperties)">
            <summary>
            Add job step
            </summary>
            <param name="jobStepProperties"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.Run">
            <summary>
            Run
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.Submit(System.AsyncCallback,System.Object)">
            <summary>
            Submit
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJob.JobName">
            <summary>
            Gets the job name
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobEngine">
            <summary>
            IJobEngine
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.RunJob(Microsoft.Webstore.JobEngine.IJob)">
            <summary>
            RunJob
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.IsAlive(System.Int32)">
            <summary>
            IsAlive
            </summary>
            <param name="batchId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the JobAgent to update status (human readable) for
            workers. JobAgent passes the status given to it by workers.
            This status ultimately gets logged to the jobDetails table
            in the jobStatus deployment
            </summary>
            <param name="batchId">JobEngine issued batchId</param>
            <param name="status"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobAgent">
            <summary>
            IJobAgent
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.CreateNewAsyncExecuteBatch(Microsoft.Webstore.JobEngine.IJobEngine,System.String,Microsoft.Webstore.JobEngine.Location,System.Int32,System.String,System.String,System.Version,System.Object,System.Boolean)">
            <summary>
            CreateNewAsyncExecuteBatch
            </summary>
            <param name="je"></param>
            <param name="machine"></param>
            <param name="location"></param>
            <param name="batchId"></param>
            <param name="jobStepTypeFullName"></param>
            <param name="assemblyName"></param>
            <param name="version"></param>
            <param name="userArgs"></param>
            <param name="isSafeMode"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.IsAlive(System.Int32)">
            <summary>
            IsAlive
            </summary>
            <param name="batchId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the worker to update status (human readable)
            This status ultimately gets logged to the jobDetails table
            in the jobStatus deployment
            </summary>
            <param name="batchId">JobAgent issues batchId</param>
            <param name="status"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor">
            <summary>
            IASyncExecuteBatchMonitor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.Finish(System.Int32,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32)">
            <summary>
            Finish
            </summary>
            <param name="batchId"></param>
            <param name="failedSet"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.RenewLease(System.Int32)">
            <summary>
            RenewLease
            </summary>
            <param name="workItemId"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IASyncExecuteBatch">
            <summary>
            IASyncExecuteBatch
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.Start(Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Start
            </summary>
            <param name="partitionSet"></param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.Monitor">
            <summary>
            Monitor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.ExecuteDelegate">
            <summary>
            ExecuteDelegate 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.IsAlive">
            <summary>
            Is the batch alive
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JEException">
            <summary>
            JEException 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobAgentException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="errorCode"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="errorCode"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="errorCode"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobAgentException.ErrorCode">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionException">
            <summary>
            PartitionException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JETrackingHandler">
            <summary>
            This class is required for workaround on how .net remoting works.
            When we move to WCF, we should not require it.
            Right now are making sure that if we are trying to create an 
            ObjRef for the JE object, we only pass the tcp channel data across.
            We found this bug when WstAgent used JE. WstAgent registers a custom
            channel and was causing issues, as creating of objRef was putting 
            the custom channel data, and that data was not present on the JobAgent
            side, thus resulting in an Exception on the JobAgent side.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.LocalJobAgent.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the worker to update status (human readable)
            This status ultimately gets logged to the jobDetails table
            in the jobStatus deployment
            </summary>
            <param name="batchId">JobAgent issues batchId</param>
            <param name="status"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JE">
            <summary>
            JobEngine class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.InitializeLifetimeService">
            <summary>
            Make the JE lease eternal so that the remoting server doesn't get GCed
            </summary>
            <returns></returns>
            
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.RunJob(Microsoft.Webstore.JobEngine.IJob)">
            <summary>
            RunJob
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.IsAlive(System.Int32)">
            <summary>
            IsAlive-heartbeat
            </summary>
            <param name="batchId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the JobAgent to update status (human readable) for
            workers. JobAgent passes the status given to it by workers.
            This status ultimately gets logged to the jobDetails table
            in the jobStatus deployment
            </summary>
            <param name="batchId">JobEngine issued batchId</param>
            <param name="status"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.CreateNewAsyncExecuteBatch(System.String,Microsoft.Webstore.JobEngine.IJobStepProperties,System.Int32,System.String@)">
            <summary>
            Creates new asyncexecute batch
            </summary>
            <param name="machine"></param>
            <param name="jobStepProperties"></param>
            <param name="batchId"></param>
            <param name="workerMachine"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.CreateRunner(Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.IJobStepProperties,Microsoft.Webstore.JobEngine.JobPartitionMapping)">
            <summary>
            Create a runner based on the batching option. The runner knows how to execute a step
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.RunProduct(System.String,Microsoft.Webstore.JobEngine.IJobStepProperties,Microsoft.Webstore.JobEngine.JobPartitionMapping)">
            <summary>
            Run the step - basically compose a Retry policy with a Batching policy. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.ParseArgsAndStart(System.String[],Microsoft.Webstore.JobEngine.JE.Start)">
            <summary>
            Parse the command line arguments that were passed by the Job Service then call the Start function
            </summary>
            <param name="args"></param>
            <param name="startFunc"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JE.Singleton">
            <summary>
            Job Engine singleton instance
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JE.Start">
            <summary>
            The start function delegate
            </summary>
            <param name="jobName"></param>
            <param name="dop"></param>
            <param name="batchOption"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RunParams">
            <summary>
            RunParams struct
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RunParams.inputSet">
            <summary>
            InputSet
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RunParams.outputSet">
            <summary>
            output set
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RunParams.Null">
            <summary>
            Null run param
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RunOneStep.ExecuteStepForBatch(System.String,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            Get a worker - Initialize it, call Run() on it and finalize it.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RunOneStepByInput">
            <summary>
            The difference between the two RunOneStep is whether we batch by input or by output. 
            If we batch by input, we slice the input partition sets by machine and we send the output partition set unchanged
            set as is to the workers. If we batch by output, it is the other way round.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobStepProperties">
            <summary>
            Impelements the IJobStepProperties
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.#ctor(System.Type,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.Int32,Microsoft.Webstore.JobEngine.StepType,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Constructor
            </summary>
            <param name="jobStepType"></param>
            <param name="batchOption"></param>
            <param name="location"></param>
            <param name="DOP"></param>
            <param name="stepType"></param>
            <param name="inputSet"></param>
            <param name="outputSet"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.#ctor(System.Type,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.Int32,Microsoft.Webstore.JobEngine.StepType,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.AssemblyInformation)">
            <summary>
            Constructor
            </summary>
            <param name="jobStepType"></param>
            <param name="batchOption"></param>
            <param name="location"></param>
            <param name="DOP"></param>
            <param name="stepType"></param>
            <param name="inputSet"></param>
            <param name="outputSet"></param>
            <param name="assemblyInformation"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.SetRetryCount(Microsoft.Webstore.JobEngine.RetrySettings)">
            <summary>
            Sets retry count
            </summary>
            <param name="retrySettings"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.SetPartitionMapping(Microsoft.Webstore.JobEngine.PartitionMapping)">
            <summary>
            Sets PartitionMapping
            </summary>
            <param name="partitionMappingFunc"></param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.JobStepType">
            <summary>
            Gets JobStepType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.BatchOption">
            <summary>
            Gets BatchOption
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.Location">
            <summary>
            Gets Location
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.DOP">
            <summary>
            Gets Degree of Parallelism
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.PartitionMapping">
            <summary>
            Gets PartitionMapping 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.StepType">
            <summary>
            Gets StepType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.InputSet">
            <summary>
            Gets InputSet
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.OutputSet">
            <summary>
            Get/Set output set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.RetrySettings">
            <summary>
            Get/Set retry settings
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.UserArgs">
            <summary>
            Get/Set user args
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.AssemblyInfo">
            <summary>
            Gets worker assembly information
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.IsSafeMode">
            <summary>
            IsSafeMode: Should the worker be started in seperate app domain
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Job">
            <summary>
            Implements the IJob interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.#ctor(System.String)">
            <summary>
            contstructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.AddStep(Microsoft.Webstore.JobEngine.IJobStepProperties)">
            <summary>
            AddStep
            </summary>
            <param name="jobStepProperties"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.Run">
            <summary>
            Run job
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.Submit(System.AsyncCallback,System.Object)">
            <summary>
            Submit async job
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Job.JobName">
            <summary>
            Gets the job name
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobStepWorker">
            <summary>
            JobStepWorker is the base class from which a worker should derive from.
            It has the implementation of the keep alive timer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.InitializeLifetimeService">
            <summary>
            Make the JE lease eternal so that the remoting server doesn't get GCed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.InitWorker(Microsoft.Webstore.JobEngine.IJobAgent,System.String)">
            <summary>
            Start the timer which pings the JE
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.StopWorker">
            <summary>
            Stop the timer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.UpdateStatus(System.String)">
            <summary>
            Updates the worker status with the JobAgent
            </summary>
            <param name="workerStatus"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Int32)">
            <summary>
            init the step worker
            </summary>
            <param name="je"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.Finish">
            <summary>
            Work finish
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.Add(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            add partition set
            </summary>
            <param name="inputSet"></param>
            <param name="outputSet"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.Aborted">
            <summary>
            IsAborted
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.LocalMachine">
            <summary>
            LocalMachine name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.BatchId">
            <summary>
            batch id
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.Alive">
            <summary>
            Heartbeat
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.AcceptAdd">
            <summary>
            accepts add partition or not
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachineInfo">
            <summary>
            Represents a machine in the Autopilon environment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.#ctor(System.String,System.Net.IPAddress,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="IP"></param>
            <param name="type"></param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.Name">
            <summary>
            Gets or sets the name of the machine.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.IP">
             <summary>
            Gets or sets the IP of the machine. 
             </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.Type">
            <summary>
            Gets or sets the Type of the machine. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachineSet">
            <summary>
            Adding twice the same machine to the set does not make a new entry.
            Note that the hash table is not serialized - so this guarantee does not stand once the
            set is sent across the wire
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionSet`1">
            <summary>
            PartitionSet class
            </summary>
            <typeparam name="Partition"></typeparam>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.#ctor">
            <summary>
            PartitionSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add
            </summary>
            <param name="partition"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Refresh partition set
            </summary>
            <param name="addedPartitions"></param>
            <param name="droppedPartitions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.Contains(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Equality based on IPartition.Key
            </summary>
            <param name="partition"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.PartitionSet`1.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.PartitionSet`1.Item(System.Int32)">
            <summary>
            Indexor
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineSet.#ctor">
            <summary>
            MachineSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add
            </summary>
            <param name="partition"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachinePartition">
            <summary>
            MachinePartition 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.Repartition">
            <summary>
            Repartition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.#ctor(System.String)">
            <summary>
            MachinePartition
            </summary>
            <param name="machine"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.Machine">
            <summary>
            Machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition">
            <summary>
            MachineIPPartition 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition.#ctor(Microsoft.Webstore.JobEngine.Partitions.MachineInfo)">
            <summary>
            MachineIPPartition 
            </summary>
            <param name="mi"></param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition.IP">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet">
            <summary>
            WebstoreSqlPartitionSet 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.#ctor(System.String)">
            <summary>
            RoleBasedMachinePartitionSet
            </summary>
            <param name="serverRoleName"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.Init">
            <summary>
            Init
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add
            </summary>
            <param name="partition"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Refresh
            </summary>
            <param name="addedPartitions"></param>
            <param name="droppedPartitions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition">
            <summary>
            RoleBasedMachinePartition 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.Repartition">
            <summary>
            Repartition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.#ctor(System.String,System.String)">
            <summary>
            RoleBasedMachinePartition
            </summary>
            <param name="machine"></param>
            <param name="serverRole"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.Machine">
            <summary>
            Machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.ServerRole">
            <summary>
            Gets the serverRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ExecuteDelegate">
            <summary>
            Execute delegate
            </summary>
            <param name="partitionSet"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ExecuteBatchDelegate">
            <summary>
            Execute batch delegate
            </summary>
            <param name="machine"></param>
            <param name="partitionSet"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ASyncExecuteBatch">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.#ctor(System.String,Microsoft.Webstore.JobEngine.IJobStep,System.Int32)">
            <summary>
            ASyncExecuteBatch ()
            </summary>
            <param name="machine"></param>
            <param name="jobStep"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.Start(Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Start
            </summary>
            <param name="partitionSet"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.ThreadStart">
            <summary>
            ThreadStart
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.Monitor">
            <summary>
            Monitor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.ExecuteDelegate">
            <summary>
            Execute delegate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.IsAlive">
            <summary>
            IsAlive
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionQueue">
            <summary>
            PartitionQueue
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionQueue.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Webstore.JobEngine.IPartition})">
            <summary>
            PartitionQueue
            </summary>
            <param name="partitionSet"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionQueue.GetNext">
            <summary>
            GetNext
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.WorkDescription.RenewLease">
            <summary>
            RenewLease
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.WorkDescription.IsAlive">
            <summary>
            IsAlive
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.BatchExecuteMonitor.InitializeLifetimeService">
            <summary>
            Make the JE lease eternal so that the remoting server doesn't get GCed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ExecutionPool.StartWork">
            <summary>
            After workitems have been submitted, this fn
            is responsible to start the job workers and
            wait till they all finish. In the mean time if
            there are failures, this function reschedules the failed
            items.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.CannotCreateRemoteBatch">
            <summary>
            The AsyncExecuteBatch returned null. It could not be created on remote machine
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.UnknownJobRunFailure">
            <summary>
            The jobStep.Run() threw exception. 
            Enable tracing to get more details. Also check NT events
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AsyncExecuteBatchFailed">
            <summary>
            Failure in AsyncExecuteBatch::ThreadStart function. 
            Look at NT events for details
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.HeartBeatFailure">
            <summary>
            Heartbeat failure for this batchID
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AbortActiveWorkItemsRetryExceeded">
            <summary>
            Aborting workItem as retry count exceeded
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AbortActiveWorkItemsToAddPartitions">
            <summary>
            Aborting workItems to add partition to existing batch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AbortActiveWorkItemsPartitionDropped">
            <summary>
            Aborting work item as partition has been dropped
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.NoWorkItemsSubmitted">
            <summary>
            Job could not complete as no work items were submitted.
            This can be caused because jobworkers were being tried 
            to be scheduled on machines that are in different DataCenter
            from that of the JobCoordinator.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ThreadPoolThrottle">
            <summary>
            A wrapper around the System Thread Pool. We place a semaphore so that we can limit the number of
            work items
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.#ctor(System.Int32)">
            <summary>
            ThreadPoolThrottle
            </summary>
            <param name="maximumAllowed"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            QueueUserWorkItem
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            QueueUserWorkItem
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JCArguments">
            <summary>
            JCArguments
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JCArguments.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.Dop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobBatchOption">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobLocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.UserArguments">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobAssemblyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.MachineClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.NumberOfMachines">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.RetryCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.RetryInterval">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet">
            <summary>
            WebstoreSqlPartitionSet 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.#ctor(System.String)">
            <summary>
            WebstoreSqlPartitionSet 
            </summary>
            <param name="deploymentName"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.Init">
            <summary>
            Init
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add
            </summary>
            <param name="partition"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Refresh
            </summary>
            <param name="addedPartitions"></param>
            <param name="droppedPartitions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition">
            <summary>
            WebstoreSqlPartition 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.#ctor(System.String,System.Int32,System.String)">
            <summary>
            WebstoreSqlPartition
            </summary>
            <param name="deploymentName"></param>
            <param name="fssId"></param>
            <param name="machine"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Repartition">
            <summary>
            Repartition
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.SqlFss">
            <summary>
            SqlFss
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Machine">
            <summary>
            Machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Database">
            <summary>
            Database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet">
            <summary>
            WebstoreSqlPartitionSet 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.#ctor(System.String)">
            <summary>
            WebstoreFileSharePartitionSet
            </summary>
            <param name="deploymentName"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.Init">
            <summary>
            Init
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add
            </summary>
            <param name="partition"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Refresh
            </summary>
            <param name="addedPartitions"></param>
            <param name="droppedPartitions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition">
            <summary>
            WebstoreSqlPartition 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.#ctor(System.String,System.Int32,System.String)">
            <summary>
            WebstoreSqlPartition
            </summary>
            <param name="deploymentName"></param>
            <param name="fssId"></param>
            <param name="machine"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Repartition">
            <summary>
            Repartition
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.FileFss">
            <summary>
            SqlFss
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Machine">
            <summary>
            Machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Share">
            <summary>
            Database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstClientCategoryInstaller">
            <summary>
            Category installer for the WstClient event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstClientCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstClientEvents">
            <summary>
            Events in the WstClient module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstClientEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstClientEvents.UnexpectedRecoverableExceptionValue">
            <summary>
            EventDefinition for UnexpectedRecoverableException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.LogUnexpectedRecoverableException(System.String,System.String)">
            <summary>
            Method to log an event of type UnexpectedRecoverableException.
            </summary>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="exceptionStack">Argument exceptionStack for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.LogUnexpectedRecoverableException(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UnexpectedRecoverableException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="exceptionStack">Argument exceptionStack for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstClientEvents.UnexpectedFatalExceptionValue">
            <summary>
            EventDefinition for UnexpectedFatalException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.LogUnexpectedFatalException(System.String,System.String)">
            <summary>
            Method to log an event of type UnexpectedFatalException.
            </summary>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="exceptionStack">Argument exceptionStack for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.LogUnexpectedFatalException(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UnexpectedFatalException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="exceptionStack">Argument exceptionStack for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstClientEvents.UnexpectedRecoverableErrorValue">
            <summary>
            EventDefinition for UnexpectedRecoverableError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.LogUnexpectedRecoverableError(System.String,System.String)">
            <summary>
            Method to log an event of type UnexpectedRecoverableError.
            </summary>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
            <param name="errorStack">Argument errorStack for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.LogUnexpectedRecoverableError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UnexpectedRecoverableError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
            <param name="errorStack">Argument errorStack for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstClientEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstClientEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstClientEvents.UnexpectedRecoverableException">
            <summary>
              Gets the EventDefinition for the UnexpectedRecoverableException.
            </summary>
            <value>The EventDefinition for the UnexpectedRecoverableException</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstClientEvents.UnexpectedFatalException">
            <summary>
              Gets the EventDefinition for the UnexpectedFatalException.
            </summary>
            <value>The EventDefinition for the UnexpectedFatalException</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstClientEvents.UnexpectedRecoverableError">
            <summary>
              Gets the EventDefinition for the UnexpectedRecoverableError.
            </summary>
            <value>The EventDefinition for the UnexpectedRecoverableError</value>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ThrottlingCategoryInstaller">
            <summary>
            Category installer for the Throttling event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ThrottlingEvents">
            <summary>
            Events in the Throttling module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestIncrementAttemptValue">
            <summary>
            EventDefinition for MaxConcurrentRequestIncrementAttempt
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestIncrementAttempt(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncrementAttempt.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestIncrementAttempt(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncrementAttempt with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestIncrementedValue">
            <summary>
            EventDefinition for MaxConcurrentRequestIncremented
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestIncremented(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncremented.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestIncremented(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncremented with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestIncrementDeniedDueToBadLatencyValue">
            <summary>
            EventDefinition for MaxConcurrentRequestIncrementDeniedDueToBadLatency
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestIncrementDeniedDueToBadLatency(System.String,System.String,System.Int32,System.Int32,System.DateTime)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncrementDeniedDueToBadLatency.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="percentBadRequest">Argument percentBadRequest for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestIncrementDeniedDueToBadLatency(System.String,System.String,System.Int32,System.Int32,System.DateTime,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncrementDeniedDueToBadLatency with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="percentBadRequest">Argument percentBadRequest for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestDeniedDueToMaxPoolSizeValue">
            <summary>
            EventDefinition for MaxConcurrentRequestDeniedDueToMaxPoolSize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestDeniedDueToMaxPoolSize(System.String,System.String,System.Int32,System.Int32,System.Int32,System.DateTime)">
            <summary>
            Method to log an event of type MaxConcurrentRequestDeniedDueToMaxPoolSize.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="maxPoolSize">Argument maxPoolSize for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestDeniedDueToMaxPoolSize(System.String,System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestDeniedDueToMaxPoolSize with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="maxPoolSize">Argument maxPoolSize for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestDeniedDueToMinumumGrowthPeriodValue">
            <summary>
            EventDefinition for MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestDeniedDueToMinumumGrowthPeriod(System.String,System.String,System.Int32,System.Int32,System.DateTime)">
            <summary>
            Method to log an event of type MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestDeniedDueToMinumumGrowthPeriod(System.String,System.String,System.Int32,System.Int32,System.DateTime,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.RequestDeniedDueToThrottlingValue">
            <summary>
            EventDefinition for RequestDeniedDueToThrottling
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogRequestDeniedDueToThrottling(System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Method to log an event of type RequestDeniedDueToThrottling.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogRequestDeniedDueToThrottling(System.String,System.String,System.Int32,System.DateTime,System.Exception)">
            <summary>
            Method to log an event of type RequestDeniedDueToThrottling with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestLimitReductionAttemptValue">
            <summary>
            EventDefinition for MaxConcurrentRequestLimitReductionAttempt
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestLimitReductionAttempt(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReductionAttempt.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="maxCRL">Argument maxCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="backgroundThreadSleepTime">Argument backgroundThreadSleepTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestLimitReductionAttempt(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReductionAttempt with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="maxCRL">Argument maxCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="backgroundThreadSleepTime">Argument backgroundThreadSleepTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestLimitReductionValue">
            <summary>
            EventDefinition for MaxConcurrentRequestLimitReduction
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestLimitReduction(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Single,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReduction.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMaxCRL">Argument oldMaxCRL for formatting the event text.</param>
            <param name="newMaxCRL">Argument newMaxCRL for formatting the event text.</param>
            <param name="reason">Argument reason for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="percentBadRequest">Argument percentBadRequest for formatting the event text.</param>
            <param name="concurrencyLimitDelta">Argument concurrencyLimitDelta for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestLimitReduction(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Single,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReduction with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMaxCRL">Argument oldMaxCRL for formatting the event text.</param>
            <param name="newMaxCRL">Argument newMaxCRL for formatting the event text.</param>
            <param name="reason">Argument reason for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="percentBadRequest">Argument percentBadRequest for formatting the event text.</param>
            <param name="concurrencyLimitDelta">Argument concurrencyLimitDelta for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestLimitReductionToMinumumValue">
            <summary>
            EventDefinition for MaxConcurrentRequestLimitReductionToMinumum
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestLimitReductionToMinumum(System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReductionToMinumum.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="minumumValue">Argument minumumValue for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestLimitReductionToMinumum(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReductionToMinumum with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="minumumValue">Argument minumumValue for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.ResettingThrottlingCountersValue">
            <summary>
            EventDefinition for ResettingThrottlingCounters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogResettingThrottlingCounters(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32)">
            <summary>
            Method to log an event of type ResettingThrottlingCounters.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="maxCRL">Argument maxCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="backgroundThreadSleepTime">Argument backgroundThreadSleepTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogResettingThrottlingCounters(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type ResettingThrottlingCounters with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="maxCRL">Argument maxCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="backgroundThreadSleepTime">Argument backgroundThreadSleepTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.ScaleBackingExceptionValue">
            <summary>
            EventDefinition for ScaleBackingException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogScaleBackingException">
            <summary>
            Method to log an event of type ScaleBackingException.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogScaleBackingException(System.Exception)">
            <summary>
            Method to log an event of type ScaleBackingException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.QueueSizeCapacityRatioLimitReachedValue">
            <summary>
            EventDefinition for QueueSizeCapacityRatioLimitReached
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogQueueSizeCapacityRatioLimitReached(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method to log an event of type QueueSizeCapacityRatioLimitReached.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="queueSize">Argument queueSize for formatting the event text.</param>
            <param name="queuCapacity">Argument queuCapacity for formatting the event text.</param>
            <param name="queueWarningRatio">Argument queueWarningRatio for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogQueueSizeCapacityRatioLimitReached(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type QueueSizeCapacityRatioLimitReached with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="queueSize">Argument queueSize for formatting the event text.</param>
            <param name="queuCapacity">Argument queuCapacity for formatting the event text.</param>
            <param name="queueWarningRatio">Argument queueWarningRatio for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.QueueCapacityReachedValue">
            <summary>
            EventDefinition for QueueCapacityReached
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogQueueCapacityReached(System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type QueueCapacityReached.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="queuCapacity">Argument queuCapacity for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogQueueCapacityReached(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type QueueCapacityReached with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="queuCapacity">Argument queuCapacity for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestIncrementAttempt">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestIncrementAttempt.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestIncrementAttempt</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestIncremented">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestIncremented.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestIncremented</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestIncrementDeniedDueToBadLatency">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestIncrementDeniedDueToBadLatency.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestIncrementDeniedDueToBadLatency</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestDeniedDueToMaxPoolSize">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestDeniedDueToMaxPoolSize.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestDeniedDueToMaxPoolSize</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.RequestDeniedDueToThrottling">
            <summary>
              Gets the EventDefinition for the RequestDeniedDueToThrottling.
            </summary>
            <value>The EventDefinition for the RequestDeniedDueToThrottling</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestLimitReductionAttempt">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestLimitReductionAttempt.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestLimitReductionAttempt</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestLimitReduction">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestLimitReduction.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestLimitReduction</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestLimitReductionToMinumum">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestLimitReductionToMinumum.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestLimitReductionToMinumum</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.ResettingThrottlingCounters">
            <summary>
              Gets the EventDefinition for the ResettingThrottlingCounters.
            </summary>
            <value>The EventDefinition for the ResettingThrottlingCounters</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.ScaleBackingException">
            <summary>
              Gets the EventDefinition for the ScaleBackingException.
            </summary>
            <value>The EventDefinition for the ScaleBackingException</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.QueueSizeCapacityRatioLimitReached">
            <summary>
              Gets the EventDefinition for the QueueSizeCapacityRatioLimitReached.
            </summary>
            <value>The EventDefinition for the QueueSizeCapacityRatioLimitReached</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.QueueCapacityReached">
            <summary>
              Gets the EventDefinition for the QueueCapacityReached.
            </summary>
            <value>The EventDefinition for the QueueCapacityReached</value>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.BlacklistingCategoryInstaller">
            <summary>
            Category installer for the Blacklisting event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.BlacklistingEvents">
            <summary>
            Events in the Blacklisting module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.ResourceBlacklistedValue">
            <summary>
            EventDefinition for ResourceBlacklisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogResourceBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type ResourceBlacklisted.
            </summary>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogResourceBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ResourceBlacklisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.IpUnBlacklistedValue">
            <summary>
            EventDefinition for IpUnBlacklisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogIpUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Double)">
            <summary>
            Method to log an event of type IpUnBlacklisted.
            </summary>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogIpUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Double,System.Exception)">
            <summary>
            Method to log an event of type IpUnBlacklisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.ResourceUnBlacklistedValue">
            <summary>
            EventDefinition for ResourceUnBlacklisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogResourceUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.Double)">
            <summary>
            Method to log an event of type ResourceUnBlacklisted.
            </summary>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogResourceUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.Double,System.Exception)">
            <summary>
            Method to log an event of type ResourceUnBlacklisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.ResourceCannotBeUnBlacklistedValue">
            <summary>
            EventDefinition for ResourceCannotBeUnBlacklisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogResourceCannotBeUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.Double)">
            <summary>
            Method to log an event of type ResourceCannotBeUnBlacklisted.
            </summary>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogResourceCannotBeUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.Double,System.Exception)">
            <summary>
            Method to log an event of type ResourceCannotBeUnBlacklisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.UnblacklistingExceptionValue">
            <summary>
            EventDefinition for UnblacklistingException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogUnblacklistingException">
            <summary>
            Method to log an event of type UnblacklistingException.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogUnblacklistingException(System.Exception)">
            <summary>
            Method to log an event of type UnblacklistingException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.SyncingDataStructureValue">
            <summary>
            EventDefinition for SyncingDataStructure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogSyncingDataStructure">
            <summary>
            Method to log an event of type SyncingDataStructure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogSyncingDataStructure(System.Exception)">
            <summary>
            Method to log an event of type SyncingDataStructure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.IpCannotBeUnBlacklistedValue">
            <summary>
            EventDefinition for IpCannotBeUnBlacklisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogIpCannotBeUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Double)">
            <summary>
            Method to log an event of type IpCannotBeUnBlacklisted.
            </summary>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogIpCannotBeUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Double,System.Exception)">
            <summary>
            Method to log an event of type IpCannotBeUnBlacklisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.ResourceBlacklisted">
            <summary>
              Gets the EventDefinition for the ResourceBlacklisted.
            </summary>
            <value>The EventDefinition for the ResourceBlacklisted</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.IpUnBlacklisted">
            <summary>
              Gets the EventDefinition for the IpUnBlacklisted.
            </summary>
            <value>The EventDefinition for the IpUnBlacklisted</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.ResourceUnBlacklisted">
            <summary>
              Gets the EventDefinition for the ResourceUnBlacklisted.
            </summary>
            <value>The EventDefinition for the ResourceUnBlacklisted</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.ResourceCannotBeUnBlacklisted">
            <summary>
              Gets the EventDefinition for the ResourceCannotBeUnBlacklisted.
            </summary>
            <value>The EventDefinition for the ResourceCannotBeUnBlacklisted</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.UnblacklistingException">
            <summary>
              Gets the EventDefinition for the UnblacklistingException.
            </summary>
            <value>The EventDefinition for the UnblacklistingException</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.SyncingDataStructure">
            <summary>
              Gets the EventDefinition for the SyncingDataStructure.
            </summary>
            <value>The EventDefinition for the SyncingDataStructure</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.IpCannotBeUnBlacklisted">
            <summary>
              Gets the EventDefinition for the IpCannotBeUnBlacklisted.
            </summary>
            <value>The EventDefinition for the IpCannotBeUnBlacklisted</value>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ExecutionEngineCategoryInstaller">
            <summary>
            Category installer for the ExecutionEngine event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ExecutionEngineCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ExecutionEngineEvents">
            <summary>
            Events in the ExecutionEngine module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ExecutionEngineEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ExecutionEngineEvents.SqlCommandErrorValue">
            <summary>
            EventDefinition for SqlCommandError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.LogSqlCommandError(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type SqlCommandError.
            </summary>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="errorInfo">Argument errorInfo for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.LogSqlCommandError(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type SqlCommandError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="errorInfo">Argument errorInfo for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ExecutionEngineEvents.FileCommandErrorValue">
            <summary>
            EventDefinition for FileCommandError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.LogFileCommandError(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type FileCommandError.
            </summary>
            <param name="path">Argument path for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="errorInfo">Argument errorInfo for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.LogFileCommandError(System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FileCommandError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="path">Argument path for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="errorInfo">Argument errorInfo for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ExecutionEngineEvents.BadPoolCommandErrorValue">
            <summary>
            EventDefinition for BadPoolCommandError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.LogBadPoolCommandError(System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type BadPoolCommandError.
            </summary>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="numberOfRetries">Argument numberOfRetries for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.LogBadPoolCommandError(System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type BadPoolCommandError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="numberOfRetries">Argument numberOfRetries for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ExecutionEngineEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ExecutionEngineEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ExecutionEngineEvents.SqlCommandError">
            <summary>
              Gets the EventDefinition for the SqlCommandError.
            </summary>
            <value>The EventDefinition for the SqlCommandError</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ExecutionEngineEvents.FileCommandError">
            <summary>
              Gets the EventDefinition for the FileCommandError.
            </summary>
            <value>The EventDefinition for the FileCommandError</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ExecutionEngineEvents.BadPoolCommandError">
            <summary>
              Gets the EventDefinition for the BadPoolCommandError.
            </summary>
            <value>The EventDefinition for the BadPoolCommandError</value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMetadataCategoryInstaller">
            <summary>
            Category installer for the WebstoreMetadata event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMetadataEvents">
            <summary>
            Events in the WebstoreMetadata module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.CachedConfigurationExpiredValue">
            <summary>
            EventDefinition for CachedConfigurationExpired
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogCachedConfigurationExpired(System.String,System.Double,System.Double)">
            <summary>
            Method to log an event of type CachedConfigurationExpired.
            </summary>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="processingTime">Argument processingTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogCachedConfigurationExpired(System.String,System.Double,System.Double,System.Exception)">
            <summary>
            Method to log an event of type CachedConfigurationExpired with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="processingTime">Argument processingTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.ConfigurationRenewedValue">
            <summary>
            EventDefinition for ConfigurationRenewed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogConfigurationRenewed(System.String,System.Double)">
            <summary>
            Method to log an event of type ConfigurationRenewed.
            </summary>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogConfigurationRenewed(System.String,System.Double,System.Exception)">
            <summary>
            Method to log an event of type ConfigurationRenewed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstConfigPollingErrorValue">
            <summary>
            EventDefinition for WstConfigPollingError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstConfigPollingError(System.String)">
            <summary>
            Method to log an event of type WstConfigPollingError.
            </summary>
            <param name="depName">Argument depName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstConfigPollingError(System.String,System.Exception)">
            <summary>
            Method to log an event of type WstConfigPollingError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="depName">Argument depName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstConfigExecuteErrorValue">
            <summary>
            EventDefinition for WstConfigExecuteError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstConfigExecuteError(System.String)">
            <summary>
            Method to log an event of type WstConfigExecuteError.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstConfigExecuteError(System.String,System.Exception)">
            <summary>
            Method to log an event of type WstConfigExecuteError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstSkipConfigInformationValue">
            <summary>
            EventDefinition for WstSkipConfigInformation
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstSkipConfigInformation(System.String,System.String)">
            <summary>
            Method to log an event of type WstSkipConfigInformation.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="reason">Argument reason for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstSkipConfigInformation(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type WstSkipConfigInformation with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="reason">Argument reason for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstRuntimeEventsConfigFileErrorValue">
            <summary>
            EventDefinition for WstRuntimeEventsConfigFileError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstRuntimeEventsConfigFileError(System.String)">
            <summary>
            Method to log an event of type WstRuntimeEventsConfigFileError.
            </summary>
            <param name="configFileFullPath">Argument configFileFullPath for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstRuntimeEventsConfigFileError(System.String,System.Exception)">
            <summary>
            Method to log an event of type WstRuntimeEventsConfigFileError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="configFileFullPath">Argument configFileFullPath for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstRuntimeConfigFileUpdateErrorValue">
            <summary>
            EventDefinition for WstRuntimeConfigFileUpdateError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstRuntimeConfigFileUpdateError">
            <summary>
            Method to log an event of type WstRuntimeConfigFileUpdateError.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstRuntimeConfigFileUpdateError(System.Exception)">
            <summary>
            Method to log an event of type WstRuntimeConfigFileUpdateError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstAppConfigurationRenewedValue">
            <summary>
            EventDefinition for WstAppConfigurationRenewed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstAppConfigurationRenewed(System.String)">
            <summary>
            Method to log an event of type WstAppConfigurationRenewed.
            </summary>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstAppConfigurationRenewed(System.String,System.Exception)">
            <summary>
            Method to log an event of type WstAppConfigurationRenewed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstEventHandlerErrorValue">
            <summary>
            EventDefinition for WstEventHandlerError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstEventHandlerError">
            <summary>
            Method to log an event of type WstEventHandlerError.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstEventHandlerError(System.Exception)">
            <summary>
            Method to log an event of type WstEventHandlerError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.CachedConfigurationExpired">
            <summary>
              Gets the EventDefinition for the CachedConfigurationExpired.
            </summary>
            <value>The EventDefinition for the CachedConfigurationExpired</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.ConfigurationRenewed">
            <summary>
              Gets the EventDefinition for the ConfigurationRenewed.
            </summary>
            <value>The EventDefinition for the ConfigurationRenewed</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstConfigPollingError">
            <summary>
              Gets the EventDefinition for the WstConfigPollingError.
            </summary>
            <value>The EventDefinition for the WstConfigPollingError</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstConfigExecuteError">
            <summary>
              Gets the EventDefinition for the WstConfigExecuteError.
            </summary>
            <value>The EventDefinition for the WstConfigExecuteError</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstSkipConfigInformation">
            <summary>
              Gets the EventDefinition for the WstSkipConfigInformation.
            </summary>
            <value>The EventDefinition for the WstSkipConfigInformation</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstRuntimeEventsConfigFileError">
            <summary>
              Gets the EventDefinition for the WstRuntimeEventsConfigFileError.
            </summary>
            <value>The EventDefinition for the WstRuntimeEventsConfigFileError</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstRuntimeConfigFileUpdateError">
            <summary>
              Gets the EventDefinition for the WstRuntimeConfigFileUpdateError.
            </summary>
            <value>The EventDefinition for the WstRuntimeConfigFileUpdateError</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstAppConfigurationRenewed">
            <summary>
              Gets the EventDefinition for the WstAppConfigurationRenewed.
            </summary>
            <value>The EventDefinition for the WstAppConfigurationRenewed</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstEventHandlerError">
            <summary>
              Gets the EventDefinition for the WstEventHandlerError.
            </summary>
            <value>The EventDefinition for the WstEventHandlerError</value>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkEngineCategoryInstaller">
            <summary>
            Category installer for the JobFramework event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents">
            <summary>
            Events in the JobFrameworkEngine module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobStatusUpdateFailedValue">
            <summary>
            EventDefinition for JobStatusUpdateFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobStatusUpdateFailed">
            <summary>
            Method to log an event of type JobStatusUpdateFailed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobStatusUpdateFailed(System.Exception)">
            <summary>
            Method to log an event of type JobStatusUpdateFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.AsyncExecuteBatchErrorValue">
            <summary>
            EventDefinition for AsyncExecuteBatchError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogAsyncExecuteBatchError">
            <summary>
            Method to log an event of type AsyncExecuteBatchError.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogAsyncExecuteBatchError(System.Exception)">
            <summary>
            Method to log an event of type AsyncExecuteBatchError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.AgentContactFailedValue">
            <summary>
            EventDefinition for AgentContactFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogAgentContactFailed(System.String)">
            <summary>
            Method to log an event of type AgentContactFailed.
            </summary>
            <param name="url">Argument url for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogAgentContactFailed(System.String,System.Exception)">
            <summary>
            Method to log an event of type AgentContactFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="url">Argument url for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerConnectionFailedValue">
            <summary>
            EventDefinition for WorkerConnectionFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerConnectionFailed(System.String)">
            <summary>
            Method to log an event of type WorkerConnectionFailed.
            </summary>
            <param name="machine">Argument machine for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerConnectionFailed(System.String,System.Exception)">
            <summary>
            Method to log an event of type WorkerConnectionFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="machine">Argument machine for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerAbortConditionRaisedValue">
            <summary>
            EventDefinition for WorkerAbortConditionRaised
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerAbortConditionRaised">
            <summary>
            Method to log an event of type WorkerAbortConditionRaised.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerAbortConditionRaised(System.Exception)">
            <summary>
            Method to log an event of type WorkerAbortConditionRaised with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobRunFailureValue">
            <summary>
            EventDefinition for JobRunFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobRunFailure">
            <summary>
            Method to log an event of type JobRunFailure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobRunFailure(System.Exception)">
            <summary>
            Method to log an event of type JobRunFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerHeartBeatFailureValue">
            <summary>
            EventDefinition for WorkerHeartBeatFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerHeartBeatFailure(System.Int32)">
            <summary>
            Method to log an event of type WorkerHeartBeatFailure.
            </summary>
            <param name="batchId">Argument batchId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerHeartBeatFailure(System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WorkerHeartBeatFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.NoWorkItemsSubmittedValue">
            <summary>
            EventDefinition for NoWorkItemsSubmitted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogNoWorkItemsSubmitted(System.String)">
            <summary>
            Method to log an event of type NoWorkItemsSubmitted.
            </summary>
            <param name="jobName">Argument jobName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogNoWorkItemsSubmitted(System.String,System.Exception)">
            <summary>
            Method to log an event of type NoWorkItemsSubmitted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobStatusUpdateFailed">
            <summary>
              Gets the EventDefinition for the JobStatusUpdateFailed.
            </summary>
            <value>The EventDefinition for the JobStatusUpdateFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.AsyncExecuteBatchError">
            <summary>
              Gets the EventDefinition for the AsyncExecuteBatchError.
            </summary>
            <value>The EventDefinition for the AsyncExecuteBatchError</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.AgentContactFailed">
            <summary>
              Gets the EventDefinition for the AgentContactFailed.
            </summary>
            <value>The EventDefinition for the AgentContactFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerConnectionFailed">
            <summary>
              Gets the EventDefinition for the WorkerConnectionFailed.
            </summary>
            <value>The EventDefinition for the WorkerConnectionFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerAbortConditionRaised">
            <summary>
              Gets the EventDefinition for the WorkerAbortConditionRaised.
            </summary>
            <value>The EventDefinition for the WorkerAbortConditionRaised</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobRunFailure">
            <summary>
              Gets the EventDefinition for the JobRunFailure.
            </summary>
            <value>The EventDefinition for the JobRunFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerHeartBeatFailure">
            <summary>
              Gets the EventDefinition for the WorkerHeartBeatFailure.
            </summary>
            <value>The EventDefinition for the WorkerHeartBeatFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.NoWorkItemsSubmitted">
            <summary>
              Gets the EventDefinition for the NoWorkItemsSubmitted.
            </summary>
            <value>The EventDefinition for the NoWorkItemsSubmitted</value>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ApplicationContext">
            <summary>
            There is one ApplicationContext instance per Webstore application to act as a single point of control for status and configuration.
            </summary>
            <remarks>
            The WstConnection class used by the application developer will have reference to the single ApplicationContext that controls that specific Application (e.g. "Sample").
            
            (We should try to use "WebstoreConfig" as a special case application, where we populate information on num replicas, etc, from config info (registry or webstore.ini).
            </remarks>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ApplicationContext.applications">
            <summary>
            Static collection of all the applications that are referred by the WstConnection. It is basically a cache for ApplicationContext.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ApplicationContext.fullName">
            <summary>
            Name of the application.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ApplicationContext.deployment">
            <summary>
            Webstore deployment that is encapsulated by this application context.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.#ctor(System.String)">
            <summary>
            Constructs and initializes an instance of the ApplicationContext.
            </summary>
            <param name="applicationName">The full application name that is passed to identify the application.</param>
            <remarks>
            Each WstConnection contains reference to underlying ApplicationContext object that encapsulates the WebstoreDeployment.  There is  a global static collection of ApplicationContext objects. There should be only one ApplicationContext object per WebstoreDeployment.
            The global cache (ApplicationContextDictionary) should keep them cached, even if no WstConnection object still refers to the application. This object acts as a single point of configuration and state information for the application.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.GetApplication(System.String)">
            <summary>
            Global collection of applications (used to make sure we have single
            point of config and state mgmt for each app).
            </summary>
            <param name="connectionStringName">Name given as the connection string.</param>
            <returns>WstApp singleton for that app</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.GetFilePartition(System.Int32)">
            <summary>
            Maps a logical partition to a physical partition for fileshare partitions.
            </summary>
            <param name="logicalPartitionNumber">index of logical partition to lookup</param>
            <returns>index of physical partition mapped to this logical partition</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.GetSqlPartition(System.Int32)">
            <summary>
            Maps a logical partition to a physical partition for sql partitions.
            </summary>
            <param name="logicalPartitionNumber">index of logical partition to lookup</param>
            <returns>index of physical partition mapped to this logical partition</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.ApplicationExpired">
            <summary>
            See if "grace" period has expired on this configuration
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.ApplicationRemoved">
            <summary>
            Gets whether the WebstoreDeployment that is associated with the ApplicationContext is removed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.ExecutionEngineTrace">
            <summary>
            Trace source for controlling execution engine.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.FileFailoverRead">
            <summary>
            Default file read failover behavior
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.FileFailoverWrite">
            <summary>
            Default file write failover behavior
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.Name">
            <summary>
            Full name of the application which is config and deployment name seperated with backslash "\"
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.SecondaryType">
            <summary>
            The secondary type for this application.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.CommandExecutor">
            <summary>
            This is the class which controls failover.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.totalServerInteraction">
            <summary>
            Duration of the command preparation and execution againt one single database (including open time, validation etc). This timer will be used to determine if there is a bad pool.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.serverExecution">
            <summary>
            Duration of the command execution againt one single database (excluding open time, validation etc). This timer will be used to report server execution quality( aka latency).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.totalApplicationExecution">
            <summary>
            Duration of the overall command execution including the failover for the application. This timer will be used to determine application execution quality (aka latency).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.serverExecutionSucceeded">
            <summary>
            Indicates whether the last execution attempt to the selected database is succeeded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.currentDatabase">
            <summary>
            The current WebstoreDatabase which the current command execution is attempted. This value can be only updated in SetupDatabaseConnections. Its value would be different than DatabaseConnection.Database if DatabaseConnection.Reconnect gets called.
            The main purpose of currentDatabase is for perf counters so that we can signal the stop for the perf counters that were related to current executing database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.ProcessException(System.Exception,Microsoft.Webstore.WstClient.CommandExecutor.ErrorType@)">
            <summary>
            Processes the exception thrown by one of the WstCommand.ExecuteXXX() methods when the SqlConnection.Open() or SqlCommand.ExecuteXXX() gets called.
            </summary>
            <param name="executeException">exception thrown while executing against server.</param>
            <param name="errorEncountered">Type of the error encountered based on the results of the processing exception.</param>
            <returns>True if type of exception allows retry, owtherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.IsBadPoolError(System.Data.SqlClient.SqlError)">
            <summary>
            Checks to see if this SqlException looks like it is a bad connection left over in the SqlClient connection pool. 
            </summary>
            <param name="error">The error to determine if it is a bad pool error.</param>
            <returns>true if bad pooled connection possible</returns>
            <remarks>The total server interaction period before exception. If this time is too short, that will be an indication for bad pool error</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.CurrentDatabase">
            <summary>
            The current WebstoreDatabase which command execution is getting performed against.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.DatabaseConnection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.ReattemptExecution">
            <summary>
            Indicates whether the reattempt for executing the command is possible.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.ServerExecutionSucceeded">
            <summary>
            Indicates whether the last execution attempt to the selected database is succeeded.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.DatabaseConnection">
            <summary>
            This is the class which contains the SqlConnection. It is responsible for creating, opening and maintaining the SqlConnection. There can be multiple DatabaseConnection for each WstConnection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.application">
            <summary>
            The application that isue using this database connection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connection">
            <summary>
            The owner WstConnection that owns this database connection. 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.database">
            <summary>
            The database that the connection will be created.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.serverAddress">
            <summary>
            The actual address (the ip) of the server which the actual sql connection is established on. This field will be null until the actual connection is established.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.sqlConnection">
            <summary>
            The actual sql connection to the give database.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.wstTransaction">
            <summary>
            The WstTransaction that is set on the owner WstConnection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connectAttempts">
            <summary>
            How many times trying to connection to the database
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connectAttemptsOnBadPool">
            <summary>
            How many times trying to connection to the database due to bad pool error
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.databaseSelector">
            <summary>
            The DatabaseSelector that will be used to select the next available database during the AutoFailover.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connectionOpenGranted">
            <summary>
            Indicates that connection open is granted for the DatabaseConnection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.timeOutDatabases">
            <summary>
            The list of the databases that has timed out for this wstdbconnection. Sometimes, timed out databases are not added to blacklist and we need to maintain a seperate blacklist for this DatabaseConnection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.#ctor(Microsoft.Webstore.WstClient.ApplicationContext,Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            WstDBConnection contains the sqlConnection and associated WstDB information
            used to execute against a specific application server/database.
            </summary>
            <param name="application"></param>
            <param name="connection"></param>
            <param name="database"></param>
            <param name="resolvedCommandType"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.PrepareExecution">
            <summary>
            Reset counters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.ClearSqlConnectionPool">
            <summary>
            Clear Sql connection pool
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.AddToTimeoutDBList">
            <summary>
            Add db to timeout db list
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.IsNonPooledConnection">
            <summary>
            This sql connection is not a pooled connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.IsRetryAllowed">
            <summary>
            Retry allowed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.IsRetryAllowedForBadPool">
            <summary>
            Retry allowed for badpool error
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseConnection.Database">
            <summary>
            WebstoreDatabase object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseConnection.Transaction">
            <summary>
            Gets or sets the WstTransaction that is set on the owner WstConnection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.Initialize">
            <summary>
            Initializes the MetadataHelper. This function is not thread-safe so should be called from a thread-safe environment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCollectPeriod(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the counter collection period for the given deployment.
            </summary>
            <param name="deployment">The deployment of the counter collection period to return.</param>
            <returns>Number of seconds between resetting the request execution time counters.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyExcellent(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "excellent" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "excellent".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyGood(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "good" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "good".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyOK(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "excellent" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "excellent".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyPoor(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "poor" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "poor".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetServerDataCenterName(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Get data center name for a specific database's server.
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetLatencyBucket(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Get the longest latency for replication to this database
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.IsLocal(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Check if the database is in the same datacenter this client reside.
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.IsFirstDatabaseFresherThanSecondary(Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Check if secondary database1 is fresher than secondary database2,
            database2 is our preference.
            </summary>
            <param name="database1"></param>
            <param name="database2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetApplicationContext(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Gets the owner ApplicationContext for the matching WebstoreDeployment of WebstoreResource.
            </summary>
            <param name="resource">The WebstoreResource to get the ApplicationContext.</param>
            <returns>The ApplicationContext of the the matching WebstoreDeployment of WebstoreResource if the WebstoreDeployment is still deployed, otherwise null</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetApplicationContext(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the owner ApplicationContext for the given WebstoreDeployment.
            </summary>
            <param name="deployment">The WebstoreDeployment to get the ApplicationContext.</param>
            <returns>The ApplicationContext of the the matching WebstoreDeployment if the WebstoreDeployment is still deployed, otherwise null</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetServerAddress(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Get either server name or server ip address if there is one for this server
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetOneResource(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets a sample WebstoreResource for the given WebstoreDeployment.
            </summary>
            <param name="deployment">The WebstoreDeployment that owns returned WebstoreResource.</param>
            <returns>One of the WebstoreResource which is part of the WebstoreDeployment. It may be null.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetOneResource(Microsoft.Webstore.MetaData.WebstoreServer)">
            <summary>
            Gets a sample WebstoreResource for the given WebstoreServer.
            </summary>
            <param name="server">The WebstoreServer that is hosting the returned WebstoreResource.</param>
            <returns>One of the WebstoreResource which is hosted by the WebstoreServer. It may be null.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ResourceSelector.#cctor">
            <summary>
            C# static constructor's are used to inititalize static members of the class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ResourceSelector.GetRandom(System.Int32)">
            <summary>
            Gets random number between 0 and maxNumber
            </summary>
            <param name="maxNumber">0..maxNumber random number</param>
            <returns>0...maxNumber</returns>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstCommand">
             <summary>
             WstCommand is Webstore's version of SqlCommand object.  Uses the WstConnection "virtual" connection to a Webstore Application.  A SqlConnection is not obtained until one of the  ExecuteXXX() methods are called.
             </summary> 
             <remarks> The WstCommand class is used to issue commands against a specific Webstore application. The WstCommand can be configured to identify the partition and failover mode for the execution.  At execution time, the WstCommand selects an appropriate SqlConnection from the WstConnection pool of connections and executes using the SqlCommand object.  The result from the WstCommand.ExecuteReader() method is a WstDataReader. In this example, use of transactionscope allows for multiple insert statements to the SampleApp..UserInfo table within a transaction.</remarks>  
             <example>
             <code>
             using System;
             using System.Collections.Generic;
             using System.Text;
             using Microsoft.Webstore.MetaData;
             using Microsoft.Webstore.WstClient;
             
             namespace WstCommandExample
             {
                 class Program
                 {
                     static void Main(string[] args)
                     {
                         // The new WstConnection is based off of the Deployment name located in the local wstconfig database.
                         // The "using (WstConnection...)" method automatically Invokes "Dispose" after the next closing bracket.
                         
                         using (WstConnection connection = new WstConnection("MyOwnSampleApp"))
            
                         {
                             connection.Open();
             
                             WstCommand wstCmd = new WstCommand();
            
                             wstCmd.Connection = connection;
            
                             wstCmd.PartitionType = WstPartitionType.Physical;
             
                             wstCmd.Partition = 0;
             
                             wstCmd.WstFailoverMode = WstFailoverMode.PrimaryOnly;
             
                             wstCmd.CommandText = "select 1";
             
                             Object result = wstCmd.ExecuteScalar();
             
                         }
            
                         // The new WstConnection is based off of the Deployment name located in the local wstconfig database.
               
                         using (WstConnection connection = new WstConnection("MyOwnSampleApp"))
             
                         {
             
                             connection.Open();
             
                             WstCommand wstCmd = new WstCommand();
             
                             wstCmd.Connection = connection;
             
                             wstCmd.PartitionType = WstPartitionType.Physical;
             
                             wstCmd.Partition = 0;
             
                             wstCmd.WstFailoverMode = WstFailoverMode.PrimaryOnly;
             
                             wstCmd.CommandText = "select N'<root/>'";
             
                             using (WstXmlReader xmlReader = wstCmd.ExecuteXmlReader())
                             {
             
                                 while (xmlReader.Read())
                                 {
             
                                     Console.WriteLine("I got here.");
                                 }
                             }
                         }
                     //TransactionScope Example
            
                         using (WstConnection connection = new WstConnection("MyOwnSampleApp"))
                         {
             
                             try
                             {
                                 // Opening the connection automatically enlists it in the 
                                 // TransactionScope as a lightweight transaction.
             
                                 connection.Open();
             
                                 WstTransaction transaction = connection.BeginTransaction(System.Data.IsolationLevel.Serializable);
                                 // Create the SqlCommand object and execute the first command
                                 WstCommand command = new WstCommand();
                                 command.Connection = connection;
                                 command.PartitionType = WstPartitionType.Physical;
                                 command.Partition = 0;
                                 command.WstFailoverMode = WstFailoverMode.PrimaryOnly;
                                 command.Transaction = transaction;
                                 command.CommandText = "INSERT INTO [UserInfo] VALUES (N'Bertan Ari', 'test',0)";
             
                                 int recordsAffected = command.ExecuteNonQuery();
             
             
                                 command.CommandText = "INSERT INTO [UserInfo] VALUES (N'Marcel Pighin', 'test',0)";
                                 recordsAffected = command.ExecuteNonQuery();
                                 transaction.Commit();
             
                             }
             
                             catch (Exception ex)
                             {
                                 // Display information that command failed.
             
                                 Console.WriteLine("Exception Message1: {0}", ex.Message);
                             }
             
                             // Display the successful commit of the insert transactions.
                             Console.WriteLine("OK! If no errors then the inserts were committed!");
                                                       
                         }           
                     }       
                 }
             }    
             </code>
             </example>   
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.AnyPartition">
            <summary>
            Use this constant for the WstCommand.Partition property to randomly select the partition to execute the command.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.UnsetCommandTimeoutValue">
            <summary>
            The value for command time out which indicates that no value has been set for command time out.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.connection">
            <summary>
            WstConnection to execute the command on (cannot be changed while command is executing or resultset is still being consumed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.sqlCommand">
            <summary>
            Actual SqlCommand object to execute command with.  This object is used to hold parameters, commandtext, and other command properties (type, etc).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.commandTimeOut">
            <summary>
            Member variable in case caller wants to override the site default command timeout for this instance of WstCommand class.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.userSetFailoverMode">
            <summary>
            WstCommandType.  Default = WstCommandType.DefaultWrite
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.overrideStandby">
            <summary>
            Override standby db status when command type is WstCommandType.SpecificDatabase
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.dtcEnabled">
            <summary>
            Indicates if use using DTC or not.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.tranOptions">
            <summary>
            TransactionOptions that will be used for DTC enabled ExecuteNonQuery. There is only one TransactionOptions for the whole command and it is fixed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.database">
            <summary>
            Keep track of last partition/database we executed against
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.userSetPartition">
            <summary>
            Partition number to execute on.  Default = WstCommand.AnyPartition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.partitionType">
            <summary>
            Type of partition that m_partition refers to (logical vs. physical).  
            Default = logical.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.transaction">
            <summary>
            WstTransaction - used to encapsulate a SqlTransaction.  Since a SqlConnection is not
            determined until first WstCommand.ExecuteXXX() call is made, we cannot really start a
            SqlTransaction until then either.  Once we do... we can't allow any other WstCommand's
            refering to same WstTransaction to execute on a different server/db (they will get the
            SqlConnection from the WstTransaction object).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.inProgress">
            <summary>
            Flag indicating if the WstCommand.ExecuteXXX() method is executing.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.dataReader">
            <summary>
            Keep track of resultsets opened from this WstCommand
            (Don't allow one of the ExecuteXXX() methods to be called if there
            is still an open WstDataReader or WstXmlReader that was returned from
            this WstCommand object).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.xmlReader">
            <summary>
            Keep track of resultsets opened from this WstCommand
            (Don't allow one of the ExecuteXXX() methods to be called if there
            is still an open WstDataReader or WstXmlReader that was returned from
            this WstCommand object).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor">
            <summary>
            Default constructor, initializes new instance of the WstCommand.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor(System.String)">
            <summary>
            Overloaded constructor... inits CommandText.
            </summary>
            <param name="strCmdText">WstCommand.CommandText value</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor(System.String,Microsoft.Webstore.WstClient.WstConnection)">
            <summary>
            Overloaded constructor (cmdtext and connection)
            </summary>
            <param name="strCmdText">WstCommand.CommandText value</param>
            <param name="wstConn">WstCommand.Connection value</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor(System.String,Microsoft.Webstore.WstClient.WstConnection,System.Int32)">
            <summary>
            Overloaded constructor.
            </summary>
            <param name="strCmdText">WstCommand.CommandText value</param>
            <param name="wstConn">WstCommand.Connection value</param>
            <param name="partition">WstCommand.Partition value</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor(System.String,Microsoft.Webstore.WstClient.WstConnection,System.Int32,Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="strCmdText">WstCommand.CommandText value</param>
            <param name="wstConn">WstCommand.Connection value</param>
            <param name="partition">WstCommand.Partition value</param>
            <param name="failoverMode">WstCommand.WstFailoverMode value</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.Cancel">
            <summary>
            Cancel command (from another thread when WstCommand.ExecuteXXX() is in progress).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.CreateParameter">
            <summary>
            Create a SqlParameter.
            </summary>
            <returns>new SqlParameter</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.DetachReader(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Callback from WstDataReader when it is being closed or disposed.
            </summary>
            <param name="reader">WstDataReader (from execution on this cmd object)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.DetachReader(Microsoft.Webstore.WstClient.WstXmlReader)">
            <summary>
            Callback from WstXmlReader when it is being closed or disposed.
            </summary>
            <param name="reader">WstXmlReader (from execution on this cmd object)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.DetachTransaction(Microsoft.Webstore.WstClient.WstTransaction)">
            <summary>
            Callback from WstTransaction on dispose, rollback, commit.
            </summary>
            <param name="trans">WstTransaction</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteNonQuery">
            <summary>
            Implements IDbCommand.ExecuteNonQuery()
            </summary>
            <remarks>
            ExecuteNonQuery is intended for commands that do not return results,
            instead only the number of records affected.
            </remarks>
            <returns>
            Number of records affected (aggregate if executed on multiple partitions or replicas).
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteNonQueryWithDTC(Microsoft.Webstore.WstClient.CommandExecutor)">
            <summary>
            Implements ExecuteNonQuery with DTC
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteNonQueryWithSync(Microsoft.Webstore.WstClient.CommandExecutor)">
            <summary>
            Implements ExecuteNonQuery with sync api
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteReader">
            <summary>
            ExecuteReader() overload.
            Calls ExecuteReader(CommandBehavior.Default);
            </summary>
            <returns>WstDataReader</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            ExecuteReader().  This overload does all the real work.
            </summary>
            <param name="behavior">CommandBehavior (default = CommandBehavior.Default)</param>
            <returns>WstDataReader</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row in the resultset 
            returned by the query. Extra columns or rows are ignored.
            </summary>
            <returns>First column as first row as object</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteXmlReader">
            <summary>
            ExecuteXmlReader().  (This method is implemented to be as close as possible
            to the SqlCommand object.  This is not needed for IDbCommand).
            </summary>
            <returns>WstXmlReader</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.NewConnectionNotOpenedException">
            <summary>
            Helper to create an InvalidOperationException when connection is not opened,
            and property or method accessed which requires connection to be opened.
            </summary>
            <returns>InvalidOperationException</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.NewInvalidPartitionException">
            <summary>
            Helper to create Exception when invalid partition is specified.
            </summary>
            <returns>InvalidOperationException</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.Prepare">
            <summary>
            No-Op... not implemented
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ResetCommandTimeout">
            <summary>
            Resets this WstCommand.CommandTimeout back to default value.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ValidateCommand(Microsoft.Webstore.WstClient.ExecuteType)">
            <summary>
            Validates that this WstCommand object is in valid state to start Execution
            </summary>
            <param name="executeType">The execute method being called</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#CreateParameter">
            <summary>
            Create a SqlParameter
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#ExecuteReader">
            <summary>
            ExecuteReader() overload... implementation of IDbCommand.ExecuteReader()
            calls ExecuteReader(CommandBehavior.Default).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Implements the IDbCommand.ExecuteReader() form.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.CommandType">
            <summary>
            this.sqlCommand.CommandType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.CommandTimeout">
            <summary>
            Gives caller opportunity to override site default value for CommandTimeout (secs).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.CommandText">
            <summary>
            this.sqlCommand.CommandText property
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Connection">
            <summary>
            Specific override for Connection property (WstConnection)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Database">
            <summary>
            On Get, this is the database last executed against.  Can set to explicitly control
            the replica to execute against.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Parameters">
            <summary>
            SqlParameterCollection.  Uses the contained SqlCommand to implement the parameter collection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Partition">
            <summary>
            Partition number to execute this command against (logical or physical)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.LastPartitionExecuted">
            <summary>
            Used to determine which Physical Partition was last successfully executed against
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.PartitionType">
            <summary>
            Type of partition specified in Partition property (logical / physical)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.PhysicalPartition">
            <summary>
            Get the physical partition to execute this command against.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Transaction">
            <summary>
            gets/sets a WstTransaction property on this command object.
            </summary>
            <remarks>
            If connection is set... then this WstTransaction must have been created
            by calling BeginTransaction() on that WstConnection object.
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.OverrideStandby">
            <summary>
            OverrideStandby
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.WstFailoverMode">
            <summary>
            WstFailoverMode (PrimaryThenSecondary, etc...)
            </summary>
            
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.UpdatedRowSource">
            <summary>
            Aggregrate this down to the SqlCommand object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#Connection">
            <summary>
            IDbCommand.Connection implementation (WstConnection).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#Parameters">
            <summary>
            Need IDataParameterCollection version of the Parameters property to satisfy IDbCOmmand interface.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#Transaction">
            <summary>
            gets/sets WstTransaction property on this command object.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstConnection">
            <summary>
            Represents a "virtual" connection to a Webstore Application.
            
            This class abstracts over the SqlConnection class.  It represents a virtual connection to the whole set of databases that make up a Webstore application (partitions, replicas). The actual SqlConnection is established upon WstCommand.ExecuteXXX() methods by looking up the appropriate server/db from the FSS map (including honoring offline, blacklisted, stale replicas, retry, etc).
            </summary>
            <remarks>
            Any public static members of this type are thread safe. Any instance members are not guaranteed to be thread safe.
            </remarks>    
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.application">
            <summary>
            When our WstConnection.Open() is called, we will get a WstApp object that contains
            the config and state information for the application (specified in the connectionString)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.applicationName">
            <summary>
            The ConnectionString (Webstore Application Name) provided by the user.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.sqlConnectionString">
            <summary>
            Pass-thru to the SqlConnection.ConnectionString
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.connectionStringPrefix">
            <summary>
            Cache the connection String generated for SqlConnection (unless a connection property changes)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.connectionTimeout">
            <summary>
            Placeholder in case ConnectionTimeout is explicitly changed by caller
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.state">
            <summary>
            ConnectionState (we only support ConnectionState.Open and ConnectionState.Closed)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.userName">
            <summary>
            SQL long user id, or a windows logon or "" implies IntegratedSecurity
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.password">
            <summary>
            SQL logon password
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.isIntegratedSecurity">
            <summary>
            Flag to indicate if IntegratedSecurity (SSPI) should be used.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.wstDataReader">
            <summary>
            Only allow one open reader (WstXmlReader or WstDataReader) on this connection
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.wstXmlReader">
            <summary>
            Only allow one open reader (WstXmlReader or WstDataReader) on this connection
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.wstTransaction">
            <summary>
            Keep track if we have began a transaction.  If so, we should Rollback() on Close() if the
            transaction is still in progress.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.dbConnections">
            <summary>
            List of the DatabaseConnections to keep track of the ones that were created by this WstConnection. There can be more than one DatabaseConnection that are associated with a WstConnection, if it is used by a WstCommand whose failover mode is WriteAllCopies.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.#ctor">
            <summary>
            Default constructor.  Database/ConnectString = "";
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.#ctor(System.String)">
            <summary>
            Initializes an instance of the WstConnection class, specifying the DeploymentName.
            </summary>
            <param name="deploymentName">The name of the Webstore Deployment.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of the WstConnection class, specifying the DeploymentName and SqlConnectionString.
            </summary>
            <param name="deploymentName">The name of the Webstore Deployment</param>
            <param name="sqlConnectionString">Pass thru parameters to the SqlConnection.ConnectionString</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed
            Override of base Component Dispose method
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.BeginTransaction">
            <summary>
            Creates a WstTransaction associated with this WstConnection.
            Same as calling BeginTransaction(IsolationLevel.ReadCommitted).
            </summary>
            <returns>new WstTransaction</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.System#Data#IDbConnection#BeginTransaction">
            <summary>
            Creates a WstTransaction associated with this WstConnection.
            Same as calling BeginTransaction(IsolationLevel.ReadCommitted).
            </summary>
            <returns>new WstTransaction</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new WstTransaction associated with this WstConnection
            </summary>
            <param name="level">IsolationLevel (default = ReadCommitted</param>
            <returns>new WstTransaction</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new WstTransaction associated with this WstConnection
            </summary>
            <param name="level">IsolationLevel (default = ReadCommitted</param>
            <returns>new WstTransaction</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.System#Data#IDbConnection#ChangeDatabase(System.String)">
            <summary>
            This method is not supported.
            </summary>
            <param name="dbName"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.Close">
            <summary>
            Closes the connection.
            </summary>
            <remarks>
            If there is an open resultset from this connection, it is also closed.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.CloseDBConnections">
            <summary>
            Closes all of the WstDBConnections in our list.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.Open">
            <summary>
            Opens the WstConnection.  If this is first time this Application Name is
            opened, then a new WstApp() object will be created and added to the 
            WstGlobal's cache of WstApp objects.
            </summary>
            <remarks>
            An application can call Open() more than one time. If a WstConnection object is already initialized
            for this Webstore application, then Open() will simply re-use the data already read from the 
            configuration database for this application's settings (connection timeout, parition map, etc).
            Users should maintain at least one reference to a WstConnection object while their application is running
            so that the WstClient's SqlConnection pool stays intact, as well as the background tasks for verifying
            server availability and maintaining server partition maps and server status (blacklisted, stale replicas,
            etc).
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.DetachReader(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Callback from WstDataReader when it is being closed or disposed.
            </summary>
            <param name="reader">WstDataReader (from execution on this cmd object)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.DetachReader(Microsoft.Webstore.WstClient.WstXmlReader)">
            <summary>
            Callback from WstXmlReader when it is being closed or disposed.
            </summary>
            <param name="reader">WstXmlReader (from execution on this cmd object)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.DetachTransaction(Microsoft.Webstore.WstClient.WstTransaction)">
            <summary>
            This method allows the WstConnection to track an Open WstTransaction that is still 
            in progress (parallel transactions are not supported), and Rollback the transaction
            if the WstConnection is closed.
            </summary>
            <param name="wstTransaction">WstTransaction</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.AttachReader(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            This method allows the WstConnection to track an Open XmlReader that was
            from and execution using this connection (and close it if the connection is closed).
            </summary>
            <param name="reader">WstXmlReader opened from this connection</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.AttachReader(Microsoft.Webstore.WstClient.WstXmlReader)">
            <summary>
            This method allows the WstConnection to track an Open XmlReader that was
            from and execution using this connection (and close it if the connection is closed).
            </summary>
            <param name="reader">WstXmlReader opened from this connection</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.GetSqlPartition(System.Int32)">
            <summary>
            Gets the physical SQL Partition that this logical partition is mapped to.
            </summary>
            <param name="logicalPartition">Logical partition number</param>
            <returns>Physical SQL Partition mapped to this logical partition</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.GetFilePartition(System.Int32)">
            <summary>
            Gets the physical File Partition that this logical partition is mapped to.
            </summary>
            <param name="logicalPartition">Logical partition number</param>
            <returns>Physical File Partition mapped to this logical partition</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.GetDatabase(System.Int32,Microsoft.Webstore.WstClient.WstPartitionType,Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            Gets a WstDatabase object that matches the partition and failover criteria.  Can throw exception if no available DB is found.
            </summary>
            <param name="partition">partition number</param>
            <param name="partitionType">logical or physical</param>
            <param name="failoverMode">Webstore failover mode (primary, secondary choices)</param>
            <returns>WstDatabase</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.ReturnDBConnection(Microsoft.Webstore.WstClient.DatabaseConnection)">
            <summary>
            WstCommand should return the WstDBConnection when it is done executing.
            </summary>
            <param name="dbConnection"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.CreateCommand">
            <summary>
            Implementation of IDbConnection.CreateCommand().  Creates a new WstCommand with
            the Connection set to this object.
            </summary>
            <returns>new WstCommand object</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.System#Data#IDbConnection#CreateCommand">
            <summary>
            Implementation of IDbConnection.CreateCommand().  Creates a new WstCommand with
            the Connection set to this object.
            </summary>
            <returns>new WstCommand object</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.ResetConnectionTimeout">
            <summary>
            Resets connection timeout to default value (determined by the WebstoreConfig db)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.ResetSecurity">
            <summary>
            Resets the security properties to their default values.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.GetConnectionStringPrefix">
            <summary>
            Return all connection String information, except for server and database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.NewConnectionNotOpenedException(System.String)">
            <summary>
            Helper to create exception when operation performed that requires the connection
            to first be opened
            </summary>
            <param name="propertyName"></param>
            <returns>WstException with the EcConnNotInitialized error code.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.Clone">
            <summary>
            Support for ICloneable interface.  The System.Object.MemberwiseClone will use the
            ICloneable.Clone() method provided by the class to support "deep" copies rather than
            the default "shallow" copies.  (A shallow copy would mean that the cloned class's members
            reference the same underlying members in the original class instance).
            </summary>
            <returns>copy of this object</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.FireInfoMessageEvent(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            Fire InfoMessage event
            </summary>
            <param name="sender">The source of the event</param>
            <param name="eventArgs">A SqlInfoMessageEventArgs object that contains the event data</param>
        </member>
        <member name="E:Microsoft.Webstore.WstClient.WstConnection.InfoMessage">
            <summary>
            Event InfoMessage on this connection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.WstApp">
            <summary>
            Gets the underlying singleton WstApp object for this Webstore application.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.ConnectionString">
            <summary>
            Gets or sets the ConnectionString (for Webstore this is the config and deployment name).
            Don't use this property internally
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.SqlConnectionString">
            <summary>
            Gets/Sets the SqlConnectionString (pass thru to the SqlConnection.ConnectionString).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.ConnectionTimeout">
            <summary>
            Timeout (in seconds) when establishing connection to SQL Server.
            </summary>
            <remarks>
            The default connection timeout is specified in the Default Settings for the site (Webstore Config DB).
            The application developer can override the default by setting this property.
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.Database">
            <summary>
            Same as ConnectionString ( = name of the Webstore application).
            don't use this property internally
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.IsPending">
            <summary>
            Indicates if a pending transaction is outstanding on this connection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.State">
            <summary>
            Only ConnectionState.Open and ConnectionState.Closed are supported.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.IsFetchingData">
            <summary>
            Indicates if a data reader is already open on this connection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.SqlPartitions">
            <summary>
            Collection of Webstore SQL Partitions (Connection must be open). 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.FilePartitions">
            <summary>
            Collection of Webstore File Partitions (Connection must be open). 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.DataPartitions">
            <summary>
            Collection of data Partitions (Connection must be open). 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.IsInitialized">
            <summary>
            {get;} True if Initialize() was called and succeeded.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.LogicalPartitions">
            <summary>
            {get;} Number of logical partitions for this application.
            </summary>
            <remarks>
            Throws InvalidOperationException if <see cref="P:WstConnection.IsInitialzed"/> is false.
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.IntegratedSecurity">
            <summary>
            Overrides default security settings to use NT Authentication (sspi).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.Password">
            <summary>
            Overrides default security information (need to set username also)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.Username">
            <summary>
            Overrides default security information (need to set password also)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFailoverMode">
            <summary>
            WstFailoverMode determines which DB replica to execute the command, or FileShare to 
            work against for File operations, as well as what automatic failover options are allowed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.PrimaryOnly">
            <summary>
            Only attempts the operation on the primary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.SecondaryThenPrimary">
            <summary>
            Attempts operation on secondary, but can auto-failover to primary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.SecondaryOnly">
            <summary>
            Attempts operation on secondaries only
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.PrimaryThenSecondary">
            <summary>
            Tries operation on primary, but can auto-failover to secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.PrimaryOrSecondary">
            <summary>
            Randomly selects between primary and secondaries for the operation
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.DefaultRead">
            <summary>
            Application configurable default read behavior
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.DefaultWrite">
            <summary>
            Applcation configurable default write behavior
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.SpecificDatabase">
            <summary>
            Execute using specific database/replica (WstCommand.Database)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.WriteAllCopies">
            <summary>
            Execute against all databases in the physical partition
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstPartitionType">
            <summary>
            Used when specifying logical vs physical partition mode
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstPartitionType.Logical">
            <summary>
            Determines how to interpret a Partition number (logical, zero based)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstPartitionType.Physical">
            <summary>
            Determines how to interpret a Partition number (physical, zero based)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstConstants">
            <summary>
            Placeholder class for constants?
            Not sure if will really need.  Might be better to associate the constants with the classes that
            use the constants.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConstants.#ctor">
            <summary>
            Hide constructor... just a place holder for assembly global constants
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDataAdapter">
             <summary>
             This class implements the IDbDataAdapter functionality.  Luckily, most of the
             functionality is implemented by the base class DbDataAdapter.
             </summary>
             <remarks>
             Not sure why this doesn't show up in designer view in visual studio?  
             Something about DbDataAdapter is abstract and can't be initialized.
             Maybe there are some overrides that we still need to do?
             
             Also... should do some sanity checks and enforcement on the Update/Insert/Delete
             commands to make sure they use the same partition information as the Select.
             </remarks>
             <example>
                void TestDataAdapter()
                {
                    WstDataAdapter adapter = new WstDataAdapter();
                    WstConnection conn = new WstConnection("SampleApp");
                    string cmdtext = "Select * from userinfo where si_hashbucket = 0";
                    WstCommand cmd = new WstCommand(cmdtext, conn, 0, WstCommandType.ReadOrWrite);
                    DataSet ds = new DataSet();
            
                    conn.IntegratedSecurity = true;
                    conn.Open();
            
                    adapter.SelectCommand = cmd;
                    adapter.Fill(ds);
            
                    ds.WriteXml("c:\\testapp1.xml");
                    conn.Close();
                }
             </example>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.m_selectCommand">
            <summary>
            Select command used by DbDataAdapter.Fill(dataset)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.m_insertCommand">
            <summary>
            Insert command (not required to be able to use DbDataAdapter.Fill())
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.m_updateCommand">
            <summary>
            Update command (not required to be able to use DbDataAdapter.Fill())
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.m_deleteCommand">
            <summary>
            Delete command (not required to be able to use DbDataAdapter.Fill())
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.EventRowUpdated">
            <summary>
            Inherited through DbDataAdapter (Component.Events)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.EventRowUpdating">
            <summary>
            Inherited through DbDataAdapter (Component.Events)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.#ctor">
            <summary>
            Default constructor (none of the WstCommands set yet - select/insert/update/delete)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Abstract method inherited from DbDataAdapter.
            </summary>
            <param name="dataRow">DataRow</param>
            <param name="command">WstCommand</param>
            <param name="statementType">StatementType</param>
            <param name="tableMapping">TableMapping</param>
            <returns>RowUpdatedEventArgs</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Abstract method inherited from DbDataAdapter
            </summary>
            <param name="dataRow">DataRow</param>
            <param name="command">WstCommand</param>
            <param name="statementType">StatementType</param>
            <param name="tableMapping">TableMapping</param>
            <returns>RowUpdatingEventArgs</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Abstract method inherited from DbDataAdapter
            </summary>
            <param name="value">RowUpdatingEventArgs</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Abstract method inherited from DbDataAdapter
            </summary>
            <param name="value">RowUpdatedEventArgs</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.SelectCommand">
            <summary>
            Gets/Sets the SelectCommand
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
            <summary>
            Gets/Sets the SelectCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.InsertCommand">
            <summary>
            Gets/Sets the InsertCommand
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
            <summary>
            Gets/Sets the InsertCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.UpdateCommand">
            <summary>
            Gets/Sets the UpdateCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
            <summary>
            Gets/Sets the UpdateCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.DeleteCommand">
            <summary>
            Gets/Sets the DeleteCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
            <summary>
            Gets/Sets the DeleteCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.WstClient.WstDataAdapter.RowUpdating">
            <summary>
            RowUpdating event
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.WstClient.WstDataAdapter.RowUpdated">
            <summary>
            RowUpdated event
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstRowUpdatingEventHandler">
            <summary>
            Delegate for WstRowUpdatingEvent
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstRowUpdatedEventHandler">
            <summary>
            Delegate for WstRowUpdatedEvent
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstRowUpdatingEventArgs">
            <summary>
            Webstore specific class for RowUpdatingEventArgs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Just use the default/base constructor
            </summary>
            <param name="row">DataRow</param>
            <param name="command">WstCommand</param>
            <param name="statementType">StatementType</param>
            <param name="tableMapping">TableMapping</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstRowUpdatingEventArgs.Command">
            <summary>
            Hide the inherited implementation of the command property. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstRowUpdatedEventArgs">
            <summary>
            Webstore specific class for RowUpdatedEventArgs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Just use the default/base constructor
            </summary>
            <param name="row">DataRow</param>
            <param name="command">WstCommand</param>
            <param name="statementType">StatementType</param>
            <param name="tableMapping">TableMapping</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstRowUpdatedEventArgs.Command">
            <summary>
            Hide the inherited implementation of the command property. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDataReader">
            <summary>
            The WstDataReader is created by invoking the WstCommand.ExecuteReader() method.  
            The WstDataReader class is a thin wrapper over the SqlDataReader resultset.  
            The WstDataReader may contain multiple SqlDataReader resultsets if the WstCommand 
            executed on multiple partitions and/or replicas
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_sqlReader">
            <summary>
            Underlying SqlDataReader object.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_wstConnection">
            <summary>
            WstConnection that was used to execute the command.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_wstCommand">
            <summary>
            WstCommand object that was executed to produce this resultset.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_fClosed">
            <summary>
            Tracks whether the WstDataReader.Close() method has been called yet, or not.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_disposed">
            <summary>
            Tracks whether or not this object has been Dispose()'d yet.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.#ctor(System.Data.SqlClient.SqlDataReader,Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Creates instance of WstDataReader (only the WstCommand should create in response to
            a WstCommand.ExecuteReader() call).  This construc
            </summary>
            <param name="reader">Underlying SqlReader object being wrapped</param>
            <param name="wstconn">WstConnection used in command execute</param>
            <param name="wstCmd">WstCommand executed to produce this resultset</param>
            <remarks>
            User should not be able to directly create a DataReader object so the constructors are
            marked as internal.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.System#IDisposable#Dispose">
            <summary>
            Implements the IDisposable.Dispose() method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.Close">
            <summary>
            Closes the WstDataReader object.
            </summary>
            <remarks>
            You must explicitly call the Close method when you are through using the SqlDataReader to 
            use the associated SqlConnection for any other purpose.
            The Close method fills in the values for output parameters, return values and RecordsAffected, 
            increasing the amount of time it takes to close a SqlDataReader that was used to process a large 
            or complicated query. In cases where the return values and the number of records affected by a 
            query are not significant, the amount of time it takes to close the SqlDataReader can be reduced by 
            calling the Cancel method of the associated SqlCommand object before calling the Close method.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch Transact-SQL statements.
            </summary>
            <returns>
            true if there are more result sets; otherwise, false.
            </returns>
            <remarks>
            Used to process multiple results, which can be generated by executing batch Transact-SQL statements.
            By default, the data reader is positioned on the first result.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.Read">
            <summary>
            Advances the SqlDataReader to the next record.
            </summary>
            <returns>true if there are more rows; otherwise, false</returns>
            <remarks>
            The default position of the SqlDataReader is prior to the first record. 
            Therefore, you must call Read to begin accessing any data.
            Only one SqlDataReader per associated SqlConnection may be open at a time, 
            and any attempt to open another will fail until the first one is closed. 
            Similarly, while the SqlDataReader is in use, the associated SqlConnection 
            is busy serving it until you call Close.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata of the SqlDataReader
            </summary>
            <returns>
            A DataTable that describes the column metadata.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetName(System.Int32)">
            <summary>
            IGets the name of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The name of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the source data type.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The name of the back-end data type.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the Type that is the data type of the object.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The Type that is the data type of the object.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified column in its native format.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>This method returns DBNull for null database columns.</returns>
            <remarks>GetValue returns data using the .NET Framework types.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetValues(System.Object[])">
            <summary>
            Gets all attribute columns in the collection for the current row.
            </summary>
            <param name="values">An array of Object into which to copy the attribute columns.</param>
            <returns>The number of instances of Object in the array.</returns>
            <remarks>
            For most applications, this method provides an efficient means for retrieving all columns, 
            rather than retrieving each column individually.
            
            You can pass an Object array that contains fewer than the number of columns contained in 
            the resulting row. Only the amount of data the Object array holds is copied to the array. 
            You can also pass an Object array whose length is more than the number of columns contained 
            in the resulting row.
            
            This method returns DBNull for null database columns.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal, given the name of the column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The zero-based column ordinal.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the column as a Boolean.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a Byte.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the column as a Byte.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inherited from IDataRecord.  Pass through to the current SqlDataReader
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <param name="dataIndex">The index within the field from which to begin the read operation</param>
            <param name="buffer">The buffer into which to read the stream of bytes</param>
            <param name="bufferIndex">The index for buffer to begin the read operation</param>
            <param name="length">The maximum length to copy into the buffer</param>
            <returns>The actual number of bytes read</returns>
            <remarks>
            GetBytes returns the number of available bytes in the field. In most cases this is the exact length of the field. 
            However, the number returned may be less than the true length of the field if GetBytes has already been used to obtain bytes 
            from the field. This may be the case, for example, if the SqlDataReader is reading a large data structure into a buffer. 
            For more information, see the SequentialAccess setting for CommandBehavior.
            If you pass a buffer that is a null reference (Nothing in Visual Basic), GetBytes returns the length of the field in bytes.
            No conversions are performed, therefore the data retrieved must already be a byte array
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of the specified column as a single character.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns> The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the 
            buffer as an array starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <param name="dataIndex">The index within the field from which to begin the read operation</param>
            <param name="buffer">The buffer into which to copy data.</param>
            <param name="bufferIndex">The index for buffer to begin the read operation</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of characters read</returns>
            <remarks>
            GetChars returns the number of available characters in the field. In most cases this is 
            the exact length of the field. However, the number returned may be less than the true 
            length of the field if GetChars has already been used to obtain characters from the field. 
            This may be the case, for example, if the SqlDataReader is reading a large data structure 
            into a buffer. For more information, see the SequentialAccess setting for CommandBehavior.
            
            The actual number of characters read can be less than the requested length, if the end of 
            the field is reached. If you pass a buffer that is a null reference (Nothing in Visual Basic), 
            GetChars returns the length of the field in characters.
            
            No conversions are performed, therefore the data retrieved must already be a character array.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of the specified column as a globally-unique identifier (GUID).
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified column as a 16-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column as a 32-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of the specified column as a 64-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of the specified column as a single-precision floating point number.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of the specified column as a double-precision floating point number.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of the specified column as a string.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of the specified column as a Decimal object.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of the specified column as a DateTime object.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.System#Data#IDataRecord#GetData(System.Int32)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="i">The zero-based column ordinal</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.IsDBNull(System.Int32)">
            <summary>
            Gets a value indicating whether the column contains non-existent or missing values.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>true if the specified column value is equivalent to DBNull; otherwise, false.</returns>
            <remarks>
            Call this method to check for null column values before calling the typed get methods 
            (for example, GetByte, GetChar, and so on) to avoid raising an error.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlBinary(System.Int32)">
            <summary>
            GetSqlBinary Gets the value of the specified column as a SqlBinary. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>A SqlBinary</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a binary structure or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlBoolean(System.Int32)">
            <summary>
            GetSqlBoolean Gets the value of the specified column as a SqlBoolean. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a Boolean or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlByte(System.Int32)">
            <summary>
            GetSqlByte Gets the value of the specified column as a SqlByte. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a byte or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlDateTime(System.Int32)">
            <summary>
            GetSqlDateTime Gets the value of the specified column as a SqlDateTime. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a datetime value or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlDecimal(System.Int32)">
            <summary>
            GetSqlDecimal Gets the value of the specified column as a SqlDecimal. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a decimal value or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlDouble(System.Int32)">
            <summary>
            GetSqlDouble Gets the value of the specified column as a SqlDouble. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a double precision floating point number or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlGuid(System.Int32)">
            <summary>
            GetSqlGuid Gets the value of the specified column as a SqlGuid. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a guid or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlInt16(System.Int32)">
            <summary>
            GetSqlInt16 Gets the value of the specified column as a SqlInt16. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a 16 bit signed integer or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlInt32(System.Int32)">
            <summary>
            GetSqlInt32 Gets the value of the specified column as a SqlInt32. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a 32 bit signed integer or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlInt64(System.Int32)">
            <summary>
            GetSqlInt64 Gets the value of the specified column as a SqlInt64. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a 64 bit signed integer or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlMoney(System.Int32)">
            <summary>
            GetSqlMoney Gets the value of the specified column as a SqlMoney. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a decimal value or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlSingle(System.Int32)">
            <summary>
            GetSqlSingle Gets the value of the specified column as a SqlSingle. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a single precision floating point number or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlString(System.Int32)">
            <summary>
            GetSqlString Gets the value of the specified column as a SqlString. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a string or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlValue(System.Int32)">
            <summary>
            GetSqlValue Gets an Object that is a representation of the underlying SqlDbType Variant. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>An Object that is a representation of the underlying SqlDbType Variant</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlValues(System.Object[])">
            <summary>
            GetSqlValues Gets all the attribute columns in the current row. 
            </summary>
            <param name="values">An array of Object to copy the attribute columns into</param>
            <returns>The number of instances of Object in the array</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection of DataRecords</returns>
            <remarks>
            Allows the use of "foreach (IDataRecord dataRecord in dataReader)" syntax with our WstDataReader
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
            <value>The depth of nesting for the current row</value>
            <remarks>The outermost table has a depth of zero. The SQL Server .NET Data Provider does not support nesting and always returns zero</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed
            </summary>
            <value>true if the WstDataReader is closed; otherwise, false</value>
            <remarks>IsClosed and RecordsAffected are the only properties that you can call after the SqlDataReader is closed.</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the Transact-SQL statement.
            </summary>
            <value>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</value>
            <remarks>
            The RecordsAffected property is not set until all rows are read and you close the SqlDataReader.
            The value of this property is cumulative. For example, if two records are inserted in batch mode, 
            the value of RecordsAffected will be two.
            IsClosed and RecordsAffected are the only properties that you can call after the SqlDataReader is closed.
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row
            </summary>
            <value>When not positioned in a valid recordset, 0; otherwise the number of columns in the current row. The default is -1.</value>
            <remarks>After executing a query that does not return rows, FieldCount returns 0.</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.Item(System.Int32)">
            <summary>
            Gets the value of the specified column in its native format given the column ordinal.
            </summary>
            <value>The value of the specified column in its native format</value>
            <remarks>In C#, this property is the indexer for the SqlDataReader class.</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.Item(System.String)">
            <summary>
            Gets the value of the specified column in its native format given the column name.
            </summary>
            <value>The value of the specified column in its native format</value>
            <remarks>In C#, this property is the indexer for the SqlDataReader class.</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.HasRows">
            <summary>
            Gets a value indicating whether the SqlDataReader contains one or more rows.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstError">
            <summary>
            Summary description for WstError.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcConnectionTimeout">
            <summary>
            Connection timeout error code
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcNoConnectionAvail">
            <summary>
            No connection available error code
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcNoFileShareAvail">
            <summary>
            No fileshare available error code
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMarkedOffline">
            <summary>
            The only available DB(s) is offline
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMarkedReadOnly">
            <summary>
            There are no write DBs currently active, or logical partition 
            has been marked read only.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcCommandTimeout">
            <summary>
            Command timed out and cannot retry/failover
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMaxRetriesExceeded">
            <summary>
            Command or Connection failed and max number of attempts has been exceeded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMaxPoolSizeReached">
            <summary>
            Max Pool size exceeded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcDTCError">
            <summary>
            DTC inconsistent error.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcApplicationNotExist">
            <summary>
            The application "name" does not exist
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcTranCountExist">
            <summary>
            When checking transaction count for connections gotten from 
            the pool before execution.  Error if transaction already exists.
            (Debugging tool).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcAdminConsoleNotExist">
            <summary>
            No admin consoles are registered.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMismatchVersion">
            <summary>
            Client library does not support either the registry version, or
            the configuration database version.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcNoServiceAvail">
            <summary>
            Unable to CoCreateInstance() the WSTService object.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcNoRegistry">
            <summary>
            The webstore registry settings are missing or invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcAppConfigChanged">
            <summary>
            Configuration changed while in middle of a transaction
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcConfigExpired">
            <summary>
            Current cached configuration has expired before polling successfully completed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcSiteNotExist">
            <summary>
            The site "name" does not exist
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcConnDeniedMaxLimit">
            <summary>
            The Max Concurrent Requests limit reached. Connection Denied
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcConnNotInitialized">
            <summary>
            The Max Concurrent Requests limit reached. Connection Denied
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcFail">
            <summary>
            General Failure occurred.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstError.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstError.Number">
            <summary>
            Gets the webstore error code.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstError.Message">
            <summary>
            Gets a string description of the webstore error.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstException">
            <summary>
            Webstore specific exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstException.errorInfo">
            <summary>
            Webstore error information.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstException.applicationName">
            <summary>
            Webstore Application that encountered the error.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstException.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="errorCode">Webstore specific error code</param>
            <param name="applicationName"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstException.Application">
            <summary>
            Name of application that encountered the exception
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstException.Error">
            <summary>
            WstError object containing specific error code information
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstHash">
            <summary>
            Implementation of Webstore's default hash algorithm.
            Application Developers can choose to use the Webstore Hashing algorithm,
            or use their own hash or lookup based method to partition their data.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstHash.PRIME_A">
            <summary>
            First of 3 prime numbers used in the hashing algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstHash.PRIME_B">
            <summary>
            Second of 3 prime numbers used in the hashing algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstHash.PRIME_K">
            <summary>
            Third of 3 prime numbers used in the hashing algorithm
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstHash.m_maxHash">
            <summary>
            Member if using instance of object rather than calling the static methods.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the WstHash class
            </summary>
            <param name="maxHash">MaxHash number (0..maxHash-1)</param>
            <remarks>
            It's not necessary to create instance of the class.  The static methods
            can be called directly with key and max hash.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.Guid)">
            <summary>
            Calculate hash for Guid key
            </summary>
            <param name="guid">Guid key to hash</param>
            <returns>0..MaxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.String)">
            <summary>
            Calculate hash for string key.
            </summary>
            <param name="strKey">string key to hash</param>
            <returns>0..MaxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.Int64)">
            <summary>
            Calculate hash for large integer key
            </summary>
            <param name="largeKey">large integer key</param>
            <returns>0..MaxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.Guid,System.Int32)">
            <summary>
            Static method to get hash of a Guid key.
            </summary>
            <param name="guid">Guid key to hash</param>
            <param name="maxHash">Max Hash</param>
            <returns>0..maxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.String,System.Int32)">
            <summary>
            Static method to get hash of a string key.
            </summary>
            <param name="strKey">string key</param>
            <param name="maxHash">Max Hash</param>
            <returns>0..maxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetByte(System.Int64,System.Int32)">
            <summary>
            Internal helper method to extract a byte from an Int64
            </summary>
            <param name="ival">Int64 to be hashed</param>
            <param name="ib">byte index (0..7)</param>
            <returns>byte at ib from Int64</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.Int64,System.Int32)">
             <summary>
             Static method to get hash value of a large integer key
             </summary>
             <param name="largeKey">large integer key</param>
             <param name="maxHash">Max Hash</param>
             <returns>0..maxHash-1</returns>
             <remarks>
             The unmanaged webstore client library implementation of HashLARGEINTEGER
             iterates through each byte of the LARGEINTEGER as follows:
             
                    LARGE_INTEGER li;
                    unsigned char rgby[sizeof(unsigned long)*2] = {0};
            
                    memcpy((addr)rgby[0], (addr)(li.HighPart), sizeof(unsigned long));
                    memcpy((addr)rgby[sizeof(unsigned long)], (addr)(li.LowPart), sizeof(unsigned long));
            
                    li.QuadPart = 0x8877665544332211
                    li.HighPart = 0x88776655
                    li.LowPart  = 0x44332211
                    rgby[0] = 0x55
                    rgby[1] = 0x66
                    rgby[2] = 0x77
                    rgby[3] = 0x88
                    rgby[4] = 0x11
                    rgby[5] = 0x22
                    rgby[6] = 0x33
                    rgby[7] = 0x44
            
             So, for us to calculate the same hash values for our int64, we will need to 
             process high dword then low dword also.
            
             </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstHash.MaxHash">
            <summary>
            MaxHash specified when object was constructed
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstTransaction">
            <summary>
            Summary description for WstTransaction.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction.m_wstConnection">
            <summary>
            WstConnection object that created this transaction
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction.m_isolationlevel">
            <summary>
            IsolationLevel
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction.m_sqlTrans">
            <summary>
            Actual SqlTransaction that will control the transaction
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction.m_fCompleted">
            <summary>
            Keeps track of when this transaction has been Commit(), Rollback() or Dispose()
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction.m_disposed">
            <summary>
            Tracks whether or not this object has been Dispose()'d yet.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction.m_wstDBConnection">
            <summary>
            Internal DB Connection object (SqlConnection, along with command context).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.#ctor(Microsoft.Webstore.WstClient.WstConnection)">
            <summary>
            Constructor (created from WstConnection.BeginTransaction().
            </summary>
            <param name="conn">WstConnection parent</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.#ctor(Microsoft.Webstore.WstClient.WstConnection,System.Data.IsolationLevel)">
            <summary>
            Constructor (created from WstConnection.BeginTransaction().
            </summary>
            <param name="conn">WstConnection parent</param>
            <param name="isolevel">IsolationLevel (default = ReadCommitted)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.Dispose">
            <summary>
            Clear the resources used by this object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.Commit">
            <summary>
            Commits the transaction in progress.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.Rollback">
            <summary>
            Rolls back the transaction in progress.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.SetDBConnection(Microsoft.Webstore.WstClient.DatabaseConnection)">
            <summary>
            Internal helper version of GetDBConnection
            </summary>
            <param name="databaseConnection">SqlConnection</param>
            <returns>WstDBConnection</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.ReportCmdCompletion(Microsoft.Webstore.WstClient.DatabaseConnection)">
            <summary>
            
            </summary>
            <param name="dbConnection"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.ClearMembers">
            <summary>
            Shared cleanup between Dispose(), Rollback(), and Commit().
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstTransaction.Connection">
            <summary>
            Gets the WstConnection that created this WstTransaction
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstTransaction.System#Data#IDbTransaction#Connection">
            <summary>
            Gets the WstConnection that created this WstTransaction
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstTransaction.IsolationLevel">
            <summary>
            IsolationLevel (default = ReadCommitted)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstTransaction.InProgress">
            <summary>
            true if actual underlying SqlTransaction has begun
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstXmlReader">
            <summary>
            The WstXmlReader is created by invoking the WstCommand.ExecuteXmlReader() method.  
            The WstXmlReader class is a thin wrapper over the XmlReader resultset.  
            The WstXmlReader may contain multiple XmlReader resultsets if the WstCommand 
            executed on multiple partitions and/or replicas, so we have additional public method
            NextResult() to move to next XmlReader result.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstXmlReader.m_xmlReader">
            <summary>
            Underlying XmlReader object.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstXmlReader.m_wstConnection">
            <summary>
            WstConnection that was used to execute the command.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstXmlReader.m_wstCommand">
            <summary>
            WstCommand object that was executed to produce this resultset.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstXmlReader.m_fClosed">
            <summary>
            Track whether or not the WstXmlReader.Close() method has been called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.#ctor(System.Xml.XmlReader,Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Creates instance of WstDataReader (only the WstCommand should create in response to
            a WstCommand.ExecuteReader() call).  This construc
            </summary>
            <param name="reader">Underlying XmlReader object being wrapped</param>
            <param name="wstconn">WstConnection used in command execute</param>
            <param name="wstCmd">WstCommand executed to produce this resultset</param>
            <remarks>
            User should not be able to directly create a DataReader object so the constructors are
            marked as internal.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.Finalize">
            <summary>
            C# type destructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.GetAttribute(System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.GetAttribute(System.String,System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.GetAttribute(System.Int32)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToAttribute(System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToAttribute(System.Int32)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToFirstAttribute">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToNextAttribute">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToElement">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.Read">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.Close">
            <summary>
            Close all the underlying XmlReader objects when we are closed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ReadString">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ReadInnerXml">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ReadOuterXml">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.LookupNamespace(System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ResolveEntity">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ReadAttributeValue">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.NodeType">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Name">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.LocalName">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.NamespaceURI">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Prefix">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.HasValue">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Value">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Depth">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.BaseURI">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.IsEmptyElement">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.IsDefault">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.QuoteChar">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.XmlSpace">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.XmlLang">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.AttributeCount">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Item(System.Int32)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Item(System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Item(System.String,System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.EOF">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.ReadState">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.NameTable">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.ConfigurationAccess">
            <summary>
            This class provides functionality related to access to the configuration file. Instance functions are not thread-safe. Static functions are thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.#ctor">
            <summary>
            If not initialized, initializes the MSN Runtime and creates a new instance of ConfigurationAccess.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.AddWebstoreConfiguration(System.Xml.XmlNode)">
            <summary>
            Adds a new XmlNode to the webstore section of the configuration file.
            </summary>
            <param name="nodeToAdd">The new XmlNode to add.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
            <summary>
            Creates an System.Xml.XmlNode with the specified System.Xml.XmlNodeType System.Xml.XmlDocument.Name, and System.Xml.XmlNode.NamespaceURI.
            </summary>
            <param name="type">The XmlNodeType of the new node.</param>
            <param name="name">The qualified name of the new node. If the name contains a colon then it is parsed into System.Xml.XmlNode.Prefix and System.Xml.XmlDocument.LocalName components.</param>
            <param name="namespaceURI">The namespace URI of the new node.</param>
            <returns>The new XmlNode.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.CreateAttribute(System.String)">
            <summary>
            Creates an System.Xml.XmlAttribute with the specified System.Xml.XmlDocument.Name.
            </summary>
            <param name="attributeName">The qualified name of the attribute. If the name contains a colon, the System.Xml.XmlNode.Prefix property reflects the part of the name preceding the first colon and the System.Xml.XmlDocument.LocalName property reflects the part of the name following the first colon. The System.Xml.XmlNode.NamespaceURI remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case NamespaceURI has a value of http://www.w3.org/2000/xmlns/.</param>
            <returns>The new XmlAttribute.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.GetWebstoreConfiguration(System.String)">
            <summary>
            Gets the XmlElement that represent the Webstore configuration for the specified value.
            </summary>
            <param name="value">The value that identifies the webstore configuration we are looking for.</param>
            <returns>The XmlElement that represents the specified configuration.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.GetPathFromString(System.String)">
            <summary>
                Creates a fully expanded, valid path from the specified string.
            </summary>
            <param name="value">The string to expand and validate.</param>
            <returns>The fully expanded, valid path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.OpenWebstoreSubKey(Microsoft.Win32.RegistryKeyPermissionCheck)">
            <summary>
            Locates and opens Webstore sub key in the registry.
            </summary>
            <param name="permission">Required access permissions while opening the WebstoreSubKey. </param>
            <returns>The handler to the opened Webstore subkey.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.GetConfigFileLocation">
            <summary>
            Gets the config file location.
            </summary>
            <returns>Config file location, null if it is not found.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.IntializeMsnRuntime">
            <summary>
            Initializes MSN Runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.SaveNewConfiguration(Microsoft.Webstore.Common.ConfigurationAccess)">
            <summary>
            Saves the new configuration over the existing configuration file.
            </summary>
            <param name="newConfiguration"></param>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.ConfigurationFilePath">
            <summary>
            Gets the full path for the configuration file that is used to initialize MSN Runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.ConfigurationDocument">
            <summary>
            The Xml document that represent the configuration file. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.Configuration">
            <summary>
            Gets the configuration exposed by the MSN Runtime for read only purposes.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.NamespaceURI">
            <summary>
            Gets the namespace uri of the configuration document.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.ThreadSafeDictionary`2">
            <summary>
            A generic thread safe dictionary that is optimized for heavy read scenarios. If your dictionary will be frequently updated, do not use this class.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeDictionary`2.valueTable">
            <summary>
            Use an Hashtable to contain the collection of TValue objects.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeDictionary`2.valueTableCodeLock">
            <summary>
            The lock that controls the access to the critical section codes related to the ApplicationContext objects.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeDictionary`2.#ctor">
            <summary>
            Constructs new instance of ThreadSafeDictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the ThreadSafeDictionary class that is empty, has the default initial capacity, and uses the specified IEqualityComparer.
            </summary>
            <param name="comparer">The IEqualityComparer implementation to use when comparing keys, or null to use the default EqualityComparer for the type of the key.</param> 
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeDictionary`2.AddValueIfNotExist(`0,Microsoft.Webstore.Common.ItemFactory{`0,`1},System.Boolean@)">
            <summary>
            Creates a TValue and adds to the collection (or just returns existing TValue if already in the collection).
            </summary>
            <param name="key">The TKey to inquire the requested TValue.</param>
            <param name="factory">The factory to create instances of TValue out of key.</param>
            <param name="exist">Indicates whether the inquired TValue already exists. True if TValue already exists, otherwise false.</param>
            <returns>ApplicationContext for name specified from collection</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeDictionary`2.Contains(`0,`1)">
            <summary>
            Determines whether the ThreadSafeDictionary contains a specific key-value pair.
            </summary>
            <param name="key">The key to locate in the ThreadSafeDictionary.</param>
            <param name="value">The value to locate in the ThreadSafeDictionary. The value can be null for reference types.</param>
            <returns>true if the ThreadSafeDictionary contains anelement with the specified key and value; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the ThreadSafeDictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if key is not found in the ThreadSafeDictionary.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value with the specified key from the ThreadSafeDictionary.
            </summary>
            <param name="key">The key of the element to get.</param>
            <param name="value">The output value that will be returned.</param>
            <returns>true if the element is successfully found and returned; otherwise, false. This method returns false if key is not found in the ThreadSafeDictionary.</returns>
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeDictionary`2.Item(`0)">
             <summary>
             Gets the TValue associated with the specified key.
             </summary>
             <param name="key">The key of the TValue to get.</param>
             <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a System.Collections.Generic.KeyNotFoundException, and a set operation creates a new element with the specified key.</returns>
             Exceptions:
               System.ArgumentNullException:
                 key is null.
            
               System.Collections.Generic.KeyNotFoundException:
                 The property is retrieved and key does not exist in the collection.
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeDictionary`2.Comparer">
            <summary>
            Gets and sets the System.Collections.Generic.IEqualityComparer that is used to determine equality of keys for the ThreadSafeDictionary.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the ThreadSafeDictionary.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.ThreadSafeQueue`1">
            <summary>
            A thread safe queue for reference types. This queue does not support value types and null entries.
            </summary>
            <typeparam name="TValue">A reference type.</typeparam>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.CapacityMultiplicator">
            <summary>
            The ratio of actual queue array length and the capacity. The extra capacity is used to accommodate the nulls that can be placed while an TValue is removed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.LockIterationLimit">
            <summary>
            Maximum number of iterations to get the lock before going to sleep.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.LockSleepPeriod">
            <summary>
            The sleep duration if when lock iteration limit is reached.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.queueArray">
            <summary>
            The array that holds the queued items.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.queueCapacity">
            <summary>
            The capacity of the ThreadSafeQueue.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.enqueueLock">
            <summary>
            The lock that synchronizes the enqueue requests.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.dequeueLock">
            <summary>
            The lock that synchronizes the dequeue requests.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.enqueuePosition">
            <summary>
            The position of the next enqueue.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.lastDequeuePosition">
            <summary>
            The position of the last dequeue.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.queuedItemCount">
            <summary>
            The total number of TValues that are queued.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.queueingTrace">
            <summary>
            Trace source for tracing queue status.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ThreadSafeQueue class that is empty and has the specified initial capacity.
            </summary>
            <param name="queueCapacity">The initial number of elements that the ThreadSafeQueue can contain.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeQueue`1.Dequeue(`0@)">
            <summary>
            Removes and returns the object at the beginning of the ThreadSafeQueue if the queue is not empty.
            </summary>
            <param name="value">The object that is removed from the beginning of the ThreadSafeQueue</param>
            <returns>True if the operation is completed successfully, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the ThreadSafeQueue if the queue is not full.
            </summary>
            <param name="value">The TValue to add to the ThreadSafeQueue. The value can not be null  or a value type.</param>
            <returns>True if the operation is completed successfully, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeQueue`1.Remove(`0)">
            <summary>
            Removes an object from the ThreadSafeQueue if it exists in the queue.
            </summary>
            <param name="value">The TValue to remove from the ThreadSafeQueue. The value can not be null  or a value type.</param>
            <returns>True if the operation is completed successfully, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeQueue`1.Resize(System.Int32)">
            <summary>
            Resizes the capacity of ThreadSafeQueue with the specified value.
            </summary>
            <param name="newQueueCapacity">The new number of elements that the ThreadSafeQueue can contain.</param>
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeQueue`1.Capacity">
            <summary>
            Gets the  capacity of the ThreadSafeQueue.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeQueue`1.Count">
            <summary>
            Gets the number of TValues contained in the ThreadSafeQueue.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeQueue`1.IsEmpty">
            <summary>
            Gets whether there are any queued TValue. Returns if theere is any, otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeQueue`1.IsFull">
            <summary>
            Returns true if there are number of queued TValues reached the queue capacity, otherwise false.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.RefCountingInstaller">
            <summary>
             A base installer class with ref counting feature for Webstore usage scenarios.
             </summary>
             <remarks>This class can only be invoked by a caller with unrestricted RegistryPermission.
             </remarks>
        </member>
        <member name="F:Microsoft.Webstore.Common.RefCountingInstaller.packageName">
            <summary>
            The package that RefCountingInstaller belongs to. This will be name of the registry value.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.RefCountingInstaller.productName">
            <summary>
            The product that the package belongs to. This could be the name of the registry key we are creating but for now it is fixed to Webstore.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.RefCountingInstaller.#ctor(System.String,System.String)">
            <summary>
            Instantiates an instance of the RefCountingInstaller.
            </summary>
            <param name="productName">The product that the package belongs to. This will be the name of the registryKey.</param>
            <param name="packageName">The package that RefCountingInstaller belongs to.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.RefCountingInstaller.Install(System.Collections.IDictionary)">
            <summary>
            When overridden in a derived class, performs the installation.
            </summary>
            <param name="stateSaver">An System.Collections.IDictionary used to save information needed to perform a commit, rollback, or uninstall operation.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.RefCountingInstaller.Uninstall(System.Collections.IDictionary)">
            <summary>
            When overridden in a derived class, removes an installation.
            </summary>
            <param name="savedState">An System.Collections.IDictionary that contains the state of the computer after the installation was complete.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.RefCountingInstaller.Commit(System.Collections.IDictionary)">
            <summary>
            When overridden in a derived class, completes the install transaction.
            </summary>
            <param name="savedState">n System.Collections.IDictionary that contains the state of the computer after the installation was complete.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.RefCountingInstaller.Rollback(System.Collections.IDictionary)">
            <summary>
            When overridden in a derived class, restores the pre-installation state of the computer.
            </summary>
            <param name="savedState">An System.Collections.IDictionary that contains the pre-installation state of the computer.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FileShareSelector.CheckFileOperationAllowed(Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            See if the command can be executed in current config state
            </summary>
            <param name="failoverIn">client specified failover mode</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FileShareSelector.GetFileShare(System.Int32,Microsoft.Webstore.WstClient.WstPartitionType,Microsoft.Webstore.WstClient.WstFailoverMode,System.Boolean)">
            <summary>
            Helper to get the appropriate FileShare for this indexMode/access.
            </summary>
            <param name="partition">partition index</param>
            <param name="partitionType">WstPartitionType.Logical or .Physical</param>
            <param name="failoverModeIn">failover mode</param>
            <param name="updatesAllowed">Would the Op allow updates</param>
            <returns>WstFileShare</returns>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstContext">
            <summary>
            WstContext provides the Webstore routing and failover information (Deployment Name, Partition, Failover options).
            This context is used as input to the Webstore File/Directory APIs 
            (WstFile, WstDirectory, WstFileStream, WstFileInfo, WstDirectoryInfo)
            so that Webstore can route the operations to the correct File Shares.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstContext.PartitionAny">
            <summary>
            Set WstContext.Partition = WstContext.PartitionAny to randomly select an available partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstContext.PartitionAllocate">
            <summary>
            Set WstContext.Partition = WstContext.PartitionAllocate to automatically select best partition to allocate new data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor">
            <summary>
            Initializes a new instance of the WstContext class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the WstContext class for the specified Deployment.
            </summary>
            <param name="deployment">Deployment name</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the WstContext class for the specified Deployment and partition.
            </summary>
            <param name="deployment">Deployment Name</param>
            <param name="partition">partition index</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String,System.Int32,Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            Initializes a new instance of the WstContext class with the specified Deployment, partition,
            and failover options.
            </summary>
            <param name="deployment">Deployment Name</param>
            <param name="partition">partition index</param>
            <param name="failoverMode">failover mode</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String,System.Int32,Microsoft.Webstore.WstClient.WstFailoverMode,Microsoft.Webstore.WstClient.WstPartitionType)">
            <summary>
            Initializes a new instance of the WstContext class with the specified Deployment, partition,
            failover option, and partition type (logical/physical).
            </summary>
            <param name="deployment">Deployment Name</param>
            <param name="partition">partition index</param>
            <param name="failoverMode">failover mode</param>
            <param name="partitionType">WstPartitionType.Logical or .Physical</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.Clone">
            <summary>
            Create copy of this context.
            </summary>
            <returns>Copy of this WstContext</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.GetFullPath(Microsoft.Webstore.WstClient.WstPath,System.Boolean,System.String@,Microsoft.Webstore.MetaData.WebstoreFileshare@)">
            <summary>
            Internal helper to get full path given for this context given the relative path and access mode required.
            </summary>
            <param name="path">relative path on fileshare</param>
            <param name="updatesAllowed">Is this an operation that could update the fileshare</param>
            <param name="rootPath">output the share's root path</param>
            <param name="fileShareOut">output the WebstoreFileshare used</param>
            <returns>full path</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.GetFileShare(System.Boolean)">
            <summary>
            Helper on the WstContext to find a WebstoreFileshare that satisfies the context 
            </summary>
            <param name="updatesAllowed">Is this an operation that would allow udpates to the fileshare</param>
            <returns>WebstoreFileshare for context</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.HandleIOException(System.String,System.IO.IOException,System.Boolean)">
            <summary>
            HandleIOException.
            </summary>
            <param name="fullPath"></param>
            <param name="e"></param>
            <param name="fOkToRetry"></param>
            <returns>true if retry is OK</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.GetPath(Microsoft.Webstore.MetaData.WebstoreFileshare)">
            <summary>
            Gets the path "\\ + ServerName + \ + SharePath" of the given Fileshare.
            </summary>
            <param name="fileshare">Fileshare whose path to get.</param>
            <returns>Path "\\ + ServerName + \ + SharePath" indicated by the input file share.</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.Deployment">
            <summary>
            Gets or sets the Deployment Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.Partition">
            <summary>
            Gets or sets the partition index
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.FailoverMode">
            <summary>
            Gets or sets the failover mode
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.PartitionType">
            <summary>
            Gets or sets the WstPartitionType
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDirectory">
            <summary>
            WstDirectory exposes static methods for creating, moving, and enumerating 
            through directories and subdirectories.  (This is the Webstore equivalent 
            of the System.IO.Directory class).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.#ctor">
            <summary>
            Private constructor (Static only class)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.CreateDirectory(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory path to create.</param>
            <returns>A WstDirectoryInfo as specified by path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Delete(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Deletes an empty directory from a specified path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty. </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Delete(Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories in the directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Exists(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to test.</param>
            <returns>true if path refers to an existing directory; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the creation date and time of a directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <returns>A DateTime structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the creation date and time, in coordinated universal time (UTC) format, of a directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <returns>A DateTime structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetDirectories(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An array of type String containing the names of subdirectories in path. </returns>
            <remarks>This method is identical to GetDirectories(WstContext, String, String) 
            with the asterisk (*) specified as the search pattern.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetDirectories(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Gets an array of directories matching the specified search pattern from the current directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The parameter cannot end in two periods ("..") or contain two periods ("..") followed by 
            DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters 
            in InvalidPathChars.</param>
            <returns>A String array of directories matching the search pattern.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFiles(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the names of files in the specified directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>A String array of file names in the specified directory.</returns>
            <remarks>This method is identical to GetFiles(WstContext, String, String) 
            with the asterisk (*) specified as the search pattern.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFiles(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Returns the names of files in the specified directory that match the specified search pattern.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The parameter cannot end in two periods ("..") or contain two periods ("..") followed by 
            DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in 
            InvalidPathChars.</param>
            <returns>A String array containing the names of files in the specified directory that match the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFileSystemEntries(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>A String array containing the names of file system entries in the specified directory.</returns>
            <remarks>This method is identical to GetFileSystemEntries(WstContext, String, String) with the asterisk (*) specified as the search pattern.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFileSystemEntries(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Returns an array of file system entries matching the specified search criteria.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to be searched.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The searchPattern parameter cannot end in two periods ("..") or contain two periods ("..") 
            followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of 
            the characters in InvalidPathChars.</param>
            <returns>A String array of file system entries matching the search criteria.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last accessed. 
            This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last accessed. 
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last written to. 
            This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last written to. 
            This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetParent(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Retrieves the parent directory of the specified path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or a null reference (Nothing in Visual Basic) if path is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Move(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="context">Webstore context for source and destination</param>
            <param name="srcDirName">The path of the file or directory to move.</param>
            <param name="destDirName">The path to the new location for sourceDirName.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the creation date and time for the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">A DateTime containing the value to set for the creation date and time of path. 
            This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the creation date and time for the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">A DateTime containing the value to set for the creation date and time of path. 
            This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">A DateTime containing the value to set for the access date and time of path. 
            This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">A DateTime containing the value to set for the access date and time of path. 
            This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time a directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTime">The date and time the directory was last written to. 
            This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time a directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTime">The date and time the directory was last written to. 
            This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDirectoryInfo">
            <summary>
            Exposes instance methods for creating, moving, and enumerating through 
            directories and subdirectories.  (This is the Webstore equivalent to the
            System.IO.DirectoryInfo class).
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFileSystemInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and opening of files, 
            and aids in the creation of WstFileStream objects.  (This is the Webstore equivalent of the
            System.IO.FileInfo class).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the WstFileInfo class on the specified path/context.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A string specifying the path on which to create the WstFileInfo.</param>
            <param name="fileInfo"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.Delete">
            <summary>
            Permanently deletes a file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.ToString">
            <summary>
            Returns the original path that was passed by the user.
            </summary>
            <returns>Returns the original path that was passed by the user.</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Context">
            <summary>
            WstContext for this WstFileSystemInfo object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.WstFileShare">
            <summary>
            WebstoreFileshare used for this WstFileSystemInfo
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Attributes">
            <summary>
            Gets or sets the FileAttributes of the current FileSystemInfo
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current FileSystemInfo object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.CreationTimeUtc">
            <summary>
            Gets an instance of the parent directory.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Exists">
            <summary>
            Gets a value indicating whether a file or directory exists.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Extension">
            <summary>
            Gets the string representing the extension part of the file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastAccessTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastWriteTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Initializes a new instance of the WstDirectoryInfo class on the specified path/context.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A string specifying the path on which to create the WstDirectoryInfo.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.Create">
            <summary>
            Creates a directory.
            </summary>
            <remarks>If the directory already exists, this method does nothing.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.CreateSubdirectory(System.String)">
            <summary>
            Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class
            </summary>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
            <returns>The last directory specified in path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.Delete">
            <summary>
            Deletes this DirectoryInfo if it is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.Delete(System.Boolean)">
            <summary>
            Deletes this instance of a DirectoryInfo, specifying whether to delete subdirectories and files.
            </summary>
            <param name="recursive">true to delete this directory, its subdirectories, and all files; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <returns>An array of DirectoryInfo objects.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetDirectories(System.String)">
            <summary>
            Returns an array of directories in the current DirectoryInfo matching the given search criteria.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <returns>An array of type DirectoryInfo matching searchPattern.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFiles">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <returns>An array of type WstFileInfo</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFiles(System.String)">
            <summary>
            Returns a file list from the current directory matching the given searchPattern, such as "*.txt".
            </summary>
            <param name="searchPattern">The search string, such as "*.txt". </param>
            <returns>An array of type FileInfo.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFileSystemInfos">
            <summary>
            Returns a list of files and subdirectories from the current directory.
            </summary>
            <returns>An array of type WstFileSystemInfo</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>
            Returns a list of files and subdirectories from the current directory matching the given searchPattern, such as "*.txt".
            </summary>
            <param name="searchPattern">The search string, such as "*.txt". </param>
            <returns>An array of type FileInfo.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.MoveTo(System.String)">
            <summary>
            Moves a DirectoryInfo instance and its contents to a new path.
            </summary>
            <param name="destDirName">The name and path to which to move this directory. 
            The destination cannot be another disk volume or a directory with the identical name. 
            It can be an existing directory to which you want to add this directory as a subdirectory.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDirectoryInfo.Name">
            <summary>
            Gets the name of this DirectoryInfo instance.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDirectoryInfo.Parent">
            <summary>
            Gets the parent directory of a specified subdirectory.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDirectoryInfo.Root">
            <summary>
            Gets the root portion of a path.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFile">
            <summary>
            Provides static methods for the creation, copying, deletion, 
            moving, and opening of files, and aids in the creation of FileStream objects.
            WstFileStream is a thin wrapper over the .NET Framework FileStream object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.#ctor">
            <summary>
            Hide Constructor... all Static Methods
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.AppendText(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates a StreamWriter that appends UTF-8 encoded text to an existing file.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to the file to append to</param>
            <returns>A StreamWriter that appends UTF-8 encoded text to an existing file.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Copy(Microsoft.Webstore.WstClient.WstContext,System.String,Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="srcContext">Webstore source file context</param>
            <param name="srcPath">The file to copy.</param>
            <param name="destContext">Webstore destination file context</param>
            <param name="destPath">The name of the destination file. This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Copy(Microsoft.Webstore.WstClient.WstContext,System.String,Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="srcContext">Webstore source file context</param>
            <param name="srcPath">The file to copy (relative to Webstore context).</param>
            <param name="destContext">Webstore destination file context</param>
            <param name="destPath">The name of the destination file (relative to Webstore context). This cannot be a directory or an existing file.</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Create(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates a file in the specified path.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The path and name of the file to create (relative to Webstore context)</param>
            <returns>A WstFileStream that provides read/write access to the specified file.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Create(Microsoft.Webstore.WstClient.WstContext,System.String,System.Int32)">
            <summary>
            Creates a file in the specified path.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The path and name of the file to create (relative to Webstore context)</param>
            <param name="buffersize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>A WstFileStream that provides read/write access to the specified file.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.CreateText(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The file to be opened for writing (relative to Webstore context).</param>
            <returns>A StreamWriter that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Delete(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The name of the file to be deleted (relative to the Webstore context).</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Exists(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to check (relative to the Webstore context).</param>
            <returns>true if the caller has the required permissions and path contains the name 
            of an existing file; otherwise, false. This method also returns false if path is a 
            null reference (Nothing in Visual Basic) or a zero-length string. If the caller 
            does not have sufficient permissions to read the specified file, 
            no exception is thrown and the method returns false regardless of the existence of path.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetAttributes(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the FileAttributes of the file on the path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to the file (relative to the Webstore context).</param>
            <returns>The FileAttributes of the file on the path, or -1 if the path or file is not found.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>A DateTime structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>A DateTime structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last written to. This value is expressed in local time. </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last written to. This value is expressed in UTC time. </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Move(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="context">Webstore context for the source and destination paths</param>
            <param name="srcPath">The name of the file to move.</param>
            <param name="destPath">The new path for the file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Open(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode)">
            <summary>
            Opens a FileStream on the specified path with read/write access
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>A WstFileStream opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Open(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a FileStream on the specified path, having the specified mode with read, 
            write, or read/write access.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A FileAccess value that specifies the operations that can be performed on the file.</param>
            <returns>An unshared WstFileStream that provides access to the specified file, with the specified mode and access.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Open(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a FileStream on the specified path, having the specified mode with read, 
            write, or read/write access and the specified sharing option.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A FileAccess value that specifies the operations that can be performed on the file.</param>
            <param name="share">A FileShare value specifying the type of access other threads have to the file</param>
            <returns>A WstFileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.OpenRead(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only WstFileStream on the specified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.OpenText(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A StreamReader on the specified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.OpenWrite(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Opens an existing file for writing.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to be opened for writing.</param>
            <returns>A read/write, unshared FileStream object on the specified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetAttributes(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file on the specified path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes">The desired FileAttributes, such as Hidden, ReadOnly, Normal, and Archive.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the file was created.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="time">A DateTime containing the value to set for the creation date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="time">A DateTime containing the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last access date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), the specified file was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last access date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last write date and time of path. This value is expressed in local time. </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last write date and time of path. This value is expressed in UTC time. </param>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFileInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and opening of files, 
            and aids in the creation of WstFileStream objects.  (This is the Webstore equivalent of the
            System.IO.FileInfo class).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Initializes a new instance of the WstFileInfo class on the specified path/context.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A string specifying the path on which to create the WstFileInfo.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.AppendText">
            <summary>
            Creates a StreamWriter that appends text to the file represented by this instance of the FileInfo
            </summary>
            <returns>A new StreamWriter</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.CopyTo(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Copies an existing file to a new file, disallowing the overwriting of an existing file.
            </summary>
            <param name="destContext"></param>
            <param name="destPath">The name of the new file to copy to.</param>
            <returns>A new file with a fully qualified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.CopyTo(Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing the overwriting of an existing file.
            </summary>
            <param name="destContext"></param>
            <param name="destPath">The name of the new file to copy to.</param>
            <param name="overwrite">true to allow an existing file to be overwritten; otherwise, false. </param>
            <returns>A new file with a fully qualified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Create">
            <summary>
            Creates a file.
            </summary>
            <returns>A new file.</returns>
            <remarks>By default, full read/write access to new files is granted to all users.
            This method is a wrapper for the functionality provided by WstFile.Create.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.CreateText">
            <summary>
            Creates a StreamWriter that writes a new text file represented by this instance of the FileInfo
            </summary>
            <returns>A new StreamWriter</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Delete">
            <summary>
            Permanently deletes a file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="destPath">The path to move the file to, which can specify a different file name</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Open(System.IO.FileMode)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <returns>A file opened in the specified mode, with read/write access and unshared.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <returns>A WstFileStream object opened in the specified mode and access, and unshared.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <param name="share">A FileShare constant specifying the type of access other FileStream objects have to this file.</param>
            <returns>A WstFileStream object opened with the specified mode, access, and sharing options.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.OpenRead">
            <summary>
            Creates a read-only FileStream.
            </summary>
            <returns>A new read-only FileStream object.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.OpenText">
            <summary>
            Creates a StreamReader with UTF8 encoding that reads from an existing text file.
            </summary>
            <returns>A new StreamReader with UTF8 encoding.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.OpenWrite">
            <summary>
            Creates a write-only WstFileStream.
            </summary>
            <returns>A new write-only unshared WstFileStream object.</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.Directory">
            <summary>
            Gets a value indicating whether a file exists.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.DirectoryName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.Length">
            <summary>
            Gets the size of the current file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.Name">
            <summary>
            Overridden. Gets the name of the file.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFileStream">
            <summary>
            Exposes a Stream around a file, supporting both synchronous and asynchronous read and write operations.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path and creation mode.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, and read/write permission.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write permission, and sharing permission.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write and sharing permission, and buffer size.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
            <param name="buffersize">The desired buffer size in bytes. For bufferSize values between zero and eight, the actual buffer size is set to eight bytes.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
            <param name="buffersize">The desired buffer size in bytes. For bufferSize values between zero and eight, the actual buffer size is set to eight bytes.</param>
            <param name="useAsync">Specifies whether to use asynchronous I/O or synchronous I/O. 
            However, note that the underlying operating system might not support asynchronous I/O, 
            so when specifying true, the handle might be opened synchronously depending on the platform. 
            When opened asynchronously, the BeginRead and BeginWrite methods perform better on large 
            reads or writes, but they might be much slower for small reads or writes. If the application 
            is designed to take advantage of asynchronous I/O, set the useAsync parameter to true. 
            Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, 
            but using it without redesigning the application for asynchronous I/O can 
            decrease performance by as much as a factor of 10.
            </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="access"></param>
            <param name="share"></param>
            <param name="buffersize"></param>        
            <param name="FileFlagsAndAttributes"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.CreateNativeFileHandle(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.UInt32)">
            <summary>
            Sets the m_NativeFileHandle value.
            </summary>
            <param name="fullPath"></param>        
            <param name="mode"></param>
            <param name="access"></param>
            <param name="share"></param>
            <param name="buffersize"></param>        
            <param name="FileFlagsAndAttributes"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Overridden. Gets or sets the current position of this stream.
            </summary>
            <param name="array">The buffer to read data into.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="numBytes">The maximum number of bytes to read. </param>
            <param name="userCallback">The method to be called when the asynchronous read operation is completed.</param>
            <param name="stateObject">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An IAsyncResult that references the asynchronous read.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Overridden. Begins an asynchronous write.
            </summary>
            <param name="array">The buffer to write data to.</param>
            <param name="offset">The zero based byte offset in array at which to begin writing.</param>
            <param name="numBytes">The maximum number of bytes to write. </param>
            <param name="userCallback">The method to be called when the asynchronous write operation is completed.</param>
            <param name="stateObject">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <returns>An IAsyncResult that references the asynchronous write.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Close">
            <summary>
            Overridden. Closes the file and releases any resources associated with the current file stream.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.System#IDisposable#Dispose">
            <summary>
            Clear the resources used by this object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.EndRead(System.IAsyncResult)">
            <summary>
            Overridden. Waits for the pending asynchronous read to complete.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <returns>The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.EndWrite(System.IAsyncResult)">
            <summary>
            Overridden. Ends an asynchronous write, blocking until the I/O operation has completed.
            </summary>
            <param name="asyncResult">The pending asynchronous I/O request.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Flush">
            <summary>
            Overridden. Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Lock(System.Int64,System.Int64)">
            <summary>
            Prevents other processes from changing the FileStream while permitting read access.
            </summary>
            <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0). </param>
            <param name="length">The range to be locked.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overridden. Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.ReadByte">
            <summary>
            Overridden. Reads a byte from the file and advances the read position one byte.
            </summary>
            <returns>The byte cast to an int, or -1 if reading from the end of the stream.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Overridden. Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin, using a value of type SeekOrigin. </param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.SetLength(System.Int64)">
            <summary>
            Overridden. Sets the length of this stream to the given value.
            </summary>
            <param name="length">The new length of the stream. </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Unlock(System.Int64,System.Int64)">
            <summary>
            Allows access by other processes to all or part of a file that was previously locked.
            </summary>
            <param name="position">The beginning of the range to unlock. </param>
            <param name="length">The range to be unlocked.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overridden. Writes a block of bytes to this stream using data from a buffer.
            </summary>
            <param name="array">The array to which bytes are written.</param>
            <param name="offset">The byte offset in array at which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.WriteByte(System.Byte)">
            <summary>
            Overridden. Writes a byte to the current position in the file stream.
            </summary>
            <param name="bvalue">A byte to write to the stream.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.CanRead">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.CanSeek">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.CanWrite">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Handle">
            <summary>
            Gets the operating system file handle for the file that the current WstFileStream object encapsulates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.IsAsync">
            <summary>
            Gets a value indicating whether the FileStream was opened asynchronously or synchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Length">
            <summary>
            Overridden. Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Name">
            <summary>
            Gets the name of the FileStream that was passed to the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Position">
            <summary>
            Overridden. Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.WstFileshare">
            <summary>
            The WstFileShare used to open this stream.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstPath">
            <summary>
            Summary description for WstPath.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstPath.#cctor">
            <summary>
            Preprare static members
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstPath.ValidatePath(System.String,System.String)">
            <summary>
            Validates that the relative path is well formed.
            </summary>
            <param name="path"></param>
            <param name="argument">argument name of the path</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.BlacklistManager.unblacklistThreadSleepTime">
            <summary>
            Time interval between each attempt to unblacklist servers.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.BlacklistManager.blacklistTableCodeLock">
            <summary>
            Critical section lock that controls to the blacklist table access. Always acquire this lock before blacklistQueueCodeLock.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.BlacklistManager.blacklistQueueCodeLock">
            <summary>
            Critical section lock that controls to the blacklist queue access. Always acquire this lock after blacklistTableCodeLock.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.BlacklistManager.Blacklist(System.String,Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Add the input resource to the list of blacklisted resources. 
            </summary>
            <param name="ipAddress">The IP on the resource to blacklist. IP could be the actual servername.</param>
            <param name="resource">The resource to blacklist.</param>
            <Exceptions>ApplicationException if timeout expires before the lock request is granted.</Exceptions>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.BlacklistManager.IsBlacklisted(System.String,Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Returns whether the input resource is in the list of blacklisted resources.
            </summary>
            <param name="ipAddress">The IP address of the input resource to test whether it is in the list of the blacklisted resources.</param>
            <param name="resource">The input resource to test whether it is in the list of the blacklisted resources.</param>
            <returns>True if the given ip address of the given resource is in the list of the blacklisted resources; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.BlacklistManager.IsBlacklisted(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Returns whether the input resource is in the list of blacklisted resources.
            </summary>
            <param name="resource">The input resource to test whether it is in the list of the blacklisted resources.</param>
            <returns>True if the resource is in the list of the blacklisted resources and all its ip addresses are in the blacklist; false otherwise.</returns>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.lastQueryTime">
            <summary>
            The time of the last query on this resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.enlistedTime">
            <summary>
            The time when this resource is enlisted.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.lastPersistentFailureLogTime">
            <summary>
            The time of the last time persistent failure event is logged.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.lastUnblacklistTryTime">
            <summary>
            The time when the resource was last tried to be un-blacklisted.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.blacklistedIps">
            <summary>
            List of all the blacklisted ip's belong to this resource. If blacklistedIps is null, it means that the resource has no ips but just a server name.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.blacklistedIpCodeBlock">
            <summary>
            The lock that controls the access to the critical section codes related to the blacklisted ips.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.DurationSinceLastQuery">
            <summary>
            Duration in seconds since the last time this resource has been queried if it is online.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.BlacklistStaleDuration">
            <summary>
            Duration in seconds to mark a given resource as blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.DurationSinceEnlisted">
            <summary>
            Duration since this resource was blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.DurationSinceLastUnBlacklistAttempt">
            <summary>
            Duration since this resource was last attempted to be un-blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.DurationForPersistentFailureLog">
            <summary>
            Duration since the last time when this resource was blacklisted or logged as persistent failure.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.IsPersistentFailure">
            <summary>
            Indicates whether the resource has been long enough to be reported as persistent failure.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.IsFullyBlacklisted">
            <summary>
            Indicates whether all the ip's for this resource is blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.IsDroppedFromConfig">
            <summary>
            Indicates whether this resource has been taken out from Metadata cache due to a change in the config database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Blacklisting.BlacklistedResource.IsFullyReachable">
            <summary>
            Indicates whether all the ip's for this resource is reachable.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.CategoryHelp">
            <summary>
            Gets the current display help for the category.
            </summary>
            <value>The display help for the category.</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.PrimaryDatabaseBlacklisted">
            <summary>
            Number of primary databases that are blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.SecondaryDatabaseBlacklisted">
            <summary>
            Number of secondary databases that are blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.PrimaryFileshareBlacklisted">
            <summary>
            Number of primary file shares that are blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.SecondaryFileshareBlacklisted">
            <summary>
            Number of secondary file shares that are blacklisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.CategoryHelp">
            <summary>
            Gets the current display help for the category.
            </summary>
            <value>The display help for the category.</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.ConvergedThrottlingQueuedRequests">
            <summary>
            Gets the number of requests that queue for all the databases of the server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.QueuedRequestsPerSec">
            <summary>
            Gets the number of requests that gets queued per second for all the databases of the server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.QueuedRequestsTotal">
            <summary>
            Gets the number of requests that have been queued for all the databases of the server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.PercentSqlIpBlacklisted">
            <summary>
            Gets the percent of the NIC's that are blacklisted as a part of Sql resources.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.PercentFileIpBlacklisted">
            <summary>
            Gets the percent of the NIC's that are blacklisted as a part of fileshare resources.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstClientPerformanceCounterInstaller">
            <summary>
             An installer for Webstore Client Library Performance Counters.
             </summary>
             <remarks>This class can only be invoked by a caller with unrestricted
             RegistryPermission.
             </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientPerformanceCounterInstaller.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.processName">
            <summary>
            The name of the process that is host the wstclient.dll.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.application">
            <summary>
            The owner ApplicationContext of this PerformanceCountersManager.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.applicationCounter">
            <summary>
            The ApplicationInterfaceCounters for the ApplicationContext of this PerformanceCountersManager.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.totalApplicationCounters">
            <summary>
            The ApplicationInterfaceCounters that stands for the "_Total" instance.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.totalServerCounters">
            <summary>
            The ServerInterfaceCounters that stands for the "_Total" instance.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.serverCounters">
            <summary>
            Global dictionary for all the server counters. This dictionary will not be updated if a new server gets added or removed. We will basically add a new server counter to the dictionary, if we encounter a new server. We will not remove the old ones. This is an optimization
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager.throttleCounters">
            <summary>
            Similar to server counter dictionary, database throttling counter dictionary is not going to be updated if a new database is added or removed. This dictionary is created per application context because a database can belong to only one WebstoreDeployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.PerformanceCountersManager.#ctor(Microsoft.Webstore.WstClient.ApplicationContext)">
            <summary>
            Constructs an instance of PerformanceCountersManager.
            </summary>
            <param name="application">The owner ApplicationContext of the  PerformanceCountersManager to construct.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.PerformanceCountersManager.RequestResourcesReleased(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Reduces the concurrent request count for the WebstoreDatabase since all the resources used are released.
            </summary>
            <param name="database"></param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.Application">
            <summary>
            The owner ApplicationContext of this PerformanceCountersManager.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.ApplicationCounter">
            <summary>
            The ApplicationInterfaceCounters for the ApplicationContext of this PerformanceCountersManager.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.DatabaseThrottlingCounters">
            <summary>
            The dictionary for the DatabaseThrottleCounters of this ApplicationContext. 
            Similar to server counter dictionary, database throttling counter dictionary is not going to be updated if a new database is added or removed. This dictionary is created per application context.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.ServerCounters">
            <summary>
            Global dictionary for all the ServerInterfaceCounters.
            This dictionary will not be updated if a new server gets added or removed. We will basically add a new server counter to the dictionary, if we encounter a new server. We will not remove the old ones. This is an optimization
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.TotalServerCounters">
            <summary>
            The ServerInterfaceCounters that stands for the "_Total" instance.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.PerformanceCountersManager.DatabaseThrottleCountersFactory">
            <summary>
            A factory class to instantiate DatabaseThrottleCounters.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.PerformanceCountersManager.ServerInterfaceCountersFactory">
            <summary>
            A factory class to instantiate ServerInterfaceCounters.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ScaleBackThreadSleepTime">
            <summary>
            Time for the scaleback bacground to sleep. Don't make this time to small because this is also the minumum time to collect throttle counter metrics: maxConcurrentRequestSeen, acceptableRequests, totalRequests
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.CounterResetTimeMultiplier">
            <summary>
            Time period multiplier for the counter reset. This will be a multiplier for the scaleBackThreadSleepTime.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.database">
            <summary>
            The database which this DatabaseThrottleCounters belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.serverCounters">
            <summary>
            This is a reference to the ServerInterfaceCounters related to the WebstoreDatabase.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.maxConcurrentRequestsLimit">
            <summary>
            Maximimum number of concurrent connections are allowed for this server.
            Initally the value is 1 which means no request can pass. This value cannot be 0.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.concurrentRequests">
            <summary>
            Current number of active (StartRequest called but not RequestResourceReleased) concurrent connections. Should be always less than maxConcurrentConnections.
            A request will be only complete when the resources (sql connections) are released
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.totalRequests">
            <summary>
            Total number of execution requests indicated by the start request during the last interval (1*scaleBackThreadSleepTime to 5*scaleBackThreadSleepTime).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.acceptableRequests">
            <summary>
            Total number of requests whose latencies are below the acceptable range during the last interval (1*scaleBackThreadSleepTime to 5*scaleBackThreadSleepTime).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.maxConcurrentRequestSeen">
            <summary>
            Maximum concurrent request was seen during the last interval (1*scaleBackThreadSleepTime to 5*scaleBackThreadSleepTime).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.nextGrowth">
            <summary>
            The earliest time for the next growth attempt.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.growthLock">
            <summary>
            The lock for synchronizing the section attempting to increase the max concurrent request limit.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.nextCounterReset">
            <summary>
            The time for resetting counters. Background scaleback thread will clear it.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.FinishRequest(System.Int32)">
            <summary>
            Updates internal structures given that a request is finished.
            FinishRequest does not indicate that resources (sql connections) are released hence concurrent request seen will not be decreased.
            </summary>
            <param name="duration">The duration to complete the request.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.FinishRequestWithError(System.Int32)">
            <summary>
            Updates internal structures given that a request is finished with an error. 
            FinishRequestWithError does not indicate that resources (sql connections) are released hence concurrent request seen will not be decreased.
            </summary>
            <param name="duration">The duration to complete the request.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.FinishRequestThrottled">
            <summary>
            Updates internal structures given that a request is finished abruptly because it is throttled.
            FinishRequestThrottled will not change concurrent request seen because a throttled request means.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.RequestResourcesReleased">
            <summary>
            Updates internal structures given that resources (sql connection) for the request are released and available for other threads.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ConcurrencyLimitStart">
            <summary>
            The inital value for the max concurrent request limit. It is also the minimal value while max concurrent request limit is scaling back.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ConcurrencyLimitDelta">
            <summary>
            The delta that needs to be preserved while max concurrent request limit is scaling back.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ConcurrencyLimitMinumum">
            <summary>
            The minumum value for the max concurrent request limit under all circumstances.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.MaxConcurrentRequestsLimit">
            <summary>
            Maximimum number of concurrent connections are allowed for this server.
            Initally the value is 1 which means no request can pass. This value cannot be 0.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.MaxGrowthPeriodOffset">
            <summary>
            The maximum value for the offset of the duration when the next increase of max concurrent request limit is possible. The offset will be a random number between 0 and MaxGrowthPeriodOffset.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.MaxPoolSize">
            <summary>
            The highest number that max concurrent request limit is reached which implies that highest possible number of concurrent requests.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.MinumumGrowthPeriod">
            <summary>
            The minumum value for the duration when the next increase of max concurrent request limit is possible. A random offset will be added to MinumumGrowthPeriod to determine the exact duration of the next increase of max concurrent request limit is possible. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.PercentBadRequestsThreshold">
            <summary>
            The threshold of the bad requests percentage to indicate if the server status is healthy. If the server status is not healthy, increase of max concurrent request limit will not be allowed and scale back will happen.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.RampedGrowthEnabled">
            <summary>
            Indicates whether the time delayed increase of max concurrent request limit is enabled. If not, max concurrent request limit will be set to max pool size automatically without any condition.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueueCapacity">
            <summary>
            The maximum number of requests that can be queued before executing or throttling them.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueueSize">
            <summary>
            The number of requests that are queued for execution.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueuingEnabled">
            <summary>
            Indicates whether the queueing requests that would have been throttled.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueueStaleDuration">
            <summary>
            The duration before a request in the queue gets stale and throttled.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueueWarningPercentage">
            <summary>
            The threshold for the fullness percentage of the queue to log a warning in they system event log.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ThrottlingEnabled">
            <summary>
            Indicates whether the control for maximum number of concurrent requests is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetDatabaseConnections(Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Internal helper version of GetDBConnections
            </summary>
            <param name="connection">WstConnection</param>
            <param name="command">WstCommand object</param>
            <returns>WstDBConnections</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.ValidateSecondaryType">
            <summary>
            Validates that if given failover mode is available for the deployment type.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.CreateDatabaseConnection(Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Creates a new WstDBConnection matching the partition/cmdtype/security/connectiontimeout.
            </summary>
            <remarks>
            Creates a WstDBConnection with SqlConnection that has its 
            ConnectionString initialized to match partition cmd type, 
            security, and timeout, but is NOT opened yet.
            </remarks>
            <param name="connection">SqlConnection</param>
            <param name="command">Physical Partition Number.</param>
            <returns>WstDBConnection</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase})">
            <summary>
            Internal/private helper to get a WstDatabase from the partition that would satisfy
            the specified WstCommandType.  Checks to make sure server is not blacklisted, and
            DB is online.
            </summary>
            <param name="sqlFssNumber">Physical Partition Number</param>
            
            <param name="timeOutDatabases">WstDatabases that have had CommandTimeout errors</param>
            <param name="throttledDatabases">List of dbs to skip from selection</param>
            <returns>WstDatabase</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.DeterminePartitionBoundaries(System.Int32@,System.Int32@)">
            <summary>
            Determines the starting sqlFss number and how many of the sqlFss should be iterated.
            </summary>
            <param name="initialSqlFssNumber">The initialSqlFssNumber</param>
            <param name="maxSqlFssIteration"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetPrimaryDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},Microsoft.Webstore.WstClient.PrimaryDatabaseStatus@)">
            <summary>
            Helper to find best primary DB match available
            </summary>
            <param name="sqlFssNumber">Physical partition</param>
            <param name="timeOutDatabases">WstDatabase array that have already had cmd timeout errors</param>
            <param name="throttledDatabases">WstDatabase array to skip from this selection</param>
            <param name="status"></param>
            <returns>WstDatabase matching the criteria</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetSecondaryDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},Microsoft.Webstore.WstClient.SecondaryDatabaseStatus@)">
            <summary>
            Helper to find best read DB match available
            </summary>
            <param name="sqlFssNumber">Physical partition</param>
            <param name="timeOutDatabases">WstDatabase array that have already had cmd timeout errors</param>
            <param name="throttledDatabases">WstDatabase array to skip from this selection</param>
            <param name="status"></param>
            <returns>WstDatabase that best matches criteria (least stale, write vs read, etc.)</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandTypeSupport.PrimaryOnlyDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandTypeSupport.PrimaryThenSecondaryDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandTypeSupport.SpecificDatabaseDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandTypeSupport.WriteAllCopiesDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isMarkedOffline">
            <summary>
            true if a candidate found is offline
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isTimeOut">
            <summary>
            true if candidate found in timeout array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isSkippedDueToThrottling">
            <summary>
            true if candidate found in skip array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isReadOnly">
            <summary>
            true if no write db available for the partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.isMarkedOffline">
            <summary>
            true if a candidate found is offline
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.isTimeOut">
            <summary>
            true if candidate found in timeout array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.isSkippedDueToThrottling">
            <summary>
            true if candidate found in skip array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.availableSecondaries">
            <summary>
            number of available secondary database
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\fre\doc\WstClient.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstClient</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAction">
            <summary>
            Gives information about the action in the WstConfig database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase">
            <summary>
            Guid Keyed item base class
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreObject`1">
            <summary>
            All Wmo classes derive from this class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.Equals(System.Object)">
            <summary>
            The equals method comapres the keys.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.GetHashCode">
            <summary>
            The get hash code function
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.Refresh(System.Boolean)">
            <summary>
            Refresh the configuration
            </summary>
            <param name="Isforce"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.GetUserStore(System.Guid)">
            <summary>
            The consumer can use this method to store information
            related to a particular WebstoreMetaDataObject.
            E.g. the client library might store information related
            to throttling per resource
            </summary>
            <param name="userStoreKey">The key for which to get the 
            user store</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.SetUserStore(System.Guid,System.Object)">
            <summary>
            Use this method to get the stored information from the
            userStore.
            </summary>
            <param name="userStoreKey"></param>
            <param name="value">The key with which to associate the 
            user store</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.RemoveUserStore(System.Guid)">
            <summary>
            Removes the UserStore data for the given key.
            NOTE: The return value is not a bool. So that 
            malacious code might not try to remove user stores
            trying different keys.
            </summary>
            <param name="userStoreKey">The key for which to 
            remove the user store</param>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreObject`1.Key">
            <summary>
            Key
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreObject`1.IsObjectExpired">
            <summary>
            Gets information about whether the given WebstoreObject
            is expired - dropped from WstConfig.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.Uid">
            <summary>
            Uid
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.Name">
            <summary>
            Name
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAction.Type">
            <summary>
            Gets the Type associated with this action.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAction.Properties">
            <summary>
            Properties for this action
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreActionCollection">
            <summary>
            Collection of Actions in a WstConfig database.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2">
            <summary>
            WebstoreKeyedCollection
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreCollectionBase">
            <summary>
            base class for all Wmo collections.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreCollectionBase.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCollectionBase.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.GetKeyAt(System.Int32)">
            <summary>
            Gets the key at the index location of the collection.
            </summary>
            <param name="index">The index location for the key.</param>
            <returns>The key.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.GetValueAt(System.Int32)">
            <summary>
            Gets the value at the index location of the collection.
            </summary>
            <param name="index">The index location for the value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.IndexOfKey(`0)">
            <summary>
            Searches for the specified key and returns the zero-based index within the entire WebstoreKeyedCollection
            </summary>
            <param name="key">The key to locate in the WebstoreKeyedCollection.</param>
            <returns>The zero-based index of key within the entire WebstoreKeyedCollection if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.IndexOfValue(`1)">
            <summary>
            Searches for the specified value and returns the zero-based index of the first occurrence within the entire WebstoreKeyedCollection
            </summary>
            <param name="value">The value to locate in the WebstoreKeyedCollection The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of value within the entire WebstoreKeyedCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.UpdateCollection(Microsoft.Webstore.MetaData.WebstoreKeyedCollection{`0,`1},System.Boolean,Microsoft.Webstore.MetaData.WebstoreConfig)">
            <summary>
            
            </summary>
            <param name="tempColl"></param>
            <param name="isMaxDeleteTicketChanged"></param>
            <param name="cfg"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Add(`0,`1)">
            <summary>
            Adds item to collection
            </summary>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="keyToRemove"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.OnCollectionChanged(System.Object[])">
            <summary>
            This method is called to generate the event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Get the value if key exists in collection.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Add(`1)">
            <summary>
            Adds item to collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Contains(`1)">
            <summary>
            Returns whether the collection containst the item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, 
            starting at a particular Array index. 
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Remove(`1)">
            <summary>
            Removes the given item from the collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.CollectionChanged">
            <summary>
            The collection changed Event
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Item(`0)">
            <summary>
            Gets the object associated with the specified key in the collection.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Count">
            <summary>
            Gets the count of items in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.IsReadOnly">
            <summary>
            Tells whether the collection is readonly
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreActionCollection.Contains(System.Guid)">
            <summary>
            Does the action collection contain action corresponding to the given GUID.
            </summary>
            <param name="healingActionUid"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreProcessAction">
            <summary>
            ProcessAction
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessAction.Action">
            <summary>
            Safeguard
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessAction.OnFailure">
            <summary>
            OnSuccess
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessAction.OnProceed">
            <summary>
            OnProceed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessAction.OnResolve">
            <summary>
            OnResolve
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertProcess">
            <summary>
            Gives information about the alert process in the WstConfig database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertProcess.StartAction">
            <summary>
            The first action to start with
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertProcess.ProcessActions">
            <summary>
            Gets the ProcessHealingActions associated with this alert process.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertProcessCollection">
            <summary>
            Collection of alert process in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreAlertProcessCollection.Contains(System.Guid)">
            <summary>
            Does the alert process collection contain alert process corresponding to the given GUID.
            </summary>
            <param name="alertProcessUid"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreProcessActionCollection">
            <summary>
            Collection of process actions in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreProcessActionCollection.Contains(System.Guid)">
            <summary>
            Does the process action collection contain process actions corresponding to the given GUID.
            </summary>
            <param name="processActionUid"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessActionCollection.Item(System.String)">
            <summary>
            Gets the processaction object of the given name.
            </summary>
            <param name="processActionName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertCondition">
            <summary>
            Gives information about the conditions for the alert rule
            This is used by the monitoring agent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertCondition.MonitoredDatumName">
            <summary>
            MonitoredDatumName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertCondition.ComparisonOperator">
            <summary>
            Comparison
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertCondition.Threshold">
            <summary>
            Threshold
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertRule">
            <summary>
            Gives information about the rule for an Alert generation.
            This is used by the monitoring agent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.GenerateAlertAt">
            <summary>
            GenerateAlertAt
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.GenerateAlertConditions">
            <summary>
            GenerateAlertConditions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.ResolveAlertConditions">
            <summary>
            GenerateAlertConditions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.Severity">
            <summary>
            Severity
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.AlertProcess">
            <summary>
            AlertProcess
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.AlertProcessRetryCount">
            <summary>
            AlertProcessRetryCount
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.AlertProcessRetryPeriod">
            <summary>
            AlertProcessRetryCount
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertConditionCollection">
            <summary>
            Collection of alert rule conditions in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreAlertConditionCollection.Contains(System.Guid)">
            <summary>
            Does the alert rule condition collection contain condition corresponding to the given GUID.
            </summary>
            <param name="alertConditionUid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBackground.Start">
            <summary>
            Start our background thread to update replication delay info, blacklists, 
            and check health of WSTService to make sure we will get notifications from
            the admin console if configuration changes occur (promote/demote, online/offline).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBackground.StartSelfAdminInfoThread">
            <summary>
            Starts polling for selfAdminInfo.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBackground.StopAll">
            <summary>
            Stop the background thread.
            In practice, since this Thread.IsBackground = true for our thread, it will get
            automatically Thread.abort() by the runtime when the process is exiting.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBackground.BackgroundPollDeployments(System.Object)">
            <summary>
            The background thread updates replication delay info, blacklists, 
            and checks health of WSTService to make sure we will get notifications from
            the admin console if configuration changes occur (promote/demote, online/offline).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBackground.BackgroundPollForNewDeployments(System.Object)">
            <summary>
            Polls for addition of new deployments.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBackground.BackgroundPollSelfAdminInfo(System.Object)">
            <summary>
            Polls for self admin info changes. This includes all the 
            tables that are used by the monitoring and the healing agent.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreBlacklistMgr.HandleError(System.Exception,Microsoft.Webstore.MetaData.WebstoreResource,System.Data.SqlClient.SqlConnection,System.Boolean)">
            <summary>
            Handle the error that was received from executing the summary.
            This will also blacklist if needed.
            </summary>
            <param name="ex"></param>
            <param name="res"></param>
            <param name="conn"></param>
            <param name="isRegistryResource"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreBlacklistMgr.Instance">
            <summary>
            Gets the singleton instance
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreCluster">
            <summary>
            WebstoreCluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreCluster.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Uid">
            <summary>
            Uid
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Name">
            <summary>
            Name
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Path">
            <summary>
            Path
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.MonitoringServerUid">
            <summary>
            MonitoringServerUid
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.MonitoringDataPartitionNum">
            <summary>
            MonitoringFailSafeSetNum
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.JobStatusDataPartitionNum">
            <summary>
            JobStatusFailSafeSetNum
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreClusterCollection">
            <summary>
            Collection of WebstoreCluster objects
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreChangeAction">
            <summary>
            The Action enum that forms part of WebstoreEventArgs 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreChangeAction.Add">
            <summary>
            Object added 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreChangeAction.Update">
            <summary>
            Object refreshed. Some properties might have changed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreChangeAction.Remove">
            <summary>
            Object removed 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreEventArgs">
            <summary>
            An object of this type is passed to the CollectionChangedEventHandler
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreEventArgs.#ctor(Microsoft.Webstore.MetaData.WebstoreChangeAction,System.Object)">
            <summary>
            WebstoreEventArgs constructor 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEventArgs.Action">
            <summary>
            Type of action.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEventArgs.Element">
            <summary>
            The element that got changed.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.CollectionChangedEventHandler">
            <summary>
            Delegate for CollectionChangedEventHandler
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WmoEnumerator`2">
            <summary>
            This class implements the IEnumerator over a WebstoreKeyedCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WmoEnumerator`2.Dispose">
            <summary>
            The dispose method
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WmoEnumerator`2.MoveNext">
            <summary>
            Moves to the next element in the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WmoEnumerator`2.Reset">
            <summary>
            Moves to the start of the enumerator
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WmoEnumerator`2.Current">
            <summary>
            Returns the current element of the enumerator
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceCollectionBase`1">
            <summary>
            Forms the base class for Resource collections.
            The WmoDatabaseCollection and the WmoFileshareCollection derive from this.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceCollectionBase`1.Item(System.String,System.String)">
            <summary>
            Property - serverName:resourceName
            </summary>
            <param name="ServerName"></param>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceFssCollection`1">
            <summary>
            WebstoreResourceFssCollection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectsCollection`1">
            <summary>
            WebstoreSelfAdminInfoObjectsCollection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectsCollection`1.Item(System.String)">
            <summary>
            Name
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.Monitoring">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.Monitoring.PerfDeploymentNameDefault">
            <summary>
            Default name of the Performance Deployment
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.Monitoring.EventLogNot">
            <summary>
            Negation parameter for Event Log property values
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.PerformanceCounter">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.ReplicationLatency">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.UsedDbSpace">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.ServiceStatus">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.PingIP">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.PingSQL">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.CustomCSharpAssembly">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.MirroringStatus">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.EventLog">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumType.DatabaseQuery">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPerfCounterPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPerfCounterPropertyNames.Category">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPerfCounterPropertyNames.CounterName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPerfCounterPropertyNames.Instance">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumCSharpAssemblyPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumCSharpAssemblyPropertyNames.Assembly">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumCSharpAssemblyPropertyNames.Class">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumCSharpAssemblyPropertyNames.Method">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumServicePropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumServicePropertyNames.ServiceName">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumDatabasePropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumDatabasePropertyNames.DatabaseName">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames.EventLogName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames.EventsInLastNSeconds">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames.EventId">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames.EventSource">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames.EventCategoryNumber">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumEventLogPropertyNames.EventMessage">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumDatabaseQueryPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumDatabaseQueryPropertyNames.DeploymentName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumDatabaseQueryPropertyNames.DatabaseType">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumDatabaseQueryPropertyNames.Query">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPropertyValues">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPropertyValues.NoInstance">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPropertyValues.AllObjects">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPropertyValues.Primary">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPropertyValues.Secondary">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredDatumPropertyValues.Any">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.CollectAt">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.CollectAt.LocalOnly">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.CollectAt.RemoteOnly">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.CollectAt.Everywhere">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.PingStatus">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.PingStatus.Unreachable">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.PingStatus.Reachable">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.AlertStatus">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.New">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.NoAlertProcessAvailable">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.AlertBeingProcessed">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.AlertProcessCompleted">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.AlertProcessFailed">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.AlertProcessExceededRetryCount">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.Resolved">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.ResolvedManually">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.ResolvedViaAlertProcess">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.ResolvedWithoutAnAlertProcess">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertStatus.ResolvedAfterAlertProcessFailed">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoredServerStatus">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredServerStatus.Free">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredServerStatus.Suppress">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredServerStatus.ManualSuppress">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoredServerStatus.AutomaticSuppress">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.AggregationType">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AggregationType.None">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AggregationType.Ave">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AggregationType.Sum">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AggregationType.Max">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AggregationType.Min">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ComparisonOperator">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.gt">
            <summary>
            Greater Than
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.gte">
            <summary>
            Greater Than or Equal
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.lt">
            <summary>
            Less Than
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.lte">
            <summary>
            Less than or Equal
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.eq">
            <summary>
            Equal
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.neq">
            <summary>
            Not Equal
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.Older">
            <summary>
            Older -- used for comparing the time when a monitored datum was recorded
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ComparisonOperator.Newer">
            <summary>
            Newer -- used for comparing the time when a monitored datum was recorded
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionType">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.Outlier">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.RestartService">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.CustomScript">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.NTEvent">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.Wait">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.WmoCommand">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.SocTicket">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionType.ProvisionNewServer">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionCustomScriptPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionCustomScriptPropertyNames.ScriptHost">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionCustomScriptPropertyNames.ScriptName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionCustomScriptPropertyNames.CommandLine">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionCustomScriptPropertyNames.Timeout">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionCustomScriptPropertyNames.SuccessCode">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionRestartServicePropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionRestartServicePropertyNames.ServiceName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionRestartServicePropertyNames.Timeout">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionNTEventPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionNTEventPropertyNames.EventText">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionNTEventPropertyNames.EventId">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames.MonitoredDatumName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames.CompareTo">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames.ComparisonOperator">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames.Threshold">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames.ThresholdType">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionOutlierPropertyNames.MaxSimilarServersToBeOutler">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionWmoCommandPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionWmoCommandPropertyNames.WmoObject">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionWmoCommandPropertyNames.Method">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionWaitPropertyNames">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionWaitPropertyNames.Timeout">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.CMD">
            <summary>
            For ActionType of Custom Script, PropName of ScriptHost
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.WindowsScriptHost">
            <summary>
            For ActionType of Custom Script, PropName of ScriptHost
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.Number">
            <summary>
            For ActionType of Outlier, PropName of ThreshholdType
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.Percentage">
            <summary>
            For ActionType of Outlier, PropName of ThreshholdType
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.Cluster">
            <summary>
            For ActionType of Outlier, PropName of CompareTo
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.ServerRoleInCluster">
            <summary>
            For ActionType of Outlier, PropName of CompareTo
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.AllMonitoredDataForAlertRule">
            <summary>
            For ActionType of Outlier, PropName of MonitoredDatumName
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionPropertyValues.OneMonitoredDatumForAlertRule">
            <summary>
            For ActionType of Outlier, PropName of MonitoredDatumName
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames">
            <summary>
            ProcessActionIds
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.Url">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.DomainUserName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.FileId">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.Action">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.AssignedToTeamName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.ClientImpactedIndicator">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.PropertyName">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.Description">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.Priority">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.TicketProblemType">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.Title">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.NotifyAliases">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionSocTicketPropertyNames.TicketType">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames">
            <summary>
            Properties for WstProvisionServer action
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames.UpdateServerRoles">
            <summary>
            Specifies if we should update the server roles of the destination server.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames.ServerPoolServerRole">
            <summary>
            Server role for the server pool.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames.FailedServerServerRole">
            <summary>
            Server Role for failed servers.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.ProcessActionIds">
            <summary>
            ProcessActionIds
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ProcessActionIds.EndAction">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.AlertConditionType">
            <summary>
            AlertConditionType
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertConditionType.Generate">
            <summary>
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.AlertConditionType.Resolve">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoringResult">
            <summary>
            MonitoringResult
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoringResult.NoAggregatedValue">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Monitoring.MonitoringResult.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Monitoring.MonitoringResult.#ctor(Microsoft.Webstore.MetaData.WebstoreMonitoredDatum,Microsoft.Webstore.MetaData.WebstoreServer,System.String,System.Double)">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.MonitoringResult.MonitoredDatum">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.MonitoringResult.SourceServer">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.MonitoringResult.Instance">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.MonitoringResult.Value">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.WstAlert">
            <summary>
            Container for alert information
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Monitoring.WstAlert.#ctor(System.Guid,Microsoft.Webstore.MetaData.WebstoreAlertRule,Microsoft.Webstore.MetaData.WebstoreServer,Microsoft.Webstore.MetaData.WebstoreServer,Microsoft.Webstore.Common.Monitoring.AlertStatus,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.Uid">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.AlertRule">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.AlertProcess">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.Server">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.AlertGenerationServer">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.Status">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.IsResolved">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.Severity">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.AlertProcessIteration">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.CreateTime">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstAlert.Ticket">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.WstMonData">
            <summary>
            Container for alert monitored data polled from the PerfDB
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Monitoring.WstMonData.#ctor(Microsoft.Webstore.MetaData.WebstoreServer,Microsoft.Webstore.MetaData.WebstoreMonitoredDatum,System.String,System.String,System.Double,System.Double,System.DateTime)">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.Server">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.MonitoredDatum">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.Instance">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.AgentServer">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.Value">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.AggregatedValue">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Monitoring.WstMonData.Ticket">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.MonitoringApplication">
            <summary>
            MonitoringApplication, which type it is
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoringApplication.WstMasterController">
            <summary>
            MasterController
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.MonitoringApplication.WstMonitoringAgent">
            <summary>
            MonitoringAgent
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.EnvironmentChangedEventHandler">
            <summary>
            Delegate for the EnvironmentChanged event
            </summary>
            <param name="src"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ConfigCacheChangedEventHandler">
            <summary>
            Delegate for the Webstore Config cache changed event
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.SettingsChangedEventHandler">
            <summary>
            Delegate for the SettingsChanged event
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ConfigCacheChangedAction">
            <summary>
            This action defines, what happened to the config cache
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ConfigCacheChangedAction.Expired">
            <summary>
            The cached configuration has expired.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ConfigCacheChangedAction.Renewed">
            <summary>
            The cached configuration has been renewed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ConfigCacheChangedEventArgs">
            <summary>
            The event arguments for the WebstoreConfigCacheChanged event
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ConfigCacheChangedEventArgs.Action">
            <summary>
            What was the action - expired/renewed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ConfigCacheChangedEventArgs.TimeSpan">
            <summary>
            What time elapsed since the last action.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreConfig">
            <summary>
            Summary description for WebstoreConfig.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnConfigCacheChanged(System.Object[])">
            <summary>
            This method is called to generate the event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.SetPollingSucceeded">
            <summary>
            Each background thread informs it passed polling.
            </summary>        
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GenerateConfigExpiredEvent">
            <summary>
            Generates the cached configuration expired event if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnUserSettingsChanged(System.Object[])">
            <summary>
            called to fire the UserSettingsChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnWebstoreSettingsChanged(System.Object[])">
            <summary>
            called to fire the WebstoreSettingsChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnEnvironmentChanged(System.Object[])">
            <summary>
            called to fire the EnvironmentChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.IsUserSettingPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether 
            polling is required.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.RenewExpirationUserSettings(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.IsEnvSvrPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether this deployment needs to be polled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.RenewExpirationEnvSvr(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.RenewExpirationNewDeps(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.DeepInitializeAllDeployments">
            <summary>
            Initializes the deployment including the collections.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.InternalInitialize">
            <summary>
            Initializes this config instance (singleton).
            Things that it does:
            1.  Shallow initialize all the registered servers
            2.  Start background thread to look for new servers
            3.  Shallow initialize all the registered deployments
            4.  Start background thread to poll for deployment changes
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.Initialize">
            <summary>
            Call this method to initialize the instance. 
            This should be called before accessing any properties/methods of this class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetManifestCollection(System.Boolean)">
            <summary>
            returns a Collection of WmoManifest objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetServerRoleCollection(System.Boolean)">
            <summary>
            returns a Collection of ServerRole objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetDatabaseTemplateCollection(System.Boolean)">
            <summary>
            returns a Collection of Database Templates objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetDistributionDatabaseTemplateCollection(System.Boolean)">
            <summary>
            returns a Collection of Database Templates objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.EnvironmentChanged">
            <summary>
            The event that gets fired when environment is updated
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.ConfigCacheChanged">
            <summary>
            The event that gets fired when cached configuration either gets expired
            or gets renewed after expiration.
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.UserSettingsChanged">
            <summary>
            The event that gets fired when the userSettings
            are changed
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.WebstoreSettingsChanged">
            <summary>
            The event that gets fired when the webstoreSettings
            are changed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.ConfigConnectionString">
            <summary>
            Gets the connectin string to be used
            to query the config db.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.EventsToGenerateList">
            <summary>
            returns the object that stores the list
            of events that need to be generated by the 
            background event generation thread.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Deployments">
            <summary>
            Gets a collection of all deployments that the Configuration database monitors. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Servers">
            <summary>
            Gets the Server collection. Depending on the WmoViewType hint,
            the server collection might contain one, subset or all of the servers that
            the WstConfig database has.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.SiteName">
            <summary>
            The site Name for this instance of the WmoConfig
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.SelfAdminInfo">
            <summary>
            Gets the Information that the self healing agent and 
            the Monitoring agents require. Polling for changes on 
            that information only starts after the first call to 
            this property.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.EnvironmentSettings">
            <summary>
            Gets the Environment settings for the Site
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.UserSettings">
            <summary>
            Gets the UserSettings object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Settings">
            <summary>
            Gets the settings object from which all the 
            centralized settings stored in config can be queried
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.IsInitialized">
            <summary>
            Has the Initialize method been called.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.ClientDataCenter">
            <summary>
            Gets this client's datacenter
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreStringCollection">
            <summary>
            The WebstoreStringCollection
            </summary>
            
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreStringCollection.Contains(System.String)">
            <summary>
            Whether the server belongs to the given role
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreGuidCollection">
            <summary>
            The WebstoreGuidCollection
            </summary>
            
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDbSelector.#cctor">
            <summary>
            C# static constructor's are used to inititalize static members of the class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDbSelector.GetRandom(System.Int32)">
            <summary>
            Gets random number between 0 and randomMax
            </summary>
            <param name="randomMax">0..randomMax random number</param>
            <returns>0...randomMax</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllUserSettings(System.DateTime,System.String,System.String,System.Int32@)">
            <summary>
            WspGetAllUserSettings
            </summary>
            <param name="Ticket"></param>
            <param name="serverRole"></param>
            <param name="serverName"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetDeploymentsShallowInitInfo(System.DateTime)">
            <summary>
            execute WspGetDeploymentsShallowInitInfo
            </summary>
            <param name="Ticket"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetEnvironmentAndServerInfoV5_02(System.DateTime,System.DateTime,System.DateTime,System.Int32@)">
            <summary>
            Execute WspGetEnvironmentAndServerInfoV5_02
            </summary>
            <param name="EnvTicketIn"></param>
            <param name="ServerTicketIn"></param>
            <param name="SelfAdminInfoTicketIn"></param>
            <param name="returnVal"></param>
            <returns></returns>        
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetEnvironmentAndServerInfoV5_02(System.DateTime,System.DateTime,System.DateTime,System.String,System.Boolean,System.Int32@)">
            <summary>
            Execute WspGetEnvironmentAndServerInfoV5_02
            </summary>
            <param name="EnvTicketIn"></param>
            <param name="ServerTicketIn"></param>
            <param name="SelfAdminInfoTicketIn"></param>
            <param name="site"></param>
            <param name="useFileData"></param>
            <param name="returnVal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetDeploymentInfoByUid_V5_6(System.Guid,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,System.Int32@)">
            <summary>
            Execute WspGetDeploymentInfoByUid_V5_6
            </summary>
            <param name="depUid"></param>
            <param name="ticket"></param>
            <param name="fssLatencyTicket"></param>
            <param name="settingTicket"></param>
            <param name="serverRole"></param>
            <param name="serverName"></param>
            <param name="returnVal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetSelfAdminInfo(System.DateTime)">
            <summary>
            Execute WspGetSelfAdminInfo
            </summary>
            <param name="Ticket"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllManifests">
            <summary>
            Gets the Manifest related Information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllSecurityRoles(System.Guid)">
            <summary>
            Returns all of the security roles for a given manifest
            </summary>
            <param name="manifestUid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllServerRoles">
            <summary>
            Returns all of the server roles for in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllDatabaseTemplate">
            <summary>
            Returns all of the security roles for a given manifest
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllSqlFssLatencies(System.Guid)">
            <summary>
            execute WspLatency
            </summary>
            <param name="depUid"></param>        
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceStatus">
            <summary>
            Enumerates the different Statuses a database can have
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.Online">
            <summary>
            The WmoResource (database/Fileshare) is Online
            This means clients can access it.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.Offline">
            <summary>
            The WmoResource (database/Fileshare) is Offline
            This means clients cannot access it
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.NoWriteAll">
            <summary>
            The WmoResource (database/Fileshare) is Primary
            This means clients cannot access it.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.NeedsRepair">
            <summary>
            The WmoResource(database/Fileshare) is marked
            as needs repair.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.NotDeployed">
            <summary>
            The WmoResource(database/Fileshare) is 
            not yet Deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.Standby">
            <summary>
            The WmoResource(database only) is 
            in Standby state. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceRole">
            <summary>
            Enumerates the different Roles a database can have
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.Primary">
            <summary>
            The WmoResource (database/Fileshare) is Primary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.Secondary">
            <summary>
            The WmoResource (database/Fileshare) is Secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.MirroringPrincipal">
            <summary>
            The WmoResource (database only) is Mirroring Principal
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.MirroringMirror">
            <summary>
            The WmoResource (database only) is Mirror database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceType">
            <summary>
            The type of the resource
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceType.Invalid">
            <summary>
            The resource type is Invalid
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceType.Database">
            <summary>
            The resource is of type SQL
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceType.FileShare">
            <summary>
            The resource is of type File
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency">
            <summary>
            Latency object for the database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.Key">
            <summary>
            Objects Unique key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.SourceDatabase">
            <summary>
            Gets the Source database object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.Latency">
            <summary>
            Gets the latency
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.Bucket">
            <summary>
            Gets the latency bucket for the given latency.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabaseLatencyCollection">
            <summary>
            Each database has a collection of WebstoreDatabaseLatencyCollection.
            Generally this is used for multimaster topology where each db replicated to 
            each of the fss partners.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabase">
            <summary>
            Gives all the information needed to identify this database.
            Information includes - DeploymentUID, FailsafesetNumber, Status, Role etc.
            It also publishes events which get generated after a Status or Role change of the database.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResource">
            <summary>
            Represents a Webstore resource. 
            Forms the base class for WMODatabase and WMOFileshare classes.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResource.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResource.CompareTo(System.Object)">
            <summary>
            Compares two resources. It compares on the key.
            </summary>
            <param name="compareWith"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResource.Equals(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            The IEquatable::Equals method
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Name">
            <summary>
            Gets the Name of this Resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ResourceType">
            <summary>
            Gets the type of the resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ServerUid">
            <summary>
            Gets the Server UID of this Resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Server">
            <summary>
            Gets the Server on which this Resource resides
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ServerName">
            <summary>
            Gets the name of the server on which this resource is.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.FssId">
            <summary>
            Gets the Failsafeset ID of this Resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Uid">
            <summary>
            Gets the associated Resource Guid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.DeploymentUid">
            <summary>
            Gets the Guid associated with the deployment
            of which this Resource is a part of.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ResourceFailSafeSet">
            <summary>
            Gets the corrosponding resource FailSafeSet
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Status">
            <summary>
            Gets the Status of this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.IsOnline">
            <summary>
            Whether the database is online. Most required 
            by all users and thus a property.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsStale">
            <summary>
            Is this database's latency higher than stale latency bucket?
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsStaleRemote">
            <summary>
            Is this database's latency higher than DataCenter stale latency bucket?
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsPrimary">
            <summary>
            Returns true if this database is the primary database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.Latency">
            <summary>
            Gets the highest latency for this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.LatencyBucket">
            <summary>
            Gets the latency bucket under which the 
            database falls.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.DefaultStatus">
            <summary>
            The default status for this database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.ResourceType">
            <summary>
            Gets the type of the resource
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabaseCollection">
            <summary>
            The collection of Fileshares in a FileFailsafeset.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseCollection.Item(System.String,System.String)">
            <summary>
            Gets the database identified by the server and name
            </summary>
            <param name="ServerName"></param>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDataPartition">
            <summary>
            Stores information about a single Data Partition.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDataPartition.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.Number">
            <summary>
            Gets the partition number.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.SQLFssId">
            <summary>
            Gets the SQL Failsafeset ID, to which this partition belongs
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.FileFssId">
            <summary>
            Gets the File Failsafeset ID, to which this partition belongs
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.Status">
            <summary>
            Gets the status of the datapartition.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDataPartitionCollection">
            <summary>
            Collection of dataPartitions.
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.DeploymentPropertiesChangedEventHandler">
            <summary>
            Delegate for DeploymentPropertiesUpdated
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDeployment">
            <summary>
            This class represents a Wmo deployment and its associated properties.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.Refresh(System.Boolean)">
            <summary>
            refreshes this deployment with latest changes.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.IsDepConfigurationExpired">
            <summary>
            Gives the state of polling for this deployment.
            </summary>
            <returns>true if expired, false if not</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.GetKey">
            <summary>
            GetKey
            </summary>
            <returns>Guid Key</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.GetCachedFirstSqlFssForWstConfig">
            <summary>
            Gets the first Sql Fss in the deployment and caches it
            </summary>
            <returns>WebstoreSQLFss First cached FSS in the list</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.IsPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether this deployment needs to be polled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.RenewExpiration(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.ShallowInitializeDeployment(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Shallow initializes from the data reader. Does not initialize the collections.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.ForceReInitialize">
            <summary>
            Reinitialize deep, by reading from the config directly. 
            Null tickets are passed so that the whole configuration 
            is re-read.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.OnDeploymentSettingsChanged(System.Object[])">
            <summary>
            This method is called to generate the event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.ParsePolledDepInfoAndUpdateCache(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Updates the present cache with what was just polled.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.MergeResultsIntoCache(Microsoft.Webstore.MetaData.WebstoreDeployment,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Merge the results from TempDep into the internal cache of this deployment
            </summary>
            <param name="tempDep"></param>
            <param name="IsMaxTicketChanged"></param>
            <param name="IsMaxDeleteTicketChanged"></param>        
            <param name="fEnvironmentSettingsChanged"></param>        
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreDeployment.DeploymentPropertiesChanged">
            <summary>
            The deployment properties changed event.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Name">
            <summary>
            Gets the name of the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Uid">
            <summary>
            Gets the Guid associated with this deployment
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Config">
            <summary>
            Gets the parent config object
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.ManifestUid">
            <summary>
            Gets the manifest Uid associated with this deployment
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxTicket">
            <summary>
            Gets the max ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxPartitionTicket">
            <summary>
            Gets the max partition ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxDeleteTicket">
            <summary>
            Gets the max delete ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxFssLatencyTicket">
            <summary>
            Gets the max Failsafeset latency ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxWebstoreSettingsTicket">
            <summary>
            Gets the max WebstoreSettings ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Description">
            <summary>
            Description of the Deployment 
            as registered in the WstConfig database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.PartitionType">
            <summary>
            Gets the type of partitioning for this deployment.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SecondaryType">
            <summary>
            Secondary type of this deployment.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.FileshareDefaultWriteFailoverMode">
            <summary>
            Gets the default write failover mode for this deployments Fileshare
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.FileshareDefaultReadFailoverMode">
            <summary>
            Gets the default read failover mode for this deployments Fileshare
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SQLDefaultWriteFailoverMode">
            <summary>
            Gets the default read failover mode for this deployments SQL dbs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SQLDefaultReadFailoverMode">
            <summary>
            Gets the default read failover mode for this deployments SQL dbs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SecondaryStaleThreshold">
            <summary>
            Gets the Secondary Stale Threshold time that is used by the client library.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SecondaryStaleDCThreshold">
            <summary>
            Gets the Secondary Stale Data Center Threshold time that is used by the client library.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SQLFailSafeSets">
            <summary>
            Get the collection of SQL Failsafesets for the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.FileFailSafeSets">
            <summary>
            Get the collection of File Failsafesets for the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Partitions">
            <summary>
            Get the collection of logical partitions for the deployment
            </summary>
            
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.IsLatencyInitialized">
            <summary>
            Has the latency been updated.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.IsInitialized">
            <summary>
            Call this property to find out if this deployment
            has been initialized.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.IsShallowInitialize">
            <summary>
            Returns true if deployment has been shallow initialized.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDeploymentCollection">
            <summary>
            This class holds collection of deployments represented in the WstConfig
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeploymentCollection.Item(System.Guid)">
            <summary>
            Returns the deployment associated with the given GUID.
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeploymentCollection.Item(System.String)">
            <summary>
            Returns the deployment object.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings">
            <summary>
            This class holds the environmen settings.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.Name">
            <summary>
            Name of the Environment
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingOffsetService">
            <summary>
            PollingOffsetService
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyPollingInterval">
            <summary>
            LatencyPollingInterval
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket0">
            <summary>
            LatencyBucket0
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket1">
            <summary>
            LatencyBucket1
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket2">
            <summary>
            LatencyBucket2
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket3">
            <summary>
            LatencyBucket3
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingIntervalClient">
            <summary>
            Gets client polling interval.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingOffsetClient">
            <summary>
            Gets the amount of time before the TicketExpirationInterval
            that the client should start polling.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingIntervalService">
            <summary>
            Gets the interval of time after which the service should repoll.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreErrorHelper">
            <summary>
            Error Helper for getting string resources, IDs and names.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreErrorHelper.Number">
            <summary>
            The ID Number associated with this error resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreErrorHelper.Format">
            <summary>
            The Format string before the parameters are inserted.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreErrorHelper.#ctor(System.String)">
            <summary>
            The constructor for the class requires the Short name.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreConfigUnreachable">
            <summary>
            The Webstore configuration server is unreachable. Please look event viewer for more information.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstorePolledInformationInconsistent">
            <summary>
            The Polled information from the Webstore config is inconsistent. This might be due to configuration changes.Plese retry.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreApplicationNotExist(System.String)">
            <summary>
            -3001;The Webstore application ({0}) does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreApplicationTicketBad(System.String)">
            <summary>
            -3010;The Webstore application ({0}) has a bad ticket.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.SettingNotExist(System.String)">
            <summary>
            -3050;The Webstore setting ({0}) does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreUnknownException(System.Exception)">
            <summary>
            3; An unknown exception occured. Please look at inner exception for more details.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreUnexpectedError(System.String)">
            <summary>
            4;Unexpected Error - {0}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreEventsToGenerateList">
            <summary>
            Stores global list of events to be generated.
            The event generation thread comes and collects
            the list and fires the events synchronously.
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreException">
            <summary>
            class for WebstoreException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.#ctor(System.Int32,System.String)">
             <summary>
            
             </summary>
             <param name="number"></param>
             <param name="message"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreException.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreException.Number">
            <summary>
            The number of the exception.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshare">
            <summary>
            Represents file share information
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreFileshare.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshare.IsPrimary">
            <summary>
            Returns true if this fileshare is the primary database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshare.ResourceType">
            <summary>
            Gets the type of the resource
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshareCollection">
            <summary>
            The collection of Fileshares in a FileFailsafeset.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareCollection.Item(System.String,System.String)">
            <summary>
            Gets the database identified by the server and name
            </summary>
            <param name="ServerName"></param>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshareFss">
            <summary>
            Represents a Fileshare Failsafeset.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceFss">
            <summary>
            Represents a Webstore resource Failsafeset. 
            Forms the base class for WMOSQLFss and WMOFileshareFss classes.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.Deployment">
            <summary>
            The deployment to which this ResourceFailsafeset belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.FssId">
            <summary>
            Gets the Failsafeset ID associated with this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.Status">
            <summary>
            Gets the status of this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.DeploymentUid">
            <summary>
            Gets the deployment UID for this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.SecondaryType">
            <summary>
            Gets the type of secondry for this failsafeset.
            During upgrade different Failsafesets of the 
            same deployment might have different WmoSecondaryType's
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.ProvisioningPreference">
            <summary>
            Returns the Provisioning preference for this resource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.ProvisioningStatus">
            <summary>
            Returns the Provisioning Status for this resource.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.NeedsStateCopy">
            <summary>
            Does this object need state copy
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.ClusterPath">
            <summary>
            Gets the cluster path for the given fss.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.Fileshares">
            <summary>
            Gets a collection of databases in the Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.PrimaryFileshare">
            <summary>
            Gets the current primary for this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.DefaultPrimaryFileshare">
            <summary>
            Gets the default primary database for this Failsafeset
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshareFssCollection">
            <summary>
            The collection of Fileshare Failsafesets.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreIPAddress">
            <summary>
            Stores information about server IP address.
            Wmo supports 2 IPs per server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.IpAddress">
            <summary>
            Gets the ip address string.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.Switch">
            <summary>
            Gets the name of the switch.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.NetworkSwitch">
            <summary>
            Gets the name of the switch.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.IsPreferred">
            <summary>
            Is this IP Preferred by the clients.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.Server">
            <summary>
            Gets the server to which this IP address belongs.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstorePartitionType">
            <summary>
            What type of partition.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstorePartitionType.None">
            <summary>
            Manifest is not written to support partitioning
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstorePartitionType.Fixed">
            <summary>
            Fixed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstorePartitionType.Variable">
            <summary>
            Variable
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreManifest">
            <summary>
            Webstore manifest class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreManifest.GetSecurityRoles">
            <summary>
            Returns a list of security roles associated with this manifest
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreManifest.GetKey">
            <summary>
            The key for this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Uid">
            <summary>
            Manifest Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Name">
            <summary>
            Manifest Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Version">
            <summary>
            Manifest Version.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Description">
            <summary>
            User defined description of the manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Topology">
            <summary>
            Topology of the manifest (SingleMaster, Multimaster, etc.)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.PartitionType">
            <summary>
            Type of partitioning scheme
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.PartitionCount">
            <summary>
            Count of number of partitions.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreManifestCollection">
            <summary>
            The WebstoreManifestCollection
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMetaData">
            <summary>
            The class that exposes all the the Webstore MetaData.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Instance">
            <summary>
            Gets the Class singleton instance
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.DefaultConfig">
            <summary>
            Gets the default config instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Sites">
            <summary>
            Gets the list of sites.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Item(System.String)">
            <summary>
            Gets the config instance for the given site
            </summary>
            <param name="SiteName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreConfigCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfigCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="SiteName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMonitoringProperty">
            <summary>
            WebstoreMonitoringProperty
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoringProperty.DataType">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoringProperty.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMonitoringPropertyCollection">
            <summary>
            Collection of servers in a WstConfig database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoringPropertyCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum">
            <summary>
            Information about the MonitoredDatum. This is used by the 
            monitoring agent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.Type">
            <summary>
            AssemblyName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.Properties">
            <summary>
            Properties
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.SamplingFrequency">
            <summary>
            SamplingFrequency
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.AggregationType">
            <summary>
            AggregationType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.AggregationInterval">
            <summary>
            AggrInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.StaleTime">
            <summary>
            StaleTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.RatePrecision">
            <summary>
            RatePrecision
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.ServerRoleUid">
            <summary>
            ServerRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.CollectAt">
            <summary>
            CollectAt
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfigurationInfo.Instance">
            <summary>
            Gets the singleton instance
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo">
            <summary>
            The instance of this class provides all information that is
            needed by the Monitoring agent and the self healing agent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.GetKey">
            <summary>
            GetKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.IsPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether this deployment needs to be polled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.RenewExpiration(System.DateTime)">
            <summary>
            Renews configuration expiration interval.
            </summary>
            <param name="dtConfigExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.PollSelfAdminInfo(System.Boolean)">
            <summary>
            Poll for self Admin Info
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.IsInitialized">
            <summary>
            Set to true after first call to get the SelfAdminInfo is made.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.PollingIntervalService">
            <summary>
            Gets the polling interval for service.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.PollingOffsetService">
            <summary>
            Gets the polling offset for service.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.Ticket">
            <summary>
            The ticket related to SelfAdminInfo.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.AlertRules">
            <summary>
            AlertRules.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.MonitoredData">
            <summary>
            Collection of MonitoredData.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.Actions">
            <summary>
            Collection of Actions.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.AlertProcesses">
            <summary>
            Collection of Healing Actions.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServer">
            <summary>
            Gives information about the server in the WstConfig database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Config">
            <summary>
            Gets the config database for this server
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.IPAddresses">
            <summary>
            Gets the collection of IPAddresses for this server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Cluster">
            <summary>
            Gets the cluster information for this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Databases">
            <summary>
            Gets a collection of WmoDatabase on this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Fileshares">
            <summary>
            Gets the collection of Fileshares on this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.ReplicationDistributionServer">
            <summary>
            Gets the replication distribution server for this server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Uid">
            <summary>
            Gets the Guid associated with this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Name">
            <summary>
            Gets the name of the server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.DataCenterName">
            <summary>
            Gets the datacenter the server belongs to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Description">
            <summary>
            Gets the description for the server as
            described in the WstConfig database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.DistributionDatabaseTemplateName">
            <summary>
            Gets the Distribution Database Template Name for the server as
            described in the WstConfig database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MirroringEndPointName">
            <summary>
            Gets the name of the registered mirroring endpoint name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MirroringEndPointPort">
            <summary>
            Gets the port number associated with the registered mirroring endpoint.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MirroringCompleteDomainName">
            <summary>
            Gets the complete domain name associated with the registered mirroring endpoint.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.ServerRoles">
            <summary>
            Server roles for this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MonitoredData">
            <summary>
            MonitoredData for this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.AlertRules">
            <summary>
            AlertRules for this server.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServerCollection">
            <summary>
            Collection of servers in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreServerCollection.Contains(System.Guid)">
            <summary>
            Does the server collection contain server corrosponding to the given GUID.
            </summary>
            <param name="svrUid"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerCollection.Item(System.String)">
            <summary>
            Gets the server object of the given name.
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServerRole">
            <summary>
            Webstore manifest class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreServerRole.GetKey">
            <summary>
            The key for this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Uid">
            <summary>
            ServerRole Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Name">
            <summary>
            ServerRole Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Description">
            <summary>
            ServerRole Description.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServerRoleCollection">
            <summary>
            The WebstoreServerRoleCollection
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSetting">
            <summary>
            Stores an individual settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSetting.Name">
            <summary>
            Name of the setting.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSetting.Uid">
            <summary>
            Uid of the setting.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreUserSettings">
            <summary>
            The user settings class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreUserSettings.#ctor(Microsoft.Webstore.MetaData.WebstoreConfig)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreUserSettings.GetSettingValue(System.String,System.String,System.String)">
            <summary>
            Gets the specified user setting
            </summary>
            <param name="settingName">The Setting name</param>
            <param name="deploymentName">The deployment name for which the setting is requested</param>
            <param name="clusterName">The cluster name for which the setting is requested</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreUserSettings.Key">
            <summary>
            Key for the object
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSettings">
            <summary>
            Stores the Webstore settings for a given object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.#ctor(Microsoft.Webstore.MetaData.WebstoreConfig)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetDbConnectionTimeoutSecs(System.String,System.String)">
            <summary>
            The Connection timeout value
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
            
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetDbConnectAttemptMax(System.String,System.String)">
            <summary>
            Max number of connection attempts for a database
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetResourceValidatePeriod">
            <summary>
            Time to wait in sec's before attempt to unblacklist a resource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetDbCommandTimeoutSecs(System.String,System.String)">
            <summary>
            The command timeout for database queries
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCollectPeriod">
            <summary>
            Timeperiod for counter collection
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCommandLatencyExcellent(System.String)">
            <summary>
            LatencyExcellent bucket boundary
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>        
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCommandLatencyGood(System.String)">
            <summary>
            LatencyGood bucket boundary
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCommandLatencyOK(System.String)">
            <summary>
            LatencyOk bucket boundary
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCommandLatencyPoor(System.String)">
            <summary>
            LatencyPoor bucket boundary
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetBlackListStaleTimeoutSecs(System.String,System.String)">
            <summary>
            Timeperiod after which a server gets removed from 
            the blacklist even if it is not blacklisted yet
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetPersistentFailureLogPeriod(System.String,System.String)">
            <summary>
            PersistentFailureLogPeriod
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMinGrowthPeriod(System.String)">
            <summary>
            What is the minimum time before the MCRL can be grown
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMaxGrowthPeriodOffset(System.String)">
            <summary>
            Max Offset from MinGrowthPeriod that 
            MCRL growth can be delayed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMaxPoolSize(System.String,System.String)">
            <summary>
            The maximum SQL pool size
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetLevelToResetConnectionPool(System.String,System.String)">
            <summary>
            The error level to reset the SQL connection pool. If error class is greater than or equal to the level, the connection pool will be cleaned.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableResetConnection(System.String,System.String)">
            <summary>
            Is reset connection on SqlConnection enabled
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetConcurrencyLimitStart(System.String)">
            <summary>
            The start value of MCRL, when app first starts up.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetConcurrencyLimitDelta(System.String)">
            <summary>
            The delta to be kept between MCRS and MCRL when 
            background thread reduces MCRL because of inactivity
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetConcurrencyLimitMinumum(System.String)">
            <summary>
            The minumum value for MCRL 
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableThrottling(System.String)">
            <summary>
            Is throttling of requests enabled
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableRampedGrowth(System.String)">
            <summary>
            Is ramped growth of MCRL enabled?
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableThrottledCmdFailover(System.String)">
            <summary>
            Should command execution failover if it is throtteled
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableLatencyBasedScaleback(System.String)">
            <summary>
            Should the latency based scaleback thread be enabled?
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableThrottlingOnCmdTimeout(System.String)">
            <summary>
            Should MCRL be reduced if webstore encounters 
            timeout errors
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetPercentBadRequestsThreshold(System.String)">
            <summary>
            The percent number of bad requests before webstore
            logic reduces MCRL.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetThrottlingQueueCapacity(System.String)">
            <summary>
            The number of requests of the throttling queue can accommodate.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetThrottlingQueueWarningRatio(System.String)">
            <summary>
            The threshold to give a warning if the queue exceeds the limits.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetThrottlingQueueStaleDuration(System.String)">
            <summary>
            The duration in the queue when the request will became stale
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetDataCenterName">
            <summary>
            The current client's datacenter name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetSqlFailoverErrors(System.String,System.String)">
            <summary>
            The current client's SqlFailoverErrors 
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetFileFailoverErrors(System.String,System.String)">
            <summary>
            The current client's FileFailoverErrors 
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetFailoverOnCommandTimeout(System.String,System.String)">
            <summary>
            FailoverOnCommandTimeout
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetLogCommandError(System.String)">
            <summary>
            GetLogCommandError
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetUserSettingPollingInterval">
            <summary>
            Gets the user settings polling interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetUserSettingPollingOffset">
            <summary>
            Gets the offset of polling of user settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerHeartBeatInterval">
            <summary>
            Gets the MasterController Heartbeat Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerMonDataPollingInterval">
            <summary>
            Gets the MasterController Monitored Data Polling Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerPerfDBPurgingInterval">
            <summary>
            Gets the MasterController PerfDB Purging Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerPerfDBPurgeStaleTime">
            <summary>
            Gets the MasterController PerfDB Stale Time
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerAlertPollingInterval">
            <summary>
            Gets the MasterController Alert Polling Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerAlertGenerateInterval">
            <summary>
            Gets the MasterController Alert Generate Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerAlertResolveInterval">
            <summary>
            Gets the MasterController Alert Resolve Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerMaxAlertProcessThreads">
            <summary>
            Gets the MasterController Max Alert Process Threads
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerMaxWaitBeforeResolve">
            <summary>
            Gets the MasterController Max Wait Before Resolve
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMonitoringAgentRecordHistoricalInformation">
            <summary>
            Gets the flag for the MonitoringAgent to Record Historical Information
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoMaxBGThreads">
            <summary>
            Gets maximum allowed back ground threads for the Wmo. Used in the WmoConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoDeploymentMaxThreads">
            <summary>
            Maximum allowed threads for setting up a deployment. This is an override setting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWstAgentMaxBGThreads">
            <summary>
            Maximum back ground threads used by the WstAgent for processing latency.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMonitoringWorkThreads">
            <summary>
            Max Monitoring threads.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMonitoringAgentWorkThreads">
            <summary>
            Max Monitoring agent threads.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolNoOnlineDbsNoPrimarySM">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolNoOnlineDbs">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolNoPrimariesSM">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolSomeDbsNotOnline">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolSomeDbsNotDefault">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolPrimDbNotDefault">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolNoSecondaries">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolLatencyHigherThanBucket">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolManVerDiffDepVer">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerNoOnlineDbs">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerNonOnlinePrimary">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerDBNotOnline">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerSomeDbsNotDefault">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerDBLatencyTooHigh">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerAlertSeverityWarning">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerAlertSeverityError">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolLatencyBucketDeployment">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolLatencyBucketServer">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerAlertSeverityWarningNum">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerAlertSeverityErrorNum">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolFont">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolAllowWstCommandsToPopupInNewWindow">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolShouldPollAlertData">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolShouldPollMonitoredData">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolAlertThreadPollInterval">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolAlertLoadDataRecentHours">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolMonitoredDataThreadPollInterval">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerStatusToSupressAlerts">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolStatusHtmlFile">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolStatusXmlFile">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolStatusXslFile">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolJobFrameworkStatusLastNDays">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoWaitActivePrimaryProcessTimeout">
            <summary>
            Gets the timeout to wait on Active Primary processes in the WMO.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoDefaultSqlCommandTimeout">
            <summary>
            Gets the timeout to wait for sql commands.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoDefaultBackupRestoreSqlCmdTimeout">
            <summary>
            Gets the timeout to wait for backup/restore commands.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoServerOperationMaxThreads">
            <summary>
            Max number of threads active during server level operations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWstMonitorMaxBGThreads">
            <summary>
            Max number of threads used for the Admin tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobStatusDeploymentName">
            <summary>
            Name of the JobStatus Deployment
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobManagerLeaseExpirationInterval">
             <summary>
            GetJobManagerLeaseExpirationInterval
             </summary>
             <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobManagerLeaseExpirationIntervalDelta">
             <summary>
            GetJobManagerLeaseExpirationIntervalDelta
             </summary>
             <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobPollingInterval">
            <summary>
            GetJobPollingInterval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobHeartBeatInterval">
            <summary>
            GetJobHeartBeatInterval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobHeartBeatIntervalDelta">
            <summary>
            GetJobHeartBeatIntervalDelta
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMaxJobAgentWorkers(System.String)">
            <summary>
            GetMaxJobAgentWorkers
            </summary>
            <param name="cluster"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobWorkersDirectory">
            <summary>
            Gets the directory from where the job framework jobs are located
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobStatusCleanUpInterval">
            <summary>
            Gets the JobStatusCleanUpInterval. This is used by the jobframework to cleanup old records
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobFrameworkAgentPort">
            <summary>
            Gets the JobFrameworkAgentPort. This is the port that the JobFrameworkAgent will listen on
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSettings.Key">
            <summary>
            Gets the key for this object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSettings.Config">
            <summary>
            Gets the parent config object
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDep_ClusterSettingsCollection">
            <summary>
            WebstoreDep_ClusterSettingsCollection 
            </summary>    
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSettingsCollection">
            <summary>
            WebstoreSettingsCollection
            </summary>    
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFailoverMode">
            <summary>
            Enumerates the different failover modes the client library uses.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.PrimaryOnly">
            <summary>
            Only try to primary resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.SecondaryThenPrimary">
            <summary>
            First try secondary resource and then primary.
            </summary>         
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.SecondaryOnly">
            <summary>
            Only try secondary resource
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.PrimaryThenSecondary">
            <summary>
            First try primary resource and then secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.PrimaryOrSecondary">
            <summary>
            Try either primary or secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.DefaultRead">
            <summary>
            Maps to one of the above types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.DefaultWrite">
            <summary>
            Maps to one of the above types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.WriteAllCopies">
            <summary>
            Used for WriteAllCopies topology.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDataPartitionStatus">
            <summary>
            The enumerator for datapartition status
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreDataPartitionStatus.ReadWrite">
            <summary>
            The datapartition can be written to and read from.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreDataPartitionStatus.ReadOnly">
            <summary>
            The datapartition can only be read from cannot be written to.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFssStatus">
            <summary>
            The Status of a Resource FSS.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFssStatus.NotDeployed">
            <summary>
            The fail safe set (SQL or File) is not deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFssStatus.Deployed">
            <summary>
            The fail safe set (SQL or File) is deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFssStatus.UpOrDowngrading">
            <summary>
            The SQL fail safe set is in progress of being upgraded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFssStatus.MovingData">
            <summary>
            Data is being moved to or from this fail safe set.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSecondaryType">
            <summary>
            Enumeration of different types of secondaries Wmo supports
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.NoSecondaries">
            <summary>
            No Secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.WriteAllCopies">
            <summary>
            Write to all copies. No replication between copies provided
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.SingleMaster">
            <summary>
            Push Replication from Primary to Secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.MultiMaster">
            <summary>
            Push replication from Primary to Secondary and from Secondary to primary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.WARA">
            <summary>
            Write All Read Any 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.Mirroring">
            <summary>
            Mirroring Replication
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSQLFss">
            <summary>
            Gives information about the SQLFSS in the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.ClusterPath">
            <summary>
            Gets the cluster path for the given fss.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.Databases">
            <summary>
            Gets a collection of databases in the Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.PrimaryDB">
            <summary>
            Gets the current primary for this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.DefaultPrimaryDB">
            <summary>
            Gets the default primary database for this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.ManifestUid">
            <summary>
            Gets the manifest UID for this SQLFSS.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.WitnessServer">
            <summary>
            Gets the WitnessServer for this SQLFSS.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.MirroringTimeoutValue">
            <summary>
            Gets the MirroringTimeoutValue for this SQLFSS.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.DatabaseTemplate">
            <summary>
            Gets the DatabaseTemplate for this SQLFSS.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSQLFssCollection">
            <summary>
            The collection of SQL Failsafesets.
            </summary>s
        </member>
        <member name="T:Microsoft.Webstore.Common.WstWorkItem">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.#ctor(System.Threading.WaitCallback)">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstThread">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(System.Threading.WaitCallback)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(Microsoft.Webstore.Common.WstWorkItem)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstThreadPool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxThreads"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            Defaults the state to NULL
            Defaults the timeout to infinite.
            </summary>
            <param name="threadProc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            Defaults the timeout to infinite.
            </summary>
            <param name="threadProc"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object,System.Int32)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            If millisecondsTimeout is reached, returns false, otherwise
            returns true.
            </summary>
            <param name="threadProc"></param>
            <param name="state"></param>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.WstCallback(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.Int32)">
            <summary>
            Returns a thread pool using the passed in value. If the value is less then
            1, DefaultMaximumThreads is used instead.
            </summary>
            <param name="threadCount"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.String)">
            <summary>
            Uses passed in string as a call into the System Centralized settings
            for the value. If the setting is missing, uses the default.
            </summary>
            <param name="centralizedSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.String,System.Int32)">
            <summary>
            Uses passed in string to get the centralized setting for the thread count.
            If the centralized setting does not exist or is less then 1, uses the
            requestedThreads parameter.
            </summary>
            <param name="centralizedSetting"></param>
            <param name="requestedThreads"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetCentralizedSettingOverride(System.String)">
            <summary>
            Returns the Setting that matches the settingEntry name. If the settingEntry does not exist
            in the WebstoreMetaData.WebstoreSettings class, it will return the default from this class.
            </summary>
            <param name="settingEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetSystemAvailableThreads">
            <summary>
            Retrieves the difference between the maximum number of thread pool
            threads, returned by GetMaxThreads, and the number currently active.
            http://msdn2.microsoft.com/en-us/library/system.threading.threadpool.getavailablethreads.aspx
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetSystemMaxThreads">
            <summary>
            Retrieves the number of requests to the thread pool that can be active
            concurrently. All requests above that number remain queued until thread
            pool threads become available.
            http://msdn2.microsoft.com/en-us/library/system.threading.threadpool.getmaxthreads.aspx
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.MaxThreads">
            <summary>
            Property to set or get the maximum number of threads allowed
            for this pool.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.ActiveThreads">
            <summary>
            ActiveThreads are the number of threads in use.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.IsFull">
            <summary>
            Indicates if the pool can accept more processes.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstTrace">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.RefreshTraceSwitches">
            <summary>
            Refreshes the trace switches.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.CreateLogFile(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.WriteLogFileLineIf(System.Boolean,System.Object)">
            <summary>
            
            </summary>
            <param name="condition"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.CloseLogFile">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceError(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceWarning(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceInfo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceVerbose(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.TraceDebug(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.LogExceptionEvent(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="exceptionMsgPrefix"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTrace.LogExceptionEvent(System.String,System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            
            </summary>
            <param name="exceptionMsgPrefix"></param>
            <param name="e"></param>
            <param name="st"></param>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.LogFileName">
            <summary>
            LogFileName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.GeneralTrace">
            <summary>
            GeneralTrace
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.LogFileTrace">
            <summary>
            LogFileTrace
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.WstDisplayVerbose">
            <summary>
            Display verbose message notifications on console
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.AdminToolDisplayVerbose">
            <summary>
            Display verbose message notifications on admin tool
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlStart">
            <summary>
            Trace begin execution of SQL commands on Deployments (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlCompleted">
            <summary>
            Trace execution completed of SQL commands Deployments (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlInfoMessages">
            <summary>
            Trace SQL Info Messages received from SQL Server during cmd execution (like print, etc)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceSqlError">
            <summary>
            Trace errors received from SQL when executing SQL commands on Deployments (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceCfgStart">
            <summary>
            Trace begin execution of SQL commands against Config DBs(true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceCfgCompleted">
            <summary>
            Trace execution completed of SQL commands against Config DBs(true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceCfgError">
            <summary>
            Trace errors received from SQL when executing SQL/WST commands against Config DBs (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceDtcInfo">
            <summary>
            Trace start/end of Distributed Transactions (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceAgentDB">
            <summary>
            Trace WmoSqlAgentDatabase low level database operations
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceAdminLockInfo">
            <summary>
            Trace start/end of Admin Locks (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceAdminLockVerbose">
            <summary>
            Trace more detailed AdminLock information (true/false)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTrace.TraceMoveData">
            <summary>
            Trace WstMoveData low level database operations
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstTimer">
            <summary>
            A Timer class based on System.Net.Datatime
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.#ctor">
            <summary>
            WstTimer constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.Start">
            <summary>
            Starts the timer (must be called before Stop()).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.Stop">
            <summary>
            Stops the timer (can be called repeatedly for progressive elapsed time).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstTimer.ToString">
            <summary>
            Gets the elapsed time as a string in HH:mm:ss.fff format
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.Ticks">
            <summary>
            Gets the elapsed time as number of Ticks
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.Seconds">
            <summary>
            Gets the elapsed time as number of Seconds
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.Milliseconds">
            <summary>
            Gets the elapsed time as number of Milliseconds
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstTimer.ElapsedTime">
            <summary>
            Gets the elapsed time as a System.TimeSpan
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Common.QueryExecute.WspBulkUpdateBatchExpirationInterval(System.Guid,System.String,System.Int32)">
            <summary>
            WspBulkUpdateBatchExpirationInterval
            </summary>
            <param name="statusId"></param>
            <param name="csvBatchIdsStr"></param>
            <param name="heartbeatInterval"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IPartition">
            <summary>
            An IPartition is located on a single machine. If it is a dynamic partition and it has split
            Machine should throw a PartitionException and the JE will call Repartition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IPartition.Repartition">
            <summary>
            Repartition should return a new list of partitions in case of a split
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IPartition.Machine">
            <summary>
            Get the machine where this partition is. May throw PartitionException if the partition is no
            longer on a single machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IPartition.Key">
            <summary>
            The key that uniquely identifies this partition
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IPartitionSet">
            <summary>
            An enumerable set of Ipartition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IPartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            add partition the the partition Set
            </summary>
            <param name="partition">The partition to add</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IPartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            This is called by the JobEngine at regular intervals,to
            get a list of changes since it was called the last time.        
            </summary>
            <param name="addedPartitions">List of added partitions. Null if nothing was added</param>
            <param name="droppedPartitions">List of dropped partitions. Null if nothing was dropped</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IPartitionSet.Count">
            <summary>
            Gets count of partitions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobStep">
            <summary>
            One step of a job - executed sequentially
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            For a job worker, called by the JobAgent.
            This is called by the agent prior to calling the Run function for the worker.
            This gives worker a chance to setup heartbeating thread, and to do other
            initialization activites that might be needed
            </summary>
            <param name="ja">The MBR jobAgent object, to hearbeat with</param>
            <param name="localMachine">this machine</param>
            <param name="location">Location where the worker will run</param>
            <param name="userArgs">The arguments that the user passed</param>
            <param name="batchId">worker identifier. Required for heart beating with JobAgent</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            For a job worker, called by the JobAgent.
            This is the function where the worker writes to job code.
            </summary>
            <param name="inputSet">Set of Input partitions that the worker should work on</param>
            <param name="outputSet">Set of Output partition. This is for future use</param>
            <param name="statusCode">The job run status. 0 = Pass, anything else = job failure. 
            The JobEngine will use this status code to determine if it needs to reschedule this 
            batch of work again.
            </param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Add(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Add partitionSet
            </summary>
            <param name="inputSet"></param>
            <param name="outputSet"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Finish">
            <summary>
            Job step finish. Called by the JobEngine on the worker.
            This gives the worker the opportunity to stop the Heart beat 
            thread and do other cleanup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStep.Alive">
            <summary>
            Heartbeat
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStep.AcceptAdd">
            <summary>
            Does this job step accept adding of new partitionset
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobMain">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobMain.Start(System.String,System.Int32,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.String)">
            <summary>
            Implemented by the job implementor (JobCoordinator side)
            JobEngine transfers control by calling Start, where the 
            code creates instance of the Job class and add job steps.
            Also this lets users create their own implementation of
            the IPartitionSet and IPartition and pass to the JobEngine.
            Then the user code on the worker side can typecast to the correct
            type and get a much richer partitionset/partition class, with 
            functionality required for a particular job.
            </summary>
            <param name="jobName">Name of the Job</param>
            <param name="dop">Degree of Parallelism</param>
            <param name="batchOption">Batching option of partition set</param>
            <param name="location">Location where the worker shuld run</param>
            <param name="userArgs">Arguments passed by the user</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.BatchOption">
            <summary>
            Do we batch the work based on the input partitions, the output partitions or not at all?
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.BatchOption.DontBatch">
            <summary>
            DontBatch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.BatchOption.BatchByInput">
            <summary>
            BatchByInput
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.BatchOption.BatchByOutput">
            <summary>
            BatchByOutput 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IMachineSelector">
            <summary>
            Returns an iterator of machines through a machine class - Machines do not have to be returned only once
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IMachineSelector.GetMachines">
            <summary>
            Get the required machine enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.LocationType">
            <summary>
            Determines where the workers are spawned
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.Void">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.MachineClass">
            <summary>
            MachineClass
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.SameAsBatch">
            <summary>
            SameAsBatch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.Local">
            <summary>
            Use Local
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobExecutionStatus">
            <summary>
            Enum used to update job status in db
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Running">
            <summary>
            Job is running
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Pass">
            <summary>
            Job Passed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Fail">
            <summary>
            JobFailed
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector">
            <summary>
            Round robin machine selector class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector.#ctor(System.String,System.Int32)">
            <summary>
            Contsturctor
            </summary>
            <param name="machineClass"></param>
            <param name="machineCount"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector.GetMachines">
            <summary>
            Machines enumbrator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Location">
            <summary>
            A location for the worker
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Location.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Location.CreateLocationWithRandomMachineInClass(System.String,System.Int32)">
            <summary>
            Creates a location for a given machine class
            </summary>
            <param name="machineClass"></param>
            <param name="machineCount"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Location.GetNextMachineInClass">
            <summary>
            Next machine in class
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.Location.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.Location.SameAsBatch">
            <summary>
            SameAsBatch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.Location.Local">
            <summary>
            Local
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Location.LocationType">
            <summary>
            gets location type
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Location.MachineClass">
            <summary>
            Gets the machine class if it has been set
            otherwise null
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.StepType">
            <summary>
            Type of job step
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StepType.MapStep">
            <summary>
            MapStep
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StepType.XProductStep">
            <summary>
            ProductStep
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RetrySettings">
            <summary>
            Max number of retries and delay between retries
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RetrySettings.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RetrySettings.FailoverRetry">
            <summary>
            RetrySettings
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RetrySettings.InfiniteRetry">
            <summary>
            InfiniteRetry
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.RetrySettings.RetryCount">
            <summary>
            Retry count
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.RetrySettings.RetryDelay">
            <summary>
            Retry delay
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionMapping">
            <summary>
            PartitionMapping
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.AssemblyInformation">
            <summary>
            Information about worker assembly
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.AssemblyInformation.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="assemblyName"></param>
            <param name="version"></param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.AssemblyInformation.AssemblyName">
            <summary>
            gets AssemblyName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.AssemblyInformation.Version">
            <summary>
            gets Version
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobStepProperties">
            <summary>
            JobStep properties
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.JobStepType">
            <summary>
            JobType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.BatchOption">
            <summary>
            BatchOptions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.Location">
            <summary>
            Location 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.DOP">
            <summary>
            Degree Of Parallelism
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.PartitionMapping">
            <summary>
            PartitionMapping 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.StepType">
            <summary>
            StepType 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.InputSet">
            <summary>
            IPartitionSet - Input
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.OutputSet">
            <summary>
            IPartitionSet - output
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.RetrySettings">
            <summary>
            RetrySettings 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.UserArgs">
            <summary>
            User given arguments
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.AssemblyInfo">
            <summary>
            AssemblyInformation 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.IsSafeMode">
            <summary>
            IsSafeMode 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJob">
            <summary>
            IJob
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.AddStep(Microsoft.Webstore.JobEngine.IJobStepProperties)">
            <summary>
            Add job step
            </summary>
            <param name="jobStepProperties"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.Run">
            <summary>
            Run
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.Submit(System.AsyncCallback,System.Object)">
            <summary>
            Submit
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJob.JobName">
            <summary>
            Gets the job name
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobEngine">
            <summary>
            IJobEngine
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.RunJob(Microsoft.Webstore.JobEngine.IJob)">
            <summary>
            RunJob
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.IsAlive(System.Int32)">
            <summary>
            IsAlive
            </summary>
            <param name="batchId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the JobAgent to update status (human readable) for
            workers. JobAgent passes the status given to it by workers.
            This status ultimately gets logged to the jobDetails table
            in the jobStatus deployment
            </summary>
            <param name="batchId">JobEngine issued batchId</param>
            <param name="status"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobAgent">
            <summary>
            IJobAgent
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.CreateNewAsyncExecuteBatch(Microsoft.Webstore.JobEngine.IJobEngine,System.String,Microsoft.Webstore.JobEngine.Location,System.Int32,System.String,System.String,System.Version,System.Object,System.Boolean)">
            <summary>
            CreateNewAsyncExecuteBatch
            </summary>
            <param name="je"></param>
            <param name="machine"></param>
            <param name="location"></param>
            <param name="batchId"></param>
            <param name="jobStepTypeFullName"></param>
            <param name="assemblyName"></param>
            <param name="version"></param>
            <param name="userArgs"></param>
            <param name="isSafeMode"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.IsAlive(System.Int32)">
            <summary>
            IsAlive
            </summary>
            <param name="batchId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the worker to update status (human readable)
            This status ultimately gets logged to the jobDetails table
            in the jobStatus deployment
            </summary>
            <param name="batchId">JobAgent issues batchId</param>
            <param name="status"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor">
            <summary>
            IASyncExecuteBatchMonitor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.Finish(System.Int32,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32)">
            <summary>
            Finish
            </summary>
            <param name="batchId"></param>
            <param name="failedSet"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.RenewLease(System.Int32)">
            <summary>
            RenewLease
            </summary>
            <param name="workItemId"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IASyncExecuteBatch">
            <summary>
            IASyncExecuteBatch
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.Start(Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Start
            </summary>
            <param name="partitionSet"></param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.Monitor">
            <summary>
            Monitor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.ExecuteDelegate">
            <summary>
            ExecuteDelegate 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.IsAlive">
            <summary>
            Is the batch alive
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JEException">
            <summary>
            JEException 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobAgentException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="errorCode"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="errorCode"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="errorCode"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobAgentException.ErrorCode">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionException">
            <summary>
            PartitionException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JETrackingHandler">
            <summary>
            This class is required for workaround on how .net remoting works.
            When we move to WCF, we should not require it.
            Right now are making sure that if we are trying to create an 
            ObjRef for the JE object, we only pass the tcp channel data across.
            We found this bug when WstAgent used JE. WstAgent registers a custom
            channel and was causing issues, as creating of objRef was putting 
            the custom channel data, and that data was not present on the JobAgent
            side, thus resulting in an Exception on the JobAgent side.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.LocalJobAgent.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the worker to update status (human readable)
            This status ultimately gets logged to the jobDetails table
            in the jobStatus deployment
            </summary>
            <param name="batchId">JobAgent issues batchId</param>
            <param name="status"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JE">
            <summary>
            JobEngine class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.InitializeLifetimeService">
            <summary>
            Make the JE lease eternal so that the remoting server doesn't get GCed
            </summary>
            <returns></returns>
            
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.RunJob(Microsoft.Webstore.JobEngine.IJob)">
            <summary>
            RunJob
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.IsAlive(System.Int32)">
            <summary>
            IsAlive-heartbeat
            </summary>
            <param name="batchId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the JobAgent to update status (human readable) for
            workers. JobAgent passes the status given to it by workers.
            This status ultimately gets logged to the jobDetails table
            in the jobStatus deployment
            </summary>
            <param name="batchId">JobEngine issued batchId</param>
            <param name="status"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.CreateNewAsyncExecuteBatch(System.String,Microsoft.Webstore.JobEngine.IJobStepProperties,System.Int32,System.String@)">
            <summary>
            Creates new asyncexecute batch
            </summary>
            <param name="machine"></param>
            <param name="jobStepProperties"></param>
            <param name="batchId"></param>
            <param name="workerMachine"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.CreateRunner(Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.IJobStepProperties,Microsoft.Webstore.JobEngine.JobPartitionMapping)">
            <summary>
            Create a runner based on the batching option. The runner knows how to execute a step
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.RunProduct(System.String,Microsoft.Webstore.JobEngine.IJobStepProperties,Microsoft.Webstore.JobEngine.JobPartitionMapping)">
            <summary>
            Run the step - basically compose a Retry policy with a Batching policy. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.ParseArgsAndStart(System.String[],Microsoft.Webstore.JobEngine.JE.Start)">
            <summary>
            Parse the command line arguments that were passed by the Job Service then call the Start function
            </summary>
            <param name="args"></param>
            <param name="startFunc"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JE.Singleton">
            <summary>
            Job Engine singleton instance
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JE.Start">
            <summary>
            The start function delegate
            </summary>
            <param name="jobName"></param>
            <param name="dop"></param>
            <param name="batchOption"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RunParams">
            <summary>
            RunParams struct
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RunParams.inputSet">
            <summary>
            InputSet
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RunParams.outputSet">
            <summary>
            output set
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RunParams.Null">
            <summary>
            Null run param
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RunOneStep.ExecuteStepForBatch(System.String,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            Get a worker - Initialize it, call Run() on it and finalize it.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RunOneStepByInput">
            <summary>
            The difference between the two RunOneStep is whether we batch by input or by output. 
            If we batch by input, we slice the input partition sets by machine and we send the output partition set unchanged
            set as is to the workers. If we batch by output, it is the other way round.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobStepProperties">
            <summary>
            Impelements the IJobStepProperties
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.#ctor(System.Type,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.Int32,Microsoft.Webstore.JobEngine.StepType,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Constructor
            </summary>
            <param name="jobStepType"></param>
            <param name="batchOption"></param>
            <param name="location"></param>
            <param name="DOP"></param>
            <param name="stepType"></param>
            <param name="inputSet"></param>
            <param name="outputSet"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.#ctor(System.Type,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.Int32,Microsoft.Webstore.JobEngine.StepType,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.AssemblyInformation)">
            <summary>
            Constructor
            </summary>
            <param name="jobStepType"></param>
            <param name="batchOption"></param>
            <param name="location"></param>
            <param name="DOP"></param>
            <param name="stepType"></param>
            <param name="inputSet"></param>
            <param name="outputSet"></param>
            <param name="assemblyInformation"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.SetRetryCount(Microsoft.Webstore.JobEngine.RetrySettings)">
            <summary>
            Sets retry count
            </summary>
            <param name="retrySettings"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.SetPartitionMapping(Microsoft.Webstore.JobEngine.PartitionMapping)">
            <summary>
            Sets PartitionMapping
            </summary>
            <param name="partitionMappingFunc"></param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.JobStepType">
            <summary>
            Gets JobStepType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.BatchOption">
            <summary>
            Gets BatchOption
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.Location">
            <summary>
            Gets Location
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.DOP">
            <summary>
            Gets Degree of Parallelism
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.PartitionMapping">
            <summary>
            Gets PartitionMapping 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.StepType">
            <summary>
            Gets StepType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.InputSet">
            <summary>
            Gets InputSet
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.OutputSet">
            <summary>
            Get/Set output set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.RetrySettings">
            <summary>
            Get/Set retry settings
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.UserArgs">
            <summary>
            Get/Set user args
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.AssemblyInfo">
            <summary>
            Gets worker assembly information
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.IsSafeMode">
            <summary>
            IsSafeMode: Should the worker be started in seperate app domain
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Job">
            <summary>
            Implements the IJob interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.#ctor(System.String)">
            <summary>
            contstructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.AddStep(Microsoft.Webstore.JobEngine.IJobStepProperties)">
            <summary>
            AddStep
            </summary>
            <param name="jobStepProperties"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.Run">
            <summary>
            Run job
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.Submit(System.AsyncCallback,System.Object)">
            <summary>
            Submit async job
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Job.JobName">
            <summary>
            Gets the job name
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobStepWorker">
            <summary>
            JobStepWorker is the base class from which a worker should derive from.
            It has the implementation of the keep alive timer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.InitializeLifetimeService">
            <summary>
            Make the JE lease eternal so that the remoting server doesn't get GCed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.InitWorker(Microsoft.Webstore.JobEngine.IJobAgent,System.String)">
            <summary>
            Start the timer which pings the JE
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.StopWorker">
            <summary>
            Stop the timer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.UpdateStatus(System.String)">
            <summary>
            Updates the worker status with the JobAgent
            </summary>
            <param name="workerStatus"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Int32)">
            <summary>
            init the step worker
            </summary>
            <param name="je"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.Finish">
            <summary>
            Work finish
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.Add(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            add partition set
            </summary>
            <param name="inputSet"></param>
            <param name="outputSet"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.Aborted">
            <summary>
            IsAborted
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.LocalMachine">
            <summary>
            LocalMachine name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.BatchId">
            <summary>
            batch id
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.Alive">
            <summary>
            Heartbeat
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.AcceptAdd">
            <summary>
            accepts add partition or not
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachineInfo">
            <summary>
            Represents a machine in the Autopilon environment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.#ctor(System.String,System.Net.IPAddress,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="IP"></param>
            <param name="type"></param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.Name">
            <summary>
            Gets or sets the name of the machine.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.IP">
             <summary>
            Gets or sets the IP of the machine. 
             </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.Type">
            <summary>
            Gets or sets the Type of the machine. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachineSet">
            <summary>
            Adding twice the same machine to the set does not make a new entry.
            Note that the hash table is not serialized - so this guarantee does not stand once the
            set is sent across the wire
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionSet`1">
            <summary>
            PartitionSet class
            </summary>
            <typeparam name="Partition"></typeparam>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.#ctor">
            <summary>
            PartitionSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add
            </summary>
            <param name="partition"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Refresh partition set
            </summary>
            <param name="addedPartitions"></param>
            <param name="droppedPartitions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.Contains(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Equality based on IPartition.Key
            </summary>
            <param name="partition"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.PartitionSet`1.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.PartitionSet`1.Item(System.Int32)">
            <summary>
            Indexor
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineSet.#ctor">
            <summary>
            MachineSet
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add
            </summary>
            <param name="partition"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachinePartition">
            <summary>
            MachinePartition 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.Repartition">
            <summary>
            Repartition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.#ctor(System.String)">
            <summary>
            MachinePartition
            </summary>
            <param name="machine"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.Machine">
            <summary>
            Machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition">
            <summary>
            MachineIPPartition 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition.#ctor(Microsoft.Webstore.JobEngine.Partitions.MachineInfo)">
            <summary>
            MachineIPPartition 
            </summary>
            <param name="mi"></param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition.IP">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet">
            <summary>
            WebstoreSqlPartitionSet 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.#ctor(System.String)">
            <summary>
            RoleBasedMachinePartitionSet
            </summary>
            <param name="serverRoleName"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.Init">
            <summary>
            Init
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add
            </summary>
            <param name="partition"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Refresh
            </summary>
            <param name="addedPartitions"></param>
            <param name="droppedPartitions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition">
            <summary>
            RoleBasedMachinePartition 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.Repartition">
            <summary>
            Repartition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.#ctor(System.String,System.String)">
            <summary>
            RoleBasedMachinePartition
            </summary>
            <param name="machine"></param>
            <param name="serverRole"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.Machine">
            <summary>
            Machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.ServerRole">
            <summary>
            Gets the serverRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ExecuteDelegate">
            <summary>
            Execute delegate
            </summary>
            <param name="partitionSet"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ExecuteBatchDelegate">
            <summary>
            Execute batch delegate
            </summary>
            <param name="machine"></param>
            <param name="partitionSet"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ASyncExecuteBatch">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.#ctor(System.String,Microsoft.Webstore.JobEngine.IJobStep,System.Int32)">
            <summary>
            ASyncExecuteBatch ()
            </summary>
            <param name="machine"></param>
            <param name="jobStep"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.Start(Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Start
            </summary>
            <param name="partitionSet"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.ThreadStart">
            <summary>
            ThreadStart
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.Monitor">
            <summary>
            Monitor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.ExecuteDelegate">
            <summary>
            Execute delegate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.IsAlive">
            <summary>
            IsAlive
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionQueue">
            <summary>
            PartitionQueue
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionQueue.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Webstore.JobEngine.IPartition})">
            <summary>
            PartitionQueue
            </summary>
            <param name="partitionSet"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionQueue.GetNext">
            <summary>
            GetNext
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.WorkDescription.RenewLease">
            <summary>
            RenewLease
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.WorkDescription.IsAlive">
            <summary>
            IsAlive
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.BatchExecuteMonitor.InitializeLifetimeService">
            <summary>
            Make the JE lease eternal so that the remoting server doesn't get GCed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ExecutionPool.StartWork">
            <summary>
            After workitems have been submitted, this fn
            is responsible to start the job workers and
            wait till they all finish. In the mean time if
            there are failures, this function reschedules the failed
            items.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.CannotCreateRemoteBatch">
            <summary>
            The AsyncExecuteBatch returned null. It could not be created on remote machine
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.UnknownJobRunFailure">
            <summary>
            The jobStep.Run() threw exception. 
            Enable tracing to get more details. Also check NT events
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AsyncExecuteBatchFailed">
            <summary>
            Failure in AsyncExecuteBatch::ThreadStart function. 
            Look at NT events for details
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.HeartBeatFailure">
            <summary>
            Heartbeat failure for this batchID
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AbortActiveWorkItemsRetryExceeded">
            <summary>
            Aborting workItem as retry count exceeded
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AbortActiveWorkItemsToAddPartitions">
            <summary>
            Aborting workItems to add partition to existing batch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AbortActiveWorkItemsPartitionDropped">
            <summary>
            Aborting work item as partition has been dropped
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.NoWorkItemsSubmitted">
            <summary>
            Job could not complete as no work items were submitted.
            This can be caused because jobworkers were being tried 
            to be scheduled on machines that are in different DataCenter
            from that of the JobCoordinator.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ThreadPoolThrottle">
            <summary>
            A wrapper around the System Thread Pool. We place a semaphore so that we can limit the number of
            work items
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.#ctor(System.Int32)">
            <summary>
            ThreadPoolThrottle
            </summary>
            <param name="maximumAllowed"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            QueueUserWorkItem
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            QueueUserWorkItem
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JCArguments">
            <summary>
            JCArguments
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JCArguments.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.Dop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobBatchOption">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobLocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.UserArguments">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobAssemblyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.MachineClass">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.NumberOfMachines">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.RetryCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.RetryInterval">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet">
            <summary>
            WebstoreSqlPartitionSet 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.#ctor(System.String)">
            <summary>
            WebstoreSqlPartitionSet 
            </summary>
            <param name="deploymentName"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.Init">
            <summary>
            Init
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add
            </summary>
            <param name="partition"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Refresh
            </summary>
            <param name="addedPartitions"></param>
            <param name="droppedPartitions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition">
            <summary>
            WebstoreSqlPartition 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.#ctor(System.String,System.Int32,System.String)">
            <summary>
            WebstoreSqlPartition
            </summary>
            <param name="deploymentName"></param>
            <param name="fssId"></param>
            <param name="machine"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Repartition">
            <summary>
            Repartition
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.SqlFss">
            <summary>
            SqlFss
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Machine">
            <summary>
            Machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Database">
            <summary>
            Database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet">
            <summary>
            WebstoreSqlPartitionSet 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.#ctor(System.String)">
            <summary>
            WebstoreFileSharePartitionSet
            </summary>
            <param name="deploymentName"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.Init">
            <summary>
            Init
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add
            </summary>
            <param name="partition"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Refresh
            </summary>
            <param name="addedPartitions"></param>
            <param name="droppedPartitions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition">
            <summary>
            WebstoreSqlPartition 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.#ctor(System.String,System.Int32,System.String)">
            <summary>
            WebstoreSqlPartition
            </summary>
            <param name="deploymentName"></param>
            <param name="fssId"></param>
            <param name="machine"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Repartition">
            <summary>
            Repartition
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.FileFss">
            <summary>
            SqlFss
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Machine">
            <summary>
            Machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Share">
            <summary>
            Database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstClientCategoryInstaller">
            <summary>
            Category installer for the WstClient event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstClientCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstClientEvents">
            <summary>
            Events in the WstClient module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstClientEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstClientEvents.UnexpectedRecoverableExceptionValue">
            <summary>
            EventDefinition for UnexpectedRecoverableException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.LogUnexpectedRecoverableException(System.String,System.String)">
            <summary>
            Method to log an event of type UnexpectedRecoverableException.
            </summary>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="exceptionStack">Argument exceptionStack for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.LogUnexpectedRecoverableException(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UnexpectedRecoverableException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="exceptionStack">Argument exceptionStack for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstClientEvents.UnexpectedFatalExceptionValue">
            <summary>
            EventDefinition for UnexpectedFatalException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.LogUnexpectedFatalException(System.String,System.String)">
            <summary>
            Method to log an event of type UnexpectedFatalException.
            </summary>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="exceptionStack">Argument exceptionStack for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.LogUnexpectedFatalException(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UnexpectedFatalException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="exceptionStack">Argument exceptionStack for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstClientEvents.UnexpectedRecoverableErrorValue">
            <summary>
            EventDefinition for UnexpectedRecoverableError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.LogUnexpectedRecoverableError(System.String,System.String)">
            <summary>
            Method to log an event of type UnexpectedRecoverableError.
            </summary>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
            <param name="errorStack">Argument errorStack for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientEvents.LogUnexpectedRecoverableError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UnexpectedRecoverableError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
            <param name="errorStack">Argument errorStack for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstClientEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstClientEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstClientEvents.UnexpectedRecoverableException">
            <summary>
              Gets the EventDefinition for the UnexpectedRecoverableException.
            </summary>
            <value>The EventDefinition for the UnexpectedRecoverableException</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstClientEvents.UnexpectedFatalException">
            <summary>
              Gets the EventDefinition for the UnexpectedFatalException.
            </summary>
            <value>The EventDefinition for the UnexpectedFatalException</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstClientEvents.UnexpectedRecoverableError">
            <summary>
              Gets the EventDefinition for the UnexpectedRecoverableError.
            </summary>
            <value>The EventDefinition for the UnexpectedRecoverableError</value>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ThrottlingCategoryInstaller">
            <summary>
            Category installer for the Throttling event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ThrottlingEvents">
            <summary>
            Events in the Throttling module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestIncrementAttemptValue">
            <summary>
            EventDefinition for MaxConcurrentRequestIncrementAttempt
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestIncrementAttempt(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncrementAttempt.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestIncrementAttempt(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncrementAttempt with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestIncrementedValue">
            <summary>
            EventDefinition for MaxConcurrentRequestIncremented
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestIncremented(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncremented.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestIncremented(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncremented with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestIncrementDeniedDueToBadLatencyValue">
            <summary>
            EventDefinition for MaxConcurrentRequestIncrementDeniedDueToBadLatency
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestIncrementDeniedDueToBadLatency(System.String,System.String,System.Int32,System.Int32,System.DateTime)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncrementDeniedDueToBadLatency.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="percentBadRequest">Argument percentBadRequest for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestIncrementDeniedDueToBadLatency(System.String,System.String,System.Int32,System.Int32,System.DateTime,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncrementDeniedDueToBadLatency with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="percentBadRequest">Argument percentBadRequest for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestDeniedDueToMaxPoolSizeValue">
            <summary>
            EventDefinition for MaxConcurrentRequestDeniedDueToMaxPoolSize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestDeniedDueToMaxPoolSize(System.String,System.String,System.Int32,System.Int32,System.Int32,System.DateTime)">
            <summary>
            Method to log an event of type MaxConcurrentRequestDeniedDueToMaxPoolSize.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="maxPoolSize">Argument maxPoolSize for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestDeniedDueToMaxPoolSize(System.String,System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestDeniedDueToMaxPoolSize with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="maxPoolSize">Argument maxPoolSize for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestDeniedDueToMinumumGrowthPeriodValue">
            <summary>
            EventDefinition for MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestDeniedDueToMinumumGrowthPeriod(System.String,System.String,System.Int32,System.Int32,System.DateTime)">
            <summary>
            Method to log an event of type MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestDeniedDueToMinumumGrowthPeriod(System.String,System.String,System.Int32,System.Int32,System.DateTime,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.RequestDeniedDueToThrottlingValue">
            <summary>
            EventDefinition for RequestDeniedDueToThrottling
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogRequestDeniedDueToThrottling(System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Method to log an event of type RequestDeniedDueToThrottling.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogRequestDeniedDueToThrottling(System.String,System.String,System.Int32,System.DateTime,System.Exception)">
            <summary>
            Method to log an event of type RequestDeniedDueToThrottling with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestLimitReductionAttemptValue">
            <summary>
            EventDefinition for MaxConcurrentRequestLimitReductionAttempt
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestLimitReductionAttempt(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReductionAttempt.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="maxCRL">Argument maxCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="backgroundThreadSleepTime">Argument backgroundThreadSleepTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestLimitReductionAttempt(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReductionAttempt with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="maxCRL">Argument maxCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="backgroundThreadSleepTime">Argument backgroundThreadSleepTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestLimitReductionValue">
            <summary>
            EventDefinition for MaxConcurrentRequestLimitReduction
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestLimitReduction(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Single,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReduction.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMaxCRL">Argument oldMaxCRL for formatting the event text.</param>
            <param name="newMaxCRL">Argument newMaxCRL for formatting the event text.</param>
            <param name="reason">Argument reason for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="percentBadRequest">Argument percentBadRequest for formatting the event text.</param>
            <param name="concurrencyLimitDelta">Argument concurrencyLimitDelta for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestLimitReduction(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Single,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReduction with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMaxCRL">Argument oldMaxCRL for formatting the event text.</param>
            <param name="newMaxCRL">Argument newMaxCRL for formatting the event text.</param>
            <param name="reason">Argument reason for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="percentBadRequest">Argument percentBadRequest for formatting the event text.</param>
            <param name="concurrencyLimitDelta">Argument concurrencyLimitDelta for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestLimitReductionToMinumumValue">
            <summary>
            EventDefinition for MaxConcurrentRequestLimitReductionToMinumum
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestLimitReductionToMinumum(System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReductionToMinumum.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="minumumValue">Argument minumumValue for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogMaxConcurrentRequestLimitReductionToMinumum(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReductionToMinumum with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="minumumValue">Argument minumumValue for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.ResettingThrottlingCountersValue">
            <summary>
            EventDefinition for ResettingThrottlingCounters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogResettingThrottlingCounters(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32)">
            <summary>
            Method to log an event of type ResettingThrottlingCounters.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="maxCRL">Argument maxCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="backgroundThreadSleepTime">Argument backgroundThreadSleepTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogResettingThrottlingCounters(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type ResettingThrottlingCounters with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="maxCRL">Argument maxCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="backgroundThreadSleepTime">Argument backgroundThreadSleepTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.ScaleBackingExceptionValue">
            <summary>
            EventDefinition for ScaleBackingException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogScaleBackingException">
            <summary>
            Method to log an event of type ScaleBackingException.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogScaleBackingException(System.Exception)">
            <summary>
            Method to log an event of type ScaleBackingException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.QueueSizeCapacityRatioLimitReachedValue">
            <summary>
            EventDefinition for QueueSizeCapacityRatioLimitReached
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogQueueSizeCapacityRatioLimitReached(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method to log an event of type QueueSizeCapacityRatioLimitReached.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="queueSize">Argument queueSize for formatting the event text.</param>
            <param name="queuCapacity">Argument queuCapacity for formatting the event text.</param>
            <param name="queueWarningRatio">Argument queueWarningRatio for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogQueueSizeCapacityRatioLimitReached(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type QueueSizeCapacityRatioLimitReached with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="queueSize">Argument queueSize for formatting the event text.</param>
            <param name="queuCapacity">Argument queuCapacity for formatting the event text.</param>
            <param name="queueWarningRatio">Argument queueWarningRatio for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ThrottlingEvents.QueueCapacityReachedValue">
            <summary>
            EventDefinition for QueueCapacityReached
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogQueueCapacityReached(System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type QueueCapacityReached.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="queuCapacity">Argument queuCapacity for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ThrottlingEvents.LogQueueCapacityReached(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type QueueCapacityReached with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="queuCapacity">Argument queuCapacity for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestIncrementAttempt">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestIncrementAttempt.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestIncrementAttempt</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestIncremented">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestIncremented.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestIncremented</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestIncrementDeniedDueToBadLatency">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestIncrementDeniedDueToBadLatency.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestIncrementDeniedDueToBadLatency</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestDeniedDueToMaxPoolSize">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestDeniedDueToMaxPoolSize.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestDeniedDueToMaxPoolSize</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.RequestDeniedDueToThrottling">
            <summary>
              Gets the EventDefinition for the RequestDeniedDueToThrottling.
            </summary>
            <value>The EventDefinition for the RequestDeniedDueToThrottling</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestLimitReductionAttempt">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestLimitReductionAttempt.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestLimitReductionAttempt</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestLimitReduction">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestLimitReduction.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestLimitReduction</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.MaxConcurrentRequestLimitReductionToMinumum">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestLimitReductionToMinumum.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestLimitReductionToMinumum</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.ResettingThrottlingCounters">
            <summary>
              Gets the EventDefinition for the ResettingThrottlingCounters.
            </summary>
            <value>The EventDefinition for the ResettingThrottlingCounters</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.ScaleBackingException">
            <summary>
              Gets the EventDefinition for the ScaleBackingException.
            </summary>
            <value>The EventDefinition for the ScaleBackingException</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.QueueSizeCapacityRatioLimitReached">
            <summary>
              Gets the EventDefinition for the QueueSizeCapacityRatioLimitReached.
            </summary>
            <value>The EventDefinition for the QueueSizeCapacityRatioLimitReached</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ThrottlingEvents.QueueCapacityReached">
            <summary>
              Gets the EventDefinition for the QueueCapacityReached.
            </summary>
            <value>The EventDefinition for the QueueCapacityReached</value>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.BlacklistingCategoryInstaller">
            <summary>
            Category installer for the Blacklisting event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.BlacklistingEvents">
            <summary>
            Events in the Blacklisting module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.ResourceBlacklistedValue">
            <summary>
            EventDefinition for ResourceBlacklisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogResourceBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type ResourceBlacklisted.
            </summary>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogResourceBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ResourceBlacklisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.IpUnBlacklistedValue">
            <summary>
            EventDefinition for IpUnBlacklisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogIpUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Double)">
            <summary>
            Method to log an event of type IpUnBlacklisted.
            </summary>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogIpUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Double,System.Exception)">
            <summary>
            Method to log an event of type IpUnBlacklisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.ResourceUnBlacklistedValue">
            <summary>
            EventDefinition for ResourceUnBlacklisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogResourceUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.Double)">
            <summary>
            Method to log an event of type ResourceUnBlacklisted.
            </summary>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogResourceUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.Double,System.Exception)">
            <summary>
            Method to log an event of type ResourceUnBlacklisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.ResourceCannotBeUnBlacklistedValue">
            <summary>
            EventDefinition for ResourceCannotBeUnBlacklisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogResourceCannotBeUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.Double)">
            <summary>
            Method to log an event of type ResourceCannotBeUnBlacklisted.
            </summary>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogResourceCannotBeUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.Double,System.Exception)">
            <summary>
            Method to log an event of type ResourceCannotBeUnBlacklisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.UnblacklistingExceptionValue">
            <summary>
            EventDefinition for UnblacklistingException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogUnblacklistingException">
            <summary>
            Method to log an event of type UnblacklistingException.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogUnblacklistingException(System.Exception)">
            <summary>
            Method to log an event of type UnblacklistingException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.SyncingDataStructureValue">
            <summary>
            EventDefinition for SyncingDataStructure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogSyncingDataStructure">
            <summary>
            Method to log an event of type SyncingDataStructure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogSyncingDataStructure(System.Exception)">
            <summary>
            Method to log an event of type SyncingDataStructure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.BlacklistingEvents.IpCannotBeUnBlacklistedValue">
            <summary>
            EventDefinition for IpCannotBeUnBlacklisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogIpCannotBeUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Double)">
            <summary>
            Method to log an event of type IpCannotBeUnBlacklisted.
            </summary>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.BlacklistingEvents.LogIpCannotBeUnBlacklisted(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Double,System.Exception)">
            <summary>
            Method to log an event of type IpCannotBeUnBlacklisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.ResourceBlacklisted">
            <summary>
              Gets the EventDefinition for the ResourceBlacklisted.
            </summary>
            <value>The EventDefinition for the ResourceBlacklisted</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.IpUnBlacklisted">
            <summary>
              Gets the EventDefinition for the IpUnBlacklisted.
            </summary>
            <value>The EventDefinition for the IpUnBlacklisted</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.ResourceUnBlacklisted">
            <summary>
              Gets the EventDefinition for the ResourceUnBlacklisted.
            </summary>
            <value>The EventDefinition for the ResourceUnBlacklisted</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.ResourceCannotBeUnBlacklisted">
            <summary>
              Gets the EventDefinition for the ResourceCannotBeUnBlacklisted.
            </summary>
            <value>The EventDefinition for the ResourceCannotBeUnBlacklisted</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.UnblacklistingException">
            <summary>
              Gets the EventDefinition for the UnblacklistingException.
            </summary>
            <value>The EventDefinition for the UnblacklistingException</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.SyncingDataStructure">
            <summary>
              Gets the EventDefinition for the SyncingDataStructure.
            </summary>
            <value>The EventDefinition for the SyncingDataStructure</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.BlacklistingEvents.IpCannotBeUnBlacklisted">
            <summary>
              Gets the EventDefinition for the IpCannotBeUnBlacklisted.
            </summary>
            <value>The EventDefinition for the IpCannotBeUnBlacklisted</value>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ExecutionEngineCategoryInstaller">
            <summary>
            Category installer for the ExecutionEngine event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ExecutionEngineCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ExecutionEngineEvents">
            <summary>
            Events in the ExecutionEngine module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ExecutionEngineEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ExecutionEngineEvents.SqlCommandErrorValue">
            <summary>
            EventDefinition for SqlCommandError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.LogSqlCommandError(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type SqlCommandError.
            </summary>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="errorInfo">Argument errorInfo for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.LogSqlCommandError(Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type SqlCommandError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="errorInfo">Argument errorInfo for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ExecutionEngineEvents.FileCommandErrorValue">
            <summary>
            EventDefinition for FileCommandError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.LogFileCommandError(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type FileCommandError.
            </summary>
            <param name="path">Argument path for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="errorInfo">Argument errorInfo for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.LogFileCommandError(System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FileCommandError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="path">Argument path for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="errorInfo">Argument errorInfo for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ExecutionEngineEvents.BadPoolCommandErrorValue">
            <summary>
            EventDefinition for BadPoolCommandError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.LogBadPoolCommandError(System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type BadPoolCommandError.
            </summary>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="numberOfRetries">Argument numberOfRetries for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ExecutionEngineEvents.LogBadPoolCommandError(System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type BadPoolCommandError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="numberOfRetries">Argument numberOfRetries for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ExecutionEngineEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ExecutionEngineEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ExecutionEngineEvents.SqlCommandError">
            <summary>
              Gets the EventDefinition for the SqlCommandError.
            </summary>
            <value>The EventDefinition for the SqlCommandError</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ExecutionEngineEvents.FileCommandError">
            <summary>
              Gets the EventDefinition for the FileCommandError.
            </summary>
            <value>The EventDefinition for the FileCommandError</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ExecutionEngineEvents.BadPoolCommandError">
            <summary>
              Gets the EventDefinition for the BadPoolCommandError.
            </summary>
            <value>The EventDefinition for the BadPoolCommandError</value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMetadataCategoryInstaller">
            <summary>
            Category installer for the WebstoreMetadata event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMetadataEvents">
            <summary>
            Events in the WebstoreMetadata module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.CachedConfigurationExpiredValue">
            <summary>
            EventDefinition for CachedConfigurationExpired
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogCachedConfigurationExpired(System.String,System.Double,System.Double)">
            <summary>
            Method to log an event of type CachedConfigurationExpired.
            </summary>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="processingTime">Argument processingTime for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogCachedConfigurationExpired(System.String,System.Double,System.Double,System.Exception)">
            <summary>
            Method to log an event of type CachedConfigurationExpired with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="processingTime">Argument processingTime for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.ConfigurationRenewedValue">
            <summary>
            EventDefinition for ConfigurationRenewed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogConfigurationRenewed(System.String,System.Double)">
            <summary>
            Method to log an event of type ConfigurationRenewed.
            </summary>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogConfigurationRenewed(System.String,System.Double,System.Exception)">
            <summary>
            Method to log an event of type ConfigurationRenewed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstConfigPollingErrorValue">
            <summary>
            EventDefinition for WstConfigPollingError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstConfigPollingError(System.String)">
            <summary>
            Method to log an event of type WstConfigPollingError.
            </summary>
            <param name="depName">Argument depName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstConfigPollingError(System.String,System.Exception)">
            <summary>
            Method to log an event of type WstConfigPollingError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="depName">Argument depName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstConfigExecuteErrorValue">
            <summary>
            EventDefinition for WstConfigExecuteError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstConfigExecuteError(System.String)">
            <summary>
            Method to log an event of type WstConfigExecuteError.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstConfigExecuteError(System.String,System.Exception)">
            <summary>
            Method to log an event of type WstConfigExecuteError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstSkipConfigInformationValue">
            <summary>
            EventDefinition for WstSkipConfigInformation
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstSkipConfigInformation(System.String,System.String)">
            <summary>
            Method to log an event of type WstSkipConfigInformation.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="reason">Argument reason for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstSkipConfigInformation(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type WstSkipConfigInformation with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="reason">Argument reason for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstRuntimeEventsConfigFileErrorValue">
            <summary>
            EventDefinition for WstRuntimeEventsConfigFileError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstRuntimeEventsConfigFileError(System.String)">
            <summary>
            Method to log an event of type WstRuntimeEventsConfigFileError.
            </summary>
            <param name="configFileFullPath">Argument configFileFullPath for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstRuntimeEventsConfigFileError(System.String,System.Exception)">
            <summary>
            Method to log an event of type WstRuntimeEventsConfigFileError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="configFileFullPath">Argument configFileFullPath for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstRuntimeConfigFileUpdateErrorValue">
            <summary>
            EventDefinition for WstRuntimeConfigFileUpdateError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstRuntimeConfigFileUpdateError">
            <summary>
            Method to log an event of type WstRuntimeConfigFileUpdateError.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstRuntimeConfigFileUpdateError(System.Exception)">
            <summary>
            Method to log an event of type WstRuntimeConfigFileUpdateError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstAppConfigurationRenewedValue">
            <summary>
            EventDefinition for WstAppConfigurationRenewed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstAppConfigurationRenewed(System.String)">
            <summary>
            Method to log an event of type WstAppConfigurationRenewed.
            </summary>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstAppConfigurationRenewed(System.String,System.Exception)">
            <summary>
            Method to log an event of type WstAppConfigurationRenewed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstEventHandlerErrorValue">
            <summary>
            EventDefinition for WstEventHandlerError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstEventHandlerError">
            <summary>
            Method to log an event of type WstEventHandlerError.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.LogWstEventHandlerError(System.Exception)">
            <summary>
            Method to log an event of type WstEventHandlerError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.CachedConfigurationExpired">
            <summary>
              Gets the EventDefinition for the CachedConfigurationExpired.
            </summary>
            <value>The EventDefinition for the CachedConfigurationExpired</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.ConfigurationRenewed">
            <summary>
              Gets the EventDefinition for the ConfigurationRenewed.
            </summary>
            <value>The EventDefinition for the ConfigurationRenewed</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstConfigPollingError">
            <summary>
              Gets the EventDefinition for the WstConfigPollingError.
            </summary>
            <value>The EventDefinition for the WstConfigPollingError</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstConfigExecuteError">
            <summary>
              Gets the EventDefinition for the WstConfigExecuteError.
            </summary>
            <value>The EventDefinition for the WstConfigExecuteError</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstSkipConfigInformation">
            <summary>
              Gets the EventDefinition for the WstSkipConfigInformation.
            </summary>
            <value>The EventDefinition for the WstSkipConfigInformation</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstRuntimeEventsConfigFileError">
            <summary>
              Gets the EventDefinition for the WstRuntimeEventsConfigFileError.
            </summary>
            <value>The EventDefinition for the WstRuntimeEventsConfigFileError</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstRuntimeConfigFileUpdateError">
            <summary>
              Gets the EventDefinition for the WstRuntimeConfigFileUpdateError.
            </summary>
            <value>The EventDefinition for the WstRuntimeConfigFileUpdateError</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstAppConfigurationRenewed">
            <summary>
              Gets the EventDefinition for the WstAppConfigurationRenewed.
            </summary>
            <value>The EventDefinition for the WstAppConfigurationRenewed</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetadataEvents.WstEventHandlerError">
            <summary>
              Gets the EventDefinition for the WstEventHandlerError.
            </summary>
            <value>The EventDefinition for the WstEventHandlerError</value>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkEngineCategoryInstaller">
            <summary>
            Category installer for the JobFramework event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents">
            <summary>
            Events in the JobFrameworkEngine module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobStatusUpdateFailedValue">
            <summary>
            EventDefinition for JobStatusUpdateFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobStatusUpdateFailed">
            <summary>
            Method to log an event of type JobStatusUpdateFailed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobStatusUpdateFailed(System.Exception)">
            <summary>
            Method to log an event of type JobStatusUpdateFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.AsyncExecuteBatchErrorValue">
            <summary>
            EventDefinition for AsyncExecuteBatchError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogAsyncExecuteBatchError">
            <summary>
            Method to log an event of type AsyncExecuteBatchError.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogAsyncExecuteBatchError(System.Exception)">
            <summary>
            Method to log an event of type AsyncExecuteBatchError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.AgentContactFailedValue">
            <summary>
            EventDefinition for AgentContactFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogAgentContactFailed(System.String)">
            <summary>
            Method to log an event of type AgentContactFailed.
            </summary>
            <param name="url">Argument url for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogAgentContactFailed(System.String,System.Exception)">
            <summary>
            Method to log an event of type AgentContactFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="url">Argument url for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerConnectionFailedValue">
            <summary>
            EventDefinition for WorkerConnectionFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerConnectionFailed(System.String)">
            <summary>
            Method to log an event of type WorkerConnectionFailed.
            </summary>
            <param name="machine">Argument machine for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerConnectionFailed(System.String,System.Exception)">
            <summary>
            Method to log an event of type WorkerConnectionFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="machine">Argument machine for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerAbortConditionRaisedValue">
            <summary>
            EventDefinition for WorkerAbortConditionRaised
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerAbortConditionRaised">
            <summary>
            Method to log an event of type WorkerAbortConditionRaised.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerAbortConditionRaised(System.Exception)">
            <summary>
            Method to log an event of type WorkerAbortConditionRaised with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobRunFailureValue">
            <summary>
            EventDefinition for JobRunFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobRunFailure">
            <summary>
            Method to log an event of type JobRunFailure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobRunFailure(System.Exception)">
            <summary>
            Method to log an event of type JobRunFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerHeartBeatFailureValue">
            <summary>
            EventDefinition for WorkerHeartBeatFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerHeartBeatFailure(System.Int32)">
            <summary>
            Method to log an event of type WorkerHeartBeatFailure.
            </summary>
            <param name="batchId">Argument batchId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerHeartBeatFailure(System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WorkerHeartBeatFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.NoWorkItemsSubmittedValue">
            <summary>
            EventDefinition for NoWorkItemsSubmitted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogNoWorkItemsSubmitted(System.String)">
            <summary>
            Method to log an event of type NoWorkItemsSubmitted.
            </summary>
            <param name="jobName">Argument jobName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogNoWorkItemsSubmitted(System.String,System.Exception)">
            <summary>
            Method to log an event of type NoWorkItemsSubmitted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobStatusUpdateFailed">
            <summary>
              Gets the EventDefinition for the JobStatusUpdateFailed.
            </summary>
            <value>The EventDefinition for the JobStatusUpdateFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.AsyncExecuteBatchError">
            <summary>
              Gets the EventDefinition for the AsyncExecuteBatchError.
            </summary>
            <value>The EventDefinition for the AsyncExecuteBatchError</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.AgentContactFailed">
            <summary>
              Gets the EventDefinition for the AgentContactFailed.
            </summary>
            <value>The EventDefinition for the AgentContactFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerConnectionFailed">
            <summary>
              Gets the EventDefinition for the WorkerConnectionFailed.
            </summary>
            <value>The EventDefinition for the WorkerConnectionFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerAbortConditionRaised">
            <summary>
              Gets the EventDefinition for the WorkerAbortConditionRaised.
            </summary>
            <value>The EventDefinition for the WorkerAbortConditionRaised</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobRunFailure">
            <summary>
              Gets the EventDefinition for the JobRunFailure.
            </summary>
            <value>The EventDefinition for the JobRunFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerHeartBeatFailure">
            <summary>
              Gets the EventDefinition for the WorkerHeartBeatFailure.
            </summary>
            <value>The EventDefinition for the WorkerHeartBeatFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.NoWorkItemsSubmitted">
            <summary>
              Gets the EventDefinition for the NoWorkItemsSubmitted.
            </summary>
            <value>The EventDefinition for the NoWorkItemsSubmitted</value>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ApplicationContext">
            <summary>
            There is one ApplicationContext instance per Webstore application to act as a single point of control for status and configuration.
            </summary>
            <remarks>
            The WstConnection class used by the application developer will have reference to the single ApplicationContext that controls that specific Application (e.g. "Sample").
            
            (We should try to use "WebstoreConfig" as a special case application, where we populate information on num replicas, etc, from config info (registry or webstore.ini).
            </remarks>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ApplicationContext.applications">
            <summary>
            Static collection of all the applications that are referred by the WstConnection. It is basically a cache for ApplicationContext.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ApplicationContext.fullName">
            <summary>
            Name of the application.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ApplicationContext.deployment">
            <summary>
            Webstore deployment that is encapsulated by this application context.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.#ctor(System.String)">
            <summary>
            Constructs and initializes an instance of the ApplicationContext.
            </summary>
            <param name="applicationName">The full application name that is passed to identify the application.</param>
            <remarks>
            Each WstConnection contains reference to underlying ApplicationContext object that encapsulates the WebstoreDeployment.  There is  a global static collection of ApplicationContext objects. There should be only one ApplicationContext object per WebstoreDeployment.
            The global cache (ApplicationContextDictionary) should keep them cached, even if no WstConnection object still refers to the application. This object acts as a single point of configuration and state information for the application.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.GetApplication(System.String)">
            <summary>
            Global collection of applications (used to make sure we have single
            point of config and state mgmt for each app).
            </summary>
            <param name="connectionStringName">Name given as the connection string.</param>
            <returns>WstApp singleton for that app</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.GetFilePartition(System.Int32)">
            <summary>
            Maps a logical partition to a physical partition for fileshare partitions.
            </summary>
            <param name="logicalPartitionNumber">index of logical partition to lookup</param>
            <returns>index of physical partition mapped to this logical partition</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.GetSqlPartition(System.Int32)">
            <summary>
            Maps a logical partition to a physical partition for sql partitions.
            </summary>
            <param name="logicalPartitionNumber">index of logical partition to lookup</param>
            <returns>index of physical partition mapped to this logical partition</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.ApplicationExpired">
            <summary>
            See if "grace" period has expired on this configuration
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.ApplicationRemoved">
            <summary>
            Gets whether the WebstoreDeployment that is associated with the ApplicationContext is removed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.ExecutionEngineTrace">
            <summary>
            Trace source for controlling execution engine.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.FileFailoverRead">
            <summary>
            Default file read failover behavior
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.FileFailoverWrite">
            <summary>
            Default file write failover behavior
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.Name">
            <summary>
            Full name of the application which is config and deployment name seperated with backslash "\"
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.SecondaryType">
            <summary>
            The secondary type for this application.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.CommandExecutor">
            <summary>
            This is the class which controls failover.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.totalServerInteraction">
            <summary>
            Duration of the command preparation and execution againt one single database (including open time, validation etc). This timer will be used to determine if there is a bad pool.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.serverExecution">
            <summary>
            Duration of the command execution againt one single database (excluding open time, validation etc). This timer will be used to report server execution quality( aka latency).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.totalApplicationExecution">
            <summary>
            Duration of the overall command execution including the failover for the application. This timer will be used to determine application execution quality (aka latency).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.serverExecutionSucceeded">
            <summary>
            Indicates whether the last execution attempt to the selected database is succeeded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.currentDatabase">
            <summary>
            The current WebstoreDatabase which the current command execution is attempted. This value can be only updated in SetupDatabaseConnections. Its value would be different than DatabaseConnection.Database if DatabaseConnection.Reconnect gets called.
            The main purpose of currentDatabase is for perf counters so that we can signal the stop for the perf counters that were related to current executing database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.ProcessException(System.Exception,Microsoft.Webstore.WstClient.CommandExecutor.ErrorType@)">
            <summary>
            Processes the exception thrown by one of the WstCommand.ExecuteXXX() methods when the SqlConnection.Open() or SqlCommand.ExecuteXXX() gets called.
            </summary>
            <param name="executeException">exception thrown while executing against server.</param>
            <param name="errorEncountered">Type of the error encountered based on the results of the processing exception.</param>
            <returns>True if type of exception allows retry, owtherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.IsBadPoolError(System.Data.SqlClient.SqlError)">
            <summary>
            Checks to see if this SqlException looks like it is a bad connection left over in the SqlClient connection pool. 
            </summary>
            <param name="error">The error to determine if it is a bad pool error.</param>
            <returns>true if bad pooled connection possible</returns>
            <remarks>The total server interaction period before exception. If this time is too short, that will be an indication for bad pool error</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.CurrentDatabase">
            <summary>
            The current WebstoreDatabase which command execution is getting performed against.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.DatabaseConnection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.ReattemptExecution">
            <summary>
            Indicates whether the reattempt for executing the command is possible.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.ServerExecutionSucceeded">
            <summary>
            Indicates whether the last execution attempt to the selected database is succeeded.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.DatabaseConnection">
            <summary>
            This is the class which contains the SqlConnection. It is responsible for creating, opening and maintaining the SqlConnection. There can be multiple DatabaseConnection for each WstConnection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.application">
            <summary>
            The application that isue using this database connection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connection">
            <summary>
            The owner WstConnection that owns this database connection. 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.database">
            <summary>
            The database that the connection will be created.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.serverAddress">
            <summary>
            The actual address (the ip) of the server which the actual sql connection is established on. This field will be null until the actual connection is established.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.sqlConnection">
            <summary>
            The actual sql connection to the give database.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.wstTransaction">
            <summary>
            The WstTransaction that is set on the owner WstConnection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connectAttempts">
            <summary>
            How many times trying to connection to the database
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connectAttemptsOnBadPool">
            <summary>
            How many times trying to connection to the database due to bad pool error
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.databaseSelector">
            <summary>
            The DatabaseSelector that will be used to select the next available database during the AutoFailover.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connectionOpenGranted">
            <summary>
            Indicates that connection open is granted for the DatabaseConnection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.timeOutDatabases">
            <summary>
            The list of the databases that has timed out for this wstdbconnection. Sometimes, timed out databases are not added to blacklist and we need to maintain a seperate blacklist for this DatabaseConnection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.#ctor(Microsoft.Webstore.WstClient.ApplicationContext,Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            WstDBConnection contains the sqlConnection and associated WstDB information
            used to execute against a specific application server/database.
            </summary>
            <param name="application"></param>
            <param name="connection"></param>
            <param name="database"></param>
            <param name="resolvedCommandType"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.PrepareExecution">
            <summary>
            Reset counters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.ClearSqlConnectionPool">
            <summary>
            Clear Sql connection pool
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.AddToTimeoutDBList">
            <summary>
            Add db to timeout db list
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.IsNonPooledConnection">
            <summary>
            This sql connection is not a pooled connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.IsRetryAllowed">
            <summary>
            Retry allowed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.IsRetryAllowedForBadPool">
            <summary>
            Retry allowed for badpool error
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseConnection.Database">
            <summary>
            WebstoreDatabase object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseConnection.Transaction">
            <summary>
            Gets or sets the WstTransaction that is set on the owner WstConnection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.Initialize">
            <summary>
            Initializes the MetadataHelper. This function is not thread-safe so should be called from a thread-safe environment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCollectPeriod(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the counter collection period for the given deployment.
            </summary>
            <param name="deployment">The deployment of the counter collection period to return.</param>
            <returns>Number of seconds between resetting the request execution time counters.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyExcellent(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "excellent" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "excellent".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyGood(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "good" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "good".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyOK(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "excellent" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "excellent".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyPoor(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "poor" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "poor".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetServerDataCenterName(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Get data center name for a specific database's server.
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetLatencyBucket(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Get the longest latency for replication to this database
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.IsLocal(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Check if the database is in the same datacenter this client reside.
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.IsFirstDatabaseFresherThanSecondary(Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Check if secondary database1 is fresher than secondary database2,
            database2 is our preference.
            </summary>
            <param name="database1"></param>
            <param name="database2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetApplicationContext(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Gets the owner ApplicationContext for the matching WebstoreDeployment of WebstoreResource.
            </summary>
            <param name="resource">The WebstoreResource to get the ApplicationContext.</param>
            <returns>The ApplicationContext of the the matching WebstoreDeployment of WebstoreResource if the WebstoreDeployment is still deployed, otherwise null</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetApplicationContext(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the owner ApplicationContext for the given WebstoreDeployment.
            </summary>
            <param name="deployment">The WebstoreDeployment to get the ApplicationContext.</param>
            <returns>The ApplicationContext of the the matching WebstoreDeployment if the WebstoreDeployment is still deployed, otherwise null</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetServerAddress(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Get either server name or server ip address if there is one for this server
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetOneResource(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets a sample WebstoreResource for the given WebstoreDeployment.
            </summary>
            <param name="deployment">The WebstoreDeployment that owns returned WebstoreResource.</param>
            <returns>One of the WebstoreResource which is part of the WebstoreDeployment. It may be null.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetOneResource(Microsoft.Webstore.MetaData.WebstoreServer)">
            <summary>
            Gets a sample WebstoreResource for the given WebstoreServer.
            </summary>
            <param name="server">The WebstoreServer that is hosting the returned WebstoreResource.</param>
            <returns>One of the WebstoreResource which is hosted by the WebstoreServer. It may be null.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ResourceSelector.#cctor">
            <summary>
            C# static constructor's are used to inititalize static members of the class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ResourceSelector.GetRandom(System.Int32)">
            <summary>
            Gets random number between 0 and maxNumber
            </summary>
            <param name="maxNumber">0..maxNumber random number</param>
            <returns>0...maxNumber</returns>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstCommand">
             <summary>
             WstCommand is Webstore's version of SqlCommand object.  Uses the WstConnection "virtual" connection to a Webstore Application.  A SqlConnection is not obtained until one of the  ExecuteXXX() methods are called.
             </summary> 
             <remarks> The WstCommand class is used to issue commands against a specific Webstore application. The WstCommand can be configured to identify the partition and failover mode for the execution.  At execution time, the WstCommand selects an appropriate SqlConnection from the WstConnection pool of connections and executes using the SqlCommand object.  The result from the WstCommand.ExecuteReader() method is a WstDataReader. In this example, use of transactionscope allows for multiple insert statements to the SampleApp..UserInfo table within a transaction.</remarks>  
             <example>
             <code>
             using System;
             using System.Collections.Generic;
             using System.Text;
             using Microsoft.Webstore.MetaData;
             using Microsoft.Webstore.WstClient;
             
             namespace WstCommandExample
             {
                 class Program
                 {
                     static void Main(string[] args)
                     {
                         // The new WstConnection is based off of the Deployment name located in the local wstconfig database.
                         // The "using (WstConnection...)" method automatically Invokes "Dispose" after the next closing bracket.
                         
                         using (WstConnection connection = new WstConnection("MyOwnSampleApp"))
            
                         {
                             connection.Open();
             
                             WstCommand wstCmd = new WstCommand();
            
                             wstCmd.Connection = connection;
            
                             wstCmd.PartitionType = WstPartitionType.Physical;
             
                             wstCmd.Partition = 0;
             
                             wstCmd.WstFailoverMode = WstFailoverMode.PrimaryOnly;
             
                             wstCmd.CommandText = "select 1";
             
                             Object result = wstCmd.ExecuteScalar();
             
                         }
            
                         // The new WstConnection is based off of the Deployment name located in the local wstconfig database.
               
                         using (WstConnection connection = new WstConnection("MyOwnSampleApp"))
             
                         {
             
                             connection.Open();
             
                             WstCommand wstCmd = new WstCommand();
             
                             wstCmd.Connection = connection;
             
                             wstCmd.PartitionType = WstPartitionType.Physical;
             
                             wstCmd.Partition = 0;
             
                             wstCmd.WstFailoverMode = WstFailoverMode.PrimaryOnly;
             
                             wstCmd.CommandText = "select N'<root/>'";
             
                             using (WstXmlReader xmlReader = wstCmd.ExecuteXmlReader())
                             {
             
                                 while (xmlReader.Read())
                                 {
             
                                     Console.WriteLine("I got here.");
                                 }
                             }
                         }
                     //TransactionScope Example
            
                         using (WstConnection connection = new WstConnection("MyOwnSampleApp"))
                         {
             
                             try
                             {
                                 // Opening the connection automatically enlists it in the 
                                 // TransactionScope as a lightweight transaction.
             
                                 connection.Open();
             
                                 WstTransaction transaction = connection.BeginTransaction(System.Data.IsolationLevel.Serializable);
                                 // Create the SqlCommand object and execute the first command
                                 WstCommand command = new WstCommand();
                                 command.Connection = connection;
                                 command.PartitionType = WstPartitionType.Physical;
                                 command.Partition = 0;
                                 command.WstFailoverMode = WstFailoverMode.PrimaryOnly;
                                 command.Transaction = transaction;
                                 command.CommandText = "INSERT INTO [UserInfo] VALUES (N'Bertan Ari', 'test',0)";
             
                                 int recordsAffected = command.ExecuteNonQuery();
             
             
                                 command.CommandText = "INSERT INTO [UserInfo] VALUES (N'Marcel Pighin', 'test',0)";
                                 recordsAffected = command.ExecuteNonQuery();
                                 transaction.Commit();
             
                             }
             
                             catch (Exception ex)
                             {
                                 // Display information that command failed.
             
                                 Console.WriteLine("Exception Message1: {0}", ex.Message);
                             }
             
                             // Display the successful commit of the insert transactions.
                             Console.WriteLine("OK! If no errors then the inserts were committed!");
                                                       
                         }           
                     }       
                 }
             }    
             </code>
             </example>   
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.AnyPartition">
            <summary>
            Use this constant for the WstCommand.Partition property to randomly select the partition to execute the command.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.UnsetCommandTimeoutValue">
            <summary>
            The value for command time out which indicates that no value has been set for command time out.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.connection">
            <summary>
            WstConnection to execute the command on (cannot be changed while command is executing or resultset is still being consumed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.sqlCommand">
            <summary>
            Actual SqlCommand object to execute command with.  This object is used to hold parameters, commandtext, and other command properties (type, etc).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.commandTimeOut">
            <summary>
            Member variable in case caller wants to override the site default command timeout for this instance of WstCommand class.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.userSetFailoverMode">
            <summary>
            WstCommandType.  Default = WstCommandType.DefaultWrite
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.overrideStandby">
            <summary>
            Override standby db status when command type is WstCommandType.SpecificDatabase
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.dtcEnabled">
            <summary>
            Indicates if use using DTC or not.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.tranOptions">
            <summary>
            TransactionOptions that will be used for DTC enabled ExecuteNonQuery. There is only one TransactionOptions for the whole command and it is fixed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.database">
            <summary>
            Keep track of last partition/database we executed against
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.userSetPartition">
            <summary>
            Partition number to execute on.  Default = WstCommand.AnyPartition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.partitionType">
            <summary>
            Type of partition that m_partition refers to (logical vs. physical).  
            Default = logical.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.transaction">
            <summary>
            WstTransaction - used to encapsulate a SqlTransaction.  Since a SqlConnection is not
            determined until first WstCommand.ExecuteXXX() call is made, we cannot really start a
            SqlTransaction until then either.  Once we do... we can't allow any other WstCommand's
            refering to same WstTransaction to execute on a different server/db (they will get the
            SqlConnection from the WstTransaction object).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.inProgress">
            <summary>
            Flag indicating if the WstCommand.ExecuteXXX() method is executing.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.dataReader">
            <summary>
            Keep track of resultsets opened from this WstCommand
            (Don't allow one of the ExecuteXXX() methods to be called if there
            is still an open WstDataReader or WstXmlReader that was returned from
            this WstCommand object).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.xmlReader">
            <summary>
            Keep track of resultsets opened from this WstCommand
            (Don't allow one of the ExecuteXXX() methods to be called if there
            is still an open WstDataReader or WstXmlReader that was returned from
            this WstCommand object).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor">
            <summary>
            Default constructor, initializes new instance of the WstCommand.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor(System.String)">
            <summary>
            Overloaded constructor... inits CommandText.
            </summary>
            <param name="strCmdText">WstCommand.CommandText value</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor(System.String,Microsoft.Webstore.WstClient.WstConnection)">
            <summary>
            Overloaded constructor (cmdtext and connection)
            </summary>
            <param name="strCmdText">WstCommand.CommandText value</param>
            <param name="wstConn">WstCommand.Connection value</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor(System.String,Microsoft.Webstore.WstClient.WstConnection,System.Int32)">
            <summary>
            Overloaded constructor.
            </summary>
            <param name="strCmdText">WstCommand.CommandText value</param>
            <param name="wstConn">WstCommand.Connection value</param>
            <param name="partition">WstCommand.Partition value</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor(System.String,Microsoft.Webstore.WstClient.WstConnection,System.Int32,Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="strCmdText">WstCommand.CommandText value</param>
            <param name="wstConn">WstCommand.Connection value</param>
            <param name="partition">WstCommand.Partition value</param>
            <param name="failoverMode">WstCommand.WstFailoverMode value</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.Cancel">
            <summary>
            Cancel command (from another thread when WstCommand.ExecuteXXX() is in progress).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.CreateParameter">
            <summary>
            Create a SqlParameter.
            </summary>
            <returns>new SqlParameter</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.DetachReader(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Callback from WstDataReader when it is being closed or disposed.
            </summary>
            <param name="reader">WstDataReader (from execution on this cmd object)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.DetachReader(Microsoft.Webstore.WstClient.WstXmlReader)">
            <summary>
            Callback from WstXmlReader when it is being closed or disposed.
            </summary>
            <param name="reader">WstXmlReader (from execution on this cmd object)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.DetachTransaction(Microsoft.Webstore.WstClient.WstTransaction)">
            <summary>
            Callback from WstTransaction on dispose, rollback, commit.
            </summary>
            <param name="trans">WstTransaction</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteNonQuery">
            <summary>
            Implements IDbCommand.ExecuteNonQuery()
            </summary>
            <remarks>
            ExecuteNonQuery is intended for commands that do not return results,
            instead only the number of records affected.
            </remarks>
            <returns>
            Number of records affected (aggregate if executed on multiple partitions or replicas).
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteNonQueryWithDTC(Microsoft.Webstore.WstClient.CommandExecutor)">
            <summary>
            Implements ExecuteNonQuery with DTC
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteNonQueryWithSync(Microsoft.Webstore.WstClient.CommandExecutor)">
            <summary>
            Implements ExecuteNonQuery with sync api
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteReader">
            <summary>
            ExecuteReader() overload.
            Calls ExecuteReader(CommandBehavior.Default);
            </summary>
            <returns>WstDataReader</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            ExecuteReader().  This overload does all the real work.
            </summary>
            <param name="behavior">CommandBehavior (default = CommandBehavior.Default)</param>
            <returns>WstDataReader</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row in the resultset 
            returned by the query. Extra columns or rows are ignored.
            </summary>
            <returns>First column as first row as object</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteXmlReader">
            <summary>
            ExecuteXmlReader().  (This method is implemented to be as close as possible
            to the SqlCommand object.  This is not needed for IDbCommand).
            </summary>
            <returns>WstXmlReader</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.NewConnectionNotOpenedException">
            <summary>
            Helper to create an InvalidOperationException when connection is not opened,
            and property or method accessed which requires connection to be opened.
            </summary>
            <returns>InvalidOperationException</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.NewInvalidPartitionException">
            <summary>
            Helper to create Exception when invalid partition is specified.
            </summary>
            <returns>InvalidOperationException</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.Prepare">
            <summary>
            No-Op... not implemented
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ResetCommandTimeout">
            <summary>
            Resets this WstCommand.CommandTimeout back to default value.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ValidateCommand(Microsoft.Webstore.WstClient.ExecuteType)">
            <summary>
            Validates that this WstCommand object is in valid state to start Execution
            </summary>
            <param name="executeType">The execute method being called</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#CreateParameter">
            <summary>
            Create a SqlParameter
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#ExecuteReader">
            <summary>
            ExecuteReader() overload... implementation of IDbCommand.ExecuteReader()
            calls ExecuteReader(CommandBehavior.Default).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Implements the IDbCommand.ExecuteReader() form.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.CommandType">
            <summary>
            this.sqlCommand.CommandType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.CommandTimeout">
            <summary>
            Gives caller opportunity to override site default value for CommandTimeout (secs).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.CommandText">
            <summary>
            this.sqlCommand.CommandText property
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Connection">
            <summary>
            Specific override for Connection property (WstConnection)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Database">
            <summary>
            On Get, this is the database last executed against.  Can set to explicitly control
            the replica to execute against.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Parameters">
            <summary>
            SqlParameterCollection.  Uses the contained SqlCommand to implement the parameter collection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Partition">
            <summary>
            Partition number to execute this command against (logical or physical)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.LastPartitionExecuted">
            <summary>
            Used to determine which Physical Partition was last successfully executed against
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.PartitionType">
            <summary>
            Type of partition specified in Partition property (logical / physical)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.PhysicalPartition">
            <summary>
            Get the physical partition to execute this command against.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Transaction">
            <summary>
            gets/sets a WstTransaction property on this command object.
            </summary>
            <remarks>
            If connection is set... then this WstTransaction must have been created
            by calling BeginTransaction() on that WstConnection object.
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.OverrideStandby">
            <summary>
            OverrideStandby
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.WstFailoverMode">
            <summary>
            WstFailoverMode (PrimaryThenSecondary, etc...)
            </summary>
            
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.UpdatedRowSource">
            <summary>
            Aggregrate this down to the SqlCommand object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#Connection">
            <summary>
            IDbCommand.Connection implementation (WstConnection).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#Parameters">
            <summary>
            Need IDataParameterCollection version of the Parameters property to satisfy IDbCOmmand interface.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#Transaction">
            <summary>
            gets/sets WstTransaction property on this command object.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstConnection">
            <summary>
            Represents a "virtual" connection to a Webstore Application.
            
            This class abstracts over the SqlConnection class.  It represents a virtual connection to the whole set of databases that make up a Webstore application (partitions, replicas). The actual SqlConnection is established upon WstCommand.ExecuteXXX() methods by looking up the appropriate server/db from the FSS map (including honoring offline, blacklisted, stale replicas, retry, etc).
            </summary>
            <remarks>
            Any public static members of this type are thread safe. Any instance members are not guaranteed to be thread safe.
            </remarks>    
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.application">
            <summary>
            When our WstConnection.Open() is called, we will get a WstApp object that contains
            the config and state information for the application (specified in the connectionString)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.applicationName">
            <summary>
            The ConnectionString (Webstore Application Name) provided by the user.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.sqlConnectionString">
            <summary>
            Pass-thru to the SqlConnection.ConnectionString
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.connectionStringPrefix">
            <summary>
            Cache the connection String generated for SqlConnection (unless a connection property changes)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.connectionTimeout">
            <summary>
            Placeholder in case ConnectionTimeout is explicitly changed by caller
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.state">
            <summary>
            ConnectionState (we only support ConnectionState.Open and ConnectionState.Closed)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.userName">
            <summary>
            SQL long user id, or a windows logon or "" implies IntegratedSecurity
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.password">
            <summary>
            SQL logon password
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.isIntegratedSecurity">
            <summary>
            Flag to indicate if IntegratedSecurity (SSPI) should be used.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.wstDataReader">
            <summary>
            Only allow one open reader (WstXmlReader or WstDataReader) on this connection
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.wstXmlReader">
            <summary>
            Only allow one open reader (WstXmlReader or WstDataReader) on this connection
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.wstTransaction">
            <summary>
            Keep track if we have began a transaction.  If so, we should Rollback() on Close() if the
            transaction is still in progress.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection.dbConnections">
            <summary>
            List of the DatabaseConnections to keep track of the ones that were created by this WstConnection. There can be more than one DatabaseConnection that are associated with a WstConnection, if it is used by a WstCommand whose failover mode is WriteAllCopies.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.#ctor">
            <summary>
            Default constructor.  Database/ConnectString = "";
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.#ctor(System.String)">
            <summary>
            Initializes an instance of the WstConnection class, specifying the DeploymentName.
            </summary>
            <param name="deploymentName">The name of the Webstore Deployment.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of the WstConnection class, specifying the DeploymentName and SqlConnectionString.
            </summary>
            <param name="deploymentName">The name of the Webstore Deployment</param>
            <param name="sqlConnectionString">Pass thru parameters to the SqlConnection.ConnectionString</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed
            Override of base Component Dispose method
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.BeginTransaction">
            <summary>
            Creates a WstTransaction associated with this WstConnection.
            Same as calling BeginTransaction(IsolationLevel.ReadCommitted).
            </summary>
            <returns>new WstTransaction</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.System#Data#IDbConnection#BeginTransaction">
            <summary>
            Creates a WstTransaction associated with this WstConnection.
            Same as calling BeginTransaction(IsolationLevel.ReadCommitted).
            </summary>
            <returns>new WstTransaction</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new WstTransaction associated with this WstConnection
            </summary>
            <param name="level">IsolationLevel (default = ReadCommitted</param>
            <returns>new WstTransaction</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new WstTransaction associated with this WstConnection
            </summary>
            <param name="level">IsolationLevel (default = ReadCommitted</param>
            <returns>new WstTransaction</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.System#Data#IDbConnection#ChangeDatabase(System.String)">
            <summary>
            This method is not supported.
            </summary>
            <param name="dbName"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.Close">
            <summary>
            Closes the connection.
            </summary>
            <remarks>
            If there is an open resultset from this connection, it is also closed.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.CloseDBConnections">
            <summary>
            Closes all of the WstDBConnections in our list.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.Open">
            <summary>
            Opens the WstConnection.  If this is first time this Application Name is
            opened, then a new WstApp() object will be created and added to the 
            WstGlobal's cache of WstApp objects.
            </summary>
            <remarks>
            An application can call Open() more than one time. If a WstConnection object is already initialized
            for this Webstore application, then Open() will simply re-use the data already read from the 
            configuration database for this application's settings (connection timeout, parition map, etc).
            Users should maintain at least one reference to a WstConnection object while their application is running
            so that the WstClient's SqlConnection pool stays intact, as well as the background tasks for verifying
            server availability and maintaining server partition maps and server status (blacklisted, stale replicas,
            etc).
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.DetachReader(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Callback from WstDataReader when it is being closed or disposed.
            </summary>
            <param name="reader">WstDataReader (from execution on this cmd object)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.DetachReader(Microsoft.Webstore.WstClient.WstXmlReader)">
            <summary>
            Callback from WstXmlReader when it is being closed or disposed.
            </summary>
            <param name="reader">WstXmlReader (from execution on this cmd object)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.DetachTransaction(Microsoft.Webstore.WstClient.WstTransaction)">
            <summary>
            This method allows the WstConnection to track an Open WstTransaction that is still 
            in progress (parallel transactions are not supported), and Rollback the transaction
            if the WstConnection is closed.
            </summary>
            <param name="wstTransaction">WstTransaction</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.AttachReader(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            This method allows the WstConnection to track an Open XmlReader that was
            from and execution using this connection (and close it if the connection is closed).
            </summary>
            <param name="reader">WstXmlReader opened from this connection</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.AttachReader(Microsoft.Webstore.WstClient.WstXmlReader)">
            <summary>
            This method allows the WstConnection to track an Open XmlReader that was
            from and execution using this connection (and close it if the connection is closed).
            </summary>
            <param name="reader">WstXmlReader opened from this connection</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.GetSqlPartition(System.Int32)">
            <summary>
            Gets the physical SQL Partition that this logical partition is mapped to.
            </summary>
            <param name="logicalPartition">Logical partition number</param>
            <returns>Physical SQL Partition mapped to this logical partition</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.GetFilePartition(System.Int32)">
            <summary>
            Gets the physical File Partition that this logical partition is mapped to.
            </summary>
            <param name="logicalPartition">Logical partition number</param>
            <returns>Physical File Partition mapped to this logical partition</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.GetDatabase(System.Int32,Microsoft.Webstore.WstClient.WstPartitionType,Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            Gets a WstDatabase object that matches the partition and failover criteria.  Can throw exception if no available DB is found.
            </summary>
            <param name="partition">partition number</param>
            <param name="partitionType">logical or physical</param>
            <param name="failoverMode">Webstore failover mode (primary, secondary choices)</param>
            <returns>WstDatabase</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.ReturnDBConnection(Microsoft.Webstore.WstClient.DatabaseConnection)">
            <summary>
            WstCommand should return the WstDBConnection when it is done executing.
            </summary>
            <param name="dbConnection"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.CreateCommand">
            <summary>
            Implementation of IDbConnection.CreateCommand().  Creates a new WstCommand with
            the Connection set to this object.
            </summary>
            <returns>new WstCommand object</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.System#Data#IDbConnection#CreateCommand">
            <summary>
            Implementation of IDbConnection.CreateCommand().  Creates a new WstCommand with
            the Connection set to this object.
            </summary>
            <returns>new WstCommand object</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.ResetConnectionTimeout">
            <summary>
            Resets connection timeout to default value (determined by the WebstoreConfig db)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.ResetSecurity">
            <summary>
            Resets the security properties to their default values.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.GetConnectionStringPrefix">
            <summary>
            Return all connection String information, except for server and database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.NewConnectionNotOpenedException(System.String)">
            <summary>
            Helper to create exception when operation performed that requires the connection
            to first be opened
            </summary>
            <param name="propertyName"></param>
            <returns>WstException with the EcConnNotInitialized error code.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.Clone">
            <summary>
            Support for ICloneable interface.  The System.Object.MemberwiseClone will use the
            ICloneable.Clone() method provided by the class to support "deep" copies rather than
            the default "shallow" copies.  (A shallow copy would mean that the cloned class's members
            reference the same underlying members in the original class instance).
            </summary>
            <returns>copy of this object</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.FireInfoMessageEvent(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            Fire InfoMessage event
            </summary>
            <param name="sender">The source of the event</param>
            <param name="eventArgs">A SqlInfoMessageEventArgs object that contains the event data</param>
        </member>
        <member name="E:Microsoft.Webstore.WstClient.WstConnection.InfoMessage">
            <summary>
            Event InfoMessage on this connection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.WstApp">
            <summary>
            Gets the underlying singleton WstApp object for this Webstore application.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.ConnectionString">
            <summary>
            Gets or sets the ConnectionString (for Webstore this is the config and deployment name).
            Don't use this property internally
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.SqlConnectionString">
            <summary>
            Gets/Sets the SqlConnectionString (pass thru to the SqlConnection.ConnectionString).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.ConnectionTimeout">
            <summary>
            Timeout (in seconds) when establishing connection to SQL Server.
            </summary>
            <remarks>
            The default connection timeout is specified in the Default Settings for the site (Webstore Config DB).
            The application developer can override the default by setting this property.
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.Database">
            <summary>
            Same as ConnectionString ( = name of the Webstore application).
            don't use this property internally
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.IsPending">
            <summary>
            Indicates if a pending transaction is outstanding on this connection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.State">
            <summary>
            Only ConnectionState.Open and ConnectionState.Closed are supported.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.IsFetchingData">
            <summary>
            Indicates if a data reader is already open on this connection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.SqlPartitions">
            <summary>
            Collection of Webstore SQL Partitions (Connection must be open). 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.FilePartitions">
            <summary>
            Collection of Webstore File Partitions (Connection must be open). 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.DataPartitions">
            <summary>
            Collection of data Partitions (Connection must be open). 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.IsInitialized">
            <summary>
            {get;} True if Initialize() was called and succeeded.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.LogicalPartitions">
            <summary>
            {get;} Number of logical partitions for this application.
            </summary>
            <remarks>
            Throws InvalidOperationException if <see cref="P:WstConnection.IsInitialzed"/> is false.
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.IntegratedSecurity">
            <summary>
            Overrides default security settings to use NT Authentication (sspi).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.Password">
            <summary>
            Overrides default security information (need to set username also)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.Username">
            <summary>
            Overrides default security information (need to set password also)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFailoverMode">
            <summary>
            WstFailoverMode determines which DB replica to execute the command, or FileShare to 
            work against for File operations, as well as what automatic failover options are allowed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.PrimaryOnly">
            <summary>
            Only attempts the operation on the primary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.SecondaryThenPrimary">
            <summary>
            Attempts operation on secondary, but can auto-failover to primary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.SecondaryOnly">
            <summary>
            Attempts operation on secondaries only
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.PrimaryThenSecondary">
            <summary>
            Tries operation on primary, but can auto-failover to secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.PrimaryOrSecondary">
            <summary>
            Randomly selects between primary and secondaries for the operation
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.DefaultRead">
            <summary>
            Application configurable default read behavior
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.DefaultWrite">
            <summary>
            Applcation configurable default write behavior
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.SpecificDatabase">
            <summary>
            Execute using specific database/replica (WstCommand.Database)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.WriteAllCopies">
            <summary>
            Execute against all databases in the physical partition
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstPartitionType">
            <summary>
            Used when specifying logical vs physical partition mode
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstPartitionType.Logical">
            <summary>
            Determines how to interpret a Partition number (logical, zero based)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstPartitionType.Physical">
            <summary>
            Determines how to interpret a Partition number (physical, zero based)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstConstants">
            <summary>
            Placeholder class for constants?
            Not sure if will really need.  Might be better to associate the constants with the classes that
            use the constants.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConstants.#ctor">
            <summary>
            Hide constructor... just a place holder for assembly global constants
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDataAdapter">
             <summary>
             This class implements the IDbDataAdapter functionality.  Luckily, most of the
             functionality is implemented by the base class DbDataAdapter.
             </summary>
             <remarks>
             Not sure why this doesn't show up in designer view in visual studio?  
             Something about DbDataAdapter is abstract and can't be initialized.
             Maybe there are some overrides that we still need to do?
             
             Also... should do some sanity checks and enforcement on the Update/Insert/Delete
             commands to make sure they use the same partition information as the Select.
             </remarks>
             <example>
                void TestDataAdapter()
                {
                    WstDataAdapter adapter = new WstDataAdapter();
                    WstConnection conn = new WstConnection("SampleApp");
                    string cmdtext = "Select * from userinfo where si_hashbucket = 0";
                    WstCommand cmd = new WstCommand(cmdtext, conn, 0, WstCommandType.ReadOrWrite);
                    DataSet ds = new DataSet();
            
                    conn.IntegratedSecurity = true;
                    conn.Open();
            
                    adapter.SelectCommand = cmd;
                    adapter.Fill(ds);
            
                    ds.WriteXml("c:\\testapp1.xml");
                    conn.Close();
                }
             </example>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.m_selectCommand">
            <summary>
            Select command used by DbDataAdapter.Fill(dataset)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.m_insertCommand">
            <summary>
            Insert command (not required to be able to use DbDataAdapter.Fill())
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.m_updateCommand">
            <summary>
            Update command (not required to be able to use DbDataAdapter.Fill())
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.m_deleteCommand">
            <summary>
            Delete command (not required to be able to use DbDataAdapter.Fill())
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.EventRowUpdated">
            <summary>
            Inherited through DbDataAdapter (Component.Events)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.EventRowUpdating">
            <summary>
            Inherited through DbDataAdapter (Component.Events)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.#ctor">
            <summary>
            Default constructor (none of the WstCommands set yet - select/insert/update/delete)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Abstract method inherited from DbDataAdapter.
            </summary>
            <param name="dataRow">DataRow</param>
            <param name="command">WstCommand</param>
            <param name="statementType">StatementType</param>
            <param name="tableMapping">TableMapping</param>
            <returns>RowUpdatedEventArgs</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Abstract method inherited from DbDataAdapter
            </summary>
            <param name="dataRow">DataRow</param>
            <param name="command">WstCommand</param>
            <param name="statementType">StatementType</param>
            <param name="tableMapping">TableMapping</param>
            <returns>RowUpdatingEventArgs</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Abstract method inherited from DbDataAdapter
            </summary>
            <param name="value">RowUpdatingEventArgs</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Abstract method inherited from DbDataAdapter
            </summary>
            <param name="value">RowUpdatedEventArgs</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.SelectCommand">
            <summary>
            Gets/Sets the SelectCommand
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
            <summary>
            Gets/Sets the SelectCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.InsertCommand">
            <summary>
            Gets/Sets the InsertCommand
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
            <summary>
            Gets/Sets the InsertCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.UpdateCommand">
            <summary>
            Gets/Sets the UpdateCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
            <summary>
            Gets/Sets the UpdateCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.DeleteCommand">
            <summary>
            Gets/Sets the DeleteCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
            <summary>
            Gets/Sets the DeleteCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.WstClient.WstDataAdapter.RowUpdating">
            <summary>
            RowUpdating event
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.WstClient.WstDataAdapter.RowUpdated">
            <summary>
            RowUpdated event
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstRowUpdatingEventHandler">
            <summary>
            Delegate for WstRowUpdatingEvent
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstRowUpdatedEventHandler">
            <summary>
            Delegate for WstRowUpdatedEvent
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstRowUpdatingEventArgs">
            <summary>
            Webstore specific class for RowUpdatingEventArgs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Just use the default/base constructor
            </summary>
            <param name="row">DataRow</param>
            <param name="command">WstCommand</param>
            <param name="statementType">StatementType</param>
            <param name="tableMapping">TableMapping</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstRowUpdatingEventArgs.Command">
            <summary>
            Hide the inherited implementation of the command property. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstRowUpdatedEventArgs">
            <summary>
            Webstore specific class for RowUpdatedEventArgs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Just use the default/base constructor
            </summary>
            <param name="row">DataRow</param>
            <param name="command">WstCommand</param>
            <param name="statementType">StatementType</param>
            <param name="tableMapping">TableMapping</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstRowUpdatedEventArgs.Command">
            <summary>
            Hide the inherited implementation of the command property. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDataReader">
            <summary>
            The WstDataReader is created by invoking the WstCommand.ExecuteReader() method.  
            The WstDataReader class is a thin wrapper over the SqlDataReader resultset.  
            The WstDataReader may contain multiple SqlDataReader resultsets if the WstCommand 
            executed on multiple partitions and/or replicas
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_sqlReader">
            <summary>
            Underlying SqlDataReader object.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_wstConnection">
            <summary>
            WstConnection that was used to execute the command.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_wstCommand">
            <summary>
            WstCommand object that was executed to produce this resultset.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_fClosed">
            <summary>
            Tracks whether the WstDataReader.Close() method has been called yet, or not.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_disposed">
            <summary>
            Tracks whether or not this object has been Dispose()'d yet.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.#ctor(System.Data.SqlClient.SqlDataReader,Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Creates instance of WstDataReader (only the WstCommand should create in response to
            a WstCommand.ExecuteReader() call).  This construc
            </summary>
            <param name="reader">Underlying SqlReader object being wrapped</param>
            <param name="wstconn">WstConnection used in command execute</param>
            <param name="wstCmd">WstCommand executed to produce this resultset</param>
            <remarks>
            User should not be able to directly create a DataReader object so the constructors are
            marked as internal.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.System#IDisposable#Dispose">
            <summary>
            Implements the IDisposable.Dispose() method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.Close">
            <summary>
            Closes the WstDataReader object.
            </summary>
            <remarks>
            You must explicitly call the Close method when you are through using the SqlDataReader to 
            use the associated SqlConnection for any other purpose.
            The Close method fills in the values for output parameters, return values and RecordsAffected, 
            increasing the amount of time it takes to close a SqlDataReader that was used to process a large 
            or complicated query. In cases where the return values and the number of records affected by a 
            query are not significant, the amount of time it takes to close the SqlDataReader can be reduced by 
            calling the Cancel method of the associated SqlCommand object before calling the Close method.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch Transact-SQL statements.
            </summary>
            <returns>
            true if there are more result sets; otherwise, false.
            </returns>
            <remarks>
            Used to process multiple results, which can be generated by executing batch Transact-SQL statements.
            By default, the data reader is positioned on the first result.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.Read">
            <summary>
            Advances the SqlDataReader to the next record.
            </summary>
            <returns>true if there are more rows; otherwise, false</returns>
            <remarks>
            The default position of the SqlDataReader is prior to the first record. 
            Therefore, you must call Read to begin accessing any data.
            Only one SqlDataReader per associated SqlConnection may be open at a time, 
            and any attempt to open another will fail until the first one is closed. 
            Similarly, while the SqlDataReader is in use, the associated SqlConnection 
            is busy serving it until you call Close.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata of the SqlDataReader
            </summary>
            <returns>
            A DataTable that describes the column metadata.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetName(System.Int32)">
            <summary>
            IGets the name of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The name of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the source data type.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The name of the back-end data type.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the Type that is the data type of the object.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The Type that is the data type of the object.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified column in its native format.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>This method returns DBNull for null database columns.</returns>
            <remarks>GetValue returns data using the .NET Framework types.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetValues(System.Object[])">
            <summary>
            Gets all attribute columns in the collection for the current row.
            </summary>
            <param name="values">An array of Object into which to copy the attribute columns.</param>
            <returns>The number of instances of Object in the array.</returns>
            <remarks>
            For most applications, this method provides an efficient means for retrieving all columns, 
            rather than retrieving each column individually.
            
            You can pass an Object array that contains fewer than the number of columns contained in 
            the resulting row. Only the amount of data the Object array holds is copied to the array. 
            You can also pass an Object array whose length is more than the number of columns contained 
            in the resulting row.
            
            This method returns DBNull for null database columns.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal, given the name of the column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The zero-based column ordinal.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the column as a Boolean.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a Byte.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the column as a Byte.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inherited from IDataRecord.  Pass through to the current SqlDataReader
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <param name="dataIndex">The index within the field from which to begin the read operation</param>
            <param name="buffer">The buffer into which to read the stream of bytes</param>
            <param name="bufferIndex">The index for buffer to begin the read operation</param>
            <param name="length">The maximum length to copy into the buffer</param>
            <returns>The actual number of bytes read</returns>
            <remarks>
            GetBytes returns the number of available bytes in the field. In most cases this is the exact length of the field. 
            However, the number returned may be less than the true length of the field if GetBytes has already been used to obtain bytes 
            from the field. This may be the case, for example, if the SqlDataReader is reading a large data structure into a buffer. 
            For more information, see the SequentialAccess setting for CommandBehavior.
            If you pass a buffer that is a null reference (Nothing in Visual Basic), GetBytes returns the length of the field in bytes.
            No conversions are performed, therefore the data retrieved must already be a byte array
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of the specified column as a single character.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns> The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the 
            buffer as an array starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <param name="dataIndex">The index within the field from which to begin the read operation</param>
            <param name="buffer">The buffer into which to copy data.</param>
            <param name="bufferIndex">The index for buffer to begin the read operation</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of characters read</returns>
            <remarks>
            GetChars returns the number of available characters in the field. In most cases this is 
            the exact length of the field. However, the number returned may be less than the true 
            length of the field if GetChars has already been used to obtain characters from the field. 
            This may be the case, for example, if the SqlDataReader is reading a large data structure 
            into a buffer. For more information, see the SequentialAccess setting for CommandBehavior.
            
            The actual number of characters read can be less than the requested length, if the end of 
            the field is reached. If you pass a buffer that is a null reference (Nothing in Visual Basic), 
            GetChars returns the length of the field in characters.
            
            No conversions are performed, therefore the data retrieved must already be a character array.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of the specified column as a globally-unique identifier (GUID).
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified column as a 16-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column as a 32-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of the specified column as a 64-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of the specified column as a single-precision floating point number.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of the specified column as a double-precision floating point number.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of the specified column as a string.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of the specified column as a Decimal object.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of the specified column as a DateTime object.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.System#Data#IDataRecord#GetData(System.Int32)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="i">The zero-based column ordinal</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.IsDBNull(System.Int32)">
            <summary>
            Gets a value indicating whether the column contains non-existent or missing values.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>true if the specified column value is equivalent to DBNull; otherwise, false.</returns>
            <remarks>
            Call this method to check for null column values before calling the typed get methods 
            (for example, GetByte, GetChar, and so on) to avoid raising an error.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlBinary(System.Int32)">
            <summary>
            GetSqlBinary Gets the value of the specified column as a SqlBinary. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>A SqlBinary</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a binary structure or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlBoolean(System.Int32)">
            <summary>
            GetSqlBoolean Gets the value of the specified column as a SqlBoolean. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a Boolean or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlByte(System.Int32)">
            <summary>
            GetSqlByte Gets the value of the specified column as a SqlByte. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a byte or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlDateTime(System.Int32)">
            <summary>
            GetSqlDateTime Gets the value of the specified column as a SqlDateTime. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a datetime value or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlDecimal(System.Int32)">
            <summary>
            GetSqlDecimal Gets the value of the specified column as a SqlDecimal. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a decimal value or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlDouble(System.Int32)">
            <summary>
            GetSqlDouble Gets the value of the specified column as a SqlDouble. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a double precision floating point number or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlGuid(System.Int32)">
            <summary>
            GetSqlGuid Gets the value of the specified column as a SqlGuid. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a guid or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlInt16(System.Int32)">
            <summary>
            GetSqlInt16 Gets the value of the specified column as a SqlInt16. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a 16 bit signed integer or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlInt32(System.Int32)">
            <summary>
            GetSqlInt32 Gets the value of the specified column as a SqlInt32. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a 32 bit signed integer or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlInt64(System.Int32)">
            <summary>
            GetSqlInt64 Gets the value of the specified column as a SqlInt64. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a 64 bit signed integer or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlMoney(System.Int32)">
            <summary>
            GetSqlMoney Gets the value of the specified column as a SqlMoney. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a decimal value or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlSingle(System.Int32)">
            <summary>
            GetSqlSingle Gets the value of the specified column as a SqlSingle. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a single precision floating point number or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlString(System.Int32)">
            <summary>
            GetSqlString Gets the value of the specified column as a SqlString. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a string or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlValue(System.Int32)">
            <summary>
            GetSqlValue Gets an Object that is a representation of the underlying SqlDbType Variant. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>An Object that is a representation of the underlying SqlDbType Variant</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlValues(System.Object[])">
            <summary>
            GetSqlValues Gets all the attribute columns in the current row. 
            </summary>
            <param name="values">An array of Object to copy the attribute columns into</param>
            <returns>The number of instances of Object in the array</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection of DataRecords</returns>
            <remarks>
            Allows the use of "foreach (IDataRecord dataRecord in dataReader)" syntax with our WstDataReader
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
            <value>The depth of nesting for the current row</value>
            <remarks>The outermost table has a depth of zero. The SQL Server .NET Data Provider does not support nesting and always returns zero</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed
            </summary>
            <value>true if the WstDataReader is closed; otherwise, false</value>
            <remarks>IsClosed and RecordsAffected are the only properties that you can call after the SqlDataReader is closed.</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the Transact-SQL statement.
            </summary>
            <value>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</value>
            <remarks>
            The RecordsAffected property is not set until all rows are read and you close the SqlDataReader.
            The value of this property is cumulative. For example, if two records are inserted in batch mode, 
            the value of RecordsAffected will be two.
            IsClosed and RecordsAffected are the only properties that you can call after the SqlDataReader is closed.
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row
            </summary>
            <value>When not positioned in a valid recordset, 0; otherwise the number of columns in the current row. The default is -1.</value>
            <remarks>After executing a query that does not return rows, FieldCount returns 0.</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.Item(System.Int32)">
            <summary>
            Gets the value of the specified column in its native format given the column ordinal.
            </summary>
            <value>The value of the specified column in its native format</value>
            <remarks>In C#, this property is the indexer for the SqlDataReader class.</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.Item(System.String)">
            <summary>
            Gets the value of the specified column in its native format given the column name.
            </summary>
            <value>The value of the specified column in its native format</value>
            <remarks>In C#, this property is the indexer for the SqlDataReader class.</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.HasRows">
            <summary>
            Gets a value indicating whether the SqlDataReader contains one or more rows.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstError">
            <summary>
            Summary description for WstError.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcConnectionTimeout">
            <summary>
            Connection timeout error code
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcNoConnectionAvail">
            <summary>
            No connection available error code
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcNoFileShareAvail">
            <summary>
            No fileshare available error code
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMarkedOffline">
            <summary>
            The only available DB(s) is offline
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMarkedReadOnly">
            <summary>
            There are no write DBs currently active, or logical partition 
            has been marked read only.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcCommandTimeout">
            <summary>
            Command timed out and cannot retry/failover
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMaxRetriesExceeded">
            <summary>
            Command or Connection failed and max number of attempts has been exceeded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMaxPoolSizeReached">
            <summary>
            Max Pool size exceeded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcDTCError">
            <summary>
            DTC inconsistent error.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcApplicationNotExist">
            <summary>
            The application "name" does not exist
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcTranCountExist">
            <summary>
            When checking transaction count for connections gotten from 
            the pool before execution.  Error if transaction already exists.
            (Debugging tool).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcAdminConsoleNotExist">
            <summary>
            No admin consoles are registered.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMismatchVersion">
            <summary>
            Client library does not support either the registry version, or
            the configuration database version.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcNoServiceAvail">
            <summary>
            Unable to CoCreateInstance() the WSTService object.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcNoRegistry">
            <summary>
            The webstore registry settings are missing or invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcAppConfigChanged">
            <summary>
            Configuration changed while in middle of a transaction
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcConfigExpired">
            <summary>
            Current cached configuration has expired before polling successfully completed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcSiteNotExist">
            <summary>
            The site "name" does not exist
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcConnDeniedMaxLimit">
            <summary>
            The Max Concurrent Requests limit reached. Connection Denied
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcConnNotInitialized">
            <summary>
            The Max Concurrent Requests limit reached. Connection Denied
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcFail">
            <summary>
            General Failure occurred.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstError.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstError.Number">
            <summary>
            Gets the webstore error code.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstError.Message">
            <summary>
            Gets a string description of the webstore error.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstException">
            <summary>
            Webstore specific exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstException.errorInfo">
            <summary>
            Webstore error information.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstException.applicationName">
            <summary>
            Webstore Application that encountered the error.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstException.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="errorCode">Webstore specific error code</param>
            <param name="applicationName"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstException.Application">
            <summary>
            Name of application that encountered the exception
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstException.Error">
            <summary>
            WstError object containing specific error code information
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstHash">
            <summary>
            Implementation of Webstore's default hash algorithm.
            Application Developers can choose to use the Webstore Hashing algorithm,
            or use their own hash or lookup based method to partition their data.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstHash.PRIME_A">
            <summary>
            First of 3 prime numbers used in the hashing algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstHash.PRIME_B">
            <summary>
            Second of 3 prime numbers used in the hashing algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstHash.PRIME_K">
            <summary>
            Third of 3 prime numbers used in the hashing algorithm
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstHash.m_maxHash">
            <summary>
            Member if using instance of object rather than calling the static methods.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the WstHash class
            </summary>
            <param name="maxHash">MaxHash number (0..maxHash-1)</param>
            <remarks>
            It's not necessary to create instance of the class.  The static methods
            can be called directly with key and max hash.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.Guid)">
            <summary>
            Calculate hash for Guid key
            </summary>
            <param name="guid">Guid key to hash</param>
            <returns>0..MaxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.String)">
            <summary>
            Calculate hash for string key.
            </summary>
            <param name="strKey">string key to hash</param>
            <returns>0..MaxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.Int64)">
            <summary>
            Calculate hash for large integer key
            </summary>
            <param name="largeKey">large integer key</param>
            <returns>0..MaxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.Guid,System.Int32)">
            <summary>
            Static method to get hash of a Guid key.
            </summary>
            <param name="guid">Guid key to hash</param>
            <param name="maxHash">Max Hash</param>
            <returns>0..maxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.String,System.Int32)">
            <summary>
            Static method to get hash of a string key.
            </summary>
            <param name="strKey">string key</param>
            <param name="maxHash">Max Hash</param>
            <returns>0..maxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetByte(System.Int64,System.Int32)">
            <summary>
            Internal helper method to extract a byte from an Int64
            </summary>
            <param name="ival">Int64 to be hashed</param>
            <param name="ib">byte index (0..7)</param>
            <returns>byte at ib from Int64</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.Int64,System.Int32)">
             <summary>
             Static method to get hash value of a large integer key
             </summary>
             <param name="largeKey">large integer key</param>
             <param name="maxHash">Max Hash</param>
             <returns>0..maxHash-1</returns>
             <remarks>
             The unmanaged webstore client library implementation of HashLARGEINTEGER
             iterates through each byte of the LARGEINTEGER as follows:
             
                    LARGE_INTEGER li;
                    unsigned char rgby[sizeof(unsigned long)*2] = {0};
            
                    memcpy((addr)rgby[0], (addr)(li.HighPart), sizeof(unsigned long));
                    memcpy((addr)rgby[sizeof(unsigned long)], (addr)(li.LowPart), sizeof(unsigned long));
            
                    li.QuadPart = 0x8877665544332211
                    li.HighPart = 0x88776655
                    li.LowPart  = 0x44332211
                    rgby[0] = 0x55
                    rgby[1] = 0x66
                    rgby[2] = 0x77
                    rgby[3] = 0x88
                    rgby[4] = 0x11
                    rgby[5] = 0x22
                    rgby[6] = 0x33
                    rgby[7] = 0x44
            
             So, for us to calculate the same hash values for our int64, we will need to 
             process high dword then low dword also.
            
             </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstHash.MaxHash">
            <summary>
            MaxHash specified when object was constructed
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstTransaction">
            <summary>
            Summary description for WstTransaction.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction.m_wstConnection">
            <summary>
            WstConnection object that created this transaction
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction.m_isolationlevel">
            <summary>
            IsolationLevel
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction.m_sqlTrans">
            <summary>
            Actual SqlTransaction that will control the transaction
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction.m_fCompleted">
            <summary>
            Keeps track of when this transaction has been Commit(), Rollback() or Dispose()
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction.m_disposed">
            <summary>
            Tracks whether or not this object has been Dispose()'d yet.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction.m_wstDBConnection">
            <summary>
            Internal DB Connection object (SqlConnection, along with command context).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.#ctor(Microsoft.Webstore.WstClient.WstConnection)">
            <summary>
            Constructor (created from WstConnection.BeginTransaction().
            </summary>
            <param name="conn">WstConnection parent</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.#ctor(Microsoft.Webstore.WstClient.WstConnection,System.Data.IsolationLevel)">
            <summary>
            Constructor (created from WstConnection.BeginTransaction().
            </summary>
            <param name="conn">WstConnection parent</param>
            <param name="isolevel">IsolationLevel (default = ReadCommitted)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.Dispose">
            <summary>
            Clear the resources used by this object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.Commit">
            <summary>
            Commits the transaction in progress.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.Rollback">
            <summary>
            Rolls back the transaction in progress.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.SetDBConnection(Microsoft.Webstore.WstClient.DatabaseConnection)">
            <summary>
            Internal helper version of GetDBConnection
            </summary>
            <param name="databaseConnection">SqlConnection</param>
            <returns>WstDBConnection</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.ReportCmdCompletion(Microsoft.Webstore.WstClient.DatabaseConnection)">
            <summary>
            
            </summary>
            <param name="dbConnection"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.ClearMembers">
            <summary>
            Shared cleanup between Dispose(), Rollback(), and Commit().
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstTransaction.Connection">
            <summary>
            Gets the WstConnection that created this WstTransaction
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstTransaction.System#Data#IDbTransaction#Connection">
            <summary>
            Gets the WstConnection that created this WstTransaction
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstTransaction.IsolationLevel">
            <summary>
            IsolationLevel (default = ReadCommitted)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstTransaction.InProgress">
            <summary>
            true if actual underlying SqlTransaction has begun
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstXmlReader">
            <summary>
            The WstXmlReader is created by invoking the WstCommand.ExecuteXmlReader() method.  
            The WstXmlReader class is a thin wrapper over the XmlReader resultset.  
            The WstXmlReader may contain multiple XmlReader resultsets if the WstCommand 
            executed on multiple partitions and/or replicas, so we have additional public method
            NextResult() to move to next XmlReader result.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstXmlReader.m_xmlReader">
            <summary>
            Underlying XmlReader object.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstXmlReader.m_wstConnection">
            <summary>
            WstConnection that was used to execute the command.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstXmlReader.m_wstCommand">
            <summary>
            WstCommand object that was executed to produce this resultset.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstXmlReader.m_fClosed">
            <summary>
            Track whether or not the WstXmlReader.Close() method has been called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.#ctor(System.Xml.XmlReader,Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Creates instance of WstDataReader (only the WstCommand should create in response to
            a WstCommand.ExecuteReader() call).  This construc
            </summary>
            <param name="reader">Underlying XmlReader object being wrapped</param>
            <param name="wstconn">WstConnection used in command execute</param>
            <param name="wstCmd">WstCommand executed to produce this resultset</param>
            <remarks>
            User should not be able to directly create a DataReader object so the constructors are
            marked as internal.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.Finalize">
            <summary>
            C# type destructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.GetAttribute(System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.GetAttribute(System.String,System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.GetAttribute(System.Int32)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToAttribute(System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToAttribute(System.Int32)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToFirstAttribute">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToNextAttribute">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToElement">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.Read">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.Close">
            <summary>
            Close all the underlying XmlReader objects when we are closed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ReadString">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ReadInnerXml">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ReadOuterXml">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.LookupNamespace(System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ResolveEntity">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ReadAttributeValue">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.NodeType">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Name">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.LocalName">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.NamespaceURI">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Prefix">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.HasValue">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Value">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Depth">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.BaseURI">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.IsEmptyElement">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.IsDefault">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.QuoteChar">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.XmlSpace">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.XmlLang">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.AttributeCount">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Item(System.Int32)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Item(System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Item(System.String,System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.EOF">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.ReadState">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.NameTable">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.ConfigurationAccess">
            <summary>
            This class provides functionality related to access to the configuration file. Instance functions are not thread-safe. Static functions are thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.#ctor">
            <summary>
            If not initialized, initializes the MSN Runtime and creates a new instance of ConfigurationAccess.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.AddWebstoreConfiguration(System.Xml.XmlNode)">
            <summary>
            Adds a new XmlNode to the webstore section of the configuration file.
            </summary>
            <param name="nodeToAdd">The new XmlNode to add.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
            <summary>
            Creates an System.Xml.XmlNode with the specified System.Xml.XmlNodeType System.Xml.XmlDocument.Name, and System.Xml.XmlNode.NamespaceURI.
            </summary>
            <param name="type">The XmlNodeType of the new node.</param>
            <param name="name">The qualified name of the new node. If the name contains a colon then it is parsed into System.Xml.XmlNode.Prefix and System.Xml.XmlDocument.LocalName components.</param>
            <param name="namespaceURI">The namespace URI of the new node.</param>
            <returns>The new XmlNode.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.CreateAttribute(System.String)">
            <summary>
            Creates an System.Xml.XmlAttribute with the specified System.Xml.XmlDocument.Name.
            </summary>
            <param name="attributeName">The qualified name of the attribute. If the name contains a colon, the System.Xml.XmlNode.Prefix property reflects the part of the name preceding the first colon and the System.Xml.XmlDocument.LocalName property reflects the part of the name following the first colon. The System.Xml.XmlNode.NamespaceURI remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case NamespaceURI has a value of http://www.w3.org/2000/xmlns/.</param>
            <returns>The new XmlAttribute.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.GetWebstoreConfiguration(System.String)">
            <summary>
            Gets the XmlElement that represent the Webstore configuration for the specified value.
            </summary>
            <param name="value">The value that identifies the webstore configuration we are looking for.</param>
            <returns>The XmlElement that represents the specified configuration.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.GetPathFromString(System.String)">
            <summary>
                Creates a fully expanded, valid path from the specified string.
            </summary>
            <param name="value">The string to expand and validate.</param>
            <returns>The fully expanded, valid path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.OpenWebstoreSubKey(Microsoft.Win32.RegistryKeyPermissionCheck)">
            <summary>
            Locates and opens Webstore sub key in the registry.
            </summary>
            <param name="permission">Required access permissions while opening the WebstoreSubKey. </param>
            <returns>The handler to the opened Webstore subkey.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.GetConfigFileLocation">
            <summary>
            Gets the config file location.
            </summary>
            <returns>Config file location, null if it is not found.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.IntializeMsnRuntime">
            <summary>
            Initializes MSN Runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ConfigurationAccess.SaveNewConfiguration(Microsoft.Webstore.Common.ConfigurationAccess)">
            <summary>
            Saves the new configuration over the existing configuration file.
            </summary>
            <param name="newConfiguration"></param>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.ConfigurationFilePath">
            <summary>
            Gets the full path for the configuration file that is used to initialize MSN Runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.ConfigurationDocument">
            <summary>
            The Xml document that represent the configuration file. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.Configuration">
            <summary>
            Gets the configuration exposed by the MSN Runtime for read only purposes.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ConfigurationAccess.NamespaceURI">
            <summary>
            Gets the namespace uri of the configuration document.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.ThreadSafeDictionary`2">
            <summary>
            A generic thread safe dictionary that is optimized for heavy read scenarios. If your dictionary will be frequently updated, do not use this class.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeDictionary`2.valueTable">
            <summary>
            Use an Hashtable to contain the collection of TValue objects.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeDictionary`2.valueTableCodeLock">
            <summary>
            The lock that controls the access to the critical section codes related to the ApplicationContext objects.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeDictionary`2.#ctor">
            <summary>
            Constructs new instance of ThreadSafeDictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the ThreadSafeDictionary class that is empty, has the default initial capacity, and uses the specified IEqualityComparer.
            </summary>
            <param name="comparer">The IEqualityComparer implementation to use when comparing keys, or null to use the default EqualityComparer for the type of the key.</param> 
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeDictionary`2.AddValueIfNotExist(`0,Microsoft.Webstore.Common.ItemFactory{`0,`1},System.Boolean@)">
            <summary>
            Creates a TValue and adds to the collection (or just returns existing TValue if already in the collection).
            </summary>
            <param name="key">The TKey to inquire the requested TValue.</param>
            <param name="factory">The factory to create instances of TValue out of key.</param>
            <param name="exist">Indicates whether the inquired TValue already exists. True if TValue already exists, otherwise false.</param>
            <returns>ApplicationContext for name specified from collection</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeDictionary`2.Contains(`0,`1)">
            <summary>
            Determines whether the ThreadSafeDictionary contains a specific key-value pair.
            </summary>
            <param name="key">The key to locate in the ThreadSafeDictionary.</param>
            <param name="value">The value to locate in the ThreadSafeDictionary. The value can be null for reference types.</param>
            <returns>true if the ThreadSafeDictionary contains anelement with the specified key and value; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the ThreadSafeDictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if key is not found in the ThreadSafeDictionary.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value with the specified key from the ThreadSafeDictionary.
            </summary>
            <param name="key">The key of the element to get.</param>
            <param name="value">The output value that will be returned.</param>
            <returns>true if the element is successfully found and returned; otherwise, false. This method returns false if key is not found in the ThreadSafeDictionary.</returns>
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeDictionary`2.Item(`0)">
             <summary>
             Gets the TValue associated with the specified key.
             </summary>
             <param name="key">The key of the TValue to get.</param>
             <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a System.Collections.Generic.KeyNotFoundException, and a set operation creates a new element with the specified key.</returns>
             Exceptions:
               System.ArgumentNullException:
                 key is null.
            
               System.Collections.Generic.KeyNotFoundException:
                 The property is retrieved and key does not exist in the collection.
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeDictionary`2.Comparer">
            <summary>
            Gets and sets the System.Collections.Generic.IEqualityComparer that is used to determine equality of keys for the ThreadSafeDictionary.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the ThreadSafeDictionary.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.ThreadSafeQueue`1">
            <summary>
            A thread safe queue for reference types. This queue does not support value types and null entries.
            </summary>
            <typeparam name="TValue">A reference type.</typeparam>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.CapacityMultiplicator">
            <summary>
            The ratio of actual queue array length and the capacity. The extra capacity is used to accommodate the nulls that can be placed while an TValue is removed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.LockIterationLimit">
            <summary>
            Maximum number of iterations to get the lock before going to sleep.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.LockSleepPeriod">
            <summary>
            The sleep duration if when lock iteration limit is reached.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.queueArray">
            <summary>
            The array that holds the queued items.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.queueCapacity">
            <summary>
            The capacity of the ThreadSafeQueue.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.enqueueLock">
            <summary>
            The lock that synchronizes the enqueue requests.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.dequeueLock">
            <summary>
            The lock that synchronizes the dequeue requests.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.enqueuePosition">
            <summary>
            The position of the next enqueue.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.lastDequeuePosition">
            <summary>
            The position of the last dequeue.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.queuedItemCount">
            <summary>
            The total number of TValues that are queued.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ThreadSafeQueue`1.queueingTrace">
            <summary>
            Trace source for tracing queue status.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ThreadSafeQueue class that is empty and has the specified initial capacity.
            </summary>
            <param name="queueCapacity">The initial number of elements that the ThreadSafeQueue can contain.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeQueue`1.Dequeue(`0@)">
            <summary>
            Removes and returns the object at the beginning of the ThreadSafeQueue if the queue is not empty.
            </summary>
            <param name="value">The object that is removed from the beginning of the ThreadSafeQueue</param>
            <returns>True if the operation is completed successfully, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the ThreadSafeQueue if the queue is not full.
            </summary>
            <param name="value">The TValue to add to the ThreadSafeQueue. The value can not be null  or a value type.</param>
            <returns>True if the operation is completed successfully, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeQueue`1.Remove(`0)">
            <summary>
            Removes an object from the ThreadSafeQueue if it exists in the queue.
            </summary>
            <param name="value">The TValue to remove from the ThreadSafeQueue. The value can not be null  or a value type.</param>
            <returns>True if the operation is completed successfully, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.ThreadSafeQueue`1.Resize(System.Int32)">
            <summary>
            Resizes the capacity of ThreadSafeQueue with the specified value.
            </summary>
            <param name="newQueueCapacity">The new number of elements that the ThreadSafeQueue can contain.</param>
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeQueue`1.Capacity">
            <summary>
            Gets the  capacity of the ThreadSafeQueue.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeQueue`1.Count">
            <summary>
            Gets the number of TValues contained in the ThreadSafeQueue.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeQueue`1.IsEmpty">
            <summary>
            Gets whether there are any queued TValue. Returns if theere is any, otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ThreadSafeQueue`1.IsFull">
            <summary>
            Returns true if there are number of queued TValues reached the queue capacity, otherwise false.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.RefCountingInstaller">
            <summary>
             A base installer class with ref counting feature for Webstore usage scenarios.
             </summary>
             <remarks>This class can only be invoked by a caller with unrestricted RegistryPermission.
             </remarks>
        </member>
        <member name="F:Microsoft.Webstore.Common.RefCountingInstaller.packageName">
            <summary>
            The package that RefCountingInstaller belongs to. This will be name of the registry value.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.RefCountingInstaller.productName">
            <summary>
            The product that the package belongs to. This could be the name of the registry key we are creating but for now it is fixed to Webstore.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.RefCountingInstaller.#ctor(System.String,System.String)">
            <summary>
            Instantiates an instance of the RefCountingInstaller.
            </summary>
            <param name="productName">The product that the package belongs to. This will be the name of the registryKey.</param>
            <param name="packageName">The package that RefCountingInstaller belongs to.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.RefCountingInstaller.Install(System.Collections.IDictionary)">
            <summary>
            When overridden in a derived class, performs the installation.
            </summary>
            <param name="stateSaver">An System.Collections.IDictionary used to save information needed to perform a commit, rollback, or uninstall operation.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.RefCountingInstaller.Uninstall(System.Collections.IDictionary)">
            <summary>
            When overridden in a derived class, removes an installation.
            </summary>
            <param name="savedState">An System.Collections.IDictionary that contains the state of the computer after the installation was complete.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.RefCountingInstaller.Commit(System.Collections.IDictionary)">
            <summary>
            When overridden in a derived class, completes the install transaction.
            </summary>
            <param name="savedState">n System.Collections.IDictionary that contains the state of the computer after the installation was complete.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.RefCountingInstaller.Rollback(System.Collections.IDictionary)">
            <summary>
            When overridden in a derived class, restores the pre-installation state of the computer.
            </summary>
            <param name="savedState">An System.Collections.IDictionary that contains the pre-installation state of the computer.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FileShareSelector.CheckFileOperationAllowed(Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            See if the command can be executed in current config state
            </summary>
            <param name="failoverIn">client specified failover mode</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FileShareSelector.GetFileShare(System.Int32,Microsoft.Webstore.WstClient.WstPartitionType,Microsoft.Webstore.WstClient.WstFailoverMode,System.Boolean)">
            <summary>
            Helper to get the appropriate FileShare for this indexMode/access.
            </summary>
            <param name="partition">partition index</param>
            <param name="partitionType">WstPartitionType.Logical or .Physical</param>
            <param name="failoverModeIn">failover mode</param>
            <param name="updatesAllowed">Would the Op allow updates</param>
            <returns>WstFileShare</returns>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstContext">
            <summary>
            WstContext provides the Webstore routing and failover information (Deployment Name, Partition, Failover options).
            This context is used as input to the Webstore File/Directory APIs 
            (WstFile, WstDirectory, WstFileStream, WstFileInfo, WstDirectoryInfo)
            so that Webstore can route the operations to the correct File Shares.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstContext.PartitionAny">
            <summary>
            Set WstContext.Partition = WstContext.PartitionAny to randomly select an available partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstContext.PartitionAllocate">
            <summary>
            Set WstContext.Partition = WstContext.PartitionAllocate to automatically select best partition to allocate new data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor">
            <summary>
            Initializes a new instance of the WstContext class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the WstContext class for the specified Deployment.
            </summary>
            <param name="deployment">Deployment name</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the WstContext class for the specified Deployment and partition.
            </summary>
            <param name="deployment">Deployment Name</param>
            <param name="partition">partition index</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String,System.Int32,Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            Initializes a new instance of the WstContext class with the specified Deployment, partition,
            and failover options.
            </summary>
            <param name="deployment">Deployment Name</param>
            <param name="partition">partition index</param>
            <param name="failoverMode">failover mode</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String,System.Int32,Microsoft.Webstore.WstClient.WstFailoverMode,Microsoft.Webstore.WstClient.WstPartitionType)">
            <summary>
            Initializes a new instance of the WstContext class with the specified Deployment, partition,
            failover option, and partition type (logical/physical).
            </summary>
            <param name="deployment">Deployment Name</param>
            <param name="partition">partition index</param>
            <param name="failoverMode">failover mode</param>
            <param name="partitionType">WstPartitionType.Logical or .Physical</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.Clone">
            <summary>
            Create copy of this context.
            </summary>
            <returns>Copy of this WstContext</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.GetFullPath(Microsoft.Webstore.WstClient.WstPath,System.Boolean,System.String@,Microsoft.Webstore.MetaData.WebstoreFileshare@)">
            <summary>
            Internal helper to get full path given for this context given the relative path and access mode required.
            </summary>
            <param name="path">relative path on fileshare</param>
            <param name="updatesAllowed">Is this an operation that could update the fileshare</param>
            <param name="rootPath">output the share's root path</param>
            <param name="fileShareOut">output the WebstoreFileshare used</param>
            <returns>full path</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.GetFileShare(System.Boolean)">
            <summary>
            Helper on the WstContext to find a WebstoreFileshare that satisfies the context 
            </summary>
            <param name="updatesAllowed">Is this an operation that would allow udpates to the fileshare</param>
            <returns>WebstoreFileshare for context</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.HandleIOException(System.String,System.IO.IOException,System.Boolean)">
            <summary>
            HandleIOException.
            </summary>
            <param name="fullPath"></param>
            <param name="e"></param>
            <param name="fOkToRetry"></param>
            <returns>true if retry is OK</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.GetPath(Microsoft.Webstore.MetaData.WebstoreFileshare)">
            <summary>
            Gets the path "\\ + ServerName + \ + SharePath" of the given Fileshare.
            </summary>
            <param name="fileshare">Fileshare whose path to get.</param>
            <returns>Path "\\ + ServerName + \ + SharePath" indicated by the input file share.</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.Deployment">
            <summary>
            Gets or sets the Deployment Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.Partition">
            <summary>
            Gets or sets the partition index
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.FailoverMode">
            <summary>
            Gets or sets the failover mode
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.PartitionType">
            <summary>
            Gets or sets the WstPartitionType
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDirectory">
            <summary>
            WstDirectory exposes static methods for creating, moving, and enumerating 
            through directories and subdirectories.  (This is the Webstore equivalent 
            of the System.IO.Directory class).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.#ctor">
            <summary>
            Private constructor (Static only class)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.CreateDirectory(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory path to create.</param>
            <returns>A WstDirectoryInfo as specified by path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Delete(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Deletes an empty directory from a specified path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty. </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Delete(Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories in the directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Exists(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to test.</param>
            <returns>true if path refers to an existing directory; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the creation date and time of a directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <returns>A DateTime structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the creation date and time, in coordinated universal time (UTC) format, of a directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <returns>A DateTime structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetDirectories(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An array of type String containing the names of subdirectories in path. </returns>
            <remarks>This method is identical to GetDirectories(WstContext, String, String) 
            with the asterisk (*) specified as the search pattern.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetDirectories(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Gets an array of directories matching the specified search pattern from the current directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The parameter cannot end in two periods ("..") or contain two periods ("..") followed by 
            DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters 
            in InvalidPathChars.</param>
            <returns>A String array of directories matching the search pattern.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFiles(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the names of files in the specified directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>A String array of file names in the specified directory.</returns>
            <remarks>This method is identical to GetFiles(WstContext, String, String) 
            with the asterisk (*) specified as the search pattern.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFiles(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Returns the names of files in the specified directory that match the specified search pattern.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The parameter cannot end in two periods ("..") or contain two periods ("..") followed by 
            DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in 
            InvalidPathChars.</param>
            <returns>A String array containing the names of files in the specified directory that match the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFileSystemEntries(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>A String array containing the names of file system entries in the specified directory.</returns>
            <remarks>This method is identical to GetFileSystemEntries(WstContext, String, String) with the asterisk (*) specified as the search pattern.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFileSystemEntries(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Returns an array of file system entries matching the specified search criteria.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to be searched.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The searchPattern parameter cannot end in two periods ("..") or contain two periods ("..") 
            followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of 
            the characters in InvalidPathChars.</param>
            <returns>A String array of file system entries matching the search criteria.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last accessed. 
            This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last accessed. 
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last written to. 
            This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last written to. 
            This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetParent(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Retrieves the parent directory of the specified path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or a null reference (Nothing in Visual Basic) if path is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Move(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="context">Webstore context for source and destination</param>
            <param name="srcDirName">The path of the file or directory to move.</param>
            <param name="destDirName">The path to the new location for sourceDirName.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the creation date and time for the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">A DateTime containing the value to set for the creation date and time of path. 
            This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the creation date and time for the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">A DateTime containing the value to set for the creation date and time of path. 
            This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">A DateTime containing the value to set for the access date and time of path. 
            This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">A DateTime containing the value to set for the access date and time of path. 
            This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time a directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTime">The date and time the directory was last written to. 
            This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time a directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTime">The date and time the directory was last written to. 
            This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDirectoryInfo">
            <summary>
            Exposes instance methods for creating, moving, and enumerating through 
            directories and subdirectories.  (This is the Webstore equivalent to the
            System.IO.DirectoryInfo class).
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFileSystemInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and opening of files, 
            and aids in the creation of WstFileStream objects.  (This is the Webstore equivalent of the
            System.IO.FileInfo class).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the WstFileInfo class on the specified path/context.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A string specifying the path on which to create the WstFileInfo.</param>
            <param name="fileInfo"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.Delete">
            <summary>
            Permanently deletes a file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.ToString">
            <summary>
            Returns the original path that was passed by the user.
            </summary>
            <returns>Returns the original path that was passed by the user.</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Context">
            <summary>
            WstContext for this WstFileSystemInfo object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.WstFileShare">
            <summary>
            WebstoreFileshare used for this WstFileSystemInfo
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Attributes">
            <summary>
            Gets or sets the FileAttributes of the current FileSystemInfo
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current FileSystemInfo object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.CreationTimeUtc">
            <summary>
            Gets an instance of the parent directory.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Exists">
            <summary>
            Gets a value indicating whether a file or directory exists.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Extension">
            <summary>
            Gets the string representing the extension part of the file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastAccessTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastWriteTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Initializes a new instance of the WstDirectoryInfo class on the specified path/context.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A string specifying the path on which to create the WstDirectoryInfo.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.Create">
            <summary>
            Creates a directory.
            </summary>
            <remarks>If the directory already exists, this method does nothing.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.CreateSubdirectory(System.String)">
            <summary>
            Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class
            </summary>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
            <returns>The last directory specified in path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.Delete">
            <summary>
            Deletes this DirectoryInfo if it is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.Delete(System.Boolean)">
            <summary>
            Deletes this instance of a DirectoryInfo, specifying whether to delete subdirectories and files.
            </summary>
            <param name="recursive">true to delete this directory, its subdirectories, and all files; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <returns>An array of DirectoryInfo objects.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetDirectories(System.String)">
            <summary>
            Returns an array of directories in the current DirectoryInfo matching the given search criteria.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <returns>An array of type DirectoryInfo matching searchPattern.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFiles">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <returns>An array of type WstFileInfo</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFiles(System.String)">
            <summary>
            Returns a file list from the current directory matching the given searchPattern, such as "*.txt".
            </summary>
            <param name="searchPattern">The search string, such as "*.txt". </param>
            <returns>An array of type FileInfo.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFileSystemInfos">
            <summary>
            Returns a list of files and subdirectories from the current directory.
            </summary>
            <returns>An array of type WstFileSystemInfo</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>
            Returns a list of files and subdirectories from the current directory matching the given searchPattern, such as "*.txt".
            </summary>
            <param name="searchPattern">The search string, such as "*.txt". </param>
            <returns>An array of type FileInfo.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.MoveTo(System.String)">
            <summary>
            Moves a DirectoryInfo instance and its contents to a new path.
            </summary>
            <param name="destDirName">The name and path to which to move this directory. 
            The destination cannot be another disk volume or a directory with the identical name. 
            It can be an existing directory to which you want to add this directory as a subdirectory.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDirectoryInfo.Name">
            <summary>
            Gets the name of this DirectoryInfo instance.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDirectoryInfo.Parent">
            <summary>
            Gets the parent directory of a specified subdirectory.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDirectoryInfo.Root">
            <summary>
            Gets the root portion of a path.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFile">
            <summary>
            Provides static methods for the creation, copying, deletion, 
            moving, and opening of files, and aids in the creation of FileStream objects.
            WstFileStream is a thin wrapper over the .NET Framework FileStream object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.#ctor">
            <summary>
            Hide Constructor... all Static Methods
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.AppendText(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates a StreamWriter that appends UTF-8 encoded text to an existing file.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to the file to append to</param>
            <returns>A StreamWriter that appends UTF-8 encoded text to an existing file.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Copy(Microsoft.Webstore.WstClient.WstContext,System.String,Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="srcContext">Webstore source file context</param>
            <param name="srcPath">The file to copy.</param>
            <param name="destContext">Webstore destination file context</param>
            <param name="destPath">The name of the destination file. This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Copy(Microsoft.Webstore.WstClient.WstContext,System.String,Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="srcContext">Webstore source file context</param>
            <param name="srcPath">The file to copy (relative to Webstore context).</param>
            <param name="destContext">Webstore destination file context</param>
            <param name="destPath">The name of the destination file (relative to Webstore context). This cannot be a directory or an existing file.</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Create(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates a file in the specified path.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The path and name of the file to create (relative to Webstore context)</param>
            <returns>A WstFileStream that provides read/write access to the specified file.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Create(Microsoft.Webstore.WstClient.WstContext,System.String,System.Int32)">
            <summary>
            Creates a file in the specified path.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The path and name of the file to create (relative to Webstore context)</param>
            <param name="buffersize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>A WstFileStream that provides read/write access to the specified file.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.CreateText(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The file to be opened for writing (relative to Webstore context).</param>
            <returns>A StreamWriter that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Delete(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The name of the file to be deleted (relative to the Webstore context).</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Exists(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to check (relative to the Webstore context).</param>
            <returns>true if the caller has the required permissions and path contains the name 
            of an existing file; otherwise, false. This method also returns false if path is a 
            null reference (Nothing in Visual Basic) or a zero-length string. If the caller 
            does not have sufficient permissions to read the specified file, 
            no exception is thrown and the method returns false regardless of the existence of path.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetAttributes(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the FileAttributes of the file on the path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to the file (relative to the Webstore context).</param>
            <returns>The FileAttributes of the file on the path, or -1 if the path or file is not found.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>A DateTime structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>A DateTime structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last written to. This value is expressed in local time. </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last written to. This value is expressed in UTC time. </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Move(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="context">Webstore context for the source and destination paths</param>
            <param name="srcPath">The name of the file to move.</param>
            <param name="destPath">The new path for the file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Open(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode)">
            <summary>
            Opens a FileStream on the specified path with read/write access
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>A WstFileStream opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Open(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a FileStream on the specified path, having the specified mode with read, 
            write, or read/write access.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A FileAccess value that specifies the operations that can be performed on the file.</param>
            <returns>An unshared WstFileStream that provides access to the specified file, with the specified mode and access.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Open(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a FileStream on the specified path, having the specified mode with read, 
            write, or read/write access and the specified sharing option.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A FileAccess value that specifies the operations that can be performed on the file.</param>
            <param name="share">A FileShare value specifying the type of access other threads have to the file</param>
            <returns>A WstFileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.OpenRead(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only WstFileStream on the specified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.OpenText(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A StreamReader on the specified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.OpenWrite(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Opens an existing file for writing.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to be opened for writing.</param>
            <returns>A read/write, unshared FileStream object on the specified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetAttributes(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file on the specified path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes">The desired FileAttributes, such as Hidden, ReadOnly, Normal, and Archive.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the file was created.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="time">A DateTime containing the value to set for the creation date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="time">A DateTime containing the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last access date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), the specified file was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last access date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last write date and time of path. This value is expressed in local time. </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last write date and time of path. This value is expressed in UTC time. </param>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFileInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and opening of files, 
            and aids in the creation of WstFileStream objects.  (This is the Webstore equivalent of the
            System.IO.FileInfo class).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Initializes a new instance of the WstFileInfo class on the specified path/context.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A string specifying the path on which to create the WstFileInfo.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.AppendText">
            <summary>
            Creates a StreamWriter that appends text to the file represented by this instance of the FileInfo
            </summary>
            <returns>A new StreamWriter</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.CopyTo(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Copies an existing file to a new file, disallowing the overwriting of an existing file.
            </summary>
            <param name="destContext"></param>
            <param name="destPath">The name of the new file to copy to.</param>
            <returns>A new file with a fully qualified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.CopyTo(Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing the overwriting of an existing file.
            </summary>
            <param name="destContext"></param>
            <param name="destPath">The name of the new file to copy to.</param>
            <param name="overwrite">true to allow an existing file to be overwritten; otherwise, false. </param>
            <returns>A new file with a fully qualified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Create">
            <summary>
            Creates a file.
            </summary>
            <returns>A new file.</returns>
            <remarks>By default, full read/write access to new files is granted to all users.
            This method is a wrapper for the functionality provided by WstFile.Create.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.CreateText">
            <summary>
            Creates a StreamWriter that writes a new text file represented by this instance of the FileInfo
            </summary>
            <returns>A new StreamWriter</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Delete">
            <summary>
            Permanently deletes a file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="destPath">The path to move the file to, which can specify a different file name</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Open(System.IO.FileMode)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <returns>A file opened in the specified mode, with read/write access and unshared.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <returns>A WstFileStream object opened in the specified mode and access, and unshared.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <param name="share">A FileShare constant specifying the type of access other FileStream objects have to this file.</param>
            <returns>A WstFileStream object opened with the specified mode, access, and sharing options.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.OpenRead">
            <summary>
            Creates a read-only FileStream.
            </summary>
            <returns>A new read-only FileStream object.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.OpenText">
            <summary>
            Creates a StreamReader with UTF8 encoding that reads from an existing text file.
            </summary>
            <returns>A new StreamReader with UTF8 encoding.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.OpenWrite">
            <summary>
            Creates a write-only WstFileStream.
            </summary>
            <returns>A new write-only unshared WstFileStream object.</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.Directory">
            <summary>
            Gets a value indicating whether a file exists.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.DirectoryName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.Length">
            <summary>
            Gets the size of the current file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.Name">
            <summary>
            Overridden. Gets the name of the file.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFileStream">
            <summary>
            Exposes a Stream around a file, supporting both synchronous and asynchronous read and write operations.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path and creation mode.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, and read/write permission.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write permission, and sharing permission.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write and sharing permission, and buffer size.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
            <param name="buffersize">The desired buffer size in bytes. For bufferSize values between zero and eight, the actual buffer size is set to eight bytes.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
            <param name="buffersize">The desired buffer size in bytes. For bufferSize values between zero and eight, the actual buffer size is set to eight bytes.</param>
            <param name="useAsync">Specifies whether to use asynchronous I/O or synchronous I/O. 
            However, note that the underlying operating system might not support asynchronous I/O, 
            so when specifying true, the handle might be opened synchronously depending on the platform. 
            When opened asynchronously, the BeginRead and BeginWrite methods perform better on large 
            reads or writes, but they might be much slower for small reads or writes. If the application 
            is designed to take advantage of asynchronous I/O, set the useAsync parameter to true. 
            Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, 
            but using it without redesigning the application for asynchronous I/O can 
            decrease performance by as much as a factor of 10.
            </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="access"></param>
            <param name="share"></param>
            <param name="buffersize"></param>        
            <param name="FileFlagsAndAttributes"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.CreateNativeFileHandle(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.UInt32)">
            <summary>
            Sets the m_NativeFileHandle value.
            </summary>
            <param name="fullPath"></param>        
            <param name="mode"></param>
            <param name="access"></param>
            <param name="share"></param>
            <param name="buffersize"></param>        
            <param name="FileFlagsAndAttributes"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Overridden. Gets or sets the current position of this stream.
            </summary>
            <param name="array">The buffer to read data into.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="numBytes">The maximum number of bytes to read. </param>
            <param name="userCallback">The method to be called when the asynchronous read operation is completed.</param>
            <param name="stateObject">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An IAsyncResult that references the asynchronous read.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Overridden. Begins an asynchronous write.
            </summary>
            <param name="array">The buffer to write data to.</param>
            <param name="offset">The zero based byte offset in array at which to begin writing.</param>
            <param name="numBytes">The maximum number of bytes to write. </param>
            <param name="userCallback">The method to be called when the asynchronous write operation is completed.</param>
            <param name="stateObject">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <returns>An IAsyncResult that references the asynchronous write.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Close">
            <summary>
            Overridden. Closes the file and releases any resources associated with the current file stream.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.System#IDisposable#Dispose">
            <summary>
            Clear the resources used by this object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.EndRead(System.IAsyncResult)">
            <summary>
            Overridden. Waits for the pending asynchronous read to complete.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <returns>The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.EndWrite(System.IAsyncResult)">
            <summary>
            Overridden. Ends an asynchronous write, blocking until the I/O operation has completed.
            </summary>
            <param name="asyncResult">The pending asynchronous I/O request.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Flush">
            <summary>
            Overridden. Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Lock(System.Int64,System.Int64)">
            <summary>
            Prevents other processes from changing the FileStream while permitting read access.
            </summary>
            <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0). </param>
            <param name="length">The range to be locked.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overridden. Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.ReadByte">
            <summary>
            Overridden. Reads a byte from the file and advances the read position one byte.
            </summary>
            <returns>The byte cast to an int, or -1 if reading from the end of the stream.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Overridden. Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin, using a value of type SeekOrigin. </param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.SetLength(System.Int64)">
            <summary>
            Overridden. Sets the length of this stream to the given value.
            </summary>
            <param name="length">The new length of the stream. </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Unlock(System.Int64,System.Int64)">
            <summary>
            Allows access by other processes to all or part of a file that was previously locked.
            </summary>
            <param name="position">The beginning of the range to unlock. </param>
            <param name="length">The range to be unlocked.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overridden. Writes a block of bytes to this stream using data from a buffer.
            </summary>
            <param name="array">The array to which bytes are written.</param>
            <param name="offset">The byte offset in array at which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.WriteByte(System.Byte)">
            <summary>
            Overridden. Writes a byte to the current position in the file stream.
            </summary>
            <param name="bvalue">A byte to write to the stream.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.CanRead">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.CanSeek">
            <summary>
            Overridden. Gets a value indicating whether the current stream sup